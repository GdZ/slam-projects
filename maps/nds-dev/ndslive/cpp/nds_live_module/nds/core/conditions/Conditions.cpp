/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/conditions/ConditionTypeCode.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for ConditionTypeCode enumeration.
constexpr ::std::array<const char*, 51> EnumTraits<::nds::core::conditions::ConditionTypeCode>::names;
constexpr ::std::array<::nds::core::conditions::ConditionTypeCode, 51> EnumTraits<::nds::core::conditions::ConditionTypeCode>::values;
constexpr const char* EnumTraits<::nds::core::conditions::ConditionTypeCode>::enumName;

template <>
size_t enumToOrdinal(::nds::core::conditions::ConditionTypeCode value)
{
    switch (value)
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        return 0;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        return 1;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        return 2;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        return 3;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        return 4;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        return 5;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        return 6;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        return 7;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        return 8;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        return 9;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        return 10;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        return 11;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        return 12;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        return 13;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        return 14;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        return 15;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        return 16;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        return 17;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        return 18;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        return 19;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        return 20;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        return 21;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        return 22;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        return 23;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        return 24;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        return 25;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        return 26;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        return 27;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        return 28;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        return 29;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        return 30;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        return 31;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        return 32;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        return 33;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        return 34;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        return 35;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        return 36;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        return 37;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        return 38;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        return 39;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        return 40;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        return 41;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        return 42;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        return 43;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        return 44;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        return 45;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        return 46;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        return 47;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        return 48;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        return 49;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        return 50;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ConditionTypeCode: ") <<
                static_cast<typename ::std::underlying_type<::nds::core::conditions::ConditionTypeCode>::type>(value) << "!";
    }
}

template <>
::nds::core::conditions::ConditionTypeCode valueToEnum(
        typename ::std::underlying_type<::nds::core::conditions::ConditionTypeCode>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
    case UINT16_C(18):
    case UINT16_C(19):
    case UINT16_C(20):
    case UINT16_C(21):
    case UINT16_C(22):
    case UINT16_C(23):
    case UINT16_C(24):
    case UINT16_C(25):
    case UINT16_C(26):
    case UINT16_C(27):
    case UINT16_C(28):
    case UINT16_C(29):
    case UINT16_C(30):
    case UINT16_C(31):
    case UINT16_C(32):
    case UINT16_C(33):
    case UINT16_C(34):
    case UINT16_C(35):
    case UINT16_C(36):
    case UINT16_C(37):
    case UINT16_C(38):
    case UINT16_C(39):
    case UINT16_C(40):
    case UINT16_C(41):
    case UINT16_C(42):
    case UINT16_C(43):
    case UINT16_C(44):
    case UINT16_C(45):
    case UINT16_C(46):
    case UINT16_C(47):
    case UINT16_C(48):
    case UINT16_C(49):
    case UINT16_C(50):
        return static_cast<::nds::core::conditions::ConditionTypeCode>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ConditionTypeCode: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::core::conditions::ConditionTypeCode>(::nds::core::conditions::ConditionTypeCode value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::core::conditions::ConditionTypeCode value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::ConditionTypeCode>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::core::conditions::ConditionTypeCode)
{
    return UINT8_C(16);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::core::conditions::ConditionTypeCode value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::ConditionTypeCode>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::core::conditions::ConditionTypeCode value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::core::conditions::ConditionTypeCode value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::core::conditions::ConditionTypeCode read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::ConditionTypeCode>(
            static_cast<typename ::std::underlying_type<::nds::core::conditions::ConditionTypeCode>::type>(
                    in.readBits(UINT8_C(16))));
}

template <>
::nds::core::conditions::ConditionTypeCode read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::ConditionTypeCode>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::ConditionTypeCode>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::core::conditions::ConditionTypeCode value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(16));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::core::conditions::ConditionTypeCode value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::ConditionTypeCode>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/conditions/FuzzyTimeDomain.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for FuzzyTimeDomain enumeration.
constexpr ::std::array<const char*, 42> EnumTraits<::nds::core::conditions::FuzzyTimeDomain>::names;
constexpr ::std::array<::nds::core::conditions::FuzzyTimeDomain, 42> EnumTraits<::nds::core::conditions::FuzzyTimeDomain>::values;
constexpr const char* EnumTraits<::nds::core::conditions::FuzzyTimeDomain>::enumName;

template <>
size_t enumToOrdinal(::nds::core::conditions::FuzzyTimeDomain value)
{
    switch (value)
    {
    case ::nds::core::conditions::FuzzyTimeDomain::EXTERNAL:
        return 0;
    case ::nds::core::conditions::FuzzyTimeDomain::DAWN:
        return 1;
    case ::nds::core::conditions::FuzzyTimeDomain::DUSK:
        return 2;
    case ::nds::core::conditions::FuzzyTimeDomain::SCHOOL:
        return 3;
    case ::nds::core::conditions::FuzzyTimeDomain::HOLIDAY:
        return 4;
    case ::nds::core::conditions::FuzzyTimeDomain::WINTER:
        return 5;
    case ::nds::core::conditions::FuzzyTimeDomain::SPRING:
        return 6;
    case ::nds::core::conditions::FuzzyTimeDomain::SUMMER:
        return 7;
    case ::nds::core::conditions::FuzzyTimeDomain::AUTUMN:
        return 8;
    case ::nds::core::conditions::FuzzyTimeDomain::HIGH_TIDE:
        return 9;
    case ::nds::core::conditions::FuzzyTimeDomain::LOW_TIDE:
        return 10;
    case ::nds::core::conditions::FuzzyTimeDomain::HIGH_WATER:
        return 11;
    case ::nds::core::conditions::FuzzyTimeDomain::LOW_WATER:
        return 12;
    case ::nds::core::conditions::FuzzyTimeDomain::WET:
        return 13;
    case ::nds::core::conditions::FuzzyTimeDomain::DRY:
        return 14;
    case ::nds::core::conditions::FuzzyTimeDomain::PEAK_HOURS:
        return 15;
    case ::nds::core::conditions::FuzzyTimeDomain::OFF_PEAK_HOURS:
        return 16;
    case ::nds::core::conditions::FuzzyTimeDomain::MORNING:
        return 17;
    case ::nds::core::conditions::FuzzyTimeDomain::EVENING_RUSH_HOUR:
        return 18;
    case ::nds::core::conditions::FuzzyTimeDomain::MORNING_RUSH_HOUR:
        return 19;
    case ::nds::core::conditions::FuzzyTimeDomain::DAY:
        return 20;
    case ::nds::core::conditions::FuzzyTimeDomain::NIGHT:
        return 21;
    case ::nds::core::conditions::FuzzyTimeDomain::NON_SCHOOL_HOURS:
        return 22;
    case ::nds::core::conditions::FuzzyTimeDomain::SCHOOL_HOURS:
        return 23;
    case ::nds::core::conditions::FuzzyTimeDomain::WHEN_CHILDREN_ARE_PRESENT:
        return 24;
    case ::nds::core::conditions::FuzzyTimeDomain::SUNRISE_TILL_SUNSET:
        return 25;
    case ::nds::core::conditions::FuzzyTimeDomain::SUNSET_TILL_SUNRISE:
        return 26;
    case ::nds::core::conditions::FuzzyTimeDomain::AFTERNOON:
        return 27;
    case ::nds::core::conditions::FuzzyTimeDomain::EVENT:
        return 28;
    case ::nds::core::conditions::FuzzyTimeDomain::MARKET_HOURS:
        return 29;
    case ::nds::core::conditions::FuzzyTimeDomain::UNDEFINED_OCCASION:
        return 30;
    case ::nds::core::conditions::FuzzyTimeDomain::RACE_DAYS:
        return 31;
    case ::nds::core::conditions::FuzzyTimeDomain::POLLUTION:
        return 32;
    case ::nds::core::conditions::FuzzyTimeDomain::EVENING:
        return 33;
    case ::nds::core::conditions::FuzzyTimeDomain::BUSINESS_HOURS:
        return 34;
    case ::nds::core::conditions::FuzzyTimeDomain::SKI_SEASON:
        return 35;
    case ::nds::core::conditions::FuzzyTimeDomain::TOURIST_SEASON:
        return 36;
    case ::nds::core::conditions::FuzzyTimeDomain::CHURCH_HOURS:
        return 37;
    case ::nds::core::conditions::FuzzyTimeDomain::SUMMER_SCHOOL:
        return 38;
    case ::nds::core::conditions::FuzzyTimeDomain::FUNERAL:
        return 39;
    case ::nds::core::conditions::FuzzyTimeDomain::HUNTING_SEASON:
        return 40;
    case ::nds::core::conditions::FuzzyTimeDomain::MILITARY_EXERCISE:
        return 41;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration FuzzyTimeDomain: ") <<
                static_cast<typename ::std::underlying_type<::nds::core::conditions::FuzzyTimeDomain>::type>(value) << "!";
    }
}

template <>
::nds::core::conditions::FuzzyTimeDomain valueToEnum(
        typename ::std::underlying_type<::nds::core::conditions::FuzzyTimeDomain>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
    case UINT8_C(5):
    case UINT8_C(6):
    case UINT8_C(7):
    case UINT8_C(8):
    case UINT8_C(9):
    case UINT8_C(10):
    case UINT8_C(11):
    case UINT8_C(12):
    case UINT8_C(13):
    case UINT8_C(14):
    case UINT8_C(15):
    case UINT8_C(16):
    case UINT8_C(17):
    case UINT8_C(18):
    case UINT8_C(19):
    case UINT8_C(20):
    case UINT8_C(21):
    case UINT8_C(22):
    case UINT8_C(23):
    case UINT8_C(24):
    case UINT8_C(25):
    case UINT8_C(26):
    case UINT8_C(27):
    case UINT8_C(28):
    case UINT8_C(29):
    case UINT8_C(30):
    case UINT8_C(31):
    case UINT8_C(32):
    case UINT8_C(33):
    case UINT8_C(34):
    case UINT8_C(35):
    case UINT8_C(36):
    case UINT8_C(37):
    case UINT8_C(38):
    case UINT8_C(39):
    case UINT8_C(40):
    case UINT8_C(41):
        return static_cast<::nds::core::conditions::FuzzyTimeDomain>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration FuzzyTimeDomain: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::core::conditions::FuzzyTimeDomain>(::nds::core::conditions::FuzzyTimeDomain value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::core::conditions::FuzzyTimeDomain value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::FuzzyTimeDomain>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::core::conditions::FuzzyTimeDomain)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::core::conditions::FuzzyTimeDomain value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::FuzzyTimeDomain>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::core::conditions::FuzzyTimeDomain value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::core::conditions::FuzzyTimeDomain value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::core::conditions::FuzzyTimeDomain read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::FuzzyTimeDomain>(
            static_cast<typename ::std::underlying_type<::nds::core::conditions::FuzzyTimeDomain>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::core::conditions::FuzzyTimeDomain read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::FuzzyTimeDomain>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::FuzzyTimeDomain>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::core::conditions::FuzzyTimeDomain value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::core::conditions::FuzzyTimeDomain value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::FuzzyTimeDomain>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/conditions/Weather.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for Weather enumeration.
constexpr ::std::array<const char*, 9> EnumTraits<::nds::core::conditions::Weather>::names;
constexpr ::std::array<::nds::core::conditions::Weather, 9> EnumTraits<::nds::core::conditions::Weather>::values;
constexpr const char* EnumTraits<::nds::core::conditions::Weather>::enumName;

template <>
size_t enumToOrdinal(::nds::core::conditions::Weather value)
{
    switch (value)
    {
    case ::nds::core::conditions::Weather::SNOW:
        return 0;
    case ::nds::core::conditions::Weather::RAIN:
        return 1;
    case ::nds::core::conditions::Weather::SUNSHINE:
        return 2;
    case ::nds::core::conditions::Weather::FOG:
        return 3;
    case ::nds::core::conditions::Weather::THAW:
        return 4;
    case ::nds::core::conditions::Weather::STRONG_WIND:
        return 5;
    case ::nds::core::conditions::Weather::AVALANCHE:
        return 6;
    case ::nds::core::conditions::Weather::INDEPENDENT:
        return 7;
    case ::nds::core::conditions::Weather::ICE:
        return 8;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Weather: ") <<
                static_cast<typename ::std::underlying_type<::nds::core::conditions::Weather>::type>(value) << "!";
    }
}

template <>
::nds::core::conditions::Weather valueToEnum(
        typename ::std::underlying_type<::nds::core::conditions::Weather>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
    case UINT8_C(5):
    case UINT8_C(6):
    case UINT8_C(7):
    case UINT8_C(8):
        return static_cast<::nds::core::conditions::Weather>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Weather: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::core::conditions::Weather>(::nds::core::conditions::Weather value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::core::conditions::Weather value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Weather>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::core::conditions::Weather)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::core::conditions::Weather value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Weather>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::core::conditions::Weather value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::core::conditions::Weather value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::core::conditions::Weather read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::Weather>(
            static_cast<typename ::std::underlying_type<::nds::core::conditions::Weather>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::core::conditions::Weather read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::Weather>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Weather>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::core::conditions::Weather value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::core::conditions::Weather value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Weather>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/conditions/Visibility.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for Visibility enumeration.
constexpr ::std::array<const char*, 5> EnumTraits<::nds::core::conditions::Visibility>::names;
constexpr ::std::array<::nds::core::conditions::Visibility, 5> EnumTraits<::nds::core::conditions::Visibility>::values;
constexpr const char* EnumTraits<::nds::core::conditions::Visibility>::enumName;

template <>
size_t enumToOrdinal(::nds::core::conditions::Visibility value)
{
    switch (value)
    {
    case ::nds::core::conditions::Visibility::CLEAR:
        return 0;
    case ::nds::core::conditions::Visibility::LESS_THAN_5M:
        return 1;
    case ::nds::core::conditions::Visibility::LESS_THAN_25M:
        return 2;
    case ::nds::core::conditions::Visibility::LESS_THAN_50M:
        return 3;
    case ::nds::core::conditions::Visibility::LESS_THAN_100M:
        return 4;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Visibility: ") <<
                static_cast<typename ::std::underlying_type<::nds::core::conditions::Visibility>::type>(value) << "!";
    }
}

template <>
::nds::core::conditions::Visibility valueToEnum(
        typename ::std::underlying_type<::nds::core::conditions::Visibility>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
        return static_cast<::nds::core::conditions::Visibility>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Visibility: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::core::conditions::Visibility>(::nds::core::conditions::Visibility value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::core::conditions::Visibility value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Visibility>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::core::conditions::Visibility)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::core::conditions::Visibility value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Visibility>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::core::conditions::Visibility value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::core::conditions::Visibility value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::core::conditions::Visibility read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::Visibility>(
            static_cast<typename ::std::underlying_type<::nds::core::conditions::Visibility>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::core::conditions::Visibility read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::Visibility>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Visibility>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::core::conditions::Visibility value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::core::conditions::Visibility value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Visibility>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/conditions/Surface.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for Surface enumeration.
constexpr ::std::array<const char*, 30> EnumTraits<::nds::core::conditions::Surface>::names;
constexpr ::std::array<::nds::core::conditions::Surface, 30> EnumTraits<::nds::core::conditions::Surface>::values;
constexpr const char* EnumTraits<::nds::core::conditions::Surface>::enumName;

template <>
size_t enumToOrdinal(::nds::core::conditions::Surface value)
{
    switch (value)
    {
    case ::nds::core::conditions::Surface::CLEAR:
        return 0;
    case ::nds::core::conditions::Surface::SNOW_COVERED:
        return 1;
    case ::nds::core::conditions::Surface::ICE:
        return 2;
    case ::nds::core::conditions::Surface::RAIN_COVERED:
        return 3;
    case ::nds::core::conditions::Surface::HAZARDOUS:
        return 4;
    case ::nds::core::conditions::Surface::FLOODING:
        return 5;
    case ::nds::core::conditions::Surface::AQUAPLANING:
        return 6;
    case ::nds::core::conditions::Surface::SURFACE_WATER_HAZARD:
        return 7;
    case ::nds::core::conditions::Surface::SLIPPERY_ROAD:
        return 8;
    case ::nds::core::conditions::Surface::MUD_ON_ROAD:
        return 9;
    case ::nds::core::conditions::Surface::LOOSE_CHIPPINGS:
        return 10;
    case ::nds::core::conditions::Surface::OIL_ON_ROAD:
        return 11;
    case ::nds::core::conditions::Surface::PETROL_ON_ROAD:
        return 12;
    case ::nds::core::conditions::Surface::BLACK_ICE:
        return 13;
    case ::nds::core::conditions::Surface::SNOW_DRIFTS:
        return 14;
    case ::nds::core::conditions::Surface::ICY_PATCHES:
        return 15;
    case ::nds::core::conditions::Surface::OBJECTS_ON_ROAD:
        return 16;
    case ::nds::core::conditions::Surface::SHED_LOADS:
        return 17;
    case ::nds::core::conditions::Surface::FALLEN_TREES:
        return 18;
    case ::nds::core::conditions::Surface::AVALANCHES:
        return 19;
    case ::nds::core::conditions::Surface::ROCKS:
        return 20;
    case ::nds::core::conditions::Surface::LANDSLIPS:
        return 21;
    case ::nds::core::conditions::Surface::ANIMALS_ON_ROAD:
        return 22;
    case ::nds::core::conditions::Surface::PEOPLE_ON_ROAD:
        return 23;
    case ::nds::core::conditions::Surface::CHILDREN_ON_ROAD:
        return 24;
    case ::nds::core::conditions::Surface::CYCLISTS_ON_ROAD:
        return 25;
    case ::nds::core::conditions::Surface::LARGE_ANIMALS_ON_ROAD:
        return 26;
    case ::nds::core::conditions::Surface::HERD_OF_ANIMALS_ON_ROAD:
        return 27;
    case ::nds::core::conditions::Surface::STONE_THROWING_PERSONS:
        return 28;
    case ::nds::core::conditions::Surface::BROKEN_DOWN_VEHICLES:
        return 29;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Surface: ") <<
                static_cast<typename ::std::underlying_type<::nds::core::conditions::Surface>::type>(value) << "!";
    }
}

template <>
::nds::core::conditions::Surface valueToEnum(
        typename ::std::underlying_type<::nds::core::conditions::Surface>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
    case UINT8_C(5):
    case UINT8_C(6):
    case UINT8_C(7):
    case UINT8_C(8):
    case UINT8_C(9):
    case UINT8_C(10):
    case UINT8_C(11):
    case UINT8_C(12):
    case UINT8_C(13):
    case UINT8_C(14):
    case UINT8_C(15):
    case UINT8_C(16):
    case UINT8_C(17):
    case UINT8_C(18):
    case UINT8_C(19):
    case UINT8_C(20):
    case UINT8_C(21):
    case UINT8_C(22):
    case UINT8_C(23):
    case UINT8_C(24):
    case UINT8_C(25):
    case UINT8_C(26):
    case UINT8_C(27):
    case UINT8_C(28):
    case UINT8_C(29):
        return static_cast<::nds::core::conditions::Surface>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Surface: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::core::conditions::Surface>(::nds::core::conditions::Surface value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::core::conditions::Surface value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Surface>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::core::conditions::Surface)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::core::conditions::Surface value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Surface>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::core::conditions::Surface value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::core::conditions::Surface value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::core::conditions::Surface read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::Surface>(
            static_cast<typename ::std::underlying_type<::nds::core::conditions::Surface>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::core::conditions::Surface read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::Surface>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Surface>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::core::conditions::Surface value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::core::conditions::Surface value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::conditions::Surface>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/conditions/OccupancyCount.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for OccupancyCount enumeration.
constexpr ::std::array<const char*, 7> EnumTraits<::nds::core::conditions::OccupancyCount>::names;
constexpr ::std::array<::nds::core::conditions::OccupancyCount, 7> EnumTraits<::nds::core::conditions::OccupancyCount>::values;
constexpr const char* EnumTraits<::nds::core::conditions::OccupancyCount>::enumName;

template <>
size_t enumToOrdinal(::nds::core::conditions::OccupancyCount value)
{
    switch (value)
    {
    case ::nds::core::conditions::OccupancyCount::TWO_PERSONS:
        return 0;
    case ::nds::core::conditions::OccupancyCount::THREE_PERSONS:
        return 1;
    case ::nds::core::conditions::OccupancyCount::FOUR_PERSONS:
        return 2;
    case ::nds::core::conditions::OccupancyCount::FIVE_PERSONS:
        return 3;
    case ::nds::core::conditions::OccupancyCount::SIX_PERSONS:
        return 4;
    case ::nds::core::conditions::OccupancyCount::SEVEN_PERSONS:
        return 5;
    case ::nds::core::conditions::OccupancyCount::EIGHT_PERSONS:
        return 6;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration OccupancyCount: ") <<
                static_cast<typename ::std::underlying_type<::nds::core::conditions::OccupancyCount>::type>(value) << "!";
    }
}

template <>
::nds::core::conditions::OccupancyCount valueToEnum(
        typename ::std::underlying_type<::nds::core::conditions::OccupancyCount>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
    case UINT8_C(5):
    case UINT8_C(6):
        return static_cast<::nds::core::conditions::OccupancyCount>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration OccupancyCount: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::core::conditions::OccupancyCount>(::nds::core::conditions::OccupancyCount value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::core::conditions::OccupancyCount value)
{
    context.init<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::core::conditions::OccupancyCount>::type, UINT8_C(3)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::core::conditions::OccupancyCount)
{
    return UINT8_C(3);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::core::conditions::OccupancyCount value)
{
    return context.bitSizeOf<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::core::conditions::OccupancyCount>::type, UINT8_C(3)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::core::conditions::OccupancyCount value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::core::conditions::OccupancyCount value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::core::conditions::OccupancyCount read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::OccupancyCount>(
            static_cast<typename ::std::underlying_type<::nds::core::conditions::OccupancyCount>::type>(
                    in.readBits(UINT8_C(3))));
}

template <>
::nds::core::conditions::OccupancyCount read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::conditions::OccupancyCount>(context.read<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::core::conditions::OccupancyCount>::type, UINT8_C(3)>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::core::conditions::OccupancyCount value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(3));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::core::conditions::OccupancyCount value)
{
    context.write<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::core::conditions::OccupancyCount>::type, UINT8_C(3)>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/TimeRangeOfDay.h>

namespace nds
{
namespace core
{
namespace conditions
{

TimeRangeOfDay::TimeRangeOfDay(const allocator_type& allocator) noexcept :
        m_startTime_(allocator),
        m_endTime_(allocator),
        m_isInclusive_(bool())
{
}

TimeRangeOfDay::TimeRangeOfDay(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_startTime_(readStartTime(in, allocator)),
        m_endTime_(readEndTime(in, allocator)),
        m_isInclusive_(readIsInclusive(in))
{
}

TimeRangeOfDay::TimeRangeOfDay(TimeRangeOfDay::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_startTime_(readStartTime(context, in, allocator)),
        m_endTime_(readEndTime(context, in, allocator)),
        m_isInclusive_(readIsInclusive(in))
{
}

TimeRangeOfDay::TimeRangeOfDay(::zserio::PropagateAllocatorT,
        const TimeRangeOfDay& other, const allocator_type& allocator) :
        m_startTime_(::zserio::allocatorPropagatingCopy(other.m_startTime_, allocator)),
        m_endTime_(::zserio::allocatorPropagatingCopy(other.m_endTime_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::conditions::TimeOfDay& TimeRangeOfDay::getStartTime()
{
    return m_startTime_;
}

const ::nds::core::conditions::TimeOfDay& TimeRangeOfDay::getStartTime() const
{
    return m_startTime_;
}

void TimeRangeOfDay::setStartTime(const ::nds::core::conditions::TimeOfDay& startTime_)
{
    m_startTime_ = startTime_;
}

void TimeRangeOfDay::setStartTime(::nds::core::conditions::TimeOfDay&& startTime_)
{
    m_startTime_ = ::std::move(startTime_);
}

::nds::core::conditions::TimeOfDay& TimeRangeOfDay::getEndTime()
{
    return m_endTime_;
}

const ::nds::core::conditions::TimeOfDay& TimeRangeOfDay::getEndTime() const
{
    return m_endTime_;
}

void TimeRangeOfDay::setEndTime(const ::nds::core::conditions::TimeOfDay& endTime_)
{
    m_endTime_ = endTime_;
}

void TimeRangeOfDay::setEndTime(::nds::core::conditions::TimeOfDay&& endTime_)
{
    m_endTime_ = ::std::move(endTime_);
}

bool TimeRangeOfDay::getIsInclusive() const
{
    return m_isInclusive_;
}

void TimeRangeOfDay::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void TimeRangeOfDay::initPackingContext(TimeRangeOfDay::ZserioPackingContext& context) const
{
    m_startTime_.initPackingContext(context.getStartTime());
    m_endTime_.initPackingContext(context.getEndTime());
}

size_t TimeRangeOfDay::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_startTime_.bitSizeOf(endBitPosition);
    endBitPosition += m_endTime_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TimeRangeOfDay::bitSizeOf(TimeRangeOfDay::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_startTime_.bitSizeOf(context.getStartTime(), endBitPosition);
    endBitPosition += m_endTime_.bitSizeOf(context.getEndTime(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TimeRangeOfDay::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_startTime_.initializeOffsets(endBitPosition);
    endBitPosition = m_endTime_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t TimeRangeOfDay::initializeOffsets(TimeRangeOfDay::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_startTime_.initializeOffsets(context.getStartTime(), endBitPosition);
    endBitPosition = m_endTime_.initializeOffsets(context.getEndTime(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool TimeRangeOfDay::operator==(const TimeRangeOfDay& other) const
{
    if (this != &other)
    {
        return
                (m_startTime_ == other.m_startTime_) &&
                (m_endTime_ == other.m_endTime_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t TimeRangeOfDay::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_startTime_);
    result = ::zserio::calcHashCode(result, m_endTime_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void TimeRangeOfDay::write(::zserio::BitStreamWriter& out) const
{
    m_startTime_.write(out);
    m_endTime_.write(out);
    out.writeBool(m_isInclusive_);
}

void TimeRangeOfDay::write(TimeRangeOfDay::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_startTime_.write(context.getStartTime(), out);
    m_endTime_.write(context.getEndTime(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::conditions::TimeOfDay TimeRangeOfDay::readStartTime(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::TimeOfDay(in, allocator);
}

::nds::core::conditions::TimeOfDay TimeRangeOfDay::readStartTime(TimeRangeOfDay::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::conditions::TimeOfDay(context.getStartTime(), in, allocator);
}
::nds::core::conditions::TimeOfDay TimeRangeOfDay::readEndTime(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::TimeOfDay(in, allocator);
}

::nds::core::conditions::TimeOfDay TimeRangeOfDay::readEndTime(TimeRangeOfDay::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::conditions::TimeOfDay(context.getEndTime(), in, allocator);
}
bool TimeRangeOfDay::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>

#include <nds/core/conditions/TimeOfDay.h>

namespace nds
{
namespace core
{
namespace conditions
{

TimeOfDay::TimeOfDay(const allocator_type&) noexcept :
        m_hours_(uint8_t()),
        m_minutes_(uint8_t())
{
}

TimeOfDay::TimeOfDay(::zserio::BitStreamReader& in, const allocator_type&) :
        m_hours_(readHours(in)),
        m_minutes_(readMinutes(in))
{
}

TimeOfDay::TimeOfDay(TimeOfDay::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_hours_(readHours(context, in)),
        m_minutes_(readMinutes(context, in))
{
}

TimeOfDay::TimeOfDay(::zserio::PropagateAllocatorT,
        const TimeOfDay& other, const allocator_type& allocator) :
        m_hours_(::zserio::allocatorPropagatingCopy(other.m_hours_, allocator)),
        m_minutes_(::zserio::allocatorPropagatingCopy(other.m_minutes_, allocator))
{
}

uint8_t TimeOfDay::getHours() const
{
    return m_hours_;
}

void TimeOfDay::setHours(uint8_t hours_)
{
    m_hours_ = hours_;
}

uint8_t TimeOfDay::getMinutes() const
{
    return m_minutes_;
}

void TimeOfDay::setMinutes(uint8_t minutes_)
{
    m_minutes_ = minutes_;
}

void TimeOfDay::initPackingContext(TimeOfDay::ZserioPackingContext& context) const
{
    context.getHours().init<::zserio::StdIntArrayTraits<uint8_t>>(m_hours_);
    context.getMinutes().init<::zserio::StdIntArrayTraits<uint8_t>>(m_minutes_);
}

size_t TimeOfDay::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);

    return endBitPosition - bitPosition;
}

size_t TimeOfDay::bitSizeOf(TimeOfDay::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getHours().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_hours_);
    endBitPosition += context.getMinutes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_minutes_);

    return endBitPosition - bitPosition;
}

size_t TimeOfDay::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);

    return endBitPosition;
}

size_t TimeOfDay::initializeOffsets(TimeOfDay::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getHours().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_hours_);
    endBitPosition += context.getMinutes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_minutes_);

    return endBitPosition;
}

bool TimeOfDay::operator==(const TimeOfDay& other) const
{
    if (this != &other)
    {
        return
                (m_hours_ == other.m_hours_) &&
                (m_minutes_ == other.m_minutes_);
    }

    return true;
}

uint32_t TimeOfDay::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_hours_);
    result = ::zserio::calcHashCode(result, m_minutes_);

    return result;
}

void TimeOfDay::write(::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getHours() <= 23))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeOfDay.hours!");
    out.writeBits(m_hours_, UINT8_C(8));

    // check constraint
    if (!(getMinutes() <= 59))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeOfDay.minutes!");
    out.writeBits(m_minutes_, UINT8_C(8));
}

void TimeOfDay::write(TimeOfDay::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getHours() <= 23))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeOfDay.hours!");
    context.getHours().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_hours_);

    // check constraint
    if (!(getMinutes() <= 59))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeOfDay.minutes!");
    context.getMinutes().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_minutes_);
}

uint8_t TimeOfDay::readHours(::zserio::BitStreamReader& in)
{
    uint8_t readField = static_cast<uint8_t>(in.readBits(UINT8_C(8)));
    // check constraint
    if (!(readField <= 23))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeOfDay.hours!");

    return readField;
}

uint8_t TimeOfDay::readHours(TimeOfDay::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint8_t readField = context.getHours().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
    // check constraint
    if (!(readField <= 23))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeOfDay.hours!");

    return readField;
}
uint8_t TimeOfDay::readMinutes(::zserio::BitStreamReader& in)
{
    uint8_t readField = static_cast<uint8_t>(in.readBits(UINT8_C(8)));
    // check constraint
    if (!(readField <= 59))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeOfDay.minutes!");

    return readField;
}

uint8_t TimeOfDay::readMinutes(TimeOfDay::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint8_t readField = context.getMinutes().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
    // check constraint
    if (!(readField <= 59))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeOfDay.minutes!");

    return readField;
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/TimeRangeOfWeekDays.h>

namespace nds
{
namespace core
{
namespace conditions
{

TimeRangeOfWeekDays::TimeRangeOfWeekDays(const allocator_type& allocator) noexcept :
        m_rangeOfWeekDay_(allocator)
{
}

TimeRangeOfWeekDays::TimeRangeOfWeekDays(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_rangeOfWeekDay_(readRangeOfWeekDay(in, allocator))
{
}

TimeRangeOfWeekDays::TimeRangeOfWeekDays(TimeRangeOfWeekDays::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_rangeOfWeekDay_(readRangeOfWeekDay(context, in, allocator))
{
}

TimeRangeOfWeekDays::TimeRangeOfWeekDays(::zserio::PropagateAllocatorT,
        const TimeRangeOfWeekDays& other, const allocator_type& allocator) :
        m_rangeOfWeekDay_(::zserio::allocatorPropagatingCopy(other.m_rangeOfWeekDay_, allocator))
{
}

::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& TimeRangeOfWeekDays::getRangeOfWeekDay()
{
    return m_rangeOfWeekDay_.getRawArray();
}

const ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& TimeRangeOfWeekDays::getRangeOfWeekDay() const
{
    return m_rangeOfWeekDay_.getRawArray();
}

void TimeRangeOfWeekDays::setRangeOfWeekDay(const ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& rangeOfWeekDay_)
{
    m_rangeOfWeekDay_ = ZserioArrayType_rangeOfWeekDay(rangeOfWeekDay_);
}

void TimeRangeOfWeekDays::setRangeOfWeekDay(::zserio::vector<::nds::core::conditions::TimeRangeOfDay>&& rangeOfWeekDay_)
{
    m_rangeOfWeekDay_ = ZserioArrayType_rangeOfWeekDay(std::move(rangeOfWeekDay_));
}

void TimeRangeOfWeekDays::initPackingContext(TimeRangeOfWeekDays::ZserioPackingContext&) const
{
}

size_t TimeRangeOfWeekDays::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_rangeOfWeekDay_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t TimeRangeOfWeekDays::bitSizeOf(TimeRangeOfWeekDays::ZserioPackingContext&, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_rangeOfWeekDay_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t TimeRangeOfWeekDays::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_rangeOfWeekDay_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t TimeRangeOfWeekDays::initializeOffsets(TimeRangeOfWeekDays::ZserioPackingContext&, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_rangeOfWeekDay_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool TimeRangeOfWeekDays::operator==(const TimeRangeOfWeekDays& other) const
{
    if (this != &other)
    {
        return
                (m_rangeOfWeekDay_ == other.m_rangeOfWeekDay_);
    }

    return true;
}

uint32_t TimeRangeOfWeekDays::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_rangeOfWeekDay_);

    return result;
}

void TimeRangeOfWeekDays::write(::zserio::BitStreamWriter& out) const
{
    // check array length
    if (m_rangeOfWeekDay_.getRawArray().size() != static_cast<size_t>(7))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field TimeRangeOfWeekDays.rangeOfWeekDay: ") <<
                m_rangeOfWeekDay_.getRawArray().size() << " != " <<
                static_cast<size_t>(7) << "!";
    }
    m_rangeOfWeekDay_.write(*this, out);
}

void TimeRangeOfWeekDays::write(TimeRangeOfWeekDays::ZserioPackingContext&, ::zserio::BitStreamWriter& out) const
{
    // check array length
    if (m_rangeOfWeekDay_.getRawArray().size() != static_cast<size_t>(7))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field TimeRangeOfWeekDays.rangeOfWeekDay: ") <<
                m_rangeOfWeekDay_.getRawArray().size() << " != " <<
                static_cast<size_t>(7) << "!";
    }
    m_rangeOfWeekDay_.writePacked(*this, out);
}

void TimeRangeOfWeekDays::ZserioElementFactory_rangeOfWeekDay::create(TimeRangeOfWeekDays&        ,
        ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void TimeRangeOfWeekDays::ZserioElementFactory_rangeOfWeekDay::create(TimeRangeOfWeekDays&        ,
        ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& array,
        ::nds::core::conditions::TimeRangeOfDay::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

TimeRangeOfWeekDays::ZserioArrayType_rangeOfWeekDay TimeRangeOfWeekDays::readRangeOfWeekDay(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_rangeOfWeekDay readField(allocator);
    readField.read(*this, in, static_cast<size_t>(7));

    return readField;
}

TimeRangeOfWeekDays::ZserioArrayType_rangeOfWeekDay TimeRangeOfWeekDays::readRangeOfWeekDay(TimeRangeOfWeekDays::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_rangeOfWeekDay readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(7));

    return readField;
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/TimeRangeOfWeek.h>

namespace nds
{
namespace core
{
namespace conditions
{

TimeRangeOfWeek::TimeRangeOfWeek(const allocator_type&) noexcept :
        m_startTime_(::nds::core::conditions::TimeOfWeek()),
        m_endTime_(::nds::core::conditions::TimeOfWeek())
{
}

TimeRangeOfWeek::TimeRangeOfWeek(::zserio::BitStreamReader& in, const allocator_type&) :
        m_startTime_(readStartTime(in)),
        m_endTime_(readEndTime(in))
{
}

TimeRangeOfWeek::TimeRangeOfWeek(TimeRangeOfWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_startTime_(readStartTime(context, in)),
        m_endTime_(readEndTime(context, in))
{
}

TimeRangeOfWeek::TimeRangeOfWeek(::zserio::PropagateAllocatorT,
        const TimeRangeOfWeek& other, const allocator_type& allocator) :
        m_startTime_(::zserio::allocatorPropagatingCopy(other.m_startTime_, allocator)),
        m_endTime_(::zserio::allocatorPropagatingCopy(other.m_endTime_, allocator))
{
}

::nds::core::conditions::TimeOfWeek TimeRangeOfWeek::getStartTime() const
{
    return m_startTime_;
}

void TimeRangeOfWeek::setStartTime(::nds::core::conditions::TimeOfWeek startTime_)
{
    m_startTime_ = startTime_;
}

::nds::core::conditions::TimeOfWeek TimeRangeOfWeek::getEndTime() const
{
    return m_endTime_;
}

void TimeRangeOfWeek::setEndTime(::nds::core::conditions::TimeOfWeek endTime_)
{
    m_endTime_ = endTime_;
}

void TimeRangeOfWeek::initPackingContext(TimeRangeOfWeek::ZserioPackingContext& context) const
{
    context.getStartTime().init<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(m_startTime_);
    context.getEndTime().init<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(m_endTime_);
}

size_t TimeRangeOfWeek::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(14);
    endBitPosition += UINT8_C(14);

    return endBitPosition - bitPosition;
}

size_t TimeRangeOfWeek::bitSizeOf(TimeRangeOfWeek::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getStartTime().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(m_startTime_);
    endBitPosition += context.getEndTime().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(m_endTime_);

    return endBitPosition - bitPosition;
}

size_t TimeRangeOfWeek::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(14);
    endBitPosition += UINT8_C(14);

    return endBitPosition;
}

size_t TimeRangeOfWeek::initializeOffsets(TimeRangeOfWeek::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getStartTime().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(m_startTime_);
    endBitPosition += context.getEndTime().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(m_endTime_);

    return endBitPosition;
}

bool TimeRangeOfWeek::operator==(const TimeRangeOfWeek& other) const
{
    if (this != &other)
    {
        return
                (m_startTime_ == other.m_startTime_) &&
                (m_endTime_ == other.m_endTime_);
    }

    return true;
}

uint32_t TimeRangeOfWeek::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_startTime_);
    result = ::zserio::calcHashCode(result, m_endTime_);

    return result;
}

void TimeRangeOfWeek::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_startTime_, UINT8_C(14));
    out.writeBits(m_endTime_, UINT8_C(14));
}

void TimeRangeOfWeek::write(TimeRangeOfWeek::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getStartTime().write<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(out, m_startTime_);
    context.getEndTime().write<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(out, m_endTime_);
}

::nds::core::conditions::TimeOfWeek TimeRangeOfWeek::readStartTime(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::conditions::TimeOfWeek>(in.readBits(UINT8_C(14)));
}

::nds::core::conditions::TimeOfWeek TimeRangeOfWeek::readStartTime(TimeRangeOfWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getStartTime().read<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(in);
}
::nds::core::conditions::TimeOfWeek TimeRangeOfWeek::readEndTime(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::conditions::TimeOfWeek>(in.readBits(UINT8_C(14)));
}

::nds::core::conditions::TimeOfWeek TimeRangeOfWeek::readEndTime(TimeRangeOfWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getEndTime().read<::zserio::BitFieldArrayTraits<::nds::core::conditions::TimeOfWeek, UINT8_C(14)>>(in);
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/DateRangeOfYear.h>

namespace nds
{
namespace core
{
namespace conditions
{

DateRangeOfYear::DateRangeOfYear(const allocator_type& allocator) noexcept :
        m_startDay_(allocator),
        m_endDay_(allocator),
        m_isInclusive_(bool())
{
}

DateRangeOfYear::DateRangeOfYear(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_startDay_(readStartDay(in, allocator)),
        m_endDay_(readEndDay(in, allocator)),
        m_isInclusive_(readIsInclusive(in))
{
}

DateRangeOfYear::DateRangeOfYear(DateRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_startDay_(readStartDay(context, in, allocator)),
        m_endDay_(readEndDay(context, in, allocator)),
        m_isInclusive_(readIsInclusive(in))
{
}

DateRangeOfYear::DateRangeOfYear(::zserio::PropagateAllocatorT,
        const DateRangeOfYear& other, const allocator_type& allocator) :
        m_startDay_(::zserio::allocatorPropagatingCopy(other.m_startDay_, allocator)),
        m_endDay_(::zserio::allocatorPropagatingCopy(other.m_endDay_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::conditions::DayOfYear& DateRangeOfYear::getStartDay()
{
    return m_startDay_;
}

const ::nds::core::conditions::DayOfYear& DateRangeOfYear::getStartDay() const
{
    return m_startDay_;
}

void DateRangeOfYear::setStartDay(const ::nds::core::conditions::DayOfYear& startDay_)
{
    m_startDay_ = startDay_;
}

void DateRangeOfYear::setStartDay(::nds::core::conditions::DayOfYear&& startDay_)
{
    m_startDay_ = ::std::move(startDay_);
}

::nds::core::conditions::DayOfYear& DateRangeOfYear::getEndDay()
{
    return m_endDay_;
}

const ::nds::core::conditions::DayOfYear& DateRangeOfYear::getEndDay() const
{
    return m_endDay_;
}

void DateRangeOfYear::setEndDay(const ::nds::core::conditions::DayOfYear& endDay_)
{
    m_endDay_ = endDay_;
}

void DateRangeOfYear::setEndDay(::nds::core::conditions::DayOfYear&& endDay_)
{
    m_endDay_ = ::std::move(endDay_);
}

bool DateRangeOfYear::getIsInclusive() const
{
    return m_isInclusive_;
}

void DateRangeOfYear::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void DateRangeOfYear::initPackingContext(DateRangeOfYear::ZserioPackingContext& context) const
{
    m_startDay_.initPackingContext(context.getStartDay());
    m_endDay_.initPackingContext(context.getEndDay());
}

size_t DateRangeOfYear::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_startDay_.bitSizeOf(endBitPosition);
    endBitPosition += m_endDay_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t DateRangeOfYear::bitSizeOf(DateRangeOfYear::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_startDay_.bitSizeOf(context.getStartDay(), endBitPosition);
    endBitPosition += m_endDay_.bitSizeOf(context.getEndDay(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t DateRangeOfYear::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_startDay_.initializeOffsets(endBitPosition);
    endBitPosition = m_endDay_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t DateRangeOfYear::initializeOffsets(DateRangeOfYear::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_startDay_.initializeOffsets(context.getStartDay(), endBitPosition);
    endBitPosition = m_endDay_.initializeOffsets(context.getEndDay(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool DateRangeOfYear::operator==(const DateRangeOfYear& other) const
{
    if (this != &other)
    {
        return
                (m_startDay_ == other.m_startDay_) &&
                (m_endDay_ == other.m_endDay_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t DateRangeOfYear::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_startDay_);
    result = ::zserio::calcHashCode(result, m_endDay_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void DateRangeOfYear::write(::zserio::BitStreamWriter& out) const
{
    m_startDay_.write(out);
    m_endDay_.write(out);
    out.writeBool(m_isInclusive_);
}

void DateRangeOfYear::write(DateRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_startDay_.write(context.getStartDay(), out);
    m_endDay_.write(context.getEndDay(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::conditions::DayOfYear DateRangeOfYear::readStartDay(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::DayOfYear(in, allocator);
}

::nds::core::conditions::DayOfYear DateRangeOfYear::readStartDay(DateRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::conditions::DayOfYear(context.getStartDay(), in, allocator);
}
::nds::core::conditions::DayOfYear DateRangeOfYear::readEndDay(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::DayOfYear(in, allocator);
}

::nds::core::conditions::DayOfYear DateRangeOfYear::readEndDay(DateRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::conditions::DayOfYear(context.getEndDay(), in, allocator);
}
bool DateRangeOfYear::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/TimeRangeOfYear.h>

namespace nds
{
namespace core
{
namespace conditions
{

TimeRangeOfYear::TimeRangeOfYear(const allocator_type& allocator) noexcept :
        m_startDay_(allocator),
        m_startTime_(allocator),
        m_endDay_(allocator),
        m_endTime_(allocator),
        m_isInclusive_(bool())
{
}

TimeRangeOfYear::TimeRangeOfYear(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_startDay_(readStartDay(in, allocator)),
        m_startTime_(readStartTime(in, allocator)),
        m_endDay_(readEndDay(in, allocator)),
        m_endTime_(readEndTime(in, allocator)),
        m_isInclusive_(readIsInclusive(in))
{
}

TimeRangeOfYear::TimeRangeOfYear(TimeRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_startDay_(readStartDay(context, in, allocator)),
        m_startTime_(readStartTime(context, in, allocator)),
        m_endDay_(readEndDay(context, in, allocator)),
        m_endTime_(readEndTime(context, in, allocator)),
        m_isInclusive_(readIsInclusive(in))
{
}

TimeRangeOfYear::TimeRangeOfYear(::zserio::PropagateAllocatorT,
        const TimeRangeOfYear& other, const allocator_type& allocator) :
        m_startDay_(::zserio::allocatorPropagatingCopy(other.m_startDay_, allocator)),
        m_startTime_(::zserio::allocatorPropagatingCopy(other.m_startTime_, allocator)),
        m_endDay_(::zserio::allocatorPropagatingCopy(other.m_endDay_, allocator)),
        m_endTime_(::zserio::allocatorPropagatingCopy(other.m_endTime_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::conditions::DayOfYear& TimeRangeOfYear::getStartDay()
{
    return m_startDay_;
}

const ::nds::core::conditions::DayOfYear& TimeRangeOfYear::getStartDay() const
{
    return m_startDay_;
}

void TimeRangeOfYear::setStartDay(const ::nds::core::conditions::DayOfYear& startDay_)
{
    m_startDay_ = startDay_;
}

void TimeRangeOfYear::setStartDay(::nds::core::conditions::DayOfYear&& startDay_)
{
    m_startDay_ = ::std::move(startDay_);
}

::nds::core::conditions::TimeOfDay& TimeRangeOfYear::getStartTime()
{
    return m_startTime_;
}

const ::nds::core::conditions::TimeOfDay& TimeRangeOfYear::getStartTime() const
{
    return m_startTime_;
}

void TimeRangeOfYear::setStartTime(const ::nds::core::conditions::TimeOfDay& startTime_)
{
    m_startTime_ = startTime_;
}

void TimeRangeOfYear::setStartTime(::nds::core::conditions::TimeOfDay&& startTime_)
{
    m_startTime_ = ::std::move(startTime_);
}

::nds::core::conditions::DayOfYear& TimeRangeOfYear::getEndDay()
{
    return m_endDay_;
}

const ::nds::core::conditions::DayOfYear& TimeRangeOfYear::getEndDay() const
{
    return m_endDay_;
}

void TimeRangeOfYear::setEndDay(const ::nds::core::conditions::DayOfYear& endDay_)
{
    m_endDay_ = endDay_;
}

void TimeRangeOfYear::setEndDay(::nds::core::conditions::DayOfYear&& endDay_)
{
    m_endDay_ = ::std::move(endDay_);
}

::nds::core::conditions::TimeOfDay& TimeRangeOfYear::getEndTime()
{
    return m_endTime_;
}

const ::nds::core::conditions::TimeOfDay& TimeRangeOfYear::getEndTime() const
{
    return m_endTime_;
}

void TimeRangeOfYear::setEndTime(const ::nds::core::conditions::TimeOfDay& endTime_)
{
    m_endTime_ = endTime_;
}

void TimeRangeOfYear::setEndTime(::nds::core::conditions::TimeOfDay&& endTime_)
{
    m_endTime_ = ::std::move(endTime_);
}

bool TimeRangeOfYear::getIsInclusive() const
{
    return m_isInclusive_;
}

void TimeRangeOfYear::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void TimeRangeOfYear::initPackingContext(TimeRangeOfYear::ZserioPackingContext& context) const
{
    m_startDay_.initPackingContext(context.getStartDay());
    m_startTime_.initPackingContext(context.getStartTime());
    m_endDay_.initPackingContext(context.getEndDay());
    m_endTime_.initPackingContext(context.getEndTime());
}

size_t TimeRangeOfYear::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_startDay_.bitSizeOf(endBitPosition);
    endBitPosition += m_startTime_.bitSizeOf(endBitPosition);
    endBitPosition += m_endDay_.bitSizeOf(endBitPosition);
    endBitPosition += m_endTime_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TimeRangeOfYear::bitSizeOf(TimeRangeOfYear::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_startDay_.bitSizeOf(context.getStartDay(), endBitPosition);
    endBitPosition += m_startTime_.bitSizeOf(context.getStartTime(), endBitPosition);
    endBitPosition += m_endDay_.bitSizeOf(context.getEndDay(), endBitPosition);
    endBitPosition += m_endTime_.bitSizeOf(context.getEndTime(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TimeRangeOfYear::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_startDay_.initializeOffsets(endBitPosition);
    endBitPosition = m_startTime_.initializeOffsets(endBitPosition);
    endBitPosition = m_endDay_.initializeOffsets(endBitPosition);
    endBitPosition = m_endTime_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t TimeRangeOfYear::initializeOffsets(TimeRangeOfYear::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_startDay_.initializeOffsets(context.getStartDay(), endBitPosition);
    endBitPosition = m_startTime_.initializeOffsets(context.getStartTime(), endBitPosition);
    endBitPosition = m_endDay_.initializeOffsets(context.getEndDay(), endBitPosition);
    endBitPosition = m_endTime_.initializeOffsets(context.getEndTime(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool TimeRangeOfYear::operator==(const TimeRangeOfYear& other) const
{
    if (this != &other)
    {
        return
                (m_startDay_ == other.m_startDay_) &&
                (m_startTime_ == other.m_startTime_) &&
                (m_endDay_ == other.m_endDay_) &&
                (m_endTime_ == other.m_endTime_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t TimeRangeOfYear::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_startDay_);
    result = ::zserio::calcHashCode(result, m_startTime_);
    result = ::zserio::calcHashCode(result, m_endDay_);
    result = ::zserio::calcHashCode(result, m_endTime_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void TimeRangeOfYear::write(::zserio::BitStreamWriter& out) const
{
    m_startDay_.write(out);
    m_startTime_.write(out);
    m_endDay_.write(out);
    m_endTime_.write(out);
    out.writeBool(m_isInclusive_);
}

void TimeRangeOfYear::write(TimeRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_startDay_.write(context.getStartDay(), out);
    m_startTime_.write(context.getStartTime(), out);
    m_endDay_.write(context.getEndDay(), out);
    m_endTime_.write(context.getEndTime(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::conditions::DayOfYear TimeRangeOfYear::readStartDay(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::DayOfYear(in, allocator);
}

::nds::core::conditions::DayOfYear TimeRangeOfYear::readStartDay(TimeRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::conditions::DayOfYear(context.getStartDay(), in, allocator);
}
::nds::core::conditions::TimeOfDay TimeRangeOfYear::readStartTime(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::TimeOfDay(in, allocator);
}

::nds::core::conditions::TimeOfDay TimeRangeOfYear::readStartTime(TimeRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::conditions::TimeOfDay(context.getStartTime(), in, allocator);
}
::nds::core::conditions::DayOfYear TimeRangeOfYear::readEndDay(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::DayOfYear(in, allocator);
}

::nds::core::conditions::DayOfYear TimeRangeOfYear::readEndDay(TimeRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::conditions::DayOfYear(context.getEndDay(), in, allocator);
}
::nds::core::conditions::TimeOfDay TimeRangeOfYear::readEndTime(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::TimeOfDay(in, allocator);
}

::nds::core::conditions::TimeOfDay TimeRangeOfYear::readEndTime(TimeRangeOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::conditions::TimeOfDay(context.getEndTime(), in, allocator);
}
bool TimeRangeOfYear::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/DaysOfWeek.h>

namespace nds
{
namespace core
{
namespace conditions
{

DaysOfWeek::DaysOfWeek(const allocator_type&) noexcept :
        m_isSunday_(bool()),
        m_isMonday_(bool()),
        m_isTuesday_(bool()),
        m_isWednesday_(bool()),
        m_isThursday_(bool()),
        m_isFriday_(bool()),
        m_isSaturday_(bool()),
        m_isInclusive_(bool())
{
}

DaysOfWeek::DaysOfWeek(::zserio::BitStreamReader& in, const allocator_type&) :
        m_isSunday_(readIsSunday(in)),
        m_isMonday_(readIsMonday(in)),
        m_isTuesday_(readIsTuesday(in)),
        m_isWednesday_(readIsWednesday(in)),
        m_isThursday_(readIsThursday(in)),
        m_isFriday_(readIsFriday(in)),
        m_isSaturday_(readIsSaturday(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

DaysOfWeek::DaysOfWeek(::zserio::PropagateAllocatorT,
        const DaysOfWeek& other, const allocator_type& allocator) :
        m_isSunday_(::zserio::allocatorPropagatingCopy(other.m_isSunday_, allocator)),
        m_isMonday_(::zserio::allocatorPropagatingCopy(other.m_isMonday_, allocator)),
        m_isTuesday_(::zserio::allocatorPropagatingCopy(other.m_isTuesday_, allocator)),
        m_isWednesday_(::zserio::allocatorPropagatingCopy(other.m_isWednesday_, allocator)),
        m_isThursday_(::zserio::allocatorPropagatingCopy(other.m_isThursday_, allocator)),
        m_isFriday_(::zserio::allocatorPropagatingCopy(other.m_isFriday_, allocator)),
        m_isSaturday_(::zserio::allocatorPropagatingCopy(other.m_isSaturday_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

bool DaysOfWeek::getIsSunday() const
{
    return m_isSunday_;
}

void DaysOfWeek::setIsSunday(bool isSunday_)
{
    m_isSunday_ = isSunday_;
}

bool DaysOfWeek::getIsMonday() const
{
    return m_isMonday_;
}

void DaysOfWeek::setIsMonday(bool isMonday_)
{
    m_isMonday_ = isMonday_;
}

bool DaysOfWeek::getIsTuesday() const
{
    return m_isTuesday_;
}

void DaysOfWeek::setIsTuesday(bool isTuesday_)
{
    m_isTuesday_ = isTuesday_;
}

bool DaysOfWeek::getIsWednesday() const
{
    return m_isWednesday_;
}

void DaysOfWeek::setIsWednesday(bool isWednesday_)
{
    m_isWednesday_ = isWednesday_;
}

bool DaysOfWeek::getIsThursday() const
{
    return m_isThursday_;
}

void DaysOfWeek::setIsThursday(bool isThursday_)
{
    m_isThursday_ = isThursday_;
}

bool DaysOfWeek::getIsFriday() const
{
    return m_isFriday_;
}

void DaysOfWeek::setIsFriday(bool isFriday_)
{
    m_isFriday_ = isFriday_;
}

bool DaysOfWeek::getIsSaturday() const
{
    return m_isSaturday_;
}

void DaysOfWeek::setIsSaturday(bool isSaturday_)
{
    m_isSaturday_ = isSaturday_;
}

bool DaysOfWeek::getIsInclusive() const
{
    return m_isInclusive_;
}

void DaysOfWeek::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

size_t DaysOfWeek::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t DaysOfWeek::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool DaysOfWeek::operator==(const DaysOfWeek& other) const
{
    if (this != &other)
    {
        return
                (m_isSunday_ == other.m_isSunday_) &&
                (m_isMonday_ == other.m_isMonday_) &&
                (m_isTuesday_ == other.m_isTuesday_) &&
                (m_isWednesday_ == other.m_isWednesday_) &&
                (m_isThursday_ == other.m_isThursday_) &&
                (m_isFriday_ == other.m_isFriday_) &&
                (m_isSaturday_ == other.m_isSaturday_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t DaysOfWeek::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_isSunday_);
    result = ::zserio::calcHashCode(result, m_isMonday_);
    result = ::zserio::calcHashCode(result, m_isTuesday_);
    result = ::zserio::calcHashCode(result, m_isWednesday_);
    result = ::zserio::calcHashCode(result, m_isThursday_);
    result = ::zserio::calcHashCode(result, m_isFriday_);
    result = ::zserio::calcHashCode(result, m_isSaturday_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void DaysOfWeek::write(::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_isSunday_);
    out.writeBool(m_isMonday_);
    out.writeBool(m_isTuesday_);
    out.writeBool(m_isWednesday_);
    out.writeBool(m_isThursday_);
    out.writeBool(m_isFriday_);
    out.writeBool(m_isSaturday_);
    out.writeBool(m_isInclusive_);
}

bool DaysOfWeek::readIsSunday(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfWeek::readIsMonday(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfWeek::readIsTuesday(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfWeek::readIsWednesday(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfWeek::readIsThursday(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfWeek::readIsFriday(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfWeek::readIsSaturday(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfWeek::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/DaysOfMonth.h>

namespace nds
{
namespace core
{
namespace conditions
{

DaysOfMonth::DaysOfMonth(const allocator_type&) noexcept :
        m_isDay1_(bool()),
        m_isDay2_(bool()),
        m_isDay3_(bool()),
        m_isDay4_(bool()),
        m_isDay5_(bool()),
        m_isDay6_(bool()),
        m_isDay7_(bool()),
        m_isDay8_(bool()),
        m_isDay9_(bool()),
        m_isDay10_(bool()),
        m_isDay11_(bool()),
        m_isDay12_(bool()),
        m_isDay13_(bool()),
        m_isDay14_(bool()),
        m_isDay15_(bool()),
        m_isDay16_(bool()),
        m_isDay17_(bool()),
        m_isDay18_(bool()),
        m_isDay19_(bool()),
        m_isDay20_(bool()),
        m_isDay21_(bool()),
        m_isDay22_(bool()),
        m_isDay23_(bool()),
        m_isDay24_(bool()),
        m_isDay25_(bool()),
        m_isDay26_(bool()),
        m_isDay27_(bool()),
        m_isDay28_(bool()),
        m_isDay29_(bool()),
        m_isDay30_(bool()),
        m_isDay31_(bool()),
        m_isInclusive_(bool())
{
}

DaysOfMonth::DaysOfMonth(::zserio::BitStreamReader& in, const allocator_type&) :
        m_isDay1_(readIsDay1(in)),
        m_isDay2_(readIsDay2(in)),
        m_isDay3_(readIsDay3(in)),
        m_isDay4_(readIsDay4(in)),
        m_isDay5_(readIsDay5(in)),
        m_isDay6_(readIsDay6(in)),
        m_isDay7_(readIsDay7(in)),
        m_isDay8_(readIsDay8(in)),
        m_isDay9_(readIsDay9(in)),
        m_isDay10_(readIsDay10(in)),
        m_isDay11_(readIsDay11(in)),
        m_isDay12_(readIsDay12(in)),
        m_isDay13_(readIsDay13(in)),
        m_isDay14_(readIsDay14(in)),
        m_isDay15_(readIsDay15(in)),
        m_isDay16_(readIsDay16(in)),
        m_isDay17_(readIsDay17(in)),
        m_isDay18_(readIsDay18(in)),
        m_isDay19_(readIsDay19(in)),
        m_isDay20_(readIsDay20(in)),
        m_isDay21_(readIsDay21(in)),
        m_isDay22_(readIsDay22(in)),
        m_isDay23_(readIsDay23(in)),
        m_isDay24_(readIsDay24(in)),
        m_isDay25_(readIsDay25(in)),
        m_isDay26_(readIsDay26(in)),
        m_isDay27_(readIsDay27(in)),
        m_isDay28_(readIsDay28(in)),
        m_isDay29_(readIsDay29(in)),
        m_isDay30_(readIsDay30(in)),
        m_isDay31_(readIsDay31(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

DaysOfMonth::DaysOfMonth(::zserio::PropagateAllocatorT,
        const DaysOfMonth& other, const allocator_type& allocator) :
        m_isDay1_(::zserio::allocatorPropagatingCopy(other.m_isDay1_, allocator)),
        m_isDay2_(::zserio::allocatorPropagatingCopy(other.m_isDay2_, allocator)),
        m_isDay3_(::zserio::allocatorPropagatingCopy(other.m_isDay3_, allocator)),
        m_isDay4_(::zserio::allocatorPropagatingCopy(other.m_isDay4_, allocator)),
        m_isDay5_(::zserio::allocatorPropagatingCopy(other.m_isDay5_, allocator)),
        m_isDay6_(::zserio::allocatorPropagatingCopy(other.m_isDay6_, allocator)),
        m_isDay7_(::zserio::allocatorPropagatingCopy(other.m_isDay7_, allocator)),
        m_isDay8_(::zserio::allocatorPropagatingCopy(other.m_isDay8_, allocator)),
        m_isDay9_(::zserio::allocatorPropagatingCopy(other.m_isDay9_, allocator)),
        m_isDay10_(::zserio::allocatorPropagatingCopy(other.m_isDay10_, allocator)),
        m_isDay11_(::zserio::allocatorPropagatingCopy(other.m_isDay11_, allocator)),
        m_isDay12_(::zserio::allocatorPropagatingCopy(other.m_isDay12_, allocator)),
        m_isDay13_(::zserio::allocatorPropagatingCopy(other.m_isDay13_, allocator)),
        m_isDay14_(::zserio::allocatorPropagatingCopy(other.m_isDay14_, allocator)),
        m_isDay15_(::zserio::allocatorPropagatingCopy(other.m_isDay15_, allocator)),
        m_isDay16_(::zserio::allocatorPropagatingCopy(other.m_isDay16_, allocator)),
        m_isDay17_(::zserio::allocatorPropagatingCopy(other.m_isDay17_, allocator)),
        m_isDay18_(::zserio::allocatorPropagatingCopy(other.m_isDay18_, allocator)),
        m_isDay19_(::zserio::allocatorPropagatingCopy(other.m_isDay19_, allocator)),
        m_isDay20_(::zserio::allocatorPropagatingCopy(other.m_isDay20_, allocator)),
        m_isDay21_(::zserio::allocatorPropagatingCopy(other.m_isDay21_, allocator)),
        m_isDay22_(::zserio::allocatorPropagatingCopy(other.m_isDay22_, allocator)),
        m_isDay23_(::zserio::allocatorPropagatingCopy(other.m_isDay23_, allocator)),
        m_isDay24_(::zserio::allocatorPropagatingCopy(other.m_isDay24_, allocator)),
        m_isDay25_(::zserio::allocatorPropagatingCopy(other.m_isDay25_, allocator)),
        m_isDay26_(::zserio::allocatorPropagatingCopy(other.m_isDay26_, allocator)),
        m_isDay27_(::zserio::allocatorPropagatingCopy(other.m_isDay27_, allocator)),
        m_isDay28_(::zserio::allocatorPropagatingCopy(other.m_isDay28_, allocator)),
        m_isDay29_(::zserio::allocatorPropagatingCopy(other.m_isDay29_, allocator)),
        m_isDay30_(::zserio::allocatorPropagatingCopy(other.m_isDay30_, allocator)),
        m_isDay31_(::zserio::allocatorPropagatingCopy(other.m_isDay31_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

bool DaysOfMonth::getIsDay1() const
{
    return m_isDay1_;
}

void DaysOfMonth::setIsDay1(bool isDay1_)
{
    m_isDay1_ = isDay1_;
}

bool DaysOfMonth::getIsDay2() const
{
    return m_isDay2_;
}

void DaysOfMonth::setIsDay2(bool isDay2_)
{
    m_isDay2_ = isDay2_;
}

bool DaysOfMonth::getIsDay3() const
{
    return m_isDay3_;
}

void DaysOfMonth::setIsDay3(bool isDay3_)
{
    m_isDay3_ = isDay3_;
}

bool DaysOfMonth::getIsDay4() const
{
    return m_isDay4_;
}

void DaysOfMonth::setIsDay4(bool isDay4_)
{
    m_isDay4_ = isDay4_;
}

bool DaysOfMonth::getIsDay5() const
{
    return m_isDay5_;
}

void DaysOfMonth::setIsDay5(bool isDay5_)
{
    m_isDay5_ = isDay5_;
}

bool DaysOfMonth::getIsDay6() const
{
    return m_isDay6_;
}

void DaysOfMonth::setIsDay6(bool isDay6_)
{
    m_isDay6_ = isDay6_;
}

bool DaysOfMonth::getIsDay7() const
{
    return m_isDay7_;
}

void DaysOfMonth::setIsDay7(bool isDay7_)
{
    m_isDay7_ = isDay7_;
}

bool DaysOfMonth::getIsDay8() const
{
    return m_isDay8_;
}

void DaysOfMonth::setIsDay8(bool isDay8_)
{
    m_isDay8_ = isDay8_;
}

bool DaysOfMonth::getIsDay9() const
{
    return m_isDay9_;
}

void DaysOfMonth::setIsDay9(bool isDay9_)
{
    m_isDay9_ = isDay9_;
}

bool DaysOfMonth::getIsDay10() const
{
    return m_isDay10_;
}

void DaysOfMonth::setIsDay10(bool isDay10_)
{
    m_isDay10_ = isDay10_;
}

bool DaysOfMonth::getIsDay11() const
{
    return m_isDay11_;
}

void DaysOfMonth::setIsDay11(bool isDay11_)
{
    m_isDay11_ = isDay11_;
}

bool DaysOfMonth::getIsDay12() const
{
    return m_isDay12_;
}

void DaysOfMonth::setIsDay12(bool isDay12_)
{
    m_isDay12_ = isDay12_;
}

bool DaysOfMonth::getIsDay13() const
{
    return m_isDay13_;
}

void DaysOfMonth::setIsDay13(bool isDay13_)
{
    m_isDay13_ = isDay13_;
}

bool DaysOfMonth::getIsDay14() const
{
    return m_isDay14_;
}

void DaysOfMonth::setIsDay14(bool isDay14_)
{
    m_isDay14_ = isDay14_;
}

bool DaysOfMonth::getIsDay15() const
{
    return m_isDay15_;
}

void DaysOfMonth::setIsDay15(bool isDay15_)
{
    m_isDay15_ = isDay15_;
}

bool DaysOfMonth::getIsDay16() const
{
    return m_isDay16_;
}

void DaysOfMonth::setIsDay16(bool isDay16_)
{
    m_isDay16_ = isDay16_;
}

bool DaysOfMonth::getIsDay17() const
{
    return m_isDay17_;
}

void DaysOfMonth::setIsDay17(bool isDay17_)
{
    m_isDay17_ = isDay17_;
}

bool DaysOfMonth::getIsDay18() const
{
    return m_isDay18_;
}

void DaysOfMonth::setIsDay18(bool isDay18_)
{
    m_isDay18_ = isDay18_;
}

bool DaysOfMonth::getIsDay19() const
{
    return m_isDay19_;
}

void DaysOfMonth::setIsDay19(bool isDay19_)
{
    m_isDay19_ = isDay19_;
}

bool DaysOfMonth::getIsDay20() const
{
    return m_isDay20_;
}

void DaysOfMonth::setIsDay20(bool isDay20_)
{
    m_isDay20_ = isDay20_;
}

bool DaysOfMonth::getIsDay21() const
{
    return m_isDay21_;
}

void DaysOfMonth::setIsDay21(bool isDay21_)
{
    m_isDay21_ = isDay21_;
}

bool DaysOfMonth::getIsDay22() const
{
    return m_isDay22_;
}

void DaysOfMonth::setIsDay22(bool isDay22_)
{
    m_isDay22_ = isDay22_;
}

bool DaysOfMonth::getIsDay23() const
{
    return m_isDay23_;
}

void DaysOfMonth::setIsDay23(bool isDay23_)
{
    m_isDay23_ = isDay23_;
}

bool DaysOfMonth::getIsDay24() const
{
    return m_isDay24_;
}

void DaysOfMonth::setIsDay24(bool isDay24_)
{
    m_isDay24_ = isDay24_;
}

bool DaysOfMonth::getIsDay25() const
{
    return m_isDay25_;
}

void DaysOfMonth::setIsDay25(bool isDay25_)
{
    m_isDay25_ = isDay25_;
}

bool DaysOfMonth::getIsDay26() const
{
    return m_isDay26_;
}

void DaysOfMonth::setIsDay26(bool isDay26_)
{
    m_isDay26_ = isDay26_;
}

bool DaysOfMonth::getIsDay27() const
{
    return m_isDay27_;
}

void DaysOfMonth::setIsDay27(bool isDay27_)
{
    m_isDay27_ = isDay27_;
}

bool DaysOfMonth::getIsDay28() const
{
    return m_isDay28_;
}

void DaysOfMonth::setIsDay28(bool isDay28_)
{
    m_isDay28_ = isDay28_;
}

bool DaysOfMonth::getIsDay29() const
{
    return m_isDay29_;
}

void DaysOfMonth::setIsDay29(bool isDay29_)
{
    m_isDay29_ = isDay29_;
}

bool DaysOfMonth::getIsDay30() const
{
    return m_isDay30_;
}

void DaysOfMonth::setIsDay30(bool isDay30_)
{
    m_isDay30_ = isDay30_;
}

bool DaysOfMonth::getIsDay31() const
{
    return m_isDay31_;
}

void DaysOfMonth::setIsDay31(bool isDay31_)
{
    m_isDay31_ = isDay31_;
}

bool DaysOfMonth::getIsInclusive() const
{
    return m_isInclusive_;
}

void DaysOfMonth::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

size_t DaysOfMonth::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t DaysOfMonth::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool DaysOfMonth::operator==(const DaysOfMonth& other) const
{
    if (this != &other)
    {
        return
                (m_isDay1_ == other.m_isDay1_) &&
                (m_isDay2_ == other.m_isDay2_) &&
                (m_isDay3_ == other.m_isDay3_) &&
                (m_isDay4_ == other.m_isDay4_) &&
                (m_isDay5_ == other.m_isDay5_) &&
                (m_isDay6_ == other.m_isDay6_) &&
                (m_isDay7_ == other.m_isDay7_) &&
                (m_isDay8_ == other.m_isDay8_) &&
                (m_isDay9_ == other.m_isDay9_) &&
                (m_isDay10_ == other.m_isDay10_) &&
                (m_isDay11_ == other.m_isDay11_) &&
                (m_isDay12_ == other.m_isDay12_) &&
                (m_isDay13_ == other.m_isDay13_) &&
                (m_isDay14_ == other.m_isDay14_) &&
                (m_isDay15_ == other.m_isDay15_) &&
                (m_isDay16_ == other.m_isDay16_) &&
                (m_isDay17_ == other.m_isDay17_) &&
                (m_isDay18_ == other.m_isDay18_) &&
                (m_isDay19_ == other.m_isDay19_) &&
                (m_isDay20_ == other.m_isDay20_) &&
                (m_isDay21_ == other.m_isDay21_) &&
                (m_isDay22_ == other.m_isDay22_) &&
                (m_isDay23_ == other.m_isDay23_) &&
                (m_isDay24_ == other.m_isDay24_) &&
                (m_isDay25_ == other.m_isDay25_) &&
                (m_isDay26_ == other.m_isDay26_) &&
                (m_isDay27_ == other.m_isDay27_) &&
                (m_isDay28_ == other.m_isDay28_) &&
                (m_isDay29_ == other.m_isDay29_) &&
                (m_isDay30_ == other.m_isDay30_) &&
                (m_isDay31_ == other.m_isDay31_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t DaysOfMonth::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_isDay1_);
    result = ::zserio::calcHashCode(result, m_isDay2_);
    result = ::zserio::calcHashCode(result, m_isDay3_);
    result = ::zserio::calcHashCode(result, m_isDay4_);
    result = ::zserio::calcHashCode(result, m_isDay5_);
    result = ::zserio::calcHashCode(result, m_isDay6_);
    result = ::zserio::calcHashCode(result, m_isDay7_);
    result = ::zserio::calcHashCode(result, m_isDay8_);
    result = ::zserio::calcHashCode(result, m_isDay9_);
    result = ::zserio::calcHashCode(result, m_isDay10_);
    result = ::zserio::calcHashCode(result, m_isDay11_);
    result = ::zserio::calcHashCode(result, m_isDay12_);
    result = ::zserio::calcHashCode(result, m_isDay13_);
    result = ::zserio::calcHashCode(result, m_isDay14_);
    result = ::zserio::calcHashCode(result, m_isDay15_);
    result = ::zserio::calcHashCode(result, m_isDay16_);
    result = ::zserio::calcHashCode(result, m_isDay17_);
    result = ::zserio::calcHashCode(result, m_isDay18_);
    result = ::zserio::calcHashCode(result, m_isDay19_);
    result = ::zserio::calcHashCode(result, m_isDay20_);
    result = ::zserio::calcHashCode(result, m_isDay21_);
    result = ::zserio::calcHashCode(result, m_isDay22_);
    result = ::zserio::calcHashCode(result, m_isDay23_);
    result = ::zserio::calcHashCode(result, m_isDay24_);
    result = ::zserio::calcHashCode(result, m_isDay25_);
    result = ::zserio::calcHashCode(result, m_isDay26_);
    result = ::zserio::calcHashCode(result, m_isDay27_);
    result = ::zserio::calcHashCode(result, m_isDay28_);
    result = ::zserio::calcHashCode(result, m_isDay29_);
    result = ::zserio::calcHashCode(result, m_isDay30_);
    result = ::zserio::calcHashCode(result, m_isDay31_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void DaysOfMonth::write(::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_isDay1_);
    out.writeBool(m_isDay2_);
    out.writeBool(m_isDay3_);
    out.writeBool(m_isDay4_);
    out.writeBool(m_isDay5_);
    out.writeBool(m_isDay6_);
    out.writeBool(m_isDay7_);
    out.writeBool(m_isDay8_);
    out.writeBool(m_isDay9_);
    out.writeBool(m_isDay10_);
    out.writeBool(m_isDay11_);
    out.writeBool(m_isDay12_);
    out.writeBool(m_isDay13_);
    out.writeBool(m_isDay14_);
    out.writeBool(m_isDay15_);
    out.writeBool(m_isDay16_);
    out.writeBool(m_isDay17_);
    out.writeBool(m_isDay18_);
    out.writeBool(m_isDay19_);
    out.writeBool(m_isDay20_);
    out.writeBool(m_isDay21_);
    out.writeBool(m_isDay22_);
    out.writeBool(m_isDay23_);
    out.writeBool(m_isDay24_);
    out.writeBool(m_isDay25_);
    out.writeBool(m_isDay26_);
    out.writeBool(m_isDay27_);
    out.writeBool(m_isDay28_);
    out.writeBool(m_isDay29_);
    out.writeBool(m_isDay30_);
    out.writeBool(m_isDay31_);
    out.writeBool(m_isInclusive_);
}

bool DaysOfMonth::readIsDay1(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay2(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay3(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay4(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay5(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay6(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay7(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay8(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay9(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay10(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay11(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay12(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay13(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay14(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay15(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay16(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay17(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay18(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay19(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay20(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay21(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay22(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay23(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay24(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay25(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay26(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay27(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay28(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay29(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay30(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsDay31(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool DaysOfMonth::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/DayOfYear.h>

namespace nds
{
namespace core
{
namespace conditions
{

DayOfYear::DayOfYear(const allocator_type&) noexcept :
        m_year_(::nds::core::types::Year()),
        m_month_(::nds::core::conditions::MonthOfYear()),
        m_day_(::nds::core::conditions::DayOfMonth()),
        m_isInclusive_(bool())
{
}

DayOfYear::DayOfYear(::zserio::BitStreamReader& in, const allocator_type&) :
        m_year_(readYear(in)),
        m_month_(readMonth(in)),
        m_day_(readDay(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

DayOfYear::DayOfYear(DayOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_year_(readYear(context, in)),
        m_month_(readMonth(context, in)),
        m_day_(readDay(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

DayOfYear::DayOfYear(::zserio::PropagateAllocatorT,
        const DayOfYear& other, const allocator_type& allocator) :
        m_year_(::zserio::allocatorPropagatingCopy(other.m_year_, allocator)),
        m_month_(::zserio::allocatorPropagatingCopy(other.m_month_, allocator)),
        m_day_(::zserio::allocatorPropagatingCopy(other.m_day_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::types::Year DayOfYear::getYear() const
{
    return m_year_;
}

void DayOfYear::setYear(::nds::core::types::Year year_)
{
    m_year_ = year_;
}

::nds::core::conditions::MonthOfYear DayOfYear::getMonth() const
{
    return m_month_;
}

void DayOfYear::setMonth(::nds::core::conditions::MonthOfYear month_)
{
    m_month_ = month_;
}

::nds::core::conditions::DayOfMonth DayOfYear::getDay() const
{
    return m_day_;
}

void DayOfYear::setDay(::nds::core::conditions::DayOfMonth day_)
{
    m_day_ = day_;
}

bool DayOfYear::getIsInclusive() const
{
    return m_isInclusive_;
}

void DayOfYear::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void DayOfYear::initPackingContext(DayOfYear::ZserioPackingContext& context) const
{
    context.getYear().init<::zserio::StdIntArrayTraits<::nds::core::types::Year>>(m_year_);
    context.getMonth().init<::zserio::BitFieldArrayTraits<::nds::core::conditions::MonthOfYear, UINT8_C(4)>>(m_month_);
    context.getDay().init<::zserio::BitFieldArrayTraits<::nds::core::conditions::DayOfMonth, UINT8_C(5)>>(m_day_);
}

size_t DayOfYear::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(16);
    endBitPosition += UINT8_C(4);
    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t DayOfYear::bitSizeOf(DayOfYear::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getYear().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::Year>>(m_year_);
    endBitPosition += context.getMonth().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::conditions::MonthOfYear, UINT8_C(4)>>(m_month_);
    endBitPosition += context.getDay().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::conditions::DayOfMonth, UINT8_C(5)>>(m_day_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t DayOfYear::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(16);
    endBitPosition += UINT8_C(4);
    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t DayOfYear::initializeOffsets(DayOfYear::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getYear().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::Year>>(m_year_);
    endBitPosition += context.getMonth().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::conditions::MonthOfYear, UINT8_C(4)>>(m_month_);
    endBitPosition += context.getDay().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::conditions::DayOfMonth, UINT8_C(5)>>(m_day_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool DayOfYear::operator==(const DayOfYear& other) const
{
    if (this != &other)
    {
        return
                (m_year_ == other.m_year_) &&
                (m_month_ == other.m_month_) &&
                (m_day_ == other.m_day_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t DayOfYear::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_year_);
    result = ::zserio::calcHashCode(result, m_month_);
    result = ::zserio::calcHashCode(result, m_day_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void DayOfYear::write(::zserio::BitStreamWriter& out) const
{
    out.writeSignedBits(m_year_, UINT8_C(16));
    out.writeBits(m_month_, UINT8_C(4));
    out.writeBits(m_day_, UINT8_C(5));
    out.writeBool(m_isInclusive_);
}

void DayOfYear::write(DayOfYear::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getYear().write<::zserio::StdIntArrayTraits<::nds::core::types::Year>>(out, m_year_);
    context.getMonth().write<::zserio::BitFieldArrayTraits<::nds::core::conditions::MonthOfYear, UINT8_C(4)>>(out, m_month_);
    context.getDay().write<::zserio::BitFieldArrayTraits<::nds::core::conditions::DayOfMonth, UINT8_C(5)>>(out, m_day_);
    out.writeBool(m_isInclusive_);
}

::nds::core::types::Year DayOfYear::readYear(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::Year>(in.readSignedBits(UINT8_C(16)));
}

::nds::core::types::Year DayOfYear::readYear(DayOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getYear().read<::zserio::StdIntArrayTraits<::nds::core::types::Year>>(in);
}
::nds::core::conditions::MonthOfYear DayOfYear::readMonth(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::conditions::MonthOfYear>(in.readBits(UINT8_C(4)));
}

::nds::core::conditions::MonthOfYear DayOfYear::readMonth(DayOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMonth().read<::zserio::BitFieldArrayTraits<::nds::core::conditions::MonthOfYear, UINT8_C(4)>>(in);
}
::nds::core::conditions::DayOfMonth DayOfYear::readDay(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::conditions::DayOfMonth>(in.readBits(UINT8_C(5)));
}

::nds::core::conditions::DayOfMonth DayOfYear::readDay(DayOfYear::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getDay().read<::zserio::BitFieldArrayTraits<::nds::core::conditions::DayOfMonth, UINT8_C(5)>>(in);
}
bool DayOfYear::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/MonthsOfYear.h>

namespace nds
{
namespace core
{
namespace conditions
{

MonthsOfYear::MonthsOfYear(const allocator_type&) noexcept :
        m_january_(bool()),
        m_february_(bool()),
        m_march_(bool()),
        m_april_(bool()),
        m_may_(bool()),
        m_june_(bool()),
        m_july_(bool()),
        m_august_(bool()),
        m_september_(bool()),
        m_october_(bool()),
        m_november_(bool()),
        m_december_(bool()),
        m_isInclusive_(bool())
{
}

MonthsOfYear::MonthsOfYear(::zserio::BitStreamReader& in, const allocator_type&) :
        m_january_(readJanuary(in)),
        m_february_(readFebruary(in)),
        m_march_(readMarch(in)),
        m_april_(readApril(in)),
        m_may_(readMay(in)),
        m_june_(readJune(in)),
        m_july_(readJuly(in)),
        m_august_(readAugust(in)),
        m_september_(readSeptember(in)),
        m_october_(readOctober(in)),
        m_november_(readNovember(in)),
        m_december_(readDecember(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

MonthsOfYear::MonthsOfYear(::zserio::PropagateAllocatorT,
        const MonthsOfYear& other, const allocator_type& allocator) :
        m_january_(::zserio::allocatorPropagatingCopy(other.m_january_, allocator)),
        m_february_(::zserio::allocatorPropagatingCopy(other.m_february_, allocator)),
        m_march_(::zserio::allocatorPropagatingCopy(other.m_march_, allocator)),
        m_april_(::zserio::allocatorPropagatingCopy(other.m_april_, allocator)),
        m_may_(::zserio::allocatorPropagatingCopy(other.m_may_, allocator)),
        m_june_(::zserio::allocatorPropagatingCopy(other.m_june_, allocator)),
        m_july_(::zserio::allocatorPropagatingCopy(other.m_july_, allocator)),
        m_august_(::zserio::allocatorPropagatingCopy(other.m_august_, allocator)),
        m_september_(::zserio::allocatorPropagatingCopy(other.m_september_, allocator)),
        m_october_(::zserio::allocatorPropagatingCopy(other.m_october_, allocator)),
        m_november_(::zserio::allocatorPropagatingCopy(other.m_november_, allocator)),
        m_december_(::zserio::allocatorPropagatingCopy(other.m_december_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

bool MonthsOfYear::getJanuary() const
{
    return m_january_;
}

void MonthsOfYear::setJanuary(bool january_)
{
    m_january_ = january_;
}

bool MonthsOfYear::getFebruary() const
{
    return m_february_;
}

void MonthsOfYear::setFebruary(bool february_)
{
    m_february_ = february_;
}

bool MonthsOfYear::getMarch() const
{
    return m_march_;
}

void MonthsOfYear::setMarch(bool march_)
{
    m_march_ = march_;
}

bool MonthsOfYear::getApril() const
{
    return m_april_;
}

void MonthsOfYear::setApril(bool april_)
{
    m_april_ = april_;
}

bool MonthsOfYear::getMay() const
{
    return m_may_;
}

void MonthsOfYear::setMay(bool may_)
{
    m_may_ = may_;
}

bool MonthsOfYear::getJune() const
{
    return m_june_;
}

void MonthsOfYear::setJune(bool june_)
{
    m_june_ = june_;
}

bool MonthsOfYear::getJuly() const
{
    return m_july_;
}

void MonthsOfYear::setJuly(bool july_)
{
    m_july_ = july_;
}

bool MonthsOfYear::getAugust() const
{
    return m_august_;
}

void MonthsOfYear::setAugust(bool august_)
{
    m_august_ = august_;
}

bool MonthsOfYear::getSeptember() const
{
    return m_september_;
}

void MonthsOfYear::setSeptember(bool september_)
{
    m_september_ = september_;
}

bool MonthsOfYear::getOctober() const
{
    return m_october_;
}

void MonthsOfYear::setOctober(bool october_)
{
    m_october_ = october_;
}

bool MonthsOfYear::getNovember() const
{
    return m_november_;
}

void MonthsOfYear::setNovember(bool november_)
{
    m_november_ = november_;
}

bool MonthsOfYear::getDecember() const
{
    return m_december_;
}

void MonthsOfYear::setDecember(bool december_)
{
    m_december_ = december_;
}

bool MonthsOfYear::getIsInclusive() const
{
    return m_isInclusive_;
}

void MonthsOfYear::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

size_t MonthsOfYear::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t MonthsOfYear::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool MonthsOfYear::operator==(const MonthsOfYear& other) const
{
    if (this != &other)
    {
        return
                (m_january_ == other.m_january_) &&
                (m_february_ == other.m_february_) &&
                (m_march_ == other.m_march_) &&
                (m_april_ == other.m_april_) &&
                (m_may_ == other.m_may_) &&
                (m_june_ == other.m_june_) &&
                (m_july_ == other.m_july_) &&
                (m_august_ == other.m_august_) &&
                (m_september_ == other.m_september_) &&
                (m_october_ == other.m_october_) &&
                (m_november_ == other.m_november_) &&
                (m_december_ == other.m_december_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t MonthsOfYear::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_january_);
    result = ::zserio::calcHashCode(result, m_february_);
    result = ::zserio::calcHashCode(result, m_march_);
    result = ::zserio::calcHashCode(result, m_april_);
    result = ::zserio::calcHashCode(result, m_may_);
    result = ::zserio::calcHashCode(result, m_june_);
    result = ::zserio::calcHashCode(result, m_july_);
    result = ::zserio::calcHashCode(result, m_august_);
    result = ::zserio::calcHashCode(result, m_september_);
    result = ::zserio::calcHashCode(result, m_october_);
    result = ::zserio::calcHashCode(result, m_november_);
    result = ::zserio::calcHashCode(result, m_december_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void MonthsOfYear::write(::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_january_);
    out.writeBool(m_february_);
    out.writeBool(m_march_);
    out.writeBool(m_april_);
    out.writeBool(m_may_);
    out.writeBool(m_june_);
    out.writeBool(m_july_);
    out.writeBool(m_august_);
    out.writeBool(m_september_);
    out.writeBool(m_october_);
    out.writeBool(m_november_);
    out.writeBool(m_december_);
    out.writeBool(m_isInclusive_);
}

bool MonthsOfYear::readJanuary(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readFebruary(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readMarch(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readApril(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readMay(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readJune(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readJuly(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readAugust(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readSeptember(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readOctober(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readNovember(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readDecember(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool MonthsOfYear::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/WeekInMonth.h>

namespace nds
{
namespace core
{
namespace conditions
{

WeekInMonth::WeekInMonth(const allocator_type&) noexcept :
        m_countBackwardWeekInMonth_(bool()),
        m_nThWeekInMonth_(uint8_t())
{
}

WeekInMonth::WeekInMonth(::zserio::BitStreamReader& in, const allocator_type&) :
        m_countBackwardWeekInMonth_(readCountBackwardWeekInMonth(in)),
        m_nThWeekInMonth_(readNThWeekInMonth(in))
{
}

WeekInMonth::WeekInMonth(WeekInMonth::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_countBackwardWeekInMonth_(readCountBackwardWeekInMonth(in)),
        m_nThWeekInMonth_(readNThWeekInMonth(context, in))
{
}

WeekInMonth::WeekInMonth(::zserio::PropagateAllocatorT,
        const WeekInMonth& other, const allocator_type& allocator) :
        m_countBackwardWeekInMonth_(::zserio::allocatorPropagatingCopy(other.m_countBackwardWeekInMonth_, allocator)),
        m_nThWeekInMonth_(::zserio::allocatorPropagatingCopy(other.m_nThWeekInMonth_, allocator))
{
}

bool WeekInMonth::getCountBackwardWeekInMonth() const
{
    return m_countBackwardWeekInMonth_;
}

void WeekInMonth::setCountBackwardWeekInMonth(bool countBackwardWeekInMonth_)
{
    m_countBackwardWeekInMonth_ = countBackwardWeekInMonth_;
}

uint8_t WeekInMonth::getNThWeekInMonth() const
{
    return m_nThWeekInMonth_;
}

void WeekInMonth::setNThWeekInMonth(uint8_t nThWeekInMonth_)
{
    m_nThWeekInMonth_ = nThWeekInMonth_;
}

void WeekInMonth::initPackingContext(WeekInMonth::ZserioPackingContext& context) const
{
    context.getNThWeekInMonth().init<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(m_nThWeekInMonth_);
}

size_t WeekInMonth::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(3);

    return endBitPosition - bitPosition;
}

size_t WeekInMonth::bitSizeOf(WeekInMonth::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += context.getNThWeekInMonth().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(m_nThWeekInMonth_);

    return endBitPosition - bitPosition;
}

size_t WeekInMonth::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(3);

    return endBitPosition;
}

size_t WeekInMonth::initializeOffsets(WeekInMonth::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += context.getNThWeekInMonth().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(m_nThWeekInMonth_);

    return endBitPosition;
}

bool WeekInMonth::operator==(const WeekInMonth& other) const
{
    if (this != &other)
    {
        return
                (m_countBackwardWeekInMonth_ == other.m_countBackwardWeekInMonth_) &&
                (m_nThWeekInMonth_ == other.m_nThWeekInMonth_);
    }

    return true;
}

uint32_t WeekInMonth::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_countBackwardWeekInMonth_);
    result = ::zserio::calcHashCode(result, m_nThWeekInMonth_);

    return result;
}

void WeekInMonth::write(::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_countBackwardWeekInMonth_);
    out.writeBits(m_nThWeekInMonth_, UINT8_C(3));
}

void WeekInMonth::write(WeekInMonth::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_countBackwardWeekInMonth_);
    context.getNThWeekInMonth().write<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(out, m_nThWeekInMonth_);
}

bool WeekInMonth::readCountBackwardWeekInMonth(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
uint8_t WeekInMonth::readNThWeekInMonth(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(3)));
}

uint8_t WeekInMonth::readNThWeekInMonth(WeekInMonth::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNThWeekInMonth().read<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(in);
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>

#include <nds/core/conditions/WeekdayInMonth.h>

namespace nds
{
namespace core
{
namespace conditions
{

WeekdayInMonth::WeekdayInMonth(const allocator_type&) noexcept :
        m_dayOfWeek_(uint8_t()),
        m_countBackwardWeekdayInMonth_(bool()),
        m_nThWeekdayInMonth_(uint8_t())
{
}

WeekdayInMonth::WeekdayInMonth(::zserio::BitStreamReader& in, const allocator_type&) :
        m_dayOfWeek_(readDayOfWeek(in)),
        m_countBackwardWeekdayInMonth_(readCountBackwardWeekdayInMonth(in)),
        m_nThWeekdayInMonth_(readNThWeekdayInMonth(in))
{
}

WeekdayInMonth::WeekdayInMonth(WeekdayInMonth::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_dayOfWeek_(readDayOfWeek(context, in)),
        m_countBackwardWeekdayInMonth_(readCountBackwardWeekdayInMonth(in)),
        m_nThWeekdayInMonth_(readNThWeekdayInMonth(context, in))
{
}

WeekdayInMonth::WeekdayInMonth(::zserio::PropagateAllocatorT,
        const WeekdayInMonth& other, const allocator_type& allocator) :
        m_dayOfWeek_(::zserio::allocatorPropagatingCopy(other.m_dayOfWeek_, allocator)),
        m_countBackwardWeekdayInMonth_(::zserio::allocatorPropagatingCopy(other.m_countBackwardWeekdayInMonth_, allocator)),
        m_nThWeekdayInMonth_(::zserio::allocatorPropagatingCopy(other.m_nThWeekdayInMonth_, allocator))
{
}

uint8_t WeekdayInMonth::getDayOfWeek() const
{
    return m_dayOfWeek_;
}

void WeekdayInMonth::setDayOfWeek(uint8_t dayOfWeek_)
{
    m_dayOfWeek_ = dayOfWeek_;
}

bool WeekdayInMonth::getCountBackwardWeekdayInMonth() const
{
    return m_countBackwardWeekdayInMonth_;
}

void WeekdayInMonth::setCountBackwardWeekdayInMonth(bool countBackwardWeekdayInMonth_)
{
    m_countBackwardWeekdayInMonth_ = countBackwardWeekdayInMonth_;
}

uint8_t WeekdayInMonth::getNThWeekdayInMonth() const
{
    return m_nThWeekdayInMonth_;
}

void WeekdayInMonth::setNThWeekdayInMonth(uint8_t nThWeekdayInMonth_)
{
    m_nThWeekdayInMonth_ = nThWeekdayInMonth_;
}

void WeekdayInMonth::initPackingContext(WeekdayInMonth::ZserioPackingContext& context) const
{
    context.getDayOfWeek().init<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(m_dayOfWeek_);
    context.getNThWeekdayInMonth().init<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(m_nThWeekdayInMonth_);
}

size_t WeekdayInMonth::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(4);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(3);

    return endBitPosition - bitPosition;
}

size_t WeekdayInMonth::bitSizeOf(WeekdayInMonth::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getDayOfWeek().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(m_dayOfWeek_);
    endBitPosition += UINT8_C(1);
    endBitPosition += context.getNThWeekdayInMonth().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(m_nThWeekdayInMonth_);

    return endBitPosition - bitPosition;
}

size_t WeekdayInMonth::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(4);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(3);

    return endBitPosition;
}

size_t WeekdayInMonth::initializeOffsets(WeekdayInMonth::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getDayOfWeek().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(m_dayOfWeek_);
    endBitPosition += UINT8_C(1);
    endBitPosition += context.getNThWeekdayInMonth().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(m_nThWeekdayInMonth_);

    return endBitPosition;
}

bool WeekdayInMonth::operator==(const WeekdayInMonth& other) const
{
    if (this != &other)
    {
        return
                (m_dayOfWeek_ == other.m_dayOfWeek_) &&
                (m_countBackwardWeekdayInMonth_ == other.m_countBackwardWeekdayInMonth_) &&
                (m_nThWeekdayInMonth_ == other.m_nThWeekdayInMonth_);
    }

    return true;
}

uint32_t WeekdayInMonth::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_dayOfWeek_);
    result = ::zserio::calcHashCode(result, m_countBackwardWeekdayInMonth_);
    result = ::zserio::calcHashCode(result, m_nThWeekdayInMonth_);

    return result;
}

void WeekdayInMonth::write(::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getDayOfWeek() <= 6))
        throw ::zserio::ConstraintException("Write: Constraint violated at WeekdayInMonth.dayOfWeek!");
    out.writeBits(m_dayOfWeek_, UINT8_C(4));

    out.writeBool(m_countBackwardWeekdayInMonth_);

    out.writeBits(m_nThWeekdayInMonth_, UINT8_C(3));
}

void WeekdayInMonth::write(WeekdayInMonth::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getDayOfWeek() <= 6))
        throw ::zserio::ConstraintException("Write: Constraint violated at WeekdayInMonth.dayOfWeek!");
    context.getDayOfWeek().write<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(out, m_dayOfWeek_);

    out.writeBool(m_countBackwardWeekdayInMonth_);

    context.getNThWeekdayInMonth().write<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(out, m_nThWeekdayInMonth_);
}

uint8_t WeekdayInMonth::readDayOfWeek(::zserio::BitStreamReader& in)
{
    uint8_t readField = static_cast<uint8_t>(in.readBits(UINT8_C(4)));
    // check constraint
    if (!(readField <= 6))
        throw ::zserio::ConstraintException("Read: Constraint violated at WeekdayInMonth.dayOfWeek!");

    return readField;
}

uint8_t WeekdayInMonth::readDayOfWeek(WeekdayInMonth::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint8_t readField = context.getDayOfWeek().read<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(in);
    // check constraint
    if (!(readField <= 6))
        throw ::zserio::ConstraintException("Read: Constraint violated at WeekdayInMonth.dayOfWeek!");

    return readField;
}
bool WeekdayInMonth::readCountBackwardWeekdayInMonth(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
uint8_t WeekdayInMonth::readNThWeekdayInMonth(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(3)));
}

uint8_t WeekdayInMonth::readNThWeekdayInMonth(WeekdayInMonth::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNThWeekdayInMonth().read<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(3)>>(in);
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>

#include <nds/core/conditions/CalendarWeek.h>

namespace nds
{
namespace core
{
namespace conditions
{

CalendarWeek::CalendarWeek(const allocator_type&) noexcept :
        m_week_(uint8_t())
{
}

CalendarWeek::CalendarWeek(::zserio::BitStreamReader& in, const allocator_type&) :
        m_week_(readWeek(in))
{
}

CalendarWeek::CalendarWeek(CalendarWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_week_(readWeek(context, in))
{
}

CalendarWeek::CalendarWeek(::zserio::PropagateAllocatorT,
        const CalendarWeek& other, const allocator_type& allocator) :
        m_week_(::zserio::allocatorPropagatingCopy(other.m_week_, allocator))
{
}

uint8_t CalendarWeek::getWeek() const
{
    return m_week_;
}

void CalendarWeek::setWeek(uint8_t week_)
{
    m_week_ = week_;
}

void CalendarWeek::initPackingContext(CalendarWeek::ZserioPackingContext& context) const
{
    context.getWeek().init<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(6)>>(m_week_);
}

size_t CalendarWeek::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(6);

    return endBitPosition - bitPosition;
}

size_t CalendarWeek::bitSizeOf(CalendarWeek::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getWeek().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(6)>>(m_week_);

    return endBitPosition - bitPosition;
}

size_t CalendarWeek::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(6);

    return endBitPosition;
}

size_t CalendarWeek::initializeOffsets(CalendarWeek::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getWeek().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(6)>>(m_week_);

    return endBitPosition;
}

bool CalendarWeek::operator==(const CalendarWeek& other) const
{
    if (this != &other)
    {
        return
                (m_week_ == other.m_week_);
    }

    return true;
}

uint32_t CalendarWeek::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_week_);

    return result;
}

void CalendarWeek::write(::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getWeek() > 0 && getWeek() <= 53))
        throw ::zserio::ConstraintException("Write: Constraint violated at CalendarWeek.week!");
    out.writeBits(m_week_, UINT8_C(6));
}

void CalendarWeek::write(CalendarWeek::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getWeek() > 0 && getWeek() <= 53))
        throw ::zserio::ConstraintException("Write: Constraint violated at CalendarWeek.week!");
    context.getWeek().write<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(6)>>(out, m_week_);
}

uint8_t CalendarWeek::readWeek(::zserio::BitStreamReader& in)
{
    uint8_t readField = static_cast<uint8_t>(in.readBits(UINT8_C(6)));
    // check constraint
    if (!(readField > 0 && readField <= 53))
        throw ::zserio::ConstraintException("Read: Constraint violated at CalendarWeek.week!");

    return readField;
}

uint8_t CalendarWeek::readWeek(CalendarWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint8_t readField = context.getWeek().read<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(6)>>(in);
    // check constraint
    if (!(readField > 0 && readField <= 53))
        throw ::zserio::ConstraintException("Read: Constraint violated at CalendarWeek.week!");

    return readField;
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>

#include <nds/core/conditions/TimeDuration.h>

namespace nds
{
namespace core
{
namespace conditions
{

TimeDuration::TimeDuration(const allocator_type&) noexcept :
        m_days_(uint8_t()),
        m_months_(uint8_t()),
        m_years_(uint8_t())
{
}

TimeDuration::TimeDuration(::zserio::BitStreamReader& in, const allocator_type&) :
        m_days_(readDays(in)),
        m_months_(readMonths(in)),
        m_years_(readYears(in))
{
}

TimeDuration::TimeDuration(TimeDuration::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_days_(readDays(context, in)),
        m_months_(readMonths(context, in)),
        m_years_(readYears(context, in))
{
}

TimeDuration::TimeDuration(::zserio::PropagateAllocatorT,
        const TimeDuration& other, const allocator_type& allocator) :
        m_days_(::zserio::allocatorPropagatingCopy(other.m_days_, allocator)),
        m_months_(::zserio::allocatorPropagatingCopy(other.m_months_, allocator)),
        m_years_(::zserio::allocatorPropagatingCopy(other.m_years_, allocator))
{
}

uint8_t TimeDuration::getDays() const
{
    return m_days_;
}

void TimeDuration::setDays(uint8_t days_)
{
    m_days_ = days_;
}

uint8_t TimeDuration::getMonths() const
{
    return m_months_;
}

void TimeDuration::setMonths(uint8_t months_)
{
    m_months_ = months_;
}

uint8_t TimeDuration::getYears() const
{
    return m_years_;
}

void TimeDuration::setYears(uint8_t years_)
{
    m_years_ = years_;
}

void TimeDuration::initPackingContext(TimeDuration::ZserioPackingContext& context) const
{
    context.getDays().init<::zserio::StdIntArrayTraits<uint8_t>>(m_days_);
    context.getMonths().init<::zserio::StdIntArrayTraits<uint8_t>>(m_months_);
    context.getYears().init<::zserio::StdIntArrayTraits<uint8_t>>(m_years_);
}

size_t TimeDuration::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);

    return endBitPosition - bitPosition;
}

size_t TimeDuration::bitSizeOf(TimeDuration::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getDays().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_days_);
    endBitPosition += context.getMonths().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_months_);
    endBitPosition += context.getYears().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_years_);

    return endBitPosition - bitPosition;
}

size_t TimeDuration::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);

    return endBitPosition;
}

size_t TimeDuration::initializeOffsets(TimeDuration::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getDays().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_days_);
    endBitPosition += context.getMonths().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_months_);
    endBitPosition += context.getYears().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_years_);

    return endBitPosition;
}

bool TimeDuration::operator==(const TimeDuration& other) const
{
    if (this != &other)
    {
        return
                (m_days_ == other.m_days_) &&
                (m_months_ == other.m_months_) &&
                (m_years_ == other.m_years_);
    }

    return true;
}

uint32_t TimeDuration::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_days_);
    result = ::zserio::calcHashCode(result, m_months_);
    result = ::zserio::calcHashCode(result, m_years_);

    return result;
}

void TimeDuration::write(::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getDays() <= 30))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeDuration.days!");
    out.writeBits(m_days_, UINT8_C(8));

    // check constraint
    if (!(getMonths() <= 12))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeDuration.months!");
    out.writeBits(m_months_, UINT8_C(8));

    out.writeBits(m_years_, UINT8_C(8));
}

void TimeDuration::write(TimeDuration::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getDays() <= 30))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeDuration.days!");
    context.getDays().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_days_);

    // check constraint
    if (!(getMonths() <= 12))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeDuration.months!");
    context.getMonths().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_months_);

    context.getYears().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_years_);
}

uint8_t TimeDuration::readDays(::zserio::BitStreamReader& in)
{
    uint8_t readField = static_cast<uint8_t>(in.readBits(UINT8_C(8)));
    // check constraint
    if (!(readField <= 30))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeDuration.days!");

    return readField;
}

uint8_t TimeDuration::readDays(TimeDuration::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint8_t readField = context.getDays().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
    // check constraint
    if (!(readField <= 30))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeDuration.days!");

    return readField;
}
uint8_t TimeDuration::readMonths(::zserio::BitStreamReader& in)
{
    uint8_t readField = static_cast<uint8_t>(in.readBits(UINT8_C(8)));
    // check constraint
    if (!(readField <= 12))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeDuration.months!");

    return readField;
}

uint8_t TimeDuration::readMonths(TimeDuration::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint8_t readField = context.getMonths().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
    // check constraint
    if (!(readField <= 12))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeDuration.months!");

    return readField;
}
uint8_t TimeDuration::readYears(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}

uint8_t TimeDuration::readYears(TimeDuration::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getYears().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>

#include <nds/core/conditions/TimeDurationHours.h>

namespace nds
{
namespace core
{
namespace conditions
{

TimeDurationHours::TimeDurationHours(const allocator_type&) noexcept :
        m_hours_(uint8_t()),
        m_minutes_(uint8_t())
{
}

TimeDurationHours::TimeDurationHours(::zserio::BitStreamReader& in, const allocator_type&) :
        m_hours_(readHours(in)),
        m_minutes_(readMinutes(in))
{
}

TimeDurationHours::TimeDurationHours(TimeDurationHours::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_hours_(readHours(context, in)),
        m_minutes_(readMinutes(context, in))
{
}

TimeDurationHours::TimeDurationHours(::zserio::PropagateAllocatorT,
        const TimeDurationHours& other, const allocator_type& allocator) :
        m_hours_(::zserio::allocatorPropagatingCopy(other.m_hours_, allocator)),
        m_minutes_(::zserio::allocatorPropagatingCopy(other.m_minutes_, allocator))
{
}

uint8_t TimeDurationHours::getHours() const
{
    return m_hours_;
}

void TimeDurationHours::setHours(uint8_t hours_)
{
    m_hours_ = hours_;
}

uint8_t TimeDurationHours::getMinutes() const
{
    return m_minutes_;
}

void TimeDurationHours::setMinutes(uint8_t minutes_)
{
    m_minutes_ = minutes_;
}

void TimeDurationHours::initPackingContext(TimeDurationHours::ZserioPackingContext& context) const
{
    context.getHours().init<::zserio::StdIntArrayTraits<uint8_t>>(m_hours_);
    context.getMinutes().init<::zserio::StdIntArrayTraits<uint8_t>>(m_minutes_);
}

size_t TimeDurationHours::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);

    return endBitPosition - bitPosition;
}

size_t TimeDurationHours::bitSizeOf(TimeDurationHours::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getHours().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_hours_);
    endBitPosition += context.getMinutes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_minutes_);

    return endBitPosition - bitPosition;
}

size_t TimeDurationHours::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);

    return endBitPosition;
}

size_t TimeDurationHours::initializeOffsets(TimeDurationHours::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getHours().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_hours_);
    endBitPosition += context.getMinutes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_minutes_);

    return endBitPosition;
}

bool TimeDurationHours::operator==(const TimeDurationHours& other) const
{
    if (this != &other)
    {
        return
                (m_hours_ == other.m_hours_) &&
                (m_minutes_ == other.m_minutes_);
    }

    return true;
}

uint32_t TimeDurationHours::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_hours_);
    result = ::zserio::calcHashCode(result, m_minutes_);

    return result;
}

void TimeDurationHours::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_hours_, UINT8_C(8));

    // check constraint
    if (!(getMinutes() < 60))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeDurationHours.minutes!");
    out.writeBits(m_minutes_, UINT8_C(8));
}

void TimeDurationHours::write(TimeDurationHours::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getHours().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_hours_);

    // check constraint
    if (!(getMinutes() < 60))
        throw ::zserio::ConstraintException("Write: Constraint violated at TimeDurationHours.minutes!");
    context.getMinutes().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_minutes_);
}

uint8_t TimeDurationHours::readHours(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}

uint8_t TimeDurationHours::readHours(TimeDurationHours::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getHours().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
}
uint8_t TimeDurationHours::readMinutes(::zserio::BitStreamReader& in)
{
    uint8_t readField = static_cast<uint8_t>(in.readBits(UINT8_C(8)));
    // check constraint
    if (!(readField < 60))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeDurationHours.minutes!");

    return readField;
}

uint8_t TimeDurationHours::readMinutes(TimeDurationHours::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint8_t readField = context.getMinutes().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
    // check constraint
    if (!(readField < 60))
        throw ::zserio::ConstraintException("Read: Constraint violated at TimeDurationHours.minutes!");

    return readField;
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/FuzzyTimeDomainCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

FuzzyTimeDomainCondition::FuzzyTimeDomainCondition(const allocator_type&) noexcept :
        m_fuzzyTime_(::nds::core::conditions::FuzzyTimeDomain()),
        m_isInclusive_(bool())
{
}

FuzzyTimeDomainCondition::FuzzyTimeDomainCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_fuzzyTime_(readFuzzyTime(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

FuzzyTimeDomainCondition::FuzzyTimeDomainCondition(FuzzyTimeDomainCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_fuzzyTime_(readFuzzyTime(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

FuzzyTimeDomainCondition::FuzzyTimeDomainCondition(::zserio::PropagateAllocatorT,
        const FuzzyTimeDomainCondition& other, const allocator_type& allocator) :
        m_fuzzyTime_(::zserio::allocatorPropagatingCopy(other.m_fuzzyTime_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::conditions::FuzzyTimeDomain FuzzyTimeDomainCondition::getFuzzyTime() const
{
    return m_fuzzyTime_;
}

void FuzzyTimeDomainCondition::setFuzzyTime(::nds::core::conditions::FuzzyTimeDomain fuzzyTime_)
{
    m_fuzzyTime_ = fuzzyTime_;
}

bool FuzzyTimeDomainCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void FuzzyTimeDomainCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void FuzzyTimeDomainCondition::initPackingContext(FuzzyTimeDomainCondition::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getFuzzyTime(), m_fuzzyTime_);
}

size_t FuzzyTimeDomainCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_fuzzyTime_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t FuzzyTimeDomainCondition::bitSizeOf(FuzzyTimeDomainCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getFuzzyTime(), m_fuzzyTime_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t FuzzyTimeDomainCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_fuzzyTime_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t FuzzyTimeDomainCondition::initializeOffsets(FuzzyTimeDomainCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getFuzzyTime(), endBitPosition,
        m_fuzzyTime_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool FuzzyTimeDomainCondition::operator==(const FuzzyTimeDomainCondition& other) const
{
    if (this != &other)
    {
        return
                (m_fuzzyTime_ == other.m_fuzzyTime_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t FuzzyTimeDomainCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_fuzzyTime_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void FuzzyTimeDomainCondition::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_fuzzyTime_);
    out.writeBool(m_isInclusive_);
}

void FuzzyTimeDomainCondition::write(FuzzyTimeDomainCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getFuzzyTime(), out, m_fuzzyTime_);
    out.writeBool(m_isInclusive_);
}

::nds::core::conditions::FuzzyTimeDomain FuzzyTimeDomainCondition::readFuzzyTime(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::conditions::FuzzyTimeDomain>(in);
}

::nds::core::conditions::FuzzyTimeDomain FuzzyTimeDomainCondition::readFuzzyTime(FuzzyTimeDomainCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::conditions::FuzzyTimeDomain>(context.getFuzzyTime(), in);
}
bool FuzzyTimeDomainCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/WeatherCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

WeatherCondition::WeatherCondition(const allocator_type&) noexcept :
        m_weather_(::nds::core::conditions::Weather()),
        m_isInclusive_(bool())
{
}

WeatherCondition::WeatherCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_weather_(readWeather(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

WeatherCondition::WeatherCondition(WeatherCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_weather_(readWeather(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

WeatherCondition::WeatherCondition(::zserio::PropagateAllocatorT,
        const WeatherCondition& other, const allocator_type& allocator) :
        m_weather_(::zserio::allocatorPropagatingCopy(other.m_weather_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::conditions::Weather WeatherCondition::getWeather() const
{
    return m_weather_;
}

void WeatherCondition::setWeather(::nds::core::conditions::Weather weather_)
{
    m_weather_ = weather_;
}

bool WeatherCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void WeatherCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void WeatherCondition::initPackingContext(WeatherCondition::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getWeather(), m_weather_);
}

size_t WeatherCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_weather_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t WeatherCondition::bitSizeOf(WeatherCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getWeather(), m_weather_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t WeatherCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_weather_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t WeatherCondition::initializeOffsets(WeatherCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getWeather(), endBitPosition,
        m_weather_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool WeatherCondition::operator==(const WeatherCondition& other) const
{
    if (this != &other)
    {
        return
                (m_weather_ == other.m_weather_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t WeatherCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_weather_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void WeatherCondition::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_weather_);
    out.writeBool(m_isInclusive_);
}

void WeatherCondition::write(WeatherCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getWeather(), out, m_weather_);
    out.writeBool(m_isInclusive_);
}

::nds::core::conditions::Weather WeatherCondition::readWeather(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::conditions::Weather>(in);
}

::nds::core::conditions::Weather WeatherCondition::readWeather(WeatherCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::conditions::Weather>(context.getWeather(), in);
}
bool WeatherCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/FrequentlyUsedVehicleTypesCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

FrequentlyUsedVehicleTypesCondition::FrequentlyUsedVehicleTypesCondition(const allocator_type&) noexcept :
        m_vehicleTypes_(::nds::core::vehicle::FrequentlyUsedVehicleTypes()),
        m_isInclusive_(bool())
{
}

FrequentlyUsedVehicleTypesCondition::FrequentlyUsedVehicleTypesCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_vehicleTypes_(readVehicleTypes(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

FrequentlyUsedVehicleTypesCondition::FrequentlyUsedVehicleTypesCondition(FrequentlyUsedVehicleTypesCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_vehicleTypes_(readVehicleTypes(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

FrequentlyUsedVehicleTypesCondition::FrequentlyUsedVehicleTypesCondition(::zserio::PropagateAllocatorT,
        const FrequentlyUsedVehicleTypesCondition& other, const allocator_type& allocator) :
        m_vehicleTypes_(::zserio::allocatorPropagatingCopy(other.m_vehicleTypes_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::FrequentlyUsedVehicleTypes FrequentlyUsedVehicleTypesCondition::getVehicleTypes() const
{
    return m_vehicleTypes_;
}

void FrequentlyUsedVehicleTypesCondition::setVehicleTypes(::nds::core::vehicle::FrequentlyUsedVehicleTypes vehicleTypes_)
{
    m_vehicleTypes_ = vehicleTypes_;
}

bool FrequentlyUsedVehicleTypesCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void FrequentlyUsedVehicleTypesCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void FrequentlyUsedVehicleTypesCondition::initPackingContext(FrequentlyUsedVehicleTypesCondition::ZserioPackingContext& context) const
{
    m_vehicleTypes_.initPackingContext(context.getVehicleTypes());
}

size_t FrequentlyUsedVehicleTypesCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_vehicleTypes_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t FrequentlyUsedVehicleTypesCondition::bitSizeOf(FrequentlyUsedVehicleTypesCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_vehicleTypes_.bitSizeOf(context.getVehicleTypes(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t FrequentlyUsedVehicleTypesCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_vehicleTypes_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t FrequentlyUsedVehicleTypesCondition::initializeOffsets(FrequentlyUsedVehicleTypesCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_vehicleTypes_.initializeOffsets(context.getVehicleTypes(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool FrequentlyUsedVehicleTypesCondition::operator==(const FrequentlyUsedVehicleTypesCondition& other) const
{
    if (this != &other)
    {
        return
                (m_vehicleTypes_ == other.m_vehicleTypes_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t FrequentlyUsedVehicleTypesCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_vehicleTypes_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void FrequentlyUsedVehicleTypesCondition::write(::zserio::BitStreamWriter& out) const
{
    m_vehicleTypes_.write(out);
    out.writeBool(m_isInclusive_);
}

void FrequentlyUsedVehicleTypesCondition::write(FrequentlyUsedVehicleTypesCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_vehicleTypes_.write(context.getVehicleTypes(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::FrequentlyUsedVehicleTypes FrequentlyUsedVehicleTypesCondition::readVehicleTypes(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::FrequentlyUsedVehicleTypes(in);
}

::nds::core::vehicle::FrequentlyUsedVehicleTypes FrequentlyUsedVehicleTypesCondition::readVehicleTypes(FrequentlyUsedVehicleTypesCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::FrequentlyUsedVehicleTypes(context.getVehicleTypes(), in);
}
bool FrequentlyUsedVehicleTypesCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/SlowRoadUsersCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

SlowRoadUsersCondition::SlowRoadUsersCondition(const allocator_type&) noexcept :
        m_slowRoadUsers_(::nds::core::vehicle::SlowRoadUserTypes()),
        m_isInclusive_(bool())
{
}

SlowRoadUsersCondition::SlowRoadUsersCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_slowRoadUsers_(readSlowRoadUsers(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

SlowRoadUsersCondition::SlowRoadUsersCondition(SlowRoadUsersCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_slowRoadUsers_(readSlowRoadUsers(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

SlowRoadUsersCondition::SlowRoadUsersCondition(::zserio::PropagateAllocatorT,
        const SlowRoadUsersCondition& other, const allocator_type& allocator) :
        m_slowRoadUsers_(::zserio::allocatorPropagatingCopy(other.m_slowRoadUsers_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::SlowRoadUserTypes SlowRoadUsersCondition::getSlowRoadUsers() const
{
    return m_slowRoadUsers_;
}

void SlowRoadUsersCondition::setSlowRoadUsers(::nds::core::vehicle::SlowRoadUserTypes slowRoadUsers_)
{
    m_slowRoadUsers_ = slowRoadUsers_;
}

bool SlowRoadUsersCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void SlowRoadUsersCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void SlowRoadUsersCondition::initPackingContext(SlowRoadUsersCondition::ZserioPackingContext& context) const
{
    m_slowRoadUsers_.initPackingContext(context.getSlowRoadUsers());
}

size_t SlowRoadUsersCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_slowRoadUsers_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t SlowRoadUsersCondition::bitSizeOf(SlowRoadUsersCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_slowRoadUsers_.bitSizeOf(context.getSlowRoadUsers(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t SlowRoadUsersCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_slowRoadUsers_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t SlowRoadUsersCondition::initializeOffsets(SlowRoadUsersCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_slowRoadUsers_.initializeOffsets(context.getSlowRoadUsers(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool SlowRoadUsersCondition::operator==(const SlowRoadUsersCondition& other) const
{
    if (this != &other)
    {
        return
                (m_slowRoadUsers_ == other.m_slowRoadUsers_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t SlowRoadUsersCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_slowRoadUsers_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void SlowRoadUsersCondition::write(::zserio::BitStreamWriter& out) const
{
    m_slowRoadUsers_.write(out);
    out.writeBool(m_isInclusive_);
}

void SlowRoadUsersCondition::write(SlowRoadUsersCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_slowRoadUsers_.write(context.getSlowRoadUsers(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::SlowRoadUserTypes SlowRoadUsersCondition::readSlowRoadUsers(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::SlowRoadUserTypes(in);
}

::nds::core::vehicle::SlowRoadUserTypes SlowRoadUsersCondition::readSlowRoadUsers(SlowRoadUsersCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::SlowRoadUserTypes(context.getSlowRoadUsers(), in);
}
bool SlowRoadUsersCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/BigVehiclesCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

BigVehiclesCondition::BigVehiclesCondition(const allocator_type&) noexcept :
        m_bigVehicles_(::nds::core::vehicle::BigVehicleTypes()),
        m_isInclusive_(bool())
{
}

BigVehiclesCondition::BigVehiclesCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_bigVehicles_(readBigVehicles(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

BigVehiclesCondition::BigVehiclesCondition(BigVehiclesCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_bigVehicles_(readBigVehicles(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

BigVehiclesCondition::BigVehiclesCondition(::zserio::PropagateAllocatorT,
        const BigVehiclesCondition& other, const allocator_type& allocator) :
        m_bigVehicles_(::zserio::allocatorPropagatingCopy(other.m_bigVehicles_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::BigVehicleTypes BigVehiclesCondition::getBigVehicles() const
{
    return m_bigVehicles_;
}

void BigVehiclesCondition::setBigVehicles(::nds::core::vehicle::BigVehicleTypes bigVehicles_)
{
    m_bigVehicles_ = bigVehicles_;
}

bool BigVehiclesCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void BigVehiclesCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void BigVehiclesCondition::initPackingContext(BigVehiclesCondition::ZserioPackingContext& context) const
{
    m_bigVehicles_.initPackingContext(context.getBigVehicles());
}

size_t BigVehiclesCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_bigVehicles_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t BigVehiclesCondition::bitSizeOf(BigVehiclesCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_bigVehicles_.bitSizeOf(context.getBigVehicles(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t BigVehiclesCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_bigVehicles_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t BigVehiclesCondition::initializeOffsets(BigVehiclesCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_bigVehicles_.initializeOffsets(context.getBigVehicles(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool BigVehiclesCondition::operator==(const BigVehiclesCondition& other) const
{
    if (this != &other)
    {
        return
                (m_bigVehicles_ == other.m_bigVehicles_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t BigVehiclesCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_bigVehicles_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void BigVehiclesCondition::write(::zserio::BitStreamWriter& out) const
{
    m_bigVehicles_.write(out);
    out.writeBool(m_isInclusive_);
}

void BigVehiclesCondition::write(BigVehiclesCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_bigVehicles_.write(context.getBigVehicles(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::BigVehicleTypes BigVehiclesCondition::readBigVehicles(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::BigVehicleTypes(in);
}

::nds::core::vehicle::BigVehicleTypes BigVehiclesCondition::readBigVehicles(BigVehiclesCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::BigVehicleTypes(context.getBigVehicles(), in);
}
bool BigVehiclesCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/PublicServiceVehiclesCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

PublicServiceVehiclesCondition::PublicServiceVehiclesCondition(const allocator_type&) noexcept :
        m_vehicles_(::nds::core::vehicle::PublicServiceVehicleTypes()),
        m_isInclusive_(bool())
{
}

PublicServiceVehiclesCondition::PublicServiceVehiclesCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_vehicles_(readVehicles(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

PublicServiceVehiclesCondition::PublicServiceVehiclesCondition(PublicServiceVehiclesCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_vehicles_(readVehicles(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

PublicServiceVehiclesCondition::PublicServiceVehiclesCondition(::zserio::PropagateAllocatorT,
        const PublicServiceVehiclesCondition& other, const allocator_type& allocator) :
        m_vehicles_(::zserio::allocatorPropagatingCopy(other.m_vehicles_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::PublicServiceVehicleTypes PublicServiceVehiclesCondition::getVehicles() const
{
    return m_vehicles_;
}

void PublicServiceVehiclesCondition::setVehicles(::nds::core::vehicle::PublicServiceVehicleTypes vehicles_)
{
    m_vehicles_ = vehicles_;
}

bool PublicServiceVehiclesCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void PublicServiceVehiclesCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void PublicServiceVehiclesCondition::initPackingContext(PublicServiceVehiclesCondition::ZserioPackingContext& context) const
{
    m_vehicles_.initPackingContext(context.getVehicles());
}

size_t PublicServiceVehiclesCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_vehicles_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t PublicServiceVehiclesCondition::bitSizeOf(PublicServiceVehiclesCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_vehicles_.bitSizeOf(context.getVehicles(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t PublicServiceVehiclesCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_vehicles_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t PublicServiceVehiclesCondition::initializeOffsets(PublicServiceVehiclesCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_vehicles_.initializeOffsets(context.getVehicles(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool PublicServiceVehiclesCondition::operator==(const PublicServiceVehiclesCondition& other) const
{
    if (this != &other)
    {
        return
                (m_vehicles_ == other.m_vehicles_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t PublicServiceVehiclesCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_vehicles_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void PublicServiceVehiclesCondition::write(::zserio::BitStreamWriter& out) const
{
    m_vehicles_.write(out);
    out.writeBool(m_isInclusive_);
}

void PublicServiceVehiclesCondition::write(PublicServiceVehiclesCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_vehicles_.write(context.getVehicles(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::PublicServiceVehicleTypes PublicServiceVehiclesCondition::readVehicles(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::PublicServiceVehicleTypes(in);
}

::nds::core::vehicle::PublicServiceVehicleTypes PublicServiceVehiclesCondition::readVehicles(PublicServiceVehiclesCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::PublicServiceVehicleTypes(context.getVehicles(), in);
}
bool PublicServiceVehiclesCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/EmergencyMilitaryDetailCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

EmergencyMilitaryDetailCondition::EmergencyMilitaryDetailCondition(const allocator_type&) noexcept :
        m_vehicles_(::nds::core::vehicle::EmergencyMilitaryDetailTypes()),
        m_isInclusive_(bool())
{
}

EmergencyMilitaryDetailCondition::EmergencyMilitaryDetailCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_vehicles_(readVehicles(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

EmergencyMilitaryDetailCondition::EmergencyMilitaryDetailCondition(EmergencyMilitaryDetailCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_vehicles_(readVehicles(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

EmergencyMilitaryDetailCondition::EmergencyMilitaryDetailCondition(::zserio::PropagateAllocatorT,
        const EmergencyMilitaryDetailCondition& other, const allocator_type& allocator) :
        m_vehicles_(::zserio::allocatorPropagatingCopy(other.m_vehicles_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::EmergencyMilitaryDetailTypes EmergencyMilitaryDetailCondition::getVehicles() const
{
    return m_vehicles_;
}

void EmergencyMilitaryDetailCondition::setVehicles(::nds::core::vehicle::EmergencyMilitaryDetailTypes vehicles_)
{
    m_vehicles_ = vehicles_;
}

bool EmergencyMilitaryDetailCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void EmergencyMilitaryDetailCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void EmergencyMilitaryDetailCondition::initPackingContext(EmergencyMilitaryDetailCondition::ZserioPackingContext& context) const
{
    m_vehicles_.initPackingContext(context.getVehicles());
}

size_t EmergencyMilitaryDetailCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_vehicles_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t EmergencyMilitaryDetailCondition::bitSizeOf(EmergencyMilitaryDetailCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_vehicles_.bitSizeOf(context.getVehicles(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t EmergencyMilitaryDetailCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_vehicles_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t EmergencyMilitaryDetailCondition::initializeOffsets(EmergencyMilitaryDetailCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_vehicles_.initializeOffsets(context.getVehicles(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool EmergencyMilitaryDetailCondition::operator==(const EmergencyMilitaryDetailCondition& other) const
{
    if (this != &other)
    {
        return
                (m_vehicles_ == other.m_vehicles_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t EmergencyMilitaryDetailCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_vehicles_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void EmergencyMilitaryDetailCondition::write(::zserio::BitStreamWriter& out) const
{
    m_vehicles_.write(out);
    out.writeBool(m_isInclusive_);
}

void EmergencyMilitaryDetailCondition::write(EmergencyMilitaryDetailCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_vehicles_.write(context.getVehicles(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::EmergencyMilitaryDetailTypes EmergencyMilitaryDetailCondition::readVehicles(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::EmergencyMilitaryDetailTypes(in);
}

::nds::core::vehicle::EmergencyMilitaryDetailTypes EmergencyMilitaryDetailCondition::readVehicles(EmergencyMilitaryDetailCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::EmergencyMilitaryDetailTypes(context.getVehicles(), in);
}
bool EmergencyMilitaryDetailCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/EquipmentCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

EquipmentCondition::EquipmentCondition(const allocator_type&) noexcept :
        m_equipment_(::nds::core::vehicle::Equipment()),
        m_isInclusive_(bool())
{
}

EquipmentCondition::EquipmentCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_equipment_(readEquipment(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

EquipmentCondition::EquipmentCondition(EquipmentCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_equipment_(readEquipment(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

EquipmentCondition::EquipmentCondition(::zserio::PropagateAllocatorT,
        const EquipmentCondition& other, const allocator_type& allocator) :
        m_equipment_(::zserio::allocatorPropagatingCopy(other.m_equipment_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::Equipment EquipmentCondition::getEquipment() const
{
    return m_equipment_;
}

void EquipmentCondition::setEquipment(::nds::core::vehicle::Equipment equipment_)
{
    m_equipment_ = equipment_;
}

bool EquipmentCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void EquipmentCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void EquipmentCondition::initPackingContext(EquipmentCondition::ZserioPackingContext& context) const
{
    m_equipment_.initPackingContext(context.getEquipment());
}

size_t EquipmentCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_equipment_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t EquipmentCondition::bitSizeOf(EquipmentCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_equipment_.bitSizeOf(context.getEquipment(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t EquipmentCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_equipment_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t EquipmentCondition::initializeOffsets(EquipmentCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_equipment_.initializeOffsets(context.getEquipment(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool EquipmentCondition::operator==(const EquipmentCondition& other) const
{
    if (this != &other)
    {
        return
                (m_equipment_ == other.m_equipment_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t EquipmentCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_equipment_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void EquipmentCondition::write(::zserio::BitStreamWriter& out) const
{
    m_equipment_.write(out);
    out.writeBool(m_isInclusive_);
}

void EquipmentCondition::write(EquipmentCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_equipment_.write(context.getEquipment(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::Equipment EquipmentCondition::readEquipment(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::Equipment(in);
}

::nds::core::vehicle::Equipment EquipmentCondition::readEquipment(EquipmentCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::Equipment(context.getEquipment(), in);
}
bool EquipmentCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/AuthorizationCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

AuthorizationCondition::AuthorizationCondition(const allocator_type&) noexcept :
        m_authorization_(::nds::core::vehicle::Authorization()),
        m_isInclusive_(bool())
{
}

AuthorizationCondition::AuthorizationCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_authorization_(readAuthorization(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

AuthorizationCondition::AuthorizationCondition(AuthorizationCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_authorization_(readAuthorization(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

AuthorizationCondition::AuthorizationCondition(::zserio::PropagateAllocatorT,
        const AuthorizationCondition& other, const allocator_type& allocator) :
        m_authorization_(::zserio::allocatorPropagatingCopy(other.m_authorization_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::Authorization AuthorizationCondition::getAuthorization() const
{
    return m_authorization_;
}

void AuthorizationCondition::setAuthorization(::nds::core::vehicle::Authorization authorization_)
{
    m_authorization_ = authorization_;
}

bool AuthorizationCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void AuthorizationCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void AuthorizationCondition::initPackingContext(AuthorizationCondition::ZserioPackingContext& context) const
{
    m_authorization_.initPackingContext(context.getAuthorization());
}

size_t AuthorizationCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_authorization_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t AuthorizationCondition::bitSizeOf(AuthorizationCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_authorization_.bitSizeOf(context.getAuthorization(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t AuthorizationCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_authorization_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t AuthorizationCondition::initializeOffsets(AuthorizationCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_authorization_.initializeOffsets(context.getAuthorization(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool AuthorizationCondition::operator==(const AuthorizationCondition& other) const
{
    if (this != &other)
    {
        return
                (m_authorization_ == other.m_authorization_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t AuthorizationCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_authorization_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void AuthorizationCondition::write(::zserio::BitStreamWriter& out) const
{
    m_authorization_.write(out);
    out.writeBool(m_isInclusive_);
}

void AuthorizationCondition::write(AuthorizationCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_authorization_.write(context.getAuthorization(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::Authorization AuthorizationCondition::readAuthorization(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::Authorization(in);
}

::nds::core::vehicle::Authorization AuthorizationCondition::readAuthorization(AuthorizationCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::Authorization(context.getAuthorization(), in);
}
bool AuthorizationCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/LoadCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

LoadCondition::LoadCondition(const allocator_type&) noexcept :
        m_load_(::nds::core::vehicle::LoadType()),
        m_isInclusive_(bool())
{
}

LoadCondition::LoadCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_load_(readLoad(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

LoadCondition::LoadCondition(LoadCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_load_(readLoad(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

LoadCondition::LoadCondition(::zserio::PropagateAllocatorT,
        const LoadCondition& other, const allocator_type& allocator) :
        m_load_(::zserio::allocatorPropagatingCopy(other.m_load_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::LoadType LoadCondition::getLoad() const
{
    return m_load_;
}

void LoadCondition::setLoad(::nds::core::vehicle::LoadType load_)
{
    m_load_ = load_;
}

bool LoadCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void LoadCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void LoadCondition::initPackingContext(LoadCondition::ZserioPackingContext& context) const
{
    m_load_.initPackingContext(context.getLoad());
}

size_t LoadCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_load_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t LoadCondition::bitSizeOf(LoadCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_load_.bitSizeOf(context.getLoad(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t LoadCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_load_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t LoadCondition::initializeOffsets(LoadCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_load_.initializeOffsets(context.getLoad(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool LoadCondition::operator==(const LoadCondition& other) const
{
    if (this != &other)
    {
        return
                (m_load_ == other.m_load_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t LoadCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_load_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void LoadCondition::write(::zserio::BitStreamWriter& out) const
{
    m_load_.write(out);
    out.writeBool(m_isInclusive_);
}

void LoadCondition::write(LoadCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_load_.write(context.getLoad(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::LoadType LoadCondition::readLoad(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::LoadType(in);
}

::nds::core::vehicle::LoadType LoadCondition::readLoad(LoadCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::LoadType(context.getLoad(), in);
}
bool LoadCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/Occupancy.h>

namespace nds
{
namespace core
{
namespace conditions
{

Occupancy::Occupancy(const allocator_type&) noexcept :
        m_occupancyCount_(::nds::core::conditions::OccupancyCount()),
        m_isInclusive_(bool())
{
}

Occupancy::Occupancy(::zserio::BitStreamReader& in, const allocator_type&) :
        m_occupancyCount_(readOccupancyCount(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

Occupancy::Occupancy(Occupancy::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_occupancyCount_(readOccupancyCount(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

Occupancy::Occupancy(::zserio::PropagateAllocatorT,
        const Occupancy& other, const allocator_type& allocator) :
        m_occupancyCount_(::zserio::allocatorPropagatingCopy(other.m_occupancyCount_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::conditions::OccupancyCount Occupancy::getOccupancyCount() const
{
    return m_occupancyCount_;
}

void Occupancy::setOccupancyCount(::nds::core::conditions::OccupancyCount occupancyCount_)
{
    m_occupancyCount_ = occupancyCount_;
}

bool Occupancy::getIsInclusive() const
{
    return m_isInclusive_;
}

void Occupancy::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void Occupancy::initPackingContext(Occupancy::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getOccupancyCount(), m_occupancyCount_);
}

size_t Occupancy::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_occupancyCount_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t Occupancy::bitSizeOf(Occupancy::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getOccupancyCount(), m_occupancyCount_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t Occupancy::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_occupancyCount_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t Occupancy::initializeOffsets(Occupancy::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getOccupancyCount(), endBitPosition,
        m_occupancyCount_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool Occupancy::operator==(const Occupancy& other) const
{
    if (this != &other)
    {
        return
                (m_occupancyCount_ == other.m_occupancyCount_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t Occupancy::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_occupancyCount_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void Occupancy::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_occupancyCount_);
    out.writeBool(m_isInclusive_);
}

void Occupancy::write(Occupancy::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getOccupancyCount(), out, m_occupancyCount_);
    out.writeBool(m_isInclusive_);
}

::nds::core::conditions::OccupancyCount Occupancy::readOccupancyCount(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::conditions::OccupancyCount>(in);
}

::nds::core::conditions::OccupancyCount Occupancy::readOccupancyCount(Occupancy::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::conditions::OccupancyCount>(context.getOccupancyCount(), in);
}
bool Occupancy::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/NumTrailersCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

NumTrailersCondition::NumTrailersCondition(const allocator_type&) noexcept :
        m_numTrailers_(::nds::core::vehicle::NumTrailers()),
        m_isInclusive_(bool())
{
}

NumTrailersCondition::NumTrailersCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_numTrailers_(readNumTrailers(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

NumTrailersCondition::NumTrailersCondition(NumTrailersCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_numTrailers_(readNumTrailers(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

NumTrailersCondition::NumTrailersCondition(::zserio::PropagateAllocatorT,
        const NumTrailersCondition& other, const allocator_type& allocator) :
        m_numTrailers_(::zserio::allocatorPropagatingCopy(other.m_numTrailers_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::NumTrailers NumTrailersCondition::getNumTrailers() const
{
    return m_numTrailers_;
}

void NumTrailersCondition::setNumTrailers(::nds::core::vehicle::NumTrailers numTrailers_)
{
    m_numTrailers_ = numTrailers_;
}

bool NumTrailersCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void NumTrailersCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void NumTrailersCondition::initPackingContext(NumTrailersCondition::ZserioPackingContext& context) const
{
    context.getNumTrailers().init<::zserio::BitFieldArrayTraits<::nds::core::vehicle::NumTrailers, UINT8_C(7)>>(m_numTrailers_);
}

size_t NumTrailersCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(7);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t NumTrailersCondition::bitSizeOf(NumTrailersCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumTrailers().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::vehicle::NumTrailers, UINT8_C(7)>>(m_numTrailers_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t NumTrailersCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(7);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t NumTrailersCondition::initializeOffsets(NumTrailersCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumTrailers().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::vehicle::NumTrailers, UINT8_C(7)>>(m_numTrailers_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool NumTrailersCondition::operator==(const NumTrailersCondition& other) const
{
    if (this != &other)
    {
        return
                (m_numTrailers_ == other.m_numTrailers_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t NumTrailersCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numTrailers_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void NumTrailersCondition::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_numTrailers_, UINT8_C(7));
    out.writeBool(m_isInclusive_);
}

void NumTrailersCondition::write(NumTrailersCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumTrailers().write<::zserio::BitFieldArrayTraits<::nds::core::vehicle::NumTrailers, UINT8_C(7)>>(out, m_numTrailers_);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::NumTrailers NumTrailersCondition::readNumTrailers(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::vehicle::NumTrailers>(in.readBits(UINT8_C(7)));
}

::nds::core::vehicle::NumTrailers NumTrailersCondition::readNumTrailers(NumTrailersCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumTrailers().read<::zserio::BitFieldArrayTraits<::nds::core::vehicle::NumTrailers, UINT8_C(7)>>(in);
}
bool NumTrailersCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/TrailerLengthMetricCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

TrailerLengthMetricCondition::TrailerLengthMetricCondition(const allocator_type&) noexcept :
        m_trailerNumber_(uint8_t()),
        m_length_(::nds::core::vehicle::TrailerLengthMetric()),
        m_isInclusive_(bool())
{
}

TrailerLengthMetricCondition::TrailerLengthMetricCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_trailerNumber_(readTrailerNumber(in)),
        m_length_(readLength(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

TrailerLengthMetricCondition::TrailerLengthMetricCondition(TrailerLengthMetricCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_trailerNumber_(readTrailerNumber(context, in)),
        m_length_(readLength(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

TrailerLengthMetricCondition::TrailerLengthMetricCondition(::zserio::PropagateAllocatorT,
        const TrailerLengthMetricCondition& other, const allocator_type& allocator) :
        m_trailerNumber_(::zserio::allocatorPropagatingCopy(other.m_trailerNumber_, allocator)),
        m_length_(::zserio::allocatorPropagatingCopy(other.m_length_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

uint8_t TrailerLengthMetricCondition::getTrailerNumber() const
{
    return m_trailerNumber_;
}

void TrailerLengthMetricCondition::setTrailerNumber(uint8_t trailerNumber_)
{
    m_trailerNumber_ = trailerNumber_;
}

::nds::core::vehicle::TrailerLengthMetric TrailerLengthMetricCondition::getLength() const
{
    return m_length_;
}

void TrailerLengthMetricCondition::setLength(::nds::core::vehicle::TrailerLengthMetric length_)
{
    m_length_ = length_;
}

bool TrailerLengthMetricCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void TrailerLengthMetricCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void TrailerLengthMetricCondition::initPackingContext(TrailerLengthMetricCondition::ZserioPackingContext& context) const
{
    context.getTrailerNumber().init<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(m_trailerNumber_);
    context.getLength().init<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthMetric>>(m_length_);
}

size_t TrailerLengthMetricCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(2);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_length_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TrailerLengthMetricCondition::bitSizeOf(TrailerLengthMetricCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getTrailerNumber().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(m_trailerNumber_);
    endBitPosition += context.getLength().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthMetric>>(m_length_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TrailerLengthMetricCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(2);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_length_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t TrailerLengthMetricCondition::initializeOffsets(TrailerLengthMetricCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getTrailerNumber().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(m_trailerNumber_);
    endBitPosition += context.getLength().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthMetric>>(m_length_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool TrailerLengthMetricCondition::operator==(const TrailerLengthMetricCondition& other) const
{
    if (this != &other)
    {
        return
                (m_trailerNumber_ == other.m_trailerNumber_) &&
                (m_length_ == other.m_length_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t TrailerLengthMetricCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_trailerNumber_);
    result = ::zserio::calcHashCode(result, m_length_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void TrailerLengthMetricCondition::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_trailerNumber_, UINT8_C(2));
    out.writeVarUInt32(m_length_);
    out.writeBool(m_isInclusive_);
}

void TrailerLengthMetricCondition::write(TrailerLengthMetricCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getTrailerNumber().write<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(out, m_trailerNumber_);
    context.getLength().write<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthMetric>>(out, m_length_);
    out.writeBool(m_isInclusive_);
}

uint8_t TrailerLengthMetricCondition::readTrailerNumber(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(2)));
}

uint8_t TrailerLengthMetricCondition::readTrailerNumber(TrailerLengthMetricCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getTrailerNumber().read<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(in);
}
::nds::core::vehicle::TrailerLengthMetric TrailerLengthMetricCondition::readLength(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::vehicle::TrailerLengthMetric>(in.readVarUInt32());
}

::nds::core::vehicle::TrailerLengthMetric TrailerLengthMetricCondition::readLength(TrailerLengthMetricCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getLength().read<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthMetric>>(in);
}
bool TrailerLengthMetricCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/TrailerLengthImperialCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

TrailerLengthImperialCondition::TrailerLengthImperialCondition(const allocator_type&) noexcept :
        m_trailerNumber_(uint8_t()),
        m_length_(::nds::core::vehicle::TrailerLengthImperial()),
        m_isInclusive_(bool())
{
}

TrailerLengthImperialCondition::TrailerLengthImperialCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_trailerNumber_(readTrailerNumber(in)),
        m_length_(readLength(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

TrailerLengthImperialCondition::TrailerLengthImperialCondition(TrailerLengthImperialCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_trailerNumber_(readTrailerNumber(context, in)),
        m_length_(readLength(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

TrailerLengthImperialCondition::TrailerLengthImperialCondition(::zserio::PropagateAllocatorT,
        const TrailerLengthImperialCondition& other, const allocator_type& allocator) :
        m_trailerNumber_(::zserio::allocatorPropagatingCopy(other.m_trailerNumber_, allocator)),
        m_length_(::zserio::allocatorPropagatingCopy(other.m_length_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

uint8_t TrailerLengthImperialCondition::getTrailerNumber() const
{
    return m_trailerNumber_;
}

void TrailerLengthImperialCondition::setTrailerNumber(uint8_t trailerNumber_)
{
    m_trailerNumber_ = trailerNumber_;
}

::nds::core::vehicle::TrailerLengthImperial TrailerLengthImperialCondition::getLength() const
{
    return m_length_;
}

void TrailerLengthImperialCondition::setLength(::nds::core::vehicle::TrailerLengthImperial length_)
{
    m_length_ = length_;
}

bool TrailerLengthImperialCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void TrailerLengthImperialCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void TrailerLengthImperialCondition::initPackingContext(TrailerLengthImperialCondition::ZserioPackingContext& context) const
{
    context.getTrailerNumber().init<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(m_trailerNumber_);
    context.getLength().init<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthImperial>>(m_length_);
}

size_t TrailerLengthImperialCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(2);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_length_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TrailerLengthImperialCondition::bitSizeOf(TrailerLengthImperialCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getTrailerNumber().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(m_trailerNumber_);
    endBitPosition += context.getLength().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthImperial>>(m_length_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TrailerLengthImperialCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(2);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_length_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t TrailerLengthImperialCondition::initializeOffsets(TrailerLengthImperialCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getTrailerNumber().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(m_trailerNumber_);
    endBitPosition += context.getLength().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthImperial>>(m_length_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool TrailerLengthImperialCondition::operator==(const TrailerLengthImperialCondition& other) const
{
    if (this != &other)
    {
        return
                (m_trailerNumber_ == other.m_trailerNumber_) &&
                (m_length_ == other.m_length_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t TrailerLengthImperialCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_trailerNumber_);
    result = ::zserio::calcHashCode(result, m_length_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void TrailerLengthImperialCondition::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_trailerNumber_, UINT8_C(2));
    out.writeVarUInt32(m_length_);
    out.writeBool(m_isInclusive_);
}

void TrailerLengthImperialCondition::write(TrailerLengthImperialCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getTrailerNumber().write<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(out, m_trailerNumber_);
    context.getLength().write<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthImperial>>(out, m_length_);
    out.writeBool(m_isInclusive_);
}

uint8_t TrailerLengthImperialCondition::readTrailerNumber(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(2)));
}

uint8_t TrailerLengthImperialCondition::readTrailerNumber(TrailerLengthImperialCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getTrailerNumber().read<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(2)>>(in);
}
::nds::core::vehicle::TrailerLengthImperial TrailerLengthImperialCondition::readLength(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::vehicle::TrailerLengthImperial>(in.readVarUInt32());
}

::nds::core::vehicle::TrailerLengthImperial TrailerLengthImperialCondition::readLength(TrailerLengthImperialCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getLength().read<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::TrailerLengthImperial>>(in);
}
bool TrailerLengthImperialCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/EnergyTypeCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

EnergyTypeCondition::EnergyTypeCondition(const allocator_type&) noexcept :
        m_energyType_(::nds::core::vehicle::EnergyType()),
        m_isInclusive_(bool())
{
}

EnergyTypeCondition::EnergyTypeCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_energyType_(readEnergyType(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

EnergyTypeCondition::EnergyTypeCondition(EnergyTypeCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_energyType_(readEnergyType(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

EnergyTypeCondition::EnergyTypeCondition(::zserio::PropagateAllocatorT,
        const EnergyTypeCondition& other, const allocator_type& allocator) :
        m_energyType_(::zserio::allocatorPropagatingCopy(other.m_energyType_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::EnergyType EnergyTypeCondition::getEnergyType() const
{
    return m_energyType_;
}

void EnergyTypeCondition::setEnergyType(::nds::core::vehicle::EnergyType energyType_)
{
    m_energyType_ = energyType_;
}

bool EnergyTypeCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void EnergyTypeCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void EnergyTypeCondition::initPackingContext(EnergyTypeCondition::ZserioPackingContext& context) const
{
    m_energyType_.initPackingContext(context.getEnergyType());
}

size_t EnergyTypeCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_energyType_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t EnergyTypeCondition::bitSizeOf(EnergyTypeCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_energyType_.bitSizeOf(context.getEnergyType(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t EnergyTypeCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_energyType_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t EnergyTypeCondition::initializeOffsets(EnergyTypeCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_energyType_.initializeOffsets(context.getEnergyType(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool EnergyTypeCondition::operator==(const EnergyTypeCondition& other) const
{
    if (this != &other)
    {
        return
                (m_energyType_ == other.m_energyType_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t EnergyTypeCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_energyType_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void EnergyTypeCondition::write(::zserio::BitStreamWriter& out) const
{
    m_energyType_.write(out);
    out.writeBool(m_isInclusive_);
}

void EnergyTypeCondition::write(EnergyTypeCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_energyType_.write(context.getEnergyType(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::EnergyType EnergyTypeCondition::readEnergyType(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::EnergyType(in);
}

::nds::core::vehicle::EnergyType EnergyTypeCondition::readEnergyType(EnergyTypeCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::EnergyType(context.getEnergyType(), in);
}
bool EnergyTypeCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/PublicBusTypeCondition.h>

namespace nds
{
namespace core
{
namespace conditions
{

PublicBusTypeCondition::PublicBusTypeCondition(const allocator_type&) noexcept :
        m_type_(::nds::core::vehicle::PublicBusType()),
        m_isInclusive_(bool())
{
}

PublicBusTypeCondition::PublicBusTypeCondition(::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(in)),
        m_isInclusive_(readIsInclusive(in))
{
}

PublicBusTypeCondition::PublicBusTypeCondition(PublicBusTypeCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(context, in)),
        m_isInclusive_(readIsInclusive(in))
{
}

PublicBusTypeCondition::PublicBusTypeCondition(::zserio::PropagateAllocatorT,
        const PublicBusTypeCondition& other, const allocator_type& allocator) :
        m_type_(::zserio::allocatorPropagatingCopy(other.m_type_, allocator)),
        m_isInclusive_(::zserio::allocatorPropagatingCopy(other.m_isInclusive_, allocator))
{
}

::nds::core::vehicle::PublicBusType PublicBusTypeCondition::getType() const
{
    return m_type_;
}

void PublicBusTypeCondition::setType(::nds::core::vehicle::PublicBusType type_)
{
    m_type_ = type_;
}

bool PublicBusTypeCondition::getIsInclusive() const
{
    return m_isInclusive_;
}

void PublicBusTypeCondition::setIsInclusive(bool isInclusive_)
{
    m_isInclusive_ = isInclusive_;
}

void PublicBusTypeCondition::initPackingContext(PublicBusTypeCondition::ZserioPackingContext& context) const
{
    m_type_.initPackingContext(context.getType());
}

size_t PublicBusTypeCondition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_type_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t PublicBusTypeCondition::bitSizeOf(PublicBusTypeCondition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_type_.bitSizeOf(context.getType(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t PublicBusTypeCondition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_type_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t PublicBusTypeCondition::initializeOffsets(PublicBusTypeCondition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_type_.initializeOffsets(context.getType(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool PublicBusTypeCondition::operator==(const PublicBusTypeCondition& other) const
{
    if (this != &other)
    {
        return
                (m_type_ == other.m_type_) &&
                (m_isInclusive_ == other.m_isInclusive_);
    }

    return true;
}

uint32_t PublicBusTypeCondition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_type_);
    result = ::zserio::calcHashCode(result, m_isInclusive_);

    return result;
}

void PublicBusTypeCondition::write(::zserio::BitStreamWriter& out) const
{
    m_type_.write(out);
    out.writeBool(m_isInclusive_);
}

void PublicBusTypeCondition::write(PublicBusTypeCondition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_type_.write(context.getType(), out);
    out.writeBool(m_isInclusive_);
}

::nds::core::vehicle::PublicBusType PublicBusTypeCondition::readType(::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::PublicBusType(in);
}

::nds::core::vehicle::PublicBusType PublicBusTypeCondition::readType(PublicBusTypeCondition::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::core::vehicle::PublicBusType(context.getType(), in);
}
bool PublicBusTypeCondition::readIsInclusive(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace conditions
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/conditions/ConditionValue.h>

namespace nds
{
namespace core
{
namespace conditions
{

ConditionValue::ConditionValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

ConditionValue::ConditionValue(::zserio::BitStreamReader& in,
        ::nds::core::conditions::ConditionTypeCode code_, const allocator_type& allocator) :
        m_code_(code_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

ConditionValue::ConditionValue(ConditionValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::core::conditions::ConditionTypeCode code_, const allocator_type& allocator) :
        m_code_(code_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

ConditionValue::ConditionValue(const ConditionValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_code_);
    else
        m_isInitialized = false;
}

ConditionValue& ConditionValue::operator=(const ConditionValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_code_);
    else
        m_isInitialized = false;

    return *this;
}

ConditionValue::ConditionValue(ConditionValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_code_);
    else
        m_isInitialized = false;
}

ConditionValue& ConditionValue::operator=(ConditionValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_code_);
    else
        m_isInitialized = false;

    return *this;
}

ConditionValue::ConditionValue(::zserio::PropagateAllocatorT,
        const ConditionValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_code_);
    else
        m_isInitialized = false;
}

void ConditionValue::initialize(
        ::nds::core::conditions::ConditionTypeCode code_)
{
    m_code_ = code_;
    m_isInitialized = true;
}

bool ConditionValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::core::conditions::ConditionTypeCode ConditionValue::getCode() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'code' of compound 'ConditionValue' is not initialized!");

    return m_code_;
}

::nds::core::conditions::TimeRangeOfDay& ConditionValue::getTimeRangeOfDay()
{
    return m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>();
}

const ::nds::core::conditions::TimeRangeOfDay& ConditionValue::getTimeRangeOfDay() const
{
    return m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>();
}

void ConditionValue::setTimeRangeOfDay(const ::nds::core::conditions::TimeRangeOfDay& timeRangeOfDay_)
{
    m_objectChoice = timeRangeOfDay_;
}

void ConditionValue::setTimeRangeOfDay(::nds::core::conditions::TimeRangeOfDay&& timeRangeOfDay_)
{
    m_objectChoice = ::std::move(timeRangeOfDay_);
}

::nds::core::conditions::TimeRangeOfWeek& ConditionValue::getTimeRangeOfWeek()
{
    return m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>();
}

const ::nds::core::conditions::TimeRangeOfWeek& ConditionValue::getTimeRangeOfWeek() const
{
    return m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>();
}

void ConditionValue::setTimeRangeOfWeek(const ::nds::core::conditions::TimeRangeOfWeek& timeRangeOfWeek_)
{
    m_objectChoice = timeRangeOfWeek_;
}

void ConditionValue::setTimeRangeOfWeek(::nds::core::conditions::TimeRangeOfWeek&& timeRangeOfWeek_)
{
    m_objectChoice = ::std::move(timeRangeOfWeek_);
}

::nds::core::conditions::DateRangeOfYear& ConditionValue::getDateRangeOfYear()
{
    return m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>();
}

const ::nds::core::conditions::DateRangeOfYear& ConditionValue::getDateRangeOfYear() const
{
    return m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>();
}

void ConditionValue::setDateRangeOfYear(const ::nds::core::conditions::DateRangeOfYear& dateRangeOfYear_)
{
    m_objectChoice = dateRangeOfYear_;
}

void ConditionValue::setDateRangeOfYear(::nds::core::conditions::DateRangeOfYear&& dateRangeOfYear_)
{
    m_objectChoice = ::std::move(dateRangeOfYear_);
}

::nds::core::conditions::DaysOfWeek& ConditionValue::getDaysOfWeek()
{
    return m_objectChoice.get<::nds::core::conditions::DaysOfWeek>();
}

const ::nds::core::conditions::DaysOfWeek& ConditionValue::getDaysOfWeek() const
{
    return m_objectChoice.get<::nds::core::conditions::DaysOfWeek>();
}

void ConditionValue::setDaysOfWeek(const ::nds::core::conditions::DaysOfWeek& daysOfWeek_)
{
    m_objectChoice = daysOfWeek_;
}

void ConditionValue::setDaysOfWeek(::nds::core::conditions::DaysOfWeek&& daysOfWeek_)
{
    m_objectChoice = ::std::move(daysOfWeek_);
}

::nds::core::conditions::DaysOfMonth& ConditionValue::getDaysOfMonth()
{
    return m_objectChoice.get<::nds::core::conditions::DaysOfMonth>();
}

const ::nds::core::conditions::DaysOfMonth& ConditionValue::getDaysOfMonth() const
{
    return m_objectChoice.get<::nds::core::conditions::DaysOfMonth>();
}

void ConditionValue::setDaysOfMonth(const ::nds::core::conditions::DaysOfMonth& daysOfMonth_)
{
    m_objectChoice = daysOfMonth_;
}

void ConditionValue::setDaysOfMonth(::nds::core::conditions::DaysOfMonth&& daysOfMonth_)
{
    m_objectChoice = ::std::move(daysOfMonth_);
}

::nds::core::conditions::DayOfYear& ConditionValue::getDayOfYear()
{
    return m_objectChoice.get<::nds::core::conditions::DayOfYear>();
}

const ::nds::core::conditions::DayOfYear& ConditionValue::getDayOfYear() const
{
    return m_objectChoice.get<::nds::core::conditions::DayOfYear>();
}

void ConditionValue::setDayOfYear(const ::nds::core::conditions::DayOfYear& dayOfYear_)
{
    m_objectChoice = dayOfYear_;
}

void ConditionValue::setDayOfYear(::nds::core::conditions::DayOfYear&& dayOfYear_)
{
    m_objectChoice = ::std::move(dayOfYear_);
}

::nds::core::conditions::MonthsOfYear& ConditionValue::getMonthsOfYear()
{
    return m_objectChoice.get<::nds::core::conditions::MonthsOfYear>();
}

const ::nds::core::conditions::MonthsOfYear& ConditionValue::getMonthsOfYear() const
{
    return m_objectChoice.get<::nds::core::conditions::MonthsOfYear>();
}

void ConditionValue::setMonthsOfYear(const ::nds::core::conditions::MonthsOfYear& monthsOfYear_)
{
    m_objectChoice = monthsOfYear_;
}

void ConditionValue::setMonthsOfYear(::nds::core::conditions::MonthsOfYear&& monthsOfYear_)
{
    m_objectChoice = ::std::move(monthsOfYear_);
}

::nds::core::conditions::WeekInMonth& ConditionValue::getWeekInMonth()
{
    return m_objectChoice.get<::nds::core::conditions::WeekInMonth>();
}

const ::nds::core::conditions::WeekInMonth& ConditionValue::getWeekInMonth() const
{
    return m_objectChoice.get<::nds::core::conditions::WeekInMonth>();
}

void ConditionValue::setWeekInMonth(const ::nds::core::conditions::WeekInMonth& weekInMonth_)
{
    m_objectChoice = weekInMonth_;
}

void ConditionValue::setWeekInMonth(::nds::core::conditions::WeekInMonth&& weekInMonth_)
{
    m_objectChoice = ::std::move(weekInMonth_);
}

::nds::core::conditions::WeekdayInMonth& ConditionValue::getWeekdayInMonth()
{
    return m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>();
}

const ::nds::core::conditions::WeekdayInMonth& ConditionValue::getWeekdayInMonth() const
{
    return m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>();
}

void ConditionValue::setWeekdayInMonth(const ::nds::core::conditions::WeekdayInMonth& weekdayInMonth_)
{
    m_objectChoice = weekdayInMonth_;
}

void ConditionValue::setWeekdayInMonth(::nds::core::conditions::WeekdayInMonth&& weekdayInMonth_)
{
    m_objectChoice = ::std::move(weekdayInMonth_);
}

::nds::core::conditions::CalendarWeek& ConditionValue::getCalendarWeek()
{
    return m_objectChoice.get<::nds::core::conditions::CalendarWeek>();
}

const ::nds::core::conditions::CalendarWeek& ConditionValue::getCalendarWeek() const
{
    return m_objectChoice.get<::nds::core::conditions::CalendarWeek>();
}

void ConditionValue::setCalendarWeek(const ::nds::core::conditions::CalendarWeek& calendarWeek_)
{
    m_objectChoice = calendarWeek_;
}

void ConditionValue::setCalendarWeek(::nds::core::conditions::CalendarWeek&& calendarWeek_)
{
    m_objectChoice = ::std::move(calendarWeek_);
}

::nds::core::conditions::TimeDuration& ConditionValue::getTimeDuration()
{
    return m_objectChoice.get<::nds::core::conditions::TimeDuration>();
}

const ::nds::core::conditions::TimeDuration& ConditionValue::getTimeDuration() const
{
    return m_objectChoice.get<::nds::core::conditions::TimeDuration>();
}

void ConditionValue::setTimeDuration(const ::nds::core::conditions::TimeDuration& timeDuration_)
{
    m_objectChoice = timeDuration_;
}

void ConditionValue::setTimeDuration(::nds::core::conditions::TimeDuration&& timeDuration_)
{
    m_objectChoice = ::std::move(timeDuration_);
}

::nds::core::conditions::OddOrEvenDays ConditionValue::getOddOrEvenDays() const
{
    return m_objectChoice.get<::nds::core::conditions::OddOrEvenDays>();
}

void ConditionValue::setOddOrEvenDays(::nds::core::conditions::OddOrEvenDays oddOrEvenDays_)
{
    m_objectChoice = oddOrEvenDays_;
}

::nds::core::conditions::FuzzyTimeDomainCondition& ConditionValue::getFuzzyTimeDomain()
{
    return m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>();
}

const ::nds::core::conditions::FuzzyTimeDomainCondition& ConditionValue::getFuzzyTimeDomain() const
{
    return m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>();
}

void ConditionValue::setFuzzyTimeDomain(const ::nds::core::conditions::FuzzyTimeDomainCondition& fuzzyTimeDomain_)
{
    m_objectChoice = fuzzyTimeDomain_;
}

void ConditionValue::setFuzzyTimeDomain(::nds::core::conditions::FuzzyTimeDomainCondition&& fuzzyTimeDomain_)
{
    m_objectChoice = ::std::move(fuzzyTimeDomain_);
}

::nds::core::conditions::WeatherCondition& ConditionValue::getWeather()
{
    return m_objectChoice.get<::nds::core::conditions::WeatherCondition>();
}

const ::nds::core::conditions::WeatherCondition& ConditionValue::getWeather() const
{
    return m_objectChoice.get<::nds::core::conditions::WeatherCondition>();
}

void ConditionValue::setWeather(const ::nds::core::conditions::WeatherCondition& weather_)
{
    m_objectChoice = weather_;
}

void ConditionValue::setWeather(::nds::core::conditions::WeatherCondition&& weather_)
{
    m_objectChoice = ::std::move(weather_);
}

::nds::core::conditions::FrequentlyUsedVehicleTypesCondition& ConditionValue::getFrequentlyUsedVehicles()
{
    return m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>();
}

const ::nds::core::conditions::FrequentlyUsedVehicleTypesCondition& ConditionValue::getFrequentlyUsedVehicles() const
{
    return m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>();
}

void ConditionValue::setFrequentlyUsedVehicles(const ::nds::core::conditions::FrequentlyUsedVehicleTypesCondition& frequentlyUsedVehicles_)
{
    m_objectChoice = frequentlyUsedVehicles_;
}

void ConditionValue::setFrequentlyUsedVehicles(::nds::core::conditions::FrequentlyUsedVehicleTypesCondition&& frequentlyUsedVehicles_)
{
    m_objectChoice = ::std::move(frequentlyUsedVehicles_);
}

::nds::core::conditions::SlowRoadUsersCondition& ConditionValue::getSlowRoadUsers()
{
    return m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>();
}

const ::nds::core::conditions::SlowRoadUsersCondition& ConditionValue::getSlowRoadUsers() const
{
    return m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>();
}

void ConditionValue::setSlowRoadUsers(const ::nds::core::conditions::SlowRoadUsersCondition& slowRoadUsers_)
{
    m_objectChoice = slowRoadUsers_;
}

void ConditionValue::setSlowRoadUsers(::nds::core::conditions::SlowRoadUsersCondition&& slowRoadUsers_)
{
    m_objectChoice = ::std::move(slowRoadUsers_);
}

::nds::core::conditions::BigVehiclesCondition& ConditionValue::getBigVehicles()
{
    return m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>();
}

const ::nds::core::conditions::BigVehiclesCondition& ConditionValue::getBigVehicles() const
{
    return m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>();
}

void ConditionValue::setBigVehicles(const ::nds::core::conditions::BigVehiclesCondition& bigVehicles_)
{
    m_objectChoice = bigVehicles_;
}

void ConditionValue::setBigVehicles(::nds::core::conditions::BigVehiclesCondition&& bigVehicles_)
{
    m_objectChoice = ::std::move(bigVehicles_);
}

::nds::core::conditions::PublicServiceVehiclesCondition& ConditionValue::getPublicServiceVehicles()
{
    return m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>();
}

const ::nds::core::conditions::PublicServiceVehiclesCondition& ConditionValue::getPublicServiceVehicles() const
{
    return m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>();
}

void ConditionValue::setPublicServiceVehicles(const ::nds::core::conditions::PublicServiceVehiclesCondition& publicServiceVehicles_)
{
    m_objectChoice = publicServiceVehicles_;
}

void ConditionValue::setPublicServiceVehicles(::nds::core::conditions::PublicServiceVehiclesCondition&& publicServiceVehicles_)
{
    m_objectChoice = ::std::move(publicServiceVehicles_);
}

::nds::core::conditions::EmergencyMilitaryDetailCondition& ConditionValue::getEmergencyMilitaryDetails()
{
    return m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>();
}

const ::nds::core::conditions::EmergencyMilitaryDetailCondition& ConditionValue::getEmergencyMilitaryDetails() const
{
    return m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>();
}

void ConditionValue::setEmergencyMilitaryDetails(const ::nds::core::conditions::EmergencyMilitaryDetailCondition& emergencyMilitaryDetails_)
{
    m_objectChoice = emergencyMilitaryDetails_;
}

void ConditionValue::setEmergencyMilitaryDetails(::nds::core::conditions::EmergencyMilitaryDetailCondition&& emergencyMilitaryDetails_)
{
    m_objectChoice = ::std::move(emergencyMilitaryDetails_);
}

::nds::core::conditions::EquipmentCondition& ConditionValue::getEquipment()
{
    return m_objectChoice.get<::nds::core::conditions::EquipmentCondition>();
}

const ::nds::core::conditions::EquipmentCondition& ConditionValue::getEquipment() const
{
    return m_objectChoice.get<::nds::core::conditions::EquipmentCondition>();
}

void ConditionValue::setEquipment(const ::nds::core::conditions::EquipmentCondition& equipment_)
{
    m_objectChoice = equipment_;
}

void ConditionValue::setEquipment(::nds::core::conditions::EquipmentCondition&& equipment_)
{
    m_objectChoice = ::std::move(equipment_);
}

::nds::core::conditions::AuthorizationCondition& ConditionValue::getAuthorization()
{
    return m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>();
}

const ::nds::core::conditions::AuthorizationCondition& ConditionValue::getAuthorization() const
{
    return m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>();
}

void ConditionValue::setAuthorization(const ::nds::core::conditions::AuthorizationCondition& authorization_)
{
    m_objectChoice = authorization_;
}

void ConditionValue::setAuthorization(::nds::core::conditions::AuthorizationCondition&& authorization_)
{
    m_objectChoice = ::std::move(authorization_);
}

::nds::core::conditions::LoadCondition& ConditionValue::getLoad()
{
    return m_objectChoice.get<::nds::core::conditions::LoadCondition>();
}

const ::nds::core::conditions::LoadCondition& ConditionValue::getLoad() const
{
    return m_objectChoice.get<::nds::core::conditions::LoadCondition>();
}

void ConditionValue::setLoad(const ::nds::core::conditions::LoadCondition& load_)
{
    m_objectChoice = load_;
}

void ConditionValue::setLoad(::nds::core::conditions::LoadCondition&& load_)
{
    m_objectChoice = ::std::move(load_);
}

::nds::core::conditions::NumAxles ConditionValue::getNumAxles() const
{
    return m_objectChoice.get<::nds::core::conditions::NumAxles>();
}

void ConditionValue::setNumAxles(::nds::core::conditions::NumAxles numAxles_)
{
    m_objectChoice = numAxles_;
}

::nds::core::conditions::Occupancy& ConditionValue::getOccupancy()
{
    return m_objectChoice.get<::nds::core::conditions::Occupancy>();
}

const ::nds::core::conditions::Occupancy& ConditionValue::getOccupancy() const
{
    return m_objectChoice.get<::nds::core::conditions::Occupancy>();
}

void ConditionValue::setOccupancy(const ::nds::core::conditions::Occupancy& occupancy_)
{
    m_objectChoice = occupancy_;
}

void ConditionValue::setOccupancy(::nds::core::conditions::Occupancy&& occupancy_)
{
    m_objectChoice = ::std::move(occupancy_);
}

::nds::core::types::LengthCentimeters ConditionValue::getVehicleLengthMetric() const
{
    return m_objectChoice.get<::nds::core::types::LengthCentimeters>();
}

void ConditionValue::setVehicleLengthMetric(::nds::core::types::LengthCentimeters vehicleLengthMetric_)
{
    m_objectChoice = vehicleLengthMetric_;
}

::nds::core::types::LengthInch ConditionValue::getVehicleLengthImperial() const
{
    return m_objectChoice.get<::nds::core::types::LengthInch>();
}

void ConditionValue::setVehicleLengthImperial(::nds::core::types::LengthInch vehicleLengthImperial_)
{
    m_objectChoice = vehicleLengthImperial_;
}

::nds::core::types::HeightCentimeters ConditionValue::getVehicleHeightMetric() const
{
    return m_objectChoice.get<::nds::core::types::HeightCentimeters>();
}

void ConditionValue::setVehicleHeightMetric(::nds::core::types::HeightCentimeters vehicleHeightMetric_)
{
    m_objectChoice = vehicleHeightMetric_;
}

::nds::core::types::HeightInch ConditionValue::getVehicleHeightImperial() const
{
    return m_objectChoice.get<::nds::core::types::HeightInch>();
}

void ConditionValue::setVehicleHeightImperial(::nds::core::types::HeightInch vehicleHeightImperial_)
{
    m_objectChoice = vehicleHeightImperial_;
}

::nds::core::types::WidthCentimeters ConditionValue::getVehicleWidthMetric() const
{
    return m_objectChoice.get<::nds::core::types::WidthCentimeters>();
}

void ConditionValue::setVehicleWidthMetric(::nds::core::types::WidthCentimeters vehicleWidthMetric_)
{
    m_objectChoice = vehicleWidthMetric_;
}

::nds::core::types::WidthInch ConditionValue::getVehicleWidthImperial() const
{
    return m_objectChoice.get<::nds::core::types::WidthInch>();
}

void ConditionValue::setVehicleWidthImperial(::nds::core::types::WidthInch vehicleWidthImperial_)
{
    m_objectChoice = vehicleWidthImperial_;
}

::nds::core::types::Weight10Kilogram ConditionValue::getWeightMetric() const
{
    return m_objectChoice.get<::nds::core::types::Weight10Kilogram>();
}

void ConditionValue::setWeightMetric(::nds::core::types::Weight10Kilogram weightMetric_)
{
    m_objectChoice = weightMetric_;
}

::nds::core::types::Weight10Lbs ConditionValue::getWeightImperial() const
{
    return m_objectChoice.get<::nds::core::types::Weight10Lbs>();
}

void ConditionValue::setWeightImperial(::nds::core::types::Weight10Lbs weightImperial_)
{
    m_objectChoice = weightImperial_;
}

::nds::core::types::Weight10Kilogram ConditionValue::getWeightPerAxleMetric() const
{
    return m_objectChoice.get<::nds::core::types::Weight10Kilogram>();
}

void ConditionValue::setWeightPerAxleMetric(::nds::core::types::Weight10Kilogram weightPerAxleMetric_)
{
    m_objectChoice = weightPerAxleMetric_;
}

::nds::core::types::Weight10Lbs ConditionValue::getWeightPerAxleImperial() const
{
    return m_objectChoice.get<::nds::core::types::Weight10Lbs>();
}

void ConditionValue::setWeightPerAxleImperial(::nds::core::types::Weight10Lbs weightPerAxleImperial_)
{
    m_objectChoice = weightPerAxleImperial_;
}

::nds::core::types::Weight10Kilogram ConditionValue::getWeightPerTandemAxleMetric() const
{
    return m_objectChoice.get<::nds::core::types::Weight10Kilogram>();
}

void ConditionValue::setWeightPerTandemAxleMetric(::nds::core::types::Weight10Kilogram weightPerTandemAxleMetric_)
{
    m_objectChoice = weightPerTandemAxleMetric_;
}

::nds::core::types::Weight10Lbs ConditionValue::getWeightPerTandemAxleImperial() const
{
    return m_objectChoice.get<::nds::core::types::Weight10Lbs>();
}

void ConditionValue::setWeightPerTandemAxleImperial(::nds::core::types::Weight10Lbs weightPerTandemAxleImperial_)
{
    m_objectChoice = weightPerTandemAxleImperial_;
}

::nds::core::types::Weight10Kilogram ConditionValue::getWeightPerTridemAxleMetric() const
{
    return m_objectChoice.get<::nds::core::types::Weight10Kilogram>();
}

void ConditionValue::setWeightPerTridemAxleMetric(::nds::core::types::Weight10Kilogram weightPerTridemAxleMetric_)
{
    m_objectChoice = weightPerTridemAxleMetric_;
}

::nds::core::types::Weight10Lbs ConditionValue::getWeightPerTridemAxleImperial() const
{
    return m_objectChoice.get<::nds::core::types::Weight10Lbs>();
}

void ConditionValue::setWeightPerTridemAxleImperial(::nds::core::types::Weight10Lbs weightPerTridemAxleImperial_)
{
    m_objectChoice = weightPerTridemAxleImperial_;
}

::nds::core::conditions::TimeRangeOfWeekDays& ConditionValue::getTimeRangeOfWeekDays()
{
    return m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>();
}

const ::nds::core::conditions::TimeRangeOfWeekDays& ConditionValue::getTimeRangeOfWeekDays() const
{
    return m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>();
}

void ConditionValue::setTimeRangeOfWeekDays(const ::nds::core::conditions::TimeRangeOfWeekDays& timeRangeOfWeekDays_)
{
    m_objectChoice = timeRangeOfWeekDays_;
}

void ConditionValue::setTimeRangeOfWeekDays(::nds::core::conditions::TimeRangeOfWeekDays&& timeRangeOfWeekDays_)
{
    m_objectChoice = ::std::move(timeRangeOfWeekDays_);
}

::nds::core::conditions::Visibility ConditionValue::getVisibility() const
{
    return m_objectChoice.get<::nds::core::conditions::Visibility>();
}

void ConditionValue::setVisibility(::nds::core::conditions::Visibility visibility_)
{
    m_objectChoice = visibility_;
}

::nds::core::conditions::Surface ConditionValue::getSurface() const
{
    return m_objectChoice.get<::nds::core::conditions::Surface>();
}

void ConditionValue::setSurface(::nds::core::conditions::Surface surface_)
{
    m_objectChoice = surface_;
}

::nds::core::conditions::EuroEmissionClassCondition ConditionValue::getEuroEmissionClass() const
{
    return m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>();
}

void ConditionValue::setEuroEmissionClass(::nds::core::conditions::EuroEmissionClassCondition euroEmissionClass_)
{
    m_objectChoice = euroEmissionClass_;
}

::nds::core::conditions::TimeDurationHours& ConditionValue::getTimeDurationHours()
{
    return m_objectChoice.get<::nds::core::conditions::TimeDurationHours>();
}

const ::nds::core::conditions::TimeDurationHours& ConditionValue::getTimeDurationHours() const
{
    return m_objectChoice.get<::nds::core::conditions::TimeDurationHours>();
}

void ConditionValue::setTimeDurationHours(const ::nds::core::conditions::TimeDurationHours& timeDurationHours_)
{
    m_objectChoice = timeDurationHours_;
}

void ConditionValue::setTimeDurationHours(::nds::core::conditions::TimeDurationHours&& timeDurationHours_)
{
    m_objectChoice = ::std::move(timeDurationHours_);
}

::nds::core::conditions::TimeRangeOfYear& ConditionValue::getTimeRangeOfYear()
{
    return m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>();
}

const ::nds::core::conditions::TimeRangeOfYear& ConditionValue::getTimeRangeOfYear() const
{
    return m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>();
}

void ConditionValue::setTimeRangeOfYear(const ::nds::core::conditions::TimeRangeOfYear& timeRangeOfYear_)
{
    m_objectChoice = timeRangeOfYear_;
}

void ConditionValue::setTimeRangeOfYear(::nds::core::conditions::TimeRangeOfYear&& timeRangeOfYear_)
{
    m_objectChoice = ::std::move(timeRangeOfYear_);
}

::nds::core::conditions::NumTrailersCondition& ConditionValue::getNumTrailers()
{
    return m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>();
}

const ::nds::core::conditions::NumTrailersCondition& ConditionValue::getNumTrailers() const
{
    return m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>();
}

void ConditionValue::setNumTrailers(const ::nds::core::conditions::NumTrailersCondition& numTrailers_)
{
    m_objectChoice = numTrailers_;
}

void ConditionValue::setNumTrailers(::nds::core::conditions::NumTrailersCondition&& numTrailers_)
{
    m_objectChoice = ::std::move(numTrailers_);
}

::nds::core::conditions::TrailerLengthMetricCondition& ConditionValue::getTrailerLengthMetric()
{
    return m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>();
}

const ::nds::core::conditions::TrailerLengthMetricCondition& ConditionValue::getTrailerLengthMetric() const
{
    return m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>();
}

void ConditionValue::setTrailerLengthMetric(const ::nds::core::conditions::TrailerLengthMetricCondition& trailerLengthMetric_)
{
    m_objectChoice = trailerLengthMetric_;
}

void ConditionValue::setTrailerLengthMetric(::nds::core::conditions::TrailerLengthMetricCondition&& trailerLengthMetric_)
{
    m_objectChoice = ::std::move(trailerLengthMetric_);
}

::nds::core::conditions::TrailerLengthImperialCondition& ConditionValue::getTrailerLengthImperial()
{
    return m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>();
}

const ::nds::core::conditions::TrailerLengthImperialCondition& ConditionValue::getTrailerLengthImperial() const
{
    return m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>();
}

void ConditionValue::setTrailerLengthImperial(const ::nds::core::conditions::TrailerLengthImperialCondition& trailerLengthImperial_)
{
    m_objectChoice = trailerLengthImperial_;
}

void ConditionValue::setTrailerLengthImperial(::nds::core::conditions::TrailerLengthImperialCondition&& trailerLengthImperial_)
{
    m_objectChoice = ::std::move(trailerLengthImperial_);
}

::nds::core::vehicle::EngineDisplacement ConditionValue::getEngineDisplacement() const
{
    return m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>();
}

void ConditionValue::setEngineDisplacement(::nds::core::vehicle::EngineDisplacement engineDisplacement_)
{
    m_objectChoice = engineDisplacement_;
}

::nds::core::conditions::EnergyTypeCondition& ConditionValue::getEnergyType()
{
    return m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>();
}

const ::nds::core::conditions::EnergyTypeCondition& ConditionValue::getEnergyType() const
{
    return m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>();
}

void ConditionValue::setEnergyType(const ::nds::core::conditions::EnergyTypeCondition& energyType_)
{
    m_objectChoice = energyType_;
}

void ConditionValue::setEnergyType(::nds::core::conditions::EnergyTypeCondition&& energyType_)
{
    m_objectChoice = ::std::move(energyType_);
}

::nds::core::conditions::BrakedTrailer ConditionValue::getBrakedTrailer() const
{
    return m_objectChoice.get<::nds::core::conditions::BrakedTrailer>();
}

void ConditionValue::setBrakedTrailer(::nds::core::conditions::BrakedTrailer brakedTrailer_)
{
    m_objectChoice = brakedTrailer_;
}

::nds::core::conditions::PublicBusTypeCondition& ConditionValue::getPublicBusTypes()
{
    return m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>();
}

const ::nds::core::conditions::PublicBusTypeCondition& ConditionValue::getPublicBusTypes() const
{
    return m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>();
}

void ConditionValue::setPublicBusTypes(const ::nds::core::conditions::PublicBusTypeCondition& publicBusTypes_)
{
    m_objectChoice = publicBusTypes_;
}

void ConditionValue::setPublicBusTypes(::nds::core::conditions::PublicBusTypeCondition&& publicBusTypes_)
{
    m_objectChoice = ::std::move(publicBusTypes_);
}

ConditionValue::ChoiceTag ConditionValue::choiceTag() const
{
    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        return CHOICE_timeRangeOfDay;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        return CHOICE_timeRangeOfWeek;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        return CHOICE_dateRangeOfYear;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        return CHOICE_daysOfWeek;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        return CHOICE_daysOfMonth;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        return CHOICE_dayOfYear;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        return CHOICE_monthsOfYear;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        return CHOICE_weekInMonth;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        return CHOICE_weekdayInMonth;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        return CHOICE_calendarWeek;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        return CHOICE_timeDuration;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        return CHOICE_oddOrEvenDays;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        return CHOICE_fuzzyTimeDomain;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        return CHOICE_weather;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        return CHOICE_frequentlyUsedVehicles;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        return CHOICE_slowRoadUsers;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        return CHOICE_bigVehicles;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        return CHOICE_publicServiceVehicles;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        return CHOICE_emergencyMilitaryDetails;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        return CHOICE_equipment;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        return CHOICE_authorization;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        return CHOICE_load;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        return CHOICE_numAxles;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        return CHOICE_occupancy;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        return CHOICE_vehicleLengthMetric;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        return CHOICE_vehicleLengthImperial;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        return CHOICE_vehicleHeightMetric;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        return CHOICE_vehicleHeightImperial;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        return CHOICE_vehicleWidthMetric;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        return CHOICE_vehicleWidthImperial;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        return CHOICE_weightMetric;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        return CHOICE_weightImperial;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        return CHOICE_weightPerAxleMetric;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        return CHOICE_weightPerAxleImperial;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        return CHOICE_weightPerTandemAxleMetric;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        return CHOICE_weightPerTandemAxleImperial;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        return CHOICE_weightPerTridemAxleMetric;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        return CHOICE_weightPerTridemAxleImperial;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        return CHOICE_timeRangeOfWeekDays;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        return CHOICE_visibility;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        return CHOICE_surface;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        return CHOICE_euroEmissionClass;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        return CHOICE_timeDurationHours;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        return CHOICE_timeRangeOfYear;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        return CHOICE_numTrailers;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        return CHOICE_trailerLengthMetric;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        return CHOICE_trailerLengthImperial;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        return CHOICE_engineDisplacement;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        return CHOICE_energyType;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        return CHOICE_brakedTrailer;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        return CHOICE_publicBusTypes;
    default:
        return UNDEFINED_CHOICE;
    }
}

void ConditionValue::initPackingContext(ConditionValue::ZserioPackingContext& context) const
{
    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>().initPackingContext(context.getTimeRangeOfDay());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>().initPackingContext(context.getTimeRangeOfWeek());
        break;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>().initPackingContext(context.getDateRangeOfYear());
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::DayOfYear>().initPackingContext(context.getDayOfYear());
        break;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        m_objectChoice.get<::nds::core::conditions::WeekInMonth>().initPackingContext(context.getWeekInMonth());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>().initPackingContext(context.getWeekdayInMonth());
        break;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        m_objectChoice.get<::nds::core::conditions::CalendarWeek>().initPackingContext(context.getCalendarWeek());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        m_objectChoice.get<::nds::core::conditions::TimeDuration>().initPackingContext(context.getTimeDuration());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        break;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>().initPackingContext(context.getFuzzyTimeDomain());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        m_objectChoice.get<::nds::core::conditions::WeatherCondition>().initPackingContext(context.getWeather());
        break;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>().initPackingContext(context.getFrequentlyUsedVehicles());
        break;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>().initPackingContext(context.getSlowRoadUsers());
        break;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>().initPackingContext(context.getBigVehicles());
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>().initPackingContext(context.getPublicServiceVehicles());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>().initPackingContext(context.getEmergencyMilitaryDetails());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        m_objectChoice.get<::nds::core::conditions::EquipmentCondition>().initPackingContext(context.getEquipment());
        break;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>().initPackingContext(context.getAuthorization());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        m_objectChoice.get<::nds::core::conditions::LoadCondition>().initPackingContext(context.getLoad());
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        context.getNumAxles().init<::zserio::StdIntArrayTraits<::nds::core::conditions::NumAxles>>(m_objectChoice.get<::nds::core::conditions::NumAxles>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        m_objectChoice.get<::nds::core::conditions::Occupancy>().initPackingContext(context.getOccupancy());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        context.getVehicleLengthMetric().init<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthCentimeters>>(m_objectChoice.get<::nds::core::types::LengthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        context.getVehicleLengthImperial().init<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthInch>>(m_objectChoice.get<::nds::core::types::LengthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        context.getVehicleHeightMetric().init<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightCentimeters>>(m_objectChoice.get<::nds::core::types::HeightCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        context.getVehicleHeightImperial().init<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightInch>>(m_objectChoice.get<::nds::core::types::HeightInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        context.getVehicleWidthMetric().init<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthCentimeters>>(m_objectChoice.get<::nds::core::types::WidthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        context.getVehicleWidthImperial().init<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthInch>>(m_objectChoice.get<::nds::core::types::WidthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        context.getWeightMetric().init<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        context.getWeightImperial().init<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        context.getWeightPerAxleMetric().init<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        context.getWeightPerAxleImperial().init<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        context.getWeightPerTandemAxleMetric().init<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        context.getWeightPerTandemAxleImperial().init<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        context.getWeightPerTridemAxleMetric().init<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        context.getWeightPerTridemAxleImperial().init<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>().initPackingContext(context.getTimeRangeOfWeekDays());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        ::zserio::initPackingContext(context.getVisibility(), m_objectChoice.get<::nds::core::conditions::Visibility>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        ::zserio::initPackingContext(context.getSurface(), m_objectChoice.get<::nds::core::conditions::Surface>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>().initPackingContext(context.getEuroEmissionClass());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        m_objectChoice.get<::nds::core::conditions::TimeDurationHours>().initPackingContext(context.getTimeDurationHours());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>().initPackingContext(context.getTimeRangeOfYear());
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>().initPackingContext(context.getNumTrailers());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>().initPackingContext(context.getTrailerLengthMetric());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>().initPackingContext(context.getTrailerLengthImperial());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        context.getEngineDisplacement().init<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::EngineDisplacement>>(m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>().initPackingContext(context.getEnergyType());
        break;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>().initPackingContext(context.getPublicBusTypes());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }
}

size_t ConditionValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::DaysOfWeek>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::DaysOfMonth>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::DayOfYear>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::MonthsOfYear>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::WeekInMonth>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::CalendarWeek>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeDuration>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        endBitPosition += UINT8_C(1);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::WeatherCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::EquipmentCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::LoadCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::Occupancy>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::LengthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::LengthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::HeightCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::HeightInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::WidthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::WidthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::core::conditions::Visibility>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::core::conditions::Surface>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeDurationHours>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        endBitPosition += UINT8_C(1);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>().bitSizeOf(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }

    return endBitPosition - bitPosition;
}

size_t ConditionValue::bitSizeOf(ConditionValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>().bitSizeOf(context.getTimeRangeOfDay(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>().bitSizeOf(context.getTimeRangeOfWeek(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>().bitSizeOf(context.getDateRangeOfYear(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::DaysOfWeek>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::DaysOfMonth>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::DayOfYear>().bitSizeOf(context.getDayOfYear(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::MonthsOfYear>().bitSizeOf(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::WeekInMonth>().bitSizeOf(context.getWeekInMonth(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>().bitSizeOf(context.getWeekdayInMonth(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::CalendarWeek>().bitSizeOf(context.getCalendarWeek(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeDuration>().bitSizeOf(context.getTimeDuration(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        endBitPosition += UINT8_C(1);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>().bitSizeOf(context.getFuzzyTimeDomain(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::WeatherCondition>().bitSizeOf(context.getWeather(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>().bitSizeOf(context.getFrequentlyUsedVehicles(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>().bitSizeOf(context.getSlowRoadUsers(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>().bitSizeOf(context.getBigVehicles(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>().bitSizeOf(context.getPublicServiceVehicles(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>().bitSizeOf(context.getEmergencyMilitaryDetails(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::EquipmentCondition>().bitSizeOf(context.getEquipment(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>().bitSizeOf(context.getAuthorization(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::LoadCondition>().bitSizeOf(context.getLoad(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        endBitPosition += context.getNumAxles().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::conditions::NumAxles>>(m_objectChoice.get<::nds::core::conditions::NumAxles>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::Occupancy>().bitSizeOf(context.getOccupancy(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        endBitPosition += context.getVehicleLengthMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthCentimeters>>(m_objectChoice.get<::nds::core::types::LengthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        endBitPosition += context.getVehicleLengthImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthInch>>(m_objectChoice.get<::nds::core::types::LengthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        endBitPosition += context.getVehicleHeightMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightCentimeters>>(m_objectChoice.get<::nds::core::types::HeightCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        endBitPosition += context.getVehicleHeightImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightInch>>(m_objectChoice.get<::nds::core::types::HeightInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        endBitPosition += context.getVehicleWidthMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthCentimeters>>(m_objectChoice.get<::nds::core::types::WidthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        endBitPosition += context.getVehicleWidthImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthInch>>(m_objectChoice.get<::nds::core::types::WidthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        endBitPosition += context.getWeightMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        endBitPosition += context.getWeightImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        endBitPosition += context.getWeightPerAxleMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        endBitPosition += context.getWeightPerAxleImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        endBitPosition += context.getWeightPerTandemAxleMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        endBitPosition += context.getWeightPerTandemAxleImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        endBitPosition += context.getWeightPerTridemAxleMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        endBitPosition += context.getWeightPerTridemAxleImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>().bitSizeOf(context.getTimeRangeOfWeekDays(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        endBitPosition += ::zserio::bitSizeOf(context.getVisibility(), m_objectChoice.get<::nds::core::conditions::Visibility>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        endBitPosition += ::zserio::bitSizeOf(context.getSurface(), m_objectChoice.get<::nds::core::conditions::Surface>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>().bitSizeOf(context.getEuroEmissionClass(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeDurationHours>().bitSizeOf(context.getTimeDurationHours(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>().bitSizeOf(context.getTimeRangeOfYear(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>().bitSizeOf(context.getNumTrailers(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>().bitSizeOf(context.getTrailerLengthMetric(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>().bitSizeOf(context.getTrailerLengthImperial(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        endBitPosition += context.getEngineDisplacement().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::EngineDisplacement>>(m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>().bitSizeOf(context.getEnergyType(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        endBitPosition += UINT8_C(1);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>().bitSizeOf(context.getPublicBusTypes(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }

    return endBitPosition - bitPosition;
}

size_t ConditionValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::DaysOfWeek>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::DaysOfMonth>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::DayOfYear>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::MonthsOfYear>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::WeekInMonth>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::CalendarWeek>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeDuration>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        endBitPosition += UINT8_C(1);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::WeatherCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::EquipmentCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::LoadCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::Occupancy>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::LengthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::LengthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::HeightCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::HeightInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::WidthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::WidthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::core::conditions::Visibility>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::core::conditions::Surface>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeDurationHours>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        endBitPosition += UINT8_C(1);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>().initializeOffsets(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }

    return endBitPosition;
}

size_t ConditionValue::initializeOffsets(ConditionValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>().initializeOffsets(context.getTimeRangeOfDay(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>().initializeOffsets(context.getTimeRangeOfWeek(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>().initializeOffsets(context.getDateRangeOfYear(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::DaysOfWeek>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::DaysOfMonth>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::DayOfYear>().initializeOffsets(context.getDayOfYear(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::MonthsOfYear>().initializeOffsets(endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::WeekInMonth>().initializeOffsets(context.getWeekInMonth(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>().initializeOffsets(context.getWeekdayInMonth(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::CalendarWeek>().initializeOffsets(context.getCalendarWeek(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeDuration>().initializeOffsets(context.getTimeDuration(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        endBitPosition += UINT8_C(1);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>().initializeOffsets(context.getFuzzyTimeDomain(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::WeatherCondition>().initializeOffsets(context.getWeather(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>().initializeOffsets(context.getFrequentlyUsedVehicles(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>().initializeOffsets(context.getSlowRoadUsers(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>().initializeOffsets(context.getBigVehicles(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>().initializeOffsets(context.getPublicServiceVehicles(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>().initializeOffsets(context.getEmergencyMilitaryDetails(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::EquipmentCondition>().initializeOffsets(context.getEquipment(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>().initializeOffsets(context.getAuthorization(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::LoadCondition>().initializeOffsets(context.getLoad(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        endBitPosition += context.getNumAxles().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::conditions::NumAxles>>(m_objectChoice.get<::nds::core::conditions::NumAxles>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::Occupancy>().initializeOffsets(context.getOccupancy(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        endBitPosition += context.getVehicleLengthMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthCentimeters>>(m_objectChoice.get<::nds::core::types::LengthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        endBitPosition += context.getVehicleLengthImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthInch>>(m_objectChoice.get<::nds::core::types::LengthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        endBitPosition += context.getVehicleHeightMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightCentimeters>>(m_objectChoice.get<::nds::core::types::HeightCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        endBitPosition += context.getVehicleHeightImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightInch>>(m_objectChoice.get<::nds::core::types::HeightInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        endBitPosition += context.getVehicleWidthMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthCentimeters>>(m_objectChoice.get<::nds::core::types::WidthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        endBitPosition += context.getVehicleWidthImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthInch>>(m_objectChoice.get<::nds::core::types::WidthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        endBitPosition += context.getWeightMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        endBitPosition += context.getWeightImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        endBitPosition += context.getWeightPerAxleMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        endBitPosition += context.getWeightPerAxleImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        endBitPosition += context.getWeightPerTandemAxleMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        endBitPosition += context.getWeightPerTandemAxleImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        endBitPosition += context.getWeightPerTridemAxleMetric().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        endBitPosition += context.getWeightPerTridemAxleImperial().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>().initializeOffsets(context.getTimeRangeOfWeekDays(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        endBitPosition = ::zserio::initializeOffsets(context.getVisibility(), endBitPosition,
        m_objectChoice.get<::nds::core::conditions::Visibility>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        endBitPosition = ::zserio::initializeOffsets(context.getSurface(), endBitPosition,
        m_objectChoice.get<::nds::core::conditions::Surface>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>().initializeOffsets(context.getEuroEmissionClass(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeDurationHours>().initializeOffsets(context.getTimeDurationHours(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>().initializeOffsets(context.getTimeRangeOfYear(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>().initializeOffsets(context.getNumTrailers(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>().initializeOffsets(context.getTrailerLengthMetric(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>().initializeOffsets(context.getTrailerLengthImperial(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        endBitPosition += context.getEngineDisplacement().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::EngineDisplacement>>(m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>().initializeOffsets(context.getEnergyType(), endBitPosition);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        endBitPosition += UINT8_C(1);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>().initializeOffsets(context.getPublicBusTypes(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }

    return endBitPosition;
}

bool ConditionValue::operator==(const ConditionValue& other) const
{
    if (this == &other)
        return true;

    if (!(getCode() == other.getCode()))
        return false;

    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>() == other.m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>());
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>() == other.m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>());
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>() == other.m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>());
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::DaysOfWeek>() == other.m_objectChoice.get<::nds::core::conditions::DaysOfWeek>());
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::DaysOfMonth>() == other.m_objectChoice.get<::nds::core::conditions::DaysOfMonth>());
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::DayOfYear>() == other.m_objectChoice.get<::nds::core::conditions::DayOfYear>());
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::MonthsOfYear>() == other.m_objectChoice.get<::nds::core::conditions::MonthsOfYear>());
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::WeekInMonth>() == other.m_objectChoice.get<::nds::core::conditions::WeekInMonth>());
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>() == other.m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>());
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::CalendarWeek>() == other.m_objectChoice.get<::nds::core::conditions::CalendarWeek>());
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::TimeDuration>() == other.m_objectChoice.get<::nds::core::conditions::TimeDuration>());
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::OddOrEvenDays>() == other.m_objectChoice.get<::nds::core::conditions::OddOrEvenDays>());
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>() == other.m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>());
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::WeatherCondition>() == other.m_objectChoice.get<::nds::core::conditions::WeatherCondition>());
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>() == other.m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>());
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>() == other.m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>());
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>() == other.m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>());
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>() == other.m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>());
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>() == other.m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>());
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::EquipmentCondition>() == other.m_objectChoice.get<::nds::core::conditions::EquipmentCondition>());
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>() == other.m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>());
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::LoadCondition>() == other.m_objectChoice.get<::nds::core::conditions::LoadCondition>());
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::NumAxles>() == other.m_objectChoice.get<::nds::core::conditions::NumAxles>());
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::Occupancy>() == other.m_objectChoice.get<::nds::core::conditions::Occupancy>());
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::LengthCentimeters>() == other.m_objectChoice.get<::nds::core::types::LengthCentimeters>());
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::LengthInch>() == other.m_objectChoice.get<::nds::core::types::LengthInch>());
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::HeightCentimeters>() == other.m_objectChoice.get<::nds::core::types::HeightCentimeters>());
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::HeightInch>() == other.m_objectChoice.get<::nds::core::types::HeightInch>());
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::WidthCentimeters>() == other.m_objectChoice.get<::nds::core::types::WidthCentimeters>());
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::WidthInch>() == other.m_objectChoice.get<::nds::core::types::WidthInch>());
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Weight10Kilogram>() == other.m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Weight10Lbs>() == other.m_objectChoice.get<::nds::core::types::Weight10Lbs>());
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Weight10Kilogram>() == other.m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Weight10Lbs>() == other.m_objectChoice.get<::nds::core::types::Weight10Lbs>());
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Weight10Kilogram>() == other.m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Weight10Lbs>() == other.m_objectChoice.get<::nds::core::types::Weight10Lbs>());
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Weight10Kilogram>() == other.m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Weight10Lbs>() == other.m_objectChoice.get<::nds::core::types::Weight10Lbs>());
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>() == other.m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>());
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::Visibility>() == other.m_objectChoice.get<::nds::core::conditions::Visibility>());
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::Surface>() == other.m_objectChoice.get<::nds::core::conditions::Surface>());
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>() == other.m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>());
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::TimeDurationHours>() == other.m_objectChoice.get<::nds::core::conditions::TimeDurationHours>());
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>() == other.m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>());
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>() == other.m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>());
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>() == other.m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>());
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>() == other.m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>());
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>() == other.m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>() == other.m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>());
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::BrakedTrailer>() == other.m_objectChoice.get<::nds::core::conditions::BrakedTrailer>());
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>() == other.m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }
}

uint32_t ConditionValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getCode());
    if (m_objectChoice.hasValue())
    {
        switch (getCode())
        {
        case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::DaysOfWeek>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::DaysOfMonth>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::DayOfYear>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::MonthsOfYear>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::WeekInMonth>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::CalendarWeek>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::TimeDuration>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::OddOrEvenDays>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEATHER:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::WeatherCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::EquipmentCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::LOAD:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::LoadCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::NumAxles>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::Occupancy>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::LengthCentimeters>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::LengthInch>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::HeightCentimeters>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::HeightInch>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::WidthCentimeters>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::WidthInch>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Weight10Lbs>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Weight10Lbs>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Weight10Lbs>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Weight10Lbs>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::Visibility>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::SURFACE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::Surface>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::TimeDurationHours>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::BrakedTrailer>());
            break;
        case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>());
            break;
        default:
            break;
        }
    }

    return result;
}

void ConditionValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        m_objectChoice.get<::nds::core::conditions::DaysOfWeek>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        m_objectChoice.get<::nds::core::conditions::DaysOfMonth>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::DayOfYear>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::MonthsOfYear>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        m_objectChoice.get<::nds::core::conditions::WeekInMonth>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        m_objectChoice.get<::nds::core::conditions::CalendarWeek>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        m_objectChoice.get<::nds::core::conditions::TimeDuration>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        out.writeBool(m_objectChoice.get<::nds::core::conditions::OddOrEvenDays>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        m_objectChoice.get<::nds::core::conditions::WeatherCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        m_objectChoice.get<::nds::core::conditions::EquipmentCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        m_objectChoice.get<::nds::core::conditions::LoadCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        out.writeBits(m_objectChoice.get<::nds::core::conditions::NumAxles>(), UINT8_C(8));
        break;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        m_objectChoice.get<::nds::core::conditions::Occupancy>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::LengthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::LengthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::HeightCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::HeightInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::WidthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::WidthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        out.writeVarUInt32(m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        ::zserio::write(out, m_objectChoice.get<::nds::core::conditions::Visibility>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        ::zserio::write(out, m_objectChoice.get<::nds::core::conditions::Surface>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        m_objectChoice.get<::nds::core::conditions::TimeDurationHours>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        out.writeVarUInt16(m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        out.writeBool(m_objectChoice.get<::nds::core::conditions::BrakedTrailer>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>().write(out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }
}

void ConditionValue::write(ConditionValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfDay>().write(context.getTimeRangeOfDay(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeek>().write(context.getTimeRangeOfWeek(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::DateRangeOfYear>().write(context.getDateRangeOfYear(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        m_objectChoice.get<::nds::core::conditions::DaysOfWeek>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        m_objectChoice.get<::nds::core::conditions::DaysOfMonth>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::DayOfYear>().write(context.getDayOfYear(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::MonthsOfYear>().write(out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        m_objectChoice.get<::nds::core::conditions::WeekInMonth>().write(context.getWeekInMonth(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        m_objectChoice.get<::nds::core::conditions::WeekdayInMonth>().write(context.getWeekdayInMonth(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        m_objectChoice.get<::nds::core::conditions::CalendarWeek>().write(context.getCalendarWeek(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        m_objectChoice.get<::nds::core::conditions::TimeDuration>().write(context.getTimeDuration(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        out.writeBool(m_objectChoice.get<::nds::core::conditions::OddOrEvenDays>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        m_objectChoice.get<::nds::core::conditions::FuzzyTimeDomainCondition>().write(context.getFuzzyTimeDomain(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        m_objectChoice.get<::nds::core::conditions::WeatherCondition>().write(context.getWeather(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        m_objectChoice.get<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>().write(context.getFrequentlyUsedVehicles(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        m_objectChoice.get<::nds::core::conditions::SlowRoadUsersCondition>().write(context.getSlowRoadUsers(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        m_objectChoice.get<::nds::core::conditions::BigVehiclesCondition>().write(context.getBigVehicles(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        m_objectChoice.get<::nds::core::conditions::PublicServiceVehiclesCondition>().write(context.getPublicServiceVehicles(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        m_objectChoice.get<::nds::core::conditions::EmergencyMilitaryDetailCondition>().write(context.getEmergencyMilitaryDetails(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        m_objectChoice.get<::nds::core::conditions::EquipmentCondition>().write(context.getEquipment(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        m_objectChoice.get<::nds::core::conditions::AuthorizationCondition>().write(context.getAuthorization(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        m_objectChoice.get<::nds::core::conditions::LoadCondition>().write(context.getLoad(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        context.getNumAxles().write<::zserio::StdIntArrayTraits<::nds::core::conditions::NumAxles>>(out, m_objectChoice.get<::nds::core::conditions::NumAxles>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        m_objectChoice.get<::nds::core::conditions::Occupancy>().write(context.getOccupancy(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        context.getVehicleLengthMetric().write<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthCentimeters>>(out, m_objectChoice.get<::nds::core::types::LengthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        context.getVehicleLengthImperial().write<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthInch>>(out, m_objectChoice.get<::nds::core::types::LengthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        context.getVehicleHeightMetric().write<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightCentimeters>>(out, m_objectChoice.get<::nds::core::types::HeightCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        context.getVehicleHeightImperial().write<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightInch>>(out, m_objectChoice.get<::nds::core::types::HeightInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        context.getVehicleWidthMetric().write<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthCentimeters>>(out, m_objectChoice.get<::nds::core::types::WidthCentimeters>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        context.getVehicleWidthImperial().write<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthInch>>(out, m_objectChoice.get<::nds::core::types::WidthInch>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        context.getWeightMetric().write<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(out, m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        context.getWeightImperial().write<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(out, m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        context.getWeightPerAxleMetric().write<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(out, m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        context.getWeightPerAxleImperial().write<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(out, m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        context.getWeightPerTandemAxleMetric().write<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(out, m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        context.getWeightPerTandemAxleImperial().write<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(out, m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        context.getWeightPerTridemAxleMetric().write<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(out, m_objectChoice.get<::nds::core::types::Weight10Kilogram>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        context.getWeightPerTridemAxleImperial().write<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(out, m_objectChoice.get<::nds::core::types::Weight10Lbs>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfWeekDays>().write(context.getTimeRangeOfWeekDays(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        ::zserio::write(context.getVisibility(), out, m_objectChoice.get<::nds::core::conditions::Visibility>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        ::zserio::write(context.getSurface(), out, m_objectChoice.get<::nds::core::conditions::Surface>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        m_objectChoice.get<::nds::core::conditions::EuroEmissionClassCondition>().write(context.getEuroEmissionClass(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        m_objectChoice.get<::nds::core::conditions::TimeDurationHours>().write(context.getTimeDurationHours(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        m_objectChoice.get<::nds::core::conditions::TimeRangeOfYear>().write(context.getTimeRangeOfYear(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        m_objectChoice.get<::nds::core::conditions::NumTrailersCondition>().write(context.getNumTrailers(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        m_objectChoice.get<::nds::core::conditions::TrailerLengthMetricCondition>().write(context.getTrailerLengthMetric(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        m_objectChoice.get<::nds::core::conditions::TrailerLengthImperialCondition>().write(context.getTrailerLengthImperial(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        context.getEngineDisplacement().write<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::EngineDisplacement>>(out, m_objectChoice.get<::nds::core::vehicle::EngineDisplacement>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        m_objectChoice.get<::nds::core::conditions::EnergyTypeCondition>().write(context.getEnergyType(), out);
        break;
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        out.writeBool(m_objectChoice.get<::nds::core::conditions::BrakedTrailer>());
        break;
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        m_objectChoice.get<::nds::core::conditions::PublicBusTypeCondition>().write(context.getPublicBusTypes(), out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }
}

::zserio::AnyHolder<> ConditionValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeRangeOfDay(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeRangeOfWeek(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        return ::zserio::AnyHolder<>(::nds::core::conditions::DateRangeOfYear(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        return ::zserio::AnyHolder<>(::nds::core::conditions::DaysOfWeek(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        return ::zserio::AnyHolder<>(::nds::core::conditions::DaysOfMonth(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        return ::zserio::AnyHolder<>(::nds::core::conditions::DayOfYear(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        return ::zserio::AnyHolder<>(::nds::core::conditions::MonthsOfYear(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        return ::zserio::AnyHolder<>(::nds::core::conditions::WeekInMonth(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        return ::zserio::AnyHolder<>(::nds::core::conditions::WeekdayInMonth(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        return ::zserio::AnyHolder<>(::nds::core::conditions::CalendarWeek(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeDuration(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::conditions::OddOrEvenDays>(in.readBool()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        return ::zserio::AnyHolder<>(::nds::core::conditions::FuzzyTimeDomainCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        return ::zserio::AnyHolder<>(::nds::core::conditions::WeatherCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        return ::zserio::AnyHolder<>(::nds::core::conditions::FrequentlyUsedVehicleTypesCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::SlowRoadUsersCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        return ::zserio::AnyHolder<>(::nds::core::conditions::BigVehiclesCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        return ::zserio::AnyHolder<>(::nds::core::conditions::PublicServiceVehiclesCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::EmergencyMilitaryDetailCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        return ::zserio::AnyHolder<>(::nds::core::conditions::EquipmentCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        return ::zserio::AnyHolder<>(::nds::core::conditions::AuthorizationCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        return ::zserio::AnyHolder<>(::nds::core::conditions::LoadCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::conditions::NumAxles>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        return ::zserio::AnyHolder<>(::nds::core::conditions::Occupancy(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::LengthCentimeters>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::LengthInch>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::HeightCentimeters>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::HeightInch>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::WidthCentimeters>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::WidthInch>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Weight10Kilogram>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Weight10Lbs>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Weight10Kilogram>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Weight10Lbs>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Weight10Kilogram>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Weight10Lbs>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Weight10Kilogram>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Weight10Lbs>(in.readVarUInt32()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeRangeOfWeekDays(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::core::conditions::Visibility>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::core::conditions::Surface>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::EuroEmissionClassCondition(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeDurationHours(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeRangeOfYear(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::NumTrailersCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TrailerLengthMetricCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TrailerLengthImperialCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::vehicle::EngineDisplacement>(in.readVarUInt16()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::conditions::EnergyTypeCondition(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::conditions::BrakedTrailer>(in.readBool()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::conditions::PublicBusTypeCondition(in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }
}

::zserio::AnyHolder<> ConditionValue::readObject(ConditionValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeRangeOfDay(context.getTimeRangeOfDay(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeRangeOfWeek(context.getTimeRangeOfWeek(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        return ::zserio::AnyHolder<>(::nds::core::conditions::DateRangeOfYear(context.getDateRangeOfYear(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        return ::zserio::AnyHolder<>(::nds::core::conditions::DaysOfWeek(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        return ::zserio::AnyHolder<>(::nds::core::conditions::DaysOfMonth(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        return ::zserio::AnyHolder<>(::nds::core::conditions::DayOfYear(context.getDayOfYear(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        return ::zserio::AnyHolder<>(::nds::core::conditions::MonthsOfYear(in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        return ::zserio::AnyHolder<>(::nds::core::conditions::WeekInMonth(context.getWeekInMonth(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        return ::zserio::AnyHolder<>(::nds::core::conditions::WeekdayInMonth(context.getWeekdayInMonth(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        return ::zserio::AnyHolder<>(::nds::core::conditions::CalendarWeek(context.getCalendarWeek(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeDuration(context.getTimeDuration(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::conditions::OddOrEvenDays>(in.readBool()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        return ::zserio::AnyHolder<>(::nds::core::conditions::FuzzyTimeDomainCondition(context.getFuzzyTimeDomain(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        return ::zserio::AnyHolder<>(::nds::core::conditions::WeatherCondition(context.getWeather(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        return ::zserio::AnyHolder<>(::nds::core::conditions::FrequentlyUsedVehicleTypesCondition(context.getFrequentlyUsedVehicles(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::SlowRoadUsersCondition(context.getSlowRoadUsers(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        return ::zserio::AnyHolder<>(::nds::core::conditions::BigVehiclesCondition(context.getBigVehicles(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        return ::zserio::AnyHolder<>(::nds::core::conditions::PublicServiceVehiclesCondition(context.getPublicServiceVehicles(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::EmergencyMilitaryDetailCondition(context.getEmergencyMilitaryDetails(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        return ::zserio::AnyHolder<>(::nds::core::conditions::EquipmentCondition(context.getEquipment(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        return ::zserio::AnyHolder<>(::nds::core::conditions::AuthorizationCondition(context.getAuthorization(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        return ::zserio::AnyHolder<>(::nds::core::conditions::LoadCondition(context.getLoad(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        return ::zserio::AnyHolder<>(context.getNumAxles().read<::zserio::StdIntArrayTraits<::nds::core::conditions::NumAxles>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        return ::zserio::AnyHolder<>(::nds::core::conditions::Occupancy(context.getOccupancy(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        return ::zserio::AnyHolder<>(context.getVehicleLengthMetric().read<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthCentimeters>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        return ::zserio::AnyHolder<>(context.getVehicleLengthImperial().read<::zserio::VarIntNNArrayTraits<::nds::core::types::LengthInch>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        return ::zserio::AnyHolder<>(context.getVehicleHeightMetric().read<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightCentimeters>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        return ::zserio::AnyHolder<>(context.getVehicleHeightImperial().read<::zserio::VarIntNNArrayTraits<::nds::core::types::HeightInch>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        return ::zserio::AnyHolder<>(context.getVehicleWidthMetric().read<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthCentimeters>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        return ::zserio::AnyHolder<>(context.getVehicleWidthImperial().read<::zserio::VarIntNNArrayTraits<::nds::core::types::WidthInch>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        return ::zserio::AnyHolder<>(context.getWeightMetric().read<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        return ::zserio::AnyHolder<>(context.getWeightImperial().read<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        return ::zserio::AnyHolder<>(context.getWeightPerAxleMetric().read<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        return ::zserio::AnyHolder<>(context.getWeightPerAxleImperial().read<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        return ::zserio::AnyHolder<>(context.getWeightPerTandemAxleMetric().read<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        return ::zserio::AnyHolder<>(context.getWeightPerTandemAxleImperial().read<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        return ::zserio::AnyHolder<>(context.getWeightPerTridemAxleMetric().read<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Kilogram>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        return ::zserio::AnyHolder<>(context.getWeightPerTridemAxleImperial().read<::zserio::VarIntNNArrayTraits<::nds::core::types::Weight10Lbs>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeRangeOfWeekDays(context.getTimeRangeOfWeekDays(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::core::conditions::Visibility>(context.getVisibility(), in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::core::conditions::Surface>(context.getSurface(), in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::EuroEmissionClassCondition(context.getEuroEmissionClass(), in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeDurationHours(context.getTimeDurationHours(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TimeRangeOfYear(context.getTimeRangeOfYear(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        return ::zserio::AnyHolder<>(::nds::core::conditions::NumTrailersCondition(context.getNumTrailers(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TrailerLengthMetricCondition(context.getTrailerLengthMetric(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        return ::zserio::AnyHolder<>(::nds::core::conditions::TrailerLengthImperialCondition(context.getTrailerLengthImperial(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        return ::zserio::AnyHolder<>(context.getEngineDisplacement().read<::zserio::VarIntNNArrayTraits<::nds::core::vehicle::EngineDisplacement>>(in), allocator);
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::conditions::EnergyTypeCondition(context.getEnergyType(), in, allocator), allocator);
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::conditions::BrakedTrailer>(in.readBool()), allocator);
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::conditions::PublicBusTypeCondition(context.getPublicBusTypes(), in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }
}

::zserio::AnyHolder<> ConditionValue::copyObject(const allocator_type& allocator) const
{
    switch (getCode())
    {
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_DAY:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::TimeRangeOfDay>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEK:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::TimeRangeOfWeek>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::DATE_RANGE_OF_YEAR:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::DateRangeOfYear>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_WEEK:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::DaysOfWeek>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAYS_OF_MONTH:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::DaysOfMonth>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::DAY_OF_YEAR:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::DayOfYear>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::MONTHS_OF_YEAR:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::MonthsOfYear>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEEK_IN_MONTH:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::WeekInMonth>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEEKDAY_IN_MONTH:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::WeekdayInMonth>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::CALENDAR_WEEK:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::CalendarWeek>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::TimeDuration>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::ODD_OR_EVEN_DAYS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::OddOrEvenDays>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::FUZZY_TIME_DOMAIN:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::FuzzyTimeDomainCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEATHER:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::WeatherCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::FREQUENTLY_USED_VEHICLE_TYPES:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::FrequentlyUsedVehicleTypesCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::SLOW_ROAD_USERS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::SlowRoadUsersCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::BIG_VEHICLES:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::BigVehiclesCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_SERVICE_VEHICLES:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::PublicServiceVehiclesCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::EMERGENCY_MILITARY_DETAILS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::EmergencyMilitaryDetailCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::EQUIPMENT:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::EquipmentCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::AUTHORIZATION:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::AuthorizationCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::LOAD:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::LoadCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::NUM_AXLES:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::NumAxles>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::OCCUPANCY:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::Occupancy>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::LengthCentimeters>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::LENGTH_IMPERIAL:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::LengthInch>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::HeightCentimeters>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_HEIGHT_IMPERIAL:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::HeightInch>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::WidthCentimeters>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::VEHICLE_WIDTH_IMPERIAL:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::WidthInch>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Weight10Kilogram>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_IMPERIAL:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Weight10Lbs>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Weight10Kilogram>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_AXLE_IMPERIAL:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Weight10Lbs>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Weight10Kilogram>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Weight10Lbs>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Weight10Kilogram>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Weight10Lbs>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_WEEKDAYS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::TimeRangeOfWeekDays>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::VISIBILITY:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::Visibility>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::SURFACE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::Surface>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::EURO_EMISSION_CLASS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::EuroEmissionClassCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_DURATION_HOURS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::TimeDurationHours>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::TIME_RANGE_OF_YEAR:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::TimeRangeOfYear>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::NUM_TRAILERS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::NumTrailersCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::TrailerLengthMetricCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::TRAILER_LENGTH_IMPERIAL:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::TrailerLengthImperialCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::ENGINE_DISPLACEMENT:
        return ::zserio::allocatorPropagatingCopy<::nds::core::vehicle::EngineDisplacement>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::ENERGY_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::EnergyTypeCondition>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::BRAKED_TRAILER:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::BrakedTrailer>(m_objectChoice, allocator);
    case ::nds::core::conditions::ConditionTypeCode::PUBLIC_BUS_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::conditions::PublicBusTypeCondition>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice ConditionValue!");
    }
}

} // namespace conditions
} // namespace core
} // namespace nds
