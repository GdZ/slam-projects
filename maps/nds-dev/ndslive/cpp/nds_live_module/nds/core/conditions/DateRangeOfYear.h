/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_DATE_RANGE_OF_YEAR_H
#define NDS_CORE_CONDITIONS_DATE_RANGE_OF_YEAR_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/conditions/DayOfYear.h>

namespace nds
{
namespace core
{
namespace conditions
{

class DateRangeOfYear
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::conditions::DayOfYear::ZserioPackingContext& getStartDay()
        {
            return m_startDay_;
        }

        ::nds::core::conditions::DayOfYear::ZserioPackingContext& getEndDay()
        {
            return m_endDay_;
        }

    private:
        ::nds::core::conditions::DayOfYear::ZserioPackingContext m_startDay_;
        ::nds::core::conditions::DayOfYear::ZserioPackingContext m_endDay_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DateRangeOfYear() noexcept :
            DateRangeOfYear(allocator_type())
    {}

    explicit DateRangeOfYear(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_startDay = ::nds::core::conditions::DayOfYear,
            typename ZSERIO_T_endDay = ::nds::core::conditions::DayOfYear,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_startDay, DateRangeOfYear, allocator_type> = 0>
    DateRangeOfYear(
            ZSERIO_T_startDay&& startDay_,
            ZSERIO_T_endDay&& endDay_,
            bool isInclusive_,
            const allocator_type& allocator = allocator_type()) :
            DateRangeOfYear(allocator)
    {
        m_startDay_ = ::std::forward<ZSERIO_T_startDay>(startDay_);
        m_endDay_ = ::std::forward<ZSERIO_T_endDay>(endDay_);
        m_isInclusive_ = isInclusive_;
    }

    explicit DateRangeOfYear(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DateRangeOfYear(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DateRangeOfYear() = default;

    DateRangeOfYear(const DateRangeOfYear&) = default;
    DateRangeOfYear& operator=(const DateRangeOfYear&) = default;

    DateRangeOfYear(DateRangeOfYear&&) = default;
    DateRangeOfYear& operator=(DateRangeOfYear&&) = default;

    DateRangeOfYear(::zserio::PropagateAllocatorT,
            const DateRangeOfYear& other, const allocator_type& allocator);

    const ::nds::core::conditions::DayOfYear& getStartDay() const;
    ::nds::core::conditions::DayOfYear& getStartDay();
    void setStartDay(const ::nds::core::conditions::DayOfYear& startDay_);
    void setStartDay(::nds::core::conditions::DayOfYear&& startDay_);

    const ::nds::core::conditions::DayOfYear& getEndDay() const;
    ::nds::core::conditions::DayOfYear& getEndDay();
    void setEndDay(const ::nds::core::conditions::DayOfYear& endDay_);
    void setEndDay(::nds::core::conditions::DayOfYear&& endDay_);

    bool getIsInclusive() const;
    void setIsInclusive(bool isInclusive_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DateRangeOfYear& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::conditions::DayOfYear readStartDay(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::conditions::DayOfYear readStartDay(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::conditions::DayOfYear readEndDay(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::conditions::DayOfYear readEndDay(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readIsInclusive(::zserio::BitStreamReader& in);

    ::nds::core::conditions::DayOfYear m_startDay_;
    ::nds::core::conditions::DayOfYear m_endDay_;
    bool m_isInclusive_;
};

} // namespace conditions
} // namespace core
} // namespace nds

#endif // NDS_CORE_CONDITIONS_DATE_RANGE_OF_YEAR_H
