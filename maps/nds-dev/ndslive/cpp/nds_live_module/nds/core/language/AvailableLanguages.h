/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_LANGUAGE_AVAILABLE_LANGUAGES_H
#define NDS_CORE_LANGUAGE_AVAILABLE_LANGUAGES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/language/LanguageMapping.h>

namespace nds
{
namespace core
{
namespace language
{

class AvailableLanguages
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AvailableLanguages() noexcept :
            AvailableLanguages(allocator_type())
    {}

    explicit AvailableLanguages(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_availableLanguages = ::zserio::vector<::nds::core::language::LanguageMapping>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_availableLanguages, AvailableLanguages, allocator_type> = 0>
    explicit AvailableLanguages(
            ZSERIO_T_availableLanguages&& availableLanguages_,
            const allocator_type& allocator = allocator_type()) :
            AvailableLanguages(allocator)
    {
        m_availableLanguages_ = ZserioArrayType_availableLanguages(::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_));
    }

    explicit AvailableLanguages(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AvailableLanguages() = default;

    AvailableLanguages(const AvailableLanguages&) = default;
    AvailableLanguages& operator=(const AvailableLanguages&) = default;

    AvailableLanguages(AvailableLanguages&&) = default;
    AvailableLanguages& operator=(AvailableLanguages&&) = default;

    AvailableLanguages(::zserio::PropagateAllocatorT,
            const AvailableLanguages& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::core::language::LanguageMapping>& getAvailableLanguages() const;
    ::zserio::vector<::nds::core::language::LanguageMapping>& getAvailableLanguages();
    void setAvailableLanguages(const ::zserio::vector<::nds::core::language::LanguageMapping>& availableLanguages_);
    void setAvailableLanguages(::zserio::vector<::nds::core::language::LanguageMapping>&& availableLanguages_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AvailableLanguages& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_availableLanguages
    {
    public:
        using OwnerType = AvailableLanguages;

        static void create(AvailableLanguages& owner,
                ::zserio::vector<::nds::core::language::LanguageMapping>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(AvailableLanguages& owner,
                ::zserio::vector<::nds::core::language::LanguageMapping>& array,
                ::nds::core::language::LanguageMapping::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_availableLanguages = ::zserio::Array<::zserio::vector<::nds::core::language::LanguageMapping>, ::zserio::ObjectArrayTraits<::nds::core::language::LanguageMapping, ZserioElementFactory_availableLanguages>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_availableLanguages readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_availableLanguages readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_availableLanguages m_availableLanguages_;
};

} // namespace language
} // namespace core
} // namespace nds

#endif // NDS_CORE_LANGUAGE_AVAILABLE_LANGUAGES_H
