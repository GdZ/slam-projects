/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/metadata/RoadRoutingLayerContent.h>

namespace nds
{
namespace routingdata
{
namespace metadata
{

RoadRoutingLayerContent::RoadRoutingLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RoadRoutingLayerContent::RoadRoutingLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RoadRoutingLayerContent::RoadRoutingLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RoadRoutingLayerContent' out of bounds: ") << value << "!";
}

void RoadRoutingLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::routingdata::metadata::RoadRoutingLayerContent::underlying_type>>(m_value);
}

size_t RoadRoutingLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t RoadRoutingLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::metadata::RoadRoutingLayerContent::underlying_type>>(m_value);
}

size_t RoadRoutingLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RoadRoutingLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RoadRoutingLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RoadRoutingLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void RoadRoutingLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::routingdata::metadata::RoadRoutingLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RoadRoutingLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
        result += result.empty() ? "ROAD_RANGE_MAPS" : " | ROAD_RANGE_MAPS";
    if ((*this & RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
        result += result.empty() ? "ROAD_RANGE_SETS" : " | ROAD_RANGE_SETS";
    if ((*this & RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
        result += result.empty() ? "ROAD_TRANSITION_MAPS" : " | ROAD_TRANSITION_MAPS";
    if ((*this & RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
        result += result.empty() ? "ROAD_TRANSITION_SETS" : " | ROAD_TRANSITION_SETS";
    if ((*this & RoadRoutingLayerContent::Values::SPEED_PROFILES) == RoadRoutingLayerContent::Values::SPEED_PROFILES)
        result += result.empty() ? "SPEED_PROFILES" : " | SPEED_PROFILES";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RoadRoutingLayerContent::underlying_type RoadRoutingLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

RoadRoutingLayerContent::underlying_type RoadRoutingLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::routingdata::metadata::RoadRoutingLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/metadata/LaneRoutingLayerContent.h>

namespace nds
{
namespace routingdata
{
namespace metadata
{

LaneRoutingLayerContent::LaneRoutingLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

LaneRoutingLayerContent::LaneRoutingLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

LaneRoutingLayerContent::LaneRoutingLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'LaneRoutingLayerContent' out of bounds: ") << value << "!";
}

void LaneRoutingLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::routingdata::metadata::LaneRoutingLayerContent::underlying_type>>(m_value);
}

size_t LaneRoutingLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t LaneRoutingLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::metadata::LaneRoutingLayerContent::underlying_type>>(m_value);
}

size_t LaneRoutingLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t LaneRoutingLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t LaneRoutingLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void LaneRoutingLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void LaneRoutingLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::routingdata::metadata::LaneRoutingLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> LaneRoutingLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
        result += result.empty() ? "LANE_RANGE_MAPS" : " | LANE_RANGE_MAPS";
    if ((*this & LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
        result += result.empty() ? "LANE_RANGE_SETS" : " | LANE_RANGE_SETS";
    if ((*this & LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
        result += result.empty() ? "LANE_TRANSITION_MAPS" : " | LANE_TRANSITION_MAPS";
    if ((*this & LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
        result += result.empty() ? "LANE_TRANSITION_SETS" : " | LANE_TRANSITION_SETS";
    if ((*this & LaneRoutingLayerContent::Values::SPEED_PROFILES) == LaneRoutingLayerContent::Values::SPEED_PROFILES)
        result += result.empty() ? "SPEED_PROFILES" : " | SPEED_PROFILES";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

LaneRoutingLayerContent::underlying_type LaneRoutingLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

LaneRoutingLayerContent::underlying_type LaneRoutingLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::routingdata::metadata::LaneRoutingLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/routingdata/metadata/RoadRoutingLayerMetadata.h>
#include <nds/routingdata/metadata/RoadRoutingLayerContent.h>

namespace nds
{
namespace routingdata
{
namespace metadata
{

RoadRoutingLayerMetadata::RoadRoutingLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::routingdata::metadata::RoadRoutingLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_roadTransitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator),
        m_hasEcoRoutingAttributes_(bool()),
        m_excessSlopeThreshold_(::zserio::NullOpt)
{
}

RoadRoutingLayerMetadata::RoadRoutingLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_roadTransitionAttributeMetadata_(readRoadTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator)),
        m_hasEcoRoutingAttributes_(readHasEcoRoutingAttributes(in)),
        m_excessSlopeThreshold_(readExcessSlopeThreshold(in))
{
}

RoadRoutingLayerMetadata::RoadRoutingLayerMetadata(RoadRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_roadTransitionAttributeMetadata_(readRoadTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator)),
        m_hasEcoRoutingAttributes_(readHasEcoRoutingAttributes(in)),
        m_excessSlopeThreshold_(readExcessSlopeThreshold(context, in))
{
}

RoadRoutingLayerMetadata::RoadRoutingLayerMetadata(::zserio::PropagateAllocatorT,
        const RoadRoutingLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_roadTransitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadTransitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator)),
        m_hasEcoRoutingAttributes_(::zserio::allocatorPropagatingCopy(other.m_hasEcoRoutingAttributes_, allocator)),
        m_excessSlopeThreshold_(::zserio::allocatorPropagatingCopy(other.m_excessSlopeThreshold_, allocator))
{
}

::nds::routingdata::metadata::RoadRoutingLayerContent RoadRoutingLayerMetadata::getContent() const
{
    return m_content_;
}

void RoadRoutingLayerMetadata::setContent(::nds::routingdata::metadata::RoadRoutingLayerContent content_)
{
    m_content_ = content_;
}

::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata& RoadRoutingLayerMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata& RoadRoutingLayerMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadRoutingLayerMetadata::setRoadRangeAttributeMetadata(const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadRoutingLayerMetadata::setRoadRangeAttributeMetadata(::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadRoutingLayerMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadRoutingLayerMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadRoutingLayerMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata& RoadRoutingLayerMetadata::getRoadTransitionAttributeMetadata()
{
    return m_roadTransitionAttributeMetadata_.value();
}

const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata& RoadRoutingLayerMetadata::getRoadTransitionAttributeMetadata() const
{
    return m_roadTransitionAttributeMetadata_.value();
}

void RoadRoutingLayerMetadata::setRoadTransitionAttributeMetadata(const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata& roadTransitionAttributeMetadata_)
{
    m_roadTransitionAttributeMetadata_ = roadTransitionAttributeMetadata_;
}

void RoadRoutingLayerMetadata::setRoadTransitionAttributeMetadata(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata&& roadTransitionAttributeMetadata_)
{
    m_roadTransitionAttributeMetadata_ = ::std::move(roadTransitionAttributeMetadata_);
}

bool RoadRoutingLayerMetadata::isRoadTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS);
}

bool RoadRoutingLayerMetadata::isRoadTransitionAttributeMetadataSet() const
{
    return m_roadTransitionAttributeMetadata_.hasValue();
}

void RoadRoutingLayerMetadata::resetRoadTransitionAttributeMetadata()
{
    m_roadTransitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadRoutingLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadRoutingLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadRoutingLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadRoutingLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

bool RoadRoutingLayerMetadata::getHasEcoRoutingAttributes() const
{
    return m_hasEcoRoutingAttributes_;
}

void RoadRoutingLayerMetadata::setHasEcoRoutingAttributes(bool hasEcoRoutingAttributes_)
{
    m_hasEcoRoutingAttributes_ = hasEcoRoutingAttributes_;
}

::nds::routingdata::types::ExcessSlope RoadRoutingLayerMetadata::getExcessSlopeThreshold() const
{
    return m_excessSlopeThreshold_.value();
}

void RoadRoutingLayerMetadata::setExcessSlopeThreshold(::nds::routingdata::types::ExcessSlope excessSlopeThreshold_)
{
    m_excessSlopeThreshold_ = excessSlopeThreshold_;
}

bool RoadRoutingLayerMetadata::isExcessSlopeThresholdUsed() const
{
    return (getHasEcoRoutingAttributes());
}

bool RoadRoutingLayerMetadata::isExcessSlopeThresholdSet() const
{
    return m_excessSlopeThreshold_.hasValue();
}

void RoadRoutingLayerMetadata::resetExcessSlopeThreshold()
{
    m_excessSlopeThreshold_.reset();
}

void RoadRoutingLayerMetadata::initPackingContext(RoadRoutingLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        m_roadTransitionAttributeMetadata_.value().initPackingContext(context.getRoadTransitionAttributeMetadata());
    }
    if (getHasEcoRoutingAttributes())
    {
        context.getExcessSlopeThreshold().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_excessSlopeThreshold_.value());
    }
}

size_t RoadRoutingLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        endBitPosition += m_roadTransitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);
    endBitPosition += UINT8_C(1);
    if (getHasEcoRoutingAttributes())
    {
        endBitPosition += UINT8_C(8);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRoutingLayerMetadata::bitSizeOf(RoadRoutingLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        endBitPosition += m_roadTransitionAttributeMetadata_.value().bitSizeOf(context.getRoadTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += UINT8_C(1);
    if (getHasEcoRoutingAttributes())
    {
        endBitPosition += context.getExcessSlopeThreshold().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_excessSlopeThreshold_.value());
    }

    return endBitPosition - bitPosition;
}

size_t RoadRoutingLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        endBitPosition = m_roadTransitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);
    endBitPosition += UINT8_C(1);
    if (getHasEcoRoutingAttributes())
    {
        endBitPosition += UINT8_C(8);
    }

    return endBitPosition;
}

size_t RoadRoutingLayerMetadata::initializeOffsets(RoadRoutingLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        endBitPosition = m_roadTransitionAttributeMetadata_.value().initializeOffsets(context.getRoadTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition += UINT8_C(1);
    if (getHasEcoRoutingAttributes())
    {
        endBitPosition += context.getExcessSlopeThreshold().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_excessSlopeThreshold_.value());
    }

    return endBitPosition;
}

bool RoadRoutingLayerMetadata::operator==(const RoadRoutingLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isRoadTransitionAttributeMetadataUsed() ? !other.isRoadTransitionAttributeMetadataUsed() : (m_roadTransitionAttributeMetadata_ == other.m_roadTransitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_) &&
                (m_hasEcoRoutingAttributes_ == other.m_hasEcoRoutingAttributes_) &&
                (!isExcessSlopeThresholdUsed() ? !other.isExcessSlopeThresholdUsed() : (m_excessSlopeThreshold_ == other.m_excessSlopeThreshold_));
    }

    return true;
}

uint32_t RoadRoutingLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isRoadTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadTransitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);
    result = ::zserio::calcHashCode(result, m_hasEcoRoutingAttributes_);
    if (isExcessSlopeThresholdUsed())
        result = ::zserio::calcHashCode(result, m_excessSlopeThreshold_);

    return result;
}

void RoadRoutingLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        m_roadTransitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
    out.writeBool(m_hasEcoRoutingAttributes_);
    if (getHasEcoRoutingAttributes())
    {
        out.writeBits(m_excessSlopeThreshold_.value(), UINT8_C(8));
    }
}

void RoadRoutingLayerMetadata::write(RoadRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        m_roadTransitionAttributeMetadata_.value().write(context.getRoadTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
    out.writeBool(m_hasEcoRoutingAttributes_);
    if (getHasEcoRoutingAttributes())
    {
        context.getExcessSlopeThreshold().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(out, m_excessSlopeThreshold_.value());
    }
}

void RoadRoutingLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadRoutingLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadRoutingLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadRoutingLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::routingdata::metadata::RoadRoutingLayerContent RoadRoutingLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::routingdata::metadata::RoadRoutingLayerContent(in);
}

::nds::routingdata::metadata::RoadRoutingLayerContent RoadRoutingLayerMetadata::readContent(RoadRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::routingdata::metadata::RoadRoutingLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata> RoadRoutingLayerMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata>(::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata> RoadRoutingLayerMetadata::readRoadRangeAttributeMetadata(RoadRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata>(::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata> RoadRoutingLayerMetadata::readRoadTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata>(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata> RoadRoutingLayerMetadata::readRoadTransitionAttributeMetadata(RoadRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata>(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata(context.getRoadTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata>(::zserio::NullOpt);
}
RoadRoutingLayerMetadata::ZserioArrayType_coveredRoadTypes RoadRoutingLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadRoutingLayerMetadata::ZserioArrayType_coveredRoadTypes RoadRoutingLayerMetadata::readCoveredRoadTypes(RoadRoutingLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
bool RoadRoutingLayerMetadata::readHasEcoRoutingAttributes(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> RoadRoutingLayerMetadata::readExcessSlopeThreshold(::zserio::BitStreamReader& in)
{
    if (getHasEcoRoutingAttributes())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope>(static_cast<::nds::routingdata::types::ExcessSlope>(in.readBits(UINT8_C(8))));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> RoadRoutingLayerMetadata::readExcessSlopeThreshold(RoadRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getHasEcoRoutingAttributes())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope>(context.getExcessSlopeThreshold().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/routingdata/metadata/LaneRoutingLayerMetadata.h>
#include <nds/routingdata/metadata/LaneRoutingLayerContent.h>

namespace nds
{
namespace routingdata
{
namespace metadata
{

LaneRoutingLayerMetadata::LaneRoutingLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::routingdata::metadata::LaneRoutingLayerContent()),
        m_laneRangeAttributeMetadata_(::zserio::NullOpt),
        m_laneTransitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredLaneTypes_(allocator),
        m_hasEcoRoutingAttributes_(bool()),
        m_excessSlopeThreshold_(::zserio::NullOpt)
{
}

LaneRoutingLayerMetadata::LaneRoutingLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(in, allocator)),
        m_laneTransitionAttributeMetadata_(readLaneTransitionAttributeMetadata(in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(in, allocator)),
        m_hasEcoRoutingAttributes_(readHasEcoRoutingAttributes(in)),
        m_excessSlopeThreshold_(readExcessSlopeThreshold(in))
{
}

LaneRoutingLayerMetadata::LaneRoutingLayerMetadata(LaneRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(context, in, allocator)),
        m_laneTransitionAttributeMetadata_(readLaneTransitionAttributeMetadata(context, in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(context, in, allocator)),
        m_hasEcoRoutingAttributes_(readHasEcoRoutingAttributes(in)),
        m_excessSlopeThreshold_(readExcessSlopeThreshold(context, in))
{
}

LaneRoutingLayerMetadata::LaneRoutingLayerMetadata(::zserio::PropagateAllocatorT,
        const LaneRoutingLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMetadata_, allocator)),
        m_laneTransitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneTransitionAttributeMetadata_, allocator)),
        m_coveredLaneTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredLaneTypes_, allocator)),
        m_hasEcoRoutingAttributes_(::zserio::allocatorPropagatingCopy(other.m_hasEcoRoutingAttributes_, allocator)),
        m_excessSlopeThreshold_(::zserio::allocatorPropagatingCopy(other.m_excessSlopeThreshold_, allocator))
{
}

::nds::routingdata::metadata::LaneRoutingLayerContent LaneRoutingLayerMetadata::getContent() const
{
    return m_content_;
}

void LaneRoutingLayerMetadata::setContent(::nds::routingdata::metadata::LaneRoutingLayerContent content_)
{
    m_content_ = content_;
}

::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata& LaneRoutingLayerMetadata::getLaneRangeAttributeMetadata()
{
    return m_laneRangeAttributeMetadata_.value();
}

const ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata& LaneRoutingLayerMetadata::getLaneRangeAttributeMetadata() const
{
    return m_laneRangeAttributeMetadata_.value();
}

void LaneRoutingLayerMetadata::setLaneRangeAttributeMetadata(const ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = laneRangeAttributeMetadata_;
}

void LaneRoutingLayerMetadata::setLaneRangeAttributeMetadata(::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = ::std::move(laneRangeAttributeMetadata_);
}

bool LaneRoutingLayerMetadata::isLaneRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneRoutingLayerMetadata::isLaneRangeAttributeMetadataSet() const
{
    return m_laneRangeAttributeMetadata_.hasValue();
}

void LaneRoutingLayerMetadata::resetLaneRangeAttributeMetadata()
{
    m_laneRangeAttributeMetadata_.reset();
}

::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata& LaneRoutingLayerMetadata::getLaneTransitionAttributeMetadata()
{
    return m_laneTransitionAttributeMetadata_.value();
}

const ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata& LaneRoutingLayerMetadata::getLaneTransitionAttributeMetadata() const
{
    return m_laneTransitionAttributeMetadata_.value();
}

void LaneRoutingLayerMetadata::setLaneTransitionAttributeMetadata(const ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata& laneTransitionAttributeMetadata_)
{
    m_laneTransitionAttributeMetadata_ = laneTransitionAttributeMetadata_;
}

void LaneRoutingLayerMetadata::setLaneTransitionAttributeMetadata(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata&& laneTransitionAttributeMetadata_)
{
    m_laneTransitionAttributeMetadata_ = ::std::move(laneTransitionAttributeMetadata_);
}

bool LaneRoutingLayerMetadata::isLaneTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS);
}

bool LaneRoutingLayerMetadata::isLaneTransitionAttributeMetadataSet() const
{
    return m_laneTransitionAttributeMetadata_.hasValue();
}

void LaneRoutingLayerMetadata::resetLaneTransitionAttributeMetadata()
{
    m_laneTransitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::LaneType>& LaneRoutingLayerMetadata::getCoveredLaneTypes()
{
    return m_coveredLaneTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::LaneType>& LaneRoutingLayerMetadata::getCoveredLaneTypes() const
{
    return m_coveredLaneTypes_.getRawArray();
}

void LaneRoutingLayerMetadata::setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(coveredLaneTypes_);
}

void LaneRoutingLayerMetadata::setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(std::move(coveredLaneTypes_));
}

bool LaneRoutingLayerMetadata::getHasEcoRoutingAttributes() const
{
    return m_hasEcoRoutingAttributes_;
}

void LaneRoutingLayerMetadata::setHasEcoRoutingAttributes(bool hasEcoRoutingAttributes_)
{
    m_hasEcoRoutingAttributes_ = hasEcoRoutingAttributes_;
}

::nds::routingdata::types::ExcessSlope LaneRoutingLayerMetadata::getExcessSlopeThreshold() const
{
    return m_excessSlopeThreshold_.value();
}

void LaneRoutingLayerMetadata::setExcessSlopeThreshold(::nds::routingdata::types::ExcessSlope excessSlopeThreshold_)
{
    m_excessSlopeThreshold_ = excessSlopeThreshold_;
}

bool LaneRoutingLayerMetadata::isExcessSlopeThresholdUsed() const
{
    return (getHasEcoRoutingAttributes());
}

bool LaneRoutingLayerMetadata::isExcessSlopeThresholdSet() const
{
    return m_excessSlopeThreshold_.hasValue();
}

void LaneRoutingLayerMetadata::resetExcessSlopeThreshold()
{
    m_excessSlopeThreshold_.reset();
}

void LaneRoutingLayerMetadata::initPackingContext(LaneRoutingLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().initPackingContext(context.getLaneRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_laneTransitionAttributeMetadata_.value().initPackingContext(context.getLaneTransitionAttributeMetadata());
    }
    if (getHasEcoRoutingAttributes())
    {
        context.getExcessSlopeThreshold().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_excessSlopeThreshold_.value());
    }
}

size_t LaneRoutingLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_laneTransitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOf(*this, endBitPosition);
    endBitPosition += UINT8_C(1);
    if (getHasEcoRoutingAttributes())
    {
        endBitPosition += UINT8_C(8);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRoutingLayerMetadata::bitSizeOf(LaneRoutingLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_laneTransitionAttributeMetadata_.value().bitSizeOf(context.getLaneTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += UINT8_C(1);
    if (getHasEcoRoutingAttributes())
    {
        endBitPosition += context.getExcessSlopeThreshold().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_excessSlopeThreshold_.value());
    }

    return endBitPosition - bitPosition;
}

size_t LaneRoutingLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_laneTransitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsets(*this, endBitPosition);
    endBitPosition += UINT8_C(1);
    if (getHasEcoRoutingAttributes())
    {
        endBitPosition += UINT8_C(8);
    }

    return endBitPosition;
}

size_t LaneRoutingLayerMetadata::initializeOffsets(LaneRoutingLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_laneTransitionAttributeMetadata_.value().initializeOffsets(context.getLaneTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition += UINT8_C(1);
    if (getHasEcoRoutingAttributes())
    {
        endBitPosition += context.getExcessSlopeThreshold().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_excessSlopeThreshold_.value());
    }

    return endBitPosition;
}

bool LaneRoutingLayerMetadata::operator==(const LaneRoutingLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMetadataUsed() ? !other.isLaneRangeAttributeMetadataUsed() : (m_laneRangeAttributeMetadata_ == other.m_laneRangeAttributeMetadata_)) &&
                (!isLaneTransitionAttributeMetadataUsed() ? !other.isLaneTransitionAttributeMetadataUsed() : (m_laneTransitionAttributeMetadata_ == other.m_laneTransitionAttributeMetadata_)) &&
                (m_coveredLaneTypes_ == other.m_coveredLaneTypes_) &&
                (m_hasEcoRoutingAttributes_ == other.m_hasEcoRoutingAttributes_) &&
                (!isExcessSlopeThresholdUsed() ? !other.isExcessSlopeThresholdUsed() : (m_excessSlopeThreshold_ == other.m_excessSlopeThreshold_));
    }

    return true;
}

uint32_t LaneRoutingLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMetadata_);
    if (isLaneTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneTransitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredLaneTypes_);
    result = ::zserio::calcHashCode(result, m_hasEcoRoutingAttributes_);
    if (isExcessSlopeThresholdUsed())
        result = ::zserio::calcHashCode(result, m_excessSlopeThreshold_);

    return result;
}

void LaneRoutingLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_laneTransitionAttributeMetadata_.value().write(out);
    }
    m_coveredLaneTypes_.write(*this, out);
    out.writeBool(m_hasEcoRoutingAttributes_);
    if (getHasEcoRoutingAttributes())
    {
        out.writeBits(m_excessSlopeThreshold_.value(), UINT8_C(8));
    }
}

void LaneRoutingLayerMetadata::write(LaneRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(context.getLaneRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_laneTransitionAttributeMetadata_.value().write(context.getLaneTransitionAttributeMetadata(), out);
    }
    m_coveredLaneTypes_.writePacked(*this, out);
    out.writeBool(m_hasEcoRoutingAttributes_);
    if (getHasEcoRoutingAttributes())
    {
        context.getExcessSlopeThreshold().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(out, m_excessSlopeThreshold_.value());
    }
}

void LaneRoutingLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneRoutingLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneRoutingLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneRoutingLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::nds::core::types::LaneType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::routingdata::metadata::LaneRoutingLayerContent LaneRoutingLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::routingdata::metadata::LaneRoutingLayerContent(in);
}

::nds::routingdata::metadata::LaneRoutingLayerContent LaneRoutingLayerMetadata::readContent(LaneRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::routingdata::metadata::LaneRoutingLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata> LaneRoutingLayerMetadata::readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata>(::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata> LaneRoutingLayerMetadata::readLaneRangeAttributeMetadata(LaneRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata>(::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata(context.getLaneRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata> LaneRoutingLayerMetadata::readLaneTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata>(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata> LaneRoutingLayerMetadata::readLaneTransitionAttributeMetadata(LaneRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata>(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata(context.getLaneTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata>(::zserio::NullOpt);
}
LaneRoutingLayerMetadata::ZserioArrayType_coveredLaneTypes LaneRoutingLayerMetadata::readCoveredLaneTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

LaneRoutingLayerMetadata::ZserioArrayType_coveredLaneTypes LaneRoutingLayerMetadata::readCoveredLaneTypes(LaneRoutingLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
bool LaneRoutingLayerMetadata::readHasEcoRoutingAttributes(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> LaneRoutingLayerMetadata::readExcessSlopeThreshold(::zserio::BitStreamReader& in)
{
    if (getHasEcoRoutingAttributes())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope>(static_cast<::nds::routingdata::types::ExcessSlope>(in.readBits(UINT8_C(8))));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> LaneRoutingLayerMetadata::readExcessSlopeThreshold(LaneRoutingLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getHasEcoRoutingAttributes())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope>(context.getExcessSlopeThreshold().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace routingdata
} // namespace nds
