/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTINGDATA_METADATA_LANE_ROUTING_LAYER_METADATA_H
#define NDS_ROUTINGDATA_METADATA_LANE_ROUTING_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/types/LaneType.h>
#include <nds/routingdata/instantiations/RoutingLaneRangeAttributeMetadata.h>
#include <nds/routingdata/instantiations/RoutingLaneTransitionAttributeMetadata.h>
#include <nds/routingdata/metadata/LaneRoutingLayerContent.h>
#include <nds/routingdata/types/ExcessSlope.h>

namespace nds
{
namespace routingdata
{
namespace metadata
{

class LaneRoutingLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata::ZserioPackingContext& getLaneRangeAttributeMetadata()
        {
            return m_laneRangeAttributeMetadata_;
        }

        ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata::ZserioPackingContext& getLaneTransitionAttributeMetadata()
        {
            return m_laneTransitionAttributeMetadata_;
        }

        ::zserio::DeltaContext& getExcessSlopeThreshold()
        {
            return m_excessSlopeThreshold_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata::ZserioPackingContext m_laneRangeAttributeMetadata_;
        ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata::ZserioPackingContext m_laneTransitionAttributeMetadata_;
        ::zserio::DeltaContext m_excessSlopeThreshold_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneRoutingLayerMetadata() noexcept :
            LaneRoutingLayerMetadata(allocator_type())
    {}

    explicit LaneRoutingLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneRangeAttributeMetadata = ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata,
            typename ZSERIO_T_laneTransitionAttributeMetadata = ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata,
            typename ZSERIO_T_coveredLaneTypes = ::zserio::vector<::nds::core::types::LaneType>,
            typename ZSERIO_T_excessSlopeThreshold = ::nds::routingdata::types::ExcessSlope>
    LaneRoutingLayerMetadata(
            ::nds::routingdata::metadata::LaneRoutingLayerContent content_,
            ZSERIO_T_laneRangeAttributeMetadata&& laneRangeAttributeMetadata_,
            ZSERIO_T_laneTransitionAttributeMetadata&& laneTransitionAttributeMetadata_,
            ZSERIO_T_coveredLaneTypes&& coveredLaneTypes_,
            bool hasEcoRoutingAttributes_,
            ZSERIO_T_excessSlopeThreshold&& excessSlopeThreshold_,
            const allocator_type& allocator = allocator_type()) :
            LaneRoutingLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_laneRangeAttributeMetadata_ = ::std::forward<ZSERIO_T_laneRangeAttributeMetadata>(laneRangeAttributeMetadata_);
        m_laneTransitionAttributeMetadata_ = ::std::forward<ZSERIO_T_laneTransitionAttributeMetadata>(laneTransitionAttributeMetadata_);
        m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(::std::forward<ZSERIO_T_coveredLaneTypes>(coveredLaneTypes_));
        m_hasEcoRoutingAttributes_ = hasEcoRoutingAttributes_;
        m_excessSlopeThreshold_ = ::std::forward<ZSERIO_T_excessSlopeThreshold>(excessSlopeThreshold_);
    }

    explicit LaneRoutingLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneRoutingLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneRoutingLayerMetadata() = default;

    LaneRoutingLayerMetadata(const LaneRoutingLayerMetadata&) = default;
    LaneRoutingLayerMetadata& operator=(const LaneRoutingLayerMetadata&) = default;

    LaneRoutingLayerMetadata(LaneRoutingLayerMetadata&&) = default;
    LaneRoutingLayerMetadata& operator=(LaneRoutingLayerMetadata&&) = default;

    LaneRoutingLayerMetadata(::zserio::PropagateAllocatorT,
            const LaneRoutingLayerMetadata& other, const allocator_type& allocator);

    ::nds::routingdata::metadata::LaneRoutingLayerContent getContent() const;
    void setContent(::nds::routingdata::metadata::LaneRoutingLayerContent content_);

    const ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata& getLaneRangeAttributeMetadata() const;
    ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata& getLaneRangeAttributeMetadata();
    void setLaneRangeAttributeMetadata(const ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata& laneRangeAttributeMetadata_);
    void setLaneRangeAttributeMetadata(::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_);
    bool isLaneRangeAttributeMetadataUsed() const;
    bool isLaneRangeAttributeMetadataSet() const;
    void resetLaneRangeAttributeMetadata();

    const ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata& getLaneTransitionAttributeMetadata() const;
    ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata& getLaneTransitionAttributeMetadata();
    void setLaneTransitionAttributeMetadata(const ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata& laneTransitionAttributeMetadata_);
    void setLaneTransitionAttributeMetadata(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata&& laneTransitionAttributeMetadata_);
    bool isLaneTransitionAttributeMetadataUsed() const;
    bool isLaneTransitionAttributeMetadataSet() const;
    void resetLaneTransitionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::LaneType>& getCoveredLaneTypes() const;
    ::zserio::vector<::nds::core::types::LaneType>& getCoveredLaneTypes();
    void setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_);
    void setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_);

    bool getHasEcoRoutingAttributes() const;
    void setHasEcoRoutingAttributes(bool hasEcoRoutingAttributes_);

    ::nds::routingdata::types::ExcessSlope getExcessSlopeThreshold() const;
    void setExcessSlopeThreshold(::nds::routingdata::types::ExcessSlope excessSlopeThreshold_);
    bool isExcessSlopeThresholdUsed() const;
    bool isExcessSlopeThresholdSet() const;
    void resetExcessSlopeThreshold();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneRoutingLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredLaneTypes
    {
    public:
        using OwnerType = LaneRoutingLayerMetadata;

        static void create(LaneRoutingLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::LaneType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneRoutingLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::LaneType>& array,
                ::nds::core::types::LaneType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredLaneTypes = ::zserio::Array<::zserio::vector<::nds::core::types::LaneType>, ::zserio::ObjectArrayTraits<::nds::core::types::LaneType, ZserioElementFactory_coveredLaneTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::routingdata::metadata::LaneRoutingLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::routingdata::metadata::LaneRoutingLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata> readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata> readLaneRangeAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata> readLaneTransitionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata> readLaneTransitionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredLaneTypes readCoveredLaneTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredLaneTypes readCoveredLaneTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readHasEcoRoutingAttributes(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> readExcessSlopeThreshold(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> readExcessSlopeThreshold(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::routingdata::metadata::LaneRoutingLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMetadata> m_laneRangeAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMetadata> m_laneTransitionAttributeMetadata_;
    ZserioArrayType_coveredLaneTypes m_coveredLaneTypes_;
    bool m_hasEcoRoutingAttributes_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> m_excessSlopeThreshold_;
};

} // namespace metadata
} // namespace routingdata
} // namespace nds

#endif // NDS_ROUTINGDATA_METADATA_LANE_ROUTING_LAYER_METADATA_H
