/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTINGDATA_METADATA_ROAD_ROUTING_LAYER_METADATA_H
#define NDS_ROUTINGDATA_METADATA_ROAD_ROUTING_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/types/RoadType.h>
#include <nds/routingdata/instantiations/RoutingRoadRangeAttributeMetadata.h>
#include <nds/routingdata/instantiations/RoutingRoadTransitionAttributeMetadata.h>
#include <nds/routingdata/metadata/RoadRoutingLayerContent.h>
#include <nds/routingdata/types/ExcessSlope.h>

namespace nds
{
namespace routingdata
{
namespace metadata
{

class RoadRoutingLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata::ZserioPackingContext& getRoadRangeAttributeMetadata()
        {
            return m_roadRangeAttributeMetadata_;
        }

        ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata::ZserioPackingContext& getRoadTransitionAttributeMetadata()
        {
            return m_roadTransitionAttributeMetadata_;
        }

        ::zserio::DeltaContext& getExcessSlopeThreshold()
        {
            return m_excessSlopeThreshold_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata::ZserioPackingContext m_roadRangeAttributeMetadata_;
        ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata::ZserioPackingContext m_roadTransitionAttributeMetadata_;
        ::zserio::DeltaContext m_excessSlopeThreshold_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadRoutingLayerMetadata() noexcept :
            RoadRoutingLayerMetadata(allocator_type())
    {}

    explicit RoadRoutingLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadRangeAttributeMetadata = ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata,
            typename ZSERIO_T_roadTransitionAttributeMetadata = ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata,
            typename ZSERIO_T_coveredRoadTypes = ::zserio::vector<::nds::core::types::RoadType>,
            typename ZSERIO_T_excessSlopeThreshold = ::nds::routingdata::types::ExcessSlope>
    RoadRoutingLayerMetadata(
            ::nds::routingdata::metadata::RoadRoutingLayerContent content_,
            ZSERIO_T_roadRangeAttributeMetadata&& roadRangeAttributeMetadata_,
            ZSERIO_T_roadTransitionAttributeMetadata&& roadTransitionAttributeMetadata_,
            ZSERIO_T_coveredRoadTypes&& coveredRoadTypes_,
            bool hasEcoRoutingAttributes_,
            ZSERIO_T_excessSlopeThreshold&& excessSlopeThreshold_,
            const allocator_type& allocator = allocator_type()) :
            RoadRoutingLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_roadRangeAttributeMetadata_ = ::std::forward<ZSERIO_T_roadRangeAttributeMetadata>(roadRangeAttributeMetadata_);
        m_roadTransitionAttributeMetadata_ = ::std::forward<ZSERIO_T_roadTransitionAttributeMetadata>(roadTransitionAttributeMetadata_);
        m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(::std::forward<ZSERIO_T_coveredRoadTypes>(coveredRoadTypes_));
        m_hasEcoRoutingAttributes_ = hasEcoRoutingAttributes_;
        m_excessSlopeThreshold_ = ::std::forward<ZSERIO_T_excessSlopeThreshold>(excessSlopeThreshold_);
    }

    explicit RoadRoutingLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadRoutingLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadRoutingLayerMetadata() = default;

    RoadRoutingLayerMetadata(const RoadRoutingLayerMetadata&) = default;
    RoadRoutingLayerMetadata& operator=(const RoadRoutingLayerMetadata&) = default;

    RoadRoutingLayerMetadata(RoadRoutingLayerMetadata&&) = default;
    RoadRoutingLayerMetadata& operator=(RoadRoutingLayerMetadata&&) = default;

    RoadRoutingLayerMetadata(::zserio::PropagateAllocatorT,
            const RoadRoutingLayerMetadata& other, const allocator_type& allocator);

    ::nds::routingdata::metadata::RoadRoutingLayerContent getContent() const;
    void setContent(::nds::routingdata::metadata::RoadRoutingLayerContent content_);

    const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata& getRoadRangeAttributeMetadata() const;
    ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata& getRoadRangeAttributeMetadata();
    void setRoadRangeAttributeMetadata(const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata& roadRangeAttributeMetadata_);
    void setRoadRangeAttributeMetadata(::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_);
    bool isRoadRangeAttributeMetadataUsed() const;
    bool isRoadRangeAttributeMetadataSet() const;
    void resetRoadRangeAttributeMetadata();

    const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata& getRoadTransitionAttributeMetadata() const;
    ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata& getRoadTransitionAttributeMetadata();
    void setRoadTransitionAttributeMetadata(const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata& roadTransitionAttributeMetadata_);
    void setRoadTransitionAttributeMetadata(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata&& roadTransitionAttributeMetadata_);
    bool isRoadTransitionAttributeMetadataUsed() const;
    bool isRoadTransitionAttributeMetadataSet() const;
    void resetRoadTransitionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes() const;
    ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes();
    void setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_);
    void setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_);

    bool getHasEcoRoutingAttributes() const;
    void setHasEcoRoutingAttributes(bool hasEcoRoutingAttributes_);

    ::nds::routingdata::types::ExcessSlope getExcessSlopeThreshold() const;
    void setExcessSlopeThreshold(::nds::routingdata::types::ExcessSlope excessSlopeThreshold_);
    bool isExcessSlopeThresholdUsed() const;
    bool isExcessSlopeThresholdSet() const;
    void resetExcessSlopeThreshold();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadRoutingLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredRoadTypes
    {
    public:
        using OwnerType = RoadRoutingLayerMetadata;

        static void create(RoadRoutingLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadRoutingLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::nds::core::types::RoadType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredRoadTypes = ::zserio::Array<::zserio::vector<::nds::core::types::RoadType>, ::zserio::ObjectArrayTraits<::nds::core::types::RoadType, ZserioElementFactory_coveredRoadTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::routingdata::metadata::RoadRoutingLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::routingdata::metadata::RoadRoutingLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata> readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata> readRoadRangeAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata> readRoadTransitionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata> readRoadTransitionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readHasEcoRoutingAttributes(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> readExcessSlopeThreshold(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> readExcessSlopeThreshold(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::routingdata::metadata::RoadRoutingLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMetadata> m_roadRangeAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMetadata> m_roadTransitionAttributeMetadata_;
    ZserioArrayType_coveredRoadTypes m_coveredRoadTypes_;
    bool m_hasEcoRoutingAttributes_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::types::ExcessSlope> m_excessSlopeThreshold_;
};

} // namespace metadata
} // namespace routingdata
} // namespace nds

#endif // NDS_ROUTINGDATA_METADATA_ROAD_ROUTING_LAYER_METADATA_H
