/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTINGDATA_TYPES_CONSUMPTION_SPEED_VALUE_H
#define NDS_ROUTINGDATA_TYPES_CONSUMPTION_SPEED_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/SpeedKmh.h>
#include <nds/road/reference/types/PercentageIndication.h>

namespace nds
{
namespace routingdata
{
namespace types
{

class ConsumptionSpeedValue
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getAverageSpeed()
        {
            return m_averageSpeed_;
        }

    private:
        ::zserio::DeltaContext m_averageSpeed_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ConsumptionSpeedValue() noexcept :
            ConsumptionSpeedValue(allocator_type())
    {}

    explicit ConsumptionSpeedValue(const allocator_type& allocator) noexcept;

    ConsumptionSpeedValue(
            ::nds::road::reference::types::PercentageIndication roadPercentage_,
            ::nds::core::types::SpeedKmh averageSpeed_,
            const allocator_type& allocator = allocator_type()) :
            ConsumptionSpeedValue(allocator)
    {
        m_roadPercentage_ = roadPercentage_;
        m_averageSpeed_ = averageSpeed_;
    }

    explicit ConsumptionSpeedValue(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ConsumptionSpeedValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ConsumptionSpeedValue() = default;

    ConsumptionSpeedValue(const ConsumptionSpeedValue&) = default;
    ConsumptionSpeedValue& operator=(const ConsumptionSpeedValue&) = default;

    ConsumptionSpeedValue(ConsumptionSpeedValue&&) = default;
    ConsumptionSpeedValue& operator=(ConsumptionSpeedValue&&) = default;

    ConsumptionSpeedValue(::zserio::PropagateAllocatorT,
            const ConsumptionSpeedValue& other, const allocator_type& allocator);

    ::nds::road::reference::types::PercentageIndication getRoadPercentage() const;
    void setRoadPercentage(::nds::road::reference::types::PercentageIndication roadPercentage_);

    ::nds::core::types::SpeedKmh getAverageSpeed() const;
    void setAverageSpeed(::nds::core::types::SpeedKmh averageSpeed_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ConsumptionSpeedValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::road::reference::types::PercentageIndication readRoadPercentage(::zserio::BitStreamReader& in);
    ::nds::core::types::SpeedKmh readAverageSpeed(::zserio::BitStreamReader& in);
    ::nds::core::types::SpeedKmh readAverageSpeed(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::road::reference::types::PercentageIndication m_roadPercentage_;
    ::nds::core::types::SpeedKmh m_averageSpeed_;
};

} // namespace types
} // namespace routingdata
} // namespace nds

#endif // NDS_ROUTINGDATA_TYPES_CONSUMPTION_SPEED_VALUE_H
