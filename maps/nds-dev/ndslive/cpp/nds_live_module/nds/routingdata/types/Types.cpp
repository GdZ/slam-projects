/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/types/PluralJunction.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PluralJunction enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::routingdata::types::PluralJunction>::names;
constexpr ::std::array<::nds::routingdata::types::PluralJunction, 4> EnumTraits<::nds::routingdata::types::PluralJunction>::values;
constexpr const char* EnumTraits<::nds::routingdata::types::PluralJunction>::enumName;

template <>
size_t enumToOrdinal(::nds::routingdata::types::PluralJunction value)
{
    switch (value)
    {
    case ::nds::routingdata::types::PluralJunction::INTERSECTION_INTERNAL:
        return 0;
    case ::nds::routingdata::types::PluralJunction::MANEUVER:
        return 1;
    case ::nds::routingdata::types::PluralJunction::INDESCRIBABLE:
        return 2;
    case ::nds::routingdata::types::PluralJunction::MAGIC_ROUNDABOUT:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PluralJunction: ") <<
                static_cast<typename ::std::underlying_type<::nds::routingdata::types::PluralJunction>::type>(value) << "!";
    }
}

template <>
::nds::routingdata::types::PluralJunction valueToEnum(
        typename ::std::underlying_type<::nds::routingdata::types::PluralJunction>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
        return static_cast<::nds::routingdata::types::PluralJunction>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PluralJunction: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::routingdata::types::PluralJunction>(::nds::routingdata::types::PluralJunction value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::routingdata::types::PluralJunction value)
{
    context.init<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::PluralJunction>::type, UINT8_C(4)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::routingdata::types::PluralJunction)
{
    return UINT8_C(4);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::routingdata::types::PluralJunction value)
{
    return context.bitSizeOf<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::PluralJunction>::type, UINT8_C(4)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::routingdata::types::PluralJunction value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::routingdata::types::PluralJunction value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::routingdata::types::PluralJunction read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::types::PluralJunction>(
            static_cast<typename ::std::underlying_type<::nds::routingdata::types::PluralJunction>::type>(
                    in.readBits(UINT8_C(4))));
}

template <>
::nds::routingdata::types::PluralJunction read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::types::PluralJunction>(context.read<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::PluralJunction>::type, UINT8_C(4)>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::routingdata::types::PluralJunction value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(4));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::routingdata::types::PluralJunction value)
{
    context.write<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::PluralJunction>::type, UINT8_C(4)>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/types/SpecialTransitionCode.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for SpecialTransitionCode enumeration.
constexpr ::std::array<const char*, 5> EnumTraits<::nds::routingdata::types::SpecialTransitionCode>::names;
constexpr ::std::array<::nds::routingdata::types::SpecialTransitionCode, 5> EnumTraits<::nds::routingdata::types::SpecialTransitionCode>::values;
constexpr const char* EnumTraits<::nds::routingdata::types::SpecialTransitionCode>::enumName;

template <>
size_t enumToOrdinal(::nds::routingdata::types::SpecialTransitionCode value)
{
    switch (value)
    {
    case ::nds::routingdata::types::SpecialTransitionCode::BEAR:
        return 0;
    case ::nds::routingdata::types::SpecialTransitionCode::BEAR_AT_EXIT:
        return 1;
    case ::nds::routingdata::types::SpecialTransitionCode::BEAR_STRAIGHT:
        return 2;
    case ::nds::routingdata::types::SpecialTransitionCode::ALONG_MAIN_ROAD:
        return 3;
    case ::nds::routingdata::types::SpecialTransitionCode::NO_ADVICE:
        return 4;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration SpecialTransitionCode: ") <<
                static_cast<typename ::std::underlying_type<::nds::routingdata::types::SpecialTransitionCode>::type>(value) << "!";
    }
}

template <>
::nds::routingdata::types::SpecialTransitionCode valueToEnum(
        typename ::std::underlying_type<::nds::routingdata::types::SpecialTransitionCode>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
        return static_cast<::nds::routingdata::types::SpecialTransitionCode>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration SpecialTransitionCode: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::routingdata::types::SpecialTransitionCode>(::nds::routingdata::types::SpecialTransitionCode value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::routingdata::types::SpecialTransitionCode value)
{
    context.init<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::SpecialTransitionCode>::type, UINT8_C(4)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::routingdata::types::SpecialTransitionCode)
{
    return UINT8_C(4);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::routingdata::types::SpecialTransitionCode value)
{
    return context.bitSizeOf<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::SpecialTransitionCode>::type, UINT8_C(4)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::routingdata::types::SpecialTransitionCode value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::routingdata::types::SpecialTransitionCode value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::routingdata::types::SpecialTransitionCode read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::types::SpecialTransitionCode>(
            static_cast<typename ::std::underlying_type<::nds::routingdata::types::SpecialTransitionCode>::type>(
                    in.readBits(UINT8_C(4))));
}

template <>
::nds::routingdata::types::SpecialTransitionCode read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::types::SpecialTransitionCode>(context.read<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::SpecialTransitionCode>::type, UINT8_C(4)>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::routingdata::types::SpecialTransitionCode value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(4));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::routingdata::types::SpecialTransitionCode value)
{
    context.write<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::SpecialTransitionCode>::type, UINT8_C(4)>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/types/TouristRouteType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for TouristRouteType enumeration.
constexpr ::std::array<const char*, 5> EnumTraits<::nds::routingdata::types::TouristRouteType>::names;
constexpr ::std::array<::nds::routingdata::types::TouristRouteType, 5> EnumTraits<::nds::routingdata::types::TouristRouteType>::values;
constexpr const char* EnumTraits<::nds::routingdata::types::TouristRouteType>::enumName;

template <>
size_t enumToOrdinal(::nds::routingdata::types::TouristRouteType value)
{
    switch (value)
    {
    case ::nds::routingdata::types::TouristRouteType::SCENIC:
        return 0;
    case ::nds::routingdata::types::TouristRouteType::NATIONAL:
        return 1;
    case ::nds::routingdata::types::TouristRouteType::REGIONAL:
        return 2;
    case ::nds::routingdata::types::TouristRouteType::NATURAL:
        return 3;
    case ::nds::routingdata::types::TouristRouteType::CULTURAL_HISTORIC:
        return 4;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration TouristRouteType: ") <<
                static_cast<typename ::std::underlying_type<::nds::routingdata::types::TouristRouteType>::type>(value) << "!";
    }
}

template <>
::nds::routingdata::types::TouristRouteType valueToEnum(
        typename ::std::underlying_type<::nds::routingdata::types::TouristRouteType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
        return static_cast<::nds::routingdata::types::TouristRouteType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration TouristRouteType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::routingdata::types::TouristRouteType>(::nds::routingdata::types::TouristRouteType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::routingdata::types::TouristRouteType value)
{
    context.init<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::TouristRouteType>::type, UINT8_C(3)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::routingdata::types::TouristRouteType)
{
    return UINT8_C(3);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::routingdata::types::TouristRouteType value)
{
    return context.bitSizeOf<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::TouristRouteType>::type, UINT8_C(3)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::routingdata::types::TouristRouteType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::routingdata::types::TouristRouteType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::routingdata::types::TouristRouteType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::types::TouristRouteType>(
            static_cast<typename ::std::underlying_type<::nds::routingdata::types::TouristRouteType>::type>(
                    in.readBits(UINT8_C(3))));
}

template <>
::nds::routingdata::types::TouristRouteType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::types::TouristRouteType>(context.read<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::TouristRouteType>::type, UINT8_C(3)>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::routingdata::types::TouristRouteType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(3));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::routingdata::types::TouristRouteType value)
{
    context.write<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::routingdata::types::TouristRouteType>::type, UINT8_C(3)>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/routingdata/types/ConsumptionSpeedDependencyCurve.h>

namespace nds
{
namespace routingdata
{
namespace types
{

ConsumptionSpeedDependencyCurve::ConsumptionSpeedDependencyCurve(const allocator_type& allocator) noexcept :
        m_numberOfSpeedValuesAlongRoad_(uint8_t()),
        m_consumptionSpeedValue_(allocator)
{
}

ConsumptionSpeedDependencyCurve::ConsumptionSpeedDependencyCurve(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numberOfSpeedValuesAlongRoad_(readNumberOfSpeedValuesAlongRoad(in)),
        m_consumptionSpeedValue_(readConsumptionSpeedValue(in, allocator))
{
}

ConsumptionSpeedDependencyCurve::ConsumptionSpeedDependencyCurve(ConsumptionSpeedDependencyCurve::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numberOfSpeedValuesAlongRoad_(readNumberOfSpeedValuesAlongRoad(context, in)),
        m_consumptionSpeedValue_(readConsumptionSpeedValue(context, in, allocator))
{
}

ConsumptionSpeedDependencyCurve::ConsumptionSpeedDependencyCurve(::zserio::PropagateAllocatorT,
        const ConsumptionSpeedDependencyCurve& other, const allocator_type& allocator) :
        m_numberOfSpeedValuesAlongRoad_(::zserio::allocatorPropagatingCopy(other.m_numberOfSpeedValuesAlongRoad_, allocator)),
        m_consumptionSpeedValue_(::zserio::allocatorPropagatingCopy(other.m_consumptionSpeedValue_, allocator))
{
}

uint8_t ConsumptionSpeedDependencyCurve::getNumberOfSpeedValuesAlongRoad() const
{
    return m_numberOfSpeedValuesAlongRoad_;
}

void ConsumptionSpeedDependencyCurve::setNumberOfSpeedValuesAlongRoad(uint8_t numberOfSpeedValuesAlongRoad_)
{
    m_numberOfSpeedValuesAlongRoad_ = numberOfSpeedValuesAlongRoad_;
}

::zserio::vector<::nds::routingdata::types::ConsumptionSpeedValue>& ConsumptionSpeedDependencyCurve::getConsumptionSpeedValue()
{
    return m_consumptionSpeedValue_.getRawArray();
}

const ::zserio::vector<::nds::routingdata::types::ConsumptionSpeedValue>& ConsumptionSpeedDependencyCurve::getConsumptionSpeedValue() const
{
    return m_consumptionSpeedValue_.getRawArray();
}

void ConsumptionSpeedDependencyCurve::setConsumptionSpeedValue(const ::zserio::vector<::nds::routingdata::types::ConsumptionSpeedValue>& consumptionSpeedValue_)
{
    m_consumptionSpeedValue_ = ZserioArrayType_consumptionSpeedValue(consumptionSpeedValue_);
}

void ConsumptionSpeedDependencyCurve::setConsumptionSpeedValue(::zserio::vector<::nds::routingdata::types::ConsumptionSpeedValue>&& consumptionSpeedValue_)
{
    m_consumptionSpeedValue_ = ZserioArrayType_consumptionSpeedValue(std::move(consumptionSpeedValue_));
}

void ConsumptionSpeedDependencyCurve::initPackingContext(ConsumptionSpeedDependencyCurve::ZserioPackingContext& context) const
{
    context.getNumberOfSpeedValuesAlongRoad().init<::zserio::StdIntArrayTraits<uint8_t>>(m_numberOfSpeedValuesAlongRoad_);
}

size_t ConsumptionSpeedDependencyCurve::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += m_consumptionSpeedValue_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t ConsumptionSpeedDependencyCurve::bitSizeOf(ConsumptionSpeedDependencyCurve::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumberOfSpeedValuesAlongRoad().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_numberOfSpeedValuesAlongRoad_);
    endBitPosition += m_consumptionSpeedValue_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t ConsumptionSpeedDependencyCurve::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition = m_consumptionSpeedValue_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t ConsumptionSpeedDependencyCurve::initializeOffsets(ConsumptionSpeedDependencyCurve::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumberOfSpeedValuesAlongRoad().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_numberOfSpeedValuesAlongRoad_);
    endBitPosition = m_consumptionSpeedValue_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool ConsumptionSpeedDependencyCurve::operator==(const ConsumptionSpeedDependencyCurve& other) const
{
    if (this != &other)
    {
        return
                (m_numberOfSpeedValuesAlongRoad_ == other.m_numberOfSpeedValuesAlongRoad_) &&
                (m_consumptionSpeedValue_ == other.m_consumptionSpeedValue_);
    }

    return true;
}

uint32_t ConsumptionSpeedDependencyCurve::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numberOfSpeedValuesAlongRoad_);
    result = ::zserio::calcHashCode(result, m_consumptionSpeedValue_);

    return result;
}

void ConsumptionSpeedDependencyCurve::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_numberOfSpeedValuesAlongRoad_, UINT8_C(8));

    // check array length
    if (m_consumptionSpeedValue_.getRawArray().size() != static_cast<size_t>(getNumberOfSpeedValuesAlongRoad()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field ConsumptionSpeedDependencyCurve.consumptionSpeedValue: ") <<
                m_consumptionSpeedValue_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumberOfSpeedValuesAlongRoad()) << "!";
    }
    m_consumptionSpeedValue_.write(*this, out);
}

void ConsumptionSpeedDependencyCurve::write(ConsumptionSpeedDependencyCurve::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumberOfSpeedValuesAlongRoad().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_numberOfSpeedValuesAlongRoad_);

    // check array length
    if (m_consumptionSpeedValue_.getRawArray().size() != static_cast<size_t>(getNumberOfSpeedValuesAlongRoad()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field ConsumptionSpeedDependencyCurve.consumptionSpeedValue: ") <<
                m_consumptionSpeedValue_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumberOfSpeedValuesAlongRoad()) << "!";
    }
    m_consumptionSpeedValue_.writePacked(*this, out);
}

void ConsumptionSpeedDependencyCurve::ZserioElementFactory_consumptionSpeedValue::create(ConsumptionSpeedDependencyCurve&        ,
        ::zserio::vector<::nds::routingdata::types::ConsumptionSpeedValue>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void ConsumptionSpeedDependencyCurve::ZserioElementFactory_consumptionSpeedValue::create(ConsumptionSpeedDependencyCurve&        ,
        ::zserio::vector<::nds::routingdata::types::ConsumptionSpeedValue>& array,
        ::nds::routingdata::types::ConsumptionSpeedValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

uint8_t ConsumptionSpeedDependencyCurve::readNumberOfSpeedValuesAlongRoad(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}

uint8_t ConsumptionSpeedDependencyCurve::readNumberOfSpeedValuesAlongRoad(ConsumptionSpeedDependencyCurve::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumberOfSpeedValuesAlongRoad().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
}
ConsumptionSpeedDependencyCurve::ZserioArrayType_consumptionSpeedValue ConsumptionSpeedDependencyCurve::readConsumptionSpeedValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_consumptionSpeedValue readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumberOfSpeedValuesAlongRoad()));

    return readField;
}

ConsumptionSpeedDependencyCurve::ZserioArrayType_consumptionSpeedValue ConsumptionSpeedDependencyCurve::readConsumptionSpeedValue(ConsumptionSpeedDependencyCurve::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_consumptionSpeedValue readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumberOfSpeedValuesAlongRoad()));

    return readField;
}

} // namespace types
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>

#include <nds/routingdata/types/ConsumptionSpeedValue.h>
#include <nds/core/types/SPEED_UNDEFINED.h>

namespace nds
{
namespace routingdata
{
namespace types
{

ConsumptionSpeedValue::ConsumptionSpeedValue(const allocator_type&) noexcept :
        m_roadPercentage_(::nds::road::reference::types::PercentageIndication()),
        m_averageSpeed_(::nds::core::types::SpeedKmh())
{
}

ConsumptionSpeedValue::ConsumptionSpeedValue(::zserio::BitStreamReader& in, const allocator_type&) :
        m_roadPercentage_(readRoadPercentage(in)),
        m_averageSpeed_(readAverageSpeed(in))
{
}

ConsumptionSpeedValue::ConsumptionSpeedValue(ConsumptionSpeedValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_roadPercentage_(readRoadPercentage(in)),
        m_averageSpeed_(readAverageSpeed(context, in))
{
}

ConsumptionSpeedValue::ConsumptionSpeedValue(::zserio::PropagateAllocatorT,
        const ConsumptionSpeedValue& other, const allocator_type& allocator) :
        m_roadPercentage_(::zserio::allocatorPropagatingCopy(other.m_roadPercentage_, allocator)),
        m_averageSpeed_(::zserio::allocatorPropagatingCopy(other.m_averageSpeed_, allocator))
{
}

::nds::road::reference::types::PercentageIndication ConsumptionSpeedValue::getRoadPercentage() const
{
    return m_roadPercentage_;
}

void ConsumptionSpeedValue::setRoadPercentage(::nds::road::reference::types::PercentageIndication roadPercentage_)
{
    m_roadPercentage_ = roadPercentage_;
}

::nds::core::types::SpeedKmh ConsumptionSpeedValue::getAverageSpeed() const
{
    return m_averageSpeed_;
}

void ConsumptionSpeedValue::setAverageSpeed(::nds::core::types::SpeedKmh averageSpeed_)
{
    m_averageSpeed_ = averageSpeed_;
}

void ConsumptionSpeedValue::initPackingContext(ConsumptionSpeedValue::ZserioPackingContext& context) const
{
    context.getAverageSpeed().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_averageSpeed_);
}

size_t ConsumptionSpeedValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(16);
    endBitPosition += UINT8_C(8);

    return endBitPosition - bitPosition;
}

size_t ConsumptionSpeedValue::bitSizeOf(ConsumptionSpeedValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(16);
    endBitPosition += context.getAverageSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_averageSpeed_);

    return endBitPosition - bitPosition;
}

size_t ConsumptionSpeedValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(16);
    endBitPosition += UINT8_C(8);

    return endBitPosition;
}

size_t ConsumptionSpeedValue::initializeOffsets(ConsumptionSpeedValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(16);
    endBitPosition += context.getAverageSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_averageSpeed_);

    return endBitPosition;
}

bool ConsumptionSpeedValue::operator==(const ConsumptionSpeedValue& other) const
{
    if (this != &other)
    {
        return
                (m_roadPercentage_ == other.m_roadPercentage_) &&
                (m_averageSpeed_ == other.m_averageSpeed_);
    }

    return true;
}

uint32_t ConsumptionSpeedValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_roadPercentage_);
    result = ::zserio::calcHashCode(result, m_averageSpeed_);

    return result;
}

void ConsumptionSpeedValue::write(::zserio::BitStreamWriter& out) const
{
    out.writeFloat16(m_roadPercentage_);

    // check constraint
    if (!(getAverageSpeed() > ::nds::core::types::SPEED_UNDEFINED))
        throw ::zserio::ConstraintException("Write: Constraint violated at ConsumptionSpeedValue.averageSpeed!");
    out.writeBits(m_averageSpeed_, UINT8_C(8));
}

void ConsumptionSpeedValue::write(ConsumptionSpeedValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    out.writeFloat16(m_roadPercentage_);

    // check constraint
    if (!(getAverageSpeed() > ::nds::core::types::SPEED_UNDEFINED))
        throw ::zserio::ConstraintException("Write: Constraint violated at ConsumptionSpeedValue.averageSpeed!");
    context.getAverageSpeed().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_averageSpeed_);
}

::nds::road::reference::types::PercentageIndication ConsumptionSpeedValue::readRoadPercentage(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::road::reference::types::PercentageIndication>(in.readFloat16());
}
::nds::core::types::SpeedKmh ConsumptionSpeedValue::readAverageSpeed(::zserio::BitStreamReader& in)
{
    ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
    // check constraint
    if (!(readField > ::nds::core::types::SPEED_UNDEFINED))
        throw ::zserio::ConstraintException("Read: Constraint violated at ConsumptionSpeedValue.averageSpeed!");

    return readField;
}

::nds::core::types::SpeedKmh ConsumptionSpeedValue::readAverageSpeed(ConsumptionSpeedValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    ::nds::core::types::SpeedKmh readField = context.getAverageSpeed().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
    // check constraint
    if (!(readField > ::nds::core::types::SPEED_UNDEFINED))
        throw ::zserio::ConstraintException("Read: Constraint violated at ConsumptionSpeedValue.averageSpeed!");

    return readField;
}

} // namespace types
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>

#include <nds/routingdata/types/SpeedProfilesWeek.h>

namespace nds
{
namespace routingdata
{
namespace types
{

SpeedProfilesWeek::SpeedProfilesWeek(const allocator_type& allocator) noexcept :
        m_daysOfWeek_(allocator),
        m_baseSpeed_(::zserio::NullOpt),
        m_profileSunday_(::zserio::NullOpt),
        m_avgSpeedSunday_(::zserio::NullOpt),
        m_profileMonday_(::zserio::NullOpt),
        m_avgSpeedMonday_(::zserio::NullOpt),
        m_profileTuesday_(::zserio::NullOpt),
        m_avgSpeedTuesday_(::zserio::NullOpt),
        m_profileWednesday_(::zserio::NullOpt),
        m_avgSpeedWednesday_(::zserio::NullOpt),
        m_profileThursday_(::zserio::NullOpt),
        m_avgSpeedThursday_(::zserio::NullOpt),
        m_profileFriday_(::zserio::NullOpt),
        m_avgSpeedFriday_(::zserio::NullOpt),
        m_profileSaturday_(::zserio::NullOpt),
        m_avgSpeedSaturday_(::zserio::NullOpt)
{
}

SpeedProfilesWeek::SpeedProfilesWeek(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_daysOfWeek_(readDaysOfWeek(in, allocator)),
        m_baseSpeed_(readBaseSpeed(in)),
        m_profileSunday_(readProfileSunday(in)),
        m_avgSpeedSunday_(readAvgSpeedSunday(in)),
        m_profileMonday_(readProfileMonday(in)),
        m_avgSpeedMonday_(readAvgSpeedMonday(in)),
        m_profileTuesday_(readProfileTuesday(in)),
        m_avgSpeedTuesday_(readAvgSpeedTuesday(in)),
        m_profileWednesday_(readProfileWednesday(in)),
        m_avgSpeedWednesday_(readAvgSpeedWednesday(in)),
        m_profileThursday_(readProfileThursday(in)),
        m_avgSpeedThursday_(readAvgSpeedThursday(in)),
        m_profileFriday_(readProfileFriday(in)),
        m_avgSpeedFriday_(readAvgSpeedFriday(in)),
        m_profileSaturday_(readProfileSaturday(in)),
        m_avgSpeedSaturday_(readAvgSpeedSaturday(in))
{
}

SpeedProfilesWeek::SpeedProfilesWeek(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_daysOfWeek_(readDaysOfWeek(in, allocator)),
        m_baseSpeed_(readBaseSpeed(context, in)),
        m_profileSunday_(readProfileSunday(context, in)),
        m_avgSpeedSunday_(readAvgSpeedSunday(context, in)),
        m_profileMonday_(readProfileMonday(context, in)),
        m_avgSpeedMonday_(readAvgSpeedMonday(context, in)),
        m_profileTuesday_(readProfileTuesday(context, in)),
        m_avgSpeedTuesday_(readAvgSpeedTuesday(context, in)),
        m_profileWednesday_(readProfileWednesday(context, in)),
        m_avgSpeedWednesday_(readAvgSpeedWednesday(context, in)),
        m_profileThursday_(readProfileThursday(context, in)),
        m_avgSpeedThursday_(readAvgSpeedThursday(context, in)),
        m_profileFriday_(readProfileFriday(context, in)),
        m_avgSpeedFriday_(readAvgSpeedFriday(context, in)),
        m_profileSaturday_(readProfileSaturday(context, in)),
        m_avgSpeedSaturday_(readAvgSpeedSaturday(context, in))
{
}

SpeedProfilesWeek::SpeedProfilesWeek(::zserio::PropagateAllocatorT,
        const SpeedProfilesWeek& other, const allocator_type& allocator) :
        m_daysOfWeek_(::zserio::allocatorPropagatingCopy(other.m_daysOfWeek_, allocator)),
        m_baseSpeed_(::zserio::allocatorPropagatingCopy(other.m_baseSpeed_, allocator)),
        m_profileSunday_(::zserio::allocatorPropagatingCopy(other.m_profileSunday_, allocator)),
        m_avgSpeedSunday_(::zserio::allocatorPropagatingCopy(other.m_avgSpeedSunday_, allocator)),
        m_profileMonday_(::zserio::allocatorPropagatingCopy(other.m_profileMonday_, allocator)),
        m_avgSpeedMonday_(::zserio::allocatorPropagatingCopy(other.m_avgSpeedMonday_, allocator)),
        m_profileTuesday_(::zserio::allocatorPropagatingCopy(other.m_profileTuesday_, allocator)),
        m_avgSpeedTuesday_(::zserio::allocatorPropagatingCopy(other.m_avgSpeedTuesday_, allocator)),
        m_profileWednesday_(::zserio::allocatorPropagatingCopy(other.m_profileWednesday_, allocator)),
        m_avgSpeedWednesday_(::zserio::allocatorPropagatingCopy(other.m_avgSpeedWednesday_, allocator)),
        m_profileThursday_(::zserio::allocatorPropagatingCopy(other.m_profileThursday_, allocator)),
        m_avgSpeedThursday_(::zserio::allocatorPropagatingCopy(other.m_avgSpeedThursday_, allocator)),
        m_profileFriday_(::zserio::allocatorPropagatingCopy(other.m_profileFriday_, allocator)),
        m_avgSpeedFriday_(::zserio::allocatorPropagatingCopy(other.m_avgSpeedFriday_, allocator)),
        m_profileSaturday_(::zserio::allocatorPropagatingCopy(other.m_profileSaturday_, allocator)),
        m_avgSpeedSaturday_(::zserio::allocatorPropagatingCopy(other.m_avgSpeedSaturday_, allocator))
{
}

::nds::core::conditions::DaysOfWeek& SpeedProfilesWeek::getDaysOfWeek()
{
    return m_daysOfWeek_;
}

const ::nds::core::conditions::DaysOfWeek& SpeedProfilesWeek::getDaysOfWeek() const
{
    return m_daysOfWeek_;
}

void SpeedProfilesWeek::setDaysOfWeek(const ::nds::core::conditions::DaysOfWeek& daysOfWeek_)
{
    m_daysOfWeek_ = daysOfWeek_;
}

void SpeedProfilesWeek::setDaysOfWeek(::nds::core::conditions::DaysOfWeek&& daysOfWeek_)
{
    m_daysOfWeek_ = ::std::move(daysOfWeek_);
}

::nds::core::types::SpeedKmh SpeedProfilesWeek::getBaseSpeed() const
{
    return m_baseSpeed_.value();
}

void SpeedProfilesWeek::setBaseSpeed(::nds::core::types::SpeedKmh baseSpeed_)
{
    m_baseSpeed_ = baseSpeed_;
}

bool SpeedProfilesWeek::isBaseSpeedUsed() const
{
    return ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true));
}

bool SpeedProfilesWeek::isBaseSpeedSet() const
{
    return m_baseSpeed_.hasValue();
}

void SpeedProfilesWeek::resetBaseSpeed()
{
    m_baseSpeed_.reset();
}

::nds::routingdata::types::SpeedProfileId SpeedProfilesWeek::getProfileSunday() const
{
    return m_profileSunday_.value();
}

void SpeedProfilesWeek::setProfileSunday(::nds::routingdata::types::SpeedProfileId profileSunday_)
{
    m_profileSunday_ = profileSunday_;
}

bool SpeedProfilesWeek::isProfileSundayUsed() const
{
    return (getDaysOfWeek().getIsSunday());
}

bool SpeedProfilesWeek::isProfileSundaySet() const
{
    return m_profileSunday_.hasValue();
}

void SpeedProfilesWeek::resetProfileSunday()
{
    m_profileSunday_.reset();
}

::nds::core::types::SpeedKmh SpeedProfilesWeek::getAvgSpeedSunday() const
{
    return m_avgSpeedSunday_.value();
}

void SpeedProfilesWeek::setAvgSpeedSunday(::nds::core::types::SpeedKmh avgSpeedSunday_)
{
    m_avgSpeedSunday_ = avgSpeedSunday_;
}

bool SpeedProfilesWeek::isAvgSpeedSundayUsed() const
{
    return (!getDaysOfWeek().getIsSunday());
}

bool SpeedProfilesWeek::isAvgSpeedSundaySet() const
{
    return m_avgSpeedSunday_.hasValue();
}

void SpeedProfilesWeek::resetAvgSpeedSunday()
{
    m_avgSpeedSunday_.reset();
}

::nds::routingdata::types::SpeedProfileId SpeedProfilesWeek::getProfileMonday() const
{
    return m_profileMonday_.value();
}

void SpeedProfilesWeek::setProfileMonday(::nds::routingdata::types::SpeedProfileId profileMonday_)
{
    m_profileMonday_ = profileMonday_;
}

bool SpeedProfilesWeek::isProfileMondayUsed() const
{
    return (getDaysOfWeek().getIsMonday());
}

bool SpeedProfilesWeek::isProfileMondaySet() const
{
    return m_profileMonday_.hasValue();
}

void SpeedProfilesWeek::resetProfileMonday()
{
    m_profileMonday_.reset();
}

::nds::core::types::SpeedKmh SpeedProfilesWeek::getAvgSpeedMonday() const
{
    return m_avgSpeedMonday_.value();
}

void SpeedProfilesWeek::setAvgSpeedMonday(::nds::core::types::SpeedKmh avgSpeedMonday_)
{
    m_avgSpeedMonday_ = avgSpeedMonday_;
}

bool SpeedProfilesWeek::isAvgSpeedMondayUsed() const
{
    return (!getDaysOfWeek().getIsMonday());
}

bool SpeedProfilesWeek::isAvgSpeedMondaySet() const
{
    return m_avgSpeedMonday_.hasValue();
}

void SpeedProfilesWeek::resetAvgSpeedMonday()
{
    m_avgSpeedMonday_.reset();
}

::nds::routingdata::types::SpeedProfileId SpeedProfilesWeek::getProfileTuesday() const
{
    return m_profileTuesday_.value();
}

void SpeedProfilesWeek::setProfileTuesday(::nds::routingdata::types::SpeedProfileId profileTuesday_)
{
    m_profileTuesday_ = profileTuesday_;
}

bool SpeedProfilesWeek::isProfileTuesdayUsed() const
{
    return (getDaysOfWeek().getIsTuesday());
}

bool SpeedProfilesWeek::isProfileTuesdaySet() const
{
    return m_profileTuesday_.hasValue();
}

void SpeedProfilesWeek::resetProfileTuesday()
{
    m_profileTuesday_.reset();
}

::nds::core::types::SpeedKmh SpeedProfilesWeek::getAvgSpeedTuesday() const
{
    return m_avgSpeedTuesday_.value();
}

void SpeedProfilesWeek::setAvgSpeedTuesday(::nds::core::types::SpeedKmh avgSpeedTuesday_)
{
    m_avgSpeedTuesday_ = avgSpeedTuesday_;
}

bool SpeedProfilesWeek::isAvgSpeedTuesdayUsed() const
{
    return (!getDaysOfWeek().getIsTuesday());
}

bool SpeedProfilesWeek::isAvgSpeedTuesdaySet() const
{
    return m_avgSpeedTuesday_.hasValue();
}

void SpeedProfilesWeek::resetAvgSpeedTuesday()
{
    m_avgSpeedTuesday_.reset();
}

::nds::routingdata::types::SpeedProfileId SpeedProfilesWeek::getProfileWednesday() const
{
    return m_profileWednesday_.value();
}

void SpeedProfilesWeek::setProfileWednesday(::nds::routingdata::types::SpeedProfileId profileWednesday_)
{
    m_profileWednesday_ = profileWednesday_;
}

bool SpeedProfilesWeek::isProfileWednesdayUsed() const
{
    return (getDaysOfWeek().getIsWednesday());
}

bool SpeedProfilesWeek::isProfileWednesdaySet() const
{
    return m_profileWednesday_.hasValue();
}

void SpeedProfilesWeek::resetProfileWednesday()
{
    m_profileWednesday_.reset();
}

::nds::core::types::SpeedKmh SpeedProfilesWeek::getAvgSpeedWednesday() const
{
    return m_avgSpeedWednesday_.value();
}

void SpeedProfilesWeek::setAvgSpeedWednesday(::nds::core::types::SpeedKmh avgSpeedWednesday_)
{
    m_avgSpeedWednesday_ = avgSpeedWednesday_;
}

bool SpeedProfilesWeek::isAvgSpeedWednesdayUsed() const
{
    return (!getDaysOfWeek().getIsWednesday());
}

bool SpeedProfilesWeek::isAvgSpeedWednesdaySet() const
{
    return m_avgSpeedWednesday_.hasValue();
}

void SpeedProfilesWeek::resetAvgSpeedWednesday()
{
    m_avgSpeedWednesday_.reset();
}

::nds::routingdata::types::SpeedProfileId SpeedProfilesWeek::getProfileThursday() const
{
    return m_profileThursday_.value();
}

void SpeedProfilesWeek::setProfileThursday(::nds::routingdata::types::SpeedProfileId profileThursday_)
{
    m_profileThursday_ = profileThursday_;
}

bool SpeedProfilesWeek::isProfileThursdayUsed() const
{
    return (getDaysOfWeek().getIsThursday());
}

bool SpeedProfilesWeek::isProfileThursdaySet() const
{
    return m_profileThursday_.hasValue();
}

void SpeedProfilesWeek::resetProfileThursday()
{
    m_profileThursday_.reset();
}

::nds::core::types::SpeedKmh SpeedProfilesWeek::getAvgSpeedThursday() const
{
    return m_avgSpeedThursday_.value();
}

void SpeedProfilesWeek::setAvgSpeedThursday(::nds::core::types::SpeedKmh avgSpeedThursday_)
{
    m_avgSpeedThursday_ = avgSpeedThursday_;
}

bool SpeedProfilesWeek::isAvgSpeedThursdayUsed() const
{
    return (!getDaysOfWeek().getIsThursday());
}

bool SpeedProfilesWeek::isAvgSpeedThursdaySet() const
{
    return m_avgSpeedThursday_.hasValue();
}

void SpeedProfilesWeek::resetAvgSpeedThursday()
{
    m_avgSpeedThursday_.reset();
}

::nds::routingdata::types::SpeedProfileId SpeedProfilesWeek::getProfileFriday() const
{
    return m_profileFriday_.value();
}

void SpeedProfilesWeek::setProfileFriday(::nds::routingdata::types::SpeedProfileId profileFriday_)
{
    m_profileFriday_ = profileFriday_;
}

bool SpeedProfilesWeek::isProfileFridayUsed() const
{
    return (getDaysOfWeek().getIsFriday());
}

bool SpeedProfilesWeek::isProfileFridaySet() const
{
    return m_profileFriday_.hasValue();
}

void SpeedProfilesWeek::resetProfileFriday()
{
    m_profileFriday_.reset();
}

::nds::core::types::SpeedKmh SpeedProfilesWeek::getAvgSpeedFriday() const
{
    return m_avgSpeedFriday_.value();
}

void SpeedProfilesWeek::setAvgSpeedFriday(::nds::core::types::SpeedKmh avgSpeedFriday_)
{
    m_avgSpeedFriday_ = avgSpeedFriday_;
}

bool SpeedProfilesWeek::isAvgSpeedFridayUsed() const
{
    return (!getDaysOfWeek().getIsFriday());
}

bool SpeedProfilesWeek::isAvgSpeedFridaySet() const
{
    return m_avgSpeedFriday_.hasValue();
}

void SpeedProfilesWeek::resetAvgSpeedFriday()
{
    m_avgSpeedFriday_.reset();
}

::nds::routingdata::types::SpeedProfileId SpeedProfilesWeek::getProfileSaturday() const
{
    return m_profileSaturday_.value();
}

void SpeedProfilesWeek::setProfileSaturday(::nds::routingdata::types::SpeedProfileId profileSaturday_)
{
    m_profileSaturday_ = profileSaturday_;
}

bool SpeedProfilesWeek::isProfileSaturdayUsed() const
{
    return (getDaysOfWeek().getIsSaturday());
}

bool SpeedProfilesWeek::isProfileSaturdaySet() const
{
    return m_profileSaturday_.hasValue();
}

void SpeedProfilesWeek::resetProfileSaturday()
{
    m_profileSaturday_.reset();
}

::nds::core::types::SpeedKmh SpeedProfilesWeek::getAvgSpeedSaturday() const
{
    return m_avgSpeedSaturday_.value();
}

void SpeedProfilesWeek::setAvgSpeedSaturday(::nds::core::types::SpeedKmh avgSpeedSaturday_)
{
    m_avgSpeedSaturday_ = avgSpeedSaturday_;
}

bool SpeedProfilesWeek::isAvgSpeedSaturdayUsed() const
{
    return (!getDaysOfWeek().getIsSaturday());
}

bool SpeedProfilesWeek::isAvgSpeedSaturdaySet() const
{
    return m_avgSpeedSaturday_.hasValue();
}

void SpeedProfilesWeek::resetAvgSpeedSaturday()
{
    m_avgSpeedSaturday_.reset();
}

void SpeedProfilesWeek::initPackingContext(SpeedProfilesWeek::ZserioPackingContext& context) const
{
    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        context.getBaseSpeed().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_baseSpeed_.value());
    }
    if (getDaysOfWeek().getIsSunday())
    {
        context.getProfileSunday().init<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileSunday_.value());
    }
    if (!getDaysOfWeek().getIsSunday())
    {
        context.getAvgSpeedSunday().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedSunday_.value());
    }
    if (getDaysOfWeek().getIsMonday())
    {
        context.getProfileMonday().init<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileMonday_.value());
    }
    if (!getDaysOfWeek().getIsMonday())
    {
        context.getAvgSpeedMonday().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedMonday_.value());
    }
    if (getDaysOfWeek().getIsTuesday())
    {
        context.getProfileTuesday().init<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileTuesday_.value());
    }
    if (!getDaysOfWeek().getIsTuesday())
    {
        context.getAvgSpeedTuesday().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedTuesday_.value());
    }
    if (getDaysOfWeek().getIsWednesday())
    {
        context.getProfileWednesday().init<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileWednesday_.value());
    }
    if (!getDaysOfWeek().getIsWednesday())
    {
        context.getAvgSpeedWednesday().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedWednesday_.value());
    }
    if (getDaysOfWeek().getIsThursday())
    {
        context.getProfileThursday().init<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileThursday_.value());
    }
    if (!getDaysOfWeek().getIsThursday())
    {
        context.getAvgSpeedThursday().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedThursday_.value());
    }
    if (getDaysOfWeek().getIsFriday())
    {
        context.getProfileFriday().init<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileFriday_.value());
    }
    if (!getDaysOfWeek().getIsFriday())
    {
        context.getAvgSpeedFriday().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedFriday_.value());
    }
    if (getDaysOfWeek().getIsSaturday())
    {
        context.getProfileSaturday().init<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileSaturday_.value());
    }
    if (!getDaysOfWeek().getIsSaturday())
    {
        context.getAvgSpeedSaturday().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedSaturday_.value());
    }
}

size_t SpeedProfilesWeek::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_daysOfWeek_.bitSizeOf(endBitPosition);
    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsSunday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileSunday_.value());
    }
    if (!getDaysOfWeek().getIsSunday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsMonday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileMonday_.value());
    }
    if (!getDaysOfWeek().getIsMonday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsTuesday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileTuesday_.value());
    }
    if (!getDaysOfWeek().getIsTuesday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsWednesday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileWednesday_.value());
    }
    if (!getDaysOfWeek().getIsWednesday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsThursday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileThursday_.value());
    }
    if (!getDaysOfWeek().getIsThursday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsFriday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileFriday_.value());
    }
    if (!getDaysOfWeek().getIsFriday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsSaturday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileSaturday_.value());
    }
    if (!getDaysOfWeek().getIsSaturday())
    {
        endBitPosition += UINT8_C(8);
    }

    return endBitPosition - bitPosition;
}

size_t SpeedProfilesWeek::bitSizeOf(SpeedProfilesWeek::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_daysOfWeek_.bitSizeOf(endBitPosition);
    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        endBitPosition += context.getBaseSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_baseSpeed_.value());
    }
    if (getDaysOfWeek().getIsSunday())
    {
        endBitPosition += context.getProfileSunday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileSunday_.value());
    }
    if (!getDaysOfWeek().getIsSunday())
    {
        endBitPosition += context.getAvgSpeedSunday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedSunday_.value());
    }
    if (getDaysOfWeek().getIsMonday())
    {
        endBitPosition += context.getProfileMonday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileMonday_.value());
    }
    if (!getDaysOfWeek().getIsMonday())
    {
        endBitPosition += context.getAvgSpeedMonday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedMonday_.value());
    }
    if (getDaysOfWeek().getIsTuesday())
    {
        endBitPosition += context.getProfileTuesday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileTuesday_.value());
    }
    if (!getDaysOfWeek().getIsTuesday())
    {
        endBitPosition += context.getAvgSpeedTuesday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedTuesday_.value());
    }
    if (getDaysOfWeek().getIsWednesday())
    {
        endBitPosition += context.getProfileWednesday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileWednesday_.value());
    }
    if (!getDaysOfWeek().getIsWednesday())
    {
        endBitPosition += context.getAvgSpeedWednesday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedWednesday_.value());
    }
    if (getDaysOfWeek().getIsThursday())
    {
        endBitPosition += context.getProfileThursday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileThursday_.value());
    }
    if (!getDaysOfWeek().getIsThursday())
    {
        endBitPosition += context.getAvgSpeedThursday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedThursday_.value());
    }
    if (getDaysOfWeek().getIsFriday())
    {
        endBitPosition += context.getProfileFriday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileFriday_.value());
    }
    if (!getDaysOfWeek().getIsFriday())
    {
        endBitPosition += context.getAvgSpeedFriday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedFriday_.value());
    }
    if (getDaysOfWeek().getIsSaturday())
    {
        endBitPosition += context.getProfileSaturday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileSaturday_.value());
    }
    if (!getDaysOfWeek().getIsSaturday())
    {
        endBitPosition += context.getAvgSpeedSaturday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedSaturday_.value());
    }

    return endBitPosition - bitPosition;
}

size_t SpeedProfilesWeek::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_daysOfWeek_.initializeOffsets(endBitPosition);
    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsSunday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileSunday_.value());
    }
    if (!getDaysOfWeek().getIsSunday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsMonday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileMonday_.value());
    }
    if (!getDaysOfWeek().getIsMonday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsTuesday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileTuesday_.value());
    }
    if (!getDaysOfWeek().getIsTuesday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsWednesday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileWednesday_.value());
    }
    if (!getDaysOfWeek().getIsWednesday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsThursday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileThursday_.value());
    }
    if (!getDaysOfWeek().getIsThursday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsFriday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileFriday_.value());
    }
    if (!getDaysOfWeek().getIsFriday())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getDaysOfWeek().getIsSaturday())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_profileSaturday_.value());
    }
    if (!getDaysOfWeek().getIsSaturday())
    {
        endBitPosition += UINT8_C(8);
    }

    return endBitPosition;
}

size_t SpeedProfilesWeek::initializeOffsets(SpeedProfilesWeek::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_daysOfWeek_.initializeOffsets(endBitPosition);
    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        endBitPosition += context.getBaseSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_baseSpeed_.value());
    }
    if (getDaysOfWeek().getIsSunday())
    {
        endBitPosition += context.getProfileSunday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileSunday_.value());
    }
    if (!getDaysOfWeek().getIsSunday())
    {
        endBitPosition += context.getAvgSpeedSunday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedSunday_.value());
    }
    if (getDaysOfWeek().getIsMonday())
    {
        endBitPosition += context.getProfileMonday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileMonday_.value());
    }
    if (!getDaysOfWeek().getIsMonday())
    {
        endBitPosition += context.getAvgSpeedMonday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedMonday_.value());
    }
    if (getDaysOfWeek().getIsTuesday())
    {
        endBitPosition += context.getProfileTuesday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileTuesday_.value());
    }
    if (!getDaysOfWeek().getIsTuesday())
    {
        endBitPosition += context.getAvgSpeedTuesday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedTuesday_.value());
    }
    if (getDaysOfWeek().getIsWednesday())
    {
        endBitPosition += context.getProfileWednesday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileWednesday_.value());
    }
    if (!getDaysOfWeek().getIsWednesday())
    {
        endBitPosition += context.getAvgSpeedWednesday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedWednesday_.value());
    }
    if (getDaysOfWeek().getIsThursday())
    {
        endBitPosition += context.getProfileThursday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileThursday_.value());
    }
    if (!getDaysOfWeek().getIsThursday())
    {
        endBitPosition += context.getAvgSpeedThursday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedThursday_.value());
    }
    if (getDaysOfWeek().getIsFriday())
    {
        endBitPosition += context.getProfileFriday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileFriday_.value());
    }
    if (!getDaysOfWeek().getIsFriday())
    {
        endBitPosition += context.getAvgSpeedFriday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedFriday_.value());
    }
    if (getDaysOfWeek().getIsSaturday())
    {
        endBitPosition += context.getProfileSaturday().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_profileSaturday_.value());
    }
    if (!getDaysOfWeek().getIsSaturday())
    {
        endBitPosition += context.getAvgSpeedSaturday().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_avgSpeedSaturday_.value());
    }

    return endBitPosition;
}

bool SpeedProfilesWeek::operator==(const SpeedProfilesWeek& other) const
{
    if (this != &other)
    {
        return
                (m_daysOfWeek_ == other.m_daysOfWeek_) &&
                (!isBaseSpeedUsed() ? !other.isBaseSpeedUsed() : (m_baseSpeed_ == other.m_baseSpeed_)) &&
                (!isProfileSundayUsed() ? !other.isProfileSundayUsed() : (m_profileSunday_ == other.m_profileSunday_)) &&
                (!isAvgSpeedSundayUsed() ? !other.isAvgSpeedSundayUsed() : (m_avgSpeedSunday_ == other.m_avgSpeedSunday_)) &&
                (!isProfileMondayUsed() ? !other.isProfileMondayUsed() : (m_profileMonday_ == other.m_profileMonday_)) &&
                (!isAvgSpeedMondayUsed() ? !other.isAvgSpeedMondayUsed() : (m_avgSpeedMonday_ == other.m_avgSpeedMonday_)) &&
                (!isProfileTuesdayUsed() ? !other.isProfileTuesdayUsed() : (m_profileTuesday_ == other.m_profileTuesday_)) &&
                (!isAvgSpeedTuesdayUsed() ? !other.isAvgSpeedTuesdayUsed() : (m_avgSpeedTuesday_ == other.m_avgSpeedTuesday_)) &&
                (!isProfileWednesdayUsed() ? !other.isProfileWednesdayUsed() : (m_profileWednesday_ == other.m_profileWednesday_)) &&
                (!isAvgSpeedWednesdayUsed() ? !other.isAvgSpeedWednesdayUsed() : (m_avgSpeedWednesday_ == other.m_avgSpeedWednesday_)) &&
                (!isProfileThursdayUsed() ? !other.isProfileThursdayUsed() : (m_profileThursday_ == other.m_profileThursday_)) &&
                (!isAvgSpeedThursdayUsed() ? !other.isAvgSpeedThursdayUsed() : (m_avgSpeedThursday_ == other.m_avgSpeedThursday_)) &&
                (!isProfileFridayUsed() ? !other.isProfileFridayUsed() : (m_profileFriday_ == other.m_profileFriday_)) &&
                (!isAvgSpeedFridayUsed() ? !other.isAvgSpeedFridayUsed() : (m_avgSpeedFriday_ == other.m_avgSpeedFriday_)) &&
                (!isProfileSaturdayUsed() ? !other.isProfileSaturdayUsed() : (m_profileSaturday_ == other.m_profileSaturday_)) &&
                (!isAvgSpeedSaturdayUsed() ? !other.isAvgSpeedSaturdayUsed() : (m_avgSpeedSaturday_ == other.m_avgSpeedSaturday_));
    }

    return true;
}

uint32_t SpeedProfilesWeek::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_daysOfWeek_);
    if (isBaseSpeedUsed())
        result = ::zserio::calcHashCode(result, m_baseSpeed_);
    if (isProfileSundayUsed())
        result = ::zserio::calcHashCode(result, m_profileSunday_);
    if (isAvgSpeedSundayUsed())
        result = ::zserio::calcHashCode(result, m_avgSpeedSunday_);
    if (isProfileMondayUsed())
        result = ::zserio::calcHashCode(result, m_profileMonday_);
    if (isAvgSpeedMondayUsed())
        result = ::zserio::calcHashCode(result, m_avgSpeedMonday_);
    if (isProfileTuesdayUsed())
        result = ::zserio::calcHashCode(result, m_profileTuesday_);
    if (isAvgSpeedTuesdayUsed())
        result = ::zserio::calcHashCode(result, m_avgSpeedTuesday_);
    if (isProfileWednesdayUsed())
        result = ::zserio::calcHashCode(result, m_profileWednesday_);
    if (isAvgSpeedWednesdayUsed())
        result = ::zserio::calcHashCode(result, m_avgSpeedWednesday_);
    if (isProfileThursdayUsed())
        result = ::zserio::calcHashCode(result, m_profileThursday_);
    if (isAvgSpeedThursdayUsed())
        result = ::zserio::calcHashCode(result, m_avgSpeedThursday_);
    if (isProfileFridayUsed())
        result = ::zserio::calcHashCode(result, m_profileFriday_);
    if (isAvgSpeedFridayUsed())
        result = ::zserio::calcHashCode(result, m_avgSpeedFriday_);
    if (isProfileSaturdayUsed())
        result = ::zserio::calcHashCode(result, m_profileSaturday_);
    if (isAvgSpeedSaturdayUsed())
        result = ::zserio::calcHashCode(result, m_avgSpeedSaturday_);

    return result;
}

void SpeedProfilesWeek::write(::zserio::BitStreamWriter& out) const
{
    m_daysOfWeek_.write(out);

    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        // check constraint
        if (!(getBaseSpeed() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.baseSpeed!");
        out.writeBits(m_baseSpeed_.value(), UINT8_C(8));
    }

    if (getDaysOfWeek().getIsSunday())
    {
        out.writeVarUInt16(m_profileSunday_.value());
    }

    if (!getDaysOfWeek().getIsSunday())
    {
        // check constraint
        if (!(getAvgSpeedSunday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedSunday!");
        out.writeBits(m_avgSpeedSunday_.value(), UINT8_C(8));
    }

    if (getDaysOfWeek().getIsMonday())
    {
        out.writeVarUInt16(m_profileMonday_.value());
    }

    if (!getDaysOfWeek().getIsMonday())
    {
        // check constraint
        if (!(getAvgSpeedMonday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedMonday!");
        out.writeBits(m_avgSpeedMonday_.value(), UINT8_C(8));
    }

    if (getDaysOfWeek().getIsTuesday())
    {
        out.writeVarUInt16(m_profileTuesday_.value());
    }

    if (!getDaysOfWeek().getIsTuesday())
    {
        // check constraint
        if (!(getAvgSpeedTuesday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedTuesday!");
        out.writeBits(m_avgSpeedTuesday_.value(), UINT8_C(8));
    }

    if (getDaysOfWeek().getIsWednesday())
    {
        out.writeVarUInt16(m_profileWednesday_.value());
    }

    if (!getDaysOfWeek().getIsWednesday())
    {
        // check constraint
        if (!(getAvgSpeedWednesday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedWednesday!");
        out.writeBits(m_avgSpeedWednesday_.value(), UINT8_C(8));
    }

    if (getDaysOfWeek().getIsThursday())
    {
        out.writeVarUInt16(m_profileThursday_.value());
    }

    if (!getDaysOfWeek().getIsThursday())
    {
        // check constraint
        if (!(getAvgSpeedThursday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedThursday!");
        out.writeBits(m_avgSpeedThursday_.value(), UINT8_C(8));
    }

    if (getDaysOfWeek().getIsFriday())
    {
        out.writeVarUInt16(m_profileFriday_.value());
    }

    if (!getDaysOfWeek().getIsFriday())
    {
        // check constraint
        if (!(getAvgSpeedFriday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedFriday!");
        out.writeBits(m_avgSpeedFriday_.value(), UINT8_C(8));
    }

    if (getDaysOfWeek().getIsSaturday())
    {
        out.writeVarUInt16(m_profileSaturday_.value());
    }

    if (!getDaysOfWeek().getIsSaturday())
    {
        // check constraint
        if (!(getAvgSpeedSaturday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedSaturday!");
        out.writeBits(m_avgSpeedSaturday_.value(), UINT8_C(8));
    }
}

void SpeedProfilesWeek::write(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_daysOfWeek_.write(out);

    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        // check constraint
        if (!(getBaseSpeed() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.baseSpeed!");
        context.getBaseSpeed().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_baseSpeed_.value());
    }

    if (getDaysOfWeek().getIsSunday())
    {
        context.getProfileSunday().write<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(out, m_profileSunday_.value());
    }

    if (!getDaysOfWeek().getIsSunday())
    {
        // check constraint
        if (!(getAvgSpeedSunday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedSunday!");
        context.getAvgSpeedSunday().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_avgSpeedSunday_.value());
    }

    if (getDaysOfWeek().getIsMonday())
    {
        context.getProfileMonday().write<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(out, m_profileMonday_.value());
    }

    if (!getDaysOfWeek().getIsMonday())
    {
        // check constraint
        if (!(getAvgSpeedMonday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedMonday!");
        context.getAvgSpeedMonday().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_avgSpeedMonday_.value());
    }

    if (getDaysOfWeek().getIsTuesday())
    {
        context.getProfileTuesday().write<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(out, m_profileTuesday_.value());
    }

    if (!getDaysOfWeek().getIsTuesday())
    {
        // check constraint
        if (!(getAvgSpeedTuesday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedTuesday!");
        context.getAvgSpeedTuesday().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_avgSpeedTuesday_.value());
    }

    if (getDaysOfWeek().getIsWednesday())
    {
        context.getProfileWednesday().write<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(out, m_profileWednesday_.value());
    }

    if (!getDaysOfWeek().getIsWednesday())
    {
        // check constraint
        if (!(getAvgSpeedWednesday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedWednesday!");
        context.getAvgSpeedWednesday().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_avgSpeedWednesday_.value());
    }

    if (getDaysOfWeek().getIsThursday())
    {
        context.getProfileThursday().write<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(out, m_profileThursday_.value());
    }

    if (!getDaysOfWeek().getIsThursday())
    {
        // check constraint
        if (!(getAvgSpeedThursday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedThursday!");
        context.getAvgSpeedThursday().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_avgSpeedThursday_.value());
    }

    if (getDaysOfWeek().getIsFriday())
    {
        context.getProfileFriday().write<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(out, m_profileFriday_.value());
    }

    if (!getDaysOfWeek().getIsFriday())
    {
        // check constraint
        if (!(getAvgSpeedFriday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedFriday!");
        context.getAvgSpeedFriday().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_avgSpeedFriday_.value());
    }

    if (getDaysOfWeek().getIsSaturday())
    {
        context.getProfileSaturday().write<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(out, m_profileSaturday_.value());
    }

    if (!getDaysOfWeek().getIsSaturday())
    {
        // check constraint
        if (!(getAvgSpeedSaturday() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesWeek.avgSpeedSaturday!");
        context.getAvgSpeedSaturday().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_avgSpeedSaturday_.value());
    }
}

::nds::core::conditions::DaysOfWeek SpeedProfilesWeek::readDaysOfWeek(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::conditions::DaysOfWeek(in, allocator);
}
::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readBaseSpeed(::zserio::BitStreamReader& in)
{
    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.baseSpeed!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readBaseSpeed(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if ((getDaysOfWeek().getIsSunday() == true || getDaysOfWeek().getIsMonday() == true || getDaysOfWeek().getIsTuesday() == true || getDaysOfWeek().getIsWednesday() == true || getDaysOfWeek().getIsThursday() == true || getDaysOfWeek().getIsFriday() == true || getDaysOfWeek().getIsSaturday() == true))
    {
        ::nds::core::types::SpeedKmh readField = context.getBaseSpeed().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.baseSpeed!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileSunday(::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsSunday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(static_cast<::nds::routingdata::types::SpeedProfileId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileSunday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsSunday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(context.getProfileSunday().read<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedSunday(::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsSunday())
    {
        ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedSunday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedSunday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsSunday())
    {
        ::nds::core::types::SpeedKmh readField = context.getAvgSpeedSunday().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedSunday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileMonday(::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsMonday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(static_cast<::nds::routingdata::types::SpeedProfileId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileMonday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsMonday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(context.getProfileMonday().read<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedMonday(::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsMonday())
    {
        ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedMonday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedMonday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsMonday())
    {
        ::nds::core::types::SpeedKmh readField = context.getAvgSpeedMonday().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedMonday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileTuesday(::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsTuesday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(static_cast<::nds::routingdata::types::SpeedProfileId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileTuesday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsTuesday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(context.getProfileTuesday().read<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedTuesday(::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsTuesday())
    {
        ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedTuesday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedTuesday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsTuesday())
    {
        ::nds::core::types::SpeedKmh readField = context.getAvgSpeedTuesday().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedTuesday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileWednesday(::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsWednesday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(static_cast<::nds::routingdata::types::SpeedProfileId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileWednesday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsWednesday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(context.getProfileWednesday().read<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedWednesday(::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsWednesday())
    {
        ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedWednesday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedWednesday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsWednesday())
    {
        ::nds::core::types::SpeedKmh readField = context.getAvgSpeedWednesday().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedWednesday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileThursday(::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsThursday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(static_cast<::nds::routingdata::types::SpeedProfileId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileThursday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsThursday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(context.getProfileThursday().read<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedThursday(::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsThursday())
    {
        ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedThursday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedThursday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsThursday())
    {
        ::nds::core::types::SpeedKmh readField = context.getAvgSpeedThursday().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedThursday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileFriday(::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsFriday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(static_cast<::nds::routingdata::types::SpeedProfileId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileFriday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsFriday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(context.getProfileFriday().read<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedFriday(::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsFriday())
    {
        ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedFriday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedFriday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsFriday())
    {
        ::nds::core::types::SpeedKmh readField = context.getAvgSpeedFriday().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedFriday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileSaturday(::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsSaturday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(static_cast<::nds::routingdata::types::SpeedProfileId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId> SpeedProfilesWeek::readProfileSaturday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getDaysOfWeek().getIsSaturday())
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(context.getProfileSaturday().read<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::types::SpeedProfileId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedSaturday(::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsSaturday())
    {
        ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedSaturday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> SpeedProfilesWeek::readAvgSpeedSaturday(SpeedProfilesWeek::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (!getDaysOfWeek().getIsSaturday())
    {
        ::nds::core::types::SpeedKmh readField = context.getAvgSpeedSaturday().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
        // check constraint
        if (!(readField > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesWeek.avgSpeedSaturday!");

        return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh>(::zserio::NullOpt);
}

} // namespace types
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>

#include <nds/routingdata/types/SpeedProfilesDays.h>

namespace nds
{
namespace routingdata
{
namespace types
{

SpeedProfilesDays::SpeedProfilesDays(const allocator_type& allocator) noexcept :
        m_numDays_(uint8_t()),
        m_baseSpeed_(::nds::core::types::SpeedKmh()),
        m_profiles_(allocator)
{
}

SpeedProfilesDays::SpeedProfilesDays(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numDays_(readNumDays(in)),
        m_baseSpeed_(readBaseSpeed(in)),
        m_profiles_(readProfiles(in, allocator))
{
}

SpeedProfilesDays::SpeedProfilesDays(SpeedProfilesDays::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numDays_(readNumDays(context, in)),
        m_baseSpeed_(readBaseSpeed(context, in)),
        m_profiles_(readProfiles(context, in, allocator))
{
}

SpeedProfilesDays::SpeedProfilesDays(::zserio::PropagateAllocatorT,
        const SpeedProfilesDays& other, const allocator_type& allocator) :
        m_numDays_(::zserio::allocatorPropagatingCopy(other.m_numDays_, allocator)),
        m_baseSpeed_(::zserio::allocatorPropagatingCopy(other.m_baseSpeed_, allocator)),
        m_profiles_(::zserio::allocatorPropagatingCopy(other.m_profiles_, allocator))
{
}

uint8_t SpeedProfilesDays::getNumDays() const
{
    return m_numDays_;
}

void SpeedProfilesDays::setNumDays(uint8_t numDays_)
{
    m_numDays_ = numDays_;
}

::nds::core::types::SpeedKmh SpeedProfilesDays::getBaseSpeed() const
{
    return m_baseSpeed_;
}

void SpeedProfilesDays::setBaseSpeed(::nds::core::types::SpeedKmh baseSpeed_)
{
    m_baseSpeed_ = baseSpeed_;
}

::zserio::vector<::nds::routingdata::types::SpeedProfileId>& SpeedProfilesDays::getProfiles()
{
    return m_profiles_.getRawArray();
}

const ::zserio::vector<::nds::routingdata::types::SpeedProfileId>& SpeedProfilesDays::getProfiles() const
{
    return m_profiles_.getRawArray();
}

void SpeedProfilesDays::setProfiles(const ::zserio::vector<::nds::routingdata::types::SpeedProfileId>& profiles_)
{
    m_profiles_ = ZserioArrayType_profiles(profiles_);
}

void SpeedProfilesDays::setProfiles(::zserio::vector<::nds::routingdata::types::SpeedProfileId>&& profiles_)
{
    m_profiles_ = ZserioArrayType_profiles(std::move(profiles_));
}

void SpeedProfilesDays::initPackingContext(SpeedProfilesDays::ZserioPackingContext& context) const
{
    context.getNumDays().init<::zserio::StdIntArrayTraits<uint8_t>>(m_numDays_);
    context.getBaseSpeed().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_baseSpeed_);
}

size_t SpeedProfilesDays::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);
    endBitPosition += m_profiles_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t SpeedProfilesDays::bitSizeOf(SpeedProfilesDays::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumDays().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_numDays_);
    endBitPosition += context.getBaseSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_baseSpeed_);
    endBitPosition += m_profiles_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t SpeedProfilesDays::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += UINT8_C(8);
    endBitPosition = m_profiles_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t SpeedProfilesDays::initializeOffsets(SpeedProfilesDays::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumDays().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_numDays_);
    endBitPosition += context.getBaseSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_baseSpeed_);
    endBitPosition = m_profiles_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool SpeedProfilesDays::operator==(const SpeedProfilesDays& other) const
{
    if (this != &other)
    {
        return
                (m_numDays_ == other.m_numDays_) &&
                (m_baseSpeed_ == other.m_baseSpeed_) &&
                (m_profiles_ == other.m_profiles_);
    }

    return true;
}

uint32_t SpeedProfilesDays::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numDays_);
    result = ::zserio::calcHashCode(result, m_baseSpeed_);
    result = ::zserio::calcHashCode(result, m_profiles_);

    return result;
}

void SpeedProfilesDays::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_numDays_, UINT8_C(8));

    // check constraint
    if (!(getBaseSpeed() > 0))
        throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesDays.baseSpeed!");
    out.writeBits(m_baseSpeed_, UINT8_C(8));

    // check array length
    if (m_profiles_.getRawArray().size() != static_cast<size_t>(getNumDays()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field SpeedProfilesDays.profiles: ") <<
                m_profiles_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDays()) << "!";
    }
    m_profiles_.write(out);
}

void SpeedProfilesDays::write(SpeedProfilesDays::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumDays().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_numDays_);

    // check constraint
    if (!(getBaseSpeed() > 0))
        throw ::zserio::ConstraintException("Write: Constraint violated at SpeedProfilesDays.baseSpeed!");
    context.getBaseSpeed().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_baseSpeed_);

    // check array length
    if (m_profiles_.getRawArray().size() != static_cast<size_t>(getNumDays()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field SpeedProfilesDays.profiles: ") <<
                m_profiles_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDays()) << "!";
    }
    m_profiles_.writePacked(out);
}

uint8_t SpeedProfilesDays::readNumDays(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}

uint8_t SpeedProfilesDays::readNumDays(SpeedProfilesDays::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumDays().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
}
::nds::core::types::SpeedKmh SpeedProfilesDays::readBaseSpeed(::zserio::BitStreamReader& in)
{
    ::nds::core::types::SpeedKmh readField = static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8)));
    // check constraint
    if (!(readField > 0))
        throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesDays.baseSpeed!");

    return readField;
}

::nds::core::types::SpeedKmh SpeedProfilesDays::readBaseSpeed(SpeedProfilesDays::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    ::nds::core::types::SpeedKmh readField = context.getBaseSpeed().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in);
    // check constraint
    if (!(readField > 0))
        throw ::zserio::ConstraintException("Read: Constraint violated at SpeedProfilesDays.baseSpeed!");

    return readField;
}
SpeedProfilesDays::ZserioArrayType_profiles SpeedProfilesDays::readProfiles(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_profiles readField(allocator);
    readField.read(in, static_cast<size_t>(getNumDays()));

    return readField;
}

SpeedProfilesDays::ZserioArrayType_profiles SpeedProfilesDays::readProfiles(SpeedProfilesDays::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_profiles readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumDays()));

    return readField;
}

} // namespace types
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/routingdata/types/SpeedProfile.h>

namespace nds
{
namespace routingdata
{
namespace types
{

SpeedProfile::SpeedProfile(const allocator_type& allocator) noexcept :
        m_id_(::nds::routingdata::types::SpeedProfileId()),
        m_values_(allocator)
{
}

SpeedProfile::SpeedProfile(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_id_(readId(in)),
        m_values_(readValues(in, allocator))
{
}

SpeedProfile::SpeedProfile(SpeedProfile::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_id_(readId(context, in)),
        m_values_(readValues(context, in, allocator))
{
}

SpeedProfile::SpeedProfile(::zserio::PropagateAllocatorT,
        const SpeedProfile& other, const allocator_type& allocator) :
        m_id_(::zserio::allocatorPropagatingCopy(other.m_id_, allocator)),
        m_values_(::zserio::allocatorPropagatingCopy(other.m_values_, allocator))
{
}

::nds::routingdata::types::SpeedProfileId SpeedProfile::getId() const
{
    return m_id_;
}

void SpeedProfile::setId(::nds::routingdata::types::SpeedProfileId id_)
{
    m_id_ = id_;
}

::zserio::vector<uint16_t>& SpeedProfile::getValues()
{
    return m_values_.getRawArray();
}

const ::zserio::vector<uint16_t>& SpeedProfile::getValues() const
{
    return m_values_.getRawArray();
}

void SpeedProfile::setValues(const ::zserio::vector<uint16_t>& values_)
{
    m_values_ = ZserioArrayType_values(values_);
}

void SpeedProfile::setValues(::zserio::vector<uint16_t>&& values_)
{
    m_values_ = ZserioArrayType_values(std::move(values_));
}

void SpeedProfile::initPackingContext(SpeedProfile::ZserioPackingContext& context) const
{
    context.getId().init<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_id_);
}

size_t SpeedProfile::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_id_);
    endBitPosition += m_values_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t SpeedProfile::bitSizeOf(SpeedProfile::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_id_);
    endBitPosition += m_values_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t SpeedProfile::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_id_);
    endBitPosition = m_values_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

size_t SpeedProfile::initializeOffsets(SpeedProfile::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(m_id_);
    endBitPosition = m_values_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool SpeedProfile::operator==(const SpeedProfile& other) const
{
    if (this != &other)
    {
        return
                (m_id_ == other.m_id_) &&
                (m_values_ == other.m_values_);
    }

    return true;
}

uint32_t SpeedProfile::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_id_);
    result = ::zserio::calcHashCode(result, m_values_);

    return result;
}

void SpeedProfile::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_id_);
    m_values_.writePacked(out);
}

void SpeedProfile::write(SpeedProfile::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getId().write<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(out, m_id_);
    m_values_.writePacked(out);
}

::nds::routingdata::types::SpeedProfileId SpeedProfile::readId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::routingdata::types::SpeedProfileId>(in.readVarUInt16());
}

::nds::routingdata::types::SpeedProfileId SpeedProfile::readId(SpeedProfile::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getId().read<::zserio::VarIntNNArrayTraits<::nds::routingdata::types::SpeedProfileId>>(in);
}
SpeedProfile::ZserioArrayType_values SpeedProfile::readValues(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_values readField(allocator);
    readField.readPacked(in);

    return readField;
}

SpeedProfile::ZserioArrayType_values SpeedProfile::readValues(SpeedProfile::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_values readField(allocator);
    readField.readPacked(in);

    return readField;
}

} // namespace types
} // namespace routingdata
} // namespace nds
