/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTINGDATA_TYPES_SPEED_PROFILE_H
#define NDS_ROUTINGDATA_TYPES_SPEED_PROFILE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/routingdata/types/SpeedProfileId.h>

namespace nds
{
namespace routingdata
{
namespace types
{

class SpeedProfile
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

    private:
        ::zserio::DeltaContext m_id_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SpeedProfile() noexcept :
            SpeedProfile(allocator_type())
    {}

    explicit SpeedProfile(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_values = ::zserio::vector<uint16_t>>
    SpeedProfile(
            ::nds::routingdata::types::SpeedProfileId id_,
            ZSERIO_T_values&& values_,
            const allocator_type& allocator = allocator_type()) :
            SpeedProfile(allocator)
    {
        m_id_ = id_;
        m_values_ = ZserioArrayType_values(::std::forward<ZSERIO_T_values>(values_));
    }

    explicit SpeedProfile(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SpeedProfile(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SpeedProfile() = default;

    SpeedProfile(const SpeedProfile&) = default;
    SpeedProfile& operator=(const SpeedProfile&) = default;

    SpeedProfile(SpeedProfile&&) = default;
    SpeedProfile& operator=(SpeedProfile&&) = default;

    SpeedProfile(::zserio::PropagateAllocatorT,
            const SpeedProfile& other, const allocator_type& allocator);

    ::nds::routingdata::types::SpeedProfileId getId() const;
    void setId(::nds::routingdata::types::SpeedProfileId id_);

    const ::zserio::vector<uint16_t>& getValues() const;
    ::zserio::vector<uint16_t>& getValues();
    void setValues(const ::zserio::vector<uint16_t>& values_);
    void setValues(::zserio::vector<uint16_t>&& values_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SpeedProfile& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_values = ::zserio::Array<::zserio::vector<uint16_t>, ::zserio::VarIntNNArrayTraits<uint16_t>, ::zserio::ArrayType::AUTO>;

    ::nds::routingdata::types::SpeedProfileId readId(::zserio::BitStreamReader& in);
    ::nds::routingdata::types::SpeedProfileId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_values readValues(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_values readValues(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::routingdata::types::SpeedProfileId m_id_;
    ZserioArrayType_values m_values_;
};

} // namespace types
} // namespace routingdata
} // namespace nds

#endif // NDS_ROUTINGDATA_TYPES_SPEED_PROFILE_H
