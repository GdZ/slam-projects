/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTINGDATA_ATTRIBUTES_ROUTING_LANE_RANGE_ATTRIBUTE_VALUE_H
#define NDS_ROUTINGDATA_ATTRIBUTES_ROUTING_LANE_RANGE_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/types/Slope.h>
#include <nds/routingdata/attributes/RoutingLaneRangeAttributeType.h>
#include <nds/routingdata/types/ConsumptionSpeedDependencyCurve.h>
#include <nds/routingdata/types/ExcessSlope.h>
#include <nds/routingdata/types/PluralJunction.h>
#include <nds/routingdata/types/SpeedProfilesDays.h>
#include <nds/routingdata/types/SpeedProfilesWeek.h>
#include <nds/routingdata/types/SpeedVariation.h>
#include <nds/routingdata/types/TouristRouteType.h>

namespace nds
{
namespace routingdata
{
namespace attributes
{

class RoutingLaneRangeAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_pluralJunction = 0,
        CHOICE_upExcessSlope = 1,
        CHOICE_downExcessSlope = 2,
        CHOICE_speedVariation = 3,
        CHOICE_consumptionSpeedDependencyCurve = 4,
        CHOICE_averageSlope = 5,
        CHOICE_touristRouteType = 6,
        CHOICE_numTollGates = 7,
        CHOICE_numTrafficLights = 8,
        CHOICE_numGiveRightOfWay = 9,
        CHOICE_numSpeedCameras = 10,
        CHOICE_numSpeedZones = 11,
        CHOICE_numRailwayCrossings = 12,
        CHOICE_numStations = 13,
        CHOICE_speedProfilesWeek = 14,
        CHOICE_speedProfilesDays = 15,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getPluralJunction()
        {
            return m_pluralJunction_;
        }

        ::zserio::DeltaContext& getUpExcessSlope()
        {
            return m_upExcessSlope_;
        }

        ::zserio::DeltaContext& getDownExcessSlope()
        {
            return m_downExcessSlope_;
        }

        ::zserio::DeltaContext& getSpeedVariation()
        {
            return m_speedVariation_;
        }

        ::nds::routingdata::types::ConsumptionSpeedDependencyCurve::ZserioPackingContext& getConsumptionSpeedDependencyCurve()
        {
            return m_consumptionSpeedDependencyCurve_;
        }

        ::zserio::DeltaContext& getAverageSlope()
        {
            return m_averageSlope_;
        }

        ::zserio::DeltaContext& getTouristRouteType()
        {
            return m_touristRouteType_;
        }

        ::zserio::DeltaContext& getNumTollGates()
        {
            return m_numTollGates_;
        }

        ::zserio::DeltaContext& getNumTrafficLights()
        {
            return m_numTrafficLights_;
        }

        ::zserio::DeltaContext& getNumGiveRightOfWay()
        {
            return m_numGiveRightOfWay_;
        }

        ::zserio::DeltaContext& getNumSpeedCameras()
        {
            return m_numSpeedCameras_;
        }

        ::zserio::DeltaContext& getNumSpeedZones()
        {
            return m_numSpeedZones_;
        }

        ::zserio::DeltaContext& getNumRailwayCrossings()
        {
            return m_numRailwayCrossings_;
        }

        ::zserio::DeltaContext& getNumStations()
        {
            return m_numStations_;
        }

        ::nds::routingdata::types::SpeedProfilesWeek::ZserioPackingContext& getSpeedProfilesWeek()
        {
            return m_speedProfilesWeek_;
        }

        ::nds::routingdata::types::SpeedProfilesDays::ZserioPackingContext& getSpeedProfilesDays()
        {
            return m_speedProfilesDays_;
        }

    private:
        ::zserio::DeltaContext m_pluralJunction_;
        ::zserio::DeltaContext m_upExcessSlope_;
        ::zserio::DeltaContext m_downExcessSlope_;
        ::zserio::DeltaContext m_speedVariation_;
        ::nds::routingdata::types::ConsumptionSpeedDependencyCurve::ZserioPackingContext m_consumptionSpeedDependencyCurve_;
        ::zserio::DeltaContext m_averageSlope_;
        ::zserio::DeltaContext m_touristRouteType_;
        ::zserio::DeltaContext m_numTollGates_;
        ::zserio::DeltaContext m_numTrafficLights_;
        ::zserio::DeltaContext m_numGiveRightOfWay_;
        ::zserio::DeltaContext m_numSpeedCameras_;
        ::zserio::DeltaContext m_numSpeedZones_;
        ::zserio::DeltaContext m_numRailwayCrossings_;
        ::zserio::DeltaContext m_numStations_;
        ::nds::routingdata::types::SpeedProfilesWeek::ZserioPackingContext m_speedProfilesWeek_;
        ::nds::routingdata::types::SpeedProfilesDays::ZserioPackingContext m_speedProfilesDays_;
    };

    RoutingLaneRangeAttributeValue() noexcept :
            RoutingLaneRangeAttributeValue(allocator_type())
    {}

    explicit RoutingLaneRangeAttributeValue(const allocator_type& allocator) noexcept;

    explicit RoutingLaneRangeAttributeValue(::zserio::BitStreamReader& in,
            ::nds::routingdata::attributes::RoutingLaneRangeAttributeType type_, const allocator_type& allocator = allocator_type());
    explicit RoutingLaneRangeAttributeValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::routingdata::attributes::RoutingLaneRangeAttributeType type_, const allocator_type& allocator = allocator_type());

    ~RoutingLaneRangeAttributeValue() = default;

    RoutingLaneRangeAttributeValue(const RoutingLaneRangeAttributeValue& other);
    RoutingLaneRangeAttributeValue& operator=(const RoutingLaneRangeAttributeValue& other);

    RoutingLaneRangeAttributeValue(RoutingLaneRangeAttributeValue&& other);
    RoutingLaneRangeAttributeValue& operator=(RoutingLaneRangeAttributeValue&& other);

    RoutingLaneRangeAttributeValue(::zserio::PropagateAllocatorT,
            const RoutingLaneRangeAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::routingdata::attributes::RoutingLaneRangeAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::routingdata::attributes::RoutingLaneRangeAttributeType getType() const;

    ::nds::routingdata::types::PluralJunction getPluralJunction() const;
    void setPluralJunction(::nds::routingdata::types::PluralJunction pluralJunction_);

    ::nds::routingdata::types::ExcessSlope getUpExcessSlope() const;
    void setUpExcessSlope(::nds::routingdata::types::ExcessSlope upExcessSlope_);

    ::nds::routingdata::types::ExcessSlope getDownExcessSlope() const;
    void setDownExcessSlope(::nds::routingdata::types::ExcessSlope downExcessSlope_);

    ::nds::routingdata::types::SpeedVariation getSpeedVariation() const;
    void setSpeedVariation(::nds::routingdata::types::SpeedVariation speedVariation_);

    const ::nds::routingdata::types::ConsumptionSpeedDependencyCurve& getConsumptionSpeedDependencyCurve() const;
    ::nds::routingdata::types::ConsumptionSpeedDependencyCurve& getConsumptionSpeedDependencyCurve();
    void setConsumptionSpeedDependencyCurve(const ::nds::routingdata::types::ConsumptionSpeedDependencyCurve& consumptionSpeedDependencyCurve_);
    void setConsumptionSpeedDependencyCurve(::nds::routingdata::types::ConsumptionSpeedDependencyCurve&& consumptionSpeedDependencyCurve_);

    ::nds::core::types::Slope getAverageSlope() const;
    void setAverageSlope(::nds::core::types::Slope averageSlope_);

    ::nds::routingdata::types::TouristRouteType getTouristRouteType() const;
    void setTouristRouteType(::nds::routingdata::types::TouristRouteType touristRouteType_);

    uint16_t getNumTollGates() const;
    void setNumTollGates(uint16_t numTollGates_);

    uint16_t getNumTrafficLights() const;
    void setNumTrafficLights(uint16_t numTrafficLights_);

    uint16_t getNumGiveRightOfWay() const;
    void setNumGiveRightOfWay(uint16_t numGiveRightOfWay_);

    uint16_t getNumSpeedCameras() const;
    void setNumSpeedCameras(uint16_t numSpeedCameras_);

    uint16_t getNumSpeedZones() const;
    void setNumSpeedZones(uint16_t numSpeedZones_);

    uint16_t getNumRailwayCrossings() const;
    void setNumRailwayCrossings(uint16_t numRailwayCrossings_);

    uint16_t getNumStations() const;
    void setNumStations(uint16_t numStations_);

    const ::nds::routingdata::types::SpeedProfilesWeek& getSpeedProfilesWeek() const;
    ::nds::routingdata::types::SpeedProfilesWeek& getSpeedProfilesWeek();
    void setSpeedProfilesWeek(const ::nds::routingdata::types::SpeedProfilesWeek& speedProfilesWeek_);
    void setSpeedProfilesWeek(::nds::routingdata::types::SpeedProfilesWeek&& speedProfilesWeek_);

    const ::nds::routingdata::types::SpeedProfilesDays& getSpeedProfilesDays() const;
    ::nds::routingdata::types::SpeedProfilesDays& getSpeedProfilesDays();
    void setSpeedProfilesDays(const ::nds::routingdata::types::SpeedProfilesDays& speedProfilesDays_);
    void setSpeedProfilesDays(::nds::routingdata::types::SpeedProfilesDays&& speedProfilesDays_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoutingLaneRangeAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::routingdata::attributes::RoutingLaneRangeAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace routingdata
} // namespace nds

#endif // NDS_ROUTINGDATA_ATTRIBUTES_ROUTING_LANE_RANGE_ATTRIBUTE_VALUE_H
