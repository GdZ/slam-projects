/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/attributes/RoutingRoadRangeAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for RoutingRoadRangeAttributeType enumeration.
constexpr ::std::array<const char*, 18> EnumTraits<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::names;
constexpr ::std::array<::nds::routingdata::attributes::RoutingRoadRangeAttributeType, 18> EnumTraits<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::values;
constexpr const char* EnumTraits<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    switch (value)
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        return 0;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return 1;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return 2;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return 3;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return 4;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return 5;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        return 6;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        return 7;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return 8;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return 9;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        return 10;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        return 11;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return 12;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        return 13;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        return 14;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        return 15;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        return 16;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        return 17;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration RoutingRoadRangeAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::routingdata::attributes::RoutingRoadRangeAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
        return static_cast<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration RoutingRoadRangeAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>(::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::routingdata::attributes::RoutingRoadRangeAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::routingdata::attributes::RoutingRoadRangeAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::routingdata::attributes::RoutingRoadRangeAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadRangeAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/attributes/RoutingRoadTransitionAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for RoutingRoadTransitionAttributeType enumeration.
constexpr ::std::array<const char*, 3> EnumTraits<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::names;
constexpr ::std::array<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType, 3> EnumTraits<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::values;
constexpr const char* EnumTraits<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    switch (value)
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return 0;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return 1;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        return 2;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration RoutingRoadTransitionAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::routingdata::attributes::RoutingRoadTransitionAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
        return static_cast<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration RoutingRoadTransitionAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>(::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::routingdata::attributes::RoutingRoadTransitionAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::routingdata::attributes::RoutingRoadTransitionAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingRoadTransitionAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/attributes/RoutingLaneRangeAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for RoutingLaneRangeAttributeType enumeration.
constexpr ::std::array<const char*, 16> EnumTraits<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::names;
constexpr ::std::array<::nds::routingdata::attributes::RoutingLaneRangeAttributeType, 16> EnumTraits<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::values;
constexpr const char* EnumTraits<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    switch (value)
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        return 0;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return 1;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return 2;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return 3;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return 4;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return 5;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        return 6;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        return 7;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return 8;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return 9;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        return 10;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        return 11;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return 12;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        return 13;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        return 14;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        return 15;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration RoutingLaneRangeAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::routingdata::attributes::RoutingLaneRangeAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
        return static_cast<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration RoutingLaneRangeAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>(::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::routingdata::attributes::RoutingLaneRangeAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::routingdata::attributes::RoutingLaneRangeAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::routingdata::attributes::RoutingLaneRangeAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneRangeAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/routingdata/attributes/RoutingLaneTransitionAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for RoutingLaneTransitionAttributeType enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::names;
constexpr ::std::array<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType, 4> EnumTraits<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::values;
constexpr const char* EnumTraits<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    switch (value)
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return 0;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return 1;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        return 2;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration RoutingLaneTransitionAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::routingdata::attributes::RoutingLaneTransitionAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
        return static_cast<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration RoutingLaneTransitionAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>(::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::routingdata::attributes::RoutingLaneTransitionAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::routingdata::attributes::RoutingLaneTransitionAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::routingdata::attributes::RoutingLaneTransitionAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/routingdata/attributes/RoutingRoadRangeAttributeValue.h>

namespace nds
{
namespace routingdata
{
namespace attributes
{

RoutingRoadRangeAttributeValue::RoutingRoadRangeAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

RoutingRoadRangeAttributeValue::RoutingRoadRangeAttributeValue(::zserio::BitStreamReader& in,
        ::nds::routingdata::attributes::RoutingRoadRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

RoutingRoadRangeAttributeValue::RoutingRoadRangeAttributeValue(RoutingRoadRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::routingdata::attributes::RoutingRoadRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

RoutingRoadRangeAttributeValue::RoutingRoadRangeAttributeValue(const RoutingRoadRangeAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

RoutingRoadRangeAttributeValue& RoutingRoadRangeAttributeValue::operator=(const RoutingRoadRangeAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

RoutingRoadRangeAttributeValue::RoutingRoadRangeAttributeValue(RoutingRoadRangeAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

RoutingRoadRangeAttributeValue& RoutingRoadRangeAttributeValue::operator=(RoutingRoadRangeAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

RoutingRoadRangeAttributeValue::RoutingRoadRangeAttributeValue(::zserio::PropagateAllocatorT,
        const RoutingRoadRangeAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void RoutingRoadRangeAttributeValue::initialize(
        ::nds::routingdata::attributes::RoutingRoadRangeAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool RoutingRoadRangeAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::routingdata::attributes::RoutingRoadRangeAttributeType RoutingRoadRangeAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'RoutingRoadRangeAttributeValue' is not initialized!");

    return m_type_;
}

::nds::routingdata::types::PluralJunction RoutingRoadRangeAttributeValue::getPluralJunction() const
{
    return m_objectChoice.get<::nds::routingdata::types::PluralJunction>();
}

void RoutingRoadRangeAttributeValue::setPluralJunction(::nds::routingdata::types::PluralJunction pluralJunction_)
{
    m_objectChoice = pluralJunction_;
}

::nds::routingdata::types::ExcessSlope RoutingRoadRangeAttributeValue::getUpExcessSlope() const
{
    return m_objectChoice.get<::nds::routingdata::types::ExcessSlope>();
}

void RoutingRoadRangeAttributeValue::setUpExcessSlope(::nds::routingdata::types::ExcessSlope upExcessSlope_)
{
    m_objectChoice = upExcessSlope_;
}

::nds::routingdata::types::ExcessSlope RoutingRoadRangeAttributeValue::getDownExcessSlope() const
{
    return m_objectChoice.get<::nds::routingdata::types::ExcessSlope>();
}

void RoutingRoadRangeAttributeValue::setDownExcessSlope(::nds::routingdata::types::ExcessSlope downExcessSlope_)
{
    m_objectChoice = downExcessSlope_;
}

::nds::routingdata::types::SpeedVariation RoutingRoadRangeAttributeValue::getSpeedVariation() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedVariation>();
}

void RoutingRoadRangeAttributeValue::setSpeedVariation(::nds::routingdata::types::SpeedVariation speedVariation_)
{
    m_objectChoice = speedVariation_;
}

::nds::routingdata::types::ConsumptionSpeedDependencyCurve& RoutingRoadRangeAttributeValue::getConsumptionSpeedDependencyCurve()
{
    return m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>();
}

const ::nds::routingdata::types::ConsumptionSpeedDependencyCurve& RoutingRoadRangeAttributeValue::getConsumptionSpeedDependencyCurve() const
{
    return m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>();
}

void RoutingRoadRangeAttributeValue::setConsumptionSpeedDependencyCurve(const ::nds::routingdata::types::ConsumptionSpeedDependencyCurve& consumptionSpeedDependencyCurve_)
{
    m_objectChoice = consumptionSpeedDependencyCurve_;
}

void RoutingRoadRangeAttributeValue::setConsumptionSpeedDependencyCurve(::nds::routingdata::types::ConsumptionSpeedDependencyCurve&& consumptionSpeedDependencyCurve_)
{
    m_objectChoice = ::std::move(consumptionSpeedDependencyCurve_);
}

::nds::core::types::Slope RoutingRoadRangeAttributeValue::getAverageSlope() const
{
    return m_objectChoice.get<::nds::core::types::Slope>();
}

void RoutingRoadRangeAttributeValue::setAverageSlope(::nds::core::types::Slope averageSlope_)
{
    m_objectChoice = averageSlope_;
}

::nds::routingdata::types::TouristRouteType RoutingRoadRangeAttributeValue::getTouristRouteType() const
{
    return m_objectChoice.get<::nds::routingdata::types::TouristRouteType>();
}

void RoutingRoadRangeAttributeValue::setTouristRouteType(::nds::routingdata::types::TouristRouteType touristRouteType_)
{
    m_objectChoice = touristRouteType_;
}

uint16_t RoutingRoadRangeAttributeValue::getNumTollGates() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingRoadRangeAttributeValue::setNumTollGates(uint16_t numTollGates_)
{
    m_objectChoice = numTollGates_;
}

uint16_t RoutingRoadRangeAttributeValue::getNumTrafficLights() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingRoadRangeAttributeValue::setNumTrafficLights(uint16_t numTrafficLights_)
{
    m_objectChoice = numTrafficLights_;
}

uint16_t RoutingRoadRangeAttributeValue::getNumGiveRightOfWay() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingRoadRangeAttributeValue::setNumGiveRightOfWay(uint16_t numGiveRightOfWay_)
{
    m_objectChoice = numGiveRightOfWay_;
}

uint16_t RoutingRoadRangeAttributeValue::getNumSpeedCameras() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingRoadRangeAttributeValue::setNumSpeedCameras(uint16_t numSpeedCameras_)
{
    m_objectChoice = numSpeedCameras_;
}

uint16_t RoutingRoadRangeAttributeValue::getNumSpeedZones() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingRoadRangeAttributeValue::setNumSpeedZones(uint16_t numSpeedZones_)
{
    m_objectChoice = numSpeedZones_;
}

uint16_t RoutingRoadRangeAttributeValue::getNumRailwayCrossings() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingRoadRangeAttributeValue::setNumRailwayCrossings(uint16_t numRailwayCrossings_)
{
    m_objectChoice = numRailwayCrossings_;
}

uint16_t RoutingRoadRangeAttributeValue::getNumStations() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingRoadRangeAttributeValue::setNumStations(uint16_t numStations_)
{
    m_objectChoice = numStations_;
}

::nds::routingdata::types::SpeedProfilesWeek& RoutingRoadRangeAttributeValue::getSpeedProfilesWeek()
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>();
}

const ::nds::routingdata::types::SpeedProfilesWeek& RoutingRoadRangeAttributeValue::getSpeedProfilesWeek() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>();
}

void RoutingRoadRangeAttributeValue::setSpeedProfilesWeek(const ::nds::routingdata::types::SpeedProfilesWeek& speedProfilesWeek_)
{
    m_objectChoice = speedProfilesWeek_;
}

void RoutingRoadRangeAttributeValue::setSpeedProfilesWeek(::nds::routingdata::types::SpeedProfilesWeek&& speedProfilesWeek_)
{
    m_objectChoice = ::std::move(speedProfilesWeek_);
}

::nds::routingdata::types::SpeedProfilesDays& RoutingRoadRangeAttributeValue::getSpeedProfilesDays()
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>();
}

const ::nds::routingdata::types::SpeedProfilesDays& RoutingRoadRangeAttributeValue::getSpeedProfilesDays() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>();
}

void RoutingRoadRangeAttributeValue::setSpeedProfilesDays(const ::nds::routingdata::types::SpeedProfilesDays& speedProfilesDays_)
{
    m_objectChoice = speedProfilesDays_;
}

void RoutingRoadRangeAttributeValue::setSpeedProfilesDays(::nds::routingdata::types::SpeedProfilesDays&& speedProfilesDays_)
{
    m_objectChoice = ::std::move(speedProfilesDays_);
}

uint8_t RoutingRoadRangeAttributeValue::getNumNormalLanes() const
{
    return m_objectChoice.get<uint8_t>();
}

void RoutingRoadRangeAttributeValue::setNumNormalLanes(uint8_t numNormalLanes_)
{
    m_objectChoice = numNormalLanes_;
}

uint8_t RoutingRoadRangeAttributeValue::getNumEntryExitLanes() const
{
    return m_objectChoice.get<uint8_t>();
}

void RoutingRoadRangeAttributeValue::setNumEntryExitLanes(uint8_t numEntryExitLanes_)
{
    m_objectChoice = numEntryExitLanes_;
}

RoutingRoadRangeAttributeValue::ChoiceTag RoutingRoadRangeAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        return CHOICE_pluralJunction;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return CHOICE_upExcessSlope;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return CHOICE_downExcessSlope;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return CHOICE_speedVariation;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return CHOICE_consumptionSpeedDependencyCurve;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return CHOICE_averageSlope;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        return CHOICE_touristRouteType;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        return CHOICE_numTollGates;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return CHOICE_numTrafficLights;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return CHOICE_numGiveRightOfWay;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        return CHOICE_numSpeedCameras;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        return CHOICE_numSpeedZones;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return CHOICE_numRailwayCrossings;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        return CHOICE_numStations;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        return CHOICE_speedProfilesWeek;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        return CHOICE_speedProfilesDays;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        return CHOICE_numNormalLanes;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        return CHOICE_numEntryExitLanes;
    default:
        return UNDEFINED_CHOICE;
    }
}

void RoutingRoadRangeAttributeValue::initPackingContext(RoutingRoadRangeAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        ::zserio::initPackingContext(context.getPluralJunction(), m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        context.getUpExcessSlope().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        context.getDownExcessSlope().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        context.getSpeedVariation().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().initPackingContext(context.getConsumptionSpeedDependencyCurve());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        context.getAverageSlope().init<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(m_objectChoice.get<::nds::core::types::Slope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        ::zserio::initPackingContext(context.getTouristRouteType(), m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        context.getNumTollGates().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        context.getNumTrafficLights().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        context.getNumGiveRightOfWay().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        context.getNumSpeedCameras().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        context.getNumSpeedZones().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        context.getNumRailwayCrossings().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        context.getNumStations().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().initPackingContext(context.getSpeedProfilesWeek());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().initPackingContext(context.getSpeedProfilesDays());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        context.getNumNormalLanes().init<::zserio::StdIntArrayTraits<uint8_t>>(m_objectChoice.get<uint8_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        context.getNumEntryExitLanes().init<::zserio::StdIntArrayTraits<uint8_t>>(m_objectChoice.get<uint8_t>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }
}

size_t RoutingRoadRangeAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().bitSizeOf(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().bitSizeOf(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().bitSizeOf(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        endBitPosition += UINT8_C(8);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t RoutingRoadRangeAttributeValue::bitSizeOf(RoutingRoadRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        endBitPosition += ::zserio::bitSizeOf(context.getPluralJunction(), m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        endBitPosition += context.getUpExcessSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        endBitPosition += context.getDownExcessSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += context.getSpeedVariation().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().bitSizeOf(context.getConsumptionSpeedDependencyCurve(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        endBitPosition += context.getAverageSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(m_objectChoice.get<::nds::core::types::Slope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getTouristRouteType(), m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        endBitPosition += context.getNumTollGates().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        endBitPosition += context.getNumTrafficLights().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        endBitPosition += context.getNumGiveRightOfWay().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        endBitPosition += context.getNumSpeedCameras().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        endBitPosition += context.getNumSpeedZones().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        endBitPosition += context.getNumRailwayCrossings().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        endBitPosition += context.getNumStations().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().bitSizeOf(context.getSpeedProfilesWeek(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().bitSizeOf(context.getSpeedProfilesDays(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        endBitPosition += context.getNumNormalLanes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_objectChoice.get<uint8_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        endBitPosition += context.getNumEntryExitLanes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_objectChoice.get<uint8_t>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t RoutingRoadRangeAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().initializeOffsets(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().initializeOffsets(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().initializeOffsets(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        endBitPosition += UINT8_C(8);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }

    return endBitPosition;
}

size_t RoutingRoadRangeAttributeValue::initializeOffsets(RoutingRoadRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        endBitPosition = ::zserio::initializeOffsets(context.getPluralJunction(), endBitPosition,
        m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        endBitPosition += context.getUpExcessSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        endBitPosition += context.getDownExcessSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += context.getSpeedVariation().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().initializeOffsets(context.getConsumptionSpeedDependencyCurve(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        endBitPosition += context.getAverageSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(m_objectChoice.get<::nds::core::types::Slope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getTouristRouteType(), endBitPosition,
        m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        endBitPosition += context.getNumTollGates().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        endBitPosition += context.getNumTrafficLights().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        endBitPosition += context.getNumGiveRightOfWay().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        endBitPosition += context.getNumSpeedCameras().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        endBitPosition += context.getNumSpeedZones().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        endBitPosition += context.getNumRailwayCrossings().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        endBitPosition += context.getNumStations().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().initializeOffsets(context.getSpeedProfilesWeek(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().initializeOffsets(context.getSpeedProfilesDays(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        endBitPosition += context.getNumNormalLanes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_objectChoice.get<uint8_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        endBitPosition += context.getNumEntryExitLanes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_objectChoice.get<uint8_t>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }

    return endBitPosition;
}

bool RoutingRoadRangeAttributeValue::operator==(const RoutingRoadRangeAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::PluralJunction>() == other.m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::ExcessSlope>() == other.m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::ExcessSlope>() == other.m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpeedVariation>() == other.m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>() == other.m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Slope>() == other.m_objectChoice.get<::nds::core::types::Slope>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::TouristRouteType>() == other.m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>() == other.m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>() == other.m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint8_t>() == other.m_objectChoice.get<uint8_t>());
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint8_t>() == other.m_objectChoice.get<uint8_t>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }
}

uint32_t RoutingRoadRangeAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Slope>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint8_t>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint8_t>());
            break;
        default:
            break;
        }
    }

    return result;
}

void RoutingRoadRangeAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        ::zserio::write(out, m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().write(out);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        out.writeSignedBits(m_objectChoice.get<::nds::core::types::Slope>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().write(out);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().write(out);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        out.writeBits(m_objectChoice.get<uint8_t>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        out.writeBits(m_objectChoice.get<uint8_t>(), UINT8_C(8));
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }
}

void RoutingRoadRangeAttributeValue::write(RoutingRoadRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        ::zserio::write(context.getPluralJunction(), out, m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        context.getUpExcessSlope().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(out, m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        context.getDownExcessSlope().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(out, m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        context.getSpeedVariation().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(out, m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().write(context.getConsumptionSpeedDependencyCurve(), out);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        context.getAverageSlope().write<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(out, m_objectChoice.get<::nds::core::types::Slope>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        ::zserio::write(context.getTouristRouteType(), out, m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        context.getNumTollGates().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        context.getNumTrafficLights().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        context.getNumGiveRightOfWay().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        context.getNumSpeedCameras().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        context.getNumSpeedZones().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        context.getNumRailwayCrossings().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        context.getNumStations().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().write(context.getSpeedProfilesWeek(), out);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().write(context.getSpeedProfilesDays(), out);
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        context.getNumNormalLanes().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_objectChoice.get<uint8_t>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        context.getNumEntryExitLanes().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_objectChoice.get<uint8_t>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingRoadRangeAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::PluralJunction>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::ExcessSlope>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::ExcessSlope>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::SpeedVariation>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::ConsumptionSpeedDependencyCurve(in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Slope>(in.readSignedBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::TouristRouteType>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::SpeedProfilesWeek(in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::SpeedProfilesDays(in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        return ::zserio::AnyHolder<>(static_cast<uint8_t>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        return ::zserio::AnyHolder<>(static_cast<uint8_t>(in.readBits(UINT8_C(8))), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingRoadRangeAttributeValue::readObject(RoutingRoadRangeAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::PluralJunction>(context.getPluralJunction(), in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return ::zserio::AnyHolder<>(context.getUpExcessSlope().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return ::zserio::AnyHolder<>(context.getDownExcessSlope().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::AnyHolder<>(context.getSpeedVariation().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::ConsumptionSpeedDependencyCurve(context.getConsumptionSpeedDependencyCurve(), in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return ::zserio::AnyHolder<>(context.getAverageSlope().read<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::TouristRouteType>(context.getTouristRouteType(), in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        return ::zserio::AnyHolder<>(context.getNumTollGates().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return ::zserio::AnyHolder<>(context.getNumTrafficLights().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return ::zserio::AnyHolder<>(context.getNumGiveRightOfWay().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        return ::zserio::AnyHolder<>(context.getNumSpeedCameras().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        return ::zserio::AnyHolder<>(context.getNumSpeedZones().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return ::zserio::AnyHolder<>(context.getNumRailwayCrossings().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        return ::zserio::AnyHolder<>(context.getNumStations().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::SpeedProfilesWeek(context.getSpeedProfilesWeek(), in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::SpeedProfilesDays(context.getSpeedProfilesDays(), in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        return ::zserio::AnyHolder<>(context.getNumNormalLanes().read<::zserio::StdIntArrayTraits<uint8_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        return ::zserio::AnyHolder<>(context.getNumEntryExitLanes().read<::zserio::StdIntArrayTraits<uint8_t>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingRoadRangeAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::PLURAL_JUNCTION:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::PluralJunction>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::ExcessSlope>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::ExcessSlope>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpeedVariation>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Slope>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::TOURIST_ROUTE_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::TouristRouteType>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TOLL_GATES:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_CAMERAS:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_SPEED_ZONES:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_STATIONS:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_WEEK:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpeedProfilesWeek>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::SPEED_PROFILES_DAYS:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpeedProfilesDays>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_NORMAL_LANES:
        return ::zserio::allocatorPropagatingCopy<uint8_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadRangeAttributeType::NUM_ENTRY_EXIT_LANES:
        return ::zserio::allocatorPropagatingCopy<uint8_t>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadRangeAttributeValue!");
    }
}

} // namespace attributes
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/routingdata/attributes/RoutingRoadTransitionAttributeValue.h>

namespace nds
{
namespace routingdata
{
namespace attributes
{

RoutingRoadTransitionAttributeValue::RoutingRoadTransitionAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

RoutingRoadTransitionAttributeValue::RoutingRoadTransitionAttributeValue(::zserio::BitStreamReader& in,
        ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

RoutingRoadTransitionAttributeValue::RoutingRoadTransitionAttributeValue(RoutingRoadTransitionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

RoutingRoadTransitionAttributeValue::RoutingRoadTransitionAttributeValue(const RoutingRoadTransitionAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

RoutingRoadTransitionAttributeValue& RoutingRoadTransitionAttributeValue::operator=(const RoutingRoadTransitionAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

RoutingRoadTransitionAttributeValue::RoutingRoadTransitionAttributeValue(RoutingRoadTransitionAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

RoutingRoadTransitionAttributeValue& RoutingRoadTransitionAttributeValue::operator=(RoutingRoadTransitionAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

RoutingRoadTransitionAttributeValue::RoutingRoadTransitionAttributeValue(::zserio::PropagateAllocatorT,
        const RoutingRoadTransitionAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void RoutingRoadTransitionAttributeValue::initialize(
        ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool RoutingRoadTransitionAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::routingdata::attributes::RoutingRoadTransitionAttributeType RoutingRoadTransitionAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'RoutingRoadTransitionAttributeValue' is not initialized!");

    return m_type_;
}

::nds::routingdata::types::SpecialTransitionCode RoutingRoadTransitionAttributeValue::getSpecialTransitionCode() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>();
}

void RoutingRoadTransitionAttributeValue::setSpecialTransitionCode(::nds::routingdata::types::SpecialTransitionCode specialTransitionCode_)
{
    m_objectChoice = specialTransitionCode_;
}

::nds::routingdata::types::SpeedVariation RoutingRoadTransitionAttributeValue::getSpeedVariation() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedVariation>();
}

void RoutingRoadTransitionAttributeValue::setSpeedVariation(::nds::routingdata::types::SpeedVariation speedVariation_)
{
    m_objectChoice = speedVariation_;
}

::nds::core::types::Seconds RoutingRoadTransitionAttributeValue::getTransitionDuration() const
{
    return m_objectChoice.get<::nds::core::types::Seconds>();
}

void RoutingRoadTransitionAttributeValue::setTransitionDuration(::nds::core::types::Seconds TransitionDuration_)
{
    m_objectChoice = TransitionDuration_;
}

RoutingRoadTransitionAttributeValue::ChoiceTag RoutingRoadTransitionAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return CHOICE_specialTransitionCode;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return CHOICE_speedVariation;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        return CHOICE_TransitionDuration;
    default:
        return UNDEFINED_CHOICE;
    }
}

void RoutingRoadTransitionAttributeValue::initPackingContext(RoutingRoadTransitionAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        ::zserio::initPackingContext(context.getSpecialTransitionCode(), m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        context.getSpeedVariation().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        context.getTransitionDuration().init<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }
}

size_t RoutingRoadTransitionAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t RoutingRoadTransitionAttributeValue::bitSizeOf(RoutingRoadTransitionAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        endBitPosition += ::zserio::bitSizeOf(context.getSpecialTransitionCode(), m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += context.getSpeedVariation().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        endBitPosition += context.getTransitionDuration().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t RoutingRoadTransitionAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }

    return endBitPosition;
}

size_t RoutingRoadTransitionAttributeValue::initializeOffsets(RoutingRoadTransitionAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        endBitPosition = ::zserio::initializeOffsets(context.getSpecialTransitionCode(), endBitPosition,
        m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += context.getSpeedVariation().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        endBitPosition += context.getTransitionDuration().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }

    return endBitPosition;
}

bool RoutingRoadTransitionAttributeValue::operator==(const RoutingRoadTransitionAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>() == other.m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpeedVariation>() == other.m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Seconds>() == other.m_objectChoice.get<::nds::core::types::Seconds>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }
}

uint32_t RoutingRoadTransitionAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
            break;
        case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Seconds>());
            break;
        default:
            break;
        }
    }

    return result;
}

void RoutingRoadTransitionAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        ::zserio::write(out, m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        out.writeVarUInt(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }
}

void RoutingRoadTransitionAttributeValue::write(RoutingRoadTransitionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        ::zserio::write(context.getSpecialTransitionCode(), out, m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        context.getSpeedVariation().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(out, m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        context.getTransitionDuration().write<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(out, m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingRoadTransitionAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::SpecialTransitionCode>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::SpeedVariation>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Seconds>(in.readVarUInt()), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingRoadTransitionAttributeValue::readObject(RoutingRoadTransitionAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::SpecialTransitionCode>(context.getSpecialTransitionCode(), in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::AnyHolder<>(context.getSpeedVariation().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        return ::zserio::AnyHolder<>(context.getTransitionDuration().read<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingRoadTransitionAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpecialTransitionCode>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpeedVariation>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingRoadTransitionAttributeType::TRANSITION_DURATION:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Seconds>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!");
    }
}

} // namespace attributes
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/routingdata/attributes/RoutingLaneRangeAttributeValue.h>

namespace nds
{
namespace routingdata
{
namespace attributes
{

RoutingLaneRangeAttributeValue::RoutingLaneRangeAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

RoutingLaneRangeAttributeValue::RoutingLaneRangeAttributeValue(::zserio::BitStreamReader& in,
        ::nds::routingdata::attributes::RoutingLaneRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

RoutingLaneRangeAttributeValue::RoutingLaneRangeAttributeValue(RoutingLaneRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::routingdata::attributes::RoutingLaneRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

RoutingLaneRangeAttributeValue::RoutingLaneRangeAttributeValue(const RoutingLaneRangeAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

RoutingLaneRangeAttributeValue& RoutingLaneRangeAttributeValue::operator=(const RoutingLaneRangeAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

RoutingLaneRangeAttributeValue::RoutingLaneRangeAttributeValue(RoutingLaneRangeAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

RoutingLaneRangeAttributeValue& RoutingLaneRangeAttributeValue::operator=(RoutingLaneRangeAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

RoutingLaneRangeAttributeValue::RoutingLaneRangeAttributeValue(::zserio::PropagateAllocatorT,
        const RoutingLaneRangeAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void RoutingLaneRangeAttributeValue::initialize(
        ::nds::routingdata::attributes::RoutingLaneRangeAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool RoutingLaneRangeAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::routingdata::attributes::RoutingLaneRangeAttributeType RoutingLaneRangeAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'RoutingLaneRangeAttributeValue' is not initialized!");

    return m_type_;
}

::nds::routingdata::types::PluralJunction RoutingLaneRangeAttributeValue::getPluralJunction() const
{
    return m_objectChoice.get<::nds::routingdata::types::PluralJunction>();
}

void RoutingLaneRangeAttributeValue::setPluralJunction(::nds::routingdata::types::PluralJunction pluralJunction_)
{
    m_objectChoice = pluralJunction_;
}

::nds::routingdata::types::ExcessSlope RoutingLaneRangeAttributeValue::getUpExcessSlope() const
{
    return m_objectChoice.get<::nds::routingdata::types::ExcessSlope>();
}

void RoutingLaneRangeAttributeValue::setUpExcessSlope(::nds::routingdata::types::ExcessSlope upExcessSlope_)
{
    m_objectChoice = upExcessSlope_;
}

::nds::routingdata::types::ExcessSlope RoutingLaneRangeAttributeValue::getDownExcessSlope() const
{
    return m_objectChoice.get<::nds::routingdata::types::ExcessSlope>();
}

void RoutingLaneRangeAttributeValue::setDownExcessSlope(::nds::routingdata::types::ExcessSlope downExcessSlope_)
{
    m_objectChoice = downExcessSlope_;
}

::nds::routingdata::types::SpeedVariation RoutingLaneRangeAttributeValue::getSpeedVariation() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedVariation>();
}

void RoutingLaneRangeAttributeValue::setSpeedVariation(::nds::routingdata::types::SpeedVariation speedVariation_)
{
    m_objectChoice = speedVariation_;
}

::nds::routingdata::types::ConsumptionSpeedDependencyCurve& RoutingLaneRangeAttributeValue::getConsumptionSpeedDependencyCurve()
{
    return m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>();
}

const ::nds::routingdata::types::ConsumptionSpeedDependencyCurve& RoutingLaneRangeAttributeValue::getConsumptionSpeedDependencyCurve() const
{
    return m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>();
}

void RoutingLaneRangeAttributeValue::setConsumptionSpeedDependencyCurve(const ::nds::routingdata::types::ConsumptionSpeedDependencyCurve& consumptionSpeedDependencyCurve_)
{
    m_objectChoice = consumptionSpeedDependencyCurve_;
}

void RoutingLaneRangeAttributeValue::setConsumptionSpeedDependencyCurve(::nds::routingdata::types::ConsumptionSpeedDependencyCurve&& consumptionSpeedDependencyCurve_)
{
    m_objectChoice = ::std::move(consumptionSpeedDependencyCurve_);
}

::nds::core::types::Slope RoutingLaneRangeAttributeValue::getAverageSlope() const
{
    return m_objectChoice.get<::nds::core::types::Slope>();
}

void RoutingLaneRangeAttributeValue::setAverageSlope(::nds::core::types::Slope averageSlope_)
{
    m_objectChoice = averageSlope_;
}

::nds::routingdata::types::TouristRouteType RoutingLaneRangeAttributeValue::getTouristRouteType() const
{
    return m_objectChoice.get<::nds::routingdata::types::TouristRouteType>();
}

void RoutingLaneRangeAttributeValue::setTouristRouteType(::nds::routingdata::types::TouristRouteType touristRouteType_)
{
    m_objectChoice = touristRouteType_;
}

uint16_t RoutingLaneRangeAttributeValue::getNumTollGates() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingLaneRangeAttributeValue::setNumTollGates(uint16_t numTollGates_)
{
    m_objectChoice = numTollGates_;
}

uint16_t RoutingLaneRangeAttributeValue::getNumTrafficLights() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingLaneRangeAttributeValue::setNumTrafficLights(uint16_t numTrafficLights_)
{
    m_objectChoice = numTrafficLights_;
}

uint16_t RoutingLaneRangeAttributeValue::getNumGiveRightOfWay() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingLaneRangeAttributeValue::setNumGiveRightOfWay(uint16_t numGiveRightOfWay_)
{
    m_objectChoice = numGiveRightOfWay_;
}

uint16_t RoutingLaneRangeAttributeValue::getNumSpeedCameras() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingLaneRangeAttributeValue::setNumSpeedCameras(uint16_t numSpeedCameras_)
{
    m_objectChoice = numSpeedCameras_;
}

uint16_t RoutingLaneRangeAttributeValue::getNumSpeedZones() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingLaneRangeAttributeValue::setNumSpeedZones(uint16_t numSpeedZones_)
{
    m_objectChoice = numSpeedZones_;
}

uint16_t RoutingLaneRangeAttributeValue::getNumRailwayCrossings() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingLaneRangeAttributeValue::setNumRailwayCrossings(uint16_t numRailwayCrossings_)
{
    m_objectChoice = numRailwayCrossings_;
}

uint16_t RoutingLaneRangeAttributeValue::getNumStations() const
{
    return m_objectChoice.get<uint16_t>();
}

void RoutingLaneRangeAttributeValue::setNumStations(uint16_t numStations_)
{
    m_objectChoice = numStations_;
}

::nds::routingdata::types::SpeedProfilesWeek& RoutingLaneRangeAttributeValue::getSpeedProfilesWeek()
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>();
}

const ::nds::routingdata::types::SpeedProfilesWeek& RoutingLaneRangeAttributeValue::getSpeedProfilesWeek() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>();
}

void RoutingLaneRangeAttributeValue::setSpeedProfilesWeek(const ::nds::routingdata::types::SpeedProfilesWeek& speedProfilesWeek_)
{
    m_objectChoice = speedProfilesWeek_;
}

void RoutingLaneRangeAttributeValue::setSpeedProfilesWeek(::nds::routingdata::types::SpeedProfilesWeek&& speedProfilesWeek_)
{
    m_objectChoice = ::std::move(speedProfilesWeek_);
}

::nds::routingdata::types::SpeedProfilesDays& RoutingLaneRangeAttributeValue::getSpeedProfilesDays()
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>();
}

const ::nds::routingdata::types::SpeedProfilesDays& RoutingLaneRangeAttributeValue::getSpeedProfilesDays() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>();
}

void RoutingLaneRangeAttributeValue::setSpeedProfilesDays(const ::nds::routingdata::types::SpeedProfilesDays& speedProfilesDays_)
{
    m_objectChoice = speedProfilesDays_;
}

void RoutingLaneRangeAttributeValue::setSpeedProfilesDays(::nds::routingdata::types::SpeedProfilesDays&& speedProfilesDays_)
{
    m_objectChoice = ::std::move(speedProfilesDays_);
}

RoutingLaneRangeAttributeValue::ChoiceTag RoutingLaneRangeAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        return CHOICE_pluralJunction;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return CHOICE_upExcessSlope;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return CHOICE_downExcessSlope;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return CHOICE_speedVariation;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return CHOICE_consumptionSpeedDependencyCurve;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return CHOICE_averageSlope;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        return CHOICE_touristRouteType;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        return CHOICE_numTollGates;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return CHOICE_numTrafficLights;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return CHOICE_numGiveRightOfWay;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        return CHOICE_numSpeedCameras;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        return CHOICE_numSpeedZones;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return CHOICE_numRailwayCrossings;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        return CHOICE_numStations;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        return CHOICE_speedProfilesWeek;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        return CHOICE_speedProfilesDays;
    default:
        return UNDEFINED_CHOICE;
    }
}

void RoutingLaneRangeAttributeValue::initPackingContext(RoutingLaneRangeAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        ::zserio::initPackingContext(context.getPluralJunction(), m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        context.getUpExcessSlope().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        context.getDownExcessSlope().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        context.getSpeedVariation().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().initPackingContext(context.getConsumptionSpeedDependencyCurve());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        context.getAverageSlope().init<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(m_objectChoice.get<::nds::core::types::Slope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        ::zserio::initPackingContext(context.getTouristRouteType(), m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        context.getNumTollGates().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        context.getNumTrafficLights().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        context.getNumGiveRightOfWay().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        context.getNumSpeedCameras().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        context.getNumSpeedZones().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        context.getNumRailwayCrossings().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        context.getNumStations().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().initPackingContext(context.getSpeedProfilesWeek());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().initPackingContext(context.getSpeedProfilesDays());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }
}

size_t RoutingLaneRangeAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().bitSizeOf(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().bitSizeOf(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().bitSizeOf(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t RoutingLaneRangeAttributeValue::bitSizeOf(RoutingLaneRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        endBitPosition += ::zserio::bitSizeOf(context.getPluralJunction(), m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        endBitPosition += context.getUpExcessSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        endBitPosition += context.getDownExcessSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += context.getSpeedVariation().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().bitSizeOf(context.getConsumptionSpeedDependencyCurve(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        endBitPosition += context.getAverageSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(m_objectChoice.get<::nds::core::types::Slope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getTouristRouteType(), m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        endBitPosition += context.getNumTollGates().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        endBitPosition += context.getNumTrafficLights().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        endBitPosition += context.getNumGiveRightOfWay().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        endBitPosition += context.getNumSpeedCameras().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        endBitPosition += context.getNumSpeedZones().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        endBitPosition += context.getNumRailwayCrossings().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        endBitPosition += context.getNumStations().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().bitSizeOf(context.getSpeedProfilesWeek(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        endBitPosition += m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().bitSizeOf(context.getSpeedProfilesDays(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t RoutingLaneRangeAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().initializeOffsets(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().initializeOffsets(endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().initializeOffsets(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }

    return endBitPosition;
}

size_t RoutingLaneRangeAttributeValue::initializeOffsets(RoutingLaneRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        endBitPosition = ::zserio::initializeOffsets(context.getPluralJunction(), endBitPosition,
        m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        endBitPosition += context.getUpExcessSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        endBitPosition += context.getDownExcessSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += context.getSpeedVariation().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().initializeOffsets(context.getConsumptionSpeedDependencyCurve(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        endBitPosition += context.getAverageSlope().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(m_objectChoice.get<::nds::core::types::Slope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getTouristRouteType(), endBitPosition,
        m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        endBitPosition += context.getNumTollGates().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        endBitPosition += context.getNumTrafficLights().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        endBitPosition += context.getNumGiveRightOfWay().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        endBitPosition += context.getNumSpeedCameras().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        endBitPosition += context.getNumSpeedZones().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        endBitPosition += context.getNumRailwayCrossings().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        endBitPosition += context.getNumStations().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().initializeOffsets(context.getSpeedProfilesWeek(), endBitPosition);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        endBitPosition = m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().initializeOffsets(context.getSpeedProfilesDays(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }

    return endBitPosition;
}

bool RoutingLaneRangeAttributeValue::operator==(const RoutingLaneRangeAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::PluralJunction>() == other.m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::ExcessSlope>() == other.m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::ExcessSlope>() == other.m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpeedVariation>() == other.m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>() == other.m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Slope>() == other.m_objectChoice.get<::nds::core::types::Slope>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::TouristRouteType>() == other.m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<uint16_t>() == other.m_objectChoice.get<uint16_t>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>() == other.m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>());
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>() == other.m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }
}

uint32_t RoutingLaneRangeAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Slope>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint16_t>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>());
            break;
        default:
            break;
        }
    }

    return result;
}

void RoutingLaneRangeAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        ::zserio::write(out, m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::ExcessSlope>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().write(out);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        out.writeSignedBits(m_objectChoice.get<::nds::core::types::Slope>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        out.writeVarUInt16(m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().write(out);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().write(out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }
}

void RoutingLaneRangeAttributeValue::write(RoutingLaneRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        ::zserio::write(context.getPluralJunction(), out, m_objectChoice.get<::nds::routingdata::types::PluralJunction>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        context.getUpExcessSlope().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(out, m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        context.getDownExcessSlope().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(out, m_objectChoice.get<::nds::routingdata::types::ExcessSlope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        context.getSpeedVariation().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(out, m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        m_objectChoice.get<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>().write(context.getConsumptionSpeedDependencyCurve(), out);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        context.getAverageSlope().write<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(out, m_objectChoice.get<::nds::core::types::Slope>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        ::zserio::write(context.getTouristRouteType(), out, m_objectChoice.get<::nds::routingdata::types::TouristRouteType>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        context.getNumTollGates().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        context.getNumTrafficLights().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        context.getNumGiveRightOfWay().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        context.getNumSpeedCameras().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        context.getNumSpeedZones().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        context.getNumRailwayCrossings().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        context.getNumStations().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_objectChoice.get<uint16_t>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesWeek>().write(context.getSpeedProfilesWeek(), out);
        break;
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        m_objectChoice.get<::nds::routingdata::types::SpeedProfilesDays>().write(context.getSpeedProfilesDays(), out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingLaneRangeAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::PluralJunction>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::ExcessSlope>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::ExcessSlope>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::SpeedVariation>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::ConsumptionSpeedDependencyCurve(in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Slope>(in.readSignedBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::TouristRouteType>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        return ::zserio::AnyHolder<>(static_cast<uint16_t>(in.readVarUInt16()), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::SpeedProfilesWeek(in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::SpeedProfilesDays(in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingLaneRangeAttributeValue::readObject(RoutingLaneRangeAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::PluralJunction>(context.getPluralJunction(), in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return ::zserio::AnyHolder<>(context.getUpExcessSlope().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return ::zserio::AnyHolder<>(context.getDownExcessSlope().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::ExcessSlope>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::AnyHolder<>(context.getSpeedVariation().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::ConsumptionSpeedDependencyCurve(context.getConsumptionSpeedDependencyCurve(), in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return ::zserio::AnyHolder<>(context.getAverageSlope().read<::zserio::StdIntArrayTraits<::nds::core::types::Slope>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::TouristRouteType>(context.getTouristRouteType(), in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        return ::zserio::AnyHolder<>(context.getNumTollGates().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return ::zserio::AnyHolder<>(context.getNumTrafficLights().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return ::zserio::AnyHolder<>(context.getNumGiveRightOfWay().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        return ::zserio::AnyHolder<>(context.getNumSpeedCameras().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        return ::zserio::AnyHolder<>(context.getNumSpeedZones().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return ::zserio::AnyHolder<>(context.getNumRailwayCrossings().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        return ::zserio::AnyHolder<>(context.getNumStations().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::SpeedProfilesWeek(context.getSpeedProfilesWeek(), in, allocator), allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        return ::zserio::AnyHolder<>(::nds::routingdata::types::SpeedProfilesDays(context.getSpeedProfilesDays(), in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingLaneRangeAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::PLURAL_JUNCTION:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::PluralJunction>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_UP_EXCESS_SLOPE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::ExcessSlope>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_DOWN_EXCESS_SLOPE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::ExcessSlope>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpeedVariation>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_SPEED_DEPENDENCY:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::ConsumptionSpeedDependencyCurve>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::CONSUMPTION_AVERAGE_SLOPE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Slope>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::TOURIST_ROUTE_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::TouristRouteType>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TOLL_GATES:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_TRAFFIC_LIGHTS:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_GIVE_RIGHT_OF_WAY:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_CAMERAS:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_SPEED_ZONES:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_RAILWAY_CROSSINGS:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::NUM_STATIONS:
        return ::zserio::allocatorPropagatingCopy<uint16_t>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_WEEK:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpeedProfilesWeek>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneRangeAttributeType::SPEED_PROFILES_DAYS:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpeedProfilesDays>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneRangeAttributeValue!");
    }
}

} // namespace attributes
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/routingdata/attributes/RoutingLaneTransitionAttributeValue.h>

namespace nds
{
namespace routingdata
{
namespace attributes
{

RoutingLaneTransitionAttributeValue::RoutingLaneTransitionAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

RoutingLaneTransitionAttributeValue::RoutingLaneTransitionAttributeValue(::zserio::BitStreamReader& in,
        ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

RoutingLaneTransitionAttributeValue::RoutingLaneTransitionAttributeValue(RoutingLaneTransitionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

RoutingLaneTransitionAttributeValue::RoutingLaneTransitionAttributeValue(const RoutingLaneTransitionAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

RoutingLaneTransitionAttributeValue& RoutingLaneTransitionAttributeValue::operator=(const RoutingLaneTransitionAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

RoutingLaneTransitionAttributeValue::RoutingLaneTransitionAttributeValue(RoutingLaneTransitionAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

RoutingLaneTransitionAttributeValue& RoutingLaneTransitionAttributeValue::operator=(RoutingLaneTransitionAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

RoutingLaneTransitionAttributeValue::RoutingLaneTransitionAttributeValue(::zserio::PropagateAllocatorT,
        const RoutingLaneTransitionAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void RoutingLaneTransitionAttributeValue::initialize(
        ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool RoutingLaneTransitionAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::routingdata::attributes::RoutingLaneTransitionAttributeType RoutingLaneTransitionAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'RoutingLaneTransitionAttributeValue' is not initialized!");

    return m_type_;
}

::nds::routingdata::types::SpecialTransitionCode RoutingLaneTransitionAttributeValue::getSpecialTransitionCode() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>();
}

void RoutingLaneTransitionAttributeValue::setSpecialTransitionCode(::nds::routingdata::types::SpecialTransitionCode specialTransitionCode_)
{
    m_objectChoice = specialTransitionCode_;
}

::nds::routingdata::types::SpeedVariation RoutingLaneTransitionAttributeValue::getSpeedVariation() const
{
    return m_objectChoice.get<::nds::routingdata::types::SpeedVariation>();
}

void RoutingLaneTransitionAttributeValue::setSpeedVariation(::nds::routingdata::types::SpeedVariation speedVariation_)
{
    m_objectChoice = speedVariation_;
}

::nds::core::types::Seconds RoutingLaneTransitionAttributeValue::getTransitionDuration() const
{
    return m_objectChoice.get<::nds::core::types::Seconds>();
}

void RoutingLaneTransitionAttributeValue::setTransitionDuration(::nds::core::types::Seconds transitionDuration_)
{
    m_objectChoice = transitionDuration_;
}

::nds::routingdata::types::LaneTransitionAngle RoutingLaneTransitionAttributeValue::getTransitionAngle() const
{
    return m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>();
}

void RoutingLaneTransitionAttributeValue::setTransitionAngle(::nds::routingdata::types::LaneTransitionAngle transitionAngle_)
{
    m_objectChoice = transitionAngle_;
}

RoutingLaneTransitionAttributeValue::ChoiceTag RoutingLaneTransitionAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return CHOICE_specialTransitionCode;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return CHOICE_speedVariation;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        return CHOICE_transitionDuration;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        return CHOICE_transitionAngle;
    default:
        return UNDEFINED_CHOICE;
    }
}

void RoutingLaneTransitionAttributeValue::initPackingContext(RoutingLaneTransitionAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        ::zserio::initPackingContext(context.getSpecialTransitionCode(), m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        context.getSpeedVariation().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        context.getTransitionDuration().init<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        context.getTransitionAngle().init<::zserio::StdIntArrayTraits<::nds::routingdata::types::LaneTransitionAngle>>(m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }
}

size_t RoutingLaneTransitionAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        endBitPosition += UINT8_C(8);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t RoutingLaneTransitionAttributeValue::bitSizeOf(RoutingLaneTransitionAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        endBitPosition += ::zserio::bitSizeOf(context.getSpecialTransitionCode(), m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += context.getSpeedVariation().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        endBitPosition += context.getTransitionDuration().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        endBitPosition += context.getTransitionAngle().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::LaneTransitionAngle>>(m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t RoutingLaneTransitionAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        endBitPosition += UINT8_C(8);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }

    return endBitPosition;
}

size_t RoutingLaneTransitionAttributeValue::initializeOffsets(RoutingLaneTransitionAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        endBitPosition = ::zserio::initializeOffsets(context.getSpecialTransitionCode(), endBitPosition,
        m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        endBitPosition += context.getSpeedVariation().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        endBitPosition += context.getTransitionDuration().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        endBitPosition += context.getTransitionAngle().bitSizeOf<::zserio::StdIntArrayTraits<::nds::routingdata::types::LaneTransitionAngle>>(m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }

    return endBitPosition;
}

bool RoutingLaneTransitionAttributeValue::operator==(const RoutingLaneTransitionAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>() == other.m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::SpeedVariation>() == other.m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::Seconds>() == other.m_objectChoice.get<::nds::core::types::Seconds>());
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>() == other.m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }
}

uint32_t RoutingLaneTransitionAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::Seconds>());
            break;
        case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>());
            break;
        default:
            break;
        }
    }

    return result;
}

void RoutingLaneTransitionAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        ::zserio::write(out, m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::SpeedVariation>(), UINT8_C(8));
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        out.writeVarUInt(m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        out.writeBits(m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>(), UINT8_C(8));
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }
}

void RoutingLaneTransitionAttributeValue::write(RoutingLaneTransitionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        ::zserio::write(context.getSpecialTransitionCode(), out, m_objectChoice.get<::nds::routingdata::types::SpecialTransitionCode>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        context.getSpeedVariation().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(out, m_objectChoice.get<::nds::routingdata::types::SpeedVariation>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        context.getTransitionDuration().write<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(out, m_objectChoice.get<::nds::core::types::Seconds>());
        break;
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        context.getTransitionAngle().write<::zserio::StdIntArrayTraits<::nds::routingdata::types::LaneTransitionAngle>>(out, m_objectChoice.get<::nds::routingdata::types::LaneTransitionAngle>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingLaneTransitionAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::SpecialTransitionCode>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::SpeedVariation>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::Seconds>(in.readVarUInt()), allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        return ::zserio::AnyHolder<>(static_cast<::nds::routingdata::types::LaneTransitionAngle>(in.readBits(UINT8_C(8))), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingLaneTransitionAttributeValue::readObject(RoutingLaneTransitionAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::routingdata::types::SpecialTransitionCode>(context.getSpecialTransitionCode(), in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::AnyHolder<>(context.getSpeedVariation().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::SpeedVariation>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        return ::zserio::AnyHolder<>(context.getTransitionDuration().read<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(in), allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        return ::zserio::AnyHolder<>(context.getTransitionAngle().read<::zserio::StdIntArrayTraits<::nds::routingdata::types::LaneTransitionAngle>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> RoutingLaneTransitionAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::SPECIAL_TRANSITION_CODE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpecialTransitionCode>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::CONSUMPTION_SPEED_VARIATION:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::SpeedVariation>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_DURATION:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::Seconds>(m_objectChoice, allocator);
    case ::nds::routingdata::attributes::RoutingLaneTransitionAttributeType::TRANSITION_ANGLE:
        return ::zserio::allocatorPropagatingCopy<::nds::routingdata::types::LaneTransitionAngle>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice RoutingLaneTransitionAttributeValue!");
    }
}

} // namespace attributes
} // namespace routingdata
} // namespace nds
