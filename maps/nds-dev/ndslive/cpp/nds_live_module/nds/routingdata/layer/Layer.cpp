/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/routingdata/layer/RoadRoutingLayer.h>
#include <nds/routingdata/metadata/RoadRoutingLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace routingdata
{
namespace layer
{

RoadRoutingLayer::RoadRoutingLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_content_(::nds::routingdata::metadata::RoadRoutingLayerContent()),
        m_routingRoadRangeMaps_(::zserio::NullOpt),
        m_routingTransitionMaps_(::zserio::NullOpt),
        m_routingRoadRangeSets_(::zserio::NullOpt),
        m_routingTransitionSets_(::zserio::NullOpt),
        m_profiles_(::zserio::NullOpt)
{
}

RoadRoutingLayer::RoadRoutingLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_shift_(readShift(in)),
        m_content_(readContent(in)),
        m_routingRoadRangeMaps_(readRoutingRoadRangeMaps(in, allocator)),
        m_routingTransitionMaps_(readRoutingTransitionMaps(in, allocator)),
        m_routingRoadRangeSets_(readRoutingRoadRangeSets(in, allocator)),
        m_routingTransitionSets_(readRoutingTransitionSets(in, allocator)),
        m_profiles_(readProfiles(in, allocator))
{
}

RoadRoutingLayer::RoadRoutingLayer(RoadRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_shift_(readShift(context, in)),
        m_content_(readContent(context, in)),
        m_routingRoadRangeMaps_(readRoutingRoadRangeMaps(context, in, allocator)),
        m_routingTransitionMaps_(readRoutingTransitionMaps(context, in, allocator)),
        m_routingRoadRangeSets_(readRoutingRoadRangeSets(context, in, allocator)),
        m_routingTransitionSets_(readRoutingTransitionSets(context, in, allocator)),
        m_profiles_(readProfiles(context, in, allocator))
{
}

RoadRoutingLayer::RoadRoutingLayer(const RoadRoutingLayer& other) :
        m_shift_(other.m_shift_),
        m_content_(other.m_content_),
        m_routingRoadRangeMaps_(other.m_routingRoadRangeMaps_),
        m_routingTransitionMaps_(other.m_routingTransitionMaps_),
        m_routingRoadRangeSets_(other.m_routingRoadRangeSets_),
        m_routingTransitionSets_(other.m_routingTransitionSets_),
        m_profiles_(other.m_profiles_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadRoutingLayer& RoadRoutingLayer::operator=(const RoadRoutingLayer& other)
{
    m_shift_ = other.m_shift_;
    m_content_ = other.m_content_;
    m_routingRoadRangeMaps_ = other.m_routingRoadRangeMaps_;
    m_routingTransitionMaps_ = other.m_routingTransitionMaps_;
    m_routingRoadRangeSets_ = other.m_routingRoadRangeSets_;
    m_routingTransitionSets_ = other.m_routingTransitionSets_;
    m_profiles_ = other.m_profiles_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadRoutingLayer::RoadRoutingLayer(RoadRoutingLayer&& other) :
        m_shift_(::std::move(other.m_shift_)),
        m_content_(::std::move(other.m_content_)),
        m_routingRoadRangeMaps_(::std::move(other.m_routingRoadRangeMaps_)),
        m_routingTransitionMaps_(::std::move(other.m_routingTransitionMaps_)),
        m_routingRoadRangeSets_(::std::move(other.m_routingRoadRangeSets_)),
        m_routingTransitionSets_(::std::move(other.m_routingTransitionSets_)),
        m_profiles_(::std::move(other.m_profiles_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadRoutingLayer& RoadRoutingLayer::operator=(RoadRoutingLayer&& other)
{
    m_shift_ = ::std::move(other.m_shift_);
    m_content_ = ::std::move(other.m_content_);
    m_routingRoadRangeMaps_ = ::std::move(other.m_routingRoadRangeMaps_);
    m_routingTransitionMaps_ = ::std::move(other.m_routingTransitionMaps_);
    m_routingRoadRangeSets_ = ::std::move(other.m_routingRoadRangeSets_);
    m_routingTransitionSets_ = ::std::move(other.m_routingTransitionSets_);
    m_profiles_ = ::std::move(other.m_profiles_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadRoutingLayer::RoadRoutingLayer(::zserio::PropagateAllocatorT,
        const RoadRoutingLayer& other, const allocator_type& allocator) :
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_routingRoadRangeMaps_(::zserio::allocatorPropagatingCopy(other.m_routingRoadRangeMaps_, allocator)),
        m_routingTransitionMaps_(::zserio::allocatorPropagatingCopy(other.m_routingTransitionMaps_, allocator)),
        m_routingRoadRangeSets_(::zserio::allocatorPropagatingCopy(other.m_routingRoadRangeSets_, allocator)),
        m_routingTransitionSets_(::zserio::allocatorPropagatingCopy(other.m_routingTransitionSets_, allocator)),
        m_profiles_(::zserio::allocatorPropagatingCopy(other.m_profiles_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadRoutingLayer::initializeChildren()
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
        m_routingRoadRangeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
        m_routingTransitionMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
        m_routingRoadRangeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
        m_routingTransitionSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::core::geometry::CoordShift RoadRoutingLayer::getShift() const
{
    return m_shift_;
}

void RoadRoutingLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::routingdata::metadata::RoadRoutingLayerContent RoadRoutingLayer::getContent() const
{
    return m_content_;
}

void RoadRoutingLayer::setContent(::nds::routingdata::metadata::RoadRoutingLayerContent content_)
{
    m_content_ = content_;
}

::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList& RoadRoutingLayer::getRoutingRoadRangeMaps()
{
    return m_routingRoadRangeMaps_.value();
}

const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList& RoadRoutingLayer::getRoutingRoadRangeMaps() const
{
    return m_routingRoadRangeMaps_.value();
}

void RoadRoutingLayer::setRoutingRoadRangeMaps(const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList& routingRoadRangeMaps_)
{
    m_routingRoadRangeMaps_ = routingRoadRangeMaps_;
}

void RoadRoutingLayer::setRoutingRoadRangeMaps(::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList&& routingRoadRangeMaps_)
{
    m_routingRoadRangeMaps_ = ::std::move(routingRoadRangeMaps_);
}

bool RoadRoutingLayer::isRoutingRoadRangeMapsUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS);
}

bool RoadRoutingLayer::isRoutingRoadRangeMapsSet() const
{
    return m_routingRoadRangeMaps_.hasValue();
}

void RoadRoutingLayer::resetRoutingRoadRangeMaps()
{
    m_routingRoadRangeMaps_.reset();
}

::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList& RoadRoutingLayer::getRoutingTransitionMaps()
{
    return m_routingTransitionMaps_.value();
}

const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList& RoadRoutingLayer::getRoutingTransitionMaps() const
{
    return m_routingTransitionMaps_.value();
}

void RoadRoutingLayer::setRoutingTransitionMaps(const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList& routingTransitionMaps_)
{
    m_routingTransitionMaps_ = routingTransitionMaps_;
}

void RoadRoutingLayer::setRoutingTransitionMaps(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList&& routingTransitionMaps_)
{
    m_routingTransitionMaps_ = ::std::move(routingTransitionMaps_);
}

bool RoadRoutingLayer::isRoutingTransitionMapsUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS);
}

bool RoadRoutingLayer::isRoutingTransitionMapsSet() const
{
    return m_routingTransitionMaps_.hasValue();
}

void RoadRoutingLayer::resetRoutingTransitionMaps()
{
    m_routingTransitionMaps_.reset();
}

::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList& RoadRoutingLayer::getRoutingRoadRangeSets()
{
    return m_routingRoadRangeSets_.value();
}

const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList& RoadRoutingLayer::getRoutingRoadRangeSets() const
{
    return m_routingRoadRangeSets_.value();
}

void RoadRoutingLayer::setRoutingRoadRangeSets(const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList& routingRoadRangeSets_)
{
    m_routingRoadRangeSets_ = routingRoadRangeSets_;
}

void RoadRoutingLayer::setRoutingRoadRangeSets(::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList&& routingRoadRangeSets_)
{
    m_routingRoadRangeSets_ = ::std::move(routingRoadRangeSets_);
}

bool RoadRoutingLayer::isRoutingRoadRangeSetsUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadRoutingLayer::isRoutingRoadRangeSetsSet() const
{
    return m_routingRoadRangeSets_.hasValue();
}

void RoadRoutingLayer::resetRoutingRoadRangeSets()
{
    m_routingRoadRangeSets_.reset();
}

::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList& RoadRoutingLayer::getRoutingTransitionSets()
{
    return m_routingTransitionSets_.value();
}

const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList& RoadRoutingLayer::getRoutingTransitionSets() const
{
    return m_routingTransitionSets_.value();
}

void RoadRoutingLayer::setRoutingTransitionSets(const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList& routingTransitionSets_)
{
    m_routingTransitionSets_ = routingTransitionSets_;
}

void RoadRoutingLayer::setRoutingTransitionSets(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList&& routingTransitionSets_)
{
    m_routingTransitionSets_ = ::std::move(routingTransitionSets_);
}

bool RoadRoutingLayer::isRoutingTransitionSetsUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS);
}

bool RoadRoutingLayer::isRoutingTransitionSetsSet() const
{
    return m_routingTransitionSets_.hasValue();
}

void RoadRoutingLayer::resetRoutingTransitionSets()
{
    m_routingTransitionSets_.reset();
}

::zserio::vector<::nds::routingdata::types::SpeedProfile>& RoadRoutingLayer::getProfiles()
{
    return m_profiles_.value().getRawArray();
}

const ::zserio::vector<::nds::routingdata::types::SpeedProfile>& RoadRoutingLayer::getProfiles() const
{
    return m_profiles_.value().getRawArray();
}

void RoadRoutingLayer::setProfiles(const ::zserio::vector<::nds::routingdata::types::SpeedProfile>& profiles_)
{
    m_profiles_ = ZserioArrayType_profiles(profiles_);
}

void RoadRoutingLayer::setProfiles(::zserio::vector<::nds::routingdata::types::SpeedProfile>&& profiles_)
{
    m_profiles_ = ZserioArrayType_profiles(std::move(profiles_));
}

bool RoadRoutingLayer::isProfilesUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES);
}

bool RoadRoutingLayer::isProfilesSet() const
{
    return m_profiles_.hasValue();
}

void RoadRoutingLayer::resetProfiles()
{
    m_profiles_.reset();
}

::nds::system::types::LayerType RoadRoutingLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadRoutingLayer::initPackingContext(RoadRoutingLayer::ZserioPackingContext& context) const
{
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        m_routingRoadRangeMaps_.value().initPackingContext(context.getRoutingRoadRangeMaps());
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        m_routingTransitionMaps_.value().initPackingContext(context.getRoutingTransitionMaps());
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_routingRoadRangeSets_.value().initPackingContext(context.getRoutingRoadRangeSets());
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        m_routingTransitionSets_.value().initPackingContext(context.getRoutingTransitionSets());
    }
}

size_t RoadRoutingLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_routingRoadRangeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        endBitPosition += m_routingTransitionMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_routingRoadRangeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        endBitPosition += m_routingTransitionSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES)
    {
        endBitPosition += m_profiles_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRoutingLayer::bitSizeOf(RoadRoutingLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_routingRoadRangeMaps_.value().bitSizeOf(context.getRoutingRoadRangeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        endBitPosition += m_routingTransitionMaps_.value().bitSizeOf(context.getRoutingTransitionMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_routingRoadRangeSets_.value().bitSizeOf(context.getRoutingRoadRangeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        endBitPosition += m_routingTransitionSets_.value().bitSizeOf(context.getRoutingTransitionSets(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES)
    {
        endBitPosition += m_profiles_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRoutingLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_routingRoadRangeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        endBitPosition = m_routingTransitionMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_routingRoadRangeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        endBitPosition = m_routingTransitionSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES)
    {
        endBitPosition = m_profiles_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t RoadRoutingLayer::initializeOffsets(RoadRoutingLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_routingRoadRangeMaps_.value().initializeOffsets(context.getRoutingRoadRangeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        endBitPosition = m_routingTransitionMaps_.value().initializeOffsets(context.getRoutingTransitionMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_routingRoadRangeSets_.value().initializeOffsets(context.getRoutingRoadRangeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        endBitPosition = m_routingTransitionSets_.value().initializeOffsets(context.getRoutingTransitionSets(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES)
    {
        endBitPosition = m_profiles_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool RoadRoutingLayer::operator==(const RoadRoutingLayer& other) const
{
    if (this != &other)
    {
        return
                (m_shift_ == other.m_shift_) &&
                (m_content_ == other.m_content_) &&
                (!isRoutingRoadRangeMapsUsed() ? !other.isRoutingRoadRangeMapsUsed() : (m_routingRoadRangeMaps_ == other.m_routingRoadRangeMaps_)) &&
                (!isRoutingTransitionMapsUsed() ? !other.isRoutingTransitionMapsUsed() : (m_routingTransitionMaps_ == other.m_routingTransitionMaps_)) &&
                (!isRoutingRoadRangeSetsUsed() ? !other.isRoutingRoadRangeSetsUsed() : (m_routingRoadRangeSets_ == other.m_routingRoadRangeSets_)) &&
                (!isRoutingTransitionSetsUsed() ? !other.isRoutingTransitionSetsUsed() : (m_routingTransitionSets_ == other.m_routingTransitionSets_)) &&
                (!isProfilesUsed() ? !other.isProfilesUsed() : (m_profiles_ == other.m_profiles_));
    }

    return true;
}

uint32_t RoadRoutingLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_shift_);
    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoutingRoadRangeMapsUsed())
        result = ::zserio::calcHashCode(result, m_routingRoadRangeMaps_);
    if (isRoutingTransitionMapsUsed())
        result = ::zserio::calcHashCode(result, m_routingTransitionMaps_);
    if (isRoutingRoadRangeSetsUsed())
        result = ::zserio::calcHashCode(result, m_routingRoadRangeSets_);
    if (isRoutingTransitionSetsUsed())
        result = ::zserio::calcHashCode(result, m_routingTransitionSets_);
    if (isProfilesUsed())
        result = ::zserio::calcHashCode(result, m_profiles_);

    return result;
}

void RoadRoutingLayer::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_shift_, UINT8_C(5));

    m_content_.write(out);

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_routingRoadRangeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingRoadRangeMaps: ") <<
                    m_routingRoadRangeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_routingRoadRangeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        // check parameters
        if (m_routingTransitionMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingTransitionMaps: ") <<
                    m_routingTransitionMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_routingTransitionMaps_.value().write(out);
    }

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_routingRoadRangeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingRoadRangeSets: ") <<
                    m_routingRoadRangeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_routingRoadRangeSets_.value().write(out);
    }

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        // check parameters
        if (m_routingTransitionSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingTransitionSets: ") <<
                    m_routingTransitionSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_routingTransitionSets_.value().write(out);
    }

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES)
    {
        m_profiles_.value().write(*this, out);
    }
}

void RoadRoutingLayer::write(RoadRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_routingRoadRangeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingRoadRangeMaps: ") <<
                    m_routingRoadRangeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_routingRoadRangeMaps_.value().write(context.getRoutingRoadRangeMaps(), out);
    }

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        // check parameters
        if (m_routingTransitionMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingTransitionMaps: ") <<
                    m_routingTransitionMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_routingTransitionMaps_.value().write(context.getRoutingTransitionMaps(), out);
    }

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_routingRoadRangeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingRoadRangeSets: ") <<
                    m_routingRoadRangeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_routingRoadRangeSets_.value().write(context.getRoutingRoadRangeSets(), out);
    }

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        // check parameters
        if (m_routingTransitionSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingTransitionSets: ") <<
                    m_routingTransitionSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_routingTransitionSets_.value().write(context.getRoutingTransitionSets(), out);
    }

    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES)
    {
        m_profiles_.value().writePacked(*this, out);
    }
}

void RoadRoutingLayer::ZserioElementFactory_profiles::create(RoadRoutingLayer&        ,
        ::zserio::vector<::nds::routingdata::types::SpeedProfile>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadRoutingLayer::ZserioElementFactory_profiles::create(RoadRoutingLayer&        ,
        ::zserio::vector<::nds::routingdata::types::SpeedProfile>& array,
        ::nds::routingdata::types::SpeedProfile::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::geometry::CoordShift RoadRoutingLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadRoutingLayer::readShift(RoadRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::nds::routingdata::metadata::RoadRoutingLayerContent RoadRoutingLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::routingdata::metadata::RoadRoutingLayerContent(in);
}

::nds::routingdata::metadata::RoadRoutingLayerContent RoadRoutingLayer::readContent(RoadRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::routingdata::metadata::RoadRoutingLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList> RoadRoutingLayer::readRoutingRoadRangeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList>(::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList> RoadRoutingLayer::readRoutingRoadRangeMaps(RoadRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList>(::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList(context.getRoutingRoadRangeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList> RoadRoutingLayer::readRoutingTransitionMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList>(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList> RoadRoutingLayer::readRoutingTransitionMaps(RoadRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList>(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList(context.getRoutingTransitionMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList> RoadRoutingLayer::readRoutingRoadRangeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList>(::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList> RoadRoutingLayer::readRoutingRoadRangeSets(RoadRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList>(::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList(context.getRoutingRoadRangeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList> RoadRoutingLayer::readRoutingTransitionSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList>(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList> RoadRoutingLayer::readRoutingTransitionSets(RoadRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::ROAD_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList>(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList(context.getRoutingTransitionSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<RoadRoutingLayer::ZserioArrayType_profiles> RoadRoutingLayer::readProfiles(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES)
    {
        ZserioArrayType_profiles readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<RoadRoutingLayer::ZserioArrayType_profiles> RoadRoutingLayer::readProfiles(RoadRoutingLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::RoadRoutingLayerContent::Values::SPEED_PROFILES)
    {
        ZserioArrayType_profiles readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles>(::zserio::NullOpt);
}

} // namespace layer
} // namespace routingdata
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/routingdata/layer/LaneRoutingLayer.h>
#include <nds/routingdata/metadata/LaneRoutingLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace routingdata
{
namespace layer
{

LaneRoutingLayer::LaneRoutingLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::routingdata::metadata::LaneRoutingLayerContent()),
        m_routingLaneRangeMaps_(::zserio::NullOpt),
        m_routingTransitionMaps_(::zserio::NullOpt),
        m_routingLaneRangeSets_(::zserio::NullOpt),
        m_routingTransitionSets_(::zserio::NullOpt),
        m_profiles_(::zserio::NullOpt)
{
}

LaneRoutingLayer::LaneRoutingLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_routingLaneRangeMaps_(readRoutingLaneRangeMaps(in, allocator)),
        m_routingTransitionMaps_(readRoutingTransitionMaps(in, allocator)),
        m_routingLaneRangeSets_(readRoutingLaneRangeSets(in, allocator)),
        m_routingTransitionSets_(readRoutingTransitionSets(in, allocator)),
        m_profiles_(readProfiles(in, allocator))
{
}

LaneRoutingLayer::LaneRoutingLayer(LaneRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_routingLaneRangeMaps_(readRoutingLaneRangeMaps(context, in, allocator)),
        m_routingTransitionMaps_(readRoutingTransitionMaps(context, in, allocator)),
        m_routingLaneRangeSets_(readRoutingLaneRangeSets(context, in, allocator)),
        m_routingTransitionSets_(readRoutingTransitionSets(context, in, allocator)),
        m_profiles_(readProfiles(context, in, allocator))
{
}

LaneRoutingLayer::LaneRoutingLayer(const LaneRoutingLayer& other) :
        m_content_(other.m_content_),
        m_routingLaneRangeMaps_(other.m_routingLaneRangeMaps_),
        m_routingTransitionMaps_(other.m_routingTransitionMaps_),
        m_routingLaneRangeSets_(other.m_routingLaneRangeSets_),
        m_routingTransitionSets_(other.m_routingTransitionSets_),
        m_profiles_(other.m_profiles_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneRoutingLayer& LaneRoutingLayer::operator=(const LaneRoutingLayer& other)
{
    m_content_ = other.m_content_;
    m_routingLaneRangeMaps_ = other.m_routingLaneRangeMaps_;
    m_routingTransitionMaps_ = other.m_routingTransitionMaps_;
    m_routingLaneRangeSets_ = other.m_routingLaneRangeSets_;
    m_routingTransitionSets_ = other.m_routingTransitionSets_;
    m_profiles_ = other.m_profiles_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneRoutingLayer::LaneRoutingLayer(LaneRoutingLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_routingLaneRangeMaps_(::std::move(other.m_routingLaneRangeMaps_)),
        m_routingTransitionMaps_(::std::move(other.m_routingTransitionMaps_)),
        m_routingLaneRangeSets_(::std::move(other.m_routingLaneRangeSets_)),
        m_routingTransitionSets_(::std::move(other.m_routingTransitionSets_)),
        m_profiles_(::std::move(other.m_profiles_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneRoutingLayer& LaneRoutingLayer::operator=(LaneRoutingLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_routingLaneRangeMaps_ = ::std::move(other.m_routingLaneRangeMaps_);
    m_routingTransitionMaps_ = ::std::move(other.m_routingTransitionMaps_);
    m_routingLaneRangeSets_ = ::std::move(other.m_routingLaneRangeSets_);
    m_routingTransitionSets_ = ::std::move(other.m_routingTransitionSets_);
    m_profiles_ = ::std::move(other.m_profiles_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneRoutingLayer::LaneRoutingLayer(::zserio::PropagateAllocatorT,
        const LaneRoutingLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_routingLaneRangeMaps_(::zserio::allocatorPropagatingCopy(other.m_routingLaneRangeMaps_, allocator)),
        m_routingTransitionMaps_(::zserio::allocatorPropagatingCopy(other.m_routingTransitionMaps_, allocator)),
        m_routingLaneRangeSets_(::zserio::allocatorPropagatingCopy(other.m_routingLaneRangeSets_, allocator)),
        m_routingTransitionSets_(::zserio::allocatorPropagatingCopy(other.m_routingTransitionSets_, allocator)),
        m_profiles_(::zserio::allocatorPropagatingCopy(other.m_profiles_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneRoutingLayer::initializeChildren()
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
        m_routingLaneRangeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
        m_routingTransitionMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
        m_routingLaneRangeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
        m_routingTransitionSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::routingdata::metadata::LaneRoutingLayerContent LaneRoutingLayer::getContent() const
{
    return m_content_;
}

void LaneRoutingLayer::setContent(::nds::routingdata::metadata::LaneRoutingLayerContent content_)
{
    m_content_ = content_;
}

::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList& LaneRoutingLayer::getRoutingLaneRangeMaps()
{
    return m_routingLaneRangeMaps_.value();
}

const ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList& LaneRoutingLayer::getRoutingLaneRangeMaps() const
{
    return m_routingLaneRangeMaps_.value();
}

void LaneRoutingLayer::setRoutingLaneRangeMaps(const ::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList& routingLaneRangeMaps_)
{
    m_routingLaneRangeMaps_ = routingLaneRangeMaps_;
}

void LaneRoutingLayer::setRoutingLaneRangeMaps(::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList&& routingLaneRangeMaps_)
{
    m_routingLaneRangeMaps_ = ::std::move(routingLaneRangeMaps_);
}

bool LaneRoutingLayer::isRoutingLaneRangeMapsUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS);
}

bool LaneRoutingLayer::isRoutingLaneRangeMapsSet() const
{
    return m_routingLaneRangeMaps_.hasValue();
}

void LaneRoutingLayer::resetRoutingLaneRangeMaps()
{
    m_routingLaneRangeMaps_.reset();
}

::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList& LaneRoutingLayer::getRoutingTransitionMaps()
{
    return m_routingTransitionMaps_.value();
}

const ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList& LaneRoutingLayer::getRoutingTransitionMaps() const
{
    return m_routingTransitionMaps_.value();
}

void LaneRoutingLayer::setRoutingTransitionMaps(const ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList& routingTransitionMaps_)
{
    m_routingTransitionMaps_ = routingTransitionMaps_;
}

void LaneRoutingLayer::setRoutingTransitionMaps(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList&& routingTransitionMaps_)
{
    m_routingTransitionMaps_ = ::std::move(routingTransitionMaps_);
}

bool LaneRoutingLayer::isRoutingTransitionMapsUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS);
}

bool LaneRoutingLayer::isRoutingTransitionMapsSet() const
{
    return m_routingTransitionMaps_.hasValue();
}

void LaneRoutingLayer::resetRoutingTransitionMaps()
{
    m_routingTransitionMaps_.reset();
}

::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList& LaneRoutingLayer::getRoutingLaneRangeSets()
{
    return m_routingLaneRangeSets_.value();
}

const ::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList& LaneRoutingLayer::getRoutingLaneRangeSets() const
{
    return m_routingLaneRangeSets_.value();
}

void LaneRoutingLayer::setRoutingLaneRangeSets(const ::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList& routingLaneRangeSets_)
{
    m_routingLaneRangeSets_ = routingLaneRangeSets_;
}

void LaneRoutingLayer::setRoutingLaneRangeSets(::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList&& routingLaneRangeSets_)
{
    m_routingLaneRangeSets_ = ::std::move(routingLaneRangeSets_);
}

bool LaneRoutingLayer::isRoutingLaneRangeSetsUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneRoutingLayer::isRoutingLaneRangeSetsSet() const
{
    return m_routingLaneRangeSets_.hasValue();
}

void LaneRoutingLayer::resetRoutingLaneRangeSets()
{
    m_routingLaneRangeSets_.reset();
}

::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList& LaneRoutingLayer::getRoutingTransitionSets()
{
    return m_routingTransitionSets_.value();
}

const ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList& LaneRoutingLayer::getRoutingTransitionSets() const
{
    return m_routingTransitionSets_.value();
}

void LaneRoutingLayer::setRoutingTransitionSets(const ::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList& routingTransitionSets_)
{
    m_routingTransitionSets_ = routingTransitionSets_;
}

void LaneRoutingLayer::setRoutingTransitionSets(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList&& routingTransitionSets_)
{
    m_routingTransitionSets_ = ::std::move(routingTransitionSets_);
}

bool LaneRoutingLayer::isRoutingTransitionSetsUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS);
}

bool LaneRoutingLayer::isRoutingTransitionSetsSet() const
{
    return m_routingTransitionSets_.hasValue();
}

void LaneRoutingLayer::resetRoutingTransitionSets()
{
    m_routingTransitionSets_.reset();
}

::zserio::vector<::nds::routingdata::types::SpeedProfile>& LaneRoutingLayer::getProfiles()
{
    return m_profiles_.value().getRawArray();
}

const ::zserio::vector<::nds::routingdata::types::SpeedProfile>& LaneRoutingLayer::getProfiles() const
{
    return m_profiles_.value().getRawArray();
}

void LaneRoutingLayer::setProfiles(const ::zserio::vector<::nds::routingdata::types::SpeedProfile>& profiles_)
{
    m_profiles_ = ZserioArrayType_profiles(profiles_);
}

void LaneRoutingLayer::setProfiles(::zserio::vector<::nds::routingdata::types::SpeedProfile>&& profiles_)
{
    m_profiles_ = ZserioArrayType_profiles(std::move(profiles_));
}

bool LaneRoutingLayer::isProfilesUsed() const
{
    return ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES);
}

bool LaneRoutingLayer::isProfilesSet() const
{
    return m_profiles_.hasValue();
}

void LaneRoutingLayer::resetProfiles()
{
    m_profiles_.reset();
}

::nds::system::types::LayerType LaneRoutingLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void LaneRoutingLayer::initPackingContext(LaneRoutingLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_routingLaneRangeMaps_.value().initPackingContext(context.getRoutingLaneRangeMaps());
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        m_routingTransitionMaps_.value().initPackingContext(context.getRoutingTransitionMaps());
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        m_routingLaneRangeSets_.value().initPackingContext(context.getRoutingLaneRangeSets());
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_routingTransitionSets_.value().initPackingContext(context.getRoutingTransitionSets());
    }
}

size_t LaneRoutingLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_routingLaneRangeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition += m_routingTransitionMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_routingLaneRangeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_routingTransitionSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES)
    {
        endBitPosition += m_profiles_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRoutingLayer::bitSizeOf(LaneRoutingLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_routingLaneRangeMaps_.value().bitSizeOf(context.getRoutingLaneRangeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition += m_routingTransitionMaps_.value().bitSizeOf(context.getRoutingTransitionMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_routingLaneRangeSets_.value().bitSizeOf(context.getRoutingLaneRangeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_routingTransitionSets_.value().bitSizeOf(context.getRoutingTransitionSets(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES)
    {
        endBitPosition += m_profiles_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRoutingLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_routingLaneRangeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition = m_routingTransitionMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_routingLaneRangeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_routingTransitionSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES)
    {
        endBitPosition = m_profiles_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t LaneRoutingLayer::initializeOffsets(LaneRoutingLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_routingLaneRangeMaps_.value().initializeOffsets(context.getRoutingLaneRangeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition = m_routingTransitionMaps_.value().initializeOffsets(context.getRoutingTransitionMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_routingLaneRangeSets_.value().initializeOffsets(context.getRoutingLaneRangeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_routingTransitionSets_.value().initializeOffsets(context.getRoutingTransitionSets(), endBitPosition);
    }
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES)
    {
        endBitPosition = m_profiles_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool LaneRoutingLayer::operator==(const LaneRoutingLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoutingLaneRangeMapsUsed() ? !other.isRoutingLaneRangeMapsUsed() : (m_routingLaneRangeMaps_ == other.m_routingLaneRangeMaps_)) &&
                (!isRoutingTransitionMapsUsed() ? !other.isRoutingTransitionMapsUsed() : (m_routingTransitionMaps_ == other.m_routingTransitionMaps_)) &&
                (!isRoutingLaneRangeSetsUsed() ? !other.isRoutingLaneRangeSetsUsed() : (m_routingLaneRangeSets_ == other.m_routingLaneRangeSets_)) &&
                (!isRoutingTransitionSetsUsed() ? !other.isRoutingTransitionSetsUsed() : (m_routingTransitionSets_ == other.m_routingTransitionSets_)) &&
                (!isProfilesUsed() ? !other.isProfilesUsed() : (m_profiles_ == other.m_profiles_));
    }

    return true;
}

uint32_t LaneRoutingLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoutingLaneRangeMapsUsed())
        result = ::zserio::calcHashCode(result, m_routingLaneRangeMaps_);
    if (isRoutingTransitionMapsUsed())
        result = ::zserio::calcHashCode(result, m_routingTransitionMaps_);
    if (isRoutingLaneRangeSetsUsed())
        result = ::zserio::calcHashCode(result, m_routingLaneRangeSets_);
    if (isRoutingTransitionSetsUsed())
        result = ::zserio::calcHashCode(result, m_routingTransitionSets_);
    if (isProfilesUsed())
        result = ::zserio::calcHashCode(result, m_profiles_);

    return result;
}

void LaneRoutingLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_routingLaneRangeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeMaps: ") <<
                    m_routingLaneRangeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_routingLaneRangeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        // check parameters
        if (m_routingTransitionMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionMaps: ") <<
                    m_routingTransitionMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_routingTransitionMaps_.value().write(out);
    }

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_routingLaneRangeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeSets: ") <<
                    m_routingLaneRangeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_routingLaneRangeSets_.value().write(out);
    }

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        // check parameters
        if (m_routingTransitionSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionSets: ") <<
                    m_routingTransitionSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_routingTransitionSets_.value().write(out);
    }

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES)
    {
        m_profiles_.value().write(*this, out);
    }
}

void LaneRoutingLayer::write(LaneRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_routingLaneRangeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeMaps: ") <<
                    m_routingLaneRangeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_routingLaneRangeMaps_.value().write(context.getRoutingLaneRangeMaps(), out);
    }

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        // check parameters
        if (m_routingTransitionMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionMaps: ") <<
                    m_routingTransitionMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_routingTransitionMaps_.value().write(context.getRoutingTransitionMaps(), out);
    }

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_routingLaneRangeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeSets: ") <<
                    m_routingLaneRangeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_routingLaneRangeSets_.value().write(context.getRoutingLaneRangeSets(), out);
    }

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        // check parameters
        if (m_routingTransitionSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionSets: ") <<
                    m_routingTransitionSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_routingTransitionSets_.value().write(context.getRoutingTransitionSets(), out);
    }

    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES)
    {
        m_profiles_.value().writePacked(*this, out);
    }
}

void LaneRoutingLayer::ZserioElementFactory_profiles::create(LaneRoutingLayer&        ,
        ::zserio::vector<::nds::routingdata::types::SpeedProfile>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneRoutingLayer::ZserioElementFactory_profiles::create(LaneRoutingLayer&        ,
        ::zserio::vector<::nds::routingdata::types::SpeedProfile>& array,
        ::nds::routingdata::types::SpeedProfile::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::routingdata::metadata::LaneRoutingLayerContent LaneRoutingLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::routingdata::metadata::LaneRoutingLayerContent(in);
}

::nds::routingdata::metadata::LaneRoutingLayerContent LaneRoutingLayer::readContent(LaneRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::routingdata::metadata::LaneRoutingLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList> LaneRoutingLayer::readRoutingLaneRangeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList>(::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList> LaneRoutingLayer::readRoutingLaneRangeMaps(LaneRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList>(::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList(context.getRoutingLaneRangeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList> LaneRoutingLayer::readRoutingTransitionMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList>(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList> LaneRoutingLayer::readRoutingTransitionMaps(LaneRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList>(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList(context.getRoutingTransitionMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList> LaneRoutingLayer::readRoutingLaneRangeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList>(::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList> LaneRoutingLayer::readRoutingLaneRangeSets(LaneRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList>(::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList(context.getRoutingLaneRangeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList> LaneRoutingLayer::readRoutingTransitionSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList>(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList> LaneRoutingLayer::readRoutingTransitionSets(LaneRoutingLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList>(::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList(context.getRoutingTransitionSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingLaneTransitionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<LaneRoutingLayer::ZserioArrayType_profiles> LaneRoutingLayer::readProfiles(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES)
    {
        ZserioArrayType_profiles readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<LaneRoutingLayer::ZserioArrayType_profiles> LaneRoutingLayer::readProfiles(LaneRoutingLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES) == ::nds::routingdata::metadata::LaneRoutingLayerContent::Values::SPEED_PROFILES)
    {
        ZserioArrayType_profiles readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles>(::zserio::NullOpt);
}

} // namespace layer
} // namespace routingdata
} // namespace nds
