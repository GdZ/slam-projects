/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTINGDATA_LAYER_ROAD_ROUTING_LAYER_H
#define NDS_ROUTINGDATA_LAYER_ROAD_ROUTING_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/routingdata/instantiations/RoutingRoadRangeAttributeMapList.h>
#include <nds/routingdata/instantiations/RoutingRoadRangeAttributeSetList.h>
#include <nds/routingdata/instantiations/RoutingRoadTransitionAttributeMapList.h>
#include <nds/routingdata/instantiations/RoutingRoadTransitionAttributeSetList.h>
#include <nds/routingdata/metadata/RoadRoutingLayerContent.h>
#include <nds/routingdata/types/SpeedProfile.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace routingdata
{
namespace layer
{

class RoadRoutingLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList::ZserioPackingContext& getRoutingRoadRangeMaps()
        {
            return m_routingRoadRangeMaps_;
        }

        ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList::ZserioPackingContext& getRoutingTransitionMaps()
        {
            return m_routingTransitionMaps_;
        }

        ::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList::ZserioPackingContext& getRoutingRoadRangeSets()
        {
            return m_routingRoadRangeSets_;
        }

        ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList::ZserioPackingContext& getRoutingTransitionSets()
        {
            return m_routingTransitionSets_;
        }

    private:
        ::zserio::DeltaContext m_shift_;
        ::zserio::DeltaContext m_content_;
        ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList::ZserioPackingContext m_routingRoadRangeMaps_;
        ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList::ZserioPackingContext m_routingTransitionMaps_;
        ::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList::ZserioPackingContext m_routingRoadRangeSets_;
        ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList::ZserioPackingContext m_routingTransitionSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadRoutingLayer() noexcept :
            RoadRoutingLayer(allocator_type())
    {}

    explicit RoadRoutingLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_routingRoadRangeMaps = ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList,
            typename ZSERIO_T_routingTransitionMaps = ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList,
            typename ZSERIO_T_routingRoadRangeSets = ::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList,
            typename ZSERIO_T_routingTransitionSets = ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList,
            typename ZSERIO_T_profiles = ::zserio::vector<::nds::routingdata::types::SpeedProfile>>
    RoadRoutingLayer(
            ::nds::core::geometry::CoordShift shift_,
            ::nds::routingdata::metadata::RoadRoutingLayerContent content_,
            ZSERIO_T_routingRoadRangeMaps&& routingRoadRangeMaps_,
            ZSERIO_T_routingTransitionMaps&& routingTransitionMaps_,
            ZSERIO_T_routingRoadRangeSets&& routingRoadRangeSets_,
            ZSERIO_T_routingTransitionSets&& routingTransitionSets_,
            ZSERIO_T_profiles&& profiles_,
            const allocator_type& allocator = allocator_type()) :
            RoadRoutingLayer(allocator)
    {
        m_shift_ = shift_;
        m_content_ = content_;
        m_routingRoadRangeMaps_ = ::std::forward<ZSERIO_T_routingRoadRangeMaps>(routingRoadRangeMaps_);
        m_routingTransitionMaps_ = ::std::forward<ZSERIO_T_routingTransitionMaps>(routingTransitionMaps_);
        m_routingRoadRangeSets_ = ::std::forward<ZSERIO_T_routingRoadRangeSets>(routingRoadRangeSets_);
        m_routingTransitionSets_ = ::std::forward<ZSERIO_T_routingTransitionSets>(routingTransitionSets_);
        m_profiles_ = ::zserio::createOptionalArray<ZserioArrayType_profiles>(::std::forward<ZSERIO_T_profiles>(profiles_));
    }

    explicit RoadRoutingLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadRoutingLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadRoutingLayer() = default;

    RoadRoutingLayer(const RoadRoutingLayer& other);
    RoadRoutingLayer& operator=(const RoadRoutingLayer& other);

    RoadRoutingLayer(RoadRoutingLayer&& other);
    RoadRoutingLayer& operator=(RoadRoutingLayer&& other);

    RoadRoutingLayer(::zserio::PropagateAllocatorT,
            const RoadRoutingLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    ::nds::routingdata::metadata::RoadRoutingLayerContent getContent() const;
    void setContent(::nds::routingdata::metadata::RoadRoutingLayerContent content_);

    const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList& getRoutingRoadRangeMaps() const;
    ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList& getRoutingRoadRangeMaps();
    void setRoutingRoadRangeMaps(const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList& routingRoadRangeMaps_);
    void setRoutingRoadRangeMaps(::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList&& routingRoadRangeMaps_);
    bool isRoutingRoadRangeMapsUsed() const;
    bool isRoutingRoadRangeMapsSet() const;
    void resetRoutingRoadRangeMaps();

    const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList& getRoutingTransitionMaps() const;
    ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList& getRoutingTransitionMaps();
    void setRoutingTransitionMaps(const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList& routingTransitionMaps_);
    void setRoutingTransitionMaps(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList&& routingTransitionMaps_);
    bool isRoutingTransitionMapsUsed() const;
    bool isRoutingTransitionMapsSet() const;
    void resetRoutingTransitionMaps();

    const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList& getRoutingRoadRangeSets() const;
    ::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList& getRoutingRoadRangeSets();
    void setRoutingRoadRangeSets(const ::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList& routingRoadRangeSets_);
    void setRoutingRoadRangeSets(::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList&& routingRoadRangeSets_);
    bool isRoutingRoadRangeSetsUsed() const;
    bool isRoutingRoadRangeSetsSet() const;
    void resetRoutingRoadRangeSets();

    const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList& getRoutingTransitionSets() const;
    ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList& getRoutingTransitionSets();
    void setRoutingTransitionSets(const ::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList& routingTransitionSets_);
    void setRoutingTransitionSets(::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList&& routingTransitionSets_);
    bool isRoutingTransitionSetsUsed() const;
    bool isRoutingTransitionSetsSet() const;
    void resetRoutingTransitionSets();

    const ::zserio::vector<::nds::routingdata::types::SpeedProfile>& getProfiles() const;
    ::zserio::vector<::nds::routingdata::types::SpeedProfile>& getProfiles();
    void setProfiles(const ::zserio::vector<::nds::routingdata::types::SpeedProfile>& profiles_);
    void setProfiles(::zserio::vector<::nds::routingdata::types::SpeedProfile>&& profiles_);
    bool isProfilesUsed() const;
    bool isProfilesSet() const;
    void resetProfiles();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadRoutingLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_profiles
    {
    public:
        using OwnerType = RoadRoutingLayer;

        static void create(RoadRoutingLayer& owner,
                ::zserio::vector<::nds::routingdata::types::SpeedProfile>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadRoutingLayer& owner,
                ::zserio::vector<::nds::routingdata::types::SpeedProfile>& array,
                ::nds::routingdata::types::SpeedProfile::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_profiles = ::zserio::Array<::zserio::vector<::nds::routingdata::types::SpeedProfile>, ::zserio::ObjectArrayTraits<::nds::routingdata::types::SpeedProfile, ZserioElementFactory_profiles>, ::zserio::ArrayType::AUTO>;

    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::routingdata::metadata::RoadRoutingLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::routingdata::metadata::RoadRoutingLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList> readRoutingRoadRangeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList> readRoutingRoadRangeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList> readRoutingTransitionMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList> readRoutingTransitionMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList> readRoutingRoadRangeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList> readRoutingRoadRangeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList> readRoutingTransitionSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList> readRoutingTransitionSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles> readProfiles(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles> readProfiles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::core::geometry::CoordShift m_shift_;
    ::nds::routingdata::metadata::RoadRoutingLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeMapList> m_routingRoadRangeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeMapList> m_routingTransitionMaps_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadRangeAttributeSetList> m_routingRoadRangeSets_;
    ::zserio::InplaceOptionalHolder<::nds::routingdata::instantiations::RoutingRoadTransitionAttributeSetList> m_routingTransitionSets_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_profiles> m_profiles_;
};

} // namespace layer
} // namespace routingdata
} // namespace nds

#endif // NDS_ROUTINGDATA_LAYER_ROAD_ROUTING_LAYER_H
