/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_FILESTORE_SMART_LAYER_METADATA_TABLE_H
#define NDS_SMART_FILESTORE_SMART_LAYER_METADATA_TABLE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <memory>
#include <sqlite3.h>
#include <zserio/Vector.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/AllocatorHolder.h>
#include <zserio/Span.h>
#include <zserio/StringView.h>
#include <zserio/SqliteConnection.h>
#include <zserio/SqliteFinalizer.h>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/smart/metadata/SmartLayerDefinition.h>
#include <nds/smart/metadata/SmartLayerRegistryMetadata.h>
#include <nds/system/types/ModuleDefinition.h>
#include <nds/system/types/NdsNodeLegalInfo.h>
#include <nds/system/types/NdsSystemToken.h>

namespace nds
{
namespace smart
{
namespace filestore
{

class SmartLayerMetadataTable : public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    class Row
    {
    public:
        uint8_t getId() const;
        void setId(uint8_t id_);
        void resetId();
        bool isIdSet() const;

        ::nds::smart::metadata::SmartLayerRegistryMetadata& getRegistryMetadata();
        const ::nds::smart::metadata::SmartLayerRegistryMetadata& getRegistryMetadata() const;
        void setRegistryMetadata(const ::nds::smart::metadata::SmartLayerRegistryMetadata& registryMetadata_);
        void setRegistryMetadata(::nds::smart::metadata::SmartLayerRegistryMetadata&& registryMetadata_);
        void resetRegistryMetadata();
        bool isRegistryMetadataSet() const;

        ::nds::system::types::ModuleDefinition& getModuleDefinition();
        const ::nds::system::types::ModuleDefinition& getModuleDefinition() const;
        void setModuleDefinition(const ::nds::system::types::ModuleDefinition& moduleDefinition_);
        void setModuleDefinition(::nds::system::types::ModuleDefinition&& moduleDefinition_);
        void resetModuleDefinition();
        bool isModuleDefinitionSet() const;

        ::nds::smart::metadata::SmartLayerDefinition& getDefinition();
        const ::nds::smart::metadata::SmartLayerDefinition& getDefinition() const;
        void setDefinition(const ::nds::smart::metadata::SmartLayerDefinition& definition_);
        void setDefinition(::nds::smart::metadata::SmartLayerDefinition&& definition_);
        void resetDefinition();
        bool isDefinitionSet() const;

        ::nds::system::types::NdsSystemToken& getNodeSystemReference();
        const ::nds::system::types::NdsSystemToken& getNodeSystemReference() const;
        void setNodeSystemReference(const ::nds::system::types::NdsSystemToken& nodeSystemReference_);
        void setNodeSystemReference(::nds::system::types::NdsSystemToken&& nodeSystemReference_);
        void resetNodeSystemReference();
        bool isNodeSystemReferenceSet() const;

        ::nds::system::types::NdsNodeLegalInfo& getNodeLegalInfo();
        const ::nds::system::types::NdsNodeLegalInfo& getNodeLegalInfo() const;
        void setNodeLegalInfo(const ::nds::system::types::NdsNodeLegalInfo& nodeLegalInfo_);
        void setNodeLegalInfo(::nds::system::types::NdsNodeLegalInfo&& nodeLegalInfo_);
        void resetNodeLegalInfo();
        bool isNodeLegalInfoSet() const;

        void initializeChildren();

    private:
        ::zserio::InplaceOptionalHolder<uint8_t> m_id_;
        ::zserio::InplaceOptionalHolder<::nds::smart::metadata::SmartLayerRegistryMetadata> m_registryMetadata_;
        ::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition> m_moduleDefinition_;
        ::zserio::InplaceOptionalHolder<::nds::smart::metadata::SmartLayerDefinition> m_definition_;
        ::zserio::InplaceOptionalHolder<::nds::system::types::NdsSystemToken> m_nodeSystemReference_;
        ::zserio::InplaceOptionalHolder<::nds::system::types::NdsNodeLegalInfo> m_nodeLegalInfo_;
    };

    class Reader : public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
    {
    public:
        ~Reader() = default;

        Reader(const Reader&) = delete;
        Reader& operator=(const Reader&) = delete;

        Reader(Reader&&) = default;
        Reader& operator=(Reader&&) = delete;

        bool hasNext() const noexcept;
        Row next();

    private:
        explicit Reader(::zserio::SqliteConnection& db, const ::zserio::string<>& sqlQuery, const allocator_type& allocator = allocator_type());
        friend class SmartLayerMetadataTable;

        void makeStep();

        ::std::unique_ptr<sqlite3_stmt, ::zserio::SqliteFinalizer> m_stmt;
        int m_lastResult;
    };

    SmartLayerMetadataTable(::zserio::SqliteConnection& db, ::zserio::StringView tableName,
            ::zserio::StringView attachedDbName = ::zserio::StringView(),
            const allocator_type& allocator = allocator_type());
    SmartLayerMetadataTable(::zserio::SqliteConnection& db, ::zserio::StringView tableName, const allocator_type& allocator);

    ~SmartLayerMetadataTable() = default;

    SmartLayerMetadataTable(const SmartLayerMetadataTable&) = delete;
    SmartLayerMetadataTable& operator=(const SmartLayerMetadataTable&) = delete;

    SmartLayerMetadataTable(SmartLayerMetadataTable&&) = delete;
    SmartLayerMetadataTable& operator=(SmartLayerMetadataTable&&) = delete;

    void createTable();
    void deleteTable();

    Reader createReader(::zserio::StringView condition = ::zserio::StringView()) const;
    void write(::zserio::Span<Row> rows);
    void update(Row& row, ::zserio::StringView whereCondition);

private:
    void writeRow(Row& row, sqlite3_stmt& statement);

    void appendCreateTableToQuery(::zserio::string<>& sqlQuery) const;

    void appendTableNameToQuery(::zserio::string<>& sqlQuery) const;

    ::zserio::SqliteConnection& m_db;
    ::zserio::StringView m_name;
    ::zserio::StringView m_attachedDbName;
};

} // namespace filestore
} // namespace smart
} // namespace nds

#endif // NDS_SMART_FILESTORE_SMART_LAYER_METADATA_TABLE_H
