/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_SERVICES_SMART_LAYER_TILE_SERVICE_H
#define NDS_SMART_SERVICES_SMART_LAYER_TILE_SERVICE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>
#include <zserio/Types.h>
#include <zserio/IService.h>
#include <zserio/AllocatorHolder.h>
#include <zserio/ServiceException.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/Empty.h>
#include <nds/core/types/TileId.h>
#include <nds/core/types/TileIdList.h>
#include <nds/smart/metadata/SmartLayerDefinition.h>
#include <nds/smart/metadata/TileServiceCapabilitiesResponse.h>
#include <nds/smart/tile/DataLayerTileVersionRequest.h>
#include <nds/smart/tile/DeltaTileInfo.h>
#include <nds/smart/tile/DeltaTileListInfo.h>
#include <nds/smart/tile/MultiDataLayerMultiTileRequest.h>
#include <nds/smart/tile/MultiDataLayerMultiTileResponse.h>
#include <nds/smart/tile/SmartLayerTile.h>
#include <nds/smart/tile/SmartLayerTileHeaderList.h>
#include <nds/smart/tile/SmartLayerTileList.h>
#include <nds/smart/tile/SmartLayerTileVersionRequest.h>
#include <nds/smart/tile/SmartLayerTileVersionRequestList.h>
#include <nds/smart/types/DataLayer.h>
#include <nds/smart/types/SmartLayerHeader.h>
#include <nds/system/types/ModuleDefinition.h>
#include <nds/system/types/NdsNodeLegalInfo.h>
#include <nds/system/types/NdsSystemToken.h>

namespace nds
{
namespace smart
{
namespace services
{

namespace SmartLayerTileService
{

class Service :
        public ::zserio::IService,
        public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    explicit Service(const allocator_type& allocator = allocator_type());
    ~Service() override = default;

    Service(const Service&) = delete;
    Service& operator=(const Service&) = delete;

    Service(Service&&) = default;
    Service& operator=(Service&&) = delete;

    ::zserio::IServiceDataPtr callMethod(
            ::zserio::StringView methodName, ::zserio::Span<const uint8_t> requestData,
            void* context) override;

    static ::zserio::StringView serviceFullName() noexcept;
    static const ::std::array<::zserio::StringView, 16>& methodNames() noexcept;

private:
    virtual ::nds::system::types::ModuleDefinition getServiceModuleDefinitionImpl(const ::nds::core::types::Empty& request, void* context) = 0;
    virtual ::nds::smart::metadata::SmartLayerDefinition getServiceDefinitionImpl(const ::nds::core::types::Empty& request, void* context) = 0;
    virtual ::nds::system::types::NdsSystemToken getServiceNodeSystemReferenceImpl(const ::nds::core::types::Empty& request, void* context) = 0;
    virtual ::nds::system::types::NdsNodeLegalInfo getServiceNodeLegalInfoImpl(const ::nds::core::types::Empty& request, void* context) = 0;
    virtual ::nds::smart::metadata::TileServiceCapabilitiesResponse getTileServiceCapabilitiesImpl(const ::nds::core::types::Empty& request, void* context) = 0;
    virtual ::nds::smart::tile::SmartLayerTile getLayerByTileIdImpl(const ::nds::core::types::TileId& request, void* context) = 0;
    virtual ::nds::smart::tile::SmartLayerTileList getLayerByTileIdListImpl(const ::nds::core::types::TileIdList& request, void* context) = 0;
    virtual ::nds::smart::types::SmartLayerHeader getHeaderOnlyByTileIdImpl(const ::nds::core::types::TileId& request, void* context) = 0;
    virtual ::nds::smart::tile::SmartLayerTileHeaderList getHeaderOnlyByTileIdListImpl(const ::nds::core::types::TileIdList& request, void* context) = 0;
    virtual ::nds::smart::tile::SmartLayerTileHeaderList getHeaderOnlyListInTileImpl(const ::nds::core::types::TileId& request, void* context) = 0;
    virtual ::nds::smart::tile::SmartLayerTile getDeltaLayerByTileIdImpl(const ::nds::smart::tile::DeltaTileInfo& request, void* context) = 0;
    virtual ::nds::smart::tile::SmartLayerTileList getDeltaLayerByTileIdListImpl(const ::nds::smart::tile::DeltaTileListInfo& request, void* context) = 0;
    virtual ::nds::smart::tile::SmartLayerTile getLayerByTileVersionImpl(const ::nds::smart::tile::SmartLayerTileVersionRequest& request, void* context) = 0;
    virtual ::nds::smart::tile::SmartLayerTileList getLayerByTileVersionListImpl(const ::nds::smart::tile::SmartLayerTileVersionRequestList& request, void* context) = 0;
    virtual ::nds::smart::types::DataLayer getSingleDataLayerByTileIdImpl(const ::nds::smart::tile::DataLayerTileVersionRequest& request, void* context) = 0;
    virtual ::nds::smart::tile::MultiDataLayerMultiTileResponse getDataLayerListByTileIdListImpl(const ::nds::smart::tile::MultiDataLayerMultiTileRequest& request, void* context) = 0;

    ::zserio::IServiceDataPtr getServiceModuleDefinitionMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getServiceDefinitionMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getServiceNodeSystemReferenceMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getServiceNodeLegalInfoMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getTileServiceCapabilitiesMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getLayerByTileIdMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getLayerByTileIdListMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getHeaderOnlyByTileIdMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getHeaderOnlyByTileIdListMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getHeaderOnlyListInTileMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getDeltaLayerByTileIdMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getDeltaLayerByTileIdListMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getLayerByTileVersionMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getLayerByTileVersionListMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getSingleDataLayerByTileIdMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
    ::zserio::IServiceDataPtr getDataLayerListByTileIdListMethod(
            ::zserio::Span<const uint8_t> requestData, void* context);
};

class Client : public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    explicit Client(::zserio::IServiceClient& service, const allocator_type& allocator = allocator_type());
    ~Client() = default;

    Client(const Client&) = delete;
    Client& operator=(const Client&) = delete;

    Client(Client&&) = default;
    Client& operator=(Client&&) = delete;

    ::nds::system::types::ModuleDefinition getServiceModuleDefinitionMethod(const ::nds::core::types::Empty& request, void* context = nullptr);

    ::nds::smart::metadata::SmartLayerDefinition getServiceDefinitionMethod(const ::nds::core::types::Empty& request, void* context = nullptr);

    ::nds::system::types::NdsSystemToken getServiceNodeSystemReferenceMethod(const ::nds::core::types::Empty& request, void* context = nullptr);

    ::nds::system::types::NdsNodeLegalInfo getServiceNodeLegalInfoMethod(const ::nds::core::types::Empty& request, void* context = nullptr);

    ::nds::smart::metadata::TileServiceCapabilitiesResponse getTileServiceCapabilitiesMethod(const ::nds::core::types::Empty& request, void* context = nullptr);

    ::nds::smart::tile::SmartLayerTile getLayerByTileIdMethod(const ::nds::core::types::TileId& request, void* context = nullptr);

    ::nds::smart::tile::SmartLayerTileList getLayerByTileIdListMethod(const ::nds::core::types::TileIdList& request, void* context = nullptr);

    ::nds::smart::types::SmartLayerHeader getHeaderOnlyByTileIdMethod(const ::nds::core::types::TileId& request, void* context = nullptr);

    ::nds::smart::tile::SmartLayerTileHeaderList getHeaderOnlyByTileIdListMethod(const ::nds::core::types::TileIdList& request, void* context = nullptr);

    ::nds::smart::tile::SmartLayerTileHeaderList getHeaderOnlyListInTileMethod(const ::nds::core::types::TileId& request, void* context = nullptr);

    ::nds::smart::tile::SmartLayerTile getDeltaLayerByTileIdMethod(const ::nds::smart::tile::DeltaTileInfo& request, void* context = nullptr);

    ::nds::smart::tile::SmartLayerTileList getDeltaLayerByTileIdListMethod(const ::nds::smart::tile::DeltaTileListInfo& request, void* context = nullptr);

    ::nds::smart::tile::SmartLayerTile getLayerByTileVersionMethod(const ::nds::smart::tile::SmartLayerTileVersionRequest& request, void* context = nullptr);

    ::nds::smart::tile::SmartLayerTileList getLayerByTileVersionListMethod(const ::nds::smart::tile::SmartLayerTileVersionRequestList& request, void* context = nullptr);

    ::nds::smart::types::DataLayer getSingleDataLayerByTileIdMethod(const ::nds::smart::tile::DataLayerTileVersionRequest& request, void* context = nullptr);

    ::nds::smart::tile::MultiDataLayerMultiTileResponse getDataLayerListByTileIdListMethod(const ::nds::smart::tile::MultiDataLayerMultiTileRequest& request, void* context = nullptr);

private:
    ::zserio::IServiceClient& m_service;
};

} // namespace SmartLayerTileService

} // namespace services
} // namespace smart
} // namespace nds

#endif // NDS_SMART_SERVICES_SMART_LAYER_TILE_SERVICE_H
