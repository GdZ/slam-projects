/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_OBJECT_SMART_LAYER_OBJECT_H
#define NDS_SMART_OBJECT_SMART_LAYER_OBJECT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/smart/object/SmartLayerObjectId.h>
#include <nds/smart/types/DataLayer.h>
#include <nds/smart/types/SmartLayerHeader.h>

namespace nds
{
namespace smart
{
namespace object
{

class SmartLayerObject
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

        ::nds::smart::types::SmartLayerHeader::ZserioPackingContext& getHeader()
        {
            return m_header_;
        }

    private:
        ::zserio::DeltaContext m_id_;
        ::nds::smart::types::SmartLayerHeader::ZserioPackingContext m_header_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SmartLayerObject() noexcept :
            SmartLayerObject(allocator_type())
    {}

    explicit SmartLayerObject(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_header = ::nds::smart::types::SmartLayerHeader,
            typename ZSERIO_T_layers = ::zserio::vector<::nds::smart::types::DataLayer>>
    SmartLayerObject(
            ::nds::smart::object::SmartLayerObjectId id_,
            ZSERIO_T_header&& header_,
            ZSERIO_T_layers&& layers_,
            const allocator_type& allocator = allocator_type()) :
            SmartLayerObject(allocator)
    {
        m_id_ = id_;
        m_header_ = ::std::forward<ZSERIO_T_header>(header_);
        m_layers_ = ZserioArrayType_layers(::std::forward<ZSERIO_T_layers>(layers_));
    }

    explicit SmartLayerObject(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SmartLayerObject(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SmartLayerObject() = default;

    SmartLayerObject(const SmartLayerObject&) = default;
    SmartLayerObject& operator=(const SmartLayerObject&) = default;

    SmartLayerObject(SmartLayerObject&&) = default;
    SmartLayerObject& operator=(SmartLayerObject&&) = default;

    SmartLayerObject(::zserio::PropagateAllocatorT,
            const SmartLayerObject& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::smart::object::SmartLayerObjectId getId() const;
    void setId(::nds::smart::object::SmartLayerObjectId id_);

    const ::nds::smart::types::SmartLayerHeader& getHeader() const;
    ::nds::smart::types::SmartLayerHeader& getHeader();
    void setHeader(const ::nds::smart::types::SmartLayerHeader& header_);
    void setHeader(::nds::smart::types::SmartLayerHeader&& header_);

    const ::zserio::vector<::nds::smart::types::DataLayer>& getLayers() const;
    ::zserio::vector<::nds::smart::types::DataLayer>& getLayers();
    void setLayers(const ::zserio::vector<::nds::smart::types::DataLayer>& layers_);
    void setLayers(::zserio::vector<::nds::smart::types::DataLayer>&& layers_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartLayerObject& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_layers
    {
    public:
        using OwnerType = SmartLayerObject;

        static void create(SmartLayerObject& owner,
                ::zserio::vector<::nds::smart::types::DataLayer>& array,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_layers = ::zserio::Array<::zserio::vector<::nds::smart::types::DataLayer>, ::zserio::ObjectArrayTraits<::nds::smart::types::DataLayer, ZserioElementFactory_layers>, ::zserio::ArrayType::NORMAL>;

    ::nds::smart::object::SmartLayerObjectId readId(::zserio::BitStreamReader& in);
    ::nds::smart::object::SmartLayerObjectId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::smart::types::SmartLayerHeader readHeader(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::types::SmartLayerHeader readHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_layers readLayers(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::smart::object::SmartLayerObjectId m_id_;
    ::nds::smart::types::SmartLayerHeader m_header_;
    ZserioArrayType_layers m_layers_;
};

} // namespace object
} // namespace smart
} // namespace nds

#endif // NDS_SMART_OBJECT_SMART_LAYER_OBJECT_H
