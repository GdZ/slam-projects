/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_OBJECT_DATA_LAYER_OBJECT_VERSION_REQUEST_H
#define NDS_SMART_OBJECT_DATA_LAYER_OBJECT_VERSION_REQUEST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/smart/object/SmartLayerObjectReference.h>
#include <nds/smart/types/DataLayerId.h>
#include <nds/smart/types/DataLayerLifetime.h>

namespace nds
{
namespace smart
{
namespace object
{

class DataLayerObjectVersionRequest
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::smart::object::SmartLayerObjectReference::ZserioPackingContext& getObjectReference()
        {
            return m_objectReference_;
        }

        ::zserio::DeltaContext& getLayerId()
        {
            return m_layerId_;
        }

        ::nds::smart::types::DataLayerLifetime::ZserioPackingContext& getLifetimeInfo()
        {
            return m_lifetimeInfo_;
        }

    private:
        ::nds::smart::object::SmartLayerObjectReference::ZserioPackingContext m_objectReference_;
        ::zserio::DeltaContext m_layerId_;
        ::nds::smart::types::DataLayerLifetime::ZserioPackingContext m_lifetimeInfo_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DataLayerObjectVersionRequest() noexcept :
            DataLayerObjectVersionRequest(allocator_type())
    {}

    explicit DataLayerObjectVersionRequest(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_objectReference = ::nds::smart::object::SmartLayerObjectReference,
            typename ZSERIO_T_lifetimeInfo = ::nds::smart::types::DataLayerLifetime,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_objectReference, DataLayerObjectVersionRequest, allocator_type> = 0>
    DataLayerObjectVersionRequest(
            ZSERIO_T_objectReference&& objectReference_,
            ::nds::smart::types::DataLayerId layerId_,
            ZSERIO_T_lifetimeInfo&& lifetimeInfo_,
            const allocator_type& allocator = allocator_type()) :
            DataLayerObjectVersionRequest(allocator)
    {
        m_objectReference_ = ::std::forward<ZSERIO_T_objectReference>(objectReference_);
        m_layerId_ = layerId_;
        m_lifetimeInfo_ = ::std::forward<ZSERIO_T_lifetimeInfo>(lifetimeInfo_);
    }

    explicit DataLayerObjectVersionRequest(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DataLayerObjectVersionRequest(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DataLayerObjectVersionRequest() = default;

    DataLayerObjectVersionRequest(const DataLayerObjectVersionRequest&) = default;
    DataLayerObjectVersionRequest& operator=(const DataLayerObjectVersionRequest&) = default;

    DataLayerObjectVersionRequest(DataLayerObjectVersionRequest&&) = default;
    DataLayerObjectVersionRequest& operator=(DataLayerObjectVersionRequest&&) = default;

    DataLayerObjectVersionRequest(::zserio::PropagateAllocatorT,
            const DataLayerObjectVersionRequest& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::smart::object::SmartLayerObjectReference& getObjectReference() const;
    ::nds::smart::object::SmartLayerObjectReference& getObjectReference();
    void setObjectReference(const ::nds::smart::object::SmartLayerObjectReference& objectReference_);
    void setObjectReference(::nds::smart::object::SmartLayerObjectReference&& objectReference_);

    ::nds::smart::types::DataLayerId getLayerId() const;
    void setLayerId(::nds::smart::types::DataLayerId layerId_);

    const ::nds::smart::types::DataLayerLifetime& getLifetimeInfo() const;
    ::nds::smart::types::DataLayerLifetime& getLifetimeInfo();
    void setLifetimeInfo(const ::nds::smart::types::DataLayerLifetime& lifetimeInfo_);
    void setLifetimeInfo(::nds::smart::types::DataLayerLifetime&& lifetimeInfo_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DataLayerObjectVersionRequest& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::smart::object::SmartLayerObjectReference readObjectReference(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::object::SmartLayerObjectReference readObjectReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::smart::types::DataLayerId readLayerId(::zserio::BitStreamReader& in);
    ::nds::smart::types::DataLayerId readLayerId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::smart::types::DataLayerLifetime readLifetimeInfo(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::types::DataLayerLifetime readLifetimeInfo(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::smart::object::SmartLayerObjectReference m_objectReference_;
    ::nds::smart::types::DataLayerId m_layerId_;
    ::nds::smart::types::DataLayerLifetime m_lifetimeInfo_;
};

} // namespace object
} // namespace smart
} // namespace nds

#endif // NDS_SMART_OBJECT_DATA_LAYER_OBJECT_VERSION_REQUEST_H
