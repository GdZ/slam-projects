/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_OBJECT_SMART_LAYER_OBJECT_REFERENCE_LIST_H
#define NDS_SMART_OBJECT_SMART_LAYER_OBJECT_REFERENCE_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/SpatialExtent.h>
#include <nds/smart/object/SmartLayerObjectReference.h>

namespace nds
{
namespace smart
{
namespace object
{

class SmartLayerObjectReferenceList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumObjects()
        {
            return m_numObjects_;
        }

    private:
        ::zserio::DeltaContext m_numObjects_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SmartLayerObjectReferenceList() noexcept :
            SmartLayerObjectReferenceList(allocator_type())
    {}

    explicit SmartLayerObjectReferenceList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_list = ::zserio::vector<::nds::smart::object::SmartLayerObjectReference>,
            typename ZSERIO_T_extent = ::zserio::vector<::nds::core::geometry::SpatialExtent>>
    SmartLayerObjectReferenceList(
            uint32_t numObjects_,
            ZSERIO_T_list&& list_,
            ZSERIO_T_extent&& extent_,
            const allocator_type& allocator = allocator_type()) :
            SmartLayerObjectReferenceList(allocator)
    {
        m_numObjects_ = numObjects_;
        m_list_ = ZserioArrayType_list(::std::forward<ZSERIO_T_list>(list_));
        m_extent_ = ::zserio::createOptionalArray<ZserioArrayType_extent>(::std::forward<ZSERIO_T_extent>(extent_));
    }

    explicit SmartLayerObjectReferenceList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SmartLayerObjectReferenceList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SmartLayerObjectReferenceList() = default;

    SmartLayerObjectReferenceList(const SmartLayerObjectReferenceList&) = default;
    SmartLayerObjectReferenceList& operator=(const SmartLayerObjectReferenceList&) = default;

    SmartLayerObjectReferenceList(SmartLayerObjectReferenceList&&) = default;
    SmartLayerObjectReferenceList& operator=(SmartLayerObjectReferenceList&&) = default;

    SmartLayerObjectReferenceList(::zserio::PropagateAllocatorT,
            const SmartLayerObjectReferenceList& other, const allocator_type& allocator);

    void initializeChildren();

    uint32_t getNumObjects() const;
    void setNumObjects(uint32_t numObjects_);

    const ::zserio::vector<::nds::smart::object::SmartLayerObjectReference>& getList() const;
    ::zserio::vector<::nds::smart::object::SmartLayerObjectReference>& getList();
    void setList(const ::zserio::vector<::nds::smart::object::SmartLayerObjectReference>& list_);
    void setList(::zserio::vector<::nds::smart::object::SmartLayerObjectReference>&& list_);

    const ::zserio::vector<::nds::core::geometry::SpatialExtent>& getExtent() const;
    ::zserio::vector<::nds::core::geometry::SpatialExtent>& getExtent();
    void setExtent(const ::zserio::vector<::nds::core::geometry::SpatialExtent>& extent_);
    void setExtent(::zserio::vector<::nds::core::geometry::SpatialExtent>&& extent_);
    bool isExtentUsed() const;
    bool isExtentSet() const;
    void resetExtent();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartLayerObjectReferenceList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_list
    {
    public:
        using OwnerType = SmartLayerObjectReferenceList;

        static void create(SmartLayerObjectReferenceList& owner,
                ::zserio::vector<::nds::smart::object::SmartLayerObjectReference>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SmartLayerObjectReferenceList& owner,
                ::zserio::vector<::nds::smart::object::SmartLayerObjectReference>& array,
                ::nds::smart::object::SmartLayerObjectReference::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_extent
    {
    public:
        using OwnerType = SmartLayerObjectReferenceList;

        static void initializeElement(SmartLayerObjectReferenceList& owner,
                ::nds::core::geometry::SpatialExtent& element, size_t index);
    };

    class ZserioElementFactory_extent
    {
    public:
        using OwnerType = SmartLayerObjectReferenceList;

        static void create(SmartLayerObjectReferenceList& owner,
                ::zserio::vector<::nds::core::geometry::SpatialExtent>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SmartLayerObjectReferenceList& owner,
                ::zserio::vector<::nds::core::geometry::SpatialExtent>& array,
                ::nds::core::geometry::SpatialExtent::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_list = ::zserio::Array<::zserio::vector<::nds::smart::object::SmartLayerObjectReference>, ::zserio::ObjectArrayTraits<::nds::smart::object::SmartLayerObjectReference, ZserioElementFactory_list>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_extent = ::zserio::Array<::zserio::vector<::nds::core::geometry::SpatialExtent>, ::zserio::ObjectArrayTraits<::nds::core::geometry::SpatialExtent, ZserioElementFactory_extent>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_extent>;

    uint32_t readNumObjects(::zserio::BitStreamReader& in);
    uint32_t readNumObjects(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_list readList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_list readList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_extent> readExtent(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_extent> readExtent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint32_t m_numObjects_;
    ZserioArrayType_list m_list_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_extent> m_extent_;
};

} // namespace object
} // namespace smart
} // namespace nds

#endif // NDS_SMART_OBJECT_SMART_LAYER_OBJECT_REFERENCE_LIST_H
