/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_PATH_SMART_LAYER_PATH_H
#define NDS_SMART_PATH_SMART_LAYER_PATH_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/smart/path/SmartLayerPathLocation.h>
#include <nds/smart/path/SmartLayerPathSegment.h>
#include <nds/smart/types/SmartLayerHeader.h>

namespace nds
{
namespace smart
{
namespace path
{

class SmartLayerPath
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::smart::types::SmartLayerHeader::ZserioPackingContext& getHeader()
        {
            return m_header_;
        }

        ::zserio::DeltaContext& getNumSegments()
        {
            return m_numSegments_;
        }

        ::nds::smart::path::SmartLayerPathLocation::ZserioPackingContext& getPathLocation()
        {
            return m_pathLocation_;
        }

    private:
        ::nds::smart::types::SmartLayerHeader::ZserioPackingContext m_header_;
        ::zserio::DeltaContext m_numSegments_;
        ::nds::smart::path::SmartLayerPathLocation::ZserioPackingContext m_pathLocation_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SmartLayerPath() noexcept :
            SmartLayerPath(allocator_type())
    {}

    explicit SmartLayerPath(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_header = ::nds::smart::types::SmartLayerHeader,
            typename ZSERIO_T_pathLocation = ::nds::smart::path::SmartLayerPathLocation,
            typename ZSERIO_T_segments = ::zserio::vector<::nds::smart::path::SmartLayerPathSegment>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_header, SmartLayerPath, allocator_type> = 0>
    SmartLayerPath(
            ZSERIO_T_header&& header_,
            uint32_t numSegments_,
            bool exactMatch_,
            ZSERIO_T_pathLocation&& pathLocation_,
            ZSERIO_T_segments&& segments_,
            const allocator_type& allocator = allocator_type()) :
            SmartLayerPath(allocator)
    {
        m_header_ = ::std::forward<ZSERIO_T_header>(header_);
        m_numSegments_ = numSegments_;
        m_exactMatch_ = exactMatch_;
        m_pathLocation_ = ::std::forward<ZSERIO_T_pathLocation>(pathLocation_);
        m_segments_ = ZserioArrayType_segments(::std::forward<ZSERIO_T_segments>(segments_));
    }

    explicit SmartLayerPath(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SmartLayerPath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SmartLayerPath() = default;

    SmartLayerPath(const SmartLayerPath& other);
    SmartLayerPath& operator=(const SmartLayerPath& other);

    SmartLayerPath(SmartLayerPath&& other);
    SmartLayerPath& operator=(SmartLayerPath&& other);

    SmartLayerPath(::zserio::PropagateAllocatorT,
            const SmartLayerPath& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::smart::types::SmartLayerHeader& getHeader() const;
    ::nds::smart::types::SmartLayerHeader& getHeader();
    void setHeader(const ::nds::smart::types::SmartLayerHeader& header_);
    void setHeader(::nds::smart::types::SmartLayerHeader&& header_);

    uint32_t getNumSegments() const;
    void setNumSegments(uint32_t numSegments_);

    bool getExactMatch() const;
    void setExactMatch(bool exactMatch_);

    const ::nds::smart::path::SmartLayerPathLocation& getPathLocation() const;
    ::nds::smart::path::SmartLayerPathLocation& getPathLocation();
    void setPathLocation(const ::nds::smart::path::SmartLayerPathLocation& pathLocation_);
    void setPathLocation(::nds::smart::path::SmartLayerPathLocation&& pathLocation_);
    bool isPathLocationUsed() const;
    bool isPathLocationSet() const;
    void resetPathLocation();

    const ::zserio::vector<::nds::smart::path::SmartLayerPathSegment>& getSegments() const;
    ::zserio::vector<::nds::smart::path::SmartLayerPathSegment>& getSegments();
    void setSegments(const ::zserio::vector<::nds::smart::path::SmartLayerPathSegment>& segments_);
    void setSegments(::zserio::vector<::nds::smart::path::SmartLayerPathSegment>&& segments_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartLayerPath& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_segments
    {
    public:
        using OwnerType = SmartLayerPath;

        static void initializeElement(SmartLayerPath& owner,
                ::nds::smart::path::SmartLayerPathSegment& element, size_t index);
    };

    class ZserioElementFactory_segments
    {
    public:
        using OwnerType = SmartLayerPath;

        static void create(SmartLayerPath& owner,
                ::zserio::vector<::nds::smart::path::SmartLayerPathSegment>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SmartLayerPath& owner,
                ::zserio::vector<::nds::smart::path::SmartLayerPathSegment>& array,
                ::nds::smart::path::SmartLayerPathSegment::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_segments = ::zserio::Array<::zserio::vector<::nds::smart::path::SmartLayerPathSegment>, ::zserio::ObjectArrayTraits<::nds::smart::path::SmartLayerPathSegment, ZserioElementFactory_segments>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_segments>;

    ::nds::smart::types::SmartLayerHeader readHeader(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::types::SmartLayerHeader readHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    uint32_t readNumSegments(::zserio::BitStreamReader& in);
    uint32_t readNumSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readExactMatch(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::smart::path::SmartLayerPathLocation> readPathLocation(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::smart::path::SmartLayerPathLocation> readPathLocation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_segments readSegments(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_segments readSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::smart::types::SmartLayerHeader m_header_;
    uint32_t m_numSegments_;
    bool m_exactMatch_;
    ::zserio::InplaceOptionalHolder<::nds::smart::path::SmartLayerPathLocation> m_pathLocation_;
    ZserioArrayType_segments m_segments_;
};

} // namespace path
} // namespace smart
} // namespace nds

#endif // NDS_SMART_PATH_SMART_LAYER_PATH_H
