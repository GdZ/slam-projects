/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_PATH_SMART_LAYER_POSE_PATH_REQUEST_H
#define NDS_SMART_PATH_SMART_LAYER_POSE_PATH_REQUEST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/vehicle/TimedRawPose.h>

namespace nds
{
namespace smart
{
namespace path
{

class SmartLayerPosePathRequest
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SmartLayerPosePathRequest() noexcept :
            SmartLayerPosePathRequest(allocator_type())
    {}

    explicit SmartLayerPosePathRequest(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_poses = ::zserio::vector<::nds::core::vehicle::TimedRawPose>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_poses, SmartLayerPosePathRequest, allocator_type> = 0>
    explicit SmartLayerPosePathRequest(
            ZSERIO_T_poses&& poses_,
            const allocator_type& allocator = allocator_type()) :
            SmartLayerPosePathRequest(allocator)
    {
        m_poses_ = ZserioArrayType_poses(::std::forward<ZSERIO_T_poses>(poses_));
    }

    explicit SmartLayerPosePathRequest(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SmartLayerPosePathRequest(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SmartLayerPosePathRequest() = default;

    SmartLayerPosePathRequest(const SmartLayerPosePathRequest&) = default;
    SmartLayerPosePathRequest& operator=(const SmartLayerPosePathRequest&) = default;

    SmartLayerPosePathRequest(SmartLayerPosePathRequest&&) = default;
    SmartLayerPosePathRequest& operator=(SmartLayerPosePathRequest&&) = default;

    SmartLayerPosePathRequest(::zserio::PropagateAllocatorT,
            const SmartLayerPosePathRequest& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::core::vehicle::TimedRawPose>& getPoses() const;
    ::zserio::vector<::nds::core::vehicle::TimedRawPose>& getPoses();
    void setPoses(const ::zserio::vector<::nds::core::vehicle::TimedRawPose>& poses_);
    void setPoses(::zserio::vector<::nds::core::vehicle::TimedRawPose>&& poses_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartLayerPosePathRequest& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_poses
    {
    public:
        using OwnerType = SmartLayerPosePathRequest;

        static void create(SmartLayerPosePathRequest& owner,
                ::zserio::vector<::nds::core::vehicle::TimedRawPose>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SmartLayerPosePathRequest& owner,
                ::zserio::vector<::nds::core::vehicle::TimedRawPose>& array,
                ::nds::core::vehicle::TimedRawPose::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_poses = ::zserio::Array<::zserio::vector<::nds::core::vehicle::TimedRawPose>, ::zserio::ObjectArrayTraits<::nds::core::vehicle::TimedRawPose, ZserioElementFactory_poses>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_poses readPoses(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_poses readPoses(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_poses m_poses_;
};

} // namespace path
} // namespace smart
} // namespace nds

#endif // NDS_SMART_PATH_SMART_LAYER_POSE_PATH_REQUEST_H
