/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_MESH_SMART_MESH_INDEX_H
#define NDS_SMART_MESH_SMART_MESH_INDEX_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/types/PackedTileId.h>
#include <nds/smart/mesh/SmartMeshId.h>
#include <nds/smart/types/SmartLayerHeader.h>

namespace nds
{
namespace smart
{
namespace mesh
{

class SmartMeshIndex
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumEntries()
        {
            return m_numEntries_;
        }

    private:
        ::zserio::DeltaContext m_numEntries_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SmartMeshIndex() noexcept :
            SmartMeshIndex(allocator_type())
    {}

    explicit SmartMeshIndex(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_tileIds = ::zserio::vector<::nds::core::types::PackedTileId>,
            typename ZSERIO_T_meshIds = ::zserio::vector<::nds::smart::mesh::SmartMeshId>,
            typename ZSERIO_T_header = ::zserio::vector<::nds::smart::types::SmartLayerHeader>,
            typename ZSERIO_T_meshSize = ::zserio::vector<uint32_t>>
    SmartMeshIndex(
            bool hasHeaders_,
            bool hasMeshSizes_,
            uint32_t numEntries_,
            ZSERIO_T_tileIds&& tileIds_,
            ZSERIO_T_meshIds&& meshIds_,
            ZSERIO_T_header&& header_,
            ZSERIO_T_meshSize&& meshSize_,
            const allocator_type& allocator = allocator_type()) :
            SmartMeshIndex(allocator)
    {
        m_hasHeaders_ = hasHeaders_;
        m_hasMeshSizes_ = hasMeshSizes_;
        m_numEntries_ = numEntries_;
        m_tileIds_ = ZserioArrayType_tileIds(::std::forward<ZSERIO_T_tileIds>(tileIds_));
        m_meshIds_ = ZserioArrayType_meshIds(::std::forward<ZSERIO_T_meshIds>(meshIds_));
        m_header_ = ::zserio::createOptionalArray<ZserioArrayType_header>(::std::forward<ZSERIO_T_header>(header_));
        m_meshSize_ = ::zserio::createOptionalArray<ZserioArrayType_meshSize>(::std::forward<ZSERIO_T_meshSize>(meshSize_));
    }

    explicit SmartMeshIndex(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SmartMeshIndex(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SmartMeshIndex() = default;

    SmartMeshIndex(const SmartMeshIndex&) = default;
    SmartMeshIndex& operator=(const SmartMeshIndex&) = default;

    SmartMeshIndex(SmartMeshIndex&&) = default;
    SmartMeshIndex& operator=(SmartMeshIndex&&) = default;

    SmartMeshIndex(::zserio::PropagateAllocatorT,
            const SmartMeshIndex& other, const allocator_type& allocator);

    void initializeChildren();

    bool getHasHeaders() const;
    void setHasHeaders(bool hasHeaders_);

    bool getHasMeshSizes() const;
    void setHasMeshSizes(bool hasMeshSizes_);

    uint32_t getNumEntries() const;
    void setNumEntries(uint32_t numEntries_);

    const ::zserio::vector<::nds::core::types::PackedTileId>& getTileIds() const;
    ::zserio::vector<::nds::core::types::PackedTileId>& getTileIds();
    void setTileIds(const ::zserio::vector<::nds::core::types::PackedTileId>& tileIds_);
    void setTileIds(::zserio::vector<::nds::core::types::PackedTileId>&& tileIds_);

    const ::zserio::vector<::nds::smart::mesh::SmartMeshId>& getMeshIds() const;
    ::zserio::vector<::nds::smart::mesh::SmartMeshId>& getMeshIds();
    void setMeshIds(const ::zserio::vector<::nds::smart::mesh::SmartMeshId>& meshIds_);
    void setMeshIds(::zserio::vector<::nds::smart::mesh::SmartMeshId>&& meshIds_);

    const ::zserio::vector<::nds::smart::types::SmartLayerHeader>& getHeader() const;
    ::zserio::vector<::nds::smart::types::SmartLayerHeader>& getHeader();
    void setHeader(const ::zserio::vector<::nds::smart::types::SmartLayerHeader>& header_);
    void setHeader(::zserio::vector<::nds::smart::types::SmartLayerHeader>&& header_);
    bool isHeaderUsed() const;
    bool isHeaderSet() const;
    void resetHeader();

    const ::zserio::vector<uint32_t>& getMeshSize() const;
    ::zserio::vector<uint32_t>& getMeshSize();
    void setMeshSize(const ::zserio::vector<uint32_t>& meshSize_);
    void setMeshSize(::zserio::vector<uint32_t>&& meshSize_);
    bool isMeshSizeUsed() const;
    bool isMeshSizeSet() const;
    void resetMeshSize();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartMeshIndex& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_meshIds
    {
    public:
        using OwnerType = SmartMeshIndex;

        static void create(SmartMeshIndex& owner,
                ::zserio::vector<::nds::smart::mesh::SmartMeshId>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SmartMeshIndex& owner,
                ::zserio::vector<::nds::smart::mesh::SmartMeshId>& array,
                ::nds::smart::mesh::SmartMeshId::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_header
    {
    public:
        using OwnerType = SmartMeshIndex;

        static void initializeElement(SmartMeshIndex& owner,
                ::nds::smart::types::SmartLayerHeader& element, size_t index);
    };

    class ZserioElementFactory_header
    {
    public:
        using OwnerType = SmartMeshIndex;

        static void create(SmartMeshIndex& owner,
                ::zserio::vector<::nds::smart::types::SmartLayerHeader>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SmartMeshIndex& owner,
                ::zserio::vector<::nds::smart::types::SmartLayerHeader>& array,
                ::nds::smart::types::SmartLayerHeader::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_tileIds = ::zserio::Array<::zserio::vector<::nds::core::types::PackedTileId>, ::zserio::StdIntArrayTraits<::nds::core::types::PackedTileId>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_meshIds = ::zserio::Array<::zserio::vector<::nds::smart::mesh::SmartMeshId>, ::zserio::ObjectArrayTraits<::nds::smart::mesh::SmartMeshId, ZserioElementFactory_meshIds>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_header = ::zserio::Array<::zserio::vector<::nds::smart::types::SmartLayerHeader>, ::zserio::ObjectArrayTraits<::nds::smart::types::SmartLayerHeader, ZserioElementFactory_header>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_header>;
    using ZserioArrayType_meshSize = ::zserio::Array<::zserio::vector<uint32_t>, ::zserio::VarIntNNArrayTraits<uint32_t>, ::zserio::ArrayType::NORMAL>;

    bool readHasHeaders(::zserio::BitStreamReader& in);
    bool readHasMeshSizes(::zserio::BitStreamReader& in);
    uint32_t readNumEntries(::zserio::BitStreamReader& in);
    uint32_t readNumEntries(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_tileIds readTileIds(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_tileIds readTileIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_meshIds readMeshIds(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_meshIds readMeshIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_header> readHeader(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_header> readHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_meshSize> readMeshSize(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_meshSize> readMeshSize(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_hasHeaders_;
    bool m_hasMeshSizes_;
    uint32_t m_numEntries_;
    ZserioArrayType_tileIds m_tileIds_;
    ZserioArrayType_meshIds m_meshIds_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_header> m_header_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_meshSize> m_meshSize_;
};

} // namespace mesh
} // namespace smart
} // namespace nds

#endif // NDS_SMART_MESH_SMART_MESH_INDEX_H
