/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_METADATA_SMART_LAYER_DEFINITION_H
#define NDS_SMART_METADATA_SMART_LAYER_DEFINITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/smart/metadata/SmartLayerContent.h>
#include <nds/smart/types/DataLayerDefinition.h>

namespace nds
{
namespace smart
{
namespace metadata
{

class SmartLayerDefinition
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::smart::metadata::SmartLayerContent::ZserioPackingContext& getDataContents()
        {
            return m_dataContents_;
        }

    private:
        ::nds::smart::metadata::SmartLayerContent::ZserioPackingContext m_dataContents_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SmartLayerDefinition() noexcept :
            SmartLayerDefinition(allocator_type())
    {}

    explicit SmartLayerDefinition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_dataContents = ::nds::smart::metadata::SmartLayerContent,
            typename ZSERIO_T_layerDefinitions = ::zserio::vector<::nds::smart::types::DataLayerDefinition>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_dataContents, SmartLayerDefinition, allocator_type> = 0>
    SmartLayerDefinition(
            ZSERIO_T_dataContents&& dataContents_,
            ZSERIO_T_layerDefinitions&& layerDefinitions_,
            const allocator_type& allocator = allocator_type()) :
            SmartLayerDefinition(allocator)
    {
        m_dataContents_ = ::std::forward<ZSERIO_T_dataContents>(dataContents_);
        m_layerDefinitions_ = ZserioArrayType_layerDefinitions(::std::forward<ZSERIO_T_layerDefinitions>(layerDefinitions_));
    }

    explicit SmartLayerDefinition(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SmartLayerDefinition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SmartLayerDefinition() = default;

    SmartLayerDefinition(const SmartLayerDefinition&) = default;
    SmartLayerDefinition& operator=(const SmartLayerDefinition&) = default;

    SmartLayerDefinition(SmartLayerDefinition&&) = default;
    SmartLayerDefinition& operator=(SmartLayerDefinition&&) = default;

    SmartLayerDefinition(::zserio::PropagateAllocatorT,
            const SmartLayerDefinition& other, const allocator_type& allocator);

    const ::nds::smart::metadata::SmartLayerContent& getDataContents() const;
    ::nds::smart::metadata::SmartLayerContent& getDataContents();
    void setDataContents(const ::nds::smart::metadata::SmartLayerContent& dataContents_);
    void setDataContents(::nds::smart::metadata::SmartLayerContent&& dataContents_);

    const ::zserio::vector<::nds::smart::types::DataLayerDefinition>& getLayerDefinitions() const;
    ::zserio::vector<::nds::smart::types::DataLayerDefinition>& getLayerDefinitions();
    void setLayerDefinitions(const ::zserio::vector<::nds::smart::types::DataLayerDefinition>& layerDefinitions_);
    void setLayerDefinitions(::zserio::vector<::nds::smart::types::DataLayerDefinition>&& layerDefinitions_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartLayerDefinition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_layerDefinitions
    {
    public:
        using OwnerType = SmartLayerDefinition;

        static void create(SmartLayerDefinition& owner,
                ::zserio::vector<::nds::smart::types::DataLayerDefinition>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SmartLayerDefinition& owner,
                ::zserio::vector<::nds::smart::types::DataLayerDefinition>& array,
                ::nds::smart::types::DataLayerDefinition::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_layerDefinitions = ::zserio::Array<::zserio::vector<::nds::smart::types::DataLayerDefinition>, ::zserio::ObjectArrayTraits<::nds::smart::types::DataLayerDefinition, ZserioElementFactory_layerDefinitions>, ::zserio::ArrayType::AUTO>;

    ::nds::smart::metadata::SmartLayerContent readDataContents(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::metadata::SmartLayerContent readDataContents(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_layerDefinitions readLayerDefinitions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_layerDefinitions readLayerDefinitions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::smart::metadata::SmartLayerContent m_dataContents_;
    ZserioArrayType_layerDefinitions m_layerDefinitions_;
};

} // namespace metadata
} // namespace smart
} // namespace nds

#endif // NDS_SMART_METADATA_SMART_LAYER_DEFINITION_H
