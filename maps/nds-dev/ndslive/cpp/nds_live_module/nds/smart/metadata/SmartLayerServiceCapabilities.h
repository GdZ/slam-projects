/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_METADATA_SMART_LAYER_SERVICE_CAPABILITIES_H
#define NDS_SMART_METADATA_SMART_LAYER_SERVICE_CAPABILITIES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/smart/metadata/MeshServiceCapabilities.h>
#include <nds/smart/metadata/ObjectServiceCapabilities.h>
#include <nds/smart/metadata/PathHorizonServiceCapabilities.h>
#include <nds/smart/metadata/PathServiceCapabilities.h>
#include <nds/smart/metadata/TileServiceCapabilities.h>
#include <nds/smart/types/SmartLayerType.h>

namespace nds
{
namespace smart
{
namespace metadata
{

class SmartLayerServiceCapabilities
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_tileServiceCapabilities = 0,
        CHOICE_objectServiceCapabilities = 1,
        CHOICE_pathServiceCapabilities = 2,
        CHOICE_meshServiceCapabilities = 3,
        CHOICE_pathHorizonServiceCapabilities = 4,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getTileServiceCapabilities()
        {
            return m_tileServiceCapabilities_;
        }

        ::zserio::DeltaContext& getObjectServiceCapabilities()
        {
            return m_objectServiceCapabilities_;
        }

        ::zserio::DeltaContext& getPathServiceCapabilities()
        {
            return m_pathServiceCapabilities_;
        }

        ::zserio::DeltaContext& getMeshServiceCapabilities()
        {
            return m_meshServiceCapabilities_;
        }

        ::zserio::DeltaContext& getPathHorizonServiceCapabilities()
        {
            return m_pathHorizonServiceCapabilities_;
        }

    private:
        ::zserio::DeltaContext m_tileServiceCapabilities_;
        ::zserio::DeltaContext m_objectServiceCapabilities_;
        ::zserio::DeltaContext m_pathServiceCapabilities_;
        ::zserio::DeltaContext m_meshServiceCapabilities_;
        ::zserio::DeltaContext m_pathHorizonServiceCapabilities_;
    };

    SmartLayerServiceCapabilities() noexcept :
            SmartLayerServiceCapabilities(allocator_type())
    {}

    explicit SmartLayerServiceCapabilities(const allocator_type& allocator) noexcept;

    explicit SmartLayerServiceCapabilities(::zserio::BitStreamReader& in,
            ::nds::smart::types::SmartLayerType type_, const allocator_type& allocator = allocator_type());
    explicit SmartLayerServiceCapabilities(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::smart::types::SmartLayerType type_, const allocator_type& allocator = allocator_type());

    ~SmartLayerServiceCapabilities() = default;

    SmartLayerServiceCapabilities(const SmartLayerServiceCapabilities& other);
    SmartLayerServiceCapabilities& operator=(const SmartLayerServiceCapabilities& other);

    SmartLayerServiceCapabilities(SmartLayerServiceCapabilities&& other);
    SmartLayerServiceCapabilities& operator=(SmartLayerServiceCapabilities&& other);

    SmartLayerServiceCapabilities(::zserio::PropagateAllocatorT,
            const SmartLayerServiceCapabilities& other, const allocator_type& allocator);

    void initialize(
            ::nds::smart::types::SmartLayerType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::smart::types::SmartLayerType getType() const;

    ::nds::smart::metadata::TileServiceCapabilities getTileServiceCapabilities() const;
    void setTileServiceCapabilities(::nds::smart::metadata::TileServiceCapabilities tileServiceCapabilities_);

    ::nds::smart::metadata::ObjectServiceCapabilities getObjectServiceCapabilities() const;
    void setObjectServiceCapabilities(::nds::smart::metadata::ObjectServiceCapabilities objectServiceCapabilities_);

    ::nds::smart::metadata::PathServiceCapabilities getPathServiceCapabilities() const;
    void setPathServiceCapabilities(::nds::smart::metadata::PathServiceCapabilities pathServiceCapabilities_);

    ::nds::smart::metadata::MeshServiceCapabilities getMeshServiceCapabilities() const;
    void setMeshServiceCapabilities(::nds::smart::metadata::MeshServiceCapabilities meshServiceCapabilities_);

    ::nds::smart::metadata::PathHorizonServiceCapabilities getPathHorizonServiceCapabilities() const;
    void setPathHorizonServiceCapabilities(::nds::smart::metadata::PathHorizonServiceCapabilities pathHorizonServiceCapabilities_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartLayerServiceCapabilities& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::smart::types::SmartLayerType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace metadata
} // namespace smart
} // namespace nds

#endif // NDS_SMART_METADATA_SMART_LAYER_SERVICE_CAPABILITIES_H
