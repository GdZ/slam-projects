/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_METADATA_SMART_LAYER_REGISTRY_METADATA_H
#define NDS_SMART_METADATA_SMART_LAYER_REGISTRY_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/smart/metadata/SmartLayerDefinition.h>
#include <nds/smart/metadata/SmartLayerMeshIndexContent.h>
#include <nds/smart/metadata/SmartLayerServiceCapabilities.h>
#include <nds/smart/object/SmartLayerObjectClass.h>
#include <nds/smart/types/SmartLayerType.h>

namespace nds
{
namespace smart
{
namespace metadata
{

class SmartLayerRegistryMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getSmartLayerType()
        {
            return m_smartLayerType_;
        }

        ::nds::smart::metadata::SmartLayerDefinition::ZserioPackingContext& getSmartLayerDefinition()
        {
            return m_smartLayerDefinition_;
        }

        ::nds::smart::metadata::SmartLayerServiceCapabilities::ZserioPackingContext& getCapabilities()
        {
            return m_capabilities_;
        }

        ::zserio::DeltaContext& getObjectClass()
        {
            return m_objectClass_;
        }

    private:
        ::zserio::DeltaContext m_smartLayerType_;
        ::nds::smart::metadata::SmartLayerDefinition::ZserioPackingContext m_smartLayerDefinition_;
        ::nds::smart::metadata::SmartLayerServiceCapabilities::ZserioPackingContext m_capabilities_;
        ::zserio::DeltaContext m_objectClass_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SmartLayerRegistryMetadata() noexcept :
            SmartLayerRegistryMetadata(allocator_type())
    {}

    explicit SmartLayerRegistryMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_smartLayerDefinition = ::nds::smart::metadata::SmartLayerDefinition,
            typename ZSERIO_T_capabilities = ::nds::smart::metadata::SmartLayerServiceCapabilities,
            typename ZSERIO_T_supportedLevels = ::zserio::vector<uint8_t>,
            typename ZSERIO_T_meshIndexContent = ::nds::smart::metadata::SmartLayerMeshIndexContent,
            typename ZSERIO_T_objectClass = ::nds::smart::object::SmartLayerObjectClass>
    SmartLayerRegistryMetadata(
            ::nds::smart::types::SmartLayerType smartLayerType_,
            ZSERIO_T_smartLayerDefinition&& smartLayerDefinition_,
            ZSERIO_T_capabilities&& capabilities_,
            ZSERIO_T_supportedLevels&& supportedLevels_,
            ZSERIO_T_meshIndexContent&& meshIndexContent_,
            ZSERIO_T_objectClass&& objectClass_,
            const allocator_type& allocator = allocator_type()) :
            SmartLayerRegistryMetadata(allocator)
    {
        m_smartLayerType_ = smartLayerType_;
        m_smartLayerDefinition_ = ::std::forward<ZSERIO_T_smartLayerDefinition>(smartLayerDefinition_);
        m_capabilities_ = ::std::forward<ZSERIO_T_capabilities>(capabilities_);
        m_supportedLevels_ = ::zserio::createOptionalArray<ZserioArrayType_supportedLevels>(::std::forward<ZSERIO_T_supportedLevels>(supportedLevels_));
        m_meshIndexContent_ = ::std::forward<ZSERIO_T_meshIndexContent>(meshIndexContent_);
        m_objectClass_ = ::std::forward<ZSERIO_T_objectClass>(objectClass_);
    }

    explicit SmartLayerRegistryMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SmartLayerRegistryMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SmartLayerRegistryMetadata() = default;

    SmartLayerRegistryMetadata(const SmartLayerRegistryMetadata& other);
    SmartLayerRegistryMetadata& operator=(const SmartLayerRegistryMetadata& other);

    SmartLayerRegistryMetadata(SmartLayerRegistryMetadata&& other);
    SmartLayerRegistryMetadata& operator=(SmartLayerRegistryMetadata&& other);

    SmartLayerRegistryMetadata(::zserio::PropagateAllocatorT,
            const SmartLayerRegistryMetadata& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::smart::types::SmartLayerType getSmartLayerType() const;
    void setSmartLayerType(::nds::smart::types::SmartLayerType smartLayerType_);

    const ::nds::smart::metadata::SmartLayerDefinition& getSmartLayerDefinition() const;
    ::nds::smart::metadata::SmartLayerDefinition& getSmartLayerDefinition();
    void setSmartLayerDefinition(const ::nds::smart::metadata::SmartLayerDefinition& smartLayerDefinition_);
    void setSmartLayerDefinition(::nds::smart::metadata::SmartLayerDefinition&& smartLayerDefinition_);

    const ::nds::smart::metadata::SmartLayerServiceCapabilities& getCapabilities() const;
    ::nds::smart::metadata::SmartLayerServiceCapabilities& getCapabilities();
    void setCapabilities(const ::nds::smart::metadata::SmartLayerServiceCapabilities& capabilities_);
    void setCapabilities(::nds::smart::metadata::SmartLayerServiceCapabilities&& capabilities_);

    const ::zserio::vector<uint8_t>& getSupportedLevels() const;
    ::zserio::vector<uint8_t>& getSupportedLevels();
    void setSupportedLevels(const ::zserio::vector<uint8_t>& supportedLevels_);
    void setSupportedLevels(::zserio::vector<uint8_t>&& supportedLevels_);
    bool isSupportedLevelsUsed() const;
    bool isSupportedLevelsSet() const;
    void resetSupportedLevels();

    const ::nds::smart::metadata::SmartLayerMeshIndexContent& getMeshIndexContent() const;
    ::nds::smart::metadata::SmartLayerMeshIndexContent& getMeshIndexContent();
    void setMeshIndexContent(const ::nds::smart::metadata::SmartLayerMeshIndexContent& meshIndexContent_);
    void setMeshIndexContent(::nds::smart::metadata::SmartLayerMeshIndexContent&& meshIndexContent_);
    bool isMeshIndexContentUsed() const;
    bool isMeshIndexContentSet() const;
    void resetMeshIndexContent();

    ::nds::smart::object::SmartLayerObjectClass getObjectClass() const;
    void setObjectClass(::nds::smart::object::SmartLayerObjectClass objectClass_);
    bool isObjectClassUsed() const;
    bool isObjectClassSet() const;
    void resetObjectClass();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartLayerRegistryMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_supportedLevels = ::zserio::Array<::zserio::vector<uint8_t>, ::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>, ::zserio::ArrayType::AUTO>;

    ::nds::smart::types::SmartLayerType readSmartLayerType(::zserio::BitStreamReader& in);
    ::nds::smart::types::SmartLayerType readSmartLayerType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::smart::metadata::SmartLayerDefinition readSmartLayerDefinition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::metadata::SmartLayerDefinition readSmartLayerDefinition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::smart::metadata::SmartLayerServiceCapabilities readCapabilities(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::metadata::SmartLayerServiceCapabilities readCapabilities(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_supportedLevels> readSupportedLevels(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_supportedLevels> readSupportedLevels(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::smart::metadata::SmartLayerMeshIndexContent> readMeshIndexContent(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::smart::object::SmartLayerObjectClass> readObjectClass(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::smart::object::SmartLayerObjectClass> readObjectClass(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    bool m_areChildrenInitialized;
    ::nds::smart::types::SmartLayerType m_smartLayerType_;
    ::nds::smart::metadata::SmartLayerDefinition m_smartLayerDefinition_;
    ::nds::smart::metadata::SmartLayerServiceCapabilities m_capabilities_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_supportedLevels> m_supportedLevels_;
    ::zserio::InplaceOptionalHolder<::nds::smart::metadata::SmartLayerMeshIndexContent> m_meshIndexContent_;
    ::zserio::InplaceOptionalHolder<::nds::smart::object::SmartLayerObjectClass> m_objectClass_;
};

} // namespace metadata
} // namespace smart
} // namespace nds

#endif // NDS_SMART_METADATA_SMART_LAYER_REGISTRY_METADATA_H
