/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_TYPES_DATA_LAYER_H
#define NDS_SMART_TYPES_DATA_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>

#include <nds/system/types/ExternData.h>

namespace nds
{
namespace smart
{
namespace types
{

class DataLayer
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    DataLayer() noexcept :
            DataLayer(allocator_type())
    {}

    explicit DataLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_signature = ::zserio::BitBuffer,
            typename ZSERIO_T_layer = ::nds::system::types::ExternData>
    DataLayer(
            bool hasSignature_,
            ZSERIO_T_signature&& signature_,
            ZSERIO_T_layer&& layer_,
            const allocator_type& allocator = allocator_type()) :
            DataLayer(allocator)
    {
        m_hasSignature_ = hasSignature_;
        m_signature_ = ::std::forward<ZSERIO_T_signature>(signature_);
        m_layer_ = ::std::forward<ZSERIO_T_layer>(layer_);
    }

    explicit DataLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DataLayer() = default;

    DataLayer(const DataLayer&) = default;
    DataLayer& operator=(const DataLayer&) = default;

    DataLayer(DataLayer&&) = default;
    DataLayer& operator=(DataLayer&&) = default;

    DataLayer(::zserio::PropagateAllocatorT,
            const DataLayer& other, const allocator_type& allocator);

    bool getHasSignature() const;
    void setHasSignature(bool hasSignature_);

    const ::zserio::BitBuffer& getSignature() const;
    ::zserio::BitBuffer& getSignature();
    void setSignature(const ::zserio::BitBuffer& signature_);
    void setSignature(::zserio::BitBuffer&& signature_);
    bool isSignatureUsed() const;
    bool isSignatureSet() const;
    void resetSignature();

    const ::nds::system::types::ExternData& getLayer() const;
    ::nds::system::types::ExternData& getLayer();
    void setLayer(const ::nds::system::types::ExternData& layer_);
    void setLayer(::nds::system::types::ExternData&& layer_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const DataLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    bool readHasSignature(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::zserio::BitBuffer> readSignature(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::ExternData readLayer(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    bool m_hasSignature_;
    ::zserio::InplaceOptionalHolder<::zserio::BitBuffer> m_signature_;
    ::nds::system::types::ExternData m_layer_;
};

} // namespace types
} // namespace smart
} // namespace nds

#endif // NDS_SMART_TYPES_DATA_LAYER_H
