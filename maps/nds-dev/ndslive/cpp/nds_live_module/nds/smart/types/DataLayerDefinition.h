/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_TYPES_DATA_LAYER_DEFINITION_H
#define NDS_SMART_TYPES_DATA_LAYER_DEFINITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>

#include <nds/core/packaging/SignatureDefinition.h>
#include <nds/smart/types/CustomExtensionIdentifier.h>
#include <nds/smart/types/DataLayerContentType.h>
#include <nds/smart/types/DataLayerId.h>
#include <nds/smart/types/DataLayerLifetimeType.h>
#include <nds/smart/types/DataLayerName.h>
#include <nds/system/types/ExternData.h>
#include <nds/system/types/ExternDescriptor.h>

namespace nds
{
namespace smart
{
namespace types
{

class DataLayerDefinition
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getDataLayerId()
        {
            return m_dataLayerId_;
        }

        ::zserio::DeltaContext& getLifetime()
        {
            return m_lifetime_;
        }

        ::zserio::DeltaContext& getContentType()
        {
            return m_contentType_;
        }

        ::nds::core::packaging::SignatureDefinition::ZserioPackingContext& getSignatureDefinition()
        {
            return m_signatureDefinition_;
        }

    private:
        ::zserio::DeltaContext m_dataLayerId_;
        ::zserio::DeltaContext m_lifetime_;
        ::zserio::DeltaContext m_contentType_;
        ::nds::core::packaging::SignatureDefinition::ZserioPackingContext m_signatureDefinition_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DataLayerDefinition() noexcept :
            DataLayerDefinition(allocator_type())
    {}

    explicit DataLayerDefinition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_layerDescriptor = ::nds::system::types::ExternDescriptor,
            typename ZSERIO_T_customExtensionIdentifier = ::nds::smart::types::CustomExtensionIdentifier,
            typename ZSERIO_T_name = ::nds::smart::types::DataLayerName,
            typename ZSERIO_T_signatureDefinition = ::nds::core::packaging::SignatureDefinition,
            typename ZSERIO_T_layerMetadata = ::nds::system::types::ExternData,
            typename ZSERIO_T_customExtensionMetadata = ::zserio::BitBuffer>
    DataLayerDefinition(
            ::nds::smart::types::DataLayerId dataLayerId_,
            ::nds::smart::types::DataLayerLifetimeType lifetime_,
            bool isCustomExtension_,
            ZSERIO_T_layerDescriptor&& layerDescriptor_,
            ZSERIO_T_customExtensionIdentifier&& customExtensionIdentifier_,
            ZSERIO_T_name&& name_,
            ::nds::smart::types::DataLayerContentType contentType_,
            ZSERIO_T_signatureDefinition&& signatureDefinition_,
            ZSERIO_T_layerMetadata&& layerMetadata_,
            ZSERIO_T_customExtensionMetadata&& customExtensionMetadata_,
            const allocator_type& allocator = allocator_type()) :
            DataLayerDefinition(allocator)
    {
        m_dataLayerId_ = dataLayerId_;
        m_lifetime_ = lifetime_;
        m_isCustomExtension_ = isCustomExtension_;
        m_layerDescriptor_ = ::std::forward<ZSERIO_T_layerDescriptor>(layerDescriptor_);
        m_customExtensionIdentifier_ = ::std::forward<ZSERIO_T_customExtensionIdentifier>(customExtensionIdentifier_);
        m_name_ = ::std::forward<ZSERIO_T_name>(name_);
        m_contentType_ = contentType_;
        m_signatureDefinition_ = ::std::forward<ZSERIO_T_signatureDefinition>(signatureDefinition_);
        m_layerMetadata_ = ::std::forward<ZSERIO_T_layerMetadata>(layerMetadata_);
        m_customExtensionMetadata_ = ::std::forward<ZSERIO_T_customExtensionMetadata>(customExtensionMetadata_);
    }

    explicit DataLayerDefinition(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DataLayerDefinition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DataLayerDefinition() = default;

    DataLayerDefinition(const DataLayerDefinition&) = default;
    DataLayerDefinition& operator=(const DataLayerDefinition&) = default;

    DataLayerDefinition(DataLayerDefinition&&) = default;
    DataLayerDefinition& operator=(DataLayerDefinition&&) = default;

    DataLayerDefinition(::zserio::PropagateAllocatorT,
            const DataLayerDefinition& other, const allocator_type& allocator);

    ::nds::smart::types::DataLayerId getDataLayerId() const;
    void setDataLayerId(::nds::smart::types::DataLayerId dataLayerId_);

    ::nds::smart::types::DataLayerLifetimeType getLifetime() const;
    void setLifetime(::nds::smart::types::DataLayerLifetimeType lifetime_);

    bool getIsCustomExtension() const;
    void setIsCustomExtension(bool isCustomExtension_);

    const ::nds::system::types::ExternDescriptor& getLayerDescriptor() const;
    ::nds::system::types::ExternDescriptor& getLayerDescriptor();
    void setLayerDescriptor(const ::nds::system::types::ExternDescriptor& layerDescriptor_);
    void setLayerDescriptor(::nds::system::types::ExternDescriptor&& layerDescriptor_);

    const ::nds::smart::types::CustomExtensionIdentifier& getCustomExtensionIdentifier() const;
    ::nds::smart::types::CustomExtensionIdentifier& getCustomExtensionIdentifier();
    void setCustomExtensionIdentifier(const ::nds::smart::types::CustomExtensionIdentifier& customExtensionIdentifier_);
    void setCustomExtensionIdentifier(::nds::smart::types::CustomExtensionIdentifier&& customExtensionIdentifier_);
    bool isCustomExtensionIdentifierUsed() const;
    bool isCustomExtensionIdentifierSet() const;
    void resetCustomExtensionIdentifier();

    const ::nds::smart::types::DataLayerName& getName() const;
    ::nds::smart::types::DataLayerName& getName();
    void setName(const ::nds::smart::types::DataLayerName& name_);
    void setName(::nds::smart::types::DataLayerName&& name_);

    ::nds::smart::types::DataLayerContentType getContentType() const;
    void setContentType(::nds::smart::types::DataLayerContentType contentType_);

    const ::nds::core::packaging::SignatureDefinition& getSignatureDefinition() const;
    ::nds::core::packaging::SignatureDefinition& getSignatureDefinition();
    void setSignatureDefinition(const ::nds::core::packaging::SignatureDefinition& signatureDefinition_);
    void setSignatureDefinition(::nds::core::packaging::SignatureDefinition&& signatureDefinition_);
    bool isSignatureDefinitionUsed() const;
    bool isSignatureDefinitionSet() const;
    void resetSignatureDefinition();

    const ::nds::system::types::ExternData& getLayerMetadata() const;
    ::nds::system::types::ExternData& getLayerMetadata();
    void setLayerMetadata(const ::nds::system::types::ExternData& layerMetadata_);
    void setLayerMetadata(::nds::system::types::ExternData&& layerMetadata_);
    bool isLayerMetadataUsed() const;
    bool isLayerMetadataSet() const;
    void resetLayerMetadata();

    const ::zserio::BitBuffer& getCustomExtensionMetadata() const;
    ::zserio::BitBuffer& getCustomExtensionMetadata();
    void setCustomExtensionMetadata(const ::zserio::BitBuffer& customExtensionMetadata_);
    void setCustomExtensionMetadata(::zserio::BitBuffer&& customExtensionMetadata_);
    bool isCustomExtensionMetadataUsed() const;
    bool isCustomExtensionMetadataSet() const;
    void resetCustomExtensionMetadata();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DataLayerDefinition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::smart::types::DataLayerId readDataLayerId(::zserio::BitStreamReader& in);
    ::nds::smart::types::DataLayerId readDataLayerId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::smart::types::DataLayerLifetimeType readLifetime(::zserio::BitStreamReader& in);
    ::nds::smart::types::DataLayerLifetimeType readLifetime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readIsCustomExtension(::zserio::BitStreamReader& in);
    ::nds::system::types::ExternDescriptor readLayerDescriptor(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::smart::types::CustomExtensionIdentifier> readCustomExtensionIdentifier(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::types::DataLayerName readName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::smart::types::DataLayerContentType readContentType(::zserio::BitStreamReader& in);
    ::nds::smart::types::DataLayerContentType readContentType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::packaging::SignatureDefinition> readSignatureDefinition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::packaging::SignatureDefinition> readSignatureDefinition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> readLayerMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::BitBuffer> readCustomExtensionMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::smart::types::DataLayerId m_dataLayerId_;
    ::nds::smart::types::DataLayerLifetimeType m_lifetime_;
    bool m_isCustomExtension_;
    ::nds::system::types::ExternDescriptor m_layerDescriptor_;
    ::zserio::InplaceOptionalHolder<::nds::smart::types::CustomExtensionIdentifier> m_customExtensionIdentifier_;
    ::nds::smart::types::DataLayerName m_name_;
    ::nds::smart::types::DataLayerContentType m_contentType_;
    ::zserio::InplaceOptionalHolder<::nds::core::packaging::SignatureDefinition> m_signatureDefinition_;
    ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> m_layerMetadata_;
    ::zserio::InplaceOptionalHolder<::zserio::BitBuffer> m_customExtensionMetadata_;
};

} // namespace types
} // namespace smart
} // namespace nds

#endif // NDS_SMART_TYPES_DATA_LAYER_DEFINITION_H
