/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_TYPES_DYNAMIC_DATA_LIFETIME_INFO_H
#define NDS_SMART_TYPES_DYNAMIC_DATA_LIFETIME_INFO_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/TimeStamp.h>

namespace nds
{
namespace smart
{
namespace types
{

class DynamicDataLifetimeInfo
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::types::TimeStamp::ZserioPackingContext& getCollectionTime()
        {
            return m_collectionTime_;
        }

        ::nds::core::types::TimeStamp::ZserioPackingContext& getExpirationTime()
        {
            return m_expirationTime_;
        }

    private:
        ::nds::core::types::TimeStamp::ZserioPackingContext m_collectionTime_;
        ::nds::core::types::TimeStamp::ZserioPackingContext m_expirationTime_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DynamicDataLifetimeInfo() noexcept :
            DynamicDataLifetimeInfo(allocator_type())
    {}

    explicit DynamicDataLifetimeInfo(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_collectionTime = ::nds::core::types::TimeStamp,
            typename ZSERIO_T_expirationTime = ::nds::core::types::TimeStamp,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_collectionTime, DynamicDataLifetimeInfo, allocator_type> = 0>
    DynamicDataLifetimeInfo(
            ZSERIO_T_collectionTime&& collectionTime_,
            ZSERIO_T_expirationTime&& expirationTime_,
            const allocator_type& allocator = allocator_type()) :
            DynamicDataLifetimeInfo(allocator)
    {
        m_collectionTime_ = ::std::forward<ZSERIO_T_collectionTime>(collectionTime_);
        m_expirationTime_ = ::std::forward<ZSERIO_T_expirationTime>(expirationTime_);
    }

    explicit DynamicDataLifetimeInfo(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DynamicDataLifetimeInfo(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DynamicDataLifetimeInfo() = default;

    DynamicDataLifetimeInfo(const DynamicDataLifetimeInfo&) = default;
    DynamicDataLifetimeInfo& operator=(const DynamicDataLifetimeInfo&) = default;

    DynamicDataLifetimeInfo(DynamicDataLifetimeInfo&&) = default;
    DynamicDataLifetimeInfo& operator=(DynamicDataLifetimeInfo&&) = default;

    DynamicDataLifetimeInfo(::zserio::PropagateAllocatorT,
            const DynamicDataLifetimeInfo& other, const allocator_type& allocator);

    const ::nds::core::types::TimeStamp& getCollectionTime() const;
    ::nds::core::types::TimeStamp& getCollectionTime();
    void setCollectionTime(const ::nds::core::types::TimeStamp& collectionTime_);
    void setCollectionTime(::nds::core::types::TimeStamp&& collectionTime_);

    const ::nds::core::types::TimeStamp& getExpirationTime() const;
    ::nds::core::types::TimeStamp& getExpirationTime();
    void setExpirationTime(const ::nds::core::types::TimeStamp& expirationTime_);
    void setExpirationTime(::nds::core::types::TimeStamp&& expirationTime_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DynamicDataLifetimeInfo& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::TimeStamp readCollectionTime(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::TimeStamp readCollectionTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::types::TimeStamp readExpirationTime(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::TimeStamp readExpirationTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::types::TimeStamp m_collectionTime_;
    ::nds::core::types::TimeStamp m_expirationTime_;
};

} // namespace types
} // namespace smart
} // namespace nds

#endif // NDS_SMART_TYPES_DYNAMIC_DATA_LIFETIME_INFO_H
