/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_TYPES_RASTER_TILE_IMAGE_REQUEST_H
#define NDS_SMART_TYPES_RASTER_TILE_IMAGE_REQUEST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/TileId.h>
#include <nds/smart/types/RasterImageConfigBase64.h>

namespace nds
{
namespace smart
{
namespace types
{

class RasterTileImageRequest
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::types::TileId::ZserioPackingContext& getTileId()
        {
            return m_tileId_;
        }

    private:
        ::nds::core::types::TileId::ZserioPackingContext m_tileId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RasterTileImageRequest() noexcept :
            RasterTileImageRequest(allocator_type())
    {}

    explicit RasterTileImageRequest(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_tileId = ::nds::core::types::TileId,
            typename ZSERIO_T_configuration = ::nds::smart::types::RasterImageConfigBase64,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_tileId, RasterTileImageRequest, allocator_type> = 0>
    RasterTileImageRequest(
            ZSERIO_T_tileId&& tileId_,
            ZSERIO_T_configuration&& configuration_,
            const allocator_type& allocator = allocator_type()) :
            RasterTileImageRequest(allocator)
    {
        m_tileId_ = ::std::forward<ZSERIO_T_tileId>(tileId_);
        m_configuration_ = ::std::forward<ZSERIO_T_configuration>(configuration_);
    }

    explicit RasterTileImageRequest(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RasterTileImageRequest(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RasterTileImageRequest() = default;

    RasterTileImageRequest(const RasterTileImageRequest&) = default;
    RasterTileImageRequest& operator=(const RasterTileImageRequest&) = default;

    RasterTileImageRequest(RasterTileImageRequest&&) = default;
    RasterTileImageRequest& operator=(RasterTileImageRequest&&) = default;

    RasterTileImageRequest(::zserio::PropagateAllocatorT,
            const RasterTileImageRequest& other, const allocator_type& allocator);

    const ::nds::core::types::TileId& getTileId() const;
    ::nds::core::types::TileId& getTileId();
    void setTileId(const ::nds::core::types::TileId& tileId_);
    void setTileId(::nds::core::types::TileId&& tileId_);

    const ::nds::smart::types::RasterImageConfigBase64& getConfiguration() const;
    ::nds::smart::types::RasterImageConfigBase64& getConfiguration();
    void setConfiguration(const ::nds::smart::types::RasterImageConfigBase64& configuration_);
    void setConfiguration(::nds::smart::types::RasterImageConfigBase64&& configuration_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RasterTileImageRequest& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::TileId readTileId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::TileId readTileId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::smart::types::RasterImageConfigBase64 readConfiguration(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::core::types::TileId m_tileId_;
    ::nds::smart::types::RasterImageConfigBase64 m_configuration_;
};

} // namespace types
} // namespace smart
} // namespace nds

#endif // NDS_SMART_TYPES_RASTER_TILE_IMAGE_REQUEST_H
