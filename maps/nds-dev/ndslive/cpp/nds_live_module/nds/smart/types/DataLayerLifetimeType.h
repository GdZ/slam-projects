/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_TYPES_DATA_LAYER_LIFETIME_TYPE_H
#define NDS_SMART_TYPES_DATA_LAYER_LIFETIME_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace smart
{
namespace types
{

enum class DataLayerLifetimeType : uint8_t
{
    STATIC = UINT8_C(0),
    DYNAMIC = UINT8_C(1),
    LIVE = UINT8_C(2)
};

} // namespace types
} // namespace smart
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for DataLayerLifetimeType enumeration.
template <>
struct EnumTraits<::nds::smart::types::DataLayerLifetimeType>
{
    static constexpr ::std::array<const char*, 3> names =
    {{
        "STATIC",
        "DYNAMIC",
        "LIVE"
    }};

    static constexpr ::std::array<::nds::smart::types::DataLayerLifetimeType, 3> values =
    {{
        ::nds::smart::types::DataLayerLifetimeType::STATIC,
        ::nds::smart::types::DataLayerLifetimeType::DYNAMIC,
        ::nds::smart::types::DataLayerLifetimeType::LIVE
    }};

    static constexpr const char* enumName = "DataLayerLifetimeType";
};

template <>
size_t enumToOrdinal<::nds::smart::types::DataLayerLifetimeType>(::nds::smart::types::DataLayerLifetimeType value);

template <>
::nds::smart::types::DataLayerLifetimeType valueToEnum<::nds::smart::types::DataLayerLifetimeType>(
        typename ::std::underlying_type<::nds::smart::types::DataLayerLifetimeType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::smart::types::DataLayerLifetimeType>(::nds::smart::types::DataLayerLifetimeType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::smart::types::DataLayerLifetimeType>(::zserio::DeltaContext& context, ::nds::smart::types::DataLayerLifetimeType value);

template <>
size_t bitSizeOf<::nds::smart::types::DataLayerLifetimeType>(::nds::smart::types::DataLayerLifetimeType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::smart::types::DataLayerLifetimeType>(::zserio::DeltaContext& context, ::nds::smart::types::DataLayerLifetimeType value);

template <>
size_t initializeOffsets<::nds::smart::types::DataLayerLifetimeType>(size_t bitPosition, ::nds::smart::types::DataLayerLifetimeType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::smart::types::DataLayerLifetimeType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::smart::types::DataLayerLifetimeType value);

template <>
::nds::smart::types::DataLayerLifetimeType read<::nds::smart::types::DataLayerLifetimeType>(::zserio::BitStreamReader& in);

template <>
::nds::smart::types::DataLayerLifetimeType read<::nds::smart::types::DataLayerLifetimeType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::smart::types::DataLayerLifetimeType>(::zserio::BitStreamWriter& out, ::nds::smart::types::DataLayerLifetimeType value);

template <>
void write<::zserio::DeltaContext, ::nds::smart::types::DataLayerLifetimeType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::smart::types::DataLayerLifetimeType value);

} // namespace zserio

#endif // NDS_SMART_TYPES_DATA_LAYER_LIFETIME_TYPE_H
