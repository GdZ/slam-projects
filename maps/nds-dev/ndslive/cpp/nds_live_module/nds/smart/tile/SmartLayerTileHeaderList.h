/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_TILE_SMART_LAYER_TILE_HEADER_LIST_H
#define NDS_SMART_TILE_SMART_LAYER_TILE_HEADER_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/types/PackedTileId.h>
#include <nds/smart/types/SmartLayerHeader.h>

namespace nds
{
namespace smart
{
namespace tile
{

class SmartLayerTileHeaderList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumTiles()
        {
            return m_numTiles_;
        }

    private:
        ::zserio::DeltaContext m_numTiles_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SmartLayerTileHeaderList() noexcept :
            SmartLayerTileHeaderList(allocator_type())
    {}

    explicit SmartLayerTileHeaderList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_tileIds = ::zserio::vector<::nds::core::types::PackedTileId>,
            typename ZSERIO_T_headers = ::zserio::vector<::nds::smart::types::SmartLayerHeader>>
    SmartLayerTileHeaderList(
            uint32_t numTiles_,
            ZSERIO_T_tileIds&& tileIds_,
            ZSERIO_T_headers&& headers_,
            const allocator_type& allocator = allocator_type()) :
            SmartLayerTileHeaderList(allocator)
    {
        m_numTiles_ = numTiles_;
        m_tileIds_ = ZserioArrayType_tileIds(::std::forward<ZSERIO_T_tileIds>(tileIds_));
        m_headers_ = ZserioArrayType_headers(::std::forward<ZSERIO_T_headers>(headers_));
    }

    explicit SmartLayerTileHeaderList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SmartLayerTileHeaderList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SmartLayerTileHeaderList() = default;

    SmartLayerTileHeaderList(const SmartLayerTileHeaderList&) = default;
    SmartLayerTileHeaderList& operator=(const SmartLayerTileHeaderList&) = default;

    SmartLayerTileHeaderList(SmartLayerTileHeaderList&&) = default;
    SmartLayerTileHeaderList& operator=(SmartLayerTileHeaderList&&) = default;

    SmartLayerTileHeaderList(::zserio::PropagateAllocatorT,
            const SmartLayerTileHeaderList& other, const allocator_type& allocator);

    void initializeChildren();

    uint32_t getNumTiles() const;
    void setNumTiles(uint32_t numTiles_);

    const ::zserio::vector<::nds::core::types::PackedTileId>& getTileIds() const;
    ::zserio::vector<::nds::core::types::PackedTileId>& getTileIds();
    void setTileIds(const ::zserio::vector<::nds::core::types::PackedTileId>& tileIds_);
    void setTileIds(::zserio::vector<::nds::core::types::PackedTileId>&& tileIds_);

    const ::zserio::vector<::nds::smart::types::SmartLayerHeader>& getHeaders() const;
    ::zserio::vector<::nds::smart::types::SmartLayerHeader>& getHeaders();
    void setHeaders(const ::zserio::vector<::nds::smart::types::SmartLayerHeader>& headers_);
    void setHeaders(::zserio::vector<::nds::smart::types::SmartLayerHeader>&& headers_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SmartLayerTileHeaderList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_headers
    {
    public:
        using OwnerType = SmartLayerTileHeaderList;

        static void initializeElement(SmartLayerTileHeaderList& owner,
                ::nds::smart::types::SmartLayerHeader& element, size_t index);
    };

    class ZserioElementFactory_headers
    {
    public:
        using OwnerType = SmartLayerTileHeaderList;

        static void create(SmartLayerTileHeaderList& owner,
                ::zserio::vector<::nds::smart::types::SmartLayerHeader>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SmartLayerTileHeaderList& owner,
                ::zserio::vector<::nds::smart::types::SmartLayerHeader>& array,
                ::nds::smart::types::SmartLayerHeader::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_tileIds = ::zserio::Array<::zserio::vector<::nds::core::types::PackedTileId>, ::zserio::StdIntArrayTraits<::nds::core::types::PackedTileId>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_headers = ::zserio::Array<::zserio::vector<::nds::smart::types::SmartLayerHeader>, ::zserio::ObjectArrayTraits<::nds::smart::types::SmartLayerHeader, ZserioElementFactory_headers>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_headers>;

    uint32_t readNumTiles(::zserio::BitStreamReader& in);
    uint32_t readNumTiles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_tileIds readTileIds(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_tileIds readTileIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_headers readHeaders(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_headers readHeaders(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint32_t m_numTiles_;
    ZserioArrayType_tileIds m_tileIds_;
    ZserioArrayType_headers m_headers_;
};

} // namespace tile
} // namespace smart
} // namespace nds

#endif // NDS_SMART_TILE_SMART_LAYER_TILE_HEADER_LIST_H
