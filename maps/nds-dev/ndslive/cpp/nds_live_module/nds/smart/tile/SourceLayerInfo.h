/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_TILE_SOURCE_LAYER_INFO_H
#define NDS_SMART_TILE_SOURCE_LAYER_INFO_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/types/VersionId.h>
#include <nds/smart/types/DataLayerId.h>

namespace nds
{
namespace smart
{
namespace tile
{

class SourceLayerInfo
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumDataLayers()
        {
            return m_numDataLayers_;
        }

    private:
        ::zserio::DeltaContext m_numDataLayers_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SourceLayerInfo() noexcept :
            SourceLayerInfo(allocator_type())
    {}

    explicit SourceLayerInfo(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_availableLayers = ::zserio::vector<::nds::smart::types::DataLayerId>,
            typename ZSERIO_T_versionId = ::zserio::vector<::nds::core::types::VersionId>>
    SourceLayerInfo(
            uint16_t numDataLayers_,
            ZSERIO_T_availableLayers&& availableLayers_,
            ZSERIO_T_versionId&& versionId_,
            const allocator_type& allocator = allocator_type()) :
            SourceLayerInfo(allocator)
    {
        m_numDataLayers_ = numDataLayers_;
        m_availableLayers_ = ZserioArrayType_availableLayers(::std::forward<ZSERIO_T_availableLayers>(availableLayers_));
        m_versionId_ = ZserioArrayType_versionId(::std::forward<ZSERIO_T_versionId>(versionId_));
    }

    explicit SourceLayerInfo(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SourceLayerInfo(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SourceLayerInfo() = default;

    SourceLayerInfo(const SourceLayerInfo&) = default;
    SourceLayerInfo& operator=(const SourceLayerInfo&) = default;

    SourceLayerInfo(SourceLayerInfo&&) = default;
    SourceLayerInfo& operator=(SourceLayerInfo&&) = default;

    SourceLayerInfo(::zserio::PropagateAllocatorT,
            const SourceLayerInfo& other, const allocator_type& allocator);

    uint16_t getNumDataLayers() const;
    void setNumDataLayers(uint16_t numDataLayers_);

    const ::zserio::vector<::nds::smart::types::DataLayerId>& getAvailableLayers() const;
    ::zserio::vector<::nds::smart::types::DataLayerId>& getAvailableLayers();
    void setAvailableLayers(const ::zserio::vector<::nds::smart::types::DataLayerId>& availableLayers_);
    void setAvailableLayers(::zserio::vector<::nds::smart::types::DataLayerId>&& availableLayers_);

    const ::zserio::vector<::nds::core::types::VersionId>& getVersionId() const;
    ::zserio::vector<::nds::core::types::VersionId>& getVersionId();
    void setVersionId(const ::zserio::vector<::nds::core::types::VersionId>& versionId_);
    void setVersionId(::zserio::vector<::nds::core::types::VersionId>&& versionId_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SourceLayerInfo& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_availableLayers = ::zserio::Array<::zserio::vector<::nds::smart::types::DataLayerId>, ::zserio::VarIntNNArrayTraits<::nds::smart::types::DataLayerId>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_versionId = ::zserio::Array<::zserio::vector<::nds::core::types::VersionId>, ::zserio::VarIntArrayTraits<::nds::core::types::VersionId>, ::zserio::ArrayType::NORMAL>;

    uint16_t readNumDataLayers(::zserio::BitStreamReader& in);
    uint16_t readNumDataLayers(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_availableLayers readAvailableLayers(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_availableLayers readAvailableLayers(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_versionId readVersionId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_versionId readVersionId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint16_t m_numDataLayers_;
    ZserioArrayType_availableLayers m_availableLayers_;
    ZserioArrayType_versionId m_versionId_;
};

} // namespace tile
} // namespace smart
} // namespace nds

#endif // NDS_SMART_TILE_SOURCE_LAYER_INFO_H
