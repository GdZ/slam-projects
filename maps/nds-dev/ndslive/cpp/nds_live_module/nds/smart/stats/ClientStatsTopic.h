/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_STATS_CLIENT_STATS_TOPIC_H
#define NDS_SMART_STATS_CLIENT_STATS_TOPIC_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace smart
{
namespace stats
{

class ClientStatsTopic
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getRequestNumSent()
        {
            return m_requestNumSent_;
        }

        ::zserio::DeltaContext& getRequestPayloadBytes()
        {
            return m_requestPayloadBytes_;
        }

        ::zserio::DeltaContext& getResponseNumReceived()
        {
            return m_responseNumReceived_;
        }

        ::zserio::DeltaContext& getResponsePayloadBytes()
        {
            return m_responsePayloadBytes_;
        }

    private:
        ::zserio::DeltaContext m_requestNumSent_;
        ::zserio::DeltaContext m_requestPayloadBytes_;
        ::zserio::DeltaContext m_responseNumReceived_;
        ::zserio::DeltaContext m_responsePayloadBytes_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ClientStatsTopic() noexcept :
            ClientStatsTopic(allocator_type())
    {}

    explicit ClientStatsTopic(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_requestNumSent = uint64_t,
            typename ZSERIO_T_requestPayloadBytes = uint64_t,
            typename ZSERIO_T_avgResponseTimeServer = float,
            typename ZSERIO_T_responseNumReceived = uint64_t,
            typename ZSERIO_T_responsePayloadBytes = uint64_t,
            typename ZSERIO_T_responseAvgPayloadBytes = float,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_requestNumSent, ClientStatsTopic, allocator_type> = 0>
    ClientStatsTopic(
            ZSERIO_T_requestNumSent&& requestNumSent_,
            ZSERIO_T_requestPayloadBytes&& requestPayloadBytes_,
            ZSERIO_T_avgResponseTimeServer&& avgResponseTimeServer_,
            ZSERIO_T_responseNumReceived&& responseNumReceived_,
            ZSERIO_T_responsePayloadBytes&& responsePayloadBytes_,
            ZSERIO_T_responseAvgPayloadBytes&& responseAvgPayloadBytes_,
            const allocator_type& allocator = allocator_type()) :
            ClientStatsTopic(allocator)
    {
        m_requestNumSent_ = ::std::forward<ZSERIO_T_requestNumSent>(requestNumSent_);
        m_requestPayloadBytes_ = ::std::forward<ZSERIO_T_requestPayloadBytes>(requestPayloadBytes_);
        m_avgResponseTimeServer_ = ::std::forward<ZSERIO_T_avgResponseTimeServer>(avgResponseTimeServer_);
        m_responseNumReceived_ = ::std::forward<ZSERIO_T_responseNumReceived>(responseNumReceived_);
        m_responsePayloadBytes_ = ::std::forward<ZSERIO_T_responsePayloadBytes>(responsePayloadBytes_);
        m_responseAvgPayloadBytes_ = ::std::forward<ZSERIO_T_responseAvgPayloadBytes>(responseAvgPayloadBytes_);
    }

    explicit ClientStatsTopic(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ClientStatsTopic(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ClientStatsTopic() = default;

    ClientStatsTopic(const ClientStatsTopic&) = default;
    ClientStatsTopic& operator=(const ClientStatsTopic&) = default;

    ClientStatsTopic(ClientStatsTopic&&) = default;
    ClientStatsTopic& operator=(ClientStatsTopic&&) = default;

    ClientStatsTopic(::zserio::PropagateAllocatorT,
            const ClientStatsTopic& other, const allocator_type& allocator);

    uint64_t getRequestNumSent() const;
    void setRequestNumSent(uint64_t requestNumSent_);
    bool isRequestNumSentUsed() const;
    bool isRequestNumSentSet() const;
    void resetRequestNumSent();

    uint64_t getRequestPayloadBytes() const;
    void setRequestPayloadBytes(uint64_t requestPayloadBytes_);
    bool isRequestPayloadBytesUsed() const;
    bool isRequestPayloadBytesSet() const;
    void resetRequestPayloadBytes();

    float getAvgResponseTimeServer() const;
    void setAvgResponseTimeServer(float avgResponseTimeServer_);
    bool isAvgResponseTimeServerUsed() const;
    bool isAvgResponseTimeServerSet() const;
    void resetAvgResponseTimeServer();

    uint64_t getResponseNumReceived() const;
    void setResponseNumReceived(uint64_t responseNumReceived_);
    bool isResponseNumReceivedUsed() const;
    bool isResponseNumReceivedSet() const;
    void resetResponseNumReceived();

    uint64_t getResponsePayloadBytes() const;
    void setResponsePayloadBytes(uint64_t responsePayloadBytes_);
    bool isResponsePayloadBytesUsed() const;
    bool isResponsePayloadBytesSet() const;
    void resetResponsePayloadBytes();

    float getResponseAvgPayloadBytes() const;
    void setResponseAvgPayloadBytes(float responseAvgPayloadBytes_);
    bool isResponseAvgPayloadBytesUsed() const;
    bool isResponseAvgPayloadBytesSet() const;
    void resetResponseAvgPayloadBytes();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ClientStatsTopic& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::InplaceOptionalHolder<uint64_t> readRequestNumSent(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readRequestNumSent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readRequestPayloadBytes(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readRequestPayloadBytes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<float> readAvgResponseTimeServer(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readResponseNumReceived(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readResponseNumReceived(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readResponsePayloadBytes(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readResponsePayloadBytes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<float> readResponseAvgPayloadBytes(::zserio::BitStreamReader& in);

    ::zserio::InplaceOptionalHolder<uint64_t> m_requestNumSent_;
    ::zserio::InplaceOptionalHolder<uint64_t> m_requestPayloadBytes_;
    ::zserio::InplaceOptionalHolder<float> m_avgResponseTimeServer_;
    ::zserio::InplaceOptionalHolder<uint64_t> m_responseNumReceived_;
    ::zserio::InplaceOptionalHolder<uint64_t> m_responsePayloadBytes_;
    ::zserio::InplaceOptionalHolder<float> m_responseAvgPayloadBytes_;
};

} // namespace stats
} // namespace smart
} // namespace nds

#endif // NDS_SMART_STATS_CLIENT_STATS_TOPIC_H
