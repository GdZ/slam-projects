/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SMART_STATS_SMART_STATS_TOPIC_COLLECTION_H
#define NDS_SMART_STATS_SMART_STATS_TOPIC_COLLECTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <memory>
#include <zserio/AllocatorHolder.h>
#include <zserio/IPubsub.h>
#include <zserio/PubsubException.h>
#include <zserio/ArrayTraits.h>

#include <nds/smart/stats/ClientStatsTopic.h>
#include <nds/smart/stats/ServerStatsTopic.h>

namespace nds
{
namespace smart
{
namespace stats
{

class SmartStatsTopicCollection : public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    explicit SmartStatsTopicCollection(::zserio::IPubsub& pubsub, const allocator_type& allocator = allocator_type());
    ~SmartStatsTopicCollection() = default;

    SmartStatsTopicCollection(const SmartStatsTopicCollection&) = delete;
    SmartStatsTopicCollection& operator=(const SmartStatsTopicCollection&) = delete;

    SmartStatsTopicCollection(SmartStatsTopicCollection&&) = default;
    SmartStatsTopicCollection& operator=(SmartStatsTopicCollection&&) = delete;

    template <typename ZSERIO_MESSAGE>
    class SmartStatsTopicCollectionCallback
    {
    public:
        virtual ~SmartStatsTopicCollectionCallback() = default;
        virtual void operator()(::zserio::StringView topic, const ZSERIO_MESSAGE& message) = 0;
    };

    void publishServerStats(const ::nds::smart::stats::ServerStatsTopic& message, void* context = nullptr);

    ::zserio::IPubsub::SubscriptionId subscribeServerStats(
            const ::std::shared_ptr<SmartStatsTopicCollectionCallback<::nds::smart::stats::ServerStatsTopic>>& callback,
            void* context = nullptr);

    void publishClientStats(const ::nds::smart::stats::ClientStatsTopic& message, void* context = nullptr);

    ::zserio::IPubsub::SubscriptionId subscribeClientStats(
            const ::std::shared_ptr<SmartStatsTopicCollectionCallback<::nds::smart::stats::ClientStatsTopic>>& callback,
            void* context = nullptr);

    void unsubscribe(::zserio::IPubsub::SubscriptionId id);

private:
    template <typename ZSERIO_MESSAGE>
    void publish(ZSERIO_MESSAGE& message, ::zserio::StringView topic, void* context);

    ::zserio::IPubsub& m_pubsub;
};

} // namespace stats
} // namespace smart
} // namespace nds

#endif // NDS_SMART_STATS_SMART_STATS_TOPIC_COLLECTION_H
