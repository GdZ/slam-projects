/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/smart/stats/ServerStatsTopic.h>

namespace nds
{
namespace smart
{
namespace stats
{

ServerStatsTopic::ServerStatsTopic(const allocator_type&) noexcept :
        m_requestNumReceived_(::zserio::NullOpt),
        m_requestPayloadBytes_(::zserio::NullOpt),
        m_requestAvgPayloadBytes_(::zserio::NullOpt),
        m_avgTimeRequestToResponse_(::zserio::NullOpt),
        m_responseNumSent_(::zserio::NullOpt),
        m_responsePayloadBytes_(::zserio::NullOpt),
        m_responseAvgPayloadBytes_(::zserio::NullOpt)
{
}

ServerStatsTopic::ServerStatsTopic(::zserio::BitStreamReader& in, const allocator_type&) :
        m_requestNumReceived_(readRequestNumReceived(in)),
        m_requestPayloadBytes_(readRequestPayloadBytes(in)),
        m_requestAvgPayloadBytes_(readRequestAvgPayloadBytes(in)),
        m_avgTimeRequestToResponse_(readAvgTimeRequestToResponse(in)),
        m_responseNumSent_(readResponseNumSent(in)),
        m_responsePayloadBytes_(readResponsePayloadBytes(in)),
        m_responseAvgPayloadBytes_(readResponseAvgPayloadBytes(in))
{
}

ServerStatsTopic::ServerStatsTopic(ServerStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_requestNumReceived_(readRequestNumReceived(context, in)),
        m_requestPayloadBytes_(readRequestPayloadBytes(context, in)),
        m_requestAvgPayloadBytes_(readRequestAvgPayloadBytes(in)),
        m_avgTimeRequestToResponse_(readAvgTimeRequestToResponse(in)),
        m_responseNumSent_(readResponseNumSent(context, in)),
        m_responsePayloadBytes_(readResponsePayloadBytes(context, in)),
        m_responseAvgPayloadBytes_(readResponseAvgPayloadBytes(in))
{
}

ServerStatsTopic::ServerStatsTopic(::zserio::PropagateAllocatorT,
        const ServerStatsTopic& other, const allocator_type& allocator) :
        m_requestNumReceived_(::zserio::allocatorPropagatingCopy(other.m_requestNumReceived_, allocator)),
        m_requestPayloadBytes_(::zserio::allocatorPropagatingCopy(other.m_requestPayloadBytes_, allocator)),
        m_requestAvgPayloadBytes_(::zserio::allocatorPropagatingCopy(other.m_requestAvgPayloadBytes_, allocator)),
        m_avgTimeRequestToResponse_(::zserio::allocatorPropagatingCopy(other.m_avgTimeRequestToResponse_, allocator)),
        m_responseNumSent_(::zserio::allocatorPropagatingCopy(other.m_responseNumSent_, allocator)),
        m_responsePayloadBytes_(::zserio::allocatorPropagatingCopy(other.m_responsePayloadBytes_, allocator)),
        m_responseAvgPayloadBytes_(::zserio::allocatorPropagatingCopy(other.m_responseAvgPayloadBytes_, allocator))
{
}

uint64_t ServerStatsTopic::getRequestNumReceived() const
{
    return m_requestNumReceived_.value();
}

void ServerStatsTopic::setRequestNumReceived(uint64_t requestNumReceived_)
{
    m_requestNumReceived_ = requestNumReceived_;
}

bool ServerStatsTopic::isRequestNumReceivedUsed() const
{
    return (isRequestNumReceivedSet());
}

bool ServerStatsTopic::isRequestNumReceivedSet() const
{
    return m_requestNumReceived_.hasValue();
}

void ServerStatsTopic::resetRequestNumReceived()
{
    m_requestNumReceived_.reset();
}

uint64_t ServerStatsTopic::getRequestPayloadBytes() const
{
    return m_requestPayloadBytes_.value();
}

void ServerStatsTopic::setRequestPayloadBytes(uint64_t requestPayloadBytes_)
{
    m_requestPayloadBytes_ = requestPayloadBytes_;
}

bool ServerStatsTopic::isRequestPayloadBytesUsed() const
{
    return (isRequestPayloadBytesSet());
}

bool ServerStatsTopic::isRequestPayloadBytesSet() const
{
    return m_requestPayloadBytes_.hasValue();
}

void ServerStatsTopic::resetRequestPayloadBytes()
{
    m_requestPayloadBytes_.reset();
}

float ServerStatsTopic::getRequestAvgPayloadBytes() const
{
    return m_requestAvgPayloadBytes_.value();
}

void ServerStatsTopic::setRequestAvgPayloadBytes(float requestAvgPayloadBytes_)
{
    m_requestAvgPayloadBytes_ = requestAvgPayloadBytes_;
}

bool ServerStatsTopic::isRequestAvgPayloadBytesUsed() const
{
    return (isRequestAvgPayloadBytesSet());
}

bool ServerStatsTopic::isRequestAvgPayloadBytesSet() const
{
    return m_requestAvgPayloadBytes_.hasValue();
}

void ServerStatsTopic::resetRequestAvgPayloadBytes()
{
    m_requestAvgPayloadBytes_.reset();
}

float ServerStatsTopic::getAvgTimeRequestToResponse() const
{
    return m_avgTimeRequestToResponse_.value();
}

void ServerStatsTopic::setAvgTimeRequestToResponse(float avgTimeRequestToResponse_)
{
    m_avgTimeRequestToResponse_ = avgTimeRequestToResponse_;
}

bool ServerStatsTopic::isAvgTimeRequestToResponseUsed() const
{
    return (isAvgTimeRequestToResponseSet());
}

bool ServerStatsTopic::isAvgTimeRequestToResponseSet() const
{
    return m_avgTimeRequestToResponse_.hasValue();
}

void ServerStatsTopic::resetAvgTimeRequestToResponse()
{
    m_avgTimeRequestToResponse_.reset();
}

uint64_t ServerStatsTopic::getResponseNumSent() const
{
    return m_responseNumSent_.value();
}

void ServerStatsTopic::setResponseNumSent(uint64_t responseNumSent_)
{
    m_responseNumSent_ = responseNumSent_;
}

bool ServerStatsTopic::isResponseNumSentUsed() const
{
    return (isResponseNumSentSet());
}

bool ServerStatsTopic::isResponseNumSentSet() const
{
    return m_responseNumSent_.hasValue();
}

void ServerStatsTopic::resetResponseNumSent()
{
    m_responseNumSent_.reset();
}

uint64_t ServerStatsTopic::getResponsePayloadBytes() const
{
    return m_responsePayloadBytes_.value();
}

void ServerStatsTopic::setResponsePayloadBytes(uint64_t responsePayloadBytes_)
{
    m_responsePayloadBytes_ = responsePayloadBytes_;
}

bool ServerStatsTopic::isResponsePayloadBytesUsed() const
{
    return (isResponsePayloadBytesSet());
}

bool ServerStatsTopic::isResponsePayloadBytesSet() const
{
    return m_responsePayloadBytes_.hasValue();
}

void ServerStatsTopic::resetResponsePayloadBytes()
{
    m_responsePayloadBytes_.reset();
}

float ServerStatsTopic::getResponseAvgPayloadBytes() const
{
    return m_responseAvgPayloadBytes_.value();
}

void ServerStatsTopic::setResponseAvgPayloadBytes(float responseAvgPayloadBytes_)
{
    m_responseAvgPayloadBytes_ = responseAvgPayloadBytes_;
}

bool ServerStatsTopic::isResponseAvgPayloadBytesUsed() const
{
    return (isResponseAvgPayloadBytesSet());
}

bool ServerStatsTopic::isResponseAvgPayloadBytesSet() const
{
    return m_responseAvgPayloadBytes_.hasValue();
}

void ServerStatsTopic::resetResponseAvgPayloadBytes()
{
    m_responseAvgPayloadBytes_.reset();
}

void ServerStatsTopic::initPackingContext(ServerStatsTopic::ZserioPackingContext& context) const
{
    if (isRequestNumReceivedSet())
    {
        context.getRequestNumReceived().init<::zserio::VarIntArrayTraits<uint64_t>>(m_requestNumReceived_.value());
    }
    if (isRequestPayloadBytesSet())
    {
        context.getRequestPayloadBytes().init<::zserio::VarIntArrayTraits<uint64_t>>(m_requestPayloadBytes_.value());
    }
    if (isResponseNumSentSet())
    {
        context.getResponseNumSent().init<::zserio::VarIntArrayTraits<uint64_t>>(m_responseNumSent_.value());
    }
    if (isResponsePayloadBytesSet())
    {
        context.getResponsePayloadBytes().init<::zserio::VarIntArrayTraits<uint64_t>>(m_responsePayloadBytes_.value());
    }
}

size_t ServerStatsTopic::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += 1;
    if (isRequestNumReceivedSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_requestNumReceived_.value());
    }
    endBitPosition += 1;
    if (isRequestPayloadBytesSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_requestPayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isRequestAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isAvgTimeRequestToResponseSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isResponseNumSentSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_responseNumSent_.value());
    }
    endBitPosition += 1;
    if (isResponsePayloadBytesSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_responsePayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isResponseAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition - bitPosition;
}

size_t ServerStatsTopic::bitSizeOf(ServerStatsTopic::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += 1;
    if (isRequestNumReceivedSet())
    {
        endBitPosition += context.getRequestNumReceived().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_requestNumReceived_.value());
    }
    endBitPosition += 1;
    if (isRequestPayloadBytesSet())
    {
        endBitPosition += context.getRequestPayloadBytes().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_requestPayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isRequestAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isAvgTimeRequestToResponseSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isResponseNumSentSet())
    {
        endBitPosition += context.getResponseNumSent().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_responseNumSent_.value());
    }
    endBitPosition += 1;
    if (isResponsePayloadBytesSet())
    {
        endBitPosition += context.getResponsePayloadBytes().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_responsePayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isResponseAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition - bitPosition;
}

size_t ServerStatsTopic::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += 1;
    if (isRequestNumReceivedSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_requestNumReceived_.value());
    }
    endBitPosition += 1;
    if (isRequestPayloadBytesSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_requestPayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isRequestAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isAvgTimeRequestToResponseSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isResponseNumSentSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_responseNumSent_.value());
    }
    endBitPosition += 1;
    if (isResponsePayloadBytesSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_responsePayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isResponseAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition;
}

size_t ServerStatsTopic::initializeOffsets(ServerStatsTopic::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += 1;
    if (isRequestNumReceivedSet())
    {
        endBitPosition += context.getRequestNumReceived().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_requestNumReceived_.value());
    }
    endBitPosition += 1;
    if (isRequestPayloadBytesSet())
    {
        endBitPosition += context.getRequestPayloadBytes().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_requestPayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isRequestAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isAvgTimeRequestToResponseSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isResponseNumSentSet())
    {
        endBitPosition += context.getResponseNumSent().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_responseNumSent_.value());
    }
    endBitPosition += 1;
    if (isResponsePayloadBytesSet())
    {
        endBitPosition += context.getResponsePayloadBytes().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_responsePayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isResponseAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition;
}

bool ServerStatsTopic::operator==(const ServerStatsTopic& other) const
{
    if (this != &other)
    {
        return
                (!isRequestNumReceivedUsed() ? !other.isRequestNumReceivedUsed() : (m_requestNumReceived_ == other.m_requestNumReceived_)) &&
                (!isRequestPayloadBytesUsed() ? !other.isRequestPayloadBytesUsed() : (m_requestPayloadBytes_ == other.m_requestPayloadBytes_)) &&
                (!isRequestAvgPayloadBytesUsed() ? !other.isRequestAvgPayloadBytesUsed() : (m_requestAvgPayloadBytes_ == other.m_requestAvgPayloadBytes_)) &&
                (!isAvgTimeRequestToResponseUsed() ? !other.isAvgTimeRequestToResponseUsed() : (m_avgTimeRequestToResponse_ == other.m_avgTimeRequestToResponse_)) &&
                (!isResponseNumSentUsed() ? !other.isResponseNumSentUsed() : (m_responseNumSent_ == other.m_responseNumSent_)) &&
                (!isResponsePayloadBytesUsed() ? !other.isResponsePayloadBytesUsed() : (m_responsePayloadBytes_ == other.m_responsePayloadBytes_)) &&
                (!isResponseAvgPayloadBytesUsed() ? !other.isResponseAvgPayloadBytesUsed() : (m_responseAvgPayloadBytes_ == other.m_responseAvgPayloadBytes_));
    }

    return true;
}

uint32_t ServerStatsTopic::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    if (isRequestNumReceivedUsed())
        result = ::zserio::calcHashCode(result, m_requestNumReceived_);
    if (isRequestPayloadBytesUsed())
        result = ::zserio::calcHashCode(result, m_requestPayloadBytes_);
    if (isRequestAvgPayloadBytesUsed())
        result = ::zserio::calcHashCode(result, m_requestAvgPayloadBytes_);
    if (isAvgTimeRequestToResponseUsed())
        result = ::zserio::calcHashCode(result, m_avgTimeRequestToResponse_);
    if (isResponseNumSentUsed())
        result = ::zserio::calcHashCode(result, m_responseNumSent_);
    if (isResponsePayloadBytesUsed())
        result = ::zserio::calcHashCode(result, m_responsePayloadBytes_);
    if (isResponseAvgPayloadBytesUsed())
        result = ::zserio::calcHashCode(result, m_responseAvgPayloadBytes_);

    return result;
}

void ServerStatsTopic::write(::zserio::BitStreamWriter& out) const
{
    if (isRequestNumReceivedSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_requestNumReceived_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isRequestPayloadBytesSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_requestPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isRequestAvgPayloadBytesSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_requestAvgPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isAvgTimeRequestToResponseSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_avgTimeRequestToResponse_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponseNumSentSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_responseNumSent_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponsePayloadBytesSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_responsePayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponseAvgPayloadBytesSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_responseAvgPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

void ServerStatsTopic::write(ServerStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    if (isRequestNumReceivedSet())
    {
        out.writeBool(true);
        context.getRequestNumReceived().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_requestNumReceived_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isRequestPayloadBytesSet())
    {
        out.writeBool(true);
        context.getRequestPayloadBytes().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_requestPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isRequestAvgPayloadBytesSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_requestAvgPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isAvgTimeRequestToResponseSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_avgTimeRequestToResponse_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponseNumSentSet())
    {
        out.writeBool(true);
        context.getResponseNumSent().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_responseNumSent_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponsePayloadBytesSet())
    {
        out.writeBool(true);
        context.getResponsePayloadBytes().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_responsePayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponseAvgPayloadBytesSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_responseAvgPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

::zserio::InplaceOptionalHolder<uint64_t> ServerStatsTopic::readRequestNumReceived(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> ServerStatsTopic::readRequestNumReceived(ServerStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getRequestNumReceived().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<uint64_t> ServerStatsTopic::readRequestPayloadBytes(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> ServerStatsTopic::readRequestPayloadBytes(ServerStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getRequestPayloadBytes().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<float> ServerStatsTopic::readRequestAvgPayloadBytes(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<float>(static_cast<float>(in.readFloat32()));
    }

    return ::zserio::InplaceOptionalHolder<float>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<float> ServerStatsTopic::readAvgTimeRequestToResponse(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<float>(static_cast<float>(in.readFloat32()));
    }

    return ::zserio::InplaceOptionalHolder<float>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<uint64_t> ServerStatsTopic::readResponseNumSent(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> ServerStatsTopic::readResponseNumSent(ServerStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getResponseNumSent().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<uint64_t> ServerStatsTopic::readResponsePayloadBytes(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> ServerStatsTopic::readResponsePayloadBytes(ServerStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getResponsePayloadBytes().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<float> ServerStatsTopic::readResponseAvgPayloadBytes(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<float>(static_cast<float>(in.readFloat32()));
    }

    return ::zserio::InplaceOptionalHolder<float>(::zserio::NullOpt);
}

} // namespace stats
} // namespace smart
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/smart/stats/ClientStatsTopic.h>

namespace nds
{
namespace smart
{
namespace stats
{

ClientStatsTopic::ClientStatsTopic(const allocator_type&) noexcept :
        m_requestNumSent_(::zserio::NullOpt),
        m_requestPayloadBytes_(::zserio::NullOpt),
        m_avgResponseTimeServer_(::zserio::NullOpt),
        m_responseNumReceived_(::zserio::NullOpt),
        m_responsePayloadBytes_(::zserio::NullOpt),
        m_responseAvgPayloadBytes_(::zserio::NullOpt)
{
}

ClientStatsTopic::ClientStatsTopic(::zserio::BitStreamReader& in, const allocator_type&) :
        m_requestNumSent_(readRequestNumSent(in)),
        m_requestPayloadBytes_(readRequestPayloadBytes(in)),
        m_avgResponseTimeServer_(readAvgResponseTimeServer(in)),
        m_responseNumReceived_(readResponseNumReceived(in)),
        m_responsePayloadBytes_(readResponsePayloadBytes(in)),
        m_responseAvgPayloadBytes_(readResponseAvgPayloadBytes(in))
{
}

ClientStatsTopic::ClientStatsTopic(ClientStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_requestNumSent_(readRequestNumSent(context, in)),
        m_requestPayloadBytes_(readRequestPayloadBytes(context, in)),
        m_avgResponseTimeServer_(readAvgResponseTimeServer(in)),
        m_responseNumReceived_(readResponseNumReceived(context, in)),
        m_responsePayloadBytes_(readResponsePayloadBytes(context, in)),
        m_responseAvgPayloadBytes_(readResponseAvgPayloadBytes(in))
{
}

ClientStatsTopic::ClientStatsTopic(::zserio::PropagateAllocatorT,
        const ClientStatsTopic& other, const allocator_type& allocator) :
        m_requestNumSent_(::zserio::allocatorPropagatingCopy(other.m_requestNumSent_, allocator)),
        m_requestPayloadBytes_(::zserio::allocatorPropagatingCopy(other.m_requestPayloadBytes_, allocator)),
        m_avgResponseTimeServer_(::zserio::allocatorPropagatingCopy(other.m_avgResponseTimeServer_, allocator)),
        m_responseNumReceived_(::zserio::allocatorPropagatingCopy(other.m_responseNumReceived_, allocator)),
        m_responsePayloadBytes_(::zserio::allocatorPropagatingCopy(other.m_responsePayloadBytes_, allocator)),
        m_responseAvgPayloadBytes_(::zserio::allocatorPropagatingCopy(other.m_responseAvgPayloadBytes_, allocator))
{
}

uint64_t ClientStatsTopic::getRequestNumSent() const
{
    return m_requestNumSent_.value();
}

void ClientStatsTopic::setRequestNumSent(uint64_t requestNumSent_)
{
    m_requestNumSent_ = requestNumSent_;
}

bool ClientStatsTopic::isRequestNumSentUsed() const
{
    return (isRequestNumSentSet());
}

bool ClientStatsTopic::isRequestNumSentSet() const
{
    return m_requestNumSent_.hasValue();
}

void ClientStatsTopic::resetRequestNumSent()
{
    m_requestNumSent_.reset();
}

uint64_t ClientStatsTopic::getRequestPayloadBytes() const
{
    return m_requestPayloadBytes_.value();
}

void ClientStatsTopic::setRequestPayloadBytes(uint64_t requestPayloadBytes_)
{
    m_requestPayloadBytes_ = requestPayloadBytes_;
}

bool ClientStatsTopic::isRequestPayloadBytesUsed() const
{
    return (isRequestPayloadBytesSet());
}

bool ClientStatsTopic::isRequestPayloadBytesSet() const
{
    return m_requestPayloadBytes_.hasValue();
}

void ClientStatsTopic::resetRequestPayloadBytes()
{
    m_requestPayloadBytes_.reset();
}

float ClientStatsTopic::getAvgResponseTimeServer() const
{
    return m_avgResponseTimeServer_.value();
}

void ClientStatsTopic::setAvgResponseTimeServer(float avgResponseTimeServer_)
{
    m_avgResponseTimeServer_ = avgResponseTimeServer_;
}

bool ClientStatsTopic::isAvgResponseTimeServerUsed() const
{
    return (isAvgResponseTimeServerSet());
}

bool ClientStatsTopic::isAvgResponseTimeServerSet() const
{
    return m_avgResponseTimeServer_.hasValue();
}

void ClientStatsTopic::resetAvgResponseTimeServer()
{
    m_avgResponseTimeServer_.reset();
}

uint64_t ClientStatsTopic::getResponseNumReceived() const
{
    return m_responseNumReceived_.value();
}

void ClientStatsTopic::setResponseNumReceived(uint64_t responseNumReceived_)
{
    m_responseNumReceived_ = responseNumReceived_;
}

bool ClientStatsTopic::isResponseNumReceivedUsed() const
{
    return (isResponseNumReceivedSet());
}

bool ClientStatsTopic::isResponseNumReceivedSet() const
{
    return m_responseNumReceived_.hasValue();
}

void ClientStatsTopic::resetResponseNumReceived()
{
    m_responseNumReceived_.reset();
}

uint64_t ClientStatsTopic::getResponsePayloadBytes() const
{
    return m_responsePayloadBytes_.value();
}

void ClientStatsTopic::setResponsePayloadBytes(uint64_t responsePayloadBytes_)
{
    m_responsePayloadBytes_ = responsePayloadBytes_;
}

bool ClientStatsTopic::isResponsePayloadBytesUsed() const
{
    return (isResponsePayloadBytesSet());
}

bool ClientStatsTopic::isResponsePayloadBytesSet() const
{
    return m_responsePayloadBytes_.hasValue();
}

void ClientStatsTopic::resetResponsePayloadBytes()
{
    m_responsePayloadBytes_.reset();
}

float ClientStatsTopic::getResponseAvgPayloadBytes() const
{
    return m_responseAvgPayloadBytes_.value();
}

void ClientStatsTopic::setResponseAvgPayloadBytes(float responseAvgPayloadBytes_)
{
    m_responseAvgPayloadBytes_ = responseAvgPayloadBytes_;
}

bool ClientStatsTopic::isResponseAvgPayloadBytesUsed() const
{
    return (isResponseAvgPayloadBytesSet());
}

bool ClientStatsTopic::isResponseAvgPayloadBytesSet() const
{
    return m_responseAvgPayloadBytes_.hasValue();
}

void ClientStatsTopic::resetResponseAvgPayloadBytes()
{
    m_responseAvgPayloadBytes_.reset();
}

void ClientStatsTopic::initPackingContext(ClientStatsTopic::ZserioPackingContext& context) const
{
    if (isRequestNumSentSet())
    {
        context.getRequestNumSent().init<::zserio::VarIntArrayTraits<uint64_t>>(m_requestNumSent_.value());
    }
    if (isRequestPayloadBytesSet())
    {
        context.getRequestPayloadBytes().init<::zserio::VarIntArrayTraits<uint64_t>>(m_requestPayloadBytes_.value());
    }
    if (isResponseNumReceivedSet())
    {
        context.getResponseNumReceived().init<::zserio::VarIntArrayTraits<uint64_t>>(m_responseNumReceived_.value());
    }
    if (isResponsePayloadBytesSet())
    {
        context.getResponsePayloadBytes().init<::zserio::VarIntArrayTraits<uint64_t>>(m_responsePayloadBytes_.value());
    }
}

size_t ClientStatsTopic::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += 1;
    if (isRequestNumSentSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_requestNumSent_.value());
    }
    endBitPosition += 1;
    if (isRequestPayloadBytesSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_requestPayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isAvgResponseTimeServerSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isResponseNumReceivedSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_responseNumReceived_.value());
    }
    endBitPosition += 1;
    if (isResponsePayloadBytesSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_responsePayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isResponseAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition - bitPosition;
}

size_t ClientStatsTopic::bitSizeOf(ClientStatsTopic::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += 1;
    if (isRequestNumSentSet())
    {
        endBitPosition += context.getRequestNumSent().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_requestNumSent_.value());
    }
    endBitPosition += 1;
    if (isRequestPayloadBytesSet())
    {
        endBitPosition += context.getRequestPayloadBytes().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_requestPayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isAvgResponseTimeServerSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isResponseNumReceivedSet())
    {
        endBitPosition += context.getResponseNumReceived().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_responseNumReceived_.value());
    }
    endBitPosition += 1;
    if (isResponsePayloadBytesSet())
    {
        endBitPosition += context.getResponsePayloadBytes().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_responsePayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isResponseAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition - bitPosition;
}

size_t ClientStatsTopic::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += 1;
    if (isRequestNumSentSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_requestNumSent_.value());
    }
    endBitPosition += 1;
    if (isRequestPayloadBytesSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_requestPayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isAvgResponseTimeServerSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isResponseNumReceivedSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_responseNumReceived_.value());
    }
    endBitPosition += 1;
    if (isResponsePayloadBytesSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_responsePayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isResponseAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition;
}

size_t ClientStatsTopic::initializeOffsets(ClientStatsTopic::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += 1;
    if (isRequestNumSentSet())
    {
        endBitPosition += context.getRequestNumSent().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_requestNumSent_.value());
    }
    endBitPosition += 1;
    if (isRequestPayloadBytesSet())
    {
        endBitPosition += context.getRequestPayloadBytes().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_requestPayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isAvgResponseTimeServerSet())
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += 1;
    if (isResponseNumReceivedSet())
    {
        endBitPosition += context.getResponseNumReceived().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_responseNumReceived_.value());
    }
    endBitPosition += 1;
    if (isResponsePayloadBytesSet())
    {
        endBitPosition += context.getResponsePayloadBytes().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_responsePayloadBytes_.value());
    }
    endBitPosition += 1;
    if (isResponseAvgPayloadBytesSet())
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition;
}

bool ClientStatsTopic::operator==(const ClientStatsTopic& other) const
{
    if (this != &other)
    {
        return
                (!isRequestNumSentUsed() ? !other.isRequestNumSentUsed() : (m_requestNumSent_ == other.m_requestNumSent_)) &&
                (!isRequestPayloadBytesUsed() ? !other.isRequestPayloadBytesUsed() : (m_requestPayloadBytes_ == other.m_requestPayloadBytes_)) &&
                (!isAvgResponseTimeServerUsed() ? !other.isAvgResponseTimeServerUsed() : (m_avgResponseTimeServer_ == other.m_avgResponseTimeServer_)) &&
                (!isResponseNumReceivedUsed() ? !other.isResponseNumReceivedUsed() : (m_responseNumReceived_ == other.m_responseNumReceived_)) &&
                (!isResponsePayloadBytesUsed() ? !other.isResponsePayloadBytesUsed() : (m_responsePayloadBytes_ == other.m_responsePayloadBytes_)) &&
                (!isResponseAvgPayloadBytesUsed() ? !other.isResponseAvgPayloadBytesUsed() : (m_responseAvgPayloadBytes_ == other.m_responseAvgPayloadBytes_));
    }

    return true;
}

uint32_t ClientStatsTopic::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    if (isRequestNumSentUsed())
        result = ::zserio::calcHashCode(result, m_requestNumSent_);
    if (isRequestPayloadBytesUsed())
        result = ::zserio::calcHashCode(result, m_requestPayloadBytes_);
    if (isAvgResponseTimeServerUsed())
        result = ::zserio::calcHashCode(result, m_avgResponseTimeServer_);
    if (isResponseNumReceivedUsed())
        result = ::zserio::calcHashCode(result, m_responseNumReceived_);
    if (isResponsePayloadBytesUsed())
        result = ::zserio::calcHashCode(result, m_responsePayloadBytes_);
    if (isResponseAvgPayloadBytesUsed())
        result = ::zserio::calcHashCode(result, m_responseAvgPayloadBytes_);

    return result;
}

void ClientStatsTopic::write(::zserio::BitStreamWriter& out) const
{
    if (isRequestNumSentSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_requestNumSent_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isRequestPayloadBytesSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_requestPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isAvgResponseTimeServerSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_avgResponseTimeServer_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponseNumReceivedSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_responseNumReceived_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponsePayloadBytesSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_responsePayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponseAvgPayloadBytesSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_responseAvgPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

void ClientStatsTopic::write(ClientStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    if (isRequestNumSentSet())
    {
        out.writeBool(true);
        context.getRequestNumSent().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_requestNumSent_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isRequestPayloadBytesSet())
    {
        out.writeBool(true);
        context.getRequestPayloadBytes().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_requestPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isAvgResponseTimeServerSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_avgResponseTimeServer_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponseNumReceivedSet())
    {
        out.writeBool(true);
        context.getResponseNumReceived().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_responseNumReceived_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponsePayloadBytesSet())
    {
        out.writeBool(true);
        context.getResponsePayloadBytes().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_responsePayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isResponseAvgPayloadBytesSet())
    {
        out.writeBool(true);
        out.writeFloat32(m_responseAvgPayloadBytes_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

::zserio::InplaceOptionalHolder<uint64_t> ClientStatsTopic::readRequestNumSent(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> ClientStatsTopic::readRequestNumSent(ClientStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getRequestNumSent().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<uint64_t> ClientStatsTopic::readRequestPayloadBytes(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> ClientStatsTopic::readRequestPayloadBytes(ClientStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getRequestPayloadBytes().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<float> ClientStatsTopic::readAvgResponseTimeServer(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<float>(static_cast<float>(in.readFloat32()));
    }

    return ::zserio::InplaceOptionalHolder<float>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<uint64_t> ClientStatsTopic::readResponseNumReceived(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> ClientStatsTopic::readResponseNumReceived(ClientStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getResponseNumReceived().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<uint64_t> ClientStatsTopic::readResponsePayloadBytes(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> ClientStatsTopic::readResponsePayloadBytes(ClientStatsTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getResponsePayloadBytes().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<float> ClientStatsTopic::readResponseAvgPayloadBytes(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<float>(static_cast<float>(in.readFloat32()));
    }

    return ::zserio::InplaceOptionalHolder<float>(::zserio::NullOpt);
}

} // namespace stats
} // namespace smart
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>
#include <zserio/StringView.h>

#include <nds/smart/stats/SmartStatsTopicCollection.h>

namespace nds
{
namespace smart
{
namespace stats
{

namespace
{

template <typename ZSERIO_MESSAGE>
class SmartStatsTopicCollectionOnRaw : public ::zserio::IPubsub::OnTopicCallback
{
public:
    explicit SmartStatsTopicCollectionOnRaw(const ::std::shared_ptr<SmartStatsTopicCollection::SmartStatsTopicCollectionCallback<ZSERIO_MESSAGE>>& callback,
            const ::std::allocator<uint8_t>& allocator) :
            m_callback(callback), m_allocator(allocator)
    {}

    void operator()(::zserio::StringView topic, ::zserio::Span<const uint8_t> data) override
    {
        ::zserio::BitStreamReader reader(data.data(), data.size());
        const ZSERIO_MESSAGE message(reader, m_allocator);

        m_callback->operator()(topic, message);
    }

private:
    ::std::shared_ptr<SmartStatsTopicCollection::SmartStatsTopicCollectionCallback<ZSERIO_MESSAGE>> m_callback;
    ::std::allocator<uint8_t> m_allocator;
};

} // namespace

SmartStatsTopicCollection::SmartStatsTopicCollection(::zserio::IPubsub& pubsub, const allocator_type& allocator) :
        ::zserio::AllocatorHolder<allocator_type>(allocator),
        m_pubsub(pubsub)
{
}

void SmartStatsTopicCollection::publishServerStats(const ::nds::smart::stats::ServerStatsTopic& message, void* context)
{
    publish(message, ::zserio::makeStringView("nds/service/server/+/stats"), context);
}

::zserio::IPubsub::SubscriptionId SmartStatsTopicCollection::subscribeServerStats(
        const ::std::shared_ptr<SmartStatsTopicCollectionCallback<::nds::smart::stats::ServerStatsTopic>>& callback,
        void* context)
{
    const auto& onRawCallback = ::std::allocate_shared<SmartStatsTopicCollectionOnRaw<::nds::smart::stats::ServerStatsTopic>>(
            get_allocator_ref(), callback, get_allocator_ref());
    return m_pubsub.subscribe(::zserio::makeStringView("nds/service/server/+/stats"), onRawCallback, context);
}

void SmartStatsTopicCollection::publishClientStats(const ::nds::smart::stats::ClientStatsTopic& message, void* context)
{
    publish(message, ::zserio::makeStringView("nds/service/client/+/stats"), context);
}

::zserio::IPubsub::SubscriptionId SmartStatsTopicCollection::subscribeClientStats(
        const ::std::shared_ptr<SmartStatsTopicCollectionCallback<::nds::smart::stats::ClientStatsTopic>>& callback,
        void* context)
{
    const auto& onRawCallback = ::std::allocate_shared<SmartStatsTopicCollectionOnRaw<::nds::smart::stats::ClientStatsTopic>>(
            get_allocator_ref(), callback, get_allocator_ref());
    return m_pubsub.subscribe(::zserio::makeStringView("nds/service/client/+/stats"), onRawCallback, context);
}

void SmartStatsTopicCollection::unsubscribe(::zserio::IPubsub::SubscriptionId id)
{
    m_pubsub.unsubscribe(id);
}

template <typename ZSERIO_MESSAGE>
void SmartStatsTopicCollection::publish(ZSERIO_MESSAGE& message, ::zserio::StringView topic, void* context)
{
    ::zserio::BitBuffer bitBuffer(message.bitSizeOf(), get_allocator_ref());
    ::zserio::BitStreamWriter writer(bitBuffer);
    message.write(writer);
    m_pubsub.publish(topic, bitBuffer.getBytes(), context);
}

} // namespace stats
} // namespace smart
} // namespace nds
