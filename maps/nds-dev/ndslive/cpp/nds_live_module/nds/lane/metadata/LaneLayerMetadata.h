/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_METADATA_LANE_LAYER_METADATA_H
#define NDS_LANE_METADATA_LANE_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/types/RoadType.h>
#include <nds/lane/lanegroups/LaneGroupType.h>
#include <nds/lane/metadata/BoundaryGeometryUsage.h>
#include <nds/lane/types/LogicalBoundaryType.h>
#include <nds/lane/types/MarkingBoundaryType.h>
#include <nds/lane/types/PhysicalDividerBoundaryType.h>
#include <nds/lane/types/PhysicalMarkingBoundaryType.h>

namespace nds
{
namespace lane
{
namespace metadata
{

class LaneLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getBoundaryGeometryUsage()
        {
            return m_boundaryGeometryUsage_;
        }

    private:
        ::zserio::DeltaContext m_boundaryGeometryUsage_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneLayerMetadata() noexcept :
            LaneLayerMetadata(allocator_type())
    {}

    explicit LaneLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_includedRoadTypes = ::zserio::vector<::nds::core::types::RoadType>,
            typename ZSERIO_T_includedLaneGroupTypes = ::zserio::vector<::nds::lane::lanegroups::LaneGroupType>,
            typename ZSERIO_T_includedLogicalBoundaryTypes = ::zserio::vector<::nds::lane::types::LogicalBoundaryType>,
            typename ZSERIO_T_includedMarkingBoundaryTypes = ::zserio::vector<::nds::lane::types::MarkingBoundaryType>,
            typename ZSERIO_T_includedPhysicalDividerBoundaryTypes = ::zserio::vector<::nds::lane::types::PhysicalDividerBoundaryType>,
            typename ZSERIO_T_includedPhysicalMarkingBoundaryTypes = ::zserio::vector<::nds::lane::types::PhysicalMarkingBoundaryType>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_includedRoadTypes, LaneLayerMetadata, allocator_type> = 0>
    LaneLayerMetadata(
            ZSERIO_T_includedRoadTypes&& includedRoadTypes_,
            ZSERIO_T_includedLaneGroupTypes&& includedLaneGroupTypes_,
            ZSERIO_T_includedLogicalBoundaryTypes&& includedLogicalBoundaryTypes_,
            ZSERIO_T_includedMarkingBoundaryTypes&& includedMarkingBoundaryTypes_,
            ZSERIO_T_includedPhysicalDividerBoundaryTypes&& includedPhysicalDividerBoundaryTypes_,
            ZSERIO_T_includedPhysicalMarkingBoundaryTypes&& includedPhysicalMarkingBoundaryTypes_,
            ::nds::lane::metadata::BoundaryGeometryUsage boundaryGeometryUsage_,
            const allocator_type& allocator = allocator_type()) :
            LaneLayerMetadata(allocator)
    {
        m_includedRoadTypes_ = ZserioArrayType_includedRoadTypes(::std::forward<ZSERIO_T_includedRoadTypes>(includedRoadTypes_));
        m_includedLaneGroupTypes_ = ZserioArrayType_includedLaneGroupTypes(::std::forward<ZSERIO_T_includedLaneGroupTypes>(includedLaneGroupTypes_));
        m_includedLogicalBoundaryTypes_ = ZserioArrayType_includedLogicalBoundaryTypes(::std::forward<ZSERIO_T_includedLogicalBoundaryTypes>(includedLogicalBoundaryTypes_));
        m_includedMarkingBoundaryTypes_ = ZserioArrayType_includedMarkingBoundaryTypes(::std::forward<ZSERIO_T_includedMarkingBoundaryTypes>(includedMarkingBoundaryTypes_));
        m_includedPhysicalDividerBoundaryTypes_ = ZserioArrayType_includedPhysicalDividerBoundaryTypes(::std::forward<ZSERIO_T_includedPhysicalDividerBoundaryTypes>(includedPhysicalDividerBoundaryTypes_));
        m_includedPhysicalMarkingBoundaryTypes_ = ZserioArrayType_includedPhysicalMarkingBoundaryTypes(::std::forward<ZSERIO_T_includedPhysicalMarkingBoundaryTypes>(includedPhysicalMarkingBoundaryTypes_));
        m_boundaryGeometryUsage_ = boundaryGeometryUsage_;
    }

    explicit LaneLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneLayerMetadata() = default;

    LaneLayerMetadata(const LaneLayerMetadata&) = default;
    LaneLayerMetadata& operator=(const LaneLayerMetadata&) = default;

    LaneLayerMetadata(LaneLayerMetadata&&) = default;
    LaneLayerMetadata& operator=(LaneLayerMetadata&&) = default;

    LaneLayerMetadata(::zserio::PropagateAllocatorT,
            const LaneLayerMetadata& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::core::types::RoadType>& getIncludedRoadTypes() const;
    ::zserio::vector<::nds::core::types::RoadType>& getIncludedRoadTypes();
    void setIncludedRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& includedRoadTypes_);
    void setIncludedRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& includedRoadTypes_);

    const ::zserio::vector<::nds::lane::lanegroups::LaneGroupType>& getIncludedLaneGroupTypes() const;
    ::zserio::vector<::nds::lane::lanegroups::LaneGroupType>& getIncludedLaneGroupTypes();
    void setIncludedLaneGroupTypes(const ::zserio::vector<::nds::lane::lanegroups::LaneGroupType>& includedLaneGroupTypes_);
    void setIncludedLaneGroupTypes(::zserio::vector<::nds::lane::lanegroups::LaneGroupType>&& includedLaneGroupTypes_);

    const ::zserio::vector<::nds::lane::types::LogicalBoundaryType>& getIncludedLogicalBoundaryTypes() const;
    ::zserio::vector<::nds::lane::types::LogicalBoundaryType>& getIncludedLogicalBoundaryTypes();
    void setIncludedLogicalBoundaryTypes(const ::zserio::vector<::nds::lane::types::LogicalBoundaryType>& includedLogicalBoundaryTypes_);
    void setIncludedLogicalBoundaryTypes(::zserio::vector<::nds::lane::types::LogicalBoundaryType>&& includedLogicalBoundaryTypes_);

    const ::zserio::vector<::nds::lane::types::MarkingBoundaryType>& getIncludedMarkingBoundaryTypes() const;
    ::zserio::vector<::nds::lane::types::MarkingBoundaryType>& getIncludedMarkingBoundaryTypes();
    void setIncludedMarkingBoundaryTypes(const ::zserio::vector<::nds::lane::types::MarkingBoundaryType>& includedMarkingBoundaryTypes_);
    void setIncludedMarkingBoundaryTypes(::zserio::vector<::nds::lane::types::MarkingBoundaryType>&& includedMarkingBoundaryTypes_);

    const ::zserio::vector<::nds::lane::types::PhysicalDividerBoundaryType>& getIncludedPhysicalDividerBoundaryTypes() const;
    ::zserio::vector<::nds::lane::types::PhysicalDividerBoundaryType>& getIncludedPhysicalDividerBoundaryTypes();
    void setIncludedPhysicalDividerBoundaryTypes(const ::zserio::vector<::nds::lane::types::PhysicalDividerBoundaryType>& includedPhysicalDividerBoundaryTypes_);
    void setIncludedPhysicalDividerBoundaryTypes(::zserio::vector<::nds::lane::types::PhysicalDividerBoundaryType>&& includedPhysicalDividerBoundaryTypes_);

    const ::zserio::vector<::nds::lane::types::PhysicalMarkingBoundaryType>& getIncludedPhysicalMarkingBoundaryTypes() const;
    ::zserio::vector<::nds::lane::types::PhysicalMarkingBoundaryType>& getIncludedPhysicalMarkingBoundaryTypes();
    void setIncludedPhysicalMarkingBoundaryTypes(const ::zserio::vector<::nds::lane::types::PhysicalMarkingBoundaryType>& includedPhysicalMarkingBoundaryTypes_);
    void setIncludedPhysicalMarkingBoundaryTypes(::zserio::vector<::nds::lane::types::PhysicalMarkingBoundaryType>&& includedPhysicalMarkingBoundaryTypes_);

    ::nds::lane::metadata::BoundaryGeometryUsage getBoundaryGeometryUsage() const;
    void setBoundaryGeometryUsage(::nds::lane::metadata::BoundaryGeometryUsage boundaryGeometryUsage_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_includedRoadTypes
    {
    public:
        using OwnerType = LaneLayerMetadata;

        static void create(LaneLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::nds::core::types::RoadType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_includedRoadTypes = ::zserio::Array<::zserio::vector<::nds::core::types::RoadType>, ::zserio::ObjectArrayTraits<::nds::core::types::RoadType, ZserioElementFactory_includedRoadTypes>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_includedLaneGroupTypes = ::zserio::Array<::zserio::vector<::nds::lane::lanegroups::LaneGroupType>, ::zserio::EnumArrayTraits<::nds::lane::lanegroups::LaneGroupType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_includedLogicalBoundaryTypes = ::zserio::Array<::zserio::vector<::nds::lane::types::LogicalBoundaryType>, ::zserio::EnumArrayTraits<::nds::lane::types::LogicalBoundaryType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_includedMarkingBoundaryTypes = ::zserio::Array<::zserio::vector<::nds::lane::types::MarkingBoundaryType>, ::zserio::EnumArrayTraits<::nds::lane::types::MarkingBoundaryType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_includedPhysicalDividerBoundaryTypes = ::zserio::Array<::zserio::vector<::nds::lane::types::PhysicalDividerBoundaryType>, ::zserio::EnumArrayTraits<::nds::lane::types::PhysicalDividerBoundaryType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_includedPhysicalMarkingBoundaryTypes = ::zserio::Array<::zserio::vector<::nds::lane::types::PhysicalMarkingBoundaryType>, ::zserio::EnumArrayTraits<::nds::lane::types::PhysicalMarkingBoundaryType>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_includedRoadTypes readIncludedRoadTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_includedRoadTypes readIncludedRoadTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_includedLaneGroupTypes readIncludedLaneGroupTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_includedLaneGroupTypes readIncludedLaneGroupTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_includedLogicalBoundaryTypes readIncludedLogicalBoundaryTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_includedLogicalBoundaryTypes readIncludedLogicalBoundaryTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_includedMarkingBoundaryTypes readIncludedMarkingBoundaryTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_includedMarkingBoundaryTypes readIncludedMarkingBoundaryTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_includedPhysicalDividerBoundaryTypes readIncludedPhysicalDividerBoundaryTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_includedPhysicalDividerBoundaryTypes readIncludedPhysicalDividerBoundaryTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_includedPhysicalMarkingBoundaryTypes readIncludedPhysicalMarkingBoundaryTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_includedPhysicalMarkingBoundaryTypes readIncludedPhysicalMarkingBoundaryTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::metadata::BoundaryGeometryUsage readBoundaryGeometryUsage(::zserio::BitStreamReader& in);
    ::nds::lane::metadata::BoundaryGeometryUsage readBoundaryGeometryUsage(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ZserioArrayType_includedRoadTypes m_includedRoadTypes_;
    ZserioArrayType_includedLaneGroupTypes m_includedLaneGroupTypes_;
    ZserioArrayType_includedLogicalBoundaryTypes m_includedLogicalBoundaryTypes_;
    ZserioArrayType_includedMarkingBoundaryTypes m_includedMarkingBoundaryTypes_;
    ZserioArrayType_includedPhysicalDividerBoundaryTypes m_includedPhysicalDividerBoundaryTypes_;
    ZserioArrayType_includedPhysicalMarkingBoundaryTypes m_includedPhysicalMarkingBoundaryTypes_;
    ::nds::lane::metadata::BoundaryGeometryUsage m_boundaryGeometryUsage_;
};

} // namespace metadata
} // namespace lane
} // namespace nds

#endif // NDS_LANE_METADATA_LANE_LAYER_METADATA_H
