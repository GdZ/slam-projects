/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_MARKING_COLOR_H
#define NDS_LANE_REFERENCE_TYPES_MARKING_COLOR_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

enum class MarkingColor : uint8_t
{
    UNKNOWN = UINT8_C(0),
    WHITE = UINT8_C(1),
    LIGHT_GRAY = UINT8_C(2),
    GRAY = UINT8_C(3),
    DARK_GRAY = UINT8_C(4),
    BLACK = UINT8_C(5),
    RED = UINT8_C(6),
    YELLOW = UINT8_C(7),
    GREEN = UINT8_C(8),
    CYAN = UINT8_C(9),
    BLUE = UINT8_C(10),
    ORANGE = UINT8_C(11),
    PURPLE = UINT8_C(12)
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for MarkingColor enumeration.
template <>
struct EnumTraits<::nds::lane::reference::types::MarkingColor>
{
    static constexpr ::std::array<const char*, 13> names =
    {{
        "UNKNOWN",
        "WHITE",
        "LIGHT_GRAY",
        "GRAY",
        "DARK_GRAY",
        "BLACK",
        "RED",
        "YELLOW",
        "GREEN",
        "CYAN",
        "BLUE",
        "ORANGE",
        "PURPLE"
    }};

    static constexpr ::std::array<::nds::lane::reference::types::MarkingColor, 13> values =
    {{
        ::nds::lane::reference::types::MarkingColor::UNKNOWN,
        ::nds::lane::reference::types::MarkingColor::WHITE,
        ::nds::lane::reference::types::MarkingColor::LIGHT_GRAY,
        ::nds::lane::reference::types::MarkingColor::GRAY,
        ::nds::lane::reference::types::MarkingColor::DARK_GRAY,
        ::nds::lane::reference::types::MarkingColor::BLACK,
        ::nds::lane::reference::types::MarkingColor::RED,
        ::nds::lane::reference::types::MarkingColor::YELLOW,
        ::nds::lane::reference::types::MarkingColor::GREEN,
        ::nds::lane::reference::types::MarkingColor::CYAN,
        ::nds::lane::reference::types::MarkingColor::BLUE,
        ::nds::lane::reference::types::MarkingColor::ORANGE,
        ::nds::lane::reference::types::MarkingColor::PURPLE
    }};

    static constexpr const char* enumName = "MarkingColor";
};

template <>
size_t enumToOrdinal<::nds::lane::reference::types::MarkingColor>(::nds::lane::reference::types::MarkingColor value);

template <>
::nds::lane::reference::types::MarkingColor valueToEnum<::nds::lane::reference::types::MarkingColor>(
        typename ::std::underlying_type<::nds::lane::reference::types::MarkingColor>::type rawValue);

template <>
uint32_t enumHashCode<::nds::lane::reference::types::MarkingColor>(::nds::lane::reference::types::MarkingColor value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::lane::reference::types::MarkingColor>(::zserio::DeltaContext& context, ::nds::lane::reference::types::MarkingColor value);

template <>
size_t bitSizeOf<::nds::lane::reference::types::MarkingColor>(::nds::lane::reference::types::MarkingColor value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::lane::reference::types::MarkingColor>(::zserio::DeltaContext& context, ::nds::lane::reference::types::MarkingColor value);

template <>
size_t initializeOffsets<::nds::lane::reference::types::MarkingColor>(size_t bitPosition, ::nds::lane::reference::types::MarkingColor value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::lane::reference::types::MarkingColor>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::lane::reference::types::MarkingColor value);

template <>
::nds::lane::reference::types::MarkingColor read<::nds::lane::reference::types::MarkingColor>(::zserio::BitStreamReader& in);

template <>
::nds::lane::reference::types::MarkingColor read<::nds::lane::reference::types::MarkingColor, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::lane::reference::types::MarkingColor>(::zserio::BitStreamWriter& out, ::nds::lane::reference::types::MarkingColor value);

template <>
void write<::zserio::DeltaContext, ::nds::lane::reference::types::MarkingColor>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::lane::reference::types::MarkingColor value);

} // namespace zserio

#endif // NDS_LANE_REFERENCE_TYPES_MARKING_COLOR_H
