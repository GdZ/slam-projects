/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_VALIDITY_RANGE_H
#define NDS_LANE_REFERENCE_TYPES_LANE_VALIDITY_RANGE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/reference/types/LaneValidityPosition.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneValidityRange
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneValidityPosition::ZserioPackingContext& getStart()
        {
            return m_start_;
        }

        ::nds::lane::reference::types::LaneValidityPosition::ZserioPackingContext& getEnd()
        {
            return m_end_;
        }

    private:
        ::nds::lane::reference::types::LaneValidityPosition::ZserioPackingContext m_start_;
        ::nds::lane::reference::types::LaneValidityPosition::ZserioPackingContext m_end_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneValidityRange() noexcept :
            LaneValidityRange(allocator_type())
    {}

    explicit LaneValidityRange(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_start = ::nds::lane::reference::types::LaneValidityPosition,
            typename ZSERIO_T_end = ::nds::lane::reference::types::LaneValidityPosition,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_start, LaneValidityRange, allocator_type> = 0>
    LaneValidityRange(
            ZSERIO_T_start&& start_,
            ZSERIO_T_end&& end_,
            const allocator_type& allocator = allocator_type()) :
            LaneValidityRange(allocator)
    {
        m_start_ = ::std::forward<ZSERIO_T_start>(start_);
        m_end_ = ::std::forward<ZSERIO_T_end>(end_);
    }

    explicit LaneValidityRange(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneValidityRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneValidityRange() = default;

    LaneValidityRange(const LaneValidityRange&) = default;
    LaneValidityRange& operator=(const LaneValidityRange&) = default;

    LaneValidityRange(LaneValidityRange&&) = default;
    LaneValidityRange& operator=(LaneValidityRange&&) = default;

    LaneValidityRange(::zserio::PropagateAllocatorT,
            const LaneValidityRange& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::lane::reference::types::LaneValidityPosition& getStart() const;
    ::nds::lane::reference::types::LaneValidityPosition& getStart();
    void setStart(const ::nds::lane::reference::types::LaneValidityPosition& start_);
    void setStart(::nds::lane::reference::types::LaneValidityPosition&& start_);

    const ::nds::lane::reference::types::LaneValidityPosition& getEnd() const;
    ::nds::lane::reference::types::LaneValidityPosition& getEnd();
    void setEnd(const ::nds::lane::reference::types::LaneValidityPosition& end_);
    void setEnd(::nds::lane::reference::types::LaneValidityPosition&& end_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneValidityRange& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::reference::types::LaneValidityPosition readStart(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneValidityPosition readStart(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::reference::types::LaneValidityPosition readEnd(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneValidityPosition readEnd(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::reference::types::LaneValidityPosition m_start_;
    ::nds::lane::reference::types::LaneValidityPosition m_end_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_VALIDITY_RANGE_H
