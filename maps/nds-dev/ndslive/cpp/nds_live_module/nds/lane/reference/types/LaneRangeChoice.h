/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_RANGE_CHOICE_H
#define NDS_LANE_REFERENCE_TYPES_LANE_RANGE_CHOICE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/lane/reference/types/LaneGeometryRange.h>
#include <nds/lane/reference/types/LaneGeometryRangeOffset.h>
#include <nds/lane/reference/types/LaneLengthRange.h>
#include <nds/lane/reference/types/LanePercentageRange.h>
#include <nds/lane/reference/types/LaneValidityRange.h>
#include <nds/lane/reference/types/LaneValidityType.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneRangeChoice
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_validityRange = 0,
        CHOICE_lengthRange = 1,
        CHOICE_geometryRange = 2,
        CHOICE_geometryRangeOffset = 3,
        CHOICE_percentageRange = 4,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneValidityRange::ZserioPackingContext& getValidityRange()
        {
            return m_validityRange_;
        }

        ::nds::lane::reference::types::LaneLengthRange::ZserioPackingContext& getLengthRange()
        {
            return m_lengthRange_;
        }

        ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext& getGeometryRange()
        {
            return m_geometryRange_;
        }

        ::nds::lane::reference::types::LaneGeometryRangeOffset::ZserioPackingContext& getGeometryRangeOffset()
        {
            return m_geometryRangeOffset_;
        }

        ::nds::lane::reference::types::LanePercentageRange::ZserioPackingContext& getPercentageRange()
        {
            return m_percentageRange_;
        }

    private:
        ::nds::lane::reference::types::LaneValidityRange::ZserioPackingContext m_validityRange_;
        ::nds::lane::reference::types::LaneLengthRange::ZserioPackingContext m_lengthRange_;
        ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext m_geometryRange_;
        ::nds::lane::reference::types::LaneGeometryRangeOffset::ZserioPackingContext m_geometryRangeOffset_;
        ::nds::lane::reference::types::LanePercentageRange::ZserioPackingContext m_percentageRange_;
    };

    LaneRangeChoice() noexcept :
            LaneRangeChoice(allocator_type())
    {}

    explicit LaneRangeChoice(const allocator_type& allocator) noexcept;

    explicit LaneRangeChoice(::zserio::BitStreamReader& in,
            ::nds::lane::reference::types::LaneValidityType type_, const allocator_type& allocator = allocator_type());
    explicit LaneRangeChoice(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::lane::reference::types::LaneValidityType type_, const allocator_type& allocator = allocator_type());

    ~LaneRangeChoice() = default;

    LaneRangeChoice(const LaneRangeChoice& other);
    LaneRangeChoice& operator=(const LaneRangeChoice& other);

    LaneRangeChoice(LaneRangeChoice&& other);
    LaneRangeChoice& operator=(LaneRangeChoice&& other);

    LaneRangeChoice(::zserio::PropagateAllocatorT,
            const LaneRangeChoice& other, const allocator_type& allocator);

    void initialize(
            ::nds::lane::reference::types::LaneValidityType type_);
    bool isInitialized() const;
    void initializeChildren();

    ChoiceTag choiceTag() const;

    ::nds::lane::reference::types::LaneValidityType getType() const;

    const ::nds::lane::reference::types::LaneValidityRange& getValidityRange() const;
    ::nds::lane::reference::types::LaneValidityRange& getValidityRange();
    void setValidityRange(const ::nds::lane::reference::types::LaneValidityRange& validityRange_);
    void setValidityRange(::nds::lane::reference::types::LaneValidityRange&& validityRange_);

    const ::nds::lane::reference::types::LaneLengthRange& getLengthRange() const;
    ::nds::lane::reference::types::LaneLengthRange& getLengthRange();
    void setLengthRange(const ::nds::lane::reference::types::LaneLengthRange& lengthRange_);
    void setLengthRange(::nds::lane::reference::types::LaneLengthRange&& lengthRange_);

    const ::nds::lane::reference::types::LaneGeometryRange& getGeometryRange() const;
    ::nds::lane::reference::types::LaneGeometryRange& getGeometryRange();
    void setGeometryRange(const ::nds::lane::reference::types::LaneGeometryRange& geometryRange_);
    void setGeometryRange(::nds::lane::reference::types::LaneGeometryRange&& geometryRange_);

    const ::nds::lane::reference::types::LaneGeometryRangeOffset& getGeometryRangeOffset() const;
    ::nds::lane::reference::types::LaneGeometryRangeOffset& getGeometryRangeOffset();
    void setGeometryRangeOffset(const ::nds::lane::reference::types::LaneGeometryRangeOffset& geometryRangeOffset_);
    void setGeometryRangeOffset(::nds::lane::reference::types::LaneGeometryRangeOffset&& geometryRangeOffset_);

    const ::nds::lane::reference::types::LanePercentageRange& getPercentageRange() const;
    ::nds::lane::reference::types::LanePercentageRange& getPercentageRange();
    void setPercentageRange(const ::nds::lane::reference::types::LanePercentageRange& percentageRange_);
    void setPercentageRange(::nds::lane::reference::types::LanePercentageRange&& percentageRange_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneRangeChoice& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::lane::reference::types::LaneValidityType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_RANGE_CHOICE_H
