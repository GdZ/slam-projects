/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_POSITION_H
#define NDS_LANE_REFERENCE_TYPES_LANE_POSITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/lane/reference/types/LanePositionChoice.h>
#include <nds/lane/reference/types/LaneValidityType.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LanePosition
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getNumPositions()
        {
            return m_numPositions_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_numPositions_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LanePosition() noexcept :
            LanePosition(allocator_type())
    {}

    explicit LanePosition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_numPositions = uint32_t,
            typename ZSERIO_T_positions = ::zserio::vector<::nds::lane::reference::types::LanePositionChoice>>
    LanePosition(
            ::nds::lane::reference::types::LaneValidityType type_,
            ZSERIO_T_numPositions&& numPositions_,
            ZSERIO_T_positions&& positions_,
            const allocator_type& allocator = allocator_type()) :
            LanePosition(allocator)
    {
        m_type_ = type_;
        m_numPositions_ = ::std::forward<ZSERIO_T_numPositions>(numPositions_);
        m_positions_ = ::zserio::createOptionalArray<ZserioArrayType_positions>(::std::forward<ZSERIO_T_positions>(positions_));
    }

    explicit LanePosition(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LanePosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LanePosition() = default;

    LanePosition(const LanePosition& other);
    LanePosition& operator=(const LanePosition& other);

    LanePosition(LanePosition&& other);
    LanePosition& operator=(LanePosition&& other);

    LanePosition(::zserio::PropagateAllocatorT,
            const LanePosition& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::lane::reference::types::LaneValidityType getType() const;
    void setType(::nds::lane::reference::types::LaneValidityType type_);

    uint32_t getNumPositions() const;
    void setNumPositions(uint32_t numPositions_);
    bool isNumPositionsUsed() const;
    bool isNumPositionsSet() const;
    void resetNumPositions();

    const ::zserio::vector<::nds::lane::reference::types::LanePositionChoice>& getPositions() const;
    ::zserio::vector<::nds::lane::reference::types::LanePositionChoice>& getPositions();
    void setPositions(const ::zserio::vector<::nds::lane::reference::types::LanePositionChoice>& positions_);
    void setPositions(::zserio::vector<::nds::lane::reference::types::LanePositionChoice>&& positions_);
    bool isPositionsUsed() const;
    bool isPositionsSet() const;
    void resetPositions();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LanePosition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_positions
    {
    public:
        using OwnerType = LanePosition;

        static void initializeElement(LanePosition& owner,
                ::nds::lane::reference::types::LanePositionChoice& element, size_t index);
    };

    class ZserioElementFactory_positions
    {
    public:
        using OwnerType = LanePosition;

        static void create(LanePosition& owner,
                ::zserio::vector<::nds::lane::reference::types::LanePositionChoice>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LanePosition& owner,
                ::zserio::vector<::nds::lane::reference::types::LanePositionChoice>& array,
                ::nds::lane::reference::types::LanePositionChoice::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_positions = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LanePositionChoice>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LanePositionChoice, ZserioElementFactory_positions>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_positions>;

    ::nds::lane::reference::types::LaneValidityType readType(::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::LaneValidityType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumPositions(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_positions> readPositions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_positions> readPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::lane::reference::types::LaneValidityType m_type_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_numPositions_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_positions> m_positions_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_POSITION_H
