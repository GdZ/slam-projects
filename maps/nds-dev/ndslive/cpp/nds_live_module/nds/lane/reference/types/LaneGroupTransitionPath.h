/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_PATH_H
#define NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_PATH_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/lane/reference/types/LaneGroupTransition.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneGroupTransitionPath
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumLaneGroups()
        {
            return m_numLaneGroups_;
        }

    private:
        ::zserio::DeltaContext m_numLaneGroups_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneGroupTransitionPath() noexcept :
            LaneGroupTransitionPath(allocator_type())
    {}

    explicit LaneGroupTransitionPath(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneGroupTransition = ::zserio::vector<::nds::lane::reference::types::LaneGroupTransition>>
    LaneGroupTransitionPath(
            uint8_t numLaneGroups_,
            ZSERIO_T_laneGroupTransition&& laneGroupTransition_,
            const allocator_type& allocator = allocator_type()) :
            LaneGroupTransitionPath(allocator)
    {
        m_numLaneGroups_ = numLaneGroups_;
        m_laneGroupTransition_ = ZserioArrayType_laneGroupTransition(::std::forward<ZSERIO_T_laneGroupTransition>(laneGroupTransition_));
    }

    explicit LaneGroupTransitionPath(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneGroupTransitionPath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneGroupTransitionPath() = default;

    LaneGroupTransitionPath(const LaneGroupTransitionPath&) = default;
    LaneGroupTransitionPath& operator=(const LaneGroupTransitionPath&) = default;

    LaneGroupTransitionPath(LaneGroupTransitionPath&&) = default;
    LaneGroupTransitionPath& operator=(LaneGroupTransitionPath&&) = default;

    LaneGroupTransitionPath(::zserio::PropagateAllocatorT,
            const LaneGroupTransitionPath& other, const allocator_type& allocator);

    uint8_t getNumLaneGroups() const;
    void setNumLaneGroups(uint8_t numLaneGroups_);

    const ::zserio::vector<::nds::lane::reference::types::LaneGroupTransition>& getLaneGroupTransition() const;
    ::zserio::vector<::nds::lane::reference::types::LaneGroupTransition>& getLaneGroupTransition();
    void setLaneGroupTransition(const ::zserio::vector<::nds::lane::reference::types::LaneGroupTransition>& laneGroupTransition_);
    void setLaneGroupTransition(::zserio::vector<::nds::lane::reference::types::LaneGroupTransition>&& laneGroupTransition_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneGroupTransitionPath& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_laneGroupTransition
    {
    public:
        using OwnerType = LaneGroupTransitionPath;

        static void create(LaneGroupTransitionPath& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupTransition>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneGroupTransitionPath& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupTransition>& array,
                ::nds::lane::reference::types::LaneGroupTransition::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_laneGroupTransition = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneGroupTransition>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneGroupTransition, ZserioElementFactory_laneGroupTransition>, ::zserio::ArrayType::NORMAL>;

    uint8_t readNumLaneGroups(::zserio::BitStreamReader& in);
    uint8_t readNumLaneGroups(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_laneGroupTransition readLaneGroupTransition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_laneGroupTransition readLaneGroupTransition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint8_t m_numLaneGroups_;
    ZserioArrayType_laneGroupTransition m_laneGroupTransition_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_PATH_H
