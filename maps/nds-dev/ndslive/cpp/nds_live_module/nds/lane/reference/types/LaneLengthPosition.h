/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_LENGTH_POSITION_H
#define NDS_LANE_REFERENCE_TYPES_LANE_LENGTH_POSITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/types/RangePosition.h>
#include <nds/lane/reference/types/LaneLength.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneLengthPosition
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLength()
        {
            return m_length_;
        }

        ::nds::core::types::RangePosition::ZserioPackingContext& getPosition()
        {
            return m_position_;
        }

    private:
        ::zserio::DeltaContext m_length_;
        ::nds::core::types::RangePosition::ZserioPackingContext m_position_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneLengthPosition() noexcept :
            LaneLengthPosition(allocator_type())
    {}

    explicit LaneLengthPosition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_position = ::nds::core::types::RangePosition>
    LaneLengthPosition(
            ::nds::lane::reference::types::LaneLength length_,
            ZSERIO_T_position&& position_,
            const allocator_type& allocator = allocator_type()) :
            LaneLengthPosition(allocator)
    {
        m_length_ = length_;
        m_position_ = ::std::forward<ZSERIO_T_position>(position_);
    }

    explicit LaneLengthPosition(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneLengthPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneLengthPosition() = default;

    LaneLengthPosition(const LaneLengthPosition& other);
    LaneLengthPosition& operator=(const LaneLengthPosition& other);

    LaneLengthPosition(LaneLengthPosition&& other);
    LaneLengthPosition& operator=(LaneLengthPosition&& other);

    LaneLengthPosition(::zserio::PropagateAllocatorT,
            const LaneLengthPosition& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::lane::reference::types::LaneLength getLength() const;
    void setLength(::nds::lane::reference::types::LaneLength length_);

    const ::nds::core::types::RangePosition& getPosition() const;
    ::nds::core::types::RangePosition& getPosition();
    void setPosition(const ::nds::core::types::RangePosition& position_);
    void setPosition(::nds::core::types::RangePosition&& position_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneLengthPosition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::reference::types::LaneLength readLength(::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::LaneLength readLength(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::RangePosition readPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::RangePosition readPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::lane::reference::types::LaneLength m_length_;
    ::nds::core::types::RangePosition m_position_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_LENGTH_POSITION_H
