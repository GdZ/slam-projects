/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_GROUP_REFERENCE_INDIRECT_H
#define NDS_LANE_REFERENCE_TYPES_LANE_GROUP_REFERENCE_INDIRECT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/location/LocationGeometry.h>
#include <nds/lane/reference/types/LaneGroupLocationSegment.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneGroupReferenceIndirect
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::location::LocationGeometry::ZserioPackingContext& getReferenceGeometry()
        {
            return m_referenceGeometry_;
        }

    private:
        ::nds::core::location::LocationGeometry::ZserioPackingContext m_referenceGeometry_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneGroupReferenceIndirect() noexcept :
            LaneGroupReferenceIndirect(allocator_type())
    {}

    explicit LaneGroupReferenceIndirect(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_referenceGeometry = ::nds::core::location::LocationGeometry,
            typename ZSERIO_T_referenceSegments = ::zserio::vector<::nds::lane::reference::types::LaneGroupLocationSegment>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_referenceGeometry, LaneGroupReferenceIndirect, allocator_type> = 0>
    LaneGroupReferenceIndirect(
            ZSERIO_T_referenceGeometry&& referenceGeometry_,
            ZSERIO_T_referenceSegments&& referenceSegments_,
            const allocator_type& allocator = allocator_type()) :
            LaneGroupReferenceIndirect(allocator)
    {
        m_referenceGeometry_ = ::std::forward<ZSERIO_T_referenceGeometry>(referenceGeometry_);
        m_referenceSegments_ = ZserioArrayType_referenceSegments(::std::forward<ZSERIO_T_referenceSegments>(referenceSegments_));
    }

    explicit LaneGroupReferenceIndirect(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneGroupReferenceIndirect(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneGroupReferenceIndirect() = default;

    LaneGroupReferenceIndirect(const LaneGroupReferenceIndirect& other);
    LaneGroupReferenceIndirect& operator=(const LaneGroupReferenceIndirect& other);

    LaneGroupReferenceIndirect(LaneGroupReferenceIndirect&& other);
    LaneGroupReferenceIndirect& operator=(LaneGroupReferenceIndirect&& other);

    LaneGroupReferenceIndirect(::zserio::PropagateAllocatorT,
            const LaneGroupReferenceIndirect& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::core::location::LocationGeometry& getReferenceGeometry() const;
    ::nds::core::location::LocationGeometry& getReferenceGeometry();
    void setReferenceGeometry(const ::nds::core::location::LocationGeometry& referenceGeometry_);
    void setReferenceGeometry(::nds::core::location::LocationGeometry&& referenceGeometry_);

    const ::zserio::vector<::nds::lane::reference::types::LaneGroupLocationSegment>& getReferenceSegments() const;
    ::zserio::vector<::nds::lane::reference::types::LaneGroupLocationSegment>& getReferenceSegments();
    void setReferenceSegments(const ::zserio::vector<::nds::lane::reference::types::LaneGroupLocationSegment>& referenceSegments_);
    void setReferenceSegments(::zserio::vector<::nds::lane::reference::types::LaneGroupLocationSegment>&& referenceSegments_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneGroupReferenceIndirect& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_referenceSegments
    {
    public:
        using OwnerType = LaneGroupReferenceIndirect;

        static void initializeElement(LaneGroupReferenceIndirect& owner,
                ::nds::lane::reference::types::LaneGroupLocationSegment& element, size_t index);
    };

    class ZserioElementFactory_referenceSegments
    {
    public:
        using OwnerType = LaneGroupReferenceIndirect;

        static void create(LaneGroupReferenceIndirect& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupLocationSegment>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneGroupReferenceIndirect& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupLocationSegment>& array,
                ::nds::lane::reference::types::LaneGroupLocationSegment::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_referenceSegments = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneGroupLocationSegment>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneGroupLocationSegment, ZserioElementFactory_referenceSegments>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_referenceSegments>;

    ::nds::core::location::LocationGeometry readReferenceGeometry(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::location::LocationGeometry readReferenceGeometry(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_referenceSegments readReferenceSegments(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_referenceSegments readReferenceSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::core::location::LocationGeometry m_referenceGeometry_;
    ZserioArrayType_referenceSegments m_referenceSegments_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_GROUP_REFERENCE_INDIRECT_H
