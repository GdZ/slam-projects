/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_GEO_PATH_H
#define NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_GEO_PATH_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/reference/types/LaneGroupReferenceIndirect.h>
#include <nds/lane/reference/types/LaneGroupTransition.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneGroupTransitionGeoPath
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneGroupTransition::ZserioPackingContext& getStartTransition()
        {
            return m_startTransition_;
        }

        ::nds::lane::reference::types::LaneGroupReferenceIndirect::ZserioPackingContext& getTransitionPath()
        {
            return m_transitionPath_;
        }

    private:
        ::nds::lane::reference::types::LaneGroupTransition::ZserioPackingContext m_startTransition_;
        ::nds::lane::reference::types::LaneGroupReferenceIndirect::ZserioPackingContext m_transitionPath_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneGroupTransitionGeoPath() noexcept :
            LaneGroupTransitionGeoPath(allocator_type())
    {}

    explicit LaneGroupTransitionGeoPath(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_startTransition = ::nds::lane::reference::types::LaneGroupTransition,
            typename ZSERIO_T_transitionPath = ::nds::lane::reference::types::LaneGroupReferenceIndirect,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_startTransition, LaneGroupTransitionGeoPath, allocator_type> = 0>
    LaneGroupTransitionGeoPath(
            ZSERIO_T_startTransition&& startTransition_,
            ZSERIO_T_transitionPath&& transitionPath_,
            const allocator_type& allocator = allocator_type()) :
            LaneGroupTransitionGeoPath(allocator)
    {
        m_startTransition_ = ::std::forward<ZSERIO_T_startTransition>(startTransition_);
        m_transitionPath_ = ::std::forward<ZSERIO_T_transitionPath>(transitionPath_);
    }

    explicit LaneGroupTransitionGeoPath(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneGroupTransitionGeoPath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneGroupTransitionGeoPath() = default;

    LaneGroupTransitionGeoPath(const LaneGroupTransitionGeoPath&) = default;
    LaneGroupTransitionGeoPath& operator=(const LaneGroupTransitionGeoPath&) = default;

    LaneGroupTransitionGeoPath(LaneGroupTransitionGeoPath&&) = default;
    LaneGroupTransitionGeoPath& operator=(LaneGroupTransitionGeoPath&&) = default;

    LaneGroupTransitionGeoPath(::zserio::PropagateAllocatorT,
            const LaneGroupTransitionGeoPath& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::lane::reference::types::LaneGroupTransition& getStartTransition() const;
    ::nds::lane::reference::types::LaneGroupTransition& getStartTransition();
    void setStartTransition(const ::nds::lane::reference::types::LaneGroupTransition& startTransition_);
    void setStartTransition(::nds::lane::reference::types::LaneGroupTransition&& startTransition_);

    const ::nds::lane::reference::types::LaneGroupReferenceIndirect& getTransitionPath() const;
    ::nds::lane::reference::types::LaneGroupReferenceIndirect& getTransitionPath();
    void setTransitionPath(const ::nds::lane::reference::types::LaneGroupReferenceIndirect& transitionPath_);
    void setTransitionPath(::nds::lane::reference::types::LaneGroupReferenceIndirect&& transitionPath_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneGroupTransitionGeoPath& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::reference::types::LaneGroupTransition readStartTransition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupTransition readStartTransition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupReferenceIndirect readTransitionPath(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupReferenceIndirect readTransitionPath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::reference::types::LaneGroupTransition m_startTransition_;
    ::nds::lane::reference::types::LaneGroupReferenceIndirect m_transitionPath_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_GEO_PATH_H
