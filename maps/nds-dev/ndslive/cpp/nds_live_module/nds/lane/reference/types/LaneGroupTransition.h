/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_H
#define NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/lane/reference/types/LaneGroupId.h>
#include <nds/lane/reference/types/LaneId.h>
#include <nds/lane/reference/types/LanesInTransition.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneGroupTransition
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext& getLaneGroupId()
        {
            return m_laneGroupId_;
        }

        ::zserio::DeltaContext& getNumLanes()
        {
            return m_numLanes_;
        }

    private:
        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext m_laneGroupId_;
        ::zserio::DeltaContext m_numLanes_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneGroupTransition() noexcept :
            LaneGroupTransition(allocator_type())
    {}

    explicit LaneGroupTransition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneGroupId = ::nds::lane::reference::types::LaneGroupId,
            typename ZSERIO_T_transitionLanes = ::zserio::vector<::nds::lane::reference::types::LaneId>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_laneGroupId, LaneGroupTransition, allocator_type> = 0>
    LaneGroupTransition(
            ZSERIO_T_laneGroupId&& laneGroupId_,
            ::nds::lane::reference::types::LanesInTransition numLanes_,
            ZSERIO_T_transitionLanes&& transitionLanes_,
            const allocator_type& allocator = allocator_type()) :
            LaneGroupTransition(allocator)
    {
        m_laneGroupId_ = ::std::forward<ZSERIO_T_laneGroupId>(laneGroupId_);
        m_numLanes_ = numLanes_;
        m_transitionLanes_ = ZserioArrayType_transitionLanes(::std::forward<ZSERIO_T_transitionLanes>(transitionLanes_));
    }

    explicit LaneGroupTransition(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneGroupTransition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneGroupTransition() = default;

    LaneGroupTransition(const LaneGroupTransition&) = default;
    LaneGroupTransition& operator=(const LaneGroupTransition&) = default;

    LaneGroupTransition(LaneGroupTransition&&) = default;
    LaneGroupTransition& operator=(LaneGroupTransition&&) = default;

    LaneGroupTransition(::zserio::PropagateAllocatorT,
            const LaneGroupTransition& other, const allocator_type& allocator);

    const ::nds::lane::reference::types::LaneGroupId& getLaneGroupId() const;
    ::nds::lane::reference::types::LaneGroupId& getLaneGroupId();
    void setLaneGroupId(const ::nds::lane::reference::types::LaneGroupId& laneGroupId_);
    void setLaneGroupId(::nds::lane::reference::types::LaneGroupId&& laneGroupId_);

    ::nds::lane::reference::types::LanesInTransition getNumLanes() const;
    void setNumLanes(::nds::lane::reference::types::LanesInTransition numLanes_);

    const ::zserio::vector<::nds::lane::reference::types::LaneId>& getTransitionLanes() const;
    ::zserio::vector<::nds::lane::reference::types::LaneId>& getTransitionLanes();
    void setTransitionLanes(const ::zserio::vector<::nds::lane::reference::types::LaneId>& transitionLanes_);
    void setTransitionLanes(::zserio::vector<::nds::lane::reference::types::LaneId>&& transitionLanes_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneGroupTransition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_transitionLanes
    {
    public:
        using OwnerType = LaneGroupTransition;

        static void create(LaneGroupTransition& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneId>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneGroupTransition& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneId>& array,
                ::nds::lane::reference::types::LaneId::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_transitionLanes = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneId>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneId, ZserioElementFactory_transitionLanes>, ::zserio::ArrayType::NORMAL>;

    ::nds::lane::reference::types::LaneGroupId readLaneGroupId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupId readLaneGroupId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::reference::types::LanesInTransition readNumLanes(::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::LanesInTransition readNumLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_transitionLanes readTransitionLanes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_transitionLanes readTransitionLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::reference::types::LaneGroupId m_laneGroupId_;
    ::nds::lane::reference::types::LanesInTransition m_numLanes_;
    ZserioArrayType_transitionLanes m_transitionLanes_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_GROUP_TRANSITION_H
