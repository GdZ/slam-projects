/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_POSITION_CHOICE_H
#define NDS_LANE_REFERENCE_TYPES_LANE_POSITION_CHOICE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/lane/reference/types/LaneGeometryPosition.h>
#include <nds/lane/reference/types/LaneGeometryPositionOffset.h>
#include <nds/lane/reference/types/LaneLengthPosition.h>
#include <nds/lane/reference/types/LanePercentagePosition.h>
#include <nds/lane/reference/types/LaneValidityPosition.h>
#include <nds/lane/reference/types/LaneValidityType.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LanePositionChoice
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_validityPosition = 0,
        CHOICE_lengthPosition = 1,
        CHOICE_geometryPosition = 2,
        CHOICE_geometryPositionOffset = 3,
        CHOICE_percentagePosition = 4,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneValidityPosition::ZserioPackingContext& getValidityPosition()
        {
            return m_validityPosition_;
        }

        ::nds::lane::reference::types::LaneLengthPosition::ZserioPackingContext& getLengthPosition()
        {
            return m_lengthPosition_;
        }

        ::zserio::DeltaContext& getGeometryPosition()
        {
            return m_geometryPosition_;
        }

        ::nds::lane::reference::types::LaneGeometryPositionOffset::ZserioPackingContext& getGeometryPositionOffset()
        {
            return m_geometryPositionOffset_;
        }

        ::nds::lane::reference::types::LanePercentagePosition::ZserioPackingContext& getPercentagePosition()
        {
            return m_percentagePosition_;
        }

    private:
        ::nds::lane::reference::types::LaneValidityPosition::ZserioPackingContext m_validityPosition_;
        ::nds::lane::reference::types::LaneLengthPosition::ZserioPackingContext m_lengthPosition_;
        ::zserio::DeltaContext m_geometryPosition_;
        ::nds::lane::reference::types::LaneGeometryPositionOffset::ZserioPackingContext m_geometryPositionOffset_;
        ::nds::lane::reference::types::LanePercentagePosition::ZserioPackingContext m_percentagePosition_;
    };

    LanePositionChoice() noexcept :
            LanePositionChoice(allocator_type())
    {}

    explicit LanePositionChoice(const allocator_type& allocator) noexcept;

    explicit LanePositionChoice(::zserio::BitStreamReader& in,
            ::nds::lane::reference::types::LaneValidityType type_, const allocator_type& allocator = allocator_type());
    explicit LanePositionChoice(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::lane::reference::types::LaneValidityType type_, const allocator_type& allocator = allocator_type());

    ~LanePositionChoice() = default;

    LanePositionChoice(const LanePositionChoice& other);
    LanePositionChoice& operator=(const LanePositionChoice& other);

    LanePositionChoice(LanePositionChoice&& other);
    LanePositionChoice& operator=(LanePositionChoice&& other);

    LanePositionChoice(::zserio::PropagateAllocatorT,
            const LanePositionChoice& other, const allocator_type& allocator);

    void initialize(
            ::nds::lane::reference::types::LaneValidityType type_);
    bool isInitialized() const;
    void initializeChildren();

    ChoiceTag choiceTag() const;

    ::nds::lane::reference::types::LaneValidityType getType() const;

    const ::nds::lane::reference::types::LaneValidityPosition& getValidityPosition() const;
    ::nds::lane::reference::types::LaneValidityPosition& getValidityPosition();
    void setValidityPosition(const ::nds::lane::reference::types::LaneValidityPosition& validityPosition_);
    void setValidityPosition(::nds::lane::reference::types::LaneValidityPosition&& validityPosition_);

    const ::nds::lane::reference::types::LaneLengthPosition& getLengthPosition() const;
    ::nds::lane::reference::types::LaneLengthPosition& getLengthPosition();
    void setLengthPosition(const ::nds::lane::reference::types::LaneLengthPosition& lengthPosition_);
    void setLengthPosition(::nds::lane::reference::types::LaneLengthPosition&& lengthPosition_);

    ::nds::lane::reference::types::LaneGeometryPosition getGeometryPosition() const;
    void setGeometryPosition(::nds::lane::reference::types::LaneGeometryPosition geometryPosition_);

    const ::nds::lane::reference::types::LaneGeometryPositionOffset& getGeometryPositionOffset() const;
    ::nds::lane::reference::types::LaneGeometryPositionOffset& getGeometryPositionOffset();
    void setGeometryPositionOffset(const ::nds::lane::reference::types::LaneGeometryPositionOffset& geometryPositionOffset_);
    void setGeometryPositionOffset(::nds::lane::reference::types::LaneGeometryPositionOffset&& geometryPositionOffset_);

    const ::nds::lane::reference::types::LanePercentagePosition& getPercentagePosition() const;
    ::nds::lane::reference::types::LanePercentagePosition& getPercentagePosition();
    void setPercentagePosition(const ::nds::lane::reference::types::LanePercentagePosition& percentagePosition_);
    void setPercentagePosition(::nds::lane::reference::types::LanePercentagePosition&& percentagePosition_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LanePositionChoice& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::lane::reference::types::LaneValidityType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_POSITION_CHOICE_H
