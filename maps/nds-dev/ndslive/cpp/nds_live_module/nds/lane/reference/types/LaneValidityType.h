/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_VALIDITY_TYPE_H
#define NDS_LANE_REFERENCE_TYPES_LANE_VALIDITY_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

enum class LaneValidityType : uint8_t
{
    NONE = UINT8_C(0),
    COMPLETE = UINT8_C(1),
    POSITION = UINT8_C(2),
    LENGTH = UINT8_C(3),
    GEOMETRY = UINT8_C(4),
    GEOMETRY_OFFSET = UINT8_C(5),
    PERCENTAGE = UINT8_C(6)
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for LaneValidityType enumeration.
template <>
struct EnumTraits<::nds::lane::reference::types::LaneValidityType>
{
    static constexpr ::std::array<const char*, 7> names =
    {{
        "NONE",
        "COMPLETE",
        "POSITION",
        "LENGTH",
        "GEOMETRY",
        "GEOMETRY_OFFSET",
        "PERCENTAGE"
    }};

    static constexpr ::std::array<::nds::lane::reference::types::LaneValidityType, 7> values =
    {{
        ::nds::lane::reference::types::LaneValidityType::NONE,
        ::nds::lane::reference::types::LaneValidityType::COMPLETE,
        ::nds::lane::reference::types::LaneValidityType::POSITION,
        ::nds::lane::reference::types::LaneValidityType::LENGTH,
        ::nds::lane::reference::types::LaneValidityType::GEOMETRY,
        ::nds::lane::reference::types::LaneValidityType::GEOMETRY_OFFSET,
        ::nds::lane::reference::types::LaneValidityType::PERCENTAGE
    }};

    static constexpr const char* enumName = "LaneValidityType";
};

template <>
size_t enumToOrdinal<::nds::lane::reference::types::LaneValidityType>(::nds::lane::reference::types::LaneValidityType value);

template <>
::nds::lane::reference::types::LaneValidityType valueToEnum<::nds::lane::reference::types::LaneValidityType>(
        typename ::std::underlying_type<::nds::lane::reference::types::LaneValidityType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::lane::reference::types::LaneValidityType>(::nds::lane::reference::types::LaneValidityType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::lane::reference::types::LaneValidityType>(::zserio::DeltaContext& context, ::nds::lane::reference::types::LaneValidityType value);

template <>
size_t bitSizeOf<::nds::lane::reference::types::LaneValidityType>(::nds::lane::reference::types::LaneValidityType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::lane::reference::types::LaneValidityType>(::zserio::DeltaContext& context, ::nds::lane::reference::types::LaneValidityType value);

template <>
size_t initializeOffsets<::nds::lane::reference::types::LaneValidityType>(size_t bitPosition, ::nds::lane::reference::types::LaneValidityType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::lane::reference::types::LaneValidityType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::lane::reference::types::LaneValidityType value);

template <>
::nds::lane::reference::types::LaneValidityType read<::nds::lane::reference::types::LaneValidityType>(::zserio::BitStreamReader& in);

template <>
::nds::lane::reference::types::LaneValidityType read<::nds::lane::reference::types::LaneValidityType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::lane::reference::types::LaneValidityType>(::zserio::BitStreamWriter& out, ::nds::lane::reference::types::LaneValidityType value);

template <>
void write<::zserio::DeltaContext, ::nds::lane::reference::types::LaneValidityType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::lane::reference::types::LaneValidityType value);

} // namespace zserio

#endif // NDS_LANE_REFERENCE_TYPES_LANE_VALIDITY_TYPE_H
