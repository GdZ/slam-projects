/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_GROUP_POSITION_VALIDITY_H
#define NDS_LANE_REFERENCE_TYPES_LANE_GROUP_POSITION_VALIDITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/lane/reference/types/LanePosition.h>
#include <nds/lane/reference/types/LaneValidityDirection.h>
#include <nds/lane/reference/types/LanesInMask.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneGroupPositionValidity
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumLanes()
        {
            return m_numLanes_;
        }

    private:
        ::zserio::DeltaContext m_numLanes_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneGroupPositionValidity() noexcept :
            LaneGroupPositionValidity(allocator_type())
    {}

    explicit LaneGroupPositionValidity(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_lanes = ::zserio::vector<::nds::lane::reference::types::LanePosition>,
            typename ZSERIO_T_directions = ::zserio::vector<::nds::lane::reference::types::LaneValidityDirection>>
    LaneGroupPositionValidity(
            ::nds::lane::reference::types::LanesInMask numLanes_,
            ZSERIO_T_lanes&& lanes_,
            ZSERIO_T_directions&& directions_,
            const allocator_type& allocator = allocator_type()) :
            LaneGroupPositionValidity(allocator)
    {
        m_numLanes_ = numLanes_;
        m_lanes_ = ZserioArrayType_lanes(::std::forward<ZSERIO_T_lanes>(lanes_));
        m_directions_ = ZserioArrayType_directions(::std::forward<ZSERIO_T_directions>(directions_));
    }

    explicit LaneGroupPositionValidity(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift coordShift_, const allocator_type& allocator = allocator_type());
    explicit LaneGroupPositionValidity(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift coordShift_, const allocator_type& allocator = allocator_type());

    ~LaneGroupPositionValidity() = default;

    LaneGroupPositionValidity(const LaneGroupPositionValidity& other);
    LaneGroupPositionValidity& operator=(const LaneGroupPositionValidity& other);

    LaneGroupPositionValidity(LaneGroupPositionValidity&& other);
    LaneGroupPositionValidity& operator=(LaneGroupPositionValidity&& other);

    LaneGroupPositionValidity(::zserio::PropagateAllocatorT,
            const LaneGroupPositionValidity& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift coordShift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getCoordShift() const;

    ::nds::lane::reference::types::LanesInMask getNumLanes() const;
    void setNumLanes(::nds::lane::reference::types::LanesInMask numLanes_);

    const ::zserio::vector<::nds::lane::reference::types::LanePosition>& getLanes() const;
    ::zserio::vector<::nds::lane::reference::types::LanePosition>& getLanes();
    void setLanes(const ::zserio::vector<::nds::lane::reference::types::LanePosition>& lanes_);
    void setLanes(::zserio::vector<::nds::lane::reference::types::LanePosition>&& lanes_);

    const ::zserio::vector<::nds::lane::reference::types::LaneValidityDirection>& getDirections() const;
    ::zserio::vector<::nds::lane::reference::types::LaneValidityDirection>& getDirections();
    void setDirections(const ::zserio::vector<::nds::lane::reference::types::LaneValidityDirection>& directions_);
    void setDirections(::zserio::vector<::nds::lane::reference::types::LaneValidityDirection>&& directions_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneGroupPositionValidity& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_lanes
    {
    public:
        using OwnerType = LaneGroupPositionValidity;

        static void initializeElement(LaneGroupPositionValidity& owner,
                ::nds::lane::reference::types::LanePosition& element, size_t index);
    };

    class ZserioElementFactory_lanes
    {
    public:
        using OwnerType = LaneGroupPositionValidity;

        static void create(LaneGroupPositionValidity& owner,
                ::zserio::vector<::nds::lane::reference::types::LanePosition>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneGroupPositionValidity& owner,
                ::zserio::vector<::nds::lane::reference::types::LanePosition>& array,
                ::nds::lane::reference::types::LanePosition::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_lanes = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LanePosition>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LanePosition, ZserioElementFactory_lanes>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_lanes>;
    using ZserioArrayType_directions = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneValidityDirection>, ::zserio::EnumArrayTraits<::nds::lane::reference::types::LaneValidityDirection>, ::zserio::ArrayType::NORMAL>;

    ::nds::lane::reference::types::LanesInMask readNumLanes(::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::LanesInMask readNumLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_lanes readLanes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_lanes readLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_directions readDirections(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_directions readDirections(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_coordShift_;
    bool m_isInitialized;
    ::nds::lane::reference::types::LanesInMask m_numLanes_;
    ZserioArrayType_lanes m_lanes_;
    ZserioArrayType_directions m_directions_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_GROUP_POSITION_VALIDITY_H
