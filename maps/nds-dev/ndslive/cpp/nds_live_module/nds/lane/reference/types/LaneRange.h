/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_REFERENCE_TYPES_LANE_RANGE_H
#define NDS_LANE_REFERENCE_TYPES_LANE_RANGE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/lane/reference/types/LaneRangeChoice.h>
#include <nds/lane/reference/types/LaneValidityType.h>

namespace nds
{
namespace lane
{
namespace reference
{
namespace types
{

class LaneRange
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getNumRanges()
        {
            return m_numRanges_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_numRanges_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneRange() noexcept :
            LaneRange(allocator_type())
    {}

    explicit LaneRange(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_numRanges = uint32_t,
            typename ZSERIO_T_range = ::zserio::vector<::nds::lane::reference::types::LaneRangeChoice>>
    LaneRange(
            ::nds::lane::reference::types::LaneValidityType type_,
            ZSERIO_T_numRanges&& numRanges_,
            ZSERIO_T_range&& range_,
            const allocator_type& allocator = allocator_type()) :
            LaneRange(allocator)
    {
        m_type_ = type_;
        m_numRanges_ = ::std::forward<ZSERIO_T_numRanges>(numRanges_);
        m_range_ = ::zserio::createOptionalArray<ZserioArrayType_range>(::std::forward<ZSERIO_T_range>(range_));
    }

    explicit LaneRange(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneRange() = default;

    LaneRange(const LaneRange& other);
    LaneRange& operator=(const LaneRange& other);

    LaneRange(LaneRange&& other);
    LaneRange& operator=(LaneRange&& other);

    LaneRange(::zserio::PropagateAllocatorT,
            const LaneRange& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::lane::reference::types::LaneValidityType getType() const;
    void setType(::nds::lane::reference::types::LaneValidityType type_);

    uint32_t getNumRanges() const;
    void setNumRanges(uint32_t numRanges_);
    bool isNumRangesUsed() const;
    bool isNumRangesSet() const;
    void resetNumRanges();

    const ::zserio::vector<::nds::lane::reference::types::LaneRangeChoice>& getRange() const;
    ::zserio::vector<::nds::lane::reference::types::LaneRangeChoice>& getRange();
    void setRange(const ::zserio::vector<::nds::lane::reference::types::LaneRangeChoice>& range_);
    void setRange(::zserio::vector<::nds::lane::reference::types::LaneRangeChoice>&& range_);
    bool isRangeUsed() const;
    bool isRangeSet() const;
    void resetRange();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneRange& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_range
    {
    public:
        using OwnerType = LaneRange;

        static void initializeElement(LaneRange& owner,
                ::nds::lane::reference::types::LaneRangeChoice& element, size_t index);
    };

    class ZserioElementFactory_range
    {
    public:
        using OwnerType = LaneRange;

        static void create(LaneRange& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneRangeChoice>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneRange& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneRangeChoice>& array,
                ::nds::lane::reference::types::LaneRangeChoice::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_range = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneRangeChoice>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneRangeChoice, ZserioElementFactory_range>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_range>;

    ::nds::lane::reference::types::LaneValidityType readType(::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::LaneValidityType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumRanges(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumRanges(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_range> readRange(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_range> readRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::lane::reference::types::LaneValidityType m_type_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_numRanges_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_range> m_range_;
};

} // namespace types
} // namespace reference
} // namespace lane
} // namespace nds

#endif // NDS_LANE_REFERENCE_TYPES_LANE_RANGE_H
