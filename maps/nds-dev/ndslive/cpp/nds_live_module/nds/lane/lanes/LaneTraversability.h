/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANES_LANE_TRAVERSABILITY_H
#define NDS_LANE_LANES_LANE_TRAVERSABILITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/lane/reference/types/LaneGeometryRange.h>

namespace nds
{
namespace lane
{
namespace lanes
{

class LaneTraversability
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneTraversability() noexcept :
            LaneTraversability(allocator_type())
    {}

    explicit LaneTraversability(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_ranges = ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_ranges, LaneTraversability, allocator_type> = 0>
    explicit LaneTraversability(
            ZSERIO_T_ranges&& ranges_,
            const allocator_type& allocator = allocator_type()) :
            LaneTraversability(allocator)
    {
        m_ranges_ = ZserioArrayType_ranges(::std::forward<ZSERIO_T_ranges>(ranges_));
    }

    explicit LaneTraversability(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneTraversability(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneTraversability() = default;

    LaneTraversability(const LaneTraversability&) = default;
    LaneTraversability& operator=(const LaneTraversability&) = default;

    LaneTraversability(LaneTraversability&&) = default;
    LaneTraversability& operator=(LaneTraversability&&) = default;

    LaneTraversability(::zserio::PropagateAllocatorT,
            const LaneTraversability& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& getRanges() const;
    ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& getRanges();
    void setRanges(const ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& ranges_);
    void setRanges(::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>&& ranges_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneTraversability& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_ranges
    {
    public:
        using OwnerType = LaneTraversability;

        static void create(LaneTraversability& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneTraversability& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& array,
                ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_ranges = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneGeometryRange, ZserioElementFactory_ranges>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_ranges readRanges(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_ranges readRanges(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_ranges m_ranges_;
};

} // namespace lanes
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANES_LANE_TRAVERSABILITY_H
