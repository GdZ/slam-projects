/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANES_LANE_CONNECTION_TYPE_H
#define NDS_LANE_LANES_LANE_CONNECTION_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace lane
{
namespace lanes
{

enum class LaneConnectionType : uint8_t
{
    BY_IDENTIFIER = UINT8_C(0),
    UNKNOWN = UINT8_C(1),
    TERMINATES = UINT8_C(2),
    CONNECTED_OTHER_TILE = UINT8_C(3)
};

} // namespace lanes
} // namespace lane
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for LaneConnectionType enumeration.
template <>
struct EnumTraits<::nds::lane::lanes::LaneConnectionType>
{
    static constexpr ::std::array<const char*, 4> names =
    {{
        "BY_IDENTIFIER",
        "UNKNOWN",
        "TERMINATES",
        "CONNECTED_OTHER_TILE"
    }};

    static constexpr ::std::array<::nds::lane::lanes::LaneConnectionType, 4> values =
    {{
        ::nds::lane::lanes::LaneConnectionType::BY_IDENTIFIER,
        ::nds::lane::lanes::LaneConnectionType::UNKNOWN,
        ::nds::lane::lanes::LaneConnectionType::TERMINATES,
        ::nds::lane::lanes::LaneConnectionType::CONNECTED_OTHER_TILE
    }};

    static constexpr const char* enumName = "LaneConnectionType";
};

template <>
size_t enumToOrdinal<::nds::lane::lanes::LaneConnectionType>(::nds::lane::lanes::LaneConnectionType value);

template <>
::nds::lane::lanes::LaneConnectionType valueToEnum<::nds::lane::lanes::LaneConnectionType>(
        typename ::std::underlying_type<::nds::lane::lanes::LaneConnectionType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::lane::lanes::LaneConnectionType>(::nds::lane::lanes::LaneConnectionType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::lane::lanes::LaneConnectionType>(::zserio::DeltaContext& context, ::nds::lane::lanes::LaneConnectionType value);

template <>
size_t bitSizeOf<::nds::lane::lanes::LaneConnectionType>(::nds::lane::lanes::LaneConnectionType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::lane::lanes::LaneConnectionType>(::zserio::DeltaContext& context, ::nds::lane::lanes::LaneConnectionType value);

template <>
size_t initializeOffsets<::nds::lane::lanes::LaneConnectionType>(size_t bitPosition, ::nds::lane::lanes::LaneConnectionType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::lane::lanes::LaneConnectionType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::lane::lanes::LaneConnectionType value);

template <>
::nds::lane::lanes::LaneConnectionType read<::nds::lane::lanes::LaneConnectionType>(::zserio::BitStreamReader& in);

template <>
::nds::lane::lanes::LaneConnectionType read<::nds::lane::lanes::LaneConnectionType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::lane::lanes::LaneConnectionType>(::zserio::BitStreamWriter& out, ::nds::lane::lanes::LaneConnectionType value);

template <>
void write<::zserio::DeltaContext, ::nds::lane::lanes::LaneConnectionType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::lane::lanes::LaneConnectionType value);

} // namespace zserio

#endif // NDS_LANE_LANES_LANE_CONNECTION_TYPE_H
