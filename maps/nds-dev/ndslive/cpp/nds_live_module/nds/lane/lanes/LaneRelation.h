/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANES_LANE_RELATION_H
#define NDS_LANE_LANES_LANE_RELATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/lane/lanes/LaneRelationType.h>
#include <nds/lane/reference/types/LaneGeometryRange.h>
#include <nds/lane/reference/types/LaneId.h>

namespace nds
{
namespace lane
{
namespace lanes
{

class LaneRelation
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLaneRelationType()
        {
            return m_laneRelationType_;
        }

        ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext& getRange()
        {
            return m_range_;
        }

        ::nds::lane::reference::types::LaneId::ZserioPackingContext& getOtherLane()
        {
            return m_otherLane_;
        }

        ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext& getOtherLaneRange()
        {
            return m_otherLaneRange_;
        }

    private:
        ::zserio::DeltaContext m_laneRelationType_;
        ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext m_range_;
        ::nds::lane::reference::types::LaneId::ZserioPackingContext m_otherLane_;
        ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext m_otherLaneRange_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneRelation() noexcept :
            LaneRelation(allocator_type())
    {}

    explicit LaneRelation(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_range = ::nds::lane::reference::types::LaneGeometryRange,
            typename ZSERIO_T_otherLane = ::nds::lane::reference::types::LaneId,
            typename ZSERIO_T_otherLaneRange = ::nds::lane::reference::types::LaneGeometryRange,
            typename ZSERIO_T_otherLaneSameDigitizationDirection = bool>
    LaneRelation(
            ::nds::lane::lanes::LaneRelationType laneRelationType_,
            ZSERIO_T_range&& range_,
            ZSERIO_T_otherLane&& otherLane_,
            ZSERIO_T_otherLaneRange&& otherLaneRange_,
            ZSERIO_T_otherLaneSameDigitizationDirection&& otherLaneSameDigitizationDirection_,
            const allocator_type& allocator = allocator_type()) :
            LaneRelation(allocator)
    {
        m_laneRelationType_ = laneRelationType_;
        m_range_ = ::std::forward<ZSERIO_T_range>(range_);
        m_otherLane_ = ::std::forward<ZSERIO_T_otherLane>(otherLane_);
        m_otherLaneRange_ = ::std::forward<ZSERIO_T_otherLaneRange>(otherLaneRange_);
        m_otherLaneSameDigitizationDirection_ = ::std::forward<ZSERIO_T_otherLaneSameDigitizationDirection>(otherLaneSameDigitizationDirection_);
    }

    explicit LaneRelation(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneRelation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneRelation() = default;

    LaneRelation(const LaneRelation&) = default;
    LaneRelation& operator=(const LaneRelation&) = default;

    LaneRelation(LaneRelation&&) = default;
    LaneRelation& operator=(LaneRelation&&) = default;

    LaneRelation(::zserio::PropagateAllocatorT,
            const LaneRelation& other, const allocator_type& allocator);

    ::nds::lane::lanes::LaneRelationType getLaneRelationType() const;
    void setLaneRelationType(::nds::lane::lanes::LaneRelationType laneRelationType_);

    const ::nds::lane::reference::types::LaneGeometryRange& getRange() const;
    ::nds::lane::reference::types::LaneGeometryRange& getRange();
    void setRange(const ::nds::lane::reference::types::LaneGeometryRange& range_);
    void setRange(::nds::lane::reference::types::LaneGeometryRange&& range_);

    const ::nds::lane::reference::types::LaneId& getOtherLane() const;
    ::nds::lane::reference::types::LaneId& getOtherLane();
    void setOtherLane(const ::nds::lane::reference::types::LaneId& otherLane_);
    void setOtherLane(::nds::lane::reference::types::LaneId&& otherLane_);

    const ::nds::lane::reference::types::LaneGeometryRange& getOtherLaneRange() const;
    ::nds::lane::reference::types::LaneGeometryRange& getOtherLaneRange();
    void setOtherLaneRange(const ::nds::lane::reference::types::LaneGeometryRange& otherLaneRange_);
    void setOtherLaneRange(::nds::lane::reference::types::LaneGeometryRange&& otherLaneRange_);

    bool getOtherLaneSameDigitizationDirection() const;
    void setOtherLaneSameDigitizationDirection(bool otherLaneSameDigitizationDirection_);
    bool isOtherLaneSameDigitizationDirectionUsed() const;
    bool isOtherLaneSameDigitizationDirectionSet() const;
    void resetOtherLaneSameDigitizationDirection();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneRelation& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::lanes::LaneRelationType readLaneRelationType(::zserio::BitStreamReader& in);
    ::nds::lane::lanes::LaneRelationType readLaneRelationType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::LaneGeometryRange readRange(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGeometryRange readRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::reference::types::LaneId readOtherLane(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneId readOtherLane(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGeometryRange readOtherLaneRange(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGeometryRange readOtherLaneRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<bool> readOtherLaneSameDigitizationDirection(::zserio::BitStreamReader& in);

    ::nds::lane::lanes::LaneRelationType m_laneRelationType_;
    ::nds::lane::reference::types::LaneGeometryRange m_range_;
    ::nds::lane::reference::types::LaneId m_otherLane_;
    ::nds::lane::reference::types::LaneGeometryRange m_otherLaneRange_;
    ::zserio::InplaceOptionalHolder<bool> m_otherLaneSameDigitizationDirection_;
};

} // namespace lanes
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANES_LANE_RELATION_H
