/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANES_LANE_CONNECTOR_H
#define NDS_LANE_LANES_LANE_CONNECTOR_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/lane/lanes/LaneConnectionType.h>
#include <nds/lane/lanes/LaneSplitMergePriority.h>
#include <nds/lane/reference/types/DirectedLaneReference.h>

namespace nds
{
namespace lane
{
namespace lanes
{

class LaneConnector
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getPriority()
        {
            return m_priority_;
        }

        ::nds::lane::reference::types::DirectedLaneReference::ZserioPackingContext& getConnectedLaneId()
        {
            return m_connectedLaneId_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_priority_;
        ::nds::lane::reference::types::DirectedLaneReference::ZserioPackingContext m_connectedLaneId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneConnector() noexcept :
            LaneConnector(allocator_type())
    {}

    explicit LaneConnector(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_connectedLaneId = ::nds::lane::reference::types::DirectedLaneReference>
    LaneConnector(
            ::nds::lane::lanes::LaneConnectionType type_,
            ::nds::lane::lanes::LaneSplitMergePriority priority_,
            ZSERIO_T_connectedLaneId&& connectedLaneId_,
            const allocator_type& allocator = allocator_type()) :
            LaneConnector(allocator)
    {
        m_type_ = type_;
        m_priority_ = priority_;
        m_connectedLaneId_ = ::std::forward<ZSERIO_T_connectedLaneId>(connectedLaneId_);
    }

    explicit LaneConnector(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneConnector(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneConnector() = default;

    LaneConnector(const LaneConnector&) = default;
    LaneConnector& operator=(const LaneConnector&) = default;

    LaneConnector(LaneConnector&&) = default;
    LaneConnector& operator=(LaneConnector&&) = default;

    LaneConnector(::zserio::PropagateAllocatorT,
            const LaneConnector& other, const allocator_type& allocator);

    ::nds::lane::lanes::LaneConnectionType getType() const;
    void setType(::nds::lane::lanes::LaneConnectionType type_);

    ::nds::lane::lanes::LaneSplitMergePriority getPriority() const;
    void setPriority(::nds::lane::lanes::LaneSplitMergePriority priority_);

    const ::nds::lane::reference::types::DirectedLaneReference& getConnectedLaneId() const;
    ::nds::lane::reference::types::DirectedLaneReference& getConnectedLaneId();
    void setConnectedLaneId(const ::nds::lane::reference::types::DirectedLaneReference& connectedLaneId_);
    void setConnectedLaneId(::nds::lane::reference::types::DirectedLaneReference&& connectedLaneId_);
    bool isConnectedLaneIdUsed() const;
    bool isConnectedLaneIdSet() const;
    void resetConnectedLaneId();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneConnector& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::lanes::LaneConnectionType readType(::zserio::BitStreamReader& in);
    ::nds::lane::lanes::LaneConnectionType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::lanes::LaneSplitMergePriority readPriority(::zserio::BitStreamReader& in);
    ::nds::lane::lanes::LaneSplitMergePriority readPriority(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::DirectedLaneReference> readConnectedLaneId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::DirectedLaneReference> readConnectedLaneId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::lanes::LaneConnectionType m_type_;
    ::nds::lane::lanes::LaneSplitMergePriority m_priority_;
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::DirectedLaneReference> m_connectedLaneId_;
};

} // namespace lanes
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANES_LANE_CONNECTOR_H
