/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANES_LANE_H
#define NDS_LANE_LANES_LANE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/lane/boundaries/BoundarySet.h>
#include <nds/lane/lanes/DirectedLaneId.h>
#include <nds/lane/lanes/LaneCenterLineGeometryId.h>
#include <nds/lane/lanes/LaneConnector.h>
#include <nds/lane/lanes/LaneRelation.h>
#include <nds/lane/lanes/LaneTraversability.h>
#include <nds/lane/reference/types/LaneId.h>
#include <nds/lane/reference/types/LaneLength.h>
#include <nds/lane/types/LaneLayoutType.h>

namespace nds
{
namespace lane
{
namespace lanes
{

class Lane
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::lanes::DirectedLaneId::ZserioPackingContext& getDirectedLaneId()
        {
            return m_directedLaneId_;
        }

        ::nds::lane::reference::types::LaneId::ZserioPackingContext& getLaneId()
        {
            return m_laneId_;
        }

        ::zserio::DeltaContext& getLength()
        {
            return m_length_;
        }

        ::zserio::DeltaContext& getCenterLineGeometryRef()
        {
            return m_centerLineGeometryRef_;
        }

        ::nds::lane::lanes::LaneTraversability::ZserioPackingContext& getOpenToLeft()
        {
            return m_openToLeft_;
        }

        ::nds::lane::lanes::LaneTraversability::ZserioPackingContext& getOpenToRight()
        {
            return m_openToRight_;
        }

    private:
        ::nds::lane::lanes::DirectedLaneId::ZserioPackingContext m_directedLaneId_;
        ::nds::lane::reference::types::LaneId::ZserioPackingContext m_laneId_;
        ::zserio::DeltaContext m_length_;
        ::zserio::DeltaContext m_centerLineGeometryRef_;
        ::nds::lane::lanes::LaneTraversability::ZserioPackingContext m_openToLeft_;
        ::nds::lane::lanes::LaneTraversability::ZserioPackingContext m_openToRight_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Lane() noexcept :
            Lane(allocator_type())
    {}

    explicit Lane(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_directedLaneId = ::nds::lane::lanes::DirectedLaneId,
            typename ZSERIO_T_laneId = ::nds::lane::reference::types::LaneId,
            typename ZSERIO_T_previousLanes = ::zserio::vector<::nds::lane::lanes::LaneConnector>,
            typename ZSERIO_T_nextLanes = ::zserio::vector<::nds::lane::lanes::LaneConnector>,
            typename ZSERIO_T_laneRelations = ::zserio::vector<::nds::lane::lanes::LaneRelation>,
            typename ZSERIO_T_openToLeft = ::nds::lane::lanes::LaneTraversability,
            typename ZSERIO_T_openToRight = ::nds::lane::lanes::LaneTraversability,
            typename ZSERIO_T_boundariesLeft = ::zserio::vector<::nds::lane::boundaries::BoundarySet>,
            typename ZSERIO_T_boundariesRight = ::zserio::vector<::nds::lane::boundaries::BoundarySet>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_directedLaneId, Lane, allocator_type> = 0>
    Lane(
            ZSERIO_T_directedLaneId&& directedLaneId_,
            ZSERIO_T_laneId&& laneId_,
            ZSERIO_T_previousLanes&& previousLanes_,
            ZSERIO_T_nextLanes&& nextLanes_,
            ::nds::lane::reference::types::LaneLength length_,
            ::nds::lane::lanes::LaneCenterLineGeometryId centerLineGeometryRef_,
            ZSERIO_T_laneRelations&& laneRelations_,
            ZSERIO_T_openToLeft&& openToLeft_,
            ZSERIO_T_openToRight&& openToRight_,
            ZSERIO_T_boundariesLeft&& boundariesLeft_,
            ZSERIO_T_boundariesRight&& boundariesRight_,
            const allocator_type& allocator = allocator_type()) :
            Lane(allocator)
    {
        m_directedLaneId_ = ::std::forward<ZSERIO_T_directedLaneId>(directedLaneId_);
        m_laneId_ = ::std::forward<ZSERIO_T_laneId>(laneId_);
        m_previousLanes_ = ZserioArrayType_previousLanes(::std::forward<ZSERIO_T_previousLanes>(previousLanes_));
        m_nextLanes_ = ZserioArrayType_nextLanes(::std::forward<ZSERIO_T_nextLanes>(nextLanes_));
        m_length_ = length_;
        m_centerLineGeometryRef_ = centerLineGeometryRef_;
        m_laneRelations_ = ::zserio::createOptionalArray<ZserioArrayType_laneRelations>(::std::forward<ZSERIO_T_laneRelations>(laneRelations_));
        m_openToLeft_ = ::std::forward<ZSERIO_T_openToLeft>(openToLeft_);
        m_openToRight_ = ::std::forward<ZSERIO_T_openToRight>(openToRight_);
        m_boundariesLeft_ = ZserioArrayType_boundariesLeft(::std::forward<ZSERIO_T_boundariesLeft>(boundariesLeft_));
        m_boundariesRight_ = ZserioArrayType_boundariesRight(::std::forward<ZSERIO_T_boundariesRight>(boundariesRight_));
    }

    explicit Lane(::zserio::BitStreamReader& in,
            ::nds::lane::types::LaneLayoutType layout_,
            bool hasBoundaryGeometry_, const allocator_type& allocator = allocator_type());
    explicit Lane(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::lane::types::LaneLayoutType layout_,
            bool hasBoundaryGeometry_, const allocator_type& allocator = allocator_type());

    ~Lane() = default;

    Lane(const Lane& other);
    Lane& operator=(const Lane& other);

    Lane(Lane&& other);
    Lane& operator=(Lane&& other);

    Lane(::zserio::PropagateAllocatorT,
            const Lane& other, const allocator_type& allocator);

    void initialize(
            ::nds::lane::types::LaneLayoutType layout_,
            bool hasBoundaryGeometry_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::lane::types::LaneLayoutType getLayout() const;

    bool getHasBoundaryGeometry() const;

    const ::nds::lane::lanes::DirectedLaneId& getDirectedLaneId() const;
    ::nds::lane::lanes::DirectedLaneId& getDirectedLaneId();
    void setDirectedLaneId(const ::nds::lane::lanes::DirectedLaneId& directedLaneId_);
    void setDirectedLaneId(::nds::lane::lanes::DirectedLaneId&& directedLaneId_);
    bool isDirectedLaneIdUsed() const;
    bool isDirectedLaneIdSet() const;
    void resetDirectedLaneId();

    const ::nds::lane::reference::types::LaneId& getLaneId() const;
    ::nds::lane::reference::types::LaneId& getLaneId();
    void setLaneId(const ::nds::lane::reference::types::LaneId& laneId_);
    void setLaneId(::nds::lane::reference::types::LaneId&& laneId_);
    bool isLaneIdUsed() const;
    bool isLaneIdSet() const;
    void resetLaneId();

    const ::zserio::vector<::nds::lane::lanes::LaneConnector>& getPreviousLanes() const;
    ::zserio::vector<::nds::lane::lanes::LaneConnector>& getPreviousLanes();
    void setPreviousLanes(const ::zserio::vector<::nds::lane::lanes::LaneConnector>& previousLanes_);
    void setPreviousLanes(::zserio::vector<::nds::lane::lanes::LaneConnector>&& previousLanes_);

    const ::zserio::vector<::nds::lane::lanes::LaneConnector>& getNextLanes() const;
    ::zserio::vector<::nds::lane::lanes::LaneConnector>& getNextLanes();
    void setNextLanes(const ::zserio::vector<::nds::lane::lanes::LaneConnector>& nextLanes_);
    void setNextLanes(::zserio::vector<::nds::lane::lanes::LaneConnector>&& nextLanes_);

    ::nds::lane::reference::types::LaneLength getLength() const;
    void setLength(::nds::lane::reference::types::LaneLength length_);

    ::nds::lane::lanes::LaneCenterLineGeometryId getCenterLineGeometryRef() const;
    void setCenterLineGeometryRef(::nds::lane::lanes::LaneCenterLineGeometryId centerLineGeometryRef_);

    const ::zserio::vector<::nds::lane::lanes::LaneRelation>& getLaneRelations() const;
    ::zserio::vector<::nds::lane::lanes::LaneRelation>& getLaneRelations();
    void setLaneRelations(const ::zserio::vector<::nds::lane::lanes::LaneRelation>& laneRelations_);
    void setLaneRelations(::zserio::vector<::nds::lane::lanes::LaneRelation>&& laneRelations_);
    bool isLaneRelationsUsed() const;
    bool isLaneRelationsSet() const;
    void resetLaneRelations();

    const ::nds::lane::lanes::LaneTraversability& getOpenToLeft() const;
    ::nds::lane::lanes::LaneTraversability& getOpenToLeft();
    void setOpenToLeft(const ::nds::lane::lanes::LaneTraversability& openToLeft_);
    void setOpenToLeft(::nds::lane::lanes::LaneTraversability&& openToLeft_);

    const ::nds::lane::lanes::LaneTraversability& getOpenToRight() const;
    ::nds::lane::lanes::LaneTraversability& getOpenToRight();
    void setOpenToRight(const ::nds::lane::lanes::LaneTraversability& openToRight_);
    void setOpenToRight(::nds::lane::lanes::LaneTraversability&& openToRight_);

    const ::zserio::vector<::nds::lane::boundaries::BoundarySet>& getBoundariesLeft() const;
    ::zserio::vector<::nds::lane::boundaries::BoundarySet>& getBoundariesLeft();
    void setBoundariesLeft(const ::zserio::vector<::nds::lane::boundaries::BoundarySet>& boundariesLeft_);
    void setBoundariesLeft(::zserio::vector<::nds::lane::boundaries::BoundarySet>&& boundariesLeft_);

    const ::zserio::vector<::nds::lane::boundaries::BoundarySet>& getBoundariesRight() const;
    ::zserio::vector<::nds::lane::boundaries::BoundarySet>& getBoundariesRight();
    void setBoundariesRight(const ::zserio::vector<::nds::lane::boundaries::BoundarySet>& boundariesRight_);
    void setBoundariesRight(::zserio::vector<::nds::lane::boundaries::BoundarySet>&& boundariesRight_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Lane& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_previousLanes
    {
    public:
        using OwnerType = Lane;

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneConnector>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneConnector>& array,
                ::nds::lane::lanes::LaneConnector::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_nextLanes
    {
    public:
        using OwnerType = Lane;

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneConnector>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneConnector>& array,
                ::nds::lane::lanes::LaneConnector::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_laneRelations
    {
    public:
        using OwnerType = Lane;

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneRelation>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneRelation>& array,
                ::nds::lane::lanes::LaneRelation::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_boundariesLeft
    {
    public:
        using OwnerType = Lane;

        static void initializeElement(Lane& owner,
                ::nds::lane::boundaries::BoundarySet& element, size_t index);
    };

    class ZserioElementFactory_boundariesLeft
    {
    public:
        using OwnerType = Lane;

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::boundaries::BoundarySet>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::boundaries::BoundarySet>& array,
                ::nds::lane::boundaries::BoundarySet::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_boundariesRight
    {
    public:
        using OwnerType = Lane;

        static void initializeElement(Lane& owner,
                ::nds::lane::boundaries::BoundarySet& element, size_t index);
    };

    class ZserioElementFactory_boundariesRight
    {
    public:
        using OwnerType = Lane;

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::boundaries::BoundarySet>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Lane& owner,
                ::zserio::vector<::nds::lane::boundaries::BoundarySet>& array,
                ::nds::lane::boundaries::BoundarySet::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_previousLanes = ::zserio::Array<::zserio::vector<::nds::lane::lanes::LaneConnector>, ::zserio::ObjectArrayTraits<::nds::lane::lanes::LaneConnector, ZserioElementFactory_previousLanes>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_nextLanes = ::zserio::Array<::zserio::vector<::nds::lane::lanes::LaneConnector>, ::zserio::ObjectArrayTraits<::nds::lane::lanes::LaneConnector, ZserioElementFactory_nextLanes>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_laneRelations = ::zserio::Array<::zserio::vector<::nds::lane::lanes::LaneRelation>, ::zserio::ObjectArrayTraits<::nds::lane::lanes::LaneRelation, ZserioElementFactory_laneRelations>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_boundariesLeft = ::zserio::Array<::zserio::vector<::nds::lane::boundaries::BoundarySet>, ::zserio::ObjectArrayTraits<::nds::lane::boundaries::BoundarySet, ZserioElementFactory_boundariesLeft>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_boundariesLeft>;
    using ZserioArrayType_boundariesRight = ::zserio::Array<::zserio::vector<::nds::lane::boundaries::BoundarySet>, ::zserio::ObjectArrayTraits<::nds::lane::boundaries::BoundarySet, ZserioElementFactory_boundariesRight>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_boundariesRight>;

    ::zserio::InplaceOptionalHolder<::nds::lane::lanes::DirectedLaneId> readDirectedLaneId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::lanes::DirectedLaneId> readDirectedLaneId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::LaneId> readLaneId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::LaneId> readLaneId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_previousLanes readPreviousLanes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_previousLanes readPreviousLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_nextLanes readNextLanes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_nextLanes readNextLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::reference::types::LaneLength readLength(::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::LaneLength readLength(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::lanes::LaneCenterLineGeometryId readCenterLineGeometryRef(::zserio::BitStreamReader& in);
    ::nds::lane::lanes::LaneCenterLineGeometryId readCenterLineGeometryRef(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_laneRelations> readLaneRelations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_laneRelations> readLaneRelations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::lanes::LaneTraversability readOpenToLeft(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::lanes::LaneTraversability readOpenToLeft(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::lanes::LaneTraversability readOpenToRight(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::lanes::LaneTraversability readOpenToRight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_boundariesLeft readBoundariesLeft(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_boundariesLeft readBoundariesLeft(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_boundariesRight readBoundariesRight(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_boundariesRight readBoundariesRight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::types::LaneLayoutType m_layout_;
    bool m_hasBoundaryGeometry_;
    bool m_isInitialized;
    ::zserio::InplaceOptionalHolder<::nds::lane::lanes::DirectedLaneId> m_directedLaneId_;
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::LaneId> m_laneId_;
    ZserioArrayType_previousLanes m_previousLanes_;
    ZserioArrayType_nextLanes m_nextLanes_;
    ::nds::lane::reference::types::LaneLength m_length_;
    ::nds::lane::lanes::LaneCenterLineGeometryId m_centerLineGeometryRef_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_laneRelations> m_laneRelations_;
    ::nds::lane::lanes::LaneTraversability m_openToLeft_;
    ::nds::lane::lanes::LaneTraversability m_openToRight_;
    ZserioArrayType_boundariesLeft m_boundariesLeft_;
    ZserioArrayType_boundariesRight m_boundariesRight_;
};

} // namespace lanes
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANES_LANE_H
