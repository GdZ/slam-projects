/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANES_ZERO_LENGTH_LANE_H
#define NDS_LANE_LANES_ZERO_LENGTH_LANE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/lane/lanes/LaneConnector.h>
#include <nds/lane/reference/types/LaneId.h>

namespace nds
{
namespace lane
{
namespace lanes
{

class ZeroLengthLane
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneId::ZserioPackingContext& getLaneId()
        {
            return m_laneId_;
        }

    private:
        ::nds::lane::reference::types::LaneId::ZserioPackingContext m_laneId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ZeroLengthLane() noexcept :
            ZeroLengthLane(allocator_type())
    {}

    explicit ZeroLengthLane(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneId = ::nds::lane::reference::types::LaneId,
            typename ZSERIO_T_previousLanes = ::zserio::vector<::nds::lane::lanes::LaneConnector>,
            typename ZSERIO_T_nextLanes = ::zserio::vector<::nds::lane::lanes::LaneConnector>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_laneId, ZeroLengthLane, allocator_type> = 0>
    ZeroLengthLane(
            ZSERIO_T_laneId&& laneId_,
            ZSERIO_T_previousLanes&& previousLanes_,
            ZSERIO_T_nextLanes&& nextLanes_,
            const allocator_type& allocator = allocator_type()) :
            ZeroLengthLane(allocator)
    {
        m_laneId_ = ::std::forward<ZSERIO_T_laneId>(laneId_);
        m_previousLanes_ = ZserioArrayType_previousLanes(::std::forward<ZSERIO_T_previousLanes>(previousLanes_));
        m_nextLanes_ = ::zserio::createOptionalArray<ZserioArrayType_nextLanes>(::std::forward<ZSERIO_T_nextLanes>(nextLanes_));
    }

    explicit ZeroLengthLane(::zserio::BitStreamReader& in,
            bool onBorder_, const allocator_type& allocator = allocator_type());
    explicit ZeroLengthLane(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            bool onBorder_, const allocator_type& allocator = allocator_type());

    ~ZeroLengthLane() = default;

    ZeroLengthLane(const ZeroLengthLane& other);
    ZeroLengthLane& operator=(const ZeroLengthLane& other);

    ZeroLengthLane(ZeroLengthLane&& other);
    ZeroLengthLane& operator=(ZeroLengthLane&& other);

    ZeroLengthLane(::zserio::PropagateAllocatorT,
            const ZeroLengthLane& other, const allocator_type& allocator);

    void initialize(
            bool onBorder_);
    bool isInitialized() const;

    bool getOnBorder() const;

    const ::nds::lane::reference::types::LaneId& getLaneId() const;
    ::nds::lane::reference::types::LaneId& getLaneId();
    void setLaneId(const ::nds::lane::reference::types::LaneId& laneId_);
    void setLaneId(::nds::lane::reference::types::LaneId&& laneId_);

    const ::zserio::vector<::nds::lane::lanes::LaneConnector>& getPreviousLanes() const;
    ::zserio::vector<::nds::lane::lanes::LaneConnector>& getPreviousLanes();
    void setPreviousLanes(const ::zserio::vector<::nds::lane::lanes::LaneConnector>& previousLanes_);
    void setPreviousLanes(::zserio::vector<::nds::lane::lanes::LaneConnector>&& previousLanes_);

    const ::zserio::vector<::nds::lane::lanes::LaneConnector>& getNextLanes() const;
    ::zserio::vector<::nds::lane::lanes::LaneConnector>& getNextLanes();
    void setNextLanes(const ::zserio::vector<::nds::lane::lanes::LaneConnector>& nextLanes_);
    void setNextLanes(::zserio::vector<::nds::lane::lanes::LaneConnector>&& nextLanes_);
    bool isNextLanesUsed() const;
    bool isNextLanesSet() const;
    void resetNextLanes();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ZeroLengthLane& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_previousLanes
    {
    public:
        using OwnerType = ZeroLengthLane;

        static void create(ZeroLengthLane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneConnector>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ZeroLengthLane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneConnector>& array,
                ::nds::lane::lanes::LaneConnector::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_nextLanes
    {
    public:
        using OwnerType = ZeroLengthLane;

        static void create(ZeroLengthLane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneConnector>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ZeroLengthLane& owner,
                ::zserio::vector<::nds::lane::lanes::LaneConnector>& array,
                ::nds::lane::lanes::LaneConnector::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_previousLanes = ::zserio::Array<::zserio::vector<::nds::lane::lanes::LaneConnector>, ::zserio::ObjectArrayTraits<::nds::lane::lanes::LaneConnector, ZserioElementFactory_previousLanes>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_nextLanes = ::zserio::Array<::zserio::vector<::nds::lane::lanes::LaneConnector>, ::zserio::ObjectArrayTraits<::nds::lane::lanes::LaneConnector, ZserioElementFactory_nextLanes>, ::zserio::ArrayType::AUTO>;

    ::nds::lane::reference::types::LaneId readLaneId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneId readLaneId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_previousLanes readPreviousLanes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_previousLanes readPreviousLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_nextLanes> readNextLanes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_nextLanes> readNextLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_onBorder_;
    bool m_isInitialized;
    ::nds::lane::reference::types::LaneId m_laneId_;
    ZserioArrayType_previousLanes m_previousLanes_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_nextLanes> m_nextLanes_;
};

} // namespace lanes
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANES_ZERO_LENGTH_LANE_H
