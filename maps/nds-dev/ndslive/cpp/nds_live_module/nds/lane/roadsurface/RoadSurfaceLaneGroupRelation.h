/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_ROADSURFACE_ROAD_SURFACE_LANE_GROUP_RELATION_H
#define NDS_LANE_ROADSURFACE_ROAD_SURFACE_LANE_GROUP_RELATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/lane/reference/types/LaneGroupId.h>
#include <nds/lane/reference/types/LaneId.h>
#include <nds/lane/reference/types/RoadSurfaceId.h>

namespace nds
{
namespace lane
{
namespace roadsurface
{

class RoadSurfaceLaneGroupRelation
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext& getLaneGroupId()
        {
            return m_laneGroupId_;
        }

        ::zserio::DeltaContext& getNumSurfaces()
        {
            return m_numSurfaces_;
        }

    private:
        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext m_laneGroupId_;
        ::zserio::DeltaContext m_numSurfaces_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadSurfaceLaneGroupRelation() noexcept :
            RoadSurfaceLaneGroupRelation(allocator_type())
    {}

    explicit RoadSurfaceLaneGroupRelation(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneGroupId = ::nds::lane::reference::types::LaneGroupId,
            typename ZSERIO_T_laneId = ::zserio::vector<::nds::lane::reference::types::LaneId>,
            typename ZSERIO_T_relatedSurfaces = ::zserio::vector<::nds::lane::reference::types::RoadSurfaceId>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_laneGroupId, RoadSurfaceLaneGroupRelation, allocator_type> = 0>
    RoadSurfaceLaneGroupRelation(
            ZSERIO_T_laneGroupId&& laneGroupId_,
            bool hasLaneRelation_,
            ZSERIO_T_laneId&& laneId_,
            uint32_t numSurfaces_,
            ZSERIO_T_relatedSurfaces&& relatedSurfaces_,
            const allocator_type& allocator = allocator_type()) :
            RoadSurfaceLaneGroupRelation(allocator)
    {
        m_laneGroupId_ = ::std::forward<ZSERIO_T_laneGroupId>(laneGroupId_);
        m_hasLaneRelation_ = hasLaneRelation_;
        m_laneId_ = ::zserio::createOptionalArray<ZserioArrayType_laneId>(::std::forward<ZSERIO_T_laneId>(laneId_));
        m_numSurfaces_ = numSurfaces_;
        m_relatedSurfaces_ = ZserioArrayType_relatedSurfaces(::std::forward<ZSERIO_T_relatedSurfaces>(relatedSurfaces_));
    }

    explicit RoadSurfaceLaneGroupRelation(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadSurfaceLaneGroupRelation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadSurfaceLaneGroupRelation() = default;

    RoadSurfaceLaneGroupRelation(const RoadSurfaceLaneGroupRelation&) = default;
    RoadSurfaceLaneGroupRelation& operator=(const RoadSurfaceLaneGroupRelation&) = default;

    RoadSurfaceLaneGroupRelation(RoadSurfaceLaneGroupRelation&&) = default;
    RoadSurfaceLaneGroupRelation& operator=(RoadSurfaceLaneGroupRelation&&) = default;

    RoadSurfaceLaneGroupRelation(::zserio::PropagateAllocatorT,
            const RoadSurfaceLaneGroupRelation& other, const allocator_type& allocator);

    const ::nds::lane::reference::types::LaneGroupId& getLaneGroupId() const;
    ::nds::lane::reference::types::LaneGroupId& getLaneGroupId();
    void setLaneGroupId(const ::nds::lane::reference::types::LaneGroupId& laneGroupId_);
    void setLaneGroupId(::nds::lane::reference::types::LaneGroupId&& laneGroupId_);

    bool getHasLaneRelation() const;
    void setHasLaneRelation(bool hasLaneRelation_);

    const ::zserio::vector<::nds::lane::reference::types::LaneId>& getLaneId() const;
    ::zserio::vector<::nds::lane::reference::types::LaneId>& getLaneId();
    void setLaneId(const ::zserio::vector<::nds::lane::reference::types::LaneId>& laneId_);
    void setLaneId(::zserio::vector<::nds::lane::reference::types::LaneId>&& laneId_);
    bool isLaneIdUsed() const;
    bool isLaneIdSet() const;
    void resetLaneId();

    uint32_t getNumSurfaces() const;
    void setNumSurfaces(uint32_t numSurfaces_);

    const ::zserio::vector<::nds::lane::reference::types::RoadSurfaceId>& getRelatedSurfaces() const;
    ::zserio::vector<::nds::lane::reference::types::RoadSurfaceId>& getRelatedSurfaces();
    void setRelatedSurfaces(const ::zserio::vector<::nds::lane::reference::types::RoadSurfaceId>& relatedSurfaces_);
    void setRelatedSurfaces(::zserio::vector<::nds::lane::reference::types::RoadSurfaceId>&& relatedSurfaces_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadSurfaceLaneGroupRelation& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_laneId
    {
    public:
        using OwnerType = RoadSurfaceLaneGroupRelation;

        static void create(RoadSurfaceLaneGroupRelation& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneId>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadSurfaceLaneGroupRelation& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneId>& array,
                ::nds::lane::reference::types::LaneId::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_relatedSurfaces
    {
    public:
        using OwnerType = RoadSurfaceLaneGroupRelation;

        static void create(RoadSurfaceLaneGroupRelation& owner,
                ::zserio::vector<::nds::lane::reference::types::RoadSurfaceId>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadSurfaceLaneGroupRelation& owner,
                ::zserio::vector<::nds::lane::reference::types::RoadSurfaceId>& array,
                ::nds::lane::reference::types::RoadSurfaceId::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_laneId = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneId>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneId, ZserioElementFactory_laneId>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_relatedSurfaces = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::RoadSurfaceId>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::RoadSurfaceId, ZserioElementFactory_relatedSurfaces>, ::zserio::ArrayType::NORMAL>;

    ::nds::lane::reference::types::LaneGroupId readLaneGroupId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupId readLaneGroupId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readHasLaneRelation(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_laneId> readLaneId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_laneId> readLaneId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    uint32_t readNumSurfaces(::zserio::BitStreamReader& in);
    uint32_t readNumSurfaces(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_relatedSurfaces readRelatedSurfaces(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_relatedSurfaces readRelatedSurfaces(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::reference::types::LaneGroupId m_laneGroupId_;
    bool m_hasLaneRelation_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_laneId> m_laneId_;
    uint32_t m_numSurfaces_;
    ZserioArrayType_relatedSurfaces m_relatedSurfaces_;
};

} // namespace roadsurface
} // namespace lane
} // namespace nds

#endif // NDS_LANE_ROADSURFACE_ROAD_SURFACE_LANE_GROUP_RELATION_H
