/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_ROADSURFACE_ROAD_SURFACE_POLYGON_MARKING_H
#define NDS_LANE_ROADSURFACE_ROAD_SURFACE_POLYGON_MARKING_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/reference/types/MarkingColor.h>
#include <nds/lane/roadsurface/RoadSurfacePolygonMarkingType.h>
#include <nds/lane/types/MarkingMaterial.h>

namespace nds
{
namespace lane
{
namespace roadsurface
{

class RoadSurfacePolygonMarking
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getMarkingType()
        {
            return m_markingType_;
        }

        ::zserio::DeltaContext& getMarkingColor()
        {
            return m_markingColor_;
        }

        ::zserio::DeltaContext& getMarkingMaterial()
        {
            return m_markingMaterial_;
        }

    private:
        ::zserio::DeltaContext m_markingType_;
        ::zserio::DeltaContext m_markingColor_;
        ::zserio::DeltaContext m_markingMaterial_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadSurfacePolygonMarking() noexcept :
            RoadSurfacePolygonMarking(allocator_type())
    {}

    explicit RoadSurfacePolygonMarking(const allocator_type& allocator) noexcept;

    RoadSurfacePolygonMarking(
            ::nds::lane::roadsurface::RoadSurfacePolygonMarkingType markingType_,
            ::nds::lane::reference::types::MarkingColor markingColor_,
            ::nds::lane::types::MarkingMaterial markingMaterial_,
            const allocator_type& allocator = allocator_type()) :
            RoadSurfacePolygonMarking(allocator)
    {
        m_markingType_ = markingType_;
        m_markingColor_ = markingColor_;
        m_markingMaterial_ = markingMaterial_;
    }

    explicit RoadSurfacePolygonMarking(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadSurfacePolygonMarking(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadSurfacePolygonMarking() = default;

    RoadSurfacePolygonMarking(const RoadSurfacePolygonMarking&) = default;
    RoadSurfacePolygonMarking& operator=(const RoadSurfacePolygonMarking&) = default;

    RoadSurfacePolygonMarking(RoadSurfacePolygonMarking&&) = default;
    RoadSurfacePolygonMarking& operator=(RoadSurfacePolygonMarking&&) = default;

    RoadSurfacePolygonMarking(::zserio::PropagateAllocatorT,
            const RoadSurfacePolygonMarking& other, const allocator_type& allocator);

    ::nds::lane::roadsurface::RoadSurfacePolygonMarkingType getMarkingType() const;
    void setMarkingType(::nds::lane::roadsurface::RoadSurfacePolygonMarkingType markingType_);

    ::nds::lane::reference::types::MarkingColor getMarkingColor() const;
    void setMarkingColor(::nds::lane::reference::types::MarkingColor markingColor_);

    ::nds::lane::types::MarkingMaterial getMarkingMaterial() const;
    void setMarkingMaterial(::nds::lane::types::MarkingMaterial markingMaterial_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadSurfacePolygonMarking& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::roadsurface::RoadSurfacePolygonMarkingType readMarkingType(::zserio::BitStreamReader& in);
    ::nds::lane::roadsurface::RoadSurfacePolygonMarkingType readMarkingType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::MarkingColor readMarkingColor(::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::MarkingColor readMarkingColor(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::types::MarkingMaterial readMarkingMaterial(::zserio::BitStreamReader& in);
    ::nds::lane::types::MarkingMaterial readMarkingMaterial(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::lane::roadsurface::RoadSurfacePolygonMarkingType m_markingType_;
    ::nds::lane::reference::types::MarkingColor m_markingColor_;
    ::nds::lane::types::MarkingMaterial m_markingMaterial_;
};

} // namespace roadsurface
} // namespace lane
} // namespace nds

#endif // NDS_LANE_ROADSURFACE_ROAD_SURFACE_POLYGON_MARKING_H
