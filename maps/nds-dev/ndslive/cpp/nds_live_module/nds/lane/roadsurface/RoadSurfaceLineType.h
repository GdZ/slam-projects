/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_ROADSURFACE_ROAD_SURFACE_LINE_TYPE_H
#define NDS_LANE_ROADSURFACE_ROAD_SURFACE_LINE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/lane/roadsurface/RoadSurfaceLineLogicalType.h>
#include <nds/lane/roadsurface/RoadSurfaceLineMarking.h>
#include <nds/lane/roadsurface/RoadSurfaceLinePhysicalType.h>

namespace nds
{
namespace lane
{
namespace roadsurface
{

class RoadSurfaceLineType
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getPhysicalType()
        {
            return m_physicalType_;
        }

        ::zserio::DeltaContext& getLogicalType()
        {
            return m_logicalType_;
        }

        ::nds::lane::roadsurface::RoadSurfaceLineMarking::ZserioPackingContext& getMarkingDetails()
        {
            return m_markingDetails_;
        }

    private:
        ::zserio::DeltaContext m_physicalType_;
        ::zserio::DeltaContext m_logicalType_;
        ::nds::lane::roadsurface::RoadSurfaceLineMarking::ZserioPackingContext m_markingDetails_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadSurfaceLineType() noexcept :
            RoadSurfaceLineType(allocator_type())
    {}

    explicit RoadSurfaceLineType(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_markingDetails = ::nds::lane::roadsurface::RoadSurfaceLineMarking>
    RoadSurfaceLineType(
            ::nds::lane::roadsurface::RoadSurfaceLinePhysicalType physicalType_,
            ::nds::lane::roadsurface::RoadSurfaceLineLogicalType logicalType_,
            ZSERIO_T_markingDetails&& markingDetails_,
            const allocator_type& allocator = allocator_type()) :
            RoadSurfaceLineType(allocator)
    {
        m_physicalType_ = physicalType_;
        m_logicalType_ = logicalType_;
        m_markingDetails_ = ::std::forward<ZSERIO_T_markingDetails>(markingDetails_);
    }

    explicit RoadSurfaceLineType(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadSurfaceLineType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadSurfaceLineType() = default;

    RoadSurfaceLineType(const RoadSurfaceLineType&) = default;
    RoadSurfaceLineType& operator=(const RoadSurfaceLineType&) = default;

    RoadSurfaceLineType(RoadSurfaceLineType&&) = default;
    RoadSurfaceLineType& operator=(RoadSurfaceLineType&&) = default;

    RoadSurfaceLineType(::zserio::PropagateAllocatorT,
            const RoadSurfaceLineType& other, const allocator_type& allocator);

    ::nds::lane::roadsurface::RoadSurfaceLinePhysicalType getPhysicalType() const;
    void setPhysicalType(::nds::lane::roadsurface::RoadSurfaceLinePhysicalType physicalType_);

    ::nds::lane::roadsurface::RoadSurfaceLineLogicalType getLogicalType() const;
    void setLogicalType(::nds::lane::roadsurface::RoadSurfaceLineLogicalType logicalType_);

    const ::nds::lane::roadsurface::RoadSurfaceLineMarking& getMarkingDetails() const;
    ::nds::lane::roadsurface::RoadSurfaceLineMarking& getMarkingDetails();
    void setMarkingDetails(const ::nds::lane::roadsurface::RoadSurfaceLineMarking& markingDetails_);
    void setMarkingDetails(::nds::lane::roadsurface::RoadSurfaceLineMarking&& markingDetails_);
    bool isMarkingDetailsUsed() const;
    bool isMarkingDetailsSet() const;
    void resetMarkingDetails();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadSurfaceLineType& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::roadsurface::RoadSurfaceLinePhysicalType readPhysicalType(::zserio::BitStreamReader& in);
    ::nds::lane::roadsurface::RoadSurfaceLinePhysicalType readPhysicalType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::roadsurface::RoadSurfaceLineLogicalType readLogicalType(::zserio::BitStreamReader& in);
    ::nds::lane::roadsurface::RoadSurfaceLineLogicalType readLogicalType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::lane::roadsurface::RoadSurfaceLineMarking> readMarkingDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::roadsurface::RoadSurfaceLineMarking> readMarkingDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::roadsurface::RoadSurfaceLinePhysicalType m_physicalType_;
    ::nds::lane::roadsurface::RoadSurfaceLineLogicalType m_logicalType_;
    ::zserio::InplaceOptionalHolder<::nds::lane::roadsurface::RoadSurfaceLineMarking> m_markingDetails_;
};

} // namespace roadsurface
} // namespace lane
} // namespace nds

#endif // NDS_LANE_ROADSURFACE_ROAD_SURFACE_LINE_TYPE_H
