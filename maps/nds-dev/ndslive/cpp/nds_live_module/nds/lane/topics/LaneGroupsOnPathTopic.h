/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_TOPICS_LANE_GROUPS_ON_PATH_TOPIC_H
#define NDS_LANE_TOPICS_LANE_GROUPS_ON_PATH_TOPIC_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/types/TimeStamp.h>
#include <nds/lane/boundaries/BoundaryElementDefinitions.h>
#include <nds/lane/lanegroups/LaneGroup.h>
#include <nds/vehicle/reference/types/HorizonPathId.h>

namespace nds
{
namespace lane
{
namespace topics
{

class LaneGroupsOnPathTopic
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::types::TimeStamp::ZserioPackingContext& getStamp()
        {
            return m_stamp_;
        }

        ::zserio::DeltaContext& getPathId()
        {
            return m_pathId_;
        }

        ::nds::lane::boundaries::BoundaryElementDefinitions::ZserioPackingContext& getBoundaryDefinitions()
        {
            return m_boundaryDefinitions_;
        }

    private:
        ::nds::core::types::TimeStamp::ZserioPackingContext m_stamp_;
        ::zserio::DeltaContext m_pathId_;
        ::nds::lane::boundaries::BoundaryElementDefinitions::ZserioPackingContext m_boundaryDefinitions_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneGroupsOnPathTopic() noexcept :
            LaneGroupsOnPathTopic(allocator_type())
    {}

    explicit LaneGroupsOnPathTopic(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_stamp = ::nds::core::types::TimeStamp,
            typename ZSERIO_T_boundaryDefinitions = ::nds::lane::boundaries::BoundaryElementDefinitions,
            typename ZSERIO_T_laneGroupPath = ::zserio::vector<::nds::lane::lanegroups::LaneGroup>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_stamp, LaneGroupsOnPathTopic, allocator_type> = 0>
    LaneGroupsOnPathTopic(
            ZSERIO_T_stamp&& stamp_,
            ::nds::vehicle::reference::types::HorizonPathId pathId_,
            ZSERIO_T_boundaryDefinitions&& boundaryDefinitions_,
            ZSERIO_T_laneGroupPath&& laneGroupPath_,
            const allocator_type& allocator = allocator_type()) :
            LaneGroupsOnPathTopic(allocator)
    {
        m_stamp_ = ::std::forward<ZSERIO_T_stamp>(stamp_);
        m_pathId_ = pathId_;
        m_boundaryDefinitions_ = ::std::forward<ZSERIO_T_boundaryDefinitions>(boundaryDefinitions_);
        m_laneGroupPath_ = ZserioArrayType_laneGroupPath(::std::forward<ZSERIO_T_laneGroupPath>(laneGroupPath_));
    }

    explicit LaneGroupsOnPathTopic(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneGroupsOnPathTopic(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneGroupsOnPathTopic() = default;

    LaneGroupsOnPathTopic(const LaneGroupsOnPathTopic&) = default;
    LaneGroupsOnPathTopic& operator=(const LaneGroupsOnPathTopic&) = default;

    LaneGroupsOnPathTopic(LaneGroupsOnPathTopic&&) = default;
    LaneGroupsOnPathTopic& operator=(LaneGroupsOnPathTopic&&) = default;

    LaneGroupsOnPathTopic(::zserio::PropagateAllocatorT,
            const LaneGroupsOnPathTopic& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::core::types::TimeStamp& getStamp() const;
    ::nds::core::types::TimeStamp& getStamp();
    void setStamp(const ::nds::core::types::TimeStamp& stamp_);
    void setStamp(::nds::core::types::TimeStamp&& stamp_);

    ::nds::vehicle::reference::types::HorizonPathId getPathId() const;
    void setPathId(::nds::vehicle::reference::types::HorizonPathId pathId_);

    const ::nds::lane::boundaries::BoundaryElementDefinitions& getBoundaryDefinitions() const;
    ::nds::lane::boundaries::BoundaryElementDefinitions& getBoundaryDefinitions();
    void setBoundaryDefinitions(const ::nds::lane::boundaries::BoundaryElementDefinitions& boundaryDefinitions_);
    void setBoundaryDefinitions(::nds::lane::boundaries::BoundaryElementDefinitions&& boundaryDefinitions_);

    const ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& getLaneGroupPath() const;
    ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& getLaneGroupPath();
    void setLaneGroupPath(const ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& laneGroupPath_);
    void setLaneGroupPath(::zserio::vector<::nds::lane::lanegroups::LaneGroup>&& laneGroupPath_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneGroupsOnPathTopic& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_laneGroupPath
    {
    public:
        using OwnerType = LaneGroupsOnPathTopic;

        static void initializeElement(LaneGroupsOnPathTopic& owner,
                ::nds::lane::lanegroups::LaneGroup& element, size_t index);
    };

    class ZserioElementFactory_laneGroupPath
    {
    public:
        using OwnerType = LaneGroupsOnPathTopic;

        static void create(LaneGroupsOnPathTopic& owner,
                ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneGroupsOnPathTopic& owner,
                ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& array,
                ::nds::lane::lanegroups::LaneGroup::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_laneGroupPath = ::zserio::Array<::zserio::vector<::nds::lane::lanegroups::LaneGroup>, ::zserio::ObjectArrayTraits<::nds::lane::lanegroups::LaneGroup, ZserioElementFactory_laneGroupPath>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_laneGroupPath>;

    ::nds::core::types::TimeStamp readStamp(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::TimeStamp readStamp(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::vehicle::reference::types::HorizonPathId readPathId(::zserio::BitStreamReader& in);
    ::nds::vehicle::reference::types::HorizonPathId readPathId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::boundaries::BoundaryElementDefinitions readBoundaryDefinitions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::boundaries::BoundaryElementDefinitions readBoundaryDefinitions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_laneGroupPath readLaneGroupPath(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_laneGroupPath readLaneGroupPath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::types::TimeStamp m_stamp_;
    ::nds::vehicle::reference::types::HorizonPathId m_pathId_;
    ::nds::lane::boundaries::BoundaryElementDefinitions m_boundaryDefinitions_;
    ZserioArrayType_laneGroupPath m_laneGroupPath_;
};

} // namespace topics
} // namespace lane
} // namespace nds

#endif // NDS_LANE_TOPICS_LANE_GROUPS_ON_PATH_TOPIC_H
