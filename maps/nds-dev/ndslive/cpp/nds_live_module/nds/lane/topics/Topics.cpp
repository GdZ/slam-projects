/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/lane/topics/LaneGroupsOnPathTopic.h>

namespace nds
{
namespace lane
{
namespace topics
{

LaneGroupsOnPathTopic::LaneGroupsOnPathTopic(const allocator_type& allocator) noexcept :
        m_stamp_(allocator),
        m_pathId_(::nds::vehicle::reference::types::HorizonPathId()),
        m_boundaryDefinitions_(allocator),
        m_laneGroupPath_(allocator)
{
}

LaneGroupsOnPathTopic::LaneGroupsOnPathTopic(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_stamp_(readStamp(in, allocator)),
        m_pathId_(readPathId(in)),
        m_boundaryDefinitions_(readBoundaryDefinitions(in, allocator)),
        m_laneGroupPath_(readLaneGroupPath(in, allocator))
{
}

LaneGroupsOnPathTopic::LaneGroupsOnPathTopic(LaneGroupsOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_stamp_(readStamp(context, in, allocator)),
        m_pathId_(readPathId(context, in)),
        m_boundaryDefinitions_(readBoundaryDefinitions(context, in, allocator)),
        m_laneGroupPath_(readLaneGroupPath(context, in, allocator))
{
}

LaneGroupsOnPathTopic::LaneGroupsOnPathTopic(::zserio::PropagateAllocatorT,
        const LaneGroupsOnPathTopic& other, const allocator_type& allocator) :
        m_stamp_(::zserio::allocatorPropagatingCopy(other.m_stamp_, allocator)),
        m_pathId_(::zserio::allocatorPropagatingCopy(other.m_pathId_, allocator)),
        m_boundaryDefinitions_(::zserio::allocatorPropagatingCopy(other.m_boundaryDefinitions_, allocator)),
        m_laneGroupPath_(::zserio::allocatorPropagatingCopy(other.m_laneGroupPath_, allocator))
{
}

void LaneGroupsOnPathTopic::initializeChildren()
{
    m_boundaryDefinitions_.initializeChildren();
    m_laneGroupPath_.initializeElements(*this);
}

::nds::core::types::TimeStamp& LaneGroupsOnPathTopic::getStamp()
{
    return m_stamp_;
}

const ::nds::core::types::TimeStamp& LaneGroupsOnPathTopic::getStamp() const
{
    return m_stamp_;
}

void LaneGroupsOnPathTopic::setStamp(const ::nds::core::types::TimeStamp& stamp_)
{
    m_stamp_ = stamp_;
}

void LaneGroupsOnPathTopic::setStamp(::nds::core::types::TimeStamp&& stamp_)
{
    m_stamp_ = ::std::move(stamp_);
}

::nds::vehicle::reference::types::HorizonPathId LaneGroupsOnPathTopic::getPathId() const
{
    return m_pathId_;
}

void LaneGroupsOnPathTopic::setPathId(::nds::vehicle::reference::types::HorizonPathId pathId_)
{
    m_pathId_ = pathId_;
}

::nds::lane::boundaries::BoundaryElementDefinitions& LaneGroupsOnPathTopic::getBoundaryDefinitions()
{
    return m_boundaryDefinitions_;
}

const ::nds::lane::boundaries::BoundaryElementDefinitions& LaneGroupsOnPathTopic::getBoundaryDefinitions() const
{
    return m_boundaryDefinitions_;
}

void LaneGroupsOnPathTopic::setBoundaryDefinitions(const ::nds::lane::boundaries::BoundaryElementDefinitions& boundaryDefinitions_)
{
    m_boundaryDefinitions_ = boundaryDefinitions_;
}

void LaneGroupsOnPathTopic::setBoundaryDefinitions(::nds::lane::boundaries::BoundaryElementDefinitions&& boundaryDefinitions_)
{
    m_boundaryDefinitions_ = ::std::move(boundaryDefinitions_);
}

::zserio::vector<::nds::lane::lanegroups::LaneGroup>& LaneGroupsOnPathTopic::getLaneGroupPath()
{
    return m_laneGroupPath_.getRawArray();
}

const ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& LaneGroupsOnPathTopic::getLaneGroupPath() const
{
    return m_laneGroupPath_.getRawArray();
}

void LaneGroupsOnPathTopic::setLaneGroupPath(const ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& laneGroupPath_)
{
    m_laneGroupPath_ = ZserioArrayType_laneGroupPath(laneGroupPath_);
}

void LaneGroupsOnPathTopic::setLaneGroupPath(::zserio::vector<::nds::lane::lanegroups::LaneGroup>&& laneGroupPath_)
{
    m_laneGroupPath_ = ZserioArrayType_laneGroupPath(std::move(laneGroupPath_));
}

void LaneGroupsOnPathTopic::initPackingContext(LaneGroupsOnPathTopic::ZserioPackingContext& context) const
{
    m_stamp_.initPackingContext(context.getStamp());
    context.getPathId().init<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    m_boundaryDefinitions_.initPackingContext(context.getBoundaryDefinitions());
}

size_t LaneGroupsOnPathTopic::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_stamp_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_pathId_);
    endBitPosition += m_boundaryDefinitions_.bitSizeOf(endBitPosition);
    endBitPosition += m_laneGroupPath_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneGroupsOnPathTopic::bitSizeOf(LaneGroupsOnPathTopic::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_stamp_.bitSizeOf(context.getStamp(), endBitPosition);
    endBitPosition += context.getPathId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    endBitPosition += m_boundaryDefinitions_.bitSizeOf(context.getBoundaryDefinitions(), endBitPosition);
    endBitPosition += m_laneGroupPath_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneGroupsOnPathTopic::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_stamp_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_pathId_);
    endBitPosition = m_boundaryDefinitions_.initializeOffsets(endBitPosition);
    endBitPosition = m_laneGroupPath_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t LaneGroupsOnPathTopic::initializeOffsets(LaneGroupsOnPathTopic::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_stamp_.initializeOffsets(context.getStamp(), endBitPosition);
    endBitPosition += context.getPathId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    endBitPosition = m_boundaryDefinitions_.initializeOffsets(context.getBoundaryDefinitions(), endBitPosition);
    endBitPosition = m_laneGroupPath_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool LaneGroupsOnPathTopic::operator==(const LaneGroupsOnPathTopic& other) const
{
    if (this != &other)
    {
        return
                (m_stamp_ == other.m_stamp_) &&
                (m_pathId_ == other.m_pathId_) &&
                (m_boundaryDefinitions_ == other.m_boundaryDefinitions_) &&
                (m_laneGroupPath_ == other.m_laneGroupPath_);
    }

    return true;
}

uint32_t LaneGroupsOnPathTopic::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_stamp_);
    result = ::zserio::calcHashCode(result, m_pathId_);
    result = ::zserio::calcHashCode(result, m_boundaryDefinitions_);
    result = ::zserio::calcHashCode(result, m_laneGroupPath_);

    return result;
}

void LaneGroupsOnPathTopic::write(::zserio::BitStreamWriter& out) const
{
    m_stamp_.write(out);
    out.writeVarUInt32(m_pathId_);
    m_boundaryDefinitions_.write(out);
    m_laneGroupPath_.write(*this, out);
}

void LaneGroupsOnPathTopic::write(LaneGroupsOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_stamp_.write(context.getStamp(), out);
    context.getPathId().write<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(out, m_pathId_);
    m_boundaryDefinitions_.write(context.getBoundaryDefinitions(), out);
    m_laneGroupPath_.writePacked(*this, out);
}

void LaneGroupsOnPathTopic::ZserioArrayExpressions_laneGroupPath::initializeElement(LaneGroupsOnPathTopic&,
        ::nds::lane::lanegroups::LaneGroup& element, size_t)
{
    element.initializeChildren();
}

void LaneGroupsOnPathTopic::ZserioElementFactory_laneGroupPath::create(LaneGroupsOnPathTopic&        ,
        ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneGroupsOnPathTopic::ZserioElementFactory_laneGroupPath::create(LaneGroupsOnPathTopic&        ,
        ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& array,
        ::nds::lane::lanegroups::LaneGroup::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::types::TimeStamp LaneGroupsOnPathTopic::readStamp(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::types::TimeStamp(in, allocator);
}

::nds::core::types::TimeStamp LaneGroupsOnPathTopic::readStamp(LaneGroupsOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::types::TimeStamp(context.getStamp(), in, allocator);
}
::nds::vehicle::reference::types::HorizonPathId LaneGroupsOnPathTopic::readPathId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::vehicle::reference::types::HorizonPathId>(in.readVarUInt32());
}

::nds::vehicle::reference::types::HorizonPathId LaneGroupsOnPathTopic::readPathId(LaneGroupsOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPathId().read<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(in);
}
::nds::lane::boundaries::BoundaryElementDefinitions LaneGroupsOnPathTopic::readBoundaryDefinitions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::lane::boundaries::BoundaryElementDefinitions(in, allocator);
}

::nds::lane::boundaries::BoundaryElementDefinitions LaneGroupsOnPathTopic::readBoundaryDefinitions(LaneGroupsOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::lane::boundaries::BoundaryElementDefinitions(context.getBoundaryDefinitions(), in, allocator);
}
LaneGroupsOnPathTopic::ZserioArrayType_laneGroupPath LaneGroupsOnPathTopic::readLaneGroupPath(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_laneGroupPath readField(allocator);
    readField.read(*this, in);

    return readField;
}

LaneGroupsOnPathTopic::ZserioArrayType_laneGroupPath LaneGroupsOnPathTopic::readLaneGroupPath(LaneGroupsOnPathTopic::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_laneGroupPath readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace topics
} // namespace lane
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/lane/topics/LaneGeometryOnPathTopic.h>
#include <nds/core/geometry/GeometryLayerType.h>

namespace nds
{
namespace lane
{
namespace topics
{

LaneGeometryOnPathTopic::LaneGeometryOnPathTopic(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_stamp_(allocator),
        m_pathId_(::nds::vehicle::reference::types::HorizonPathId()),
        m_centerLineGeometryLayer_(allocator)
{
}

LaneGeometryOnPathTopic::LaneGeometryOnPathTopic(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_stamp_(readStamp(in, allocator)),
        m_pathId_(readPathId(in)),
        m_centerLineGeometryLayer_(readCenterLineGeometryLayer(in, allocator))
{
}

LaneGeometryOnPathTopic::LaneGeometryOnPathTopic(LaneGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_stamp_(readStamp(context, in, allocator)),
        m_pathId_(readPathId(context, in)),
        m_centerLineGeometryLayer_(readCenterLineGeometryLayer(context, in, allocator))
{
}

LaneGeometryOnPathTopic::LaneGeometryOnPathTopic(const LaneGeometryOnPathTopic& other) :
        m_stamp_(other.m_stamp_),
        m_pathId_(other.m_pathId_),
        m_centerLineGeometryLayer_(other.m_centerLineGeometryLayer_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneGeometryOnPathTopic& LaneGeometryOnPathTopic::operator=(const LaneGeometryOnPathTopic& other)
{
    m_stamp_ = other.m_stamp_;
    m_pathId_ = other.m_pathId_;
    m_centerLineGeometryLayer_ = other.m_centerLineGeometryLayer_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneGeometryOnPathTopic::LaneGeometryOnPathTopic(LaneGeometryOnPathTopic&& other) :
        m_stamp_(::std::move(other.m_stamp_)),
        m_pathId_(::std::move(other.m_pathId_)),
        m_centerLineGeometryLayer_(::std::move(other.m_centerLineGeometryLayer_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneGeometryOnPathTopic& LaneGeometryOnPathTopic::operator=(LaneGeometryOnPathTopic&& other)
{
    m_stamp_ = ::std::move(other.m_stamp_);
    m_pathId_ = ::std::move(other.m_pathId_);
    m_centerLineGeometryLayer_ = ::std::move(other.m_centerLineGeometryLayer_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneGeometryOnPathTopic::LaneGeometryOnPathTopic(::zserio::PropagateAllocatorT,
        const LaneGeometryOnPathTopic& other, const allocator_type& allocator) :
        m_stamp_(::zserio::allocatorPropagatingCopy(other.m_stamp_, allocator)),
        m_pathId_(::zserio::allocatorPropagatingCopy(other.m_pathId_, allocator)),
        m_centerLineGeometryLayer_(::zserio::allocatorPropagatingCopy(other.m_centerLineGeometryLayer_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneGeometryOnPathTopic::initializeChildren()
{
    m_centerLineGeometryLayer_.initialize(static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D), static_cast<bool>(true), static_cast<bool>(false));

    m_areChildrenInitialized = true;
}

::nds::core::types::TimeStamp& LaneGeometryOnPathTopic::getStamp()
{
    return m_stamp_;
}

const ::nds::core::types::TimeStamp& LaneGeometryOnPathTopic::getStamp() const
{
    return m_stamp_;
}

void LaneGeometryOnPathTopic::setStamp(const ::nds::core::types::TimeStamp& stamp_)
{
    m_stamp_ = stamp_;
}

void LaneGeometryOnPathTopic::setStamp(::nds::core::types::TimeStamp&& stamp_)
{
    m_stamp_ = ::std::move(stamp_);
}

::nds::vehicle::reference::types::HorizonPathId LaneGeometryOnPathTopic::getPathId() const
{
    return m_pathId_;
}

void LaneGeometryOnPathTopic::setPathId(::nds::vehicle::reference::types::HorizonPathId pathId_)
{
    m_pathId_ = pathId_;
}

::nds::lane::instantiations::CenterLineGeometryLayer& LaneGeometryOnPathTopic::getCenterLineGeometryLayer()
{
    return m_centerLineGeometryLayer_;
}

const ::nds::lane::instantiations::CenterLineGeometryLayer& LaneGeometryOnPathTopic::getCenterLineGeometryLayer() const
{
    return m_centerLineGeometryLayer_;
}

void LaneGeometryOnPathTopic::setCenterLineGeometryLayer(const ::nds::lane::instantiations::CenterLineGeometryLayer& centerLineGeometryLayer_)
{
    m_centerLineGeometryLayer_ = centerLineGeometryLayer_;
}

void LaneGeometryOnPathTopic::setCenterLineGeometryLayer(::nds::lane::instantiations::CenterLineGeometryLayer&& centerLineGeometryLayer_)
{
    m_centerLineGeometryLayer_ = ::std::move(centerLineGeometryLayer_);
}

void LaneGeometryOnPathTopic::initPackingContext(LaneGeometryOnPathTopic::ZserioPackingContext& context) const
{
    m_stamp_.initPackingContext(context.getStamp());
    context.getPathId().init<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    m_centerLineGeometryLayer_.initPackingContext(context.getCenterLineGeometryLayer());
}

size_t LaneGeometryOnPathTopic::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_stamp_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_pathId_);
    endBitPosition += m_centerLineGeometryLayer_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneGeometryOnPathTopic::bitSizeOf(LaneGeometryOnPathTopic::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_stamp_.bitSizeOf(context.getStamp(), endBitPosition);
    endBitPosition += context.getPathId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    endBitPosition += m_centerLineGeometryLayer_.bitSizeOf(context.getCenterLineGeometryLayer(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneGeometryOnPathTopic::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_stamp_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_pathId_);
    endBitPosition = m_centerLineGeometryLayer_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t LaneGeometryOnPathTopic::initializeOffsets(LaneGeometryOnPathTopic::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_stamp_.initializeOffsets(context.getStamp(), endBitPosition);
    endBitPosition += context.getPathId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    endBitPosition = m_centerLineGeometryLayer_.initializeOffsets(context.getCenterLineGeometryLayer(), endBitPosition);

    return endBitPosition;
}

bool LaneGeometryOnPathTopic::operator==(const LaneGeometryOnPathTopic& other) const
{
    if (this != &other)
    {
        return
                (m_stamp_ == other.m_stamp_) &&
                (m_pathId_ == other.m_pathId_) &&
                (m_centerLineGeometryLayer_ == other.m_centerLineGeometryLayer_);
    }

    return true;
}

uint32_t LaneGeometryOnPathTopic::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_stamp_);
    result = ::zserio::calcHashCode(result, m_pathId_);
    result = ::zserio::calcHashCode(result, m_centerLineGeometryLayer_);

    return result;
}

void LaneGeometryOnPathTopic::write(::zserio::BitStreamWriter& out) const
{
    m_stamp_.write(out);

    out.writeVarUInt32(m_pathId_);

    // check parameters
    if (m_centerLineGeometryLayer_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field LaneGeometryOnPathTopic.centerLineGeometryLayer: ") <<
                m_centerLineGeometryLayer_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D) << "!";
    }
    if (m_centerLineGeometryLayer_.getHasIds() != static_cast<bool>(true))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field LaneGeometryOnPathTopic.centerLineGeometryLayer: ") <<
                m_centerLineGeometryLayer_.getHasIds() << " != " << static_cast<bool>(true) << "!";
    }
    if (m_centerLineGeometryLayer_.getHasTypes() != static_cast<bool>(false))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field LaneGeometryOnPathTopic.centerLineGeometryLayer: ") <<
                m_centerLineGeometryLayer_.getHasTypes() << " != " << static_cast<bool>(false) << "!";
    }
    m_centerLineGeometryLayer_.write(out);
}

void LaneGeometryOnPathTopic::write(LaneGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_stamp_.write(context.getStamp(), out);

    context.getPathId().write<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(out, m_pathId_);

    // check parameters
    if (m_centerLineGeometryLayer_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field LaneGeometryOnPathTopic.centerLineGeometryLayer: ") <<
                m_centerLineGeometryLayer_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D) << "!";
    }
    if (m_centerLineGeometryLayer_.getHasIds() != static_cast<bool>(true))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field LaneGeometryOnPathTopic.centerLineGeometryLayer: ") <<
                m_centerLineGeometryLayer_.getHasIds() << " != " << static_cast<bool>(true) << "!";
    }
    if (m_centerLineGeometryLayer_.getHasTypes() != static_cast<bool>(false))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field LaneGeometryOnPathTopic.centerLineGeometryLayer: ") <<
                m_centerLineGeometryLayer_.getHasTypes() << " != " << static_cast<bool>(false) << "!";
    }
    m_centerLineGeometryLayer_.write(context.getCenterLineGeometryLayer(), out);
}

::nds::core::types::TimeStamp LaneGeometryOnPathTopic::readStamp(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::types::TimeStamp(in, allocator);
}

::nds::core::types::TimeStamp LaneGeometryOnPathTopic::readStamp(LaneGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::types::TimeStamp(context.getStamp(), in, allocator);
}
::nds::vehicle::reference::types::HorizonPathId LaneGeometryOnPathTopic::readPathId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::vehicle::reference::types::HorizonPathId>(in.readVarUInt32());
}

::nds::vehicle::reference::types::HorizonPathId LaneGeometryOnPathTopic::readPathId(LaneGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPathId().read<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(in);
}
::nds::lane::instantiations::CenterLineGeometryLayer LaneGeometryOnPathTopic::readCenterLineGeometryLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::lane::instantiations::CenterLineGeometryLayer(in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D), static_cast<bool>(true), static_cast<bool>(false), allocator);
}

::nds::lane::instantiations::CenterLineGeometryLayer LaneGeometryOnPathTopic::readCenterLineGeometryLayer(LaneGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::lane::instantiations::CenterLineGeometryLayer(context.getCenterLineGeometryLayer(), in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D), static_cast<bool>(true), static_cast<bool>(false), allocator);
}

} // namespace topics
} // namespace lane
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/lane/topics/LaneBoundaryGeometryOnPathTopic.h>
#include <nds/core/geometry/GeometryLayerType.h>

namespace nds
{
namespace lane
{
namespace topics
{

LaneBoundaryGeometryOnPathTopic::LaneBoundaryGeometryOnPathTopic(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_stamp_(allocator),
        m_pathId_(::nds::vehicle::reference::types::HorizonPathId()),
        m_boundaryDefinitions_(allocator),
        m_boundaryGeometryLayer_(allocator)
{
}

LaneBoundaryGeometryOnPathTopic::LaneBoundaryGeometryOnPathTopic(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_stamp_(readStamp(in, allocator)),
        m_pathId_(readPathId(in)),
        m_boundaryDefinitions_(readBoundaryDefinitions(in, allocator)),
        m_boundaryGeometryLayer_(readBoundaryGeometryLayer(in, allocator))
{
}

LaneBoundaryGeometryOnPathTopic::LaneBoundaryGeometryOnPathTopic(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_stamp_(readStamp(context, in, allocator)),
        m_pathId_(readPathId(context, in)),
        m_boundaryDefinitions_(readBoundaryDefinitions(context, in, allocator)),
        m_boundaryGeometryLayer_(readBoundaryGeometryLayer(context, in, allocator))
{
}

LaneBoundaryGeometryOnPathTopic::LaneBoundaryGeometryOnPathTopic(const LaneBoundaryGeometryOnPathTopic& other) :
        m_stamp_(other.m_stamp_),
        m_pathId_(other.m_pathId_),
        m_boundaryDefinitions_(other.m_boundaryDefinitions_),
        m_boundaryGeometryLayer_(other.m_boundaryGeometryLayer_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneBoundaryGeometryOnPathTopic& LaneBoundaryGeometryOnPathTopic::operator=(const LaneBoundaryGeometryOnPathTopic& other)
{
    m_stamp_ = other.m_stamp_;
    m_pathId_ = other.m_pathId_;
    m_boundaryDefinitions_ = other.m_boundaryDefinitions_;
    m_boundaryGeometryLayer_ = other.m_boundaryGeometryLayer_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneBoundaryGeometryOnPathTopic::LaneBoundaryGeometryOnPathTopic(LaneBoundaryGeometryOnPathTopic&& other) :
        m_stamp_(::std::move(other.m_stamp_)),
        m_pathId_(::std::move(other.m_pathId_)),
        m_boundaryDefinitions_(::std::move(other.m_boundaryDefinitions_)),
        m_boundaryGeometryLayer_(::std::move(other.m_boundaryGeometryLayer_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneBoundaryGeometryOnPathTopic& LaneBoundaryGeometryOnPathTopic::operator=(LaneBoundaryGeometryOnPathTopic&& other)
{
    m_stamp_ = ::std::move(other.m_stamp_);
    m_pathId_ = ::std::move(other.m_pathId_);
    m_boundaryDefinitions_ = ::std::move(other.m_boundaryDefinitions_);
    m_boundaryGeometryLayer_ = ::std::move(other.m_boundaryGeometryLayer_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneBoundaryGeometryOnPathTopic::LaneBoundaryGeometryOnPathTopic(::zserio::PropagateAllocatorT,
        const LaneBoundaryGeometryOnPathTopic& other, const allocator_type& allocator) :
        m_stamp_(::zserio::allocatorPropagatingCopy(other.m_stamp_, allocator)),
        m_pathId_(::zserio::allocatorPropagatingCopy(other.m_pathId_, allocator)),
        m_boundaryDefinitions_(::zserio::allocatorPropagatingCopy(other.m_boundaryDefinitions_, allocator)),
        m_boundaryGeometryLayer_(::zserio::allocatorPropagatingCopy(other.m_boundaryGeometryLayer_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneBoundaryGeometryOnPathTopic::initializeChildren()
{
    m_boundaryDefinitions_.initializeChildren();
    m_boundaryGeometryLayer_.initialize(static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D), static_cast<bool>(true), static_cast<bool>(false));

    m_areChildrenInitialized = true;
}

::nds::core::types::TimeStamp& LaneBoundaryGeometryOnPathTopic::getStamp()
{
    return m_stamp_;
}

const ::nds::core::types::TimeStamp& LaneBoundaryGeometryOnPathTopic::getStamp() const
{
    return m_stamp_;
}

void LaneBoundaryGeometryOnPathTopic::setStamp(const ::nds::core::types::TimeStamp& stamp_)
{
    m_stamp_ = stamp_;
}

void LaneBoundaryGeometryOnPathTopic::setStamp(::nds::core::types::TimeStamp&& stamp_)
{
    m_stamp_ = ::std::move(stamp_);
}

::nds::vehicle::reference::types::HorizonPathId LaneBoundaryGeometryOnPathTopic::getPathId() const
{
    return m_pathId_;
}

void LaneBoundaryGeometryOnPathTopic::setPathId(::nds::vehicle::reference::types::HorizonPathId pathId_)
{
    m_pathId_ = pathId_;
}

::nds::lane::boundaries::BoundaryElementDefinitions& LaneBoundaryGeometryOnPathTopic::getBoundaryDefinitions()
{
    return m_boundaryDefinitions_;
}

const ::nds::lane::boundaries::BoundaryElementDefinitions& LaneBoundaryGeometryOnPathTopic::getBoundaryDefinitions() const
{
    return m_boundaryDefinitions_;
}

void LaneBoundaryGeometryOnPathTopic::setBoundaryDefinitions(const ::nds::lane::boundaries::BoundaryElementDefinitions& boundaryDefinitions_)
{
    m_boundaryDefinitions_ = boundaryDefinitions_;
}

void LaneBoundaryGeometryOnPathTopic::setBoundaryDefinitions(::nds::lane::boundaries::BoundaryElementDefinitions&& boundaryDefinitions_)
{
    m_boundaryDefinitions_ = ::std::move(boundaryDefinitions_);
}

::nds::lane::instantiations::BoundaryGeometryLayer& LaneBoundaryGeometryOnPathTopic::getBoundaryGeometryLayer()
{
    return m_boundaryGeometryLayer_;
}

const ::nds::lane::instantiations::BoundaryGeometryLayer& LaneBoundaryGeometryOnPathTopic::getBoundaryGeometryLayer() const
{
    return m_boundaryGeometryLayer_;
}

void LaneBoundaryGeometryOnPathTopic::setBoundaryGeometryLayer(const ::nds::lane::instantiations::BoundaryGeometryLayer& boundaryGeometryLayer_)
{
    m_boundaryGeometryLayer_ = boundaryGeometryLayer_;
}

void LaneBoundaryGeometryOnPathTopic::setBoundaryGeometryLayer(::nds::lane::instantiations::BoundaryGeometryLayer&& boundaryGeometryLayer_)
{
    m_boundaryGeometryLayer_ = ::std::move(boundaryGeometryLayer_);
}

void LaneBoundaryGeometryOnPathTopic::initPackingContext(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context) const
{
    m_stamp_.initPackingContext(context.getStamp());
    context.getPathId().init<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    m_boundaryDefinitions_.initPackingContext(context.getBoundaryDefinitions());
    m_boundaryGeometryLayer_.initPackingContext(context.getBoundaryGeometryLayer());
}

size_t LaneBoundaryGeometryOnPathTopic::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_stamp_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_pathId_);
    endBitPosition += m_boundaryDefinitions_.bitSizeOf(endBitPosition);
    endBitPosition += m_boundaryGeometryLayer_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneBoundaryGeometryOnPathTopic::bitSizeOf(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_stamp_.bitSizeOf(context.getStamp(), endBitPosition);
    endBitPosition += context.getPathId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    endBitPosition += m_boundaryDefinitions_.bitSizeOf(context.getBoundaryDefinitions(), endBitPosition);
    endBitPosition += m_boundaryGeometryLayer_.bitSizeOf(context.getBoundaryGeometryLayer(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneBoundaryGeometryOnPathTopic::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_stamp_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_pathId_);
    endBitPosition = m_boundaryDefinitions_.initializeOffsets(endBitPosition);
    endBitPosition = m_boundaryGeometryLayer_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t LaneBoundaryGeometryOnPathTopic::initializeOffsets(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_stamp_.initializeOffsets(context.getStamp(), endBitPosition);
    endBitPosition += context.getPathId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(m_pathId_);
    endBitPosition = m_boundaryDefinitions_.initializeOffsets(context.getBoundaryDefinitions(), endBitPosition);
    endBitPosition = m_boundaryGeometryLayer_.initializeOffsets(context.getBoundaryGeometryLayer(), endBitPosition);

    return endBitPosition;
}

bool LaneBoundaryGeometryOnPathTopic::operator==(const LaneBoundaryGeometryOnPathTopic& other) const
{
    if (this != &other)
    {
        return
                (m_stamp_ == other.m_stamp_) &&
                (m_pathId_ == other.m_pathId_) &&
                (m_boundaryDefinitions_ == other.m_boundaryDefinitions_) &&
                (m_boundaryGeometryLayer_ == other.m_boundaryGeometryLayer_);
    }

    return true;
}

uint32_t LaneBoundaryGeometryOnPathTopic::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_stamp_);
    result = ::zserio::calcHashCode(result, m_pathId_);
    result = ::zserio::calcHashCode(result, m_boundaryDefinitions_);
    result = ::zserio::calcHashCode(result, m_boundaryGeometryLayer_);

    return result;
}

void LaneBoundaryGeometryOnPathTopic::write(::zserio::BitStreamWriter& out) const
{
    m_stamp_.write(out);

    out.writeVarUInt32(m_pathId_);

    m_boundaryDefinitions_.write(out);

    // check parameters
    if (m_boundaryGeometryLayer_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field LaneBoundaryGeometryOnPathTopic.boundaryGeometryLayer: ") <<
                m_boundaryGeometryLayer_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D) << "!";
    }
    if (m_boundaryGeometryLayer_.getHasIds() != static_cast<bool>(true))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field LaneBoundaryGeometryOnPathTopic.boundaryGeometryLayer: ") <<
                m_boundaryGeometryLayer_.getHasIds() << " != " << static_cast<bool>(true) << "!";
    }
    if (m_boundaryGeometryLayer_.getHasTypes() != static_cast<bool>(false))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field LaneBoundaryGeometryOnPathTopic.boundaryGeometryLayer: ") <<
                m_boundaryGeometryLayer_.getHasTypes() << " != " << static_cast<bool>(false) << "!";
    }
    m_boundaryGeometryLayer_.write(out);
}

void LaneBoundaryGeometryOnPathTopic::write(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_stamp_.write(context.getStamp(), out);

    context.getPathId().write<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(out, m_pathId_);

    m_boundaryDefinitions_.write(context.getBoundaryDefinitions(), out);

    // check parameters
    if (m_boundaryGeometryLayer_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field LaneBoundaryGeometryOnPathTopic.boundaryGeometryLayer: ") <<
                m_boundaryGeometryLayer_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D) << "!";
    }
    if (m_boundaryGeometryLayer_.getHasIds() != static_cast<bool>(true))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field LaneBoundaryGeometryOnPathTopic.boundaryGeometryLayer: ") <<
                m_boundaryGeometryLayer_.getHasIds() << " != " << static_cast<bool>(true) << "!";
    }
    if (m_boundaryGeometryLayer_.getHasTypes() != static_cast<bool>(false))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field LaneBoundaryGeometryOnPathTopic.boundaryGeometryLayer: ") <<
                m_boundaryGeometryLayer_.getHasTypes() << " != " << static_cast<bool>(false) << "!";
    }
    m_boundaryGeometryLayer_.write(context.getBoundaryGeometryLayer(), out);
}

::nds::core::types::TimeStamp LaneBoundaryGeometryOnPathTopic::readStamp(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::types::TimeStamp(in, allocator);
}

::nds::core::types::TimeStamp LaneBoundaryGeometryOnPathTopic::readStamp(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::types::TimeStamp(context.getStamp(), in, allocator);
}
::nds::vehicle::reference::types::HorizonPathId LaneBoundaryGeometryOnPathTopic::readPathId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::vehicle::reference::types::HorizonPathId>(in.readVarUInt32());
}

::nds::vehicle::reference::types::HorizonPathId LaneBoundaryGeometryOnPathTopic::readPathId(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPathId().read<::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>>(in);
}
::nds::lane::boundaries::BoundaryElementDefinitions LaneBoundaryGeometryOnPathTopic::readBoundaryDefinitions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::lane::boundaries::BoundaryElementDefinitions(in, allocator);
}

::nds::lane::boundaries::BoundaryElementDefinitions LaneBoundaryGeometryOnPathTopic::readBoundaryDefinitions(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::lane::boundaries::BoundaryElementDefinitions(context.getBoundaryDefinitions(), in, allocator);
}
::nds::lane::instantiations::BoundaryGeometryLayer LaneBoundaryGeometryOnPathTopic::readBoundaryGeometryLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::lane::instantiations::BoundaryGeometryLayer(in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D), static_cast<bool>(true), static_cast<bool>(false), allocator);
}

::nds::lane::instantiations::BoundaryGeometryLayer LaneBoundaryGeometryOnPathTopic::readBoundaryGeometryLayer(LaneBoundaryGeometryOnPathTopic::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::lane::instantiations::BoundaryGeometryLayer(context.getBoundaryGeometryLayer(), in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_3D), static_cast<bool>(true), static_cast<bool>(false), allocator);
}

} // namespace topics
} // namespace lane
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>
#include <zserio/StringView.h>

#include <nds/lane/topics/LaneTopicCollection.h>

namespace nds
{
namespace lane
{
namespace topics
{

namespace
{

template <typename ZSERIO_MESSAGE>
class LaneTopicCollectionOnRaw : public ::zserio::IPubsub::OnTopicCallback
{
public:
    explicit LaneTopicCollectionOnRaw(const ::std::shared_ptr<LaneTopicCollection::LaneTopicCollectionCallback<ZSERIO_MESSAGE>>& callback,
            const ::std::allocator<uint8_t>& allocator) :
            m_callback(callback), m_allocator(allocator)
    {}

    void operator()(::zserio::StringView topic, ::zserio::Span<const uint8_t> data) override
    {
        ::zserio::BitStreamReader reader(data.data(), data.size());
        const ZSERIO_MESSAGE message(reader, m_allocator);

        m_callback->operator()(topic, message);
    }

private:
    ::std::shared_ptr<LaneTopicCollection::LaneTopicCollectionCallback<ZSERIO_MESSAGE>> m_callback;
    ::std::allocator<uint8_t> m_allocator;
};

} // namespace

LaneTopicCollection::LaneTopicCollection(::zserio::IPubsub& pubsub, const allocator_type& allocator) :
        ::zserio::AllocatorHolder<allocator_type>(allocator),
        m_pubsub(pubsub)
{
}

void LaneTopicCollection::publishLaneGroups(const ::nds::lane::topics::LaneGroupsOnPathTopic& message, void* context)
{
    publish(message, ::zserio::makeStringView("nds/vehicle/+/path/+/lane/connectivity"), context);
}

::zserio::IPubsub::SubscriptionId LaneTopicCollection::subscribeLaneGroups(
        const ::std::shared_ptr<LaneTopicCollectionCallback<::nds::lane::topics::LaneGroupsOnPathTopic>>& callback,
        void* context)
{
    const auto& onRawCallback = ::std::allocate_shared<LaneTopicCollectionOnRaw<::nds::lane::topics::LaneGroupsOnPathTopic>>(
            get_allocator_ref(), callback, get_allocator_ref());
    return m_pubsub.subscribe(::zserio::makeStringView("nds/vehicle/+/path/+/lane/connectivity"), onRawCallback, context);
}

void LaneTopicCollection::publishLaneCenterlineGeometry(const ::nds::lane::topics::LaneGeometryOnPathTopic& message, void* context)
{
    publish(message, ::zserio::makeStringView("nds/vehicle/+/path/+/lane/geometry"), context);
}

::zserio::IPubsub::SubscriptionId LaneTopicCollection::subscribeLaneCenterlineGeometry(
        const ::std::shared_ptr<LaneTopicCollectionCallback<::nds::lane::topics::LaneGeometryOnPathTopic>>& callback,
        void* context)
{
    const auto& onRawCallback = ::std::allocate_shared<LaneTopicCollectionOnRaw<::nds::lane::topics::LaneGeometryOnPathTopic>>(
            get_allocator_ref(), callback, get_allocator_ref());
    return m_pubsub.subscribe(::zserio::makeStringView("nds/vehicle/+/path/+/lane/geometry"), onRawCallback, context);
}

void LaneTopicCollection::publishLaneBoundaryGeometry(const ::nds::lane::topics::LaneBoundaryGeometryOnPathTopic& message, void* context)
{
    publish(message, ::zserio::makeStringView("nds/vehicle/+/path/+/lane/geometry/boundary"), context);
}

::zserio::IPubsub::SubscriptionId LaneTopicCollection::subscribeLaneBoundaryGeometry(
        const ::std::shared_ptr<LaneTopicCollectionCallback<::nds::lane::topics::LaneBoundaryGeometryOnPathTopic>>& callback,
        void* context)
{
    const auto& onRawCallback = ::std::allocate_shared<LaneTopicCollectionOnRaw<::nds::lane::topics::LaneBoundaryGeometryOnPathTopic>>(
            get_allocator_ref(), callback, get_allocator_ref());
    return m_pubsub.subscribe(::zserio::makeStringView("nds/vehicle/+/path/+/lane/geometry/boundary"), onRawCallback, context);
}

void LaneTopicCollection::unsubscribe(::zserio::IPubsub::SubscriptionId id)
{
    m_pubsub.unsubscribe(id);
}

template <typename ZSERIO_MESSAGE>
void LaneTopicCollection::publish(ZSERIO_MESSAGE& message, ::zserio::StringView topic, void* context)
{
    ::zserio::BitBuffer bitBuffer(message.bitSizeOf(), get_allocator_ref());
    ::zserio::BitStreamWriter writer(bitBuffer);
    message.write(writer);
    m_pubsub.publish(topic, bitBuffer.getBytes(), context);
}

} // namespace topics
} // namespace lane
} // namespace nds
