/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LAYER_LANE_LAYER_H
#define NDS_LANE_LAYER_LANE_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/lane/boundaries/Boundary.h>
#include <nds/lane/boundaries/BoundaryElementDefinitions.h>
#include <nds/lane/lanegroups/LaneGroup.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace lane
{
namespace layer
{

class LaneLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::boundaries::BoundaryElementDefinitions::ZserioPackingContext& getBoundaryDefinitions()
        {
            return m_boundaryDefinitions_;
        }

    private:
        ::nds::lane::boundaries::BoundaryElementDefinitions::ZserioPackingContext m_boundaryDefinitions_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneLayer() noexcept :
            LaneLayer(allocator_type())
    {}

    explicit LaneLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_boundaryDefinitions = ::nds::lane::boundaries::BoundaryElementDefinitions,
            typename ZSERIO_T_boundaryList = ::zserio::vector<::nds::lane::boundaries::Boundary>,
            typename ZSERIO_T_laneGroupList = ::zserio::vector<::nds::lane::lanegroups::LaneGroup>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_boundaryDefinitions, LaneLayer, allocator_type> = 0>
    LaneLayer(
            ZSERIO_T_boundaryDefinitions&& boundaryDefinitions_,
            ZSERIO_T_boundaryList&& boundaryList_,
            ZSERIO_T_laneGroupList&& laneGroupList_,
            const allocator_type& allocator = allocator_type()) :
            LaneLayer(allocator)
    {
        m_boundaryDefinitions_ = ::std::forward<ZSERIO_T_boundaryDefinitions>(boundaryDefinitions_);
        m_boundaryList_ = ZserioArrayType_boundaryList(::std::forward<ZSERIO_T_boundaryList>(boundaryList_));
        m_laneGroupList_ = ZserioArrayType_laneGroupList(::std::forward<ZSERIO_T_laneGroupList>(laneGroupList_));
    }

    explicit LaneLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneLayer() = default;

    LaneLayer(const LaneLayer&) = default;
    LaneLayer& operator=(const LaneLayer&) = default;

    LaneLayer(LaneLayer&&) = default;
    LaneLayer& operator=(LaneLayer&&) = default;

    LaneLayer(::zserio::PropagateAllocatorT,
            const LaneLayer& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::lane::boundaries::BoundaryElementDefinitions& getBoundaryDefinitions() const;
    ::nds::lane::boundaries::BoundaryElementDefinitions& getBoundaryDefinitions();
    void setBoundaryDefinitions(const ::nds::lane::boundaries::BoundaryElementDefinitions& boundaryDefinitions_);
    void setBoundaryDefinitions(::nds::lane::boundaries::BoundaryElementDefinitions&& boundaryDefinitions_);

    const ::zserio::vector<::nds::lane::boundaries::Boundary>& getBoundaryList() const;
    ::zserio::vector<::nds::lane::boundaries::Boundary>& getBoundaryList();
    void setBoundaryList(const ::zserio::vector<::nds::lane::boundaries::Boundary>& boundaryList_);
    void setBoundaryList(::zserio::vector<::nds::lane::boundaries::Boundary>&& boundaryList_);

    const ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& getLaneGroupList() const;
    ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& getLaneGroupList();
    void setLaneGroupList(const ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& laneGroupList_);
    void setLaneGroupList(::zserio::vector<::nds::lane::lanegroups::LaneGroup>&& laneGroupList_);

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_boundaryList
    {
    public:
        using OwnerType = LaneLayer;

        static void create(LaneLayer& owner,
                ::zserio::vector<::nds::lane::boundaries::Boundary>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneLayer& owner,
                ::zserio::vector<::nds::lane::boundaries::Boundary>& array,
                ::nds::lane::boundaries::Boundary::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_laneGroupList
    {
    public:
        using OwnerType = LaneLayer;

        static void initializeElement(LaneLayer& owner,
                ::nds::lane::lanegroups::LaneGroup& element, size_t index);
    };

    class ZserioElementFactory_laneGroupList
    {
    public:
        using OwnerType = LaneLayer;

        static void create(LaneLayer& owner,
                ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneLayer& owner,
                ::zserio::vector<::nds::lane::lanegroups::LaneGroup>& array,
                ::nds::lane::lanegroups::LaneGroup::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_boundaryList = ::zserio::Array<::zserio::vector<::nds::lane::boundaries::Boundary>, ::zserio::ObjectArrayTraits<::nds::lane::boundaries::Boundary, ZserioElementFactory_boundaryList>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_laneGroupList = ::zserio::Array<::zserio::vector<::nds::lane::lanegroups::LaneGroup>, ::zserio::ObjectArrayTraits<::nds::lane::lanegroups::LaneGroup, ZserioElementFactory_laneGroupList>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_laneGroupList>;

    ::nds::lane::boundaries::BoundaryElementDefinitions readBoundaryDefinitions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::boundaries::BoundaryElementDefinitions readBoundaryDefinitions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_boundaryList readBoundaryList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_boundaryList readBoundaryList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_laneGroupList readLaneGroupList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_laneGroupList readLaneGroupList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::boundaries::BoundaryElementDefinitions m_boundaryDefinitions_;
    ZserioArrayType_boundaryList m_boundaryList_;
    ZserioArrayType_laneGroupList m_laneGroupList_;
};

} // namespace layer
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LAYER_LANE_LAYER_H
