/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_BOUNDARIES_BOUNDARY_ELEMENT_H
#define NDS_LANE_BOUNDARIES_BOUNDARY_ELEMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/boundaries/BoundaryElementDetails.h>
#include <nds/lane/boundaries/BoundaryElementId.h>
#include <nds/lane/types/BoundaryElementType.h>

namespace nds
{
namespace lane
{
namespace boundaries
{

class BoundaryElement
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::nds::lane::boundaries::BoundaryElementDetails::ZserioPackingContext& getDetails()
        {
            return m_details_;
        }

    private:
        ::zserio::DeltaContext m_id_;
        ::zserio::DeltaContext m_type_;
        ::nds::lane::boundaries::BoundaryElementDetails::ZserioPackingContext m_details_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    BoundaryElement() noexcept :
            BoundaryElement(allocator_type())
    {}

    explicit BoundaryElement(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_details = ::nds::lane::boundaries::BoundaryElementDetails>
    BoundaryElement(
            ::nds::lane::boundaries::BoundaryElementId id_,
            ::nds::lane::types::BoundaryElementType type_,
            ZSERIO_T_details&& details_,
            const allocator_type& allocator = allocator_type()) :
            BoundaryElement(allocator)
    {
        m_id_ = id_;
        m_type_ = type_;
        m_details_ = ::std::forward<ZSERIO_T_details>(details_);
    }

    explicit BoundaryElement(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit BoundaryElement(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~BoundaryElement() = default;

    BoundaryElement(const BoundaryElement& other);
    BoundaryElement& operator=(const BoundaryElement& other);

    BoundaryElement(BoundaryElement&& other);
    BoundaryElement& operator=(BoundaryElement&& other);

    BoundaryElement(::zserio::PropagateAllocatorT,
            const BoundaryElement& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::lane::boundaries::BoundaryElementId getId() const;
    void setId(::nds::lane::boundaries::BoundaryElementId id_);

    ::nds::lane::types::BoundaryElementType getType() const;
    void setType(::nds::lane::types::BoundaryElementType type_);

    const ::nds::lane::boundaries::BoundaryElementDetails& getDetails() const;
    ::nds::lane::boundaries::BoundaryElementDetails& getDetails();
    void setDetails(const ::nds::lane::boundaries::BoundaryElementDetails& details_);
    void setDetails(::nds::lane::boundaries::BoundaryElementDetails&& details_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const BoundaryElement& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::boundaries::BoundaryElementId readId(::zserio::BitStreamReader& in);
    ::nds::lane::boundaries::BoundaryElementId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::types::BoundaryElementType readType(::zserio::BitStreamReader& in);
    ::nds::lane::types::BoundaryElementType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::boundaries::BoundaryElementDetails readDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::boundaries::BoundaryElementDetails readDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::lane::boundaries::BoundaryElementId m_id_;
    ::nds::lane::types::BoundaryElementType m_type_;
    ::nds::lane::boundaries::BoundaryElementDetails m_details_;
};

} // namespace boundaries
} // namespace lane
} // namespace nds

#endif // NDS_LANE_BOUNDARIES_BOUNDARY_ELEMENT_H
