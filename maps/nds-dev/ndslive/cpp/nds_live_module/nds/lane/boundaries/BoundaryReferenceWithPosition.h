/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_BOUNDARIES_BOUNDARY_REFERENCE_WITH_POSITION_H
#define NDS_LANE_BOUNDARIES_BOUNDARY_REFERENCE_WITH_POSITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/boundaries/BoundaryGeometryPosition.h>
#include <nds/lane/boundaries/BoundaryReference.h>

namespace nds
{
namespace lane
{
namespace boundaries
{

class BoundaryReferenceWithPosition
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::boundaries::BoundaryReference::ZserioPackingContext& getReference()
        {
            return m_reference_;
        }

        ::zserio::DeltaContext& getPosition()
        {
            return m_position_;
        }

    private:
        ::nds::lane::boundaries::BoundaryReference::ZserioPackingContext m_reference_;
        ::zserio::DeltaContext m_position_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    BoundaryReferenceWithPosition() noexcept :
            BoundaryReferenceWithPosition(allocator_type())
    {}

    explicit BoundaryReferenceWithPosition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_reference = ::nds::lane::boundaries::BoundaryReference,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_reference, BoundaryReferenceWithPosition, allocator_type> = 0>
    BoundaryReferenceWithPosition(
            ZSERIO_T_reference&& reference_,
            ::nds::lane::boundaries::BoundaryGeometryPosition position_,
            const allocator_type& allocator = allocator_type()) :
            BoundaryReferenceWithPosition(allocator)
    {
        m_reference_ = ::std::forward<ZSERIO_T_reference>(reference_);
        m_position_ = position_;
    }

    explicit BoundaryReferenceWithPosition(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit BoundaryReferenceWithPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~BoundaryReferenceWithPosition() = default;

    BoundaryReferenceWithPosition(const BoundaryReferenceWithPosition&) = default;
    BoundaryReferenceWithPosition& operator=(const BoundaryReferenceWithPosition&) = default;

    BoundaryReferenceWithPosition(BoundaryReferenceWithPosition&&) = default;
    BoundaryReferenceWithPosition& operator=(BoundaryReferenceWithPosition&&) = default;

    BoundaryReferenceWithPosition(::zserio::PropagateAllocatorT,
            const BoundaryReferenceWithPosition& other, const allocator_type& allocator);

    const ::nds::lane::boundaries::BoundaryReference& getReference() const;
    ::nds::lane::boundaries::BoundaryReference& getReference();
    void setReference(const ::nds::lane::boundaries::BoundaryReference& reference_);
    void setReference(::nds::lane::boundaries::BoundaryReference&& reference_);

    ::nds::lane::boundaries::BoundaryGeometryPosition getPosition() const;
    void setPosition(::nds::lane::boundaries::BoundaryGeometryPosition position_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const BoundaryReferenceWithPosition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::boundaries::BoundaryReference readReference(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::boundaries::BoundaryReference readReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::boundaries::BoundaryGeometryPosition readPosition(::zserio::BitStreamReader& in);
    ::nds::lane::boundaries::BoundaryGeometryPosition readPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::lane::boundaries::BoundaryReference m_reference_;
    ::nds::lane::boundaries::BoundaryGeometryPosition m_position_;
};

} // namespace boundaries
} // namespace lane
} // namespace nds

#endif // NDS_LANE_BOUNDARIES_BOUNDARY_REFERENCE_WITH_POSITION_H
