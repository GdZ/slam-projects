/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_BOUNDARIES_MARKING_BOUNDARY_ELEMENT_H
#define NDS_LANE_BOUNDARIES_MARKING_BOUNDARY_ELEMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/lane/boundaries/BoundaryMarkingDashDetails.h>
#include <nds/lane/boundaries/BoundaryWidth.h>
#include <nds/lane/reference/types/MarkingColor.h>
#include <nds/lane/types/MarkingBoundaryType.h>
#include <nds/lane/types/MarkingMaterial.h>

namespace nds
{
namespace lane
{
namespace boundaries
{

class MarkingBoundaryElement
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getMaterial()
        {
            return m_material_;
        }

        ::zserio::DeltaContext& getColor()
        {
            return m_color_;
        }

        ::zserio::DeltaContext& getWidth()
        {
            return m_width_;
        }

        ::nds::lane::boundaries::BoundaryMarkingDashDetails::ZserioPackingContext& getDashDetails()
        {
            return m_dashDetails_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_material_;
        ::zserio::DeltaContext m_color_;
        ::zserio::DeltaContext m_width_;
        ::nds::lane::boundaries::BoundaryMarkingDashDetails::ZserioPackingContext m_dashDetails_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    MarkingBoundaryElement() noexcept :
            MarkingBoundaryElement(allocator_type())
    {}

    explicit MarkingBoundaryElement(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_dashDetails = ::nds::lane::boundaries::BoundaryMarkingDashDetails>
    MarkingBoundaryElement(
            ::nds::lane::types::MarkingBoundaryType type_,
            ::nds::lane::types::MarkingMaterial material_,
            ::nds::lane::reference::types::MarkingColor color_,
            ::nds::lane::boundaries::BoundaryWidth width_,
            ZSERIO_T_dashDetails&& dashDetails_,
            const allocator_type& allocator = allocator_type()) :
            MarkingBoundaryElement(allocator)
    {
        m_type_ = type_;
        m_material_ = material_;
        m_color_ = color_;
        m_width_ = width_;
        m_dashDetails_ = ::std::forward<ZSERIO_T_dashDetails>(dashDetails_);
    }

    explicit MarkingBoundaryElement(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit MarkingBoundaryElement(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~MarkingBoundaryElement() = default;

    MarkingBoundaryElement(const MarkingBoundaryElement&) = default;
    MarkingBoundaryElement& operator=(const MarkingBoundaryElement&) = default;

    MarkingBoundaryElement(MarkingBoundaryElement&&) = default;
    MarkingBoundaryElement& operator=(MarkingBoundaryElement&&) = default;

    MarkingBoundaryElement(::zserio::PropagateAllocatorT,
            const MarkingBoundaryElement& other, const allocator_type& allocator);

    ::nds::lane::types::MarkingBoundaryType getType() const;
    void setType(::nds::lane::types::MarkingBoundaryType type_);

    ::nds::lane::types::MarkingMaterial getMaterial() const;
    void setMaterial(::nds::lane::types::MarkingMaterial material_);

    ::nds::lane::reference::types::MarkingColor getColor() const;
    void setColor(::nds::lane::reference::types::MarkingColor color_);

    ::nds::lane::boundaries::BoundaryWidth getWidth() const;
    void setWidth(::nds::lane::boundaries::BoundaryWidth width_);

    const ::nds::lane::boundaries::BoundaryMarkingDashDetails& getDashDetails() const;
    ::nds::lane::boundaries::BoundaryMarkingDashDetails& getDashDetails();
    void setDashDetails(const ::nds::lane::boundaries::BoundaryMarkingDashDetails& dashDetails_);
    void setDashDetails(::nds::lane::boundaries::BoundaryMarkingDashDetails&& dashDetails_);
    bool isDashDetailsUsed() const;
    bool isDashDetailsSet() const;
    void resetDashDetails();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const MarkingBoundaryElement& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::types::MarkingBoundaryType readType(::zserio::BitStreamReader& in);
    ::nds::lane::types::MarkingBoundaryType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::types::MarkingMaterial readMaterial(::zserio::BitStreamReader& in);
    ::nds::lane::types::MarkingMaterial readMaterial(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::MarkingColor readColor(::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::MarkingColor readColor(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::boundaries::BoundaryWidth readWidth(::zserio::BitStreamReader& in);
    ::nds::lane::boundaries::BoundaryWidth readWidth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::lane::boundaries::BoundaryMarkingDashDetails> readDashDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::boundaries::BoundaryMarkingDashDetails> readDashDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::types::MarkingBoundaryType m_type_;
    ::nds::lane::types::MarkingMaterial m_material_;
    ::nds::lane::reference::types::MarkingColor m_color_;
    ::nds::lane::boundaries::BoundaryWidth m_width_;
    ::zserio::InplaceOptionalHolder<::nds::lane::boundaries::BoundaryMarkingDashDetails> m_dashDetails_;
};

} // namespace boundaries
} // namespace lane
} // namespace nds

#endif // NDS_LANE_BOUNDARIES_MARKING_BOUNDARY_ELEMENT_H
