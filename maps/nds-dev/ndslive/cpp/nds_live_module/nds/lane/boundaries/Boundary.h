/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_BOUNDARIES_BOUNDARY_H
#define NDS_LANE_BOUNDARIES_BOUNDARY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/lane/boundaries/BoundaryElementRange.h>
#include <nds/lane/boundaries/BoundaryGeometryReference.h>
#include <nds/lane/boundaries/BoundaryId.h>

namespace nds
{
namespace lane
{
namespace boundaries
{

class Boundary
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::boundaries::BoundaryId::ZserioPackingContext& getId()
        {
            return m_id_;
        }

        ::nds::lane::boundaries::BoundaryGeometryReference::ZserioPackingContext& getGeometryReference()
        {
            return m_geometryReference_;
        }

    private:
        ::nds::lane::boundaries::BoundaryId::ZserioPackingContext m_id_;
        ::nds::lane::boundaries::BoundaryGeometryReference::ZserioPackingContext m_geometryReference_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Boundary() noexcept :
            Boundary(allocator_type())
    {}

    explicit Boundary(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_id = ::nds::lane::boundaries::BoundaryId,
            typename ZSERIO_T_geometryReference = ::nds::lane::boundaries::BoundaryGeometryReference,
            typename ZSERIO_T_boundaryElementRanges = ::zserio::vector<::nds::lane::boundaries::BoundaryElementRange>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, Boundary, allocator_type> = 0>
    Boundary(
            ZSERIO_T_id&& id_,
            ZSERIO_T_geometryReference&& geometryReference_,
            ZSERIO_T_boundaryElementRanges&& boundaryElementRanges_,
            const allocator_type& allocator = allocator_type()) :
            Boundary(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
        m_geometryReference_ = ::std::forward<ZSERIO_T_geometryReference>(geometryReference_);
        m_boundaryElementRanges_ = ZserioArrayType_boundaryElementRanges(::std::forward<ZSERIO_T_boundaryElementRanges>(boundaryElementRanges_));
    }

    explicit Boundary(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Boundary(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Boundary() = default;

    Boundary(const Boundary&) = default;
    Boundary& operator=(const Boundary&) = default;

    Boundary(Boundary&&) = default;
    Boundary& operator=(Boundary&&) = default;

    Boundary(::zserio::PropagateAllocatorT,
            const Boundary& other, const allocator_type& allocator);

    const ::nds::lane::boundaries::BoundaryId& getId() const;
    ::nds::lane::boundaries::BoundaryId& getId();
    void setId(const ::nds::lane::boundaries::BoundaryId& id_);
    void setId(::nds::lane::boundaries::BoundaryId&& id_);

    const ::nds::lane::boundaries::BoundaryGeometryReference& getGeometryReference() const;
    ::nds::lane::boundaries::BoundaryGeometryReference& getGeometryReference();
    void setGeometryReference(const ::nds::lane::boundaries::BoundaryGeometryReference& geometryReference_);
    void setGeometryReference(::nds::lane::boundaries::BoundaryGeometryReference&& geometryReference_);

    const ::zserio::vector<::nds::lane::boundaries::BoundaryElementRange>& getBoundaryElementRanges() const;
    ::zserio::vector<::nds::lane::boundaries::BoundaryElementRange>& getBoundaryElementRanges();
    void setBoundaryElementRanges(const ::zserio::vector<::nds::lane::boundaries::BoundaryElementRange>& boundaryElementRanges_);
    void setBoundaryElementRanges(::zserio::vector<::nds::lane::boundaries::BoundaryElementRange>&& boundaryElementRanges_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Boundary& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_boundaryElementRanges
    {
    public:
        using OwnerType = Boundary;

        static void create(Boundary& owner,
                ::zserio::vector<::nds::lane::boundaries::BoundaryElementRange>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Boundary& owner,
                ::zserio::vector<::nds::lane::boundaries::BoundaryElementRange>& array,
                ::nds::lane::boundaries::BoundaryElementRange::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_boundaryElementRanges = ::zserio::Array<::zserio::vector<::nds::lane::boundaries::BoundaryElementRange>, ::zserio::ObjectArrayTraits<::nds::lane::boundaries::BoundaryElementRange, ZserioElementFactory_boundaryElementRanges>, ::zserio::ArrayType::AUTO>;

    ::nds::lane::boundaries::BoundaryId readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::boundaries::BoundaryId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::boundaries::BoundaryGeometryReference readGeometryReference(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::boundaries::BoundaryGeometryReference readGeometryReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_boundaryElementRanges readBoundaryElementRanges(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_boundaryElementRanges readBoundaryElementRanges(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::lane::boundaries::BoundaryId m_id_;
    ::nds::lane::boundaries::BoundaryGeometryReference m_geometryReference_;
    ZserioArrayType_boundaryElementRanges m_boundaryElementRanges_;
};

} // namespace boundaries
} // namespace lane
} // namespace nds

#endif // NDS_LANE_BOUNDARIES_BOUNDARY_H
