/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_BOUNDARIES_BOUNDARY_ELEMENT_DETAILS_H
#define NDS_LANE_BOUNDARIES_BOUNDARY_ELEMENT_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/boundaries/LogicalBoundaryElement.h>
#include <nds/lane/boundaries/MarkingBoundaryElement.h>
#include <nds/lane/boundaries/PhysicalDividerBoundaryElement.h>
#include <nds/lane/boundaries/PhysicalMarkingBoundaryElement.h>
#include <nds/lane/types/BoundaryElementType.h>

namespace nds
{
namespace lane
{
namespace boundaries
{

class BoundaryElementDetails
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_logicalElement = 0,
        CHOICE_markingElement = 1,
        CHOICE_physicalDividerElement = 2,
        CHOICE_physicalMarkingElement = 3,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::lane::boundaries::LogicalBoundaryElement::ZserioPackingContext& getLogicalElement()
        {
            return m_logicalElement_;
        }

        ::nds::lane::boundaries::MarkingBoundaryElement::ZserioPackingContext& getMarkingElement()
        {
            return m_markingElement_;
        }

        ::nds::lane::boundaries::PhysicalDividerBoundaryElement::ZserioPackingContext& getPhysicalDividerElement()
        {
            return m_physicalDividerElement_;
        }

        ::nds::lane::boundaries::PhysicalMarkingBoundaryElement::ZserioPackingContext& getPhysicalMarkingElement()
        {
            return m_physicalMarkingElement_;
        }

    private:
        ::nds::lane::boundaries::LogicalBoundaryElement::ZserioPackingContext m_logicalElement_;
        ::nds::lane::boundaries::MarkingBoundaryElement::ZserioPackingContext m_markingElement_;
        ::nds::lane::boundaries::PhysicalDividerBoundaryElement::ZserioPackingContext m_physicalDividerElement_;
        ::nds::lane::boundaries::PhysicalMarkingBoundaryElement::ZserioPackingContext m_physicalMarkingElement_;
    };

    BoundaryElementDetails() noexcept :
            BoundaryElementDetails(allocator_type())
    {}

    explicit BoundaryElementDetails(const allocator_type& allocator) noexcept;

    explicit BoundaryElementDetails(::zserio::BitStreamReader& in,
            ::nds::lane::types::BoundaryElementType type_, const allocator_type& allocator = allocator_type());
    explicit BoundaryElementDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::lane::types::BoundaryElementType type_, const allocator_type& allocator = allocator_type());

    ~BoundaryElementDetails() = default;

    BoundaryElementDetails(const BoundaryElementDetails& other);
    BoundaryElementDetails& operator=(const BoundaryElementDetails& other);

    BoundaryElementDetails(BoundaryElementDetails&& other);
    BoundaryElementDetails& operator=(BoundaryElementDetails&& other);

    BoundaryElementDetails(::zserio::PropagateAllocatorT,
            const BoundaryElementDetails& other, const allocator_type& allocator);

    void initialize(
            ::nds::lane::types::BoundaryElementType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::lane::types::BoundaryElementType getType() const;

    const ::nds::lane::boundaries::LogicalBoundaryElement& getLogicalElement() const;
    ::nds::lane::boundaries::LogicalBoundaryElement& getLogicalElement();
    void setLogicalElement(const ::nds::lane::boundaries::LogicalBoundaryElement& logicalElement_);
    void setLogicalElement(::nds::lane::boundaries::LogicalBoundaryElement&& logicalElement_);

    const ::nds::lane::boundaries::MarkingBoundaryElement& getMarkingElement() const;
    ::nds::lane::boundaries::MarkingBoundaryElement& getMarkingElement();
    void setMarkingElement(const ::nds::lane::boundaries::MarkingBoundaryElement& markingElement_);
    void setMarkingElement(::nds::lane::boundaries::MarkingBoundaryElement&& markingElement_);

    const ::nds::lane::boundaries::PhysicalDividerBoundaryElement& getPhysicalDividerElement() const;
    ::nds::lane::boundaries::PhysicalDividerBoundaryElement& getPhysicalDividerElement();
    void setPhysicalDividerElement(const ::nds::lane::boundaries::PhysicalDividerBoundaryElement& physicalDividerElement_);
    void setPhysicalDividerElement(::nds::lane::boundaries::PhysicalDividerBoundaryElement&& physicalDividerElement_);

    const ::nds::lane::boundaries::PhysicalMarkingBoundaryElement& getPhysicalMarkingElement() const;
    ::nds::lane::boundaries::PhysicalMarkingBoundaryElement& getPhysicalMarkingElement();
    void setPhysicalMarkingElement(const ::nds::lane::boundaries::PhysicalMarkingBoundaryElement& physicalMarkingElement_);
    void setPhysicalMarkingElement(::nds::lane::boundaries::PhysicalMarkingBoundaryElement&& physicalMarkingElement_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const BoundaryElementDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::lane::types::BoundaryElementType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace boundaries
} // namespace lane
} // namespace nds

#endif // NDS_LANE_BOUNDARIES_BOUNDARY_ELEMENT_DETAILS_H
