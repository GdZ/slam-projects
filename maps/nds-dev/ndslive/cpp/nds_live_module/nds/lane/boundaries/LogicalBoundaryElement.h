/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_BOUNDARIES_LOGICAL_BOUNDARY_ELEMENT_H
#define NDS_LANE_BOUNDARIES_LOGICAL_BOUNDARY_ELEMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/types/LogicalBoundaryType.h>

namespace nds
{
namespace lane
{
namespace boundaries
{

class LogicalBoundaryElement
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

    private:
        ::zserio::DeltaContext m_type_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LogicalBoundaryElement() noexcept :
            LogicalBoundaryElement(allocator_type())
    {}

    explicit LogicalBoundaryElement(const allocator_type& allocator) noexcept;

    explicit LogicalBoundaryElement(
            ::nds::lane::types::LogicalBoundaryType type_,
            const allocator_type& allocator = allocator_type()) :
            LogicalBoundaryElement(allocator)
    {
        m_type_ = type_;
    }

    explicit LogicalBoundaryElement(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LogicalBoundaryElement(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LogicalBoundaryElement() = default;

    LogicalBoundaryElement(const LogicalBoundaryElement&) = default;
    LogicalBoundaryElement& operator=(const LogicalBoundaryElement&) = default;

    LogicalBoundaryElement(LogicalBoundaryElement&&) = default;
    LogicalBoundaryElement& operator=(LogicalBoundaryElement&&) = default;

    LogicalBoundaryElement(::zserio::PropagateAllocatorT,
            const LogicalBoundaryElement& other, const allocator_type& allocator);

    ::nds::lane::types::LogicalBoundaryType getType() const;
    void setType(::nds::lane::types::LogicalBoundaryType type_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LogicalBoundaryElement& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::types::LogicalBoundaryType readType(::zserio::BitStreamReader& in);
    ::nds::lane::types::LogicalBoundaryType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::lane::types::LogicalBoundaryType m_type_;
};

} // namespace boundaries
} // namespace lane
} // namespace nds

#endif // NDS_LANE_BOUNDARIES_LOGICAL_BOUNDARY_ELEMENT_H
