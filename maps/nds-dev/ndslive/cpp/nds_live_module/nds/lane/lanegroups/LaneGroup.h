/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANEGROUPS_LANE_GROUP_H
#define NDS_LANE_LANEGROUPS_LANE_GROUP_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/lanegroups/LaneGroupChoice.h>
#include <nds/lane/lanegroups/LaneGroupType.h>
#include <nds/lane/reference/types/LaneGroupId.h>

namespace nds
{
namespace lane
{
namespace lanegroups
{

class LaneGroup
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext& getId()
        {
            return m_id_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::nds::lane::lanegroups::LaneGroupChoice::ZserioPackingContext& getLaneGroup()
        {
            return m_laneGroup_;
        }

    private:
        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext m_id_;
        ::zserio::DeltaContext m_type_;
        ::nds::lane::lanegroups::LaneGroupChoice::ZserioPackingContext m_laneGroup_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneGroup() noexcept :
            LaneGroup(allocator_type())
    {}

    explicit LaneGroup(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_id = ::nds::lane::reference::types::LaneGroupId,
            typename ZSERIO_T_laneGroup = ::nds::lane::lanegroups::LaneGroupChoice,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, LaneGroup, allocator_type> = 0>
    LaneGroup(
            ZSERIO_T_id&& id_,
            ::nds::lane::lanegroups::LaneGroupType type_,
            bool hasBoundaryGeometry_,
            ZSERIO_T_laneGroup&& laneGroup_,
            const allocator_type& allocator = allocator_type()) :
            LaneGroup(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
        m_type_ = type_;
        m_hasBoundaryGeometry_ = hasBoundaryGeometry_;
        m_laneGroup_ = ::std::forward<ZSERIO_T_laneGroup>(laneGroup_);
    }

    explicit LaneGroup(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneGroup(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneGroup() = default;

    LaneGroup(const LaneGroup& other);
    LaneGroup& operator=(const LaneGroup& other);

    LaneGroup(LaneGroup&& other);
    LaneGroup& operator=(LaneGroup&& other);

    LaneGroup(::zserio::PropagateAllocatorT,
            const LaneGroup& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::lane::reference::types::LaneGroupId& getId() const;
    ::nds::lane::reference::types::LaneGroupId& getId();
    void setId(const ::nds::lane::reference::types::LaneGroupId& id_);
    void setId(::nds::lane::reference::types::LaneGroupId&& id_);

    ::nds::lane::lanegroups::LaneGroupType getType() const;
    void setType(::nds::lane::lanegroups::LaneGroupType type_);

    bool getHasBoundaryGeometry() const;
    void setHasBoundaryGeometry(bool hasBoundaryGeometry_);

    const ::nds::lane::lanegroups::LaneGroupChoice& getLaneGroup() const;
    ::nds::lane::lanegroups::LaneGroupChoice& getLaneGroup();
    void setLaneGroup(const ::nds::lane::lanegroups::LaneGroupChoice& laneGroup_);
    void setLaneGroup(::nds::lane::lanegroups::LaneGroupChoice&& laneGroup_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneGroup& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::reference::types::LaneGroupId readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::lanegroups::LaneGroupType readType(::zserio::BitStreamReader& in);
    ::nds::lane::lanegroups::LaneGroupType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasBoundaryGeometry(::zserio::BitStreamReader& in);
    ::nds::lane::lanegroups::LaneGroupChoice readLaneGroup(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::lanegroups::LaneGroupChoice readLaneGroup(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::lane::reference::types::LaneGroupId m_id_;
    ::nds::lane::lanegroups::LaneGroupType m_type_;
    bool m_hasBoundaryGeometry_;
    ::nds::lane::lanegroups::LaneGroupChoice m_laneGroup_;
};

} // namespace lanegroups
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANEGROUPS_LANE_GROUP_H
