/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANEGROUPS_LANE_GROUP_TYPE_H
#define NDS_LANE_LANEGROUPS_LANE_GROUP_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace lane
{
namespace lanegroups
{

enum class LaneGroupType : uint8_t
{
    ROAD = UINT8_C(0),
    INTERSECTION = UINT8_C(1),
    BORDER = UINT8_C(2),
    FORK = UINT8_C(3),
    ARTIFICIAL_ROAD = UINT8_C(4),
    ARTIFICIAL_INTERSECTION = UINT8_C(5)
};

} // namespace lanegroups
} // namespace lane
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for LaneGroupType enumeration.
template <>
struct EnumTraits<::nds::lane::lanegroups::LaneGroupType>
{
    static constexpr ::std::array<const char*, 6> names =
    {{
        "ROAD",
        "INTERSECTION",
        "BORDER",
        "FORK",
        "ARTIFICIAL_ROAD",
        "ARTIFICIAL_INTERSECTION"
    }};

    static constexpr ::std::array<::nds::lane::lanegroups::LaneGroupType, 6> values =
    {{
        ::nds::lane::lanegroups::LaneGroupType::ROAD,
        ::nds::lane::lanegroups::LaneGroupType::INTERSECTION,
        ::nds::lane::lanegroups::LaneGroupType::BORDER,
        ::nds::lane::lanegroups::LaneGroupType::FORK,
        ::nds::lane::lanegroups::LaneGroupType::ARTIFICIAL_ROAD,
        ::nds::lane::lanegroups::LaneGroupType::ARTIFICIAL_INTERSECTION
    }};

    static constexpr const char* enumName = "LaneGroupType";
};

template <>
size_t enumToOrdinal<::nds::lane::lanegroups::LaneGroupType>(::nds::lane::lanegroups::LaneGroupType value);

template <>
::nds::lane::lanegroups::LaneGroupType valueToEnum<::nds::lane::lanegroups::LaneGroupType>(
        typename ::std::underlying_type<::nds::lane::lanegroups::LaneGroupType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::lane::lanegroups::LaneGroupType>(::nds::lane::lanegroups::LaneGroupType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::lane::lanegroups::LaneGroupType>(::zserio::DeltaContext& context, ::nds::lane::lanegroups::LaneGroupType value);

template <>
size_t bitSizeOf<::nds::lane::lanegroups::LaneGroupType>(::nds::lane::lanegroups::LaneGroupType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::lane::lanegroups::LaneGroupType>(::zserio::DeltaContext& context, ::nds::lane::lanegroups::LaneGroupType value);

template <>
size_t initializeOffsets<::nds::lane::lanegroups::LaneGroupType>(size_t bitPosition, ::nds::lane::lanegroups::LaneGroupType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::lane::lanegroups::LaneGroupType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::lane::lanegroups::LaneGroupType value);

template <>
::nds::lane::lanegroups::LaneGroupType read<::nds::lane::lanegroups::LaneGroupType>(::zserio::BitStreamReader& in);

template <>
::nds::lane::lanegroups::LaneGroupType read<::nds::lane::lanegroups::LaneGroupType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::lane::lanegroups::LaneGroupType>(::zserio::BitStreamWriter& out, ::nds::lane::lanegroups::LaneGroupType value);

template <>
void write<::zserio::DeltaContext, ::nds::lane::lanegroups::LaneGroupType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::lane::lanegroups::LaneGroupType value);

} // namespace zserio

#endif // NDS_LANE_LANEGROUPS_LANE_GROUP_TYPE_H
