/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANEGROUPS_LANE_GROUP_CONNECTOR_H
#define NDS_LANE_LANEGROUPS_LANE_GROUP_CONNECTOR_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Position3D.h>
#include <nds/lane/reference/types/LaneGroupId.h>
#include <nds/lane/types/TileBorderIndicator.h>

namespace nds
{
namespace lane
{
namespace lanegroups
{

class LaneGroupConnector
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::geometry::Position3D::ZserioPackingContext& getPosition()
        {
            return m_position_;
        }

        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext& getConnectedLaneGroupId()
        {
            return m_connectedLaneGroupId_;
        }

        ::zserio::DeltaContext& getBorderIndicator()
        {
            return m_borderIndicator_;
        }

    private:
        ::nds::core::geometry::Position3D::ZserioPackingContext m_position_;
        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext m_connectedLaneGroupId_;
        ::zserio::DeltaContext m_borderIndicator_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneGroupConnector() noexcept :
            LaneGroupConnector(allocator_type())
    {}

    explicit LaneGroupConnector(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_position = ::nds::core::geometry::Position3D,
            typename ZSERIO_T_connectedLaneGroupId = ::nds::lane::reference::types::LaneGroupId,
            typename ZSERIO_T_borderIndicator = ::nds::lane::types::TileBorderIndicator,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_position, LaneGroupConnector, allocator_type> = 0>
    LaneGroupConnector(
            ZSERIO_T_position&& position_,
            ZSERIO_T_connectedLaneGroupId&& connectedLaneGroupId_,
            ZSERIO_T_borderIndicator&& borderIndicator_,
            const allocator_type& allocator = allocator_type()) :
            LaneGroupConnector(allocator)
    {
        m_position_ = ::std::forward<ZSERIO_T_position>(position_);
        m_connectedLaneGroupId_ = ::std::forward<ZSERIO_T_connectedLaneGroupId>(connectedLaneGroupId_);
        m_borderIndicator_ = ::std::forward<ZSERIO_T_borderIndicator>(borderIndicator_);
    }

    explicit LaneGroupConnector(::zserio::BitStreamReader& in,
            bool onBorder_, const allocator_type& allocator = allocator_type());
    explicit LaneGroupConnector(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            bool onBorder_, const allocator_type& allocator = allocator_type());

    ~LaneGroupConnector() = default;

    LaneGroupConnector(const LaneGroupConnector& other);
    LaneGroupConnector& operator=(const LaneGroupConnector& other);

    LaneGroupConnector(LaneGroupConnector&& other);
    LaneGroupConnector& operator=(LaneGroupConnector&& other);

    LaneGroupConnector(::zserio::PropagateAllocatorT,
            const LaneGroupConnector& other, const allocator_type& allocator);

    void initialize(
            bool onBorder_);
    bool isInitialized() const;
    void initializeChildren();

    bool getOnBorder() const;

    const ::nds::core::geometry::Position3D& getPosition() const;
    ::nds::core::geometry::Position3D& getPosition();
    void setPosition(const ::nds::core::geometry::Position3D& position_);
    void setPosition(::nds::core::geometry::Position3D&& position_);

    const ::nds::lane::reference::types::LaneGroupId& getConnectedLaneGroupId() const;
    ::nds::lane::reference::types::LaneGroupId& getConnectedLaneGroupId();
    void setConnectedLaneGroupId(const ::nds::lane::reference::types::LaneGroupId& connectedLaneGroupId_);
    void setConnectedLaneGroupId(::nds::lane::reference::types::LaneGroupId&& connectedLaneGroupId_);
    bool isConnectedLaneGroupIdUsed() const;
    bool isConnectedLaneGroupIdSet() const;
    void resetConnectedLaneGroupId();

    ::nds::lane::types::TileBorderIndicator getBorderIndicator() const;
    void setBorderIndicator(::nds::lane::types::TileBorderIndicator borderIndicator_);
    bool isBorderIndicatorUsed() const;
    bool isBorderIndicatorSet() const;
    void resetBorderIndicator();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneGroupConnector& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::Position3D readPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Position3D readPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::LaneGroupId> readConnectedLaneGroupId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::LaneGroupId> readConnectedLaneGroupId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::lane::types::TileBorderIndicator> readBorderIndicator(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::lane::types::TileBorderIndicator> readBorderIndicator(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    bool m_onBorder_;
    bool m_isInitialized;
    ::nds::core::geometry::Position3D m_position_;
    ::zserio::InplaceOptionalHolder<::nds::lane::reference::types::LaneGroupId> m_connectedLaneGroupId_;
    ::zserio::InplaceOptionalHolder<::nds::lane::types::TileBorderIndicator> m_borderIndicator_;
};

} // namespace lanegroups
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANEGROUPS_LANE_GROUP_CONNECTOR_H
