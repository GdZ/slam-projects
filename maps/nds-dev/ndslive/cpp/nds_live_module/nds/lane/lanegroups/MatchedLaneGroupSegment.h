/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANEGROUPS_MATCHED_LANE_GROUP_SEGMENT_H
#define NDS_LANE_LANEGROUPS_MATCHED_LANE_GROUP_SEGMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/lane/reference/types/LaneGroupId.h>

namespace nds
{
namespace lane
{
namespace lanegroups
{

class MatchedLaneGroupSegment
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    MatchedLaneGroupSegment() noexcept :
            MatchedLaneGroupSegment(allocator_type())
    {}

    explicit MatchedLaneGroupSegment(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_matchedLaneGroups = ::zserio::vector<::nds::lane::reference::types::LaneGroupId>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_matchedLaneGroups, MatchedLaneGroupSegment, allocator_type> = 0>
    explicit MatchedLaneGroupSegment(
            ZSERIO_T_matchedLaneGroups&& matchedLaneGroups_,
            const allocator_type& allocator = allocator_type()) :
            MatchedLaneGroupSegment(allocator)
    {
        m_matchedLaneGroups_ = ZserioArrayType_matchedLaneGroups(::std::forward<ZSERIO_T_matchedLaneGroups>(matchedLaneGroups_));
    }

    explicit MatchedLaneGroupSegment(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit MatchedLaneGroupSegment(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~MatchedLaneGroupSegment() = default;

    MatchedLaneGroupSegment(const MatchedLaneGroupSegment&) = default;
    MatchedLaneGroupSegment& operator=(const MatchedLaneGroupSegment&) = default;

    MatchedLaneGroupSegment(MatchedLaneGroupSegment&&) = default;
    MatchedLaneGroupSegment& operator=(MatchedLaneGroupSegment&&) = default;

    MatchedLaneGroupSegment(::zserio::PropagateAllocatorT,
            const MatchedLaneGroupSegment& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& getMatchedLaneGroups() const;
    ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& getMatchedLaneGroups();
    void setMatchedLaneGroups(const ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& matchedLaneGroups_);
    void setMatchedLaneGroups(::zserio::vector<::nds::lane::reference::types::LaneGroupId>&& matchedLaneGroups_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const MatchedLaneGroupSegment& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_matchedLaneGroups
    {
    public:
        using OwnerType = MatchedLaneGroupSegment;

        static void create(MatchedLaneGroupSegment& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(MatchedLaneGroupSegment& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& array,
                ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_matchedLaneGroups = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneGroupId>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneGroupId, ZserioElementFactory_matchedLaneGroups>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_matchedLaneGroups readMatchedLaneGroups(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_matchedLaneGroups readMatchedLaneGroups(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_matchedLaneGroups m_matchedLaneGroups_;
};

} // namespace lanegroups
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANEGROUPS_MATCHED_LANE_GROUP_SEGMENT_H
