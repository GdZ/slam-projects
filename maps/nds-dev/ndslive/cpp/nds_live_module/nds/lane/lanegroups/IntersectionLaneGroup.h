/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_LANEGROUPS_INTERSECTION_LANE_GROUP_H
#define NDS_LANE_LANEGROUPS_INTERSECTION_LANE_GROUP_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/lane/lanegroups/LaneGroupConnector.h>
#include <nds/lane/lanes/Lane.h>
#include <nds/lane/types/LaneLayoutType.h>

namespace nds
{
namespace lane
{
namespace lanegroups
{

class IntersectionLaneGroup
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    IntersectionLaneGroup() noexcept :
            IntersectionLaneGroup(allocator_type())
    {}

    explicit IntersectionLaneGroup(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_intersectionConnectors = ::zserio::vector<::nds::lane::lanegroups::LaneGroupConnector>,
            typename ZSERIO_T_lanes = ::zserio::vector<::nds::lane::lanes::Lane>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_intersectionConnectors, IntersectionLaneGroup, allocator_type> = 0>
    IntersectionLaneGroup(
            ZSERIO_T_intersectionConnectors&& intersectionConnectors_,
            ZSERIO_T_lanes&& lanes_,
            const allocator_type& allocator = allocator_type()) :
            IntersectionLaneGroup(allocator)
    {
        m_intersectionConnectors_ = ZserioArrayType_intersectionConnectors(::std::forward<ZSERIO_T_intersectionConnectors>(intersectionConnectors_));
        m_lanes_ = ZserioArrayType_lanes(::std::forward<ZSERIO_T_lanes>(lanes_));
    }

    explicit IntersectionLaneGroup(::zserio::BitStreamReader& in,
            bool hasBoundaryGeometry_, const allocator_type& allocator = allocator_type());
    explicit IntersectionLaneGroup(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            bool hasBoundaryGeometry_, const allocator_type& allocator = allocator_type());

    ~IntersectionLaneGroup() = default;

    IntersectionLaneGroup(const IntersectionLaneGroup& other);
    IntersectionLaneGroup& operator=(const IntersectionLaneGroup& other);

    IntersectionLaneGroup(IntersectionLaneGroup&& other);
    IntersectionLaneGroup& operator=(IntersectionLaneGroup&& other);

    IntersectionLaneGroup(::zserio::PropagateAllocatorT,
            const IntersectionLaneGroup& other, const allocator_type& allocator);

    void initialize(
            bool hasBoundaryGeometry_);
    bool isInitialized() const;
    void initializeChildren();

    bool getHasBoundaryGeometry() const;

    const ::zserio::vector<::nds::lane::lanegroups::LaneGroupConnector>& getIntersectionConnectors() const;
    ::zserio::vector<::nds::lane::lanegroups::LaneGroupConnector>& getIntersectionConnectors();
    void setIntersectionConnectors(const ::zserio::vector<::nds::lane::lanegroups::LaneGroupConnector>& intersectionConnectors_);
    void setIntersectionConnectors(::zserio::vector<::nds::lane::lanegroups::LaneGroupConnector>&& intersectionConnectors_);

    const ::zserio::vector<::nds::lane::lanes::Lane>& getLanes() const;
    ::zserio::vector<::nds::lane::lanes::Lane>& getLanes();
    void setLanes(const ::zserio::vector<::nds::lane::lanes::Lane>& lanes_);
    void setLanes(::zserio::vector<::nds::lane::lanes::Lane>&& lanes_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const IntersectionLaneGroup& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_intersectionConnectors
    {
    public:
        using OwnerType = IntersectionLaneGroup;

        static void initializeElement(IntersectionLaneGroup& owner,
                ::nds::lane::lanegroups::LaneGroupConnector& element, size_t index);
    };

    class ZserioElementFactory_intersectionConnectors
    {
    public:
        using OwnerType = IntersectionLaneGroup;

        static void create(IntersectionLaneGroup& owner,
                ::zserio::vector<::nds::lane::lanegroups::LaneGroupConnector>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(IntersectionLaneGroup& owner,
                ::zserio::vector<::nds::lane::lanegroups::LaneGroupConnector>& array,
                ::nds::lane::lanegroups::LaneGroupConnector::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_lanes
    {
    public:
        using OwnerType = IntersectionLaneGroup;

        static void initializeElement(IntersectionLaneGroup& owner,
                ::nds::lane::lanes::Lane& element, size_t index);
    };

    class ZserioElementFactory_lanes
    {
    public:
        using OwnerType = IntersectionLaneGroup;

        static void create(IntersectionLaneGroup& owner,
                ::zserio::vector<::nds::lane::lanes::Lane>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(IntersectionLaneGroup& owner,
                ::zserio::vector<::nds::lane::lanes::Lane>& array,
                ::nds::lane::lanes::Lane::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_intersectionConnectors = ::zserio::Array<::zserio::vector<::nds::lane::lanegroups::LaneGroupConnector>, ::zserio::ObjectArrayTraits<::nds::lane::lanegroups::LaneGroupConnector, ZserioElementFactory_intersectionConnectors>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_intersectionConnectors>;
    using ZserioArrayType_lanes = ::zserio::Array<::zserio::vector<::nds::lane::lanes::Lane>, ::zserio::ObjectArrayTraits<::nds::lane::lanes::Lane, ZserioElementFactory_lanes>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_lanes>;

    ZserioArrayType_intersectionConnectors readIntersectionConnectors(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_intersectionConnectors readIntersectionConnectors(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_lanes readLanes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_lanes readLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_hasBoundaryGeometry_;
    bool m_isInitialized;
    ZserioArrayType_intersectionConnectors m_intersectionConnectors_;
    ZserioArrayType_lanes m_lanes_;
};

} // namespace lanegroups
} // namespace lane
} // namespace nds

#endif // NDS_LANE_LANEGROUPS_INTERSECTION_LANE_GROUP_H
