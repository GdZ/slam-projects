/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LANE_TYPES_MARKING_MATERIAL_H
#define NDS_LANE_TYPES_MARKING_MATERIAL_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace lane
{
namespace types
{

enum class MarkingMaterial : uint8_t
{
    UNKNOWN = UINT8_C(0),
    VIBRATION_MARKINGS = UINT8_C(1),
    PAINTED_VIBRATION_DIVIDER = UINT8_C(2),
    PAINTED = UINT8_C(3)
};

} // namespace types
} // namespace lane
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for MarkingMaterial enumeration.
template <>
struct EnumTraits<::nds::lane::types::MarkingMaterial>
{
    static constexpr ::std::array<const char*, 4> names =
    {{
        "UNKNOWN",
        "VIBRATION_MARKINGS",
        "PAINTED_VIBRATION_DIVIDER",
        "PAINTED"
    }};

    static constexpr ::std::array<::nds::lane::types::MarkingMaterial, 4> values =
    {{
        ::nds::lane::types::MarkingMaterial::UNKNOWN,
        ::nds::lane::types::MarkingMaterial::VIBRATION_MARKINGS,
        ::nds::lane::types::MarkingMaterial::PAINTED_VIBRATION_DIVIDER,
        ::nds::lane::types::MarkingMaterial::PAINTED
    }};

    static constexpr const char* enumName = "MarkingMaterial";
};

template <>
size_t enumToOrdinal<::nds::lane::types::MarkingMaterial>(::nds::lane::types::MarkingMaterial value);

template <>
::nds::lane::types::MarkingMaterial valueToEnum<::nds::lane::types::MarkingMaterial>(
        typename ::std::underlying_type<::nds::lane::types::MarkingMaterial>::type rawValue);

template <>
uint32_t enumHashCode<::nds::lane::types::MarkingMaterial>(::nds::lane::types::MarkingMaterial value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::lane::types::MarkingMaterial>(::zserio::DeltaContext& context, ::nds::lane::types::MarkingMaterial value);

template <>
size_t bitSizeOf<::nds::lane::types::MarkingMaterial>(::nds::lane::types::MarkingMaterial value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::lane::types::MarkingMaterial>(::zserio::DeltaContext& context, ::nds::lane::types::MarkingMaterial value);

template <>
size_t initializeOffsets<::nds::lane::types::MarkingMaterial>(size_t bitPosition, ::nds::lane::types::MarkingMaterial value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::lane::types::MarkingMaterial>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::lane::types::MarkingMaterial value);

template <>
::nds::lane::types::MarkingMaterial read<::nds::lane::types::MarkingMaterial>(::zserio::BitStreamReader& in);

template <>
::nds::lane::types::MarkingMaterial read<::nds::lane::types::MarkingMaterial, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::lane::types::MarkingMaterial>(::zserio::BitStreamWriter& out, ::nds::lane::types::MarkingMaterial value);

template <>
void write<::zserio::DeltaContext, ::nds::lane::types::MarkingMaterial>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::lane::types::MarkingMaterial value);

} // namespace zserio

#endif // NDS_LANE_TYPES_MARKING_MATERIAL_H
