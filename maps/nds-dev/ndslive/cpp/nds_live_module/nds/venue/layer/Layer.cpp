/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/venue/layer/ParkingFacilityLayer.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace venue
{
namespace layer
{

ParkingFacilityLayer::ParkingFacilityLayer(const allocator_type& allocator) noexcept :
        m_parkingFacilities_(allocator)
{
}

ParkingFacilityLayer::ParkingFacilityLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_parkingFacilities_(readParkingFacilities(in, allocator))
{
}

ParkingFacilityLayer::ParkingFacilityLayer(ParkingFacilityLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_parkingFacilities_(readParkingFacilities(context, in, allocator))
{
}

ParkingFacilityLayer::ParkingFacilityLayer(::zserio::PropagateAllocatorT,
        const ParkingFacilityLayer& other, const allocator_type& allocator) :
        m_parkingFacilities_(::zserio::allocatorPropagatingCopy(other.m_parkingFacilities_, allocator))
{
}

void ParkingFacilityLayer::initializeChildren()
{
    m_parkingFacilities_.initializeElements(*this);
}

::zserio::vector<::nds::venue::parking::ParkingFacility>& ParkingFacilityLayer::getParkingFacilities()
{
    return m_parkingFacilities_.getRawArray();
}

const ::zserio::vector<::nds::venue::parking::ParkingFacility>& ParkingFacilityLayer::getParkingFacilities() const
{
    return m_parkingFacilities_.getRawArray();
}

void ParkingFacilityLayer::setParkingFacilities(const ::zserio::vector<::nds::venue::parking::ParkingFacility>& parkingFacilities_)
{
    m_parkingFacilities_ = ZserioArrayType_parkingFacilities(parkingFacilities_);
}

void ParkingFacilityLayer::setParkingFacilities(::zserio::vector<::nds::venue::parking::ParkingFacility>&& parkingFacilities_)
{
    m_parkingFacilities_ = ZserioArrayType_parkingFacilities(std::move(parkingFacilities_));
}

::nds::system::types::LayerType ParkingFacilityLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::FEATURE);
}

void ParkingFacilityLayer::initPackingContext(ParkingFacilityLayer::ZserioPackingContext&) const
{
}

size_t ParkingFacilityLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_parkingFacilities_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t ParkingFacilityLayer::bitSizeOf(ParkingFacilityLayer::ZserioPackingContext&, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_parkingFacilities_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t ParkingFacilityLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_parkingFacilities_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

size_t ParkingFacilityLayer::initializeOffsets(ParkingFacilityLayer::ZserioPackingContext&, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_parkingFacilities_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool ParkingFacilityLayer::operator==(const ParkingFacilityLayer& other) const
{
    if (this != &other)
    {
        return
                (m_parkingFacilities_ == other.m_parkingFacilities_);
    }

    return true;
}

uint32_t ParkingFacilityLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_parkingFacilities_);

    return result;
}

void ParkingFacilityLayer::write(::zserio::BitStreamWriter& out) const
{
    m_parkingFacilities_.writePacked(*this, out);
}

void ParkingFacilityLayer::write(ParkingFacilityLayer::ZserioPackingContext&, ::zserio::BitStreamWriter& out) const
{
    m_parkingFacilities_.writePacked(*this, out);
}

void ParkingFacilityLayer::ZserioArrayExpressions_parkingFacilities::initializeElement(ParkingFacilityLayer&,
        ::nds::venue::parking::ParkingFacility& element, size_t)
{
    element.initializeChildren();
}

void ParkingFacilityLayer::ZserioElementFactory_parkingFacilities::create(ParkingFacilityLayer&        ,
        ::zserio::vector<::nds::venue::parking::ParkingFacility>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void ParkingFacilityLayer::ZserioElementFactory_parkingFacilities::create(ParkingFacilityLayer&        ,
        ::zserio::vector<::nds::venue::parking::ParkingFacility>& array,
        ::nds::venue::parking::ParkingFacility::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

ParkingFacilityLayer::ZserioArrayType_parkingFacilities ParkingFacilityLayer::readParkingFacilities(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_parkingFacilities readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

ParkingFacilityLayer::ZserioArrayType_parkingFacilities ParkingFacilityLayer::readParkingFacilities(ParkingFacilityLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_parkingFacilities readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace layer
} // namespace venue
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/venue/layer/ParkingFacilityRelationLayer.h>
#include <nds/system/types/LayerType.h>
#include <nds/venue/metadata/ParkingFacilityRelationLayerContent.h>

namespace nds
{
namespace venue
{
namespace layer
{

ParkingFacilityRelationLayer::ParkingFacilityRelationLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::venue::metadata::ParkingFacilityRelationLayerContent()),
        m_parkingLaneRangeRelationMapList_(::zserio::NullOpt),
        m_parkingLanePositionRelationMapList_(::zserio::NullOpt),
        m_parkingRoadSurfaceRelationMapList_(::zserio::NullOpt),
        m_parkingPoiRelationMapList_(::zserio::NullOpt)
{
}

ParkingFacilityRelationLayer::ParkingFacilityRelationLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_parkingLaneRangeRelationMapList_(readParkingLaneRangeRelationMapList(in, allocator)),
        m_parkingLanePositionRelationMapList_(readParkingLanePositionRelationMapList(in, allocator)),
        m_parkingRoadSurfaceRelationMapList_(readParkingRoadSurfaceRelationMapList(in, allocator)),
        m_parkingPoiRelationMapList_(readParkingPoiRelationMapList(in, allocator))
{
}

ParkingFacilityRelationLayer::ParkingFacilityRelationLayer(ParkingFacilityRelationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_parkingLaneRangeRelationMapList_(readParkingLaneRangeRelationMapList(context, in, allocator)),
        m_parkingLanePositionRelationMapList_(readParkingLanePositionRelationMapList(context, in, allocator)),
        m_parkingRoadSurfaceRelationMapList_(readParkingRoadSurfaceRelationMapList(context, in, allocator)),
        m_parkingPoiRelationMapList_(readParkingPoiRelationMapList(context, in, allocator))
{
}

ParkingFacilityRelationLayer::ParkingFacilityRelationLayer(const ParkingFacilityRelationLayer& other) :
        m_content_(other.m_content_),
        m_parkingLaneRangeRelationMapList_(other.m_parkingLaneRangeRelationMapList_),
        m_parkingLanePositionRelationMapList_(other.m_parkingLanePositionRelationMapList_),
        m_parkingRoadSurfaceRelationMapList_(other.m_parkingRoadSurfaceRelationMapList_),
        m_parkingPoiRelationMapList_(other.m_parkingPoiRelationMapList_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

ParkingFacilityRelationLayer& ParkingFacilityRelationLayer::operator=(const ParkingFacilityRelationLayer& other)
{
    m_content_ = other.m_content_;
    m_parkingLaneRangeRelationMapList_ = other.m_parkingLaneRangeRelationMapList_;
    m_parkingLanePositionRelationMapList_ = other.m_parkingLanePositionRelationMapList_;
    m_parkingRoadSurfaceRelationMapList_ = other.m_parkingRoadSurfaceRelationMapList_;
    m_parkingPoiRelationMapList_ = other.m_parkingPoiRelationMapList_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

ParkingFacilityRelationLayer::ParkingFacilityRelationLayer(ParkingFacilityRelationLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_parkingLaneRangeRelationMapList_(::std::move(other.m_parkingLaneRangeRelationMapList_)),
        m_parkingLanePositionRelationMapList_(::std::move(other.m_parkingLanePositionRelationMapList_)),
        m_parkingRoadSurfaceRelationMapList_(::std::move(other.m_parkingRoadSurfaceRelationMapList_)),
        m_parkingPoiRelationMapList_(::std::move(other.m_parkingPoiRelationMapList_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

ParkingFacilityRelationLayer& ParkingFacilityRelationLayer::operator=(ParkingFacilityRelationLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_parkingLaneRangeRelationMapList_ = ::std::move(other.m_parkingLaneRangeRelationMapList_);
    m_parkingLanePositionRelationMapList_ = ::std::move(other.m_parkingLanePositionRelationMapList_);
    m_parkingRoadSurfaceRelationMapList_ = ::std::move(other.m_parkingRoadSurfaceRelationMapList_);
    m_parkingPoiRelationMapList_ = ::std::move(other.m_parkingPoiRelationMapList_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

ParkingFacilityRelationLayer::ParkingFacilityRelationLayer(::zserio::PropagateAllocatorT,
        const ParkingFacilityRelationLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_parkingLaneRangeRelationMapList_(::zserio::allocatorPropagatingCopy(other.m_parkingLaneRangeRelationMapList_, allocator)),
        m_parkingLanePositionRelationMapList_(::zserio::allocatorPropagatingCopy(other.m_parkingLanePositionRelationMapList_, allocator)),
        m_parkingRoadSurfaceRelationMapList_(::zserio::allocatorPropagatingCopy(other.m_parkingRoadSurfaceRelationMapList_, allocator)),
        m_parkingPoiRelationMapList_(::zserio::allocatorPropagatingCopy(other.m_parkingPoiRelationMapList_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void ParkingFacilityRelationLayer::initializeChildren()
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
        m_parkingLaneRangeRelationMapList_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
        m_parkingLanePositionRelationMapList_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
        m_parkingRoadSurfaceRelationMapList_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
        m_parkingPoiRelationMapList_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::venue::metadata::ParkingFacilityRelationLayerContent ParkingFacilityRelationLayer::getContent() const
{
    return m_content_;
}

void ParkingFacilityRelationLayer::setContent(::nds::venue::metadata::ParkingFacilityRelationLayerContent content_)
{
    m_content_ = content_;
}

::nds::venue::instantiations::ParkingLaneRangeRelationMapList& ParkingFacilityRelationLayer::getParkingLaneRangeRelationMapList()
{
    return m_parkingLaneRangeRelationMapList_.value();
}

const ::nds::venue::instantiations::ParkingLaneRangeRelationMapList& ParkingFacilityRelationLayer::getParkingLaneRangeRelationMapList() const
{
    return m_parkingLaneRangeRelationMapList_.value();
}

void ParkingFacilityRelationLayer::setParkingLaneRangeRelationMapList(const ::nds::venue::instantiations::ParkingLaneRangeRelationMapList& parkingLaneRangeRelationMapList_)
{
    m_parkingLaneRangeRelationMapList_ = parkingLaneRangeRelationMapList_;
}

void ParkingFacilityRelationLayer::setParkingLaneRangeRelationMapList(::nds::venue::instantiations::ParkingLaneRangeRelationMapList&& parkingLaneRangeRelationMapList_)
{
    m_parkingLaneRangeRelationMapList_ = ::std::move(parkingLaneRangeRelationMapList_);
}

bool ParkingFacilityRelationLayer::isParkingLaneRangeRelationMapListUsed() const
{
    return ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS);
}

bool ParkingFacilityRelationLayer::isParkingLaneRangeRelationMapListSet() const
{
    return m_parkingLaneRangeRelationMapList_.hasValue();
}

void ParkingFacilityRelationLayer::resetParkingLaneRangeRelationMapList()
{
    m_parkingLaneRangeRelationMapList_.reset();
}

::nds::venue::instantiations::ParkingLanePositionRelationMapList& ParkingFacilityRelationLayer::getParkingLanePositionRelationMapList()
{
    return m_parkingLanePositionRelationMapList_.value();
}

const ::nds::venue::instantiations::ParkingLanePositionRelationMapList& ParkingFacilityRelationLayer::getParkingLanePositionRelationMapList() const
{
    return m_parkingLanePositionRelationMapList_.value();
}

void ParkingFacilityRelationLayer::setParkingLanePositionRelationMapList(const ::nds::venue::instantiations::ParkingLanePositionRelationMapList& parkingLanePositionRelationMapList_)
{
    m_parkingLanePositionRelationMapList_ = parkingLanePositionRelationMapList_;
}

void ParkingFacilityRelationLayer::setParkingLanePositionRelationMapList(::nds::venue::instantiations::ParkingLanePositionRelationMapList&& parkingLanePositionRelationMapList_)
{
    m_parkingLanePositionRelationMapList_ = ::std::move(parkingLanePositionRelationMapList_);
}

bool ParkingFacilityRelationLayer::isParkingLanePositionRelationMapListUsed() const
{
    return ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS);
}

bool ParkingFacilityRelationLayer::isParkingLanePositionRelationMapListSet() const
{
    return m_parkingLanePositionRelationMapList_.hasValue();
}

void ParkingFacilityRelationLayer::resetParkingLanePositionRelationMapList()
{
    m_parkingLanePositionRelationMapList_.reset();
}

::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList& ParkingFacilityRelationLayer::getParkingRoadSurfaceRelationMapList()
{
    return m_parkingRoadSurfaceRelationMapList_.value();
}

const ::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList& ParkingFacilityRelationLayer::getParkingRoadSurfaceRelationMapList() const
{
    return m_parkingRoadSurfaceRelationMapList_.value();
}

void ParkingFacilityRelationLayer::setParkingRoadSurfaceRelationMapList(const ::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList& parkingRoadSurfaceRelationMapList_)
{
    m_parkingRoadSurfaceRelationMapList_ = parkingRoadSurfaceRelationMapList_;
}

void ParkingFacilityRelationLayer::setParkingRoadSurfaceRelationMapList(::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList&& parkingRoadSurfaceRelationMapList_)
{
    m_parkingRoadSurfaceRelationMapList_ = ::std::move(parkingRoadSurfaceRelationMapList_);
}

bool ParkingFacilityRelationLayer::isParkingRoadSurfaceRelationMapListUsed() const
{
    return ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS);
}

bool ParkingFacilityRelationLayer::isParkingRoadSurfaceRelationMapListSet() const
{
    return m_parkingRoadSurfaceRelationMapList_.hasValue();
}

void ParkingFacilityRelationLayer::resetParkingRoadSurfaceRelationMapList()
{
    m_parkingRoadSurfaceRelationMapList_.reset();
}

::nds::venue::instantiations::ParkingPoiRelationMapList& ParkingFacilityRelationLayer::getParkingPoiRelationMapList()
{
    return m_parkingPoiRelationMapList_.value();
}

const ::nds::venue::instantiations::ParkingPoiRelationMapList& ParkingFacilityRelationLayer::getParkingPoiRelationMapList() const
{
    return m_parkingPoiRelationMapList_.value();
}

void ParkingFacilityRelationLayer::setParkingPoiRelationMapList(const ::nds::venue::instantiations::ParkingPoiRelationMapList& parkingPoiRelationMapList_)
{
    m_parkingPoiRelationMapList_ = parkingPoiRelationMapList_;
}

void ParkingFacilityRelationLayer::setParkingPoiRelationMapList(::nds::venue::instantiations::ParkingPoiRelationMapList&& parkingPoiRelationMapList_)
{
    m_parkingPoiRelationMapList_ = ::std::move(parkingPoiRelationMapList_);
}

bool ParkingFacilityRelationLayer::isParkingPoiRelationMapListUsed() const
{
    return ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS);
}

bool ParkingFacilityRelationLayer::isParkingPoiRelationMapListSet() const
{
    return m_parkingPoiRelationMapList_.hasValue();
}

void ParkingFacilityRelationLayer::resetParkingPoiRelationMapList()
{
    m_parkingPoiRelationMapList_.reset();
}

::nds::system::types::LayerType ParkingFacilityRelationLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::RELATION);
}

void ParkingFacilityRelationLayer::initPackingContext(ParkingFacilityRelationLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_parkingLaneRangeRelationMapList_.value().initPackingContext(context.getParkingLaneRangeRelationMapList());
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        m_parkingLanePositionRelationMapList_.value().initPackingContext(context.getParkingLanePositionRelationMapList());
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        m_parkingRoadSurfaceRelationMapList_.value().initPackingContext(context.getParkingRoadSurfaceRelationMapList());
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        m_parkingPoiRelationMapList_.value().initPackingContext(context.getParkingPoiRelationMapList());
    }
}

size_t ParkingFacilityRelationLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_parkingLaneRangeRelationMapList_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_parkingLanePositionRelationMapList_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        endBitPosition += m_parkingRoadSurfaceRelationMapList_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        endBitPosition += m_parkingPoiRelationMapList_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t ParkingFacilityRelationLayer::bitSizeOf(ParkingFacilityRelationLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_parkingLaneRangeRelationMapList_.value().bitSizeOf(context.getParkingLaneRangeRelationMapList(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_parkingLanePositionRelationMapList_.value().bitSizeOf(context.getParkingLanePositionRelationMapList(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        endBitPosition += m_parkingRoadSurfaceRelationMapList_.value().bitSizeOf(context.getParkingRoadSurfaceRelationMapList(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        endBitPosition += m_parkingPoiRelationMapList_.value().bitSizeOf(context.getParkingPoiRelationMapList(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t ParkingFacilityRelationLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_parkingLaneRangeRelationMapList_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_parkingLanePositionRelationMapList_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        endBitPosition = m_parkingRoadSurfaceRelationMapList_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        endBitPosition = m_parkingPoiRelationMapList_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t ParkingFacilityRelationLayer::initializeOffsets(ParkingFacilityRelationLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_parkingLaneRangeRelationMapList_.value().initializeOffsets(context.getParkingLaneRangeRelationMapList(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_parkingLanePositionRelationMapList_.value().initializeOffsets(context.getParkingLanePositionRelationMapList(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        endBitPosition = m_parkingRoadSurfaceRelationMapList_.value().initializeOffsets(context.getParkingRoadSurfaceRelationMapList(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        endBitPosition = m_parkingPoiRelationMapList_.value().initializeOffsets(context.getParkingPoiRelationMapList(), endBitPosition);
    }

    return endBitPosition;
}

bool ParkingFacilityRelationLayer::operator==(const ParkingFacilityRelationLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isParkingLaneRangeRelationMapListUsed() ? !other.isParkingLaneRangeRelationMapListUsed() : (m_parkingLaneRangeRelationMapList_ == other.m_parkingLaneRangeRelationMapList_)) &&
                (!isParkingLanePositionRelationMapListUsed() ? !other.isParkingLanePositionRelationMapListUsed() : (m_parkingLanePositionRelationMapList_ == other.m_parkingLanePositionRelationMapList_)) &&
                (!isParkingRoadSurfaceRelationMapListUsed() ? !other.isParkingRoadSurfaceRelationMapListUsed() : (m_parkingRoadSurfaceRelationMapList_ == other.m_parkingRoadSurfaceRelationMapList_)) &&
                (!isParkingPoiRelationMapListUsed() ? !other.isParkingPoiRelationMapListUsed() : (m_parkingPoiRelationMapList_ == other.m_parkingPoiRelationMapList_));
    }

    return true;
}

uint32_t ParkingFacilityRelationLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isParkingLaneRangeRelationMapListUsed())
        result = ::zserio::calcHashCode(result, m_parkingLaneRangeRelationMapList_);
    if (isParkingLanePositionRelationMapListUsed())
        result = ::zserio::calcHashCode(result, m_parkingLanePositionRelationMapList_);
    if (isParkingRoadSurfaceRelationMapListUsed())
        result = ::zserio::calcHashCode(result, m_parkingRoadSurfaceRelationMapList_);
    if (isParkingPoiRelationMapListUsed())
        result = ::zserio::calcHashCode(result, m_parkingPoiRelationMapList_);

    return result;
}

void ParkingFacilityRelationLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_parkingLaneRangeRelationMapList_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field ParkingFacilityRelationLayer.parkingLaneRangeRelationMapList: ") <<
                    m_parkingLaneRangeRelationMapList_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_parkingLaneRangeRelationMapList_.value().write(out);
    }

    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        // check parameters
        if (m_parkingLanePositionRelationMapList_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field ParkingFacilityRelationLayer.parkingLanePositionRelationMapList: ") <<
                    m_parkingLanePositionRelationMapList_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_parkingLanePositionRelationMapList_.value().write(out);
    }

    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        // check parameters
        if (m_parkingRoadSurfaceRelationMapList_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field ParkingFacilityRelationLayer.parkingRoadSurfaceRelationMapList: ") <<
                    m_parkingRoadSurfaceRelationMapList_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_parkingRoadSurfaceRelationMapList_.value().write(out);
    }

    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        // check parameters
        if (m_parkingPoiRelationMapList_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field ParkingFacilityRelationLayer.parkingPoiRelationMapList: ") <<
                    m_parkingPoiRelationMapList_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_parkingPoiRelationMapList_.value().write(out);
    }
}

void ParkingFacilityRelationLayer::write(ParkingFacilityRelationLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_parkingLaneRangeRelationMapList_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field ParkingFacilityRelationLayer.parkingLaneRangeRelationMapList: ") <<
                    m_parkingLaneRangeRelationMapList_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_parkingLaneRangeRelationMapList_.value().write(context.getParkingLaneRangeRelationMapList(), out);
    }

    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        // check parameters
        if (m_parkingLanePositionRelationMapList_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field ParkingFacilityRelationLayer.parkingLanePositionRelationMapList: ") <<
                    m_parkingLanePositionRelationMapList_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_parkingLanePositionRelationMapList_.value().write(context.getParkingLanePositionRelationMapList(), out);
    }

    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        // check parameters
        if (m_parkingRoadSurfaceRelationMapList_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field ParkingFacilityRelationLayer.parkingRoadSurfaceRelationMapList: ") <<
                    m_parkingRoadSurfaceRelationMapList_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_parkingRoadSurfaceRelationMapList_.value().write(context.getParkingRoadSurfaceRelationMapList(), out);
    }

    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        // check parameters
        if (m_parkingPoiRelationMapList_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field ParkingFacilityRelationLayer.parkingPoiRelationMapList: ") <<
                    m_parkingPoiRelationMapList_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_parkingPoiRelationMapList_.value().write(context.getParkingPoiRelationMapList(), out);
    }
}

::nds::venue::metadata::ParkingFacilityRelationLayerContent ParkingFacilityRelationLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::venue::metadata::ParkingFacilityRelationLayerContent(in);
}

::nds::venue::metadata::ParkingFacilityRelationLayerContent ParkingFacilityRelationLayer::readContent(ParkingFacilityRelationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::venue::metadata::ParkingFacilityRelationLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList> ParkingFacilityRelationLayer::readParkingLaneRangeRelationMapList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList>(::nds::venue::instantiations::ParkingLaneRangeRelationMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList> ParkingFacilityRelationLayer::readParkingLaneRangeRelationMapList(ParkingFacilityRelationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList>(::nds::venue::instantiations::ParkingLaneRangeRelationMapList(context.getParkingLaneRangeRelationMapList(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList> ParkingFacilityRelationLayer::readParkingLanePositionRelationMapList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList>(::nds::venue::instantiations::ParkingLanePositionRelationMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList> ParkingFacilityRelationLayer::readParkingLanePositionRelationMapList(ParkingFacilityRelationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList>(::nds::venue::instantiations::ParkingLanePositionRelationMapList(context.getParkingLanePositionRelationMapList(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList> ParkingFacilityRelationLayer::readParkingRoadSurfaceRelationMapList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList>(::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList> ParkingFacilityRelationLayer::readParkingRoadSurfaceRelationMapList(ParkingFacilityRelationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList>(::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList(context.getParkingRoadSurfaceRelationMapList(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList> ParkingFacilityRelationLayer::readParkingPoiRelationMapList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList>(::nds::venue::instantiations::ParkingPoiRelationMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList> ParkingFacilityRelationLayer::readParkingPoiRelationMapList(ParkingFacilityRelationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList>(::nds::venue::instantiations::ParkingPoiRelationMapList(context.getParkingPoiRelationMapList(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace venue
} // namespace nds
