/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_LAYER_PARKING_FACILITY_RELATION_LAYER_H
#define NDS_VENUE_LAYER_PARKING_FACILITY_RELATION_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/system/types/LayerType.h>
#include <nds/venue/instantiations/ParkingLanePositionRelationMapList.h>
#include <nds/venue/instantiations/ParkingLaneRangeRelationMapList.h>
#include <nds/venue/instantiations/ParkingPoiRelationMapList.h>
#include <nds/venue/instantiations/ParkingRoadSurfaceRelationMapList.h>
#include <nds/venue/metadata/ParkingFacilityRelationLayerContent.h>

namespace nds
{
namespace venue
{
namespace layer
{

class ParkingFacilityRelationLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::venue::instantiations::ParkingLaneRangeRelationMapList::ZserioPackingContext& getParkingLaneRangeRelationMapList()
        {
            return m_parkingLaneRangeRelationMapList_;
        }

        ::nds::venue::instantiations::ParkingLanePositionRelationMapList::ZserioPackingContext& getParkingLanePositionRelationMapList()
        {
            return m_parkingLanePositionRelationMapList_;
        }

        ::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList::ZserioPackingContext& getParkingRoadSurfaceRelationMapList()
        {
            return m_parkingRoadSurfaceRelationMapList_;
        }

        ::nds::venue::instantiations::ParkingPoiRelationMapList::ZserioPackingContext& getParkingPoiRelationMapList()
        {
            return m_parkingPoiRelationMapList_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::venue::instantiations::ParkingLaneRangeRelationMapList::ZserioPackingContext m_parkingLaneRangeRelationMapList_;
        ::nds::venue::instantiations::ParkingLanePositionRelationMapList::ZserioPackingContext m_parkingLanePositionRelationMapList_;
        ::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList::ZserioPackingContext m_parkingRoadSurfaceRelationMapList_;
        ::nds::venue::instantiations::ParkingPoiRelationMapList::ZserioPackingContext m_parkingPoiRelationMapList_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ParkingFacilityRelationLayer() noexcept :
            ParkingFacilityRelationLayer(allocator_type())
    {}

    explicit ParkingFacilityRelationLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_parkingLaneRangeRelationMapList = ::nds::venue::instantiations::ParkingLaneRangeRelationMapList,
            typename ZSERIO_T_parkingLanePositionRelationMapList = ::nds::venue::instantiations::ParkingLanePositionRelationMapList,
            typename ZSERIO_T_parkingRoadSurfaceRelationMapList = ::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList,
            typename ZSERIO_T_parkingPoiRelationMapList = ::nds::venue::instantiations::ParkingPoiRelationMapList>
    ParkingFacilityRelationLayer(
            ::nds::venue::metadata::ParkingFacilityRelationLayerContent content_,
            ZSERIO_T_parkingLaneRangeRelationMapList&& parkingLaneRangeRelationMapList_,
            ZSERIO_T_parkingLanePositionRelationMapList&& parkingLanePositionRelationMapList_,
            ZSERIO_T_parkingRoadSurfaceRelationMapList&& parkingRoadSurfaceRelationMapList_,
            ZSERIO_T_parkingPoiRelationMapList&& parkingPoiRelationMapList_,
            const allocator_type& allocator = allocator_type()) :
            ParkingFacilityRelationLayer(allocator)
    {
        m_content_ = content_;
        m_parkingLaneRangeRelationMapList_ = ::std::forward<ZSERIO_T_parkingLaneRangeRelationMapList>(parkingLaneRangeRelationMapList_);
        m_parkingLanePositionRelationMapList_ = ::std::forward<ZSERIO_T_parkingLanePositionRelationMapList>(parkingLanePositionRelationMapList_);
        m_parkingRoadSurfaceRelationMapList_ = ::std::forward<ZSERIO_T_parkingRoadSurfaceRelationMapList>(parkingRoadSurfaceRelationMapList_);
        m_parkingPoiRelationMapList_ = ::std::forward<ZSERIO_T_parkingPoiRelationMapList>(parkingPoiRelationMapList_);
    }

    explicit ParkingFacilityRelationLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ParkingFacilityRelationLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ParkingFacilityRelationLayer() = default;

    ParkingFacilityRelationLayer(const ParkingFacilityRelationLayer& other);
    ParkingFacilityRelationLayer& operator=(const ParkingFacilityRelationLayer& other);

    ParkingFacilityRelationLayer(ParkingFacilityRelationLayer&& other);
    ParkingFacilityRelationLayer& operator=(ParkingFacilityRelationLayer&& other);

    ParkingFacilityRelationLayer(::zserio::PropagateAllocatorT,
            const ParkingFacilityRelationLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::venue::metadata::ParkingFacilityRelationLayerContent getContent() const;
    void setContent(::nds::venue::metadata::ParkingFacilityRelationLayerContent content_);

    const ::nds::venue::instantiations::ParkingLaneRangeRelationMapList& getParkingLaneRangeRelationMapList() const;
    ::nds::venue::instantiations::ParkingLaneRangeRelationMapList& getParkingLaneRangeRelationMapList();
    void setParkingLaneRangeRelationMapList(const ::nds::venue::instantiations::ParkingLaneRangeRelationMapList& parkingLaneRangeRelationMapList_);
    void setParkingLaneRangeRelationMapList(::nds::venue::instantiations::ParkingLaneRangeRelationMapList&& parkingLaneRangeRelationMapList_);
    bool isParkingLaneRangeRelationMapListUsed() const;
    bool isParkingLaneRangeRelationMapListSet() const;
    void resetParkingLaneRangeRelationMapList();

    const ::nds::venue::instantiations::ParkingLanePositionRelationMapList& getParkingLanePositionRelationMapList() const;
    ::nds::venue::instantiations::ParkingLanePositionRelationMapList& getParkingLanePositionRelationMapList();
    void setParkingLanePositionRelationMapList(const ::nds::venue::instantiations::ParkingLanePositionRelationMapList& parkingLanePositionRelationMapList_);
    void setParkingLanePositionRelationMapList(::nds::venue::instantiations::ParkingLanePositionRelationMapList&& parkingLanePositionRelationMapList_);
    bool isParkingLanePositionRelationMapListUsed() const;
    bool isParkingLanePositionRelationMapListSet() const;
    void resetParkingLanePositionRelationMapList();

    const ::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList& getParkingRoadSurfaceRelationMapList() const;
    ::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList& getParkingRoadSurfaceRelationMapList();
    void setParkingRoadSurfaceRelationMapList(const ::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList& parkingRoadSurfaceRelationMapList_);
    void setParkingRoadSurfaceRelationMapList(::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList&& parkingRoadSurfaceRelationMapList_);
    bool isParkingRoadSurfaceRelationMapListUsed() const;
    bool isParkingRoadSurfaceRelationMapListSet() const;
    void resetParkingRoadSurfaceRelationMapList();

    const ::nds::venue::instantiations::ParkingPoiRelationMapList& getParkingPoiRelationMapList() const;
    ::nds::venue::instantiations::ParkingPoiRelationMapList& getParkingPoiRelationMapList();
    void setParkingPoiRelationMapList(const ::nds::venue::instantiations::ParkingPoiRelationMapList& parkingPoiRelationMapList_);
    void setParkingPoiRelationMapList(::nds::venue::instantiations::ParkingPoiRelationMapList&& parkingPoiRelationMapList_);
    bool isParkingPoiRelationMapListUsed() const;
    bool isParkingPoiRelationMapListSet() const;
    void resetParkingPoiRelationMapList();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ParkingFacilityRelationLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::venue::metadata::ParkingFacilityRelationLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::venue::metadata::ParkingFacilityRelationLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList> readParkingLaneRangeRelationMapList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList> readParkingLaneRangeRelationMapList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList> readParkingLanePositionRelationMapList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList> readParkingLanePositionRelationMapList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList> readParkingRoadSurfaceRelationMapList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList> readParkingRoadSurfaceRelationMapList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList> readParkingPoiRelationMapList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList> readParkingPoiRelationMapList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::venue::metadata::ParkingFacilityRelationLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLaneRangeRelationMapList> m_parkingLaneRangeRelationMapList_;
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingLanePositionRelationMapList> m_parkingLanePositionRelationMapList_;
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRoadSurfaceRelationMapList> m_parkingRoadSurfaceRelationMapList_;
    ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPoiRelationMapList> m_parkingPoiRelationMapList_;
};

} // namespace layer
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_LAYER_PARKING_FACILITY_RELATION_LAYER_H
