/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_DETAILS_TYPES_PARKING_ROW_LAYOUT_H
#define NDS_VENUE_DETAILS_TYPES_PARKING_ROW_LAYOUT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/venue/details/types/ParkingOrientation.h>

namespace nds
{
namespace venue
{
namespace details
{
namespace types
{

class ParkingRowLayout
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getOrientation()
        {
            return m_orientation_;
        }

    private:
        ::zserio::DeltaContext m_orientation_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ParkingRowLayout() noexcept :
            ParkingRowLayout(allocator_type())
    {}

    explicit ParkingRowLayout(const allocator_type& allocator) noexcept;

    ParkingRowLayout(
            bool structuredParking_,
            bool interlockedSpots_,
            ::nds::venue::details::types::ParkingOrientation orientation_,
            const allocator_type& allocator = allocator_type()) :
            ParkingRowLayout(allocator)
    {
        m_structuredParking_ = structuredParking_;
        m_interlockedSpots_ = interlockedSpots_;
        m_orientation_ = orientation_;
    }

    explicit ParkingRowLayout(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ParkingRowLayout(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ParkingRowLayout() = default;

    ParkingRowLayout(const ParkingRowLayout&) = default;
    ParkingRowLayout& operator=(const ParkingRowLayout&) = default;

    ParkingRowLayout(ParkingRowLayout&&) = default;
    ParkingRowLayout& operator=(ParkingRowLayout&&) = default;

    ParkingRowLayout(::zserio::PropagateAllocatorT,
            const ParkingRowLayout& other, const allocator_type& allocator);

    bool getStructuredParking() const;
    void setStructuredParking(bool structuredParking_);

    bool getInterlockedSpots() const;
    void setInterlockedSpots(bool interlockedSpots_);

    ::nds::venue::details::types::ParkingOrientation getOrientation() const;
    void setOrientation(::nds::venue::details::types::ParkingOrientation orientation_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ParkingRowLayout& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    bool readStructuredParking(::zserio::BitStreamReader& in);
    bool readInterlockedSpots(::zserio::BitStreamReader& in);
    ::nds::venue::details::types::ParkingOrientation readOrientation(::zserio::BitStreamReader& in);
    ::nds::venue::details::types::ParkingOrientation readOrientation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    bool m_structuredParking_;
    bool m_interlockedSpots_;
    ::nds::venue::details::types::ParkingOrientation m_orientation_;
};

} // namespace types
} // namespace details
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_DETAILS_TYPES_PARKING_ROW_LAYOUT_H
