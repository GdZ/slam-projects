/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_DETAILS_TYPES_PARKING_RESTRICTIONS_H
#define NDS_VENUE_DETAILS_TYPES_PARKING_RESTRICTIONS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace venue
{
namespace details
{
namespace types
{

class ParkingRestrictions
{
public:
    using underlying_type = uint16_t;

    enum class Values : underlying_type
    {
        CONDITIONAL_ONLY = UINT16_C(0),
        ACCESSIBLE = UINT16_C(2),
        ELECTRIC_VEHICLE = UINT16_C(4),
        FAMILY = UINT16_C(8),
        WOMEN = UINT16_C(16),
        PRIVATE = UINT16_C(32),
        VISITOR = UINT16_C(64)
    };

    constexpr ParkingRestrictions() noexcept :
            m_value(0)
    {}

    explicit ParkingRestrictions(::zserio::BitStreamReader& in);
    ParkingRestrictions(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);
    constexpr ParkingRestrictions(Values value) noexcept :
            m_value(static_cast<underlying_type>(value))
    {}

    explicit ParkingRestrictions(underlying_type value);

    ~ParkingRestrictions() = default;

    ParkingRestrictions(const ParkingRestrictions&) = default;
    ParkingRestrictions& operator=(const ParkingRestrictions&) = default;

    ParkingRestrictions(ParkingRestrictions&&) = default;
    ParkingRestrictions& operator=(ParkingRestrictions&&) = default;

    constexpr explicit operator underlying_type() const
    {
        return m_value;
    }

    constexpr underlying_type getValue() const
    {
        return m_value;
    }

    void initPackingContext(::zserio::DeltaContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::DeltaContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0) const;
    size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const;

    ::zserio::string<> toString(const ::zserio::string<>::allocator_type& allocator =
            ::zserio::string<>::allocator_type()) const;

private:
    static underlying_type readValue(::zserio::BitStreamReader& in);
    static underlying_type readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

    underlying_type m_value;
};

inline bool operator==(const ParkingRestrictions& lhs, const ParkingRestrictions& rhs)
{
    return lhs.getValue() == rhs.getValue();
}

inline bool operator!=(const ParkingRestrictions& lhs, const ParkingRestrictions& rhs)
{
    return lhs.getValue() != rhs.getValue();
}

inline ParkingRestrictions operator|(ParkingRestrictions::Values lhs, ParkingRestrictions::Values rhs)
{
    return ParkingRestrictions(static_cast<ParkingRestrictions::underlying_type>(lhs) | static_cast<ParkingRestrictions::underlying_type>(rhs));
}

inline ParkingRestrictions operator|(const ParkingRestrictions& lhs, const ParkingRestrictions& rhs)
{
    return ParkingRestrictions(lhs.getValue() | rhs.getValue());
}

inline ParkingRestrictions operator&(ParkingRestrictions::Values lhs, ParkingRestrictions::Values rhs)
{
    return ParkingRestrictions(static_cast<ParkingRestrictions::underlying_type>(lhs) & static_cast<ParkingRestrictions::underlying_type>(rhs));
}

inline ParkingRestrictions operator&(const ParkingRestrictions& lhs, const ParkingRestrictions& rhs)
{
    return ParkingRestrictions(lhs.getValue() & rhs.getValue());
}

inline ParkingRestrictions operator^(ParkingRestrictions::Values lhs, ParkingRestrictions::Values rhs)
{
    return ParkingRestrictions(static_cast<ParkingRestrictions::underlying_type>(lhs) ^ static_cast<ParkingRestrictions::underlying_type>(rhs));
}

inline ParkingRestrictions operator^(const ParkingRestrictions& lhs, const ParkingRestrictions& rhs)
{
    return ParkingRestrictions(lhs.getValue() ^ rhs.getValue());
}

inline ParkingRestrictions operator~(ParkingRestrictions::Values lhs)
{
    return ParkingRestrictions(~static_cast<ParkingRestrictions::underlying_type>(lhs) & UINT16_C(32767));
}

inline ParkingRestrictions operator~(const ParkingRestrictions& lhs)
{
    return ParkingRestrictions(~lhs.getValue() & UINT16_C(32767));
}

inline ParkingRestrictions operator|=(ParkingRestrictions& lhs, const ParkingRestrictions& rhs)
{
    lhs = ParkingRestrictions(lhs.getValue() | rhs.getValue());
    return lhs;
}

inline ParkingRestrictions operator&=(ParkingRestrictions& lhs, const ParkingRestrictions& rhs)
{
    lhs = ParkingRestrictions(lhs.getValue() & rhs.getValue());
    return lhs;
}

inline ParkingRestrictions operator^=(ParkingRestrictions& lhs, const ParkingRestrictions& rhs)
{
    lhs = ParkingRestrictions(lhs.getValue() ^ rhs.getValue());
    return lhs;
}

} // namespace types
} // namespace details
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_DETAILS_TYPES_PARKING_RESTRICTIONS_H
