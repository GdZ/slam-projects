/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_DETAILS_TYPES_PRIVATE_PARKING_DETAILS_H
#define NDS_VENUE_DETAILS_TYPES_PRIVATE_PARKING_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

namespace nds
{
namespace venue
{
namespace details
{
namespace types
{

class PrivateParkingDetails
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    PrivateParkingDetails() noexcept :
            PrivateParkingDetails(allocator_type())
    {}

    explicit PrivateParkingDetails(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_hint = ::zserio::string<>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_hint, PrivateParkingDetails, allocator_type> = 0>
    explicit PrivateParkingDetails(
            ZSERIO_T_hint&& hint_,
            const allocator_type& allocator = allocator_type()) :
            PrivateParkingDetails(allocator)
    {
        m_hint_ = ::std::forward<ZSERIO_T_hint>(hint_);
    }

    explicit PrivateParkingDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PrivateParkingDetails() = default;

    PrivateParkingDetails(const PrivateParkingDetails&) = default;
    PrivateParkingDetails& operator=(const PrivateParkingDetails&) = default;

    PrivateParkingDetails(PrivateParkingDetails&&) = default;
    PrivateParkingDetails& operator=(PrivateParkingDetails&&) = default;

    PrivateParkingDetails(::zserio::PropagateAllocatorT,
            const PrivateParkingDetails& other, const allocator_type& allocator);

    const ::zserio::string<>& getHint() const;
    ::zserio::string<>& getHint();
    void setHint(const ::zserio::string<>& hint_);
    void setHint(::zserio::string<>&& hint_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const PrivateParkingDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readHint(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::zserio::string<> m_hint_;
};

} // namespace types
} // namespace details
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_DETAILS_TYPES_PRIVATE_PARKING_DETAILS_H
