/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_DETAILS_PROPERTIES_VENUE_PROPERTY_VALUE_H
#define NDS_VENUE_DETAILS_PROPERTIES_VENUE_PROPERTY_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/properties/CorePropertyType.h>
#include <nds/core/properties/CorePropertyValue.h>
#include <nds/venue/details/properties/PropertyType.h>
#include <nds/venue/details/properties/PropertyValue.h>
#include <nds/venue/details/properties/VenuePropertyType.h>

namespace nds
{
namespace venue
{
namespace details
{
namespace properties
{

class VenuePropertyValue
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::properties::CorePropertyValue::ZserioPackingContext& getCoreValue()
        {
            return m_coreValue_;
        }

    private:
        ::nds::core::properties::CorePropertyValue::ZserioPackingContext m_coreValue_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    VenuePropertyValue() noexcept :
            VenuePropertyValue(allocator_type())
    {}

    explicit VenuePropertyValue(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_value = ::nds::venue::details::properties::PropertyValue,
            typename ZSERIO_T_coreValue = ::nds::core::properties::CorePropertyValue,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_value, VenuePropertyValue, allocator_type> = 0>
    VenuePropertyValue(
            ZSERIO_T_value&& value_,
            ZSERIO_T_coreValue&& coreValue_,
            const allocator_type& allocator = allocator_type()) :
            VenuePropertyValue(allocator)
    {
        m_value_ = ::std::forward<ZSERIO_T_value>(value_);
        m_coreValue_ = ::std::forward<ZSERIO_T_coreValue>(coreValue_);
    }

    explicit VenuePropertyValue(::zserio::BitStreamReader& in,
            ::nds::venue::details::properties::VenuePropertyType& type_, const allocator_type& allocator = allocator_type());
    explicit VenuePropertyValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::venue::details::properties::VenuePropertyType& type_, const allocator_type& allocator = allocator_type());

    ~VenuePropertyValue() = default;

    VenuePropertyValue(const VenuePropertyValue& other);
    VenuePropertyValue& operator=(const VenuePropertyValue& other);

    VenuePropertyValue(VenuePropertyValue&& other);
    VenuePropertyValue& operator=(VenuePropertyValue&& other);

    VenuePropertyValue(::zserio::PropagateAllocatorT,
            const VenuePropertyValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::venue::details::properties::VenuePropertyType& type_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::venue::details::properties::VenuePropertyType& getType();
    const ::nds::venue::details::properties::VenuePropertyType& getType() const;

    const ::nds::venue::details::properties::PropertyValue& getValue() const;
    ::nds::venue::details::properties::PropertyValue& getValue();
    void setValue(const ::nds::venue::details::properties::PropertyValue& value_);
    void setValue(::nds::venue::details::properties::PropertyValue&& value_);
    bool isValueUsed() const;
    bool isValueSet() const;
    void resetValue();

    const ::nds::core::properties::CorePropertyValue& getCoreValue() const;
    ::nds::core::properties::CorePropertyValue& getCoreValue();
    void setCoreValue(const ::nds::core::properties::CorePropertyValue& coreValue_);
    void setCoreValue(::nds::core::properties::CorePropertyValue&& coreValue_);
    bool isCoreValueUsed() const;
    bool isCoreValueSet() const;
    void resetCoreValue();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const VenuePropertyValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::InplaceOptionalHolder<::nds::venue::details::properties::PropertyValue> readValue(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> readCoreValue(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> readCoreValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::venue::details::properties::VenuePropertyType* m_type_;
    bool m_isInitialized;
    ::zserio::InplaceOptionalHolder<::nds::venue::details::properties::PropertyValue> m_value_;
    ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> m_coreValue_;
};

} // namespace properties
} // namespace details
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_DETAILS_PROPERTIES_VENUE_PROPERTY_VALUE_H
