/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_PARKING_PARKING_RELATION_VALUE_H
#define NDS_VENUE_PARKING_PARKING_RELATION_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/venue/parking/ParkingRelationType.h>
#include <nds/venue/reference/types/ParkingRowId.h>
#include <nds/venue/reference/types/ParkingSectionId.h>
#include <nds/venue/reference/types/ParkingSpotId.h>

namespace nds
{
namespace venue
{
namespace parking
{

class ParkingRelationValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_partOfSectionId = 0,
        CHOICE_partOfRowId = 1,
        CHOICE_partOfSpotId = 2,
        CHOICE_sectionId = 3,
        CHOICE_rowId = 4,
        CHOICE_spotId = 5,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::venue::reference::types::ParkingSectionId::ZserioPackingContext& getPartOfSectionId()
        {
            return m_partOfSectionId_;
        }

        ::nds::venue::reference::types::ParkingRowId::ZserioPackingContext& getPartOfRowId()
        {
            return m_partOfRowId_;
        }

        ::nds::venue::reference::types::ParkingSpotId::ZserioPackingContext& getPartOfSpotId()
        {
            return m_partOfSpotId_;
        }

        ::nds::venue::reference::types::ParkingSectionId::ZserioPackingContext& getSectionId()
        {
            return m_sectionId_;
        }

        ::nds::venue::reference::types::ParkingRowId::ZserioPackingContext& getRowId()
        {
            return m_rowId_;
        }

        ::nds::venue::reference::types::ParkingSpotId::ZserioPackingContext& getSpotId()
        {
            return m_spotId_;
        }

    private:
        ::nds::venue::reference::types::ParkingSectionId::ZserioPackingContext m_partOfSectionId_;
        ::nds::venue::reference::types::ParkingRowId::ZserioPackingContext m_partOfRowId_;
        ::nds::venue::reference::types::ParkingSpotId::ZserioPackingContext m_partOfSpotId_;
        ::nds::venue::reference::types::ParkingSectionId::ZserioPackingContext m_sectionId_;
        ::nds::venue::reference::types::ParkingRowId::ZserioPackingContext m_rowId_;
        ::nds::venue::reference::types::ParkingSpotId::ZserioPackingContext m_spotId_;
    };

    ParkingRelationValue() noexcept :
            ParkingRelationValue(allocator_type())
    {}

    explicit ParkingRelationValue(const allocator_type& allocator) noexcept;

    explicit ParkingRelationValue(::zserio::BitStreamReader& in,
            ::nds::venue::parking::ParkingRelationType type_, const allocator_type& allocator = allocator_type());
    explicit ParkingRelationValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::venue::parking::ParkingRelationType type_, const allocator_type& allocator = allocator_type());

    ~ParkingRelationValue() = default;

    ParkingRelationValue(const ParkingRelationValue& other);
    ParkingRelationValue& operator=(const ParkingRelationValue& other);

    ParkingRelationValue(ParkingRelationValue&& other);
    ParkingRelationValue& operator=(ParkingRelationValue&& other);

    ParkingRelationValue(::zserio::PropagateAllocatorT,
            const ParkingRelationValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::venue::parking::ParkingRelationType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::venue::parking::ParkingRelationType getType() const;

    const ::nds::venue::reference::types::ParkingSectionId& getPartOfSectionId() const;
    ::nds::venue::reference::types::ParkingSectionId& getPartOfSectionId();
    void setPartOfSectionId(const ::nds::venue::reference::types::ParkingSectionId& partOfSectionId_);
    void setPartOfSectionId(::nds::venue::reference::types::ParkingSectionId&& partOfSectionId_);

    const ::nds::venue::reference::types::ParkingRowId& getPartOfRowId() const;
    ::nds::venue::reference::types::ParkingRowId& getPartOfRowId();
    void setPartOfRowId(const ::nds::venue::reference::types::ParkingRowId& partOfRowId_);
    void setPartOfRowId(::nds::venue::reference::types::ParkingRowId&& partOfRowId_);

    const ::nds::venue::reference::types::ParkingSpotId& getPartOfSpotId() const;
    ::nds::venue::reference::types::ParkingSpotId& getPartOfSpotId();
    void setPartOfSpotId(const ::nds::venue::reference::types::ParkingSpotId& partOfSpotId_);
    void setPartOfSpotId(::nds::venue::reference::types::ParkingSpotId&& partOfSpotId_);

    const ::nds::venue::reference::types::ParkingSectionId& getSectionId() const;
    ::nds::venue::reference::types::ParkingSectionId& getSectionId();
    void setSectionId(const ::nds::venue::reference::types::ParkingSectionId& sectionId_);
    void setSectionId(::nds::venue::reference::types::ParkingSectionId&& sectionId_);

    const ::nds::venue::reference::types::ParkingRowId& getRowId() const;
    ::nds::venue::reference::types::ParkingRowId& getRowId();
    void setRowId(const ::nds::venue::reference::types::ParkingRowId& rowId_);
    void setRowId(::nds::venue::reference::types::ParkingRowId&& rowId_);

    const ::nds::venue::reference::types::ParkingSpotId& getSpotId() const;
    ::nds::venue::reference::types::ParkingSpotId& getSpotId();
    void setSpotId(const ::nds::venue::reference::types::ParkingSpotId& spotId_);
    void setSpotId(::nds::venue::reference::types::ParkingSpotId&& spotId_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ParkingRelationValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::venue::parking::ParkingRelationType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace parking
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_PARKING_PARKING_RELATION_VALUE_H
