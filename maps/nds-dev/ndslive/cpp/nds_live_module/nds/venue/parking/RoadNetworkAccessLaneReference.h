/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_PARKING_ROAD_NETWORK_ACCESS_LANE_REFERENCE_H
#define NDS_VENUE_PARKING_ROAD_NETWORK_ACCESS_LANE_REFERENCE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/lane/reference/types/LaneGroupPositionValidity.h>
#include <nds/lane/reference/types/LaneGroupReferenceIndirect.h>
#include <nds/venue/parking/RoadNetworkAccessType.h>
#include <nds/venue/reference/types/ParkingFacilityId.h>

namespace nds
{
namespace venue
{
namespace parking
{

class RoadNetworkAccessLaneReference
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::venue::reference::types::ParkingFacilityId::ZserioPackingContext& getFacilityId()
        {
            return m_facilityId_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::nds::lane::reference::types::LaneGroupReferenceIndirect::ZserioPackingContext& getIndirectReference()
        {
            return m_indirectReference_;
        }

        ::nds::lane::reference::types::LaneGroupPositionValidity::ZserioPackingContext& getValidity()
        {
            return m_validity_;
        }

    private:
        ::nds::venue::reference::types::ParkingFacilityId::ZserioPackingContext m_facilityId_;
        ::zserio::DeltaContext m_type_;
        ::nds::lane::reference::types::LaneGroupReferenceIndirect::ZserioPackingContext m_indirectReference_;
        ::nds::lane::reference::types::LaneGroupPositionValidity::ZserioPackingContext m_validity_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadNetworkAccessLaneReference() noexcept :
            RoadNetworkAccessLaneReference(allocator_type())
    {}

    explicit RoadNetworkAccessLaneReference(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_facilityId = ::nds::venue::reference::types::ParkingFacilityId,
            typename ZSERIO_T_indirectReference = ::nds::lane::reference::types::LaneGroupReferenceIndirect,
            typename ZSERIO_T_validity = ::nds::lane::reference::types::LaneGroupPositionValidity,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_facilityId, RoadNetworkAccessLaneReference, allocator_type> = 0>
    RoadNetworkAccessLaneReference(
            ZSERIO_T_facilityId&& facilityId_,
            ::nds::venue::parking::RoadNetworkAccessType type_,
            ZSERIO_T_indirectReference&& indirectReference_,
            ZSERIO_T_validity&& validity_,
            const allocator_type& allocator = allocator_type()) :
            RoadNetworkAccessLaneReference(allocator)
    {
        m_facilityId_ = ::std::forward<ZSERIO_T_facilityId>(facilityId_);
        m_type_ = type_;
        m_indirectReference_ = ::std::forward<ZSERIO_T_indirectReference>(indirectReference_);
        m_validity_ = ::std::forward<ZSERIO_T_validity>(validity_);
    }

    explicit RoadNetworkAccessLaneReference(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadNetworkAccessLaneReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadNetworkAccessLaneReference() = default;

    RoadNetworkAccessLaneReference(const RoadNetworkAccessLaneReference& other);
    RoadNetworkAccessLaneReference& operator=(const RoadNetworkAccessLaneReference& other);

    RoadNetworkAccessLaneReference(RoadNetworkAccessLaneReference&& other);
    RoadNetworkAccessLaneReference& operator=(RoadNetworkAccessLaneReference&& other);

    RoadNetworkAccessLaneReference(::zserio::PropagateAllocatorT,
            const RoadNetworkAccessLaneReference& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::venue::reference::types::ParkingFacilityId& getFacilityId() const;
    ::nds::venue::reference::types::ParkingFacilityId& getFacilityId();
    void setFacilityId(const ::nds::venue::reference::types::ParkingFacilityId& facilityId_);
    void setFacilityId(::nds::venue::reference::types::ParkingFacilityId&& facilityId_);

    ::nds::venue::parking::RoadNetworkAccessType getType() const;
    void setType(::nds::venue::parking::RoadNetworkAccessType type_);

    const ::nds::lane::reference::types::LaneGroupReferenceIndirect& getIndirectReference() const;
    ::nds::lane::reference::types::LaneGroupReferenceIndirect& getIndirectReference();
    void setIndirectReference(const ::nds::lane::reference::types::LaneGroupReferenceIndirect& indirectReference_);
    void setIndirectReference(::nds::lane::reference::types::LaneGroupReferenceIndirect&& indirectReference_);

    const ::nds::lane::reference::types::LaneGroupPositionValidity& getValidity() const;
    ::nds::lane::reference::types::LaneGroupPositionValidity& getValidity();
    void setValidity(const ::nds::lane::reference::types::LaneGroupPositionValidity& validity_);
    void setValidity(::nds::lane::reference::types::LaneGroupPositionValidity&& validity_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadNetworkAccessLaneReference& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::venue::reference::types::ParkingFacilityId readFacilityId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::venue::reference::types::ParkingFacilityId readFacilityId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::venue::parking::RoadNetworkAccessType readType(::zserio::BitStreamReader& in);
    ::nds::venue::parking::RoadNetworkAccessType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::lane::reference::types::LaneGroupReferenceIndirect readIndirectReference(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupReferenceIndirect readIndirectReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupPositionValidity readValidity(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGroupPositionValidity readValidity(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::venue::reference::types::ParkingFacilityId m_facilityId_;
    ::nds::venue::parking::RoadNetworkAccessType m_type_;
    ::nds::lane::reference::types::LaneGroupReferenceIndirect m_indirectReference_;
    ::nds::lane::reference::types::LaneGroupPositionValidity m_validity_;
};

} // namespace parking
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_PARKING_ROAD_NETWORK_ACCESS_LANE_REFERENCE_H
