/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_PARKING_PARKING_FACILITY_H
#define NDS_VENUE_PARKING_PARKING_FACILITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/venue/parking/ParkingLevel.h>
#include <nds/venue/reference/types/ParkingFacilityId.h>

namespace nds
{
namespace venue
{
namespace parking
{

class ParkingFacility
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::venue::reference::types::ParkingFacilityId::ZserioPackingContext& getId()
        {
            return m_id_;
        }

    private:
        ::nds::venue::reference::types::ParkingFacilityId::ZserioPackingContext m_id_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ParkingFacility() noexcept :
            ParkingFacility(allocator_type())
    {}

    explicit ParkingFacility(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_id = ::nds::venue::reference::types::ParkingFacilityId,
            typename ZSERIO_T_levels = ::zserio::vector<::nds::venue::parking::ParkingLevel>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, ParkingFacility, allocator_type> = 0>
    ParkingFacility(
            ZSERIO_T_id&& id_,
            ZSERIO_T_levels&& levels_,
            const allocator_type& allocator = allocator_type()) :
            ParkingFacility(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
        m_levels_ = ZserioArrayType_levels(::std::forward<ZSERIO_T_levels>(levels_));
    }

    explicit ParkingFacility(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ParkingFacility(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ParkingFacility() = default;

    ParkingFacility(const ParkingFacility&) = default;
    ParkingFacility& operator=(const ParkingFacility&) = default;

    ParkingFacility(ParkingFacility&&) = default;
    ParkingFacility& operator=(ParkingFacility&&) = default;

    ParkingFacility(::zserio::PropagateAllocatorT,
            const ParkingFacility& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::venue::reference::types::ParkingFacilityId& getId() const;
    ::nds::venue::reference::types::ParkingFacilityId& getId();
    void setId(const ::nds::venue::reference::types::ParkingFacilityId& id_);
    void setId(::nds::venue::reference::types::ParkingFacilityId&& id_);

    const ::zserio::vector<::nds::venue::parking::ParkingLevel>& getLevels() const;
    ::zserio::vector<::nds::venue::parking::ParkingLevel>& getLevels();
    void setLevels(const ::zserio::vector<::nds::venue::parking::ParkingLevel>& levels_);
    void setLevels(::zserio::vector<::nds::venue::parking::ParkingLevel>&& levels_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ParkingFacility& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_levels
    {
    public:
        using OwnerType = ParkingFacility;

        static void initializeElement(ParkingFacility& owner,
                ::nds::venue::parking::ParkingLevel& element, size_t index);
    };

    class ZserioElementFactory_levels
    {
    public:
        using OwnerType = ParkingFacility;

        static void create(ParkingFacility& owner,
                ::zserio::vector<::nds::venue::parking::ParkingLevel>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ParkingFacility& owner,
                ::zserio::vector<::nds::venue::parking::ParkingLevel>& array,
                ::nds::venue::parking::ParkingLevel::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_levels = ::zserio::Array<::zserio::vector<::nds::venue::parking::ParkingLevel>, ::zserio::ObjectArrayTraits<::nds::venue::parking::ParkingLevel, ZserioElementFactory_levels>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_levels>;

    ::nds::venue::reference::types::ParkingFacilityId readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::venue::reference::types::ParkingFacilityId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_levels readLevels(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_levels readLevels(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::venue::reference::types::ParkingFacilityId m_id_;
    ZserioArrayType_levels m_levels_;
};

} // namespace parking
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_PARKING_PARKING_FACILITY_H
