/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_PARKING_PARKING_SECTION_H
#define NDS_VENUE_PARKING_PARKING_SECTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/venue/parking/ParkingRow.h>
#include <nds/venue/parking/ParkingSectionConnector.h>
#include <nds/venue/reference/types/ParkingSectionId.h>

namespace nds
{
namespace venue
{
namespace parking
{

class ParkingSection
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::venue::reference::types::ParkingSectionId::ZserioPackingContext& getId()
        {
            return m_id_;
        }

    private:
        ::nds::venue::reference::types::ParkingSectionId::ZserioPackingContext m_id_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ParkingSection() noexcept :
            ParkingSection(allocator_type())
    {}

    explicit ParkingSection(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_id = ::nds::venue::reference::types::ParkingSectionId,
            typename ZSERIO_T_rows = ::zserio::vector<::nds::venue::parking::ParkingRow>,
            typename ZSERIO_T_connectedSections = ::zserio::vector<::nds::venue::parking::ParkingSectionConnector>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, ParkingSection, allocator_type> = 0>
    ParkingSection(
            ZSERIO_T_id&& id_,
            ZSERIO_T_rows&& rows_,
            ZSERIO_T_connectedSections&& connectedSections_,
            const allocator_type& allocator = allocator_type()) :
            ParkingSection(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
        m_rows_ = ZserioArrayType_rows(::std::forward<ZSERIO_T_rows>(rows_));
        m_connectedSections_ = ::zserio::createOptionalArray<ZserioArrayType_connectedSections>(::std::forward<ZSERIO_T_connectedSections>(connectedSections_));
    }

    explicit ParkingSection(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ParkingSection(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ParkingSection() = default;

    ParkingSection(const ParkingSection&) = default;
    ParkingSection& operator=(const ParkingSection&) = default;

    ParkingSection(ParkingSection&&) = default;
    ParkingSection& operator=(ParkingSection&&) = default;

    ParkingSection(::zserio::PropagateAllocatorT,
            const ParkingSection& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::venue::reference::types::ParkingSectionId& getId() const;
    ::nds::venue::reference::types::ParkingSectionId& getId();
    void setId(const ::nds::venue::reference::types::ParkingSectionId& id_);
    void setId(::nds::venue::reference::types::ParkingSectionId&& id_);

    const ::zserio::vector<::nds::venue::parking::ParkingRow>& getRows() const;
    ::zserio::vector<::nds::venue::parking::ParkingRow>& getRows();
    void setRows(const ::zserio::vector<::nds::venue::parking::ParkingRow>& rows_);
    void setRows(::zserio::vector<::nds::venue::parking::ParkingRow>&& rows_);

    const ::zserio::vector<::nds::venue::parking::ParkingSectionConnector>& getConnectedSections() const;
    ::zserio::vector<::nds::venue::parking::ParkingSectionConnector>& getConnectedSections();
    void setConnectedSections(const ::zserio::vector<::nds::venue::parking::ParkingSectionConnector>& connectedSections_);
    void setConnectedSections(::zserio::vector<::nds::venue::parking::ParkingSectionConnector>&& connectedSections_);
    bool isConnectedSectionsUsed() const;
    bool isConnectedSectionsSet() const;
    void resetConnectedSections();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ParkingSection& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_rows
    {
    public:
        using OwnerType = ParkingSection;

        static void create(ParkingSection& owner,
                ::zserio::vector<::nds::venue::parking::ParkingRow>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ParkingSection& owner,
                ::zserio::vector<::nds::venue::parking::ParkingRow>& array,
                ::nds::venue::parking::ParkingRow::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_connectedSections
    {
    public:
        using OwnerType = ParkingSection;

        static void initializeElement(ParkingSection& owner,
                ::nds::venue::parking::ParkingSectionConnector& element, size_t index);
    };

    class ZserioElementFactory_connectedSections
    {
    public:
        using OwnerType = ParkingSection;

        static void create(ParkingSection& owner,
                ::zserio::vector<::nds::venue::parking::ParkingSectionConnector>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ParkingSection& owner,
                ::zserio::vector<::nds::venue::parking::ParkingSectionConnector>& array,
                ::nds::venue::parking::ParkingSectionConnector::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_rows = ::zserio::Array<::zserio::vector<::nds::venue::parking::ParkingRow>, ::zserio::ObjectArrayTraits<::nds::venue::parking::ParkingRow, ZserioElementFactory_rows>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_connectedSections = ::zserio::Array<::zserio::vector<::nds::venue::parking::ParkingSectionConnector>, ::zserio::ObjectArrayTraits<::nds::venue::parking::ParkingSectionConnector, ZserioElementFactory_connectedSections>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_connectedSections>;

    ::nds::venue::reference::types::ParkingSectionId readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::venue::reference::types::ParkingSectionId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_rows readRows(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_rows readRows(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_connectedSections> readConnectedSections(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_connectedSections> readConnectedSections(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::venue::reference::types::ParkingSectionId m_id_;
    ZserioArrayType_rows m_rows_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_connectedSections> m_connectedSections_;
};

} // namespace parking
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_PARKING_PARKING_SECTION_H
