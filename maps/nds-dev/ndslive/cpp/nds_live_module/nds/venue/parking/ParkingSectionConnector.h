/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_PARKING_PARKING_SECTION_CONNECTOR_H
#define NDS_VENUE_PARKING_PARKING_SECTION_CONNECTOR_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/BoundingPolygon2D.h>
#include <nds/core/geometry/CoordShift.h>
#include <nds/venue/reference/types/ParkingSectionId.h>

namespace nds
{
namespace venue
{
namespace parking
{

class ParkingSectionConnector
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::venue::reference::types::ParkingSectionId::ZserioPackingContext& getSectionId()
        {
            return m_sectionId_;
        }

        ::nds::core::geometry::BoundingPolygon2D::ZserioPackingContext& getTransitionPolygon()
        {
            return m_transitionPolygon_;
        }

    private:
        ::nds::venue::reference::types::ParkingSectionId::ZserioPackingContext m_sectionId_;
        ::nds::core::geometry::BoundingPolygon2D::ZserioPackingContext m_transitionPolygon_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ParkingSectionConnector() noexcept :
            ParkingSectionConnector(allocator_type())
    {}

    explicit ParkingSectionConnector(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_sectionId = ::nds::venue::reference::types::ParkingSectionId,
            typename ZSERIO_T_transitionPolygon = ::nds::core::geometry::BoundingPolygon2D,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_sectionId, ParkingSectionConnector, allocator_type> = 0>
    ParkingSectionConnector(
            ZSERIO_T_sectionId&& sectionId_,
            ZSERIO_T_transitionPolygon&& transitionPolygon_,
            const allocator_type& allocator = allocator_type()) :
            ParkingSectionConnector(allocator)
    {
        m_sectionId_ = ::std::forward<ZSERIO_T_sectionId>(sectionId_);
        m_transitionPolygon_ = ::std::forward<ZSERIO_T_transitionPolygon>(transitionPolygon_);
    }

    explicit ParkingSectionConnector(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ParkingSectionConnector(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ParkingSectionConnector() = default;

    ParkingSectionConnector(const ParkingSectionConnector& other);
    ParkingSectionConnector& operator=(const ParkingSectionConnector& other);

    ParkingSectionConnector(ParkingSectionConnector&& other);
    ParkingSectionConnector& operator=(ParkingSectionConnector&& other);

    ParkingSectionConnector(::zserio::PropagateAllocatorT,
            const ParkingSectionConnector& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::venue::reference::types::ParkingSectionId& getSectionId() const;
    ::nds::venue::reference::types::ParkingSectionId& getSectionId();
    void setSectionId(const ::nds::venue::reference::types::ParkingSectionId& sectionId_);
    void setSectionId(::nds::venue::reference::types::ParkingSectionId&& sectionId_);

    const ::nds::core::geometry::BoundingPolygon2D& getTransitionPolygon() const;
    ::nds::core::geometry::BoundingPolygon2D& getTransitionPolygon();
    void setTransitionPolygon(const ::nds::core::geometry::BoundingPolygon2D& transitionPolygon_);
    void setTransitionPolygon(::nds::core::geometry::BoundingPolygon2D&& transitionPolygon_);
    bool isTransitionPolygonUsed() const;
    bool isTransitionPolygonSet() const;
    void resetTransitionPolygon();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ParkingSectionConnector& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::venue::reference::types::ParkingSectionId readSectionId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::venue::reference::types::ParkingSectionId readSectionId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::BoundingPolygon2D> readTransitionPolygon(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::BoundingPolygon2D> readTransitionPolygon(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::venue::reference::types::ParkingSectionId m_sectionId_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::BoundingPolygon2D> m_transitionPolygon_;
};

} // namespace parking
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_PARKING_PARKING_SECTION_CONNECTOR_H
