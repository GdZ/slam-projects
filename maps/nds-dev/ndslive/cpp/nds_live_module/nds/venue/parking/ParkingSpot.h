/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_PARKING_PARKING_SPOT_H
#define NDS_VENUE_PARKING_PARKING_SPOT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/venue/reference/types/ParkingSpotId.h>

namespace nds
{
namespace venue
{
namespace parking
{

class ParkingSpot
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::venue::reference::types::ParkingSpotId::ZserioPackingContext& getId()
        {
            return m_id_;
        }

    private:
        ::nds::venue::reference::types::ParkingSpotId::ZserioPackingContext m_id_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ParkingSpot() noexcept :
            ParkingSpot(allocator_type())
    {}

    explicit ParkingSpot(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_id = ::nds::venue::reference::types::ParkingSpotId,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, ParkingSpot, allocator_type> = 0>
    explicit ParkingSpot(
            ZSERIO_T_id&& id_,
            const allocator_type& allocator = allocator_type()) :
            ParkingSpot(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
    }

    explicit ParkingSpot(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ParkingSpot(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ParkingSpot() = default;

    ParkingSpot(const ParkingSpot&) = default;
    ParkingSpot& operator=(const ParkingSpot&) = default;

    ParkingSpot(ParkingSpot&&) = default;
    ParkingSpot& operator=(ParkingSpot&&) = default;

    ParkingSpot(::zserio::PropagateAllocatorT,
            const ParkingSpot& other, const allocator_type& allocator);

    const ::nds::venue::reference::types::ParkingSpotId& getId() const;
    ::nds::venue::reference::types::ParkingSpotId& getId();
    void setId(const ::nds::venue::reference::types::ParkingSpotId& id_);
    void setId(::nds::venue::reference::types::ParkingSpotId&& id_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ParkingSpot& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::venue::reference::types::ParkingSpotId readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::venue::reference::types::ParkingSpotId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::venue::reference::types::ParkingSpotId m_id_;
};

} // namespace parking
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_PARKING_PARKING_SPOT_H
