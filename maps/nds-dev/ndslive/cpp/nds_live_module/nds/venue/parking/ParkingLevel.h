/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VENUE_PARKING_PARKING_LEVEL_H
#define NDS_VENUE_PARKING_PARKING_LEVEL_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/venue/parking/ParkingLevelConnector.h>
#include <nds/venue/parking/ParkingSection.h>
#include <nds/venue/reference/types/ParkingLevelId.h>

namespace nds
{
namespace venue
{
namespace parking
{

class ParkingLevel
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::venue::reference::types::ParkingLevelId::ZserioPackingContext& getId()
        {
            return m_id_;
        }

    private:
        ::nds::venue::reference::types::ParkingLevelId::ZserioPackingContext m_id_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ParkingLevel() noexcept :
            ParkingLevel(allocator_type())
    {}

    explicit ParkingLevel(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_id = ::nds::venue::reference::types::ParkingLevelId,
            typename ZSERIO_T_sections = ::zserio::vector<::nds::venue::parking::ParkingSection>,
            typename ZSERIO_T_connectedLevels = ::zserio::vector<::nds::venue::parking::ParkingLevelConnector>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, ParkingLevel, allocator_type> = 0>
    ParkingLevel(
            ZSERIO_T_id&& id_,
            ZSERIO_T_sections&& sections_,
            ZSERIO_T_connectedLevels&& connectedLevels_,
            const allocator_type& allocator = allocator_type()) :
            ParkingLevel(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
        m_sections_ = ZserioArrayType_sections(::std::forward<ZSERIO_T_sections>(sections_));
        m_connectedLevels_ = ::zserio::createOptionalArray<ZserioArrayType_connectedLevels>(::std::forward<ZSERIO_T_connectedLevels>(connectedLevels_));
    }

    explicit ParkingLevel(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ParkingLevel(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ParkingLevel() = default;

    ParkingLevel(const ParkingLevel&) = default;
    ParkingLevel& operator=(const ParkingLevel&) = default;

    ParkingLevel(ParkingLevel&&) = default;
    ParkingLevel& operator=(ParkingLevel&&) = default;

    ParkingLevel(::zserio::PropagateAllocatorT,
            const ParkingLevel& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::venue::reference::types::ParkingLevelId& getId() const;
    ::nds::venue::reference::types::ParkingLevelId& getId();
    void setId(const ::nds::venue::reference::types::ParkingLevelId& id_);
    void setId(::nds::venue::reference::types::ParkingLevelId&& id_);

    const ::zserio::vector<::nds::venue::parking::ParkingSection>& getSections() const;
    ::zserio::vector<::nds::venue::parking::ParkingSection>& getSections();
    void setSections(const ::zserio::vector<::nds::venue::parking::ParkingSection>& sections_);
    void setSections(::zserio::vector<::nds::venue::parking::ParkingSection>&& sections_);

    const ::zserio::vector<::nds::venue::parking::ParkingLevelConnector>& getConnectedLevels() const;
    ::zserio::vector<::nds::venue::parking::ParkingLevelConnector>& getConnectedLevels();
    void setConnectedLevels(const ::zserio::vector<::nds::venue::parking::ParkingLevelConnector>& connectedLevels_);
    void setConnectedLevels(::zserio::vector<::nds::venue::parking::ParkingLevelConnector>&& connectedLevels_);
    bool isConnectedLevelsUsed() const;
    bool isConnectedLevelsSet() const;
    void resetConnectedLevels();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ParkingLevel& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_sections
    {
    public:
        using OwnerType = ParkingLevel;

        static void initializeElement(ParkingLevel& owner,
                ::nds::venue::parking::ParkingSection& element, size_t index);
    };

    class ZserioElementFactory_sections
    {
    public:
        using OwnerType = ParkingLevel;

        static void create(ParkingLevel& owner,
                ::zserio::vector<::nds::venue::parking::ParkingSection>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ParkingLevel& owner,
                ::zserio::vector<::nds::venue::parking::ParkingSection>& array,
                ::nds::venue::parking::ParkingSection::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_connectedLevels
    {
    public:
        using OwnerType = ParkingLevel;

        static void initializeElement(ParkingLevel& owner,
                ::nds::venue::parking::ParkingLevelConnector& element, size_t index);
    };

    class ZserioElementFactory_connectedLevels
    {
    public:
        using OwnerType = ParkingLevel;

        static void create(ParkingLevel& owner,
                ::zserio::vector<::nds::venue::parking::ParkingLevelConnector>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ParkingLevel& owner,
                ::zserio::vector<::nds::venue::parking::ParkingLevelConnector>& array,
                ::nds::venue::parking::ParkingLevelConnector::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_sections = ::zserio::Array<::zserio::vector<::nds::venue::parking::ParkingSection>, ::zserio::ObjectArrayTraits<::nds::venue::parking::ParkingSection, ZserioElementFactory_sections>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_sections>;
    using ZserioArrayType_connectedLevels = ::zserio::Array<::zserio::vector<::nds::venue::parking::ParkingLevelConnector>, ::zserio::ObjectArrayTraits<::nds::venue::parking::ParkingLevelConnector, ZserioElementFactory_connectedLevels>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_connectedLevels>;

    ::nds::venue::reference::types::ParkingLevelId readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::venue::reference::types::ParkingLevelId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_sections readSections(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_sections readSections(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_connectedLevels> readConnectedLevels(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_connectedLevels> readConnectedLevels(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::venue::reference::types::ParkingLevelId m_id_;
    ZserioArrayType_sections m_sections_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_connectedLevels> m_connectedLevels_;
};

} // namespace parking
} // namespace venue
} // namespace nds

#endif // NDS_VENUE_PARKING_PARKING_LEVEL_H
