/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/venue/metadata/ParkingFacilityRelationLayerContent.h>

namespace nds
{
namespace venue
{
namespace metadata
{

ParkingFacilityRelationLayerContent::ParkingFacilityRelationLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

ParkingFacilityRelationLayerContent::ParkingFacilityRelationLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

ParkingFacilityRelationLayerContent::ParkingFacilityRelationLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'ParkingFacilityRelationLayerContent' out of bounds: ") << value << "!";
}

void ParkingFacilityRelationLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::venue::metadata::ParkingFacilityRelationLayerContent::underlying_type>>(m_value);
}

size_t ParkingFacilityRelationLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t ParkingFacilityRelationLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::venue::metadata::ParkingFacilityRelationLayerContent::underlying_type>>(m_value);
}

size_t ParkingFacilityRelationLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t ParkingFacilityRelationLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t ParkingFacilityRelationLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void ParkingFacilityRelationLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void ParkingFacilityRelationLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::venue::metadata::ParkingFacilityRelationLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> ParkingFacilityRelationLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
        result += result.empty() ? "LANE_RANGE_MAPS" : " | LANE_RANGE_MAPS";
    if ((*this & ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
        result += result.empty() ? "LANE_POSITION_MAPS" : " | LANE_POSITION_MAPS";
    if ((*this & ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
        result += result.empty() ? "ROAD_SURFACE_MAPS" : " | ROAD_SURFACE_MAPS";
    if ((*this & ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ParkingFacilityRelationLayerContent::Values::POI_MAPS)
        result += result.empty() ? "POI_MAPS" : " | POI_MAPS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

ParkingFacilityRelationLayerContent::underlying_type ParkingFacilityRelationLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

ParkingFacilityRelationLayerContent::underlying_type ParkingFacilityRelationLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::venue::metadata::ParkingFacilityRelationLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace venue
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/venue/metadata/ParkingFacilityLayerMetadata.h>

namespace nds
{
namespace venue
{
namespace metadata
{

ParkingFacilityLayerMetadata::ParkingFacilityLayerMetadata(const allocator_type&) noexcept
{
}

ParkingFacilityLayerMetadata::ParkingFacilityLayerMetadata(::zserio::BitStreamReader&, const allocator_type&)
{
}

ParkingFacilityLayerMetadata::ParkingFacilityLayerMetadata(::zserio::PropagateAllocatorT,
        const ParkingFacilityLayerMetadata&, const allocator_type&)
{
}

size_t ParkingFacilityLayerMetadata::bitSizeOf(size_t) const
{
    return 0;
}

size_t ParkingFacilityLayerMetadata::initializeOffsets(size_t bitPosition)
{
    return bitPosition;
}

bool ParkingFacilityLayerMetadata::operator==(const ParkingFacilityLayerMetadata&) const
{
    return true;
}

uint32_t ParkingFacilityLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    return result;
}

void ParkingFacilityLayerMetadata::write(::zserio::BitStreamWriter&) const
{
}

} // namespace metadata
} // namespace venue
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/venue/metadata/ParkingFacilityRelationLayerMetadata.h>
#include <nds/venue/metadata/ParkingFacilityRelationLayerContent.h>

namespace nds
{
namespace venue
{
namespace metadata
{

ParkingFacilityRelationLayerMetadata::ParkingFacilityRelationLayerMetadata(const allocator_type&) noexcept :
        m_content_(::nds::venue::metadata::ParkingFacilityRelationLayerContent()),
        m_parkingRoadSurfaceRelationMetadata_(::zserio::NullOpt),
        m_parkingRangeRelationMetadata_(::zserio::NullOpt),
        m_parkingPositionRelationMetadata_(::zserio::NullOpt),
        m_parkingPoiRelationMetadata_(::zserio::NullOpt)
{
}

ParkingFacilityRelationLayerMetadata::ParkingFacilityRelationLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_parkingRoadSurfaceRelationMetadata_(readParkingRoadSurfaceRelationMetadata(in, allocator)),
        m_parkingRangeRelationMetadata_(readParkingRangeRelationMetadata(in, allocator)),
        m_parkingPositionRelationMetadata_(readParkingPositionRelationMetadata(in, allocator)),
        m_parkingPoiRelationMetadata_(readParkingPoiRelationMetadata(in, allocator))
{
}

ParkingFacilityRelationLayerMetadata::ParkingFacilityRelationLayerMetadata(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_parkingRoadSurfaceRelationMetadata_(readParkingRoadSurfaceRelationMetadata(context, in, allocator)),
        m_parkingRangeRelationMetadata_(readParkingRangeRelationMetadata(context, in, allocator)),
        m_parkingPositionRelationMetadata_(readParkingPositionRelationMetadata(context, in, allocator)),
        m_parkingPoiRelationMetadata_(readParkingPoiRelationMetadata(context, in, allocator))
{
}

ParkingFacilityRelationLayerMetadata::ParkingFacilityRelationLayerMetadata(::zserio::PropagateAllocatorT,
        const ParkingFacilityRelationLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_parkingRoadSurfaceRelationMetadata_(::zserio::allocatorPropagatingCopy(other.m_parkingRoadSurfaceRelationMetadata_, allocator)),
        m_parkingRangeRelationMetadata_(::zserio::allocatorPropagatingCopy(other.m_parkingRangeRelationMetadata_, allocator)),
        m_parkingPositionRelationMetadata_(::zserio::allocatorPropagatingCopy(other.m_parkingPositionRelationMetadata_, allocator)),
        m_parkingPoiRelationMetadata_(::zserio::allocatorPropagatingCopy(other.m_parkingPoiRelationMetadata_, allocator))
{
}

::nds::venue::metadata::ParkingFacilityRelationLayerContent ParkingFacilityRelationLayerMetadata::getContent() const
{
    return m_content_;
}

void ParkingFacilityRelationLayerMetadata::setContent(::nds::venue::metadata::ParkingFacilityRelationLayerContent content_)
{
    m_content_ = content_;
}

::nds::venue::instantiations::ParkingRelationMetadata& ParkingFacilityRelationLayerMetadata::getParkingRoadSurfaceRelationMetadata()
{
    return m_parkingRoadSurfaceRelationMetadata_.value();
}

const ::nds::venue::instantiations::ParkingRelationMetadata& ParkingFacilityRelationLayerMetadata::getParkingRoadSurfaceRelationMetadata() const
{
    return m_parkingRoadSurfaceRelationMetadata_.value();
}

void ParkingFacilityRelationLayerMetadata::setParkingRoadSurfaceRelationMetadata(const ::nds::venue::instantiations::ParkingRelationMetadata& parkingRoadSurfaceRelationMetadata_)
{
    m_parkingRoadSurfaceRelationMetadata_ = parkingRoadSurfaceRelationMetadata_;
}

void ParkingFacilityRelationLayerMetadata::setParkingRoadSurfaceRelationMetadata(::nds::venue::instantiations::ParkingRelationMetadata&& parkingRoadSurfaceRelationMetadata_)
{
    m_parkingRoadSurfaceRelationMetadata_ = ::std::move(parkingRoadSurfaceRelationMetadata_);
}

bool ParkingFacilityRelationLayerMetadata::isParkingRoadSurfaceRelationMetadataUsed() const
{
    return ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS);
}

bool ParkingFacilityRelationLayerMetadata::isParkingRoadSurfaceRelationMetadataSet() const
{
    return m_parkingRoadSurfaceRelationMetadata_.hasValue();
}

void ParkingFacilityRelationLayerMetadata::resetParkingRoadSurfaceRelationMetadata()
{
    m_parkingRoadSurfaceRelationMetadata_.reset();
}

::nds::venue::instantiations::ParkingRangeRelationMetadata& ParkingFacilityRelationLayerMetadata::getParkingRangeRelationMetadata()
{
    return m_parkingRangeRelationMetadata_.value();
}

const ::nds::venue::instantiations::ParkingRangeRelationMetadata& ParkingFacilityRelationLayerMetadata::getParkingRangeRelationMetadata() const
{
    return m_parkingRangeRelationMetadata_.value();
}

void ParkingFacilityRelationLayerMetadata::setParkingRangeRelationMetadata(const ::nds::venue::instantiations::ParkingRangeRelationMetadata& parkingRangeRelationMetadata_)
{
    m_parkingRangeRelationMetadata_ = parkingRangeRelationMetadata_;
}

void ParkingFacilityRelationLayerMetadata::setParkingRangeRelationMetadata(::nds::venue::instantiations::ParkingRangeRelationMetadata&& parkingRangeRelationMetadata_)
{
    m_parkingRangeRelationMetadata_ = ::std::move(parkingRangeRelationMetadata_);
}

bool ParkingFacilityRelationLayerMetadata::isParkingRangeRelationMetadataUsed() const
{
    return ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS);
}

bool ParkingFacilityRelationLayerMetadata::isParkingRangeRelationMetadataSet() const
{
    return m_parkingRangeRelationMetadata_.hasValue();
}

void ParkingFacilityRelationLayerMetadata::resetParkingRangeRelationMetadata()
{
    m_parkingRangeRelationMetadata_.reset();
}

::nds::venue::instantiations::ParkingPositionRelationMetadata& ParkingFacilityRelationLayerMetadata::getParkingPositionRelationMetadata()
{
    return m_parkingPositionRelationMetadata_.value();
}

const ::nds::venue::instantiations::ParkingPositionRelationMetadata& ParkingFacilityRelationLayerMetadata::getParkingPositionRelationMetadata() const
{
    return m_parkingPositionRelationMetadata_.value();
}

void ParkingFacilityRelationLayerMetadata::setParkingPositionRelationMetadata(const ::nds::venue::instantiations::ParkingPositionRelationMetadata& parkingPositionRelationMetadata_)
{
    m_parkingPositionRelationMetadata_ = parkingPositionRelationMetadata_;
}

void ParkingFacilityRelationLayerMetadata::setParkingPositionRelationMetadata(::nds::venue::instantiations::ParkingPositionRelationMetadata&& parkingPositionRelationMetadata_)
{
    m_parkingPositionRelationMetadata_ = ::std::move(parkingPositionRelationMetadata_);
}

bool ParkingFacilityRelationLayerMetadata::isParkingPositionRelationMetadataUsed() const
{
    return ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS);
}

bool ParkingFacilityRelationLayerMetadata::isParkingPositionRelationMetadataSet() const
{
    return m_parkingPositionRelationMetadata_.hasValue();
}

void ParkingFacilityRelationLayerMetadata::resetParkingPositionRelationMetadata()
{
    m_parkingPositionRelationMetadata_.reset();
}

::nds::venue::instantiations::ParkingRelationMetadata& ParkingFacilityRelationLayerMetadata::getParkingPoiRelationMetadata()
{
    return m_parkingPoiRelationMetadata_.value();
}

const ::nds::venue::instantiations::ParkingRelationMetadata& ParkingFacilityRelationLayerMetadata::getParkingPoiRelationMetadata() const
{
    return m_parkingPoiRelationMetadata_.value();
}

void ParkingFacilityRelationLayerMetadata::setParkingPoiRelationMetadata(const ::nds::venue::instantiations::ParkingRelationMetadata& parkingPoiRelationMetadata_)
{
    m_parkingPoiRelationMetadata_ = parkingPoiRelationMetadata_;
}

void ParkingFacilityRelationLayerMetadata::setParkingPoiRelationMetadata(::nds::venue::instantiations::ParkingRelationMetadata&& parkingPoiRelationMetadata_)
{
    m_parkingPoiRelationMetadata_ = ::std::move(parkingPoiRelationMetadata_);
}

bool ParkingFacilityRelationLayerMetadata::isParkingPoiRelationMetadataUsed() const
{
    return ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS);
}

bool ParkingFacilityRelationLayerMetadata::isParkingPoiRelationMetadataSet() const
{
    return m_parkingPoiRelationMetadata_.hasValue();
}

void ParkingFacilityRelationLayerMetadata::resetParkingPoiRelationMetadata()
{
    m_parkingPoiRelationMetadata_.reset();
}

void ParkingFacilityRelationLayerMetadata::initPackingContext(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        m_parkingRoadSurfaceRelationMetadata_.value().initPackingContext(context.getParkingRoadSurfaceRelationMetadata());
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_parkingRangeRelationMetadata_.value().initPackingContext(context.getParkingRangeRelationMetadata());
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        m_parkingPositionRelationMetadata_.value().initPackingContext(context.getParkingPositionRelationMetadata());
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        m_parkingPoiRelationMetadata_.value().initPackingContext(context.getParkingPoiRelationMetadata());
    }
}

size_t ParkingFacilityRelationLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        endBitPosition += m_parkingRoadSurfaceRelationMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_parkingRangeRelationMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_parkingPositionRelationMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        endBitPosition += m_parkingPoiRelationMetadata_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t ParkingFacilityRelationLayerMetadata::bitSizeOf(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        endBitPosition += m_parkingRoadSurfaceRelationMetadata_.value().bitSizeOf(context.getParkingRoadSurfaceRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_parkingRangeRelationMetadata_.value().bitSizeOf(context.getParkingRangeRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_parkingPositionRelationMetadata_.value().bitSizeOf(context.getParkingPositionRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        endBitPosition += m_parkingPoiRelationMetadata_.value().bitSizeOf(context.getParkingPoiRelationMetadata(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t ParkingFacilityRelationLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        endBitPosition = m_parkingRoadSurfaceRelationMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_parkingRangeRelationMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_parkingPositionRelationMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        endBitPosition = m_parkingPoiRelationMetadata_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t ParkingFacilityRelationLayerMetadata::initializeOffsets(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        endBitPosition = m_parkingRoadSurfaceRelationMetadata_.value().initializeOffsets(context.getParkingRoadSurfaceRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_parkingRangeRelationMetadata_.value().initializeOffsets(context.getParkingRangeRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_parkingPositionRelationMetadata_.value().initializeOffsets(context.getParkingPositionRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        endBitPosition = m_parkingPoiRelationMetadata_.value().initializeOffsets(context.getParkingPoiRelationMetadata(), endBitPosition);
    }

    return endBitPosition;
}

bool ParkingFacilityRelationLayerMetadata::operator==(const ParkingFacilityRelationLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isParkingRoadSurfaceRelationMetadataUsed() ? !other.isParkingRoadSurfaceRelationMetadataUsed() : (m_parkingRoadSurfaceRelationMetadata_ == other.m_parkingRoadSurfaceRelationMetadata_)) &&
                (!isParkingRangeRelationMetadataUsed() ? !other.isParkingRangeRelationMetadataUsed() : (m_parkingRangeRelationMetadata_ == other.m_parkingRangeRelationMetadata_)) &&
                (!isParkingPositionRelationMetadataUsed() ? !other.isParkingPositionRelationMetadataUsed() : (m_parkingPositionRelationMetadata_ == other.m_parkingPositionRelationMetadata_)) &&
                (!isParkingPoiRelationMetadataUsed() ? !other.isParkingPoiRelationMetadataUsed() : (m_parkingPoiRelationMetadata_ == other.m_parkingPoiRelationMetadata_));
    }

    return true;
}

uint32_t ParkingFacilityRelationLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isParkingRoadSurfaceRelationMetadataUsed())
        result = ::zserio::calcHashCode(result, m_parkingRoadSurfaceRelationMetadata_);
    if (isParkingRangeRelationMetadataUsed())
        result = ::zserio::calcHashCode(result, m_parkingRangeRelationMetadata_);
    if (isParkingPositionRelationMetadataUsed())
        result = ::zserio::calcHashCode(result, m_parkingPositionRelationMetadata_);
    if (isParkingPoiRelationMetadataUsed())
        result = ::zserio::calcHashCode(result, m_parkingPoiRelationMetadata_);

    return result;
}

void ParkingFacilityRelationLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        m_parkingRoadSurfaceRelationMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_parkingRangeRelationMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        m_parkingPositionRelationMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        m_parkingPoiRelationMetadata_.value().write(out);
    }
}

void ParkingFacilityRelationLayerMetadata::write(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        m_parkingRoadSurfaceRelationMetadata_.value().write(context.getParkingRoadSurfaceRelationMetadata(), out);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_parkingRangeRelationMetadata_.value().write(context.getParkingRangeRelationMetadata(), out);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        m_parkingPositionRelationMetadata_.value().write(context.getParkingPositionRelationMetadata(), out);
    }
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        m_parkingPoiRelationMetadata_.value().write(context.getParkingPoiRelationMetadata(), out);
    }
}

::nds::venue::metadata::ParkingFacilityRelationLayerContent ParkingFacilityRelationLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::venue::metadata::ParkingFacilityRelationLayerContent(in);
}

::nds::venue::metadata::ParkingFacilityRelationLayerContent ParkingFacilityRelationLayerMetadata::readContent(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::venue::metadata::ParkingFacilityRelationLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata> ParkingFacilityRelationLayerMetadata::readParkingRoadSurfaceRelationMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata>(::nds::venue::instantiations::ParkingRelationMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata> ParkingFacilityRelationLayerMetadata::readParkingRoadSurfaceRelationMetadata(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::ROAD_SURFACE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata>(::nds::venue::instantiations::ParkingRelationMetadata(context.getParkingRoadSurfaceRelationMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRangeRelationMetadata> ParkingFacilityRelationLayerMetadata::readParkingRangeRelationMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRangeRelationMetadata>(::nds::venue::instantiations::ParkingRangeRelationMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRangeRelationMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRangeRelationMetadata> ParkingFacilityRelationLayerMetadata::readParkingRangeRelationMetadata(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRangeRelationMetadata>(::nds::venue::instantiations::ParkingRangeRelationMetadata(context.getParkingRangeRelationMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRangeRelationMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPositionRelationMetadata> ParkingFacilityRelationLayerMetadata::readParkingPositionRelationMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPositionRelationMetadata>(::nds::venue::instantiations::ParkingPositionRelationMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPositionRelationMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPositionRelationMetadata> ParkingFacilityRelationLayerMetadata::readParkingPositionRelationMetadata(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPositionRelationMetadata>(::nds::venue::instantiations::ParkingPositionRelationMetadata(context.getParkingPositionRelationMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingPositionRelationMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata> ParkingFacilityRelationLayerMetadata::readParkingPoiRelationMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata>(::nds::venue::instantiations::ParkingRelationMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata> ParkingFacilityRelationLayerMetadata::readParkingPoiRelationMetadata(ParkingFacilityRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS) == ::nds::venue::metadata::ParkingFacilityRelationLayerContent::Values::POI_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata>(::nds::venue::instantiations::ParkingRelationMetadata(context.getParkingPoiRelationMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::venue::instantiations::ParkingRelationMetadata>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace venue
} // namespace nds
