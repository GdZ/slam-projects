/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>

#include <nds/search/services/SupportedFeature.h>

namespace nds
{
namespace search
{
namespace services
{

SupportedFeature::SupportedFeature(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

SupportedFeature::SupportedFeature(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

void SupportedFeature::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::StdIntArrayTraits<::nds::search::services::SupportedFeature::underlying_type>>(m_value);
}

size_t SupportedFeature::bitSizeOf(size_t) const
{
    return UINT8_C(8);
}

size_t SupportedFeature::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<::nds::search::services::SupportedFeature::underlying_type>>(m_value);
}

size_t SupportedFeature::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t SupportedFeature::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t SupportedFeature::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void SupportedFeature::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_value, UINT8_C(8));
}

void SupportedFeature::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::StdIntArrayTraits<::nds::search::services::SupportedFeature::underlying_type>>(out, m_value);
}

::zserio::string<> SupportedFeature::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & SupportedFeature::Values::ADDRESS) == SupportedFeature::Values::ADDRESS)
        result += result.empty() ? "ADDRESS" : " | ADDRESS";
    if ((*this & SupportedFeature::Values::POI) == SupportedFeature::Values::POI)
        result += result.empty() ? "POI" : " | POI";
    if ((*this & SupportedFeature::Values::NVC) == SupportedFeature::Values::NVC)
        result += result.empty() ? "NVC" : " | NVC";
    if ((*this & SupportedFeature::Values::SUGGESTIONS) == SupportedFeature::Values::SUGGESTIONS)
        result += result.empty() ? "SUGGESTIONS" : " | SUGGESTIONS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

SupportedFeature::underlying_type SupportedFeature::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readBits(UINT8_C(8)));
}

SupportedFeature::underlying_type SupportedFeature::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::StdIntArrayTraits<::nds::search::services::SupportedFeature::underlying_type>>(
            in);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/search/services/RequestOptions.h>

namespace nds
{
namespace search
{
namespace services
{

RequestOptions::RequestOptions(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RequestOptions::RequestOptions(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RequestOptions::RequestOptions(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RequestOptions' out of bounds: ") << value << "!";
}

void RequestOptions::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::search::services::RequestOptions::underlying_type>>(m_value);
}

size_t RequestOptions::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t RequestOptions::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::search::services::RequestOptions::underlying_type>>(m_value);
}

size_t RequestOptions::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RequestOptions::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RequestOptions::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RequestOptions::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void RequestOptions::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::search::services::RequestOptions::underlying_type>>(out, m_value);
}

::zserio::string<> RequestOptions::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RequestOptions::Values::PREFERRED_LANGUAGE) == RequestOptions::Values::PREFERRED_LANGUAGE)
        result += result.empty() ? "PREFERRED_LANGUAGE" : " | PREFERRED_LANGUAGE";
    if ((*this & RequestOptions::Values::SEARCH_AROUND) == RequestOptions::Values::SEARCH_AROUND)
        result += result.empty() ? "SEARCH_AROUND" : " | SEARCH_AROUND";
    if ((*this & RequestOptions::Values::SEARCH_ALONG) == RequestOptions::Values::SEARCH_ALONG)
        result += result.empty() ? "SEARCH_ALONG" : " | SEARCH_ALONG";
    if ((*this & RequestOptions::Values::SEARCH_IN_GEO_AREA) == RequestOptions::Values::SEARCH_IN_GEO_AREA)
        result += result.empty() ? "SEARCH_IN_GEO_AREA" : " | SEARCH_IN_GEO_AREA";
    if ((*this & RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == RequestOptions::Values::SEARCH_IN_ISO_COUNTRY)
        result += result.empty() ? "SEARCH_IN_ISO_COUNTRY" : " | SEARCH_IN_ISO_COUNTRY";
    if ((*this & RequestOptions::Values::MAX_RESPONSE) == RequestOptions::Values::MAX_RESPONSE)
        result += result.empty() ? "MAX_RESPONSE" : " | MAX_RESPONSE";
    if ((*this & RequestOptions::Values::RESULT_ORDER) == RequestOptions::Values::RESULT_ORDER)
        result += result.empty() ? "RESULT_ORDER" : " | RESULT_ORDER";
    if ((*this & RequestOptions::Values::POI_FILTER) == RequestOptions::Values::POI_FILTER)
        result += result.empty() ? "POI_FILTER" : " | POI_FILTER";
    if ((*this & RequestOptions::Values::ADDRESS_FILTER) == RequestOptions::Values::ADDRESS_FILTER)
        result += result.empty() ? "ADDRESS_FILTER" : " | ADDRESS_FILTER";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RequestOptions::underlying_type RequestOptions::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

RequestOptions::underlying_type RequestOptions::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::search::services::RequestOptions::underlying_type>>(
            in);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/search/services/GeocodingContentType.h>

namespace nds
{
namespace search
{
namespace services
{

GeocodingContentType::GeocodingContentType(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

GeocodingContentType::GeocodingContentType(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

GeocodingContentType::GeocodingContentType(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'GeocodingContentType' out of bounds: ") << value << "!";
}

void GeocodingContentType::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::search::services::GeocodingContentType::underlying_type>>(m_value);
}

size_t GeocodingContentType::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t GeocodingContentType::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::search::services::GeocodingContentType::underlying_type>>(m_value);
}

size_t GeocodingContentType::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t GeocodingContentType::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t GeocodingContentType::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void GeocodingContentType::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void GeocodingContentType::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::search::services::GeocodingContentType::underlying_type>>(out, m_value);
}

::zserio::string<> GeocodingContentType::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & GeocodingContentType::Values::ADDRESS_STRING) == GeocodingContentType::Values::ADDRESS_STRING)
        result += result.empty() ? "ADDRESS_STRING" : " | ADDRESS_STRING";
    if ((*this & GeocodingContentType::Values::ADDRESS_DETAILS) == GeocodingContentType::Values::ADDRESS_DETAILS)
        result += result.empty() ? "ADDRESS_DETAILS" : " | ADDRESS_DETAILS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

GeocodingContentType::underlying_type GeocodingContentType::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

GeocodingContentType::underlying_type GeocodingContentType::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::search::services::GeocodingContentType::underlying_type>>(
            in);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/search/services/GeocodingServiceMethods.h>

namespace nds
{
namespace search
{
namespace services
{

GeocodingServiceMethods::GeocodingServiceMethods(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

GeocodingServiceMethods::GeocodingServiceMethods(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

GeocodingServiceMethods::GeocodingServiceMethods(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'GeocodingServiceMethods' out of bounds: ") << value << "!";
}

void GeocodingServiceMethods::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::search::services::GeocodingServiceMethods::underlying_type>>(m_value);
}

size_t GeocodingServiceMethods::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t GeocodingServiceMethods::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::search::services::GeocodingServiceMethods::underlying_type>>(m_value);
}

size_t GeocodingServiceMethods::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t GeocodingServiceMethods::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t GeocodingServiceMethods::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void GeocodingServiceMethods::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void GeocodingServiceMethods::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::search::services::GeocodingServiceMethods::underlying_type>>(out, m_value);
}

::zserio::string<> GeocodingServiceMethods::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & GeocodingServiceMethods::Values::GEOCODE) == GeocodingServiceMethods::Values::GEOCODE)
        result += result.empty() ? "GEOCODE" : " | GEOCODE";
    if ((*this & GeocodingServiceMethods::Values::REVERSE_GEOCODE) == GeocodingServiceMethods::Values::REVERSE_GEOCODE)
        result += result.empty() ? "REVERSE_GEOCODE" : " | REVERSE_GEOCODE";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

GeocodingServiceMethods::underlying_type GeocodingServiceMethods::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

GeocodingServiceMethods::underlying_type GeocodingServiceMethods::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::search::services::GeocodingServiceMethods::underlying_type>>(
            in);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/search/services/SupportedSearchConfiguration.h>
#include <nds/search/services/RequestOptions.h>
#include <nds/search/services/SupportedFeature.h>

namespace nds
{
namespace search
{
namespace services
{

SupportedSearchConfiguration::SupportedSearchConfiguration(const allocator_type& allocator) noexcept :
        m_supportedFeatures_(::nds::search::services::SupportedFeature()),
        m_supportedRequestOptions_(::nds::search::services::RequestOptions()),
        m_supportedResultOrders_(::zserio::NullOpt),
        m_availableLanguages_(allocator),
        m_poiModuleDefinition_(::zserio::NullOpt),
        m_poiSearchMetadata_(::zserio::NullOpt),
        m_nameModuleDefinition_(::zserio::NullOpt),
        m_addressSearchMetadata_(::zserio::NullOpt)
{
}

SupportedSearchConfiguration::SupportedSearchConfiguration(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_supportedFeatures_(readSupportedFeatures(in)),
        m_supportedRequestOptions_(readSupportedRequestOptions(in)),
        m_supportedResultOrders_(readSupportedResultOrders(in)),
        m_availableLanguages_(readAvailableLanguages(in, allocator)),
        m_poiModuleDefinition_(readPoiModuleDefinition(in, allocator)),
        m_poiSearchMetadata_(readPoiSearchMetadata(in, allocator)),
        m_nameModuleDefinition_(readNameModuleDefinition(in, allocator)),
        m_addressSearchMetadata_(readAddressSearchMetadata(in, allocator))
{
}

SupportedSearchConfiguration::SupportedSearchConfiguration(SupportedSearchConfiguration::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_supportedFeatures_(readSupportedFeatures(context, in)),
        m_supportedRequestOptions_(readSupportedRequestOptions(context, in)),
        m_supportedResultOrders_(readSupportedResultOrders(context, in)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator)),
        m_poiModuleDefinition_(readPoiModuleDefinition(in, allocator)),
        m_poiSearchMetadata_(readPoiSearchMetadata(in, allocator)),
        m_nameModuleDefinition_(readNameModuleDefinition(in, allocator)),
        m_addressSearchMetadata_(readAddressSearchMetadata(in, allocator))
{
}

SupportedSearchConfiguration::SupportedSearchConfiguration(::zserio::PropagateAllocatorT,
        const SupportedSearchConfiguration& other, const allocator_type& allocator) :
        m_supportedFeatures_(::zserio::allocatorPropagatingCopy(other.m_supportedFeatures_, allocator)),
        m_supportedRequestOptions_(::zserio::allocatorPropagatingCopy(other.m_supportedRequestOptions_, allocator)),
        m_supportedResultOrders_(::zserio::allocatorPropagatingCopy(other.m_supportedResultOrders_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator)),
        m_poiModuleDefinition_(::zserio::allocatorPropagatingCopy(other.m_poiModuleDefinition_, allocator)),
        m_poiSearchMetadata_(::zserio::allocatorPropagatingCopy(other.m_poiSearchMetadata_, allocator)),
        m_nameModuleDefinition_(::zserio::allocatorPropagatingCopy(other.m_nameModuleDefinition_, allocator)),
        m_addressSearchMetadata_(::zserio::allocatorPropagatingCopy(other.m_addressSearchMetadata_, allocator))
{
}

::nds::search::services::SupportedFeature SupportedSearchConfiguration::getSupportedFeatures() const
{
    return m_supportedFeatures_;
}

void SupportedSearchConfiguration::setSupportedFeatures(::nds::search::services::SupportedFeature supportedFeatures_)
{
    m_supportedFeatures_ = supportedFeatures_;
}

::nds::search::services::RequestOptions SupportedSearchConfiguration::getSupportedRequestOptions() const
{
    return m_supportedRequestOptions_;
}

void SupportedSearchConfiguration::setSupportedRequestOptions(::nds::search::services::RequestOptions supportedRequestOptions_)
{
    m_supportedRequestOptions_ = supportedRequestOptions_;
}

::nds::search::types::ResultOrder SupportedSearchConfiguration::getSupportedResultOrders() const
{
    return m_supportedResultOrders_.value();
}

void SupportedSearchConfiguration::setSupportedResultOrders(::nds::search::types::ResultOrder supportedResultOrders_)
{
    m_supportedResultOrders_ = supportedResultOrders_;
}

bool SupportedSearchConfiguration::isSupportedResultOrdersUsed() const
{
    return ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER);
}

bool SupportedSearchConfiguration::isSupportedResultOrdersSet() const
{
    return m_supportedResultOrders_.hasValue();
}

void SupportedSearchConfiguration::resetSupportedResultOrders()
{
    m_supportedResultOrders_.reset();
}

::nds::core::language::AvailableLanguages& SupportedSearchConfiguration::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& SupportedSearchConfiguration::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void SupportedSearchConfiguration::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void SupportedSearchConfiguration::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

::nds::system::types::ModuleDefinition& SupportedSearchConfiguration::getPoiModuleDefinition()
{
    return m_poiModuleDefinition_.value();
}

const ::nds::system::types::ModuleDefinition& SupportedSearchConfiguration::getPoiModuleDefinition() const
{
    return m_poiModuleDefinition_.value();
}

void SupportedSearchConfiguration::setPoiModuleDefinition(const ::nds::system::types::ModuleDefinition& poiModuleDefinition_)
{
    m_poiModuleDefinition_ = poiModuleDefinition_;
}

void SupportedSearchConfiguration::setPoiModuleDefinition(::nds::system::types::ModuleDefinition&& poiModuleDefinition_)
{
    m_poiModuleDefinition_ = ::std::move(poiModuleDefinition_);
}

bool SupportedSearchConfiguration::isPoiModuleDefinitionUsed() const
{
    return ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI);
}

bool SupportedSearchConfiguration::isPoiModuleDefinitionSet() const
{
    return m_poiModuleDefinition_.hasValue();
}

void SupportedSearchConfiguration::resetPoiModuleDefinition()
{
    m_poiModuleDefinition_.reset();
}

::nds::system::types::ExternData& SupportedSearchConfiguration::getPoiSearchMetadata()
{
    return m_poiSearchMetadata_.value();
}

const ::nds::system::types::ExternData& SupportedSearchConfiguration::getPoiSearchMetadata() const
{
    return m_poiSearchMetadata_.value();
}

void SupportedSearchConfiguration::setPoiSearchMetadata(const ::nds::system::types::ExternData& poiSearchMetadata_)
{
    m_poiSearchMetadata_ = poiSearchMetadata_;
}

void SupportedSearchConfiguration::setPoiSearchMetadata(::nds::system::types::ExternData&& poiSearchMetadata_)
{
    m_poiSearchMetadata_ = ::std::move(poiSearchMetadata_);
}

bool SupportedSearchConfiguration::isPoiSearchMetadataUsed() const
{
    return ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI);
}

bool SupportedSearchConfiguration::isPoiSearchMetadataSet() const
{
    return m_poiSearchMetadata_.hasValue();
}

void SupportedSearchConfiguration::resetPoiSearchMetadata()
{
    m_poiSearchMetadata_.reset();
}

::nds::system::types::ModuleDefinition& SupportedSearchConfiguration::getNameModuleDefinition()
{
    return m_nameModuleDefinition_.value();
}

const ::nds::system::types::ModuleDefinition& SupportedSearchConfiguration::getNameModuleDefinition() const
{
    return m_nameModuleDefinition_.value();
}

void SupportedSearchConfiguration::setNameModuleDefinition(const ::nds::system::types::ModuleDefinition& nameModuleDefinition_)
{
    m_nameModuleDefinition_ = nameModuleDefinition_;
}

void SupportedSearchConfiguration::setNameModuleDefinition(::nds::system::types::ModuleDefinition&& nameModuleDefinition_)
{
    m_nameModuleDefinition_ = ::std::move(nameModuleDefinition_);
}

bool SupportedSearchConfiguration::isNameModuleDefinitionUsed() const
{
    return ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS);
}

bool SupportedSearchConfiguration::isNameModuleDefinitionSet() const
{
    return m_nameModuleDefinition_.hasValue();
}

void SupportedSearchConfiguration::resetNameModuleDefinition()
{
    m_nameModuleDefinition_.reset();
}

::nds::system::types::ExternData& SupportedSearchConfiguration::getAddressSearchMetadata()
{
    return m_addressSearchMetadata_.value();
}

const ::nds::system::types::ExternData& SupportedSearchConfiguration::getAddressSearchMetadata() const
{
    return m_addressSearchMetadata_.value();
}

void SupportedSearchConfiguration::setAddressSearchMetadata(const ::nds::system::types::ExternData& addressSearchMetadata_)
{
    m_addressSearchMetadata_ = addressSearchMetadata_;
}

void SupportedSearchConfiguration::setAddressSearchMetadata(::nds::system::types::ExternData&& addressSearchMetadata_)
{
    m_addressSearchMetadata_ = ::std::move(addressSearchMetadata_);
}

bool SupportedSearchConfiguration::isAddressSearchMetadataUsed() const
{
    return ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS);
}

bool SupportedSearchConfiguration::isAddressSearchMetadataSet() const
{
    return m_addressSearchMetadata_.hasValue();
}

void SupportedSearchConfiguration::resetAddressSearchMetadata()
{
    m_addressSearchMetadata_.reset();
}

void SupportedSearchConfiguration::initPackingContext(SupportedSearchConfiguration::ZserioPackingContext& context) const
{
    m_supportedFeatures_.initPackingContext(context.getSupportedFeatures());
    m_supportedRequestOptions_.initPackingContext(context.getSupportedRequestOptions());
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        m_supportedResultOrders_.value().initPackingContext(context.getSupportedResultOrders());
    }
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
}

size_t SupportedSearchConfiguration::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_supportedFeatures_.bitSizeOf(endBitPosition);
    endBitPosition += m_supportedRequestOptions_.bitSizeOf(endBitPosition);
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        endBitPosition += m_supportedResultOrders_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        endBitPosition += m_poiModuleDefinition_.value().bitSizeOf(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        endBitPosition += m_poiSearchMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        endBitPosition += m_nameModuleDefinition_.value().bitSizeOf(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        endBitPosition += m_addressSearchMetadata_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t SupportedSearchConfiguration::bitSizeOf(SupportedSearchConfiguration::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_supportedFeatures_.bitSizeOf(context.getSupportedFeatures(), endBitPosition);
    endBitPosition += m_supportedRequestOptions_.bitSizeOf(context.getSupportedRequestOptions(), endBitPosition);
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        endBitPosition += m_supportedResultOrders_.value().bitSizeOf(context.getSupportedResultOrders(), endBitPosition);
    }
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        endBitPosition += m_poiModuleDefinition_.value().bitSizeOf(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        endBitPosition += m_poiSearchMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        endBitPosition += m_nameModuleDefinition_.value().bitSizeOf(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        endBitPosition += m_addressSearchMetadata_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t SupportedSearchConfiguration::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_supportedFeatures_.initializeOffsets(endBitPosition);
    endBitPosition = m_supportedRequestOptions_.initializeOffsets(endBitPosition);
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        endBitPosition = m_supportedResultOrders_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        endBitPosition = m_poiModuleDefinition_.value().initializeOffsets(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        endBitPosition = m_poiSearchMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        endBitPosition = m_nameModuleDefinition_.value().initializeOffsets(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        endBitPosition = m_addressSearchMetadata_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t SupportedSearchConfiguration::initializeOffsets(SupportedSearchConfiguration::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_supportedFeatures_.initializeOffsets(context.getSupportedFeatures(), endBitPosition);
    endBitPosition = m_supportedRequestOptions_.initializeOffsets(context.getSupportedRequestOptions(), endBitPosition);
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        endBitPosition = m_supportedResultOrders_.value().initializeOffsets(context.getSupportedResultOrders(), endBitPosition);
    }
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        endBitPosition = m_poiModuleDefinition_.value().initializeOffsets(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        endBitPosition = m_poiSearchMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        endBitPosition = m_nameModuleDefinition_.value().initializeOffsets(endBitPosition);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        endBitPosition = m_addressSearchMetadata_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

bool SupportedSearchConfiguration::operator==(const SupportedSearchConfiguration& other) const
{
    if (this != &other)
    {
        return
                (m_supportedFeatures_ == other.m_supportedFeatures_) &&
                (m_supportedRequestOptions_ == other.m_supportedRequestOptions_) &&
                (!isSupportedResultOrdersUsed() ? !other.isSupportedResultOrdersUsed() : (m_supportedResultOrders_ == other.m_supportedResultOrders_)) &&
                (m_availableLanguages_ == other.m_availableLanguages_) &&
                (!isPoiModuleDefinitionUsed() ? !other.isPoiModuleDefinitionUsed() : (m_poiModuleDefinition_ == other.m_poiModuleDefinition_)) &&
                (!isPoiSearchMetadataUsed() ? !other.isPoiSearchMetadataUsed() : (m_poiSearchMetadata_ == other.m_poiSearchMetadata_)) &&
                (!isNameModuleDefinitionUsed() ? !other.isNameModuleDefinitionUsed() : (m_nameModuleDefinition_ == other.m_nameModuleDefinition_)) &&
                (!isAddressSearchMetadataUsed() ? !other.isAddressSearchMetadataUsed() : (m_addressSearchMetadata_ == other.m_addressSearchMetadata_));
    }

    return true;
}

uint32_t SupportedSearchConfiguration::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_supportedFeatures_);
    result = ::zserio::calcHashCode(result, m_supportedRequestOptions_);
    if (isSupportedResultOrdersUsed())
        result = ::zserio::calcHashCode(result, m_supportedResultOrders_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);
    if (isPoiModuleDefinitionUsed())
        result = ::zserio::calcHashCode(result, m_poiModuleDefinition_);
    if (isPoiSearchMetadataUsed())
        result = ::zserio::calcHashCode(result, m_poiSearchMetadata_);
    if (isNameModuleDefinitionUsed())
        result = ::zserio::calcHashCode(result, m_nameModuleDefinition_);
    if (isAddressSearchMetadataUsed())
        result = ::zserio::calcHashCode(result, m_addressSearchMetadata_);

    return result;
}

void SupportedSearchConfiguration::write(::zserio::BitStreamWriter& out) const
{
    m_supportedFeatures_.write(out);
    m_supportedRequestOptions_.write(out);
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        m_supportedResultOrders_.value().write(out);
    }
    m_availableLanguages_.write(out);
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        m_poiModuleDefinition_.value().write(out);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        m_poiSearchMetadata_.value().write(out);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        m_nameModuleDefinition_.value().write(out);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        m_addressSearchMetadata_.value().write(out);
    }
}

void SupportedSearchConfiguration::write(SupportedSearchConfiguration::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_supportedFeatures_.write(context.getSupportedFeatures(), out);
    m_supportedRequestOptions_.write(context.getSupportedRequestOptions(), out);
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        m_supportedResultOrders_.value().write(context.getSupportedResultOrders(), out);
    }
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        m_poiModuleDefinition_.value().write(out);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        m_poiSearchMetadata_.value().write(out);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        m_nameModuleDefinition_.value().write(out);
    }
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        m_addressSearchMetadata_.value().write(out);
    }
}

::nds::search::services::SupportedFeature SupportedSearchConfiguration::readSupportedFeatures(::zserio::BitStreamReader& in)
{
    return ::nds::search::services::SupportedFeature(in);
}

::nds::search::services::SupportedFeature SupportedSearchConfiguration::readSupportedFeatures(SupportedSearchConfiguration::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::search::services::SupportedFeature(context.getSupportedFeatures(), in);
}
::nds::search::services::RequestOptions SupportedSearchConfiguration::readSupportedRequestOptions(::zserio::BitStreamReader& in)
{
    return ::nds::search::services::RequestOptions(in);
}

::nds::search::services::RequestOptions SupportedSearchConfiguration::readSupportedRequestOptions(SupportedSearchConfiguration::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::search::services::RequestOptions(context.getSupportedRequestOptions(), in);
}
::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder> SupportedSearchConfiguration::readSupportedResultOrders(::zserio::BitStreamReader& in)
{
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder>(::nds::search::types::ResultOrder(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder> SupportedSearchConfiguration::readSupportedResultOrders(SupportedSearchConfiguration::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if ((getSupportedRequestOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder>(::nds::search::types::ResultOrder(context.getSupportedResultOrders(), in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder>(::zserio::NullOpt);
}
::nds::core::language::AvailableLanguages SupportedSearchConfiguration::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages SupportedSearchConfiguration::readAvailableLanguages(SupportedSearchConfiguration::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}
::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition> SupportedSearchConfiguration::readPoiModuleDefinition(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        return ::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition>(::nds::system::types::ModuleDefinition(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> SupportedSearchConfiguration::readPoiSearchMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::POI) == ::nds::search::services::SupportedFeature::Values::POI)
    {
        return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::nds::system::types::ExternData(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition> SupportedSearchConfiguration::readNameModuleDefinition(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition>(::nds::system::types::ModuleDefinition(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> SupportedSearchConfiguration::readAddressSearchMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getSupportedFeatures() & ::nds::search::services::SupportedFeature::Values::ADDRESS) == ::nds::search::services::SupportedFeature::Values::ADDRESS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::nds::system::types::ExternData(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::zserio::NullOpt);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/search/services/GeneralSearchRequest.h>
#include <nds/search/services/RequestOptions.h>

namespace nds
{
namespace search
{
namespace services
{

GeneralSearchRequest::GeneralSearchRequest(const allocator_type& allocator) noexcept :
        m_options_(::nds::search::services::RequestOptions()),
        m_term_(allocator),
        m_preferredLanguage_(::zserio::NullOpt),
        m_aroundSearchDetails_(::zserio::NullOpt),
        m_alongSearchDetails_(::zserio::NullOpt),
        m_inAreaSearchDetails_(::zserio::NullOpt),
        m_isoCountryCode_(::zserio::NullOpt),
        m_maxResponseCount_(::zserio::NullOpt),
        m_order_(::zserio::NullOpt),
        m_poiFilter_(::zserio::NullOpt),
        m_addressFilter_(::zserio::NullOpt)
{
}

GeneralSearchRequest::GeneralSearchRequest(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_options_(readOptions(in)),
        m_term_(readTerm(in, allocator)),
        m_preferredLanguage_(readPreferredLanguage(in)),
        m_aroundSearchDetails_(readAroundSearchDetails(in, allocator)),
        m_alongSearchDetails_(readAlongSearchDetails(in, allocator)),
        m_inAreaSearchDetails_(readInAreaSearchDetails(in, allocator)),
        m_isoCountryCode_(readIsoCountryCode(in, allocator)),
        m_maxResponseCount_(readMaxResponseCount(in)),
        m_order_(readOrder(in)),
        m_poiFilter_(readPoiFilter(in, allocator)),
        m_addressFilter_(readAddressFilter(in, allocator))
{
}

GeneralSearchRequest::GeneralSearchRequest(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_options_(readOptions(context, in)),
        m_term_(readTerm(in, allocator)),
        m_preferredLanguage_(readPreferredLanguage(context, in)),
        m_aroundSearchDetails_(readAroundSearchDetails(context, in, allocator)),
        m_alongSearchDetails_(readAlongSearchDetails(context, in, allocator)),
        m_inAreaSearchDetails_(readInAreaSearchDetails(context, in, allocator)),
        m_isoCountryCode_(readIsoCountryCode(in, allocator)),
        m_maxResponseCount_(readMaxResponseCount(context, in)),
        m_order_(readOrder(context, in)),
        m_poiFilter_(readPoiFilter(in, allocator)),
        m_addressFilter_(readAddressFilter(in, allocator))
{
}

GeneralSearchRequest::GeneralSearchRequest(::zserio::PropagateAllocatorT,
        const GeneralSearchRequest& other, const allocator_type& allocator) :
        m_options_(::zserio::allocatorPropagatingCopy(other.m_options_, allocator)),
        m_term_(::zserio::allocatorPropagatingCopy(other.m_term_, allocator)),
        m_preferredLanguage_(::zserio::allocatorPropagatingCopy(other.m_preferredLanguage_, allocator)),
        m_aroundSearchDetails_(::zserio::allocatorPropagatingCopy(other.m_aroundSearchDetails_, allocator)),
        m_alongSearchDetails_(::zserio::allocatorPropagatingCopy(other.m_alongSearchDetails_, allocator)),
        m_inAreaSearchDetails_(::zserio::allocatorPropagatingCopy(other.m_inAreaSearchDetails_, allocator)),
        m_isoCountryCode_(::zserio::allocatorPropagatingCopy(other.m_isoCountryCode_, allocator)),
        m_maxResponseCount_(::zserio::allocatorPropagatingCopy(other.m_maxResponseCount_, allocator)),
        m_order_(::zserio::allocatorPropagatingCopy(other.m_order_, allocator)),
        m_poiFilter_(::zserio::allocatorPropagatingCopy(other.m_poiFilter_, allocator)),
        m_addressFilter_(::zserio::allocatorPropagatingCopy(other.m_addressFilter_, allocator))
{
}

void GeneralSearchRequest::initializeChildren()
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
        m_aroundSearchDetails_.value().initializeChildren();
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
        m_alongSearchDetails_.value().initializeChildren();
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
        m_inAreaSearchDetails_.value().initializeChildren();
}

::nds::search::services::RequestOptions GeneralSearchRequest::getOptions() const
{
    return m_options_;
}

void GeneralSearchRequest::setOptions(::nds::search::services::RequestOptions options_)
{
    m_options_ = options_;
}

::zserio::string<>& GeneralSearchRequest::getTerm()
{
    return m_term_;
}

const ::zserio::string<>& GeneralSearchRequest::getTerm() const
{
    return m_term_;
}

void GeneralSearchRequest::setTerm(const ::zserio::string<>& term_)
{
    m_term_ = term_;
}

void GeneralSearchRequest::setTerm(::zserio::string<>&& term_)
{
    m_term_ = ::std::move(term_);
}

::nds::core::types::LanguageCode GeneralSearchRequest::getPreferredLanguage() const
{
    return m_preferredLanguage_.value();
}

void GeneralSearchRequest::setPreferredLanguage(::nds::core::types::LanguageCode preferredLanguage_)
{
    m_preferredLanguage_ = preferredLanguage_;
}

bool GeneralSearchRequest::isPreferredLanguageUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE);
}

bool GeneralSearchRequest::isPreferredLanguageSet() const
{
    return m_preferredLanguage_.hasValue();
}

void GeneralSearchRequest::resetPreferredLanguage()
{
    m_preferredLanguage_.reset();
}

::nds::search::services::AroundPositionSearchRequestDetails& GeneralSearchRequest::getAroundSearchDetails()
{
    return m_aroundSearchDetails_.value();
}

const ::nds::search::services::AroundPositionSearchRequestDetails& GeneralSearchRequest::getAroundSearchDetails() const
{
    return m_aroundSearchDetails_.value();
}

void GeneralSearchRequest::setAroundSearchDetails(const ::nds::search::services::AroundPositionSearchRequestDetails& aroundSearchDetails_)
{
    m_aroundSearchDetails_ = aroundSearchDetails_;
}

void GeneralSearchRequest::setAroundSearchDetails(::nds::search::services::AroundPositionSearchRequestDetails&& aroundSearchDetails_)
{
    m_aroundSearchDetails_ = ::std::move(aroundSearchDetails_);
}

bool GeneralSearchRequest::isAroundSearchDetailsUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND);
}

bool GeneralSearchRequest::isAroundSearchDetailsSet() const
{
    return m_aroundSearchDetails_.hasValue();
}

void GeneralSearchRequest::resetAroundSearchDetails()
{
    m_aroundSearchDetails_.reset();
}

::nds::search::services::AlongPathSearchRequestDetails& GeneralSearchRequest::getAlongSearchDetails()
{
    return m_alongSearchDetails_.value();
}

const ::nds::search::services::AlongPathSearchRequestDetails& GeneralSearchRequest::getAlongSearchDetails() const
{
    return m_alongSearchDetails_.value();
}

void GeneralSearchRequest::setAlongSearchDetails(const ::nds::search::services::AlongPathSearchRequestDetails& alongSearchDetails_)
{
    m_alongSearchDetails_ = alongSearchDetails_;
}

void GeneralSearchRequest::setAlongSearchDetails(::nds::search::services::AlongPathSearchRequestDetails&& alongSearchDetails_)
{
    m_alongSearchDetails_ = ::std::move(alongSearchDetails_);
}

bool GeneralSearchRequest::isAlongSearchDetailsUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG);
}

bool GeneralSearchRequest::isAlongSearchDetailsSet() const
{
    return m_alongSearchDetails_.hasValue();
}

void GeneralSearchRequest::resetAlongSearchDetails()
{
    m_alongSearchDetails_.reset();
}

::nds::core::geometry::SpatialExtent& GeneralSearchRequest::getInAreaSearchDetails()
{
    return m_inAreaSearchDetails_.value();
}

const ::nds::core::geometry::SpatialExtent& GeneralSearchRequest::getInAreaSearchDetails() const
{
    return m_inAreaSearchDetails_.value();
}

void GeneralSearchRequest::setInAreaSearchDetails(const ::nds::core::geometry::SpatialExtent& inAreaSearchDetails_)
{
    m_inAreaSearchDetails_ = inAreaSearchDetails_;
}

void GeneralSearchRequest::setInAreaSearchDetails(::nds::core::geometry::SpatialExtent&& inAreaSearchDetails_)
{
    m_inAreaSearchDetails_ = ::std::move(inAreaSearchDetails_);
}

bool GeneralSearchRequest::isInAreaSearchDetailsUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA);
}

bool GeneralSearchRequest::isInAreaSearchDetailsSet() const
{
    return m_inAreaSearchDetails_.hasValue();
}

void GeneralSearchRequest::resetInAreaSearchDetails()
{
    m_inAreaSearchDetails_.reset();
}

::nds::core::types::IsoCountryCode& GeneralSearchRequest::getIsoCountryCode()
{
    return m_isoCountryCode_.value();
}

const ::nds::core::types::IsoCountryCode& GeneralSearchRequest::getIsoCountryCode() const
{
    return m_isoCountryCode_.value();
}

void GeneralSearchRequest::setIsoCountryCode(const ::nds::core::types::IsoCountryCode& isoCountryCode_)
{
    m_isoCountryCode_ = isoCountryCode_;
}

void GeneralSearchRequest::setIsoCountryCode(::nds::core::types::IsoCountryCode&& isoCountryCode_)
{
    m_isoCountryCode_ = ::std::move(isoCountryCode_);
}

bool GeneralSearchRequest::isIsoCountryCodeUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY);
}

bool GeneralSearchRequest::isIsoCountryCodeSet() const
{
    return m_isoCountryCode_.hasValue();
}

void GeneralSearchRequest::resetIsoCountryCode()
{
    m_isoCountryCode_.reset();
}

uint64_t GeneralSearchRequest::getMaxResponseCount() const
{
    return m_maxResponseCount_.value();
}

void GeneralSearchRequest::setMaxResponseCount(uint64_t maxResponseCount_)
{
    m_maxResponseCount_ = maxResponseCount_;
}

bool GeneralSearchRequest::isMaxResponseCountUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE);
}

bool GeneralSearchRequest::isMaxResponseCountSet() const
{
    return m_maxResponseCount_.hasValue();
}

void GeneralSearchRequest::resetMaxResponseCount()
{
    m_maxResponseCount_.reset();
}

::nds::search::types::ResultOrder GeneralSearchRequest::getOrder() const
{
    return m_order_.value();
}

void GeneralSearchRequest::setOrder(::nds::search::types::ResultOrder order_)
{
    m_order_ = order_;
}

bool GeneralSearchRequest::isOrderUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER);
}

bool GeneralSearchRequest::isOrderSet() const
{
    return m_order_.hasValue();
}

void GeneralSearchRequest::resetOrder()
{
    m_order_.reset();
}

::nds::system::types::ExternData& GeneralSearchRequest::getPoiFilter()
{
    return m_poiFilter_.value();
}

const ::nds::system::types::ExternData& GeneralSearchRequest::getPoiFilter() const
{
    return m_poiFilter_.value();
}

void GeneralSearchRequest::setPoiFilter(const ::nds::system::types::ExternData& poiFilter_)
{
    m_poiFilter_ = poiFilter_;
}

void GeneralSearchRequest::setPoiFilter(::nds::system::types::ExternData&& poiFilter_)
{
    m_poiFilter_ = ::std::move(poiFilter_);
}

bool GeneralSearchRequest::isPoiFilterUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::POI_FILTER) == ::nds::search::services::RequestOptions::Values::POI_FILTER);
}

bool GeneralSearchRequest::isPoiFilterSet() const
{
    return m_poiFilter_.hasValue();
}

void GeneralSearchRequest::resetPoiFilter()
{
    m_poiFilter_.reset();
}

::nds::system::types::ExternData& GeneralSearchRequest::getAddressFilter()
{
    return m_addressFilter_.value();
}

const ::nds::system::types::ExternData& GeneralSearchRequest::getAddressFilter() const
{
    return m_addressFilter_.value();
}

void GeneralSearchRequest::setAddressFilter(const ::nds::system::types::ExternData& addressFilter_)
{
    m_addressFilter_ = addressFilter_;
}

void GeneralSearchRequest::setAddressFilter(::nds::system::types::ExternData&& addressFilter_)
{
    m_addressFilter_ = ::std::move(addressFilter_);
}

bool GeneralSearchRequest::isAddressFilterUsed() const
{
    return ((getOptions() & ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER) == ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER);
}

bool GeneralSearchRequest::isAddressFilterSet() const
{
    return m_addressFilter_.hasValue();
}

void GeneralSearchRequest::resetAddressFilter()
{
    m_addressFilter_.reset();
}

void GeneralSearchRequest::initPackingContext(GeneralSearchRequest::ZserioPackingContext& context) const
{
    m_options_.initPackingContext(context.getOptions());
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        context.getPreferredLanguage().init<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_preferredLanguage_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        m_aroundSearchDetails_.value().initPackingContext(context.getAroundSearchDetails());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        m_alongSearchDetails_.value().initPackingContext(context.getAlongSearchDetails());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        m_inAreaSearchDetails_.value().initPackingContext(context.getInAreaSearchDetails());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        context.getMaxResponseCount().init<::zserio::VarIntArrayTraits<uint64_t>>(m_maxResponseCount_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        m_order_.value().initPackingContext(context.getOrder());
    }
}

size_t GeneralSearchRequest::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_options_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfString(m_term_);
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_preferredLanguage_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        endBitPosition += m_aroundSearchDetails_.value().bitSizeOf(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        endBitPosition += m_alongSearchDetails_.value().bitSizeOf(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        endBitPosition += m_inAreaSearchDetails_.value().bitSizeOf(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_isoCountryCode_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_maxResponseCount_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        endBitPosition += m_order_.value().bitSizeOf(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::POI_FILTER) == ::nds::search::services::RequestOptions::Values::POI_FILTER)
    {
        endBitPosition += m_poiFilter_.value().bitSizeOf(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER) == ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER)
    {
        endBitPosition += m_addressFilter_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t GeneralSearchRequest::bitSizeOf(GeneralSearchRequest::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_options_.bitSizeOf(context.getOptions(), endBitPosition);
    endBitPosition += ::zserio::bitSizeOfString(m_term_);
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        endBitPosition += context.getPreferredLanguage().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_preferredLanguage_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        endBitPosition += m_aroundSearchDetails_.value().bitSizeOf(context.getAroundSearchDetails(), endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        endBitPosition += m_alongSearchDetails_.value().bitSizeOf(context.getAlongSearchDetails(), endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        endBitPosition += m_inAreaSearchDetails_.value().bitSizeOf(context.getInAreaSearchDetails(), endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_isoCountryCode_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        endBitPosition += context.getMaxResponseCount().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_maxResponseCount_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        endBitPosition += m_order_.value().bitSizeOf(context.getOrder(), endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::POI_FILTER) == ::nds::search::services::RequestOptions::Values::POI_FILTER)
    {
        endBitPosition += m_poiFilter_.value().bitSizeOf(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER) == ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER)
    {
        endBitPosition += m_addressFilter_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t GeneralSearchRequest::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_options_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfString(m_term_);
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_preferredLanguage_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        endBitPosition = m_aroundSearchDetails_.value().initializeOffsets(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        endBitPosition = m_alongSearchDetails_.value().initializeOffsets(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        endBitPosition = m_inAreaSearchDetails_.value().initializeOffsets(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_isoCountryCode_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_maxResponseCount_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        endBitPosition = m_order_.value().initializeOffsets(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::POI_FILTER) == ::nds::search::services::RequestOptions::Values::POI_FILTER)
    {
        endBitPosition = m_poiFilter_.value().initializeOffsets(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER) == ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER)
    {
        endBitPosition = m_addressFilter_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t GeneralSearchRequest::initializeOffsets(GeneralSearchRequest::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_options_.initializeOffsets(context.getOptions(), endBitPosition);
    endBitPosition += ::zserio::bitSizeOfString(m_term_);
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        endBitPosition += context.getPreferredLanguage().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_preferredLanguage_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        endBitPosition = m_aroundSearchDetails_.value().initializeOffsets(context.getAroundSearchDetails(), endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        endBitPosition = m_alongSearchDetails_.value().initializeOffsets(context.getAlongSearchDetails(), endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        endBitPosition = m_inAreaSearchDetails_.value().initializeOffsets(context.getInAreaSearchDetails(), endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_isoCountryCode_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        endBitPosition += context.getMaxResponseCount().bitSizeOf<::zserio::VarIntArrayTraits<uint64_t>>(m_maxResponseCount_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        endBitPosition = m_order_.value().initializeOffsets(context.getOrder(), endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::POI_FILTER) == ::nds::search::services::RequestOptions::Values::POI_FILTER)
    {
        endBitPosition = m_poiFilter_.value().initializeOffsets(endBitPosition);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER) == ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER)
    {
        endBitPosition = m_addressFilter_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

bool GeneralSearchRequest::operator==(const GeneralSearchRequest& other) const
{
    if (this != &other)
    {
        return
                (m_options_ == other.m_options_) &&
                (m_term_ == other.m_term_) &&
                (!isPreferredLanguageUsed() ? !other.isPreferredLanguageUsed() : (m_preferredLanguage_ == other.m_preferredLanguage_)) &&
                (!isAroundSearchDetailsUsed() ? !other.isAroundSearchDetailsUsed() : (m_aroundSearchDetails_ == other.m_aroundSearchDetails_)) &&
                (!isAlongSearchDetailsUsed() ? !other.isAlongSearchDetailsUsed() : (m_alongSearchDetails_ == other.m_alongSearchDetails_)) &&
                (!isInAreaSearchDetailsUsed() ? !other.isInAreaSearchDetailsUsed() : (m_inAreaSearchDetails_ == other.m_inAreaSearchDetails_)) &&
                (!isIsoCountryCodeUsed() ? !other.isIsoCountryCodeUsed() : (m_isoCountryCode_ == other.m_isoCountryCode_)) &&
                (!isMaxResponseCountUsed() ? !other.isMaxResponseCountUsed() : (m_maxResponseCount_ == other.m_maxResponseCount_)) &&
                (!isOrderUsed() ? !other.isOrderUsed() : (m_order_ == other.m_order_)) &&
                (!isPoiFilterUsed() ? !other.isPoiFilterUsed() : (m_poiFilter_ == other.m_poiFilter_)) &&
                (!isAddressFilterUsed() ? !other.isAddressFilterUsed() : (m_addressFilter_ == other.m_addressFilter_));
    }

    return true;
}

uint32_t GeneralSearchRequest::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_options_);
    result = ::zserio::calcHashCode(result, m_term_);
    if (isPreferredLanguageUsed())
        result = ::zserio::calcHashCode(result, m_preferredLanguage_);
    if (isAroundSearchDetailsUsed())
        result = ::zserio::calcHashCode(result, m_aroundSearchDetails_);
    if (isAlongSearchDetailsUsed())
        result = ::zserio::calcHashCode(result, m_alongSearchDetails_);
    if (isInAreaSearchDetailsUsed())
        result = ::zserio::calcHashCode(result, m_inAreaSearchDetails_);
    if (isIsoCountryCodeUsed())
        result = ::zserio::calcHashCode(result, m_isoCountryCode_);
    if (isMaxResponseCountUsed())
        result = ::zserio::calcHashCode(result, m_maxResponseCount_);
    if (isOrderUsed())
        result = ::zserio::calcHashCode(result, m_order_);
    if (isPoiFilterUsed())
        result = ::zserio::calcHashCode(result, m_poiFilter_);
    if (isAddressFilterUsed())
        result = ::zserio::calcHashCode(result, m_addressFilter_);

    return result;
}

void GeneralSearchRequest::write(::zserio::BitStreamWriter& out) const
{
    m_options_.write(out);
    out.writeString(m_term_);
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        out.writeVarUInt16(m_preferredLanguage_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        m_aroundSearchDetails_.value().write(out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        m_alongSearchDetails_.value().write(out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        m_inAreaSearchDetails_.value().write(out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY)
    {
        out.writeString(m_isoCountryCode_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        out.writeVarUInt(m_maxResponseCount_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        m_order_.value().write(out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::POI_FILTER) == ::nds::search::services::RequestOptions::Values::POI_FILTER)
    {
        m_poiFilter_.value().write(out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER) == ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER)
    {
        m_addressFilter_.value().write(out);
    }
}

void GeneralSearchRequest::write(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_options_.write(context.getOptions(), out);
    out.writeString(m_term_);
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        context.getPreferredLanguage().write<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(out, m_preferredLanguage_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        m_aroundSearchDetails_.value().write(context.getAroundSearchDetails(), out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        m_alongSearchDetails_.value().write(context.getAlongSearchDetails(), out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        m_inAreaSearchDetails_.value().write(context.getInAreaSearchDetails(), out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY)
    {
        out.writeString(m_isoCountryCode_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        context.getMaxResponseCount().write<::zserio::VarIntArrayTraits<uint64_t>>(out, m_maxResponseCount_.value());
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        m_order_.value().write(context.getOrder(), out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::POI_FILTER) == ::nds::search::services::RequestOptions::Values::POI_FILTER)
    {
        m_poiFilter_.value().write(out);
    }
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER) == ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER)
    {
        m_addressFilter_.value().write(out);
    }
}

::nds::search::services::RequestOptions GeneralSearchRequest::readOptions(::zserio::BitStreamReader& in)
{
    return ::nds::search::services::RequestOptions(in);
}

::nds::search::services::RequestOptions GeneralSearchRequest::readOptions(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::search::services::RequestOptions(context.getOptions(), in);
}
::zserio::string<> GeneralSearchRequest::readTerm(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::string<>>(in.readString(allocator));
}
::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode> GeneralSearchRequest::readPreferredLanguage(::zserio::BitStreamReader& in)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode>(static_cast<::nds::core::types::LanguageCode>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode> GeneralSearchRequest::readPreferredLanguage(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE) == ::nds::search::services::RequestOptions::Values::PREFERRED_LANGUAGE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode>(context.getPreferredLanguage().read<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::search::services::AroundPositionSearchRequestDetails> GeneralSearchRequest::readAroundSearchDetails(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::services::AroundPositionSearchRequestDetails>(::nds::search::services::AroundPositionSearchRequestDetails(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::services::AroundPositionSearchRequestDetails>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::search::services::AroundPositionSearchRequestDetails> GeneralSearchRequest::readAroundSearchDetails(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_AROUND) == ::nds::search::services::RequestOptions::Values::SEARCH_AROUND)
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::services::AroundPositionSearchRequestDetails>(::nds::search::services::AroundPositionSearchRequestDetails(context.getAroundSearchDetails(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::services::AroundPositionSearchRequestDetails>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::search::services::AlongPathSearchRequestDetails> GeneralSearchRequest::readAlongSearchDetails(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::services::AlongPathSearchRequestDetails>(::nds::search::services::AlongPathSearchRequestDetails(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::services::AlongPathSearchRequestDetails>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::search::services::AlongPathSearchRequestDetails> GeneralSearchRequest::readAlongSearchDetails(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_ALONG) == ::nds::search::services::RequestOptions::Values::SEARCH_ALONG)
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::services::AlongPathSearchRequestDetails>(::nds::search::services::AlongPathSearchRequestDetails(context.getAlongSearchDetails(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::services::AlongPathSearchRequestDetails>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::geometry::SpatialExtent> GeneralSearchRequest::readInAreaSearchDetails(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::SpatialExtent>(::nds::core::geometry::SpatialExtent(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::SpatialExtent>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::geometry::SpatialExtent> GeneralSearchRequest::readInAreaSearchDetails(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_GEO_AREA)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::SpatialExtent>(::nds::core::geometry::SpatialExtent(context.getInAreaSearchDetails(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::SpatialExtent>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::IsoCountryCode> GeneralSearchRequest::readIsoCountryCode(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY) == ::nds::search::services::RequestOptions::Values::SEARCH_IN_ISO_COUNTRY)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::IsoCountryCode>(static_cast<::nds::core::types::IsoCountryCode>(in.readString(allocator)));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::IsoCountryCode>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<uint64_t> GeneralSearchRequest::readMaxResponseCount(::zserio::BitStreamReader& in)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(static_cast<uint64_t>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint64_t> GeneralSearchRequest::readMaxResponseCount(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::MAX_RESPONSE) == ::nds::search::services::RequestOptions::Values::MAX_RESPONSE)
    {
        return ::zserio::InplaceOptionalHolder<uint64_t>(context.getMaxResponseCount().read<::zserio::VarIntArrayTraits<uint64_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint64_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder> GeneralSearchRequest::readOrder(::zserio::BitStreamReader& in)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder>(::nds::search::types::ResultOrder(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder> GeneralSearchRequest::readOrder(GeneralSearchRequest::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::RESULT_ORDER) == ::nds::search::services::RequestOptions::Values::RESULT_ORDER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder>(::nds::search::types::ResultOrder(context.getOrder(), in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::types::ResultOrder>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> GeneralSearchRequest::readPoiFilter(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::POI_FILTER) == ::nds::search::services::RequestOptions::Values::POI_FILTER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::nds::system::types::ExternData(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> GeneralSearchRequest::readAddressFilter(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getOptions() & ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER) == ::nds::search::services::RequestOptions::Values::ADDRESS_FILTER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::nds::system::types::ExternData(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::zserio::NullOpt);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/services/AroundPositionSearchRequestDetails.h>

namespace nds
{
namespace search
{
namespace services
{

AroundPositionSearchRequestDetails::AroundPositionSearchRequestDetails(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_origin_(allocator),
        m_maxDistance_(::zserio::NullOpt)
{
}

AroundPositionSearchRequestDetails::AroundPositionSearchRequestDetails(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_origin_(readOrigin(in, allocator)),
        m_maxDistance_(readMaxDistance(in))
{
}

AroundPositionSearchRequestDetails::AroundPositionSearchRequestDetails(AroundPositionSearchRequestDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_origin_(readOrigin(context, in, allocator)),
        m_maxDistance_(readMaxDistance(context, in))
{
}

AroundPositionSearchRequestDetails::AroundPositionSearchRequestDetails(const AroundPositionSearchRequestDetails& other) :
        m_origin_(other.m_origin_),
        m_maxDistance_(other.m_maxDistance_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

AroundPositionSearchRequestDetails& AroundPositionSearchRequestDetails::operator=(const AroundPositionSearchRequestDetails& other)
{
    m_origin_ = other.m_origin_;
    m_maxDistance_ = other.m_maxDistance_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

AroundPositionSearchRequestDetails::AroundPositionSearchRequestDetails(AroundPositionSearchRequestDetails&& other) :
        m_origin_(::std::move(other.m_origin_)),
        m_maxDistance_(::std::move(other.m_maxDistance_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

AroundPositionSearchRequestDetails& AroundPositionSearchRequestDetails::operator=(AroundPositionSearchRequestDetails&& other)
{
    m_origin_ = ::std::move(other.m_origin_);
    m_maxDistance_ = ::std::move(other.m_maxDistance_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

AroundPositionSearchRequestDetails::AroundPositionSearchRequestDetails(::zserio::PropagateAllocatorT,
        const AroundPositionSearchRequestDetails& other, const allocator_type& allocator) :
        m_origin_(::zserio::allocatorPropagatingCopy(other.m_origin_, allocator)),
        m_maxDistance_(::zserio::allocatorPropagatingCopy(other.m_maxDistance_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void AroundPositionSearchRequestDetails::initializeChildren()
{
    m_origin_.initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::core::geometry::Position2D& AroundPositionSearchRequestDetails::getOrigin()
{
    return m_origin_;
}

const ::nds::core::geometry::Position2D& AroundPositionSearchRequestDetails::getOrigin() const
{
    return m_origin_;
}

void AroundPositionSearchRequestDetails::setOrigin(const ::nds::core::geometry::Position2D& origin_)
{
    m_origin_ = origin_;
}

void AroundPositionSearchRequestDetails::setOrigin(::nds::core::geometry::Position2D&& origin_)
{
    m_origin_ = ::std::move(origin_);
}

::nds::core::types::DistanceMeters AroundPositionSearchRequestDetails::getMaxDistance() const
{
    return m_maxDistance_.value();
}

void AroundPositionSearchRequestDetails::setMaxDistance(::nds::core::types::DistanceMeters maxDistance_)
{
    m_maxDistance_ = maxDistance_;
}

bool AroundPositionSearchRequestDetails::isMaxDistanceUsed() const
{
    return (isMaxDistanceSet());
}

bool AroundPositionSearchRequestDetails::isMaxDistanceSet() const
{
    return m_maxDistance_.hasValue();
}

void AroundPositionSearchRequestDetails::resetMaxDistance()
{
    m_maxDistance_.reset();
}

void AroundPositionSearchRequestDetails::initPackingContext(AroundPositionSearchRequestDetails::ZserioPackingContext& context) const
{
    m_origin_.initPackingContext(context.getOrigin());
    if (isMaxDistanceSet())
    {
        context.getMaxDistance().init<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_maxDistance_.value());
    }
}

size_t AroundPositionSearchRequestDetails::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_origin_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isMaxDistanceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_maxDistance_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AroundPositionSearchRequestDetails::bitSizeOf(AroundPositionSearchRequestDetails::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_origin_.bitSizeOf(context.getOrigin(), endBitPosition);
    endBitPosition += 1;
    if (isMaxDistanceSet())
    {
        endBitPosition += context.getMaxDistance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_maxDistance_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AroundPositionSearchRequestDetails::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_origin_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isMaxDistanceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_maxDistance_.value());
    }

    return endBitPosition;
}

size_t AroundPositionSearchRequestDetails::initializeOffsets(AroundPositionSearchRequestDetails::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_origin_.initializeOffsets(context.getOrigin(), endBitPosition);
    endBitPosition += 1;
    if (isMaxDistanceSet())
    {
        endBitPosition += context.getMaxDistance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_maxDistance_.value());
    }

    return endBitPosition;
}

bool AroundPositionSearchRequestDetails::operator==(const AroundPositionSearchRequestDetails& other) const
{
    if (this != &other)
    {
        return
                (m_origin_ == other.m_origin_) &&
                (!isMaxDistanceUsed() ? !other.isMaxDistanceUsed() : (m_maxDistance_ == other.m_maxDistance_));
    }

    return true;
}

uint32_t AroundPositionSearchRequestDetails::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_origin_);
    if (isMaxDistanceUsed())
        result = ::zserio::calcHashCode(result, m_maxDistance_);

    return result;
}

void AroundPositionSearchRequestDetails::write(::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_origin_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field AroundPositionSearchRequestDetails.origin: ") <<
                m_origin_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_origin_.write(out);

    if (isMaxDistanceSet())
    {
        out.writeBool(true);
        out.writeVarUInt32(m_maxDistance_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

void AroundPositionSearchRequestDetails::write(AroundPositionSearchRequestDetails::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_origin_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field AroundPositionSearchRequestDetails.origin: ") <<
                m_origin_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_origin_.write(context.getOrigin(), out);

    if (isMaxDistanceSet())
    {
        out.writeBool(true);
        context.getMaxDistance().write<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(out, m_maxDistance_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

::nds::core::geometry::Position2D AroundPositionSearchRequestDetails::readOrigin(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}

::nds::core::geometry::Position2D AroundPositionSearchRequestDetails::readOrigin(AroundPositionSearchRequestDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(context.getOrigin(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}
::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> AroundPositionSearchRequestDetails::readMaxDistance(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(static_cast<::nds::core::types::DistanceMeters>(in.readVarUInt32()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> AroundPositionSearchRequestDetails::readMaxDistance(AroundPositionSearchRequestDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(context.getMaxDistance().read<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(::zserio::NullOpt);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/services/AlongPathSearchRequestDetails.h>

namespace nds
{
namespace search
{
namespace services
{

AlongPathSearchRequestDetails::AlongPathSearchRequestDetails(const allocator_type& allocator) noexcept :
        m_path_(allocator),
        m_maxTravelDistance_(::zserio::NullOpt)
{
}

AlongPathSearchRequestDetails::AlongPathSearchRequestDetails(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_path_(readPath(in, allocator)),
        m_maxTravelDistance_(readMaxTravelDistance(in))
{
}

AlongPathSearchRequestDetails::AlongPathSearchRequestDetails(AlongPathSearchRequestDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_path_(readPath(context, in, allocator)),
        m_maxTravelDistance_(readMaxTravelDistance(context, in))
{
}

AlongPathSearchRequestDetails::AlongPathSearchRequestDetails(::zserio::PropagateAllocatorT,
        const AlongPathSearchRequestDetails& other, const allocator_type& allocator) :
        m_path_(::zserio::allocatorPropagatingCopy(other.m_path_, allocator)),
        m_maxTravelDistance_(::zserio::allocatorPropagatingCopy(other.m_maxTravelDistance_, allocator))
{
}

void AlongPathSearchRequestDetails::initializeChildren()
{
    m_path_.initializeChildren();
}

::nds::core::location::RoadLocationPath& AlongPathSearchRequestDetails::getPath()
{
    return m_path_;
}

const ::nds::core::location::RoadLocationPath& AlongPathSearchRequestDetails::getPath() const
{
    return m_path_;
}

void AlongPathSearchRequestDetails::setPath(const ::nds::core::location::RoadLocationPath& path_)
{
    m_path_ = path_;
}

void AlongPathSearchRequestDetails::setPath(::nds::core::location::RoadLocationPath&& path_)
{
    m_path_ = ::std::move(path_);
}

::nds::core::types::DistanceMeters AlongPathSearchRequestDetails::getMaxTravelDistance() const
{
    return m_maxTravelDistance_.value();
}

void AlongPathSearchRequestDetails::setMaxTravelDistance(::nds::core::types::DistanceMeters maxTravelDistance_)
{
    m_maxTravelDistance_ = maxTravelDistance_;
}

bool AlongPathSearchRequestDetails::isMaxTravelDistanceUsed() const
{
    return (isMaxTravelDistanceSet());
}

bool AlongPathSearchRequestDetails::isMaxTravelDistanceSet() const
{
    return m_maxTravelDistance_.hasValue();
}

void AlongPathSearchRequestDetails::resetMaxTravelDistance()
{
    m_maxTravelDistance_.reset();
}

void AlongPathSearchRequestDetails::initPackingContext(AlongPathSearchRequestDetails::ZserioPackingContext& context) const
{
    m_path_.initPackingContext(context.getPath());
    if (isMaxTravelDistanceSet())
    {
        context.getMaxTravelDistance().init<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_maxTravelDistance_.value());
    }
}

size_t AlongPathSearchRequestDetails::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_path_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isMaxTravelDistanceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_maxTravelDistance_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AlongPathSearchRequestDetails::bitSizeOf(AlongPathSearchRequestDetails::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_path_.bitSizeOf(context.getPath(), endBitPosition);
    endBitPosition += 1;
    if (isMaxTravelDistanceSet())
    {
        endBitPosition += context.getMaxTravelDistance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_maxTravelDistance_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AlongPathSearchRequestDetails::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_path_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isMaxTravelDistanceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_maxTravelDistance_.value());
    }

    return endBitPosition;
}

size_t AlongPathSearchRequestDetails::initializeOffsets(AlongPathSearchRequestDetails::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_path_.initializeOffsets(context.getPath(), endBitPosition);
    endBitPosition += 1;
    if (isMaxTravelDistanceSet())
    {
        endBitPosition += context.getMaxTravelDistance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_maxTravelDistance_.value());
    }

    return endBitPosition;
}

bool AlongPathSearchRequestDetails::operator==(const AlongPathSearchRequestDetails& other) const
{
    if (this != &other)
    {
        return
                (m_path_ == other.m_path_) &&
                (!isMaxTravelDistanceUsed() ? !other.isMaxTravelDistanceUsed() : (m_maxTravelDistance_ == other.m_maxTravelDistance_));
    }

    return true;
}

uint32_t AlongPathSearchRequestDetails::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_path_);
    if (isMaxTravelDistanceUsed())
        result = ::zserio::calcHashCode(result, m_maxTravelDistance_);

    return result;
}

void AlongPathSearchRequestDetails::write(::zserio::BitStreamWriter& out) const
{
    m_path_.write(out);
    if (isMaxTravelDistanceSet())
    {
        out.writeBool(true);
        out.writeVarUInt32(m_maxTravelDistance_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

void AlongPathSearchRequestDetails::write(AlongPathSearchRequestDetails::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_path_.write(context.getPath(), out);
    if (isMaxTravelDistanceSet())
    {
        out.writeBool(true);
        context.getMaxTravelDistance().write<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(out, m_maxTravelDistance_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

::nds::core::location::RoadLocationPath AlongPathSearchRequestDetails::readPath(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::location::RoadLocationPath(in, allocator);
}

::nds::core::location::RoadLocationPath AlongPathSearchRequestDetails::readPath(AlongPathSearchRequestDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::location::RoadLocationPath(context.getPath(), in, allocator);
}
::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> AlongPathSearchRequestDetails::readMaxTravelDistance(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(static_cast<::nds::core::types::DistanceMeters>(in.readVarUInt32()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> AlongPathSearchRequestDetails::readMaxTravelDistance(AlongPathSearchRequestDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(context.getMaxTravelDistance().read<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(::zserio::NullOpt);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/services/GeneralSearchResponse.h>

namespace nds
{
namespace search
{
namespace services
{

GeneralSearchResponse::GeneralSearchResponse(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_hasDistanceInfo_(bool()),
        m_suggestionList_(::zserio::NullOpt),
        m_nvcList_(::zserio::NullOpt),
        m_numResults_(uint32_t()),
        m_results_(allocator)
{
}

GeneralSearchResponse::GeneralSearchResponse(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_hasDistanceInfo_(readHasDistanceInfo(in)),
        m_suggestionList_(readSuggestionList(in, allocator)),
        m_nvcList_(readNvcList(in, allocator)),
        m_numResults_(readNumResults(in)),
        m_results_(readResults(in, allocator))
{
}

GeneralSearchResponse::GeneralSearchResponse(GeneralSearchResponse::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_hasDistanceInfo_(readHasDistanceInfo(in)),
        m_suggestionList_(readSuggestionList(in, allocator)),
        m_nvcList_(readNvcList(in, allocator)),
        m_numResults_(readNumResults(context, in)),
        m_results_(readResults(context, in, allocator))
{
}

GeneralSearchResponse::GeneralSearchResponse(const GeneralSearchResponse& other) :
        m_hasDistanceInfo_(other.m_hasDistanceInfo_),
        m_suggestionList_(other.m_suggestionList_),
        m_nvcList_(other.m_nvcList_),
        m_numResults_(other.m_numResults_),
        m_results_(other.m_results_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

GeneralSearchResponse& GeneralSearchResponse::operator=(const GeneralSearchResponse& other)
{
    m_hasDistanceInfo_ = other.m_hasDistanceInfo_;
    m_suggestionList_ = other.m_suggestionList_;
    m_nvcList_ = other.m_nvcList_;
    m_numResults_ = other.m_numResults_;
    m_results_ = other.m_results_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

GeneralSearchResponse::GeneralSearchResponse(GeneralSearchResponse&& other) :
        m_hasDistanceInfo_(::std::move(other.m_hasDistanceInfo_)),
        m_suggestionList_(::std::move(other.m_suggestionList_)),
        m_nvcList_(::std::move(other.m_nvcList_)),
        m_numResults_(::std::move(other.m_numResults_)),
        m_results_(::std::move(other.m_results_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

GeneralSearchResponse& GeneralSearchResponse::operator=(GeneralSearchResponse&& other)
{
    m_hasDistanceInfo_ = ::std::move(other.m_hasDistanceInfo_);
    m_suggestionList_ = ::std::move(other.m_suggestionList_);
    m_nvcList_ = ::std::move(other.m_nvcList_);
    m_numResults_ = ::std::move(other.m_numResults_);
    m_results_ = ::std::move(other.m_results_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

GeneralSearchResponse::GeneralSearchResponse(::zserio::PropagateAllocatorT,
        const GeneralSearchResponse& other, const allocator_type& allocator) :
        m_hasDistanceInfo_(::zserio::allocatorPropagatingCopy(other.m_hasDistanceInfo_, allocator)),
        m_suggestionList_(::zserio::allocatorPropagatingCopy(other.m_suggestionList_, allocator)),
        m_nvcList_(::zserio::allocatorPropagatingCopy(other.m_nvcList_, allocator)),
        m_numResults_(::zserio::allocatorPropagatingCopy(other.m_numResults_, allocator)),
        m_results_(::zserio::allocatorPropagatingCopy(other.m_results_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void GeneralSearchResponse::initializeChildren()
{
    m_results_.initializeElements(*this);

    m_areChildrenInitialized = true;
}

bool GeneralSearchResponse::getHasDistanceInfo() const
{
    return m_hasDistanceInfo_;
}

void GeneralSearchResponse::setHasDistanceInfo(bool hasDistanceInfo_)
{
    m_hasDistanceInfo_ = hasDistanceInfo_;
}

::nds::search::types::Suggestions& GeneralSearchResponse::getSuggestionList()
{
    return m_suggestionList_.value();
}

const ::nds::search::types::Suggestions& GeneralSearchResponse::getSuggestionList() const
{
    return m_suggestionList_.value();
}

void GeneralSearchResponse::setSuggestionList(const ::nds::search::types::Suggestions& suggestionList_)
{
    m_suggestionList_ = suggestionList_;
}

void GeneralSearchResponse::setSuggestionList(::nds::search::types::Suggestions&& suggestionList_)
{
    m_suggestionList_ = ::std::move(suggestionList_);
}

bool GeneralSearchResponse::isSuggestionListUsed() const
{
    return (isSuggestionListSet());
}

bool GeneralSearchResponse::isSuggestionListSet() const
{
    return m_suggestionList_.hasValue();
}

void GeneralSearchResponse::resetSuggestionList()
{
    m_suggestionList_.reset();
}

::nds::search::types::NextValidCharacterList& GeneralSearchResponse::getNvcList()
{
    return m_nvcList_.value();
}

const ::nds::search::types::NextValidCharacterList& GeneralSearchResponse::getNvcList() const
{
    return m_nvcList_.value();
}

void GeneralSearchResponse::setNvcList(const ::nds::search::types::NextValidCharacterList& nvcList_)
{
    m_nvcList_ = nvcList_;
}

void GeneralSearchResponse::setNvcList(::nds::search::types::NextValidCharacterList&& nvcList_)
{
    m_nvcList_ = ::std::move(nvcList_);
}

bool GeneralSearchResponse::isNvcListUsed() const
{
    return (isNvcListSet());
}

bool GeneralSearchResponse::isNvcListSet() const
{
    return m_nvcList_.hasValue();
}

void GeneralSearchResponse::resetNvcList()
{
    m_nvcList_.reset();
}

uint32_t GeneralSearchResponse::getNumResults() const
{
    return m_numResults_;
}

void GeneralSearchResponse::setNumResults(uint32_t numResults_)
{
    m_numResults_ = numResults_;
}

::zserio::vector<::nds::search::types::SearchResult>& GeneralSearchResponse::getResults()
{
    return m_results_.getRawArray();
}

const ::zserio::vector<::nds::search::types::SearchResult>& GeneralSearchResponse::getResults() const
{
    return m_results_.getRawArray();
}

void GeneralSearchResponse::setResults(const ::zserio::vector<::nds::search::types::SearchResult>& results_)
{
    m_results_ = ZserioArrayType_results(results_);
}

void GeneralSearchResponse::setResults(::zserio::vector<::nds::search::types::SearchResult>&& results_)
{
    m_results_ = ZserioArrayType_results(std::move(results_));
}

void GeneralSearchResponse::initPackingContext(GeneralSearchResponse::ZserioPackingContext& context) const
{
    context.getNumResults().init<::zserio::VarIntNNArrayTraits<uint32_t>>(m_numResults_);
}

size_t GeneralSearchResponse::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += 1;
    if (isSuggestionListSet())
    {
        endBitPosition += m_suggestionList_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += 1;
    if (isNvcListSet())
    {
        endBitPosition += m_nvcList_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_numResults_);
    endBitPosition += m_results_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t GeneralSearchResponse::bitSizeOf(GeneralSearchResponse::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += 1;
    if (isSuggestionListSet())
    {
        endBitPosition += m_suggestionList_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += 1;
    if (isNvcListSet())
    {
        endBitPosition += m_nvcList_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += context.getNumResults().bitSizeOf<::zserio::VarIntNNArrayTraits<uint32_t>>(m_numResults_);
    endBitPosition += m_results_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t GeneralSearchResponse::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += 1;
    if (isSuggestionListSet())
    {
        endBitPosition = m_suggestionList_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition += 1;
    if (isNvcListSet())
    {
        endBitPosition = m_nvcList_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_numResults_);
    endBitPosition = m_results_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t GeneralSearchResponse::initializeOffsets(GeneralSearchResponse::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += 1;
    if (isSuggestionListSet())
    {
        endBitPosition = m_suggestionList_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition += 1;
    if (isNvcListSet())
    {
        endBitPosition = m_nvcList_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition += context.getNumResults().bitSizeOf<::zserio::VarIntNNArrayTraits<uint32_t>>(m_numResults_);
    endBitPosition = m_results_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool GeneralSearchResponse::operator==(const GeneralSearchResponse& other) const
{
    if (this != &other)
    {
        return
                (m_hasDistanceInfo_ == other.m_hasDistanceInfo_) &&
                (!isSuggestionListUsed() ? !other.isSuggestionListUsed() : (m_suggestionList_ == other.m_suggestionList_)) &&
                (!isNvcListUsed() ? !other.isNvcListUsed() : (m_nvcList_ == other.m_nvcList_)) &&
                (m_numResults_ == other.m_numResults_) &&
                (m_results_ == other.m_results_);
    }

    return true;
}

uint32_t GeneralSearchResponse::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_hasDistanceInfo_);
    if (isSuggestionListUsed())
        result = ::zserio::calcHashCode(result, m_suggestionList_);
    if (isNvcListUsed())
        result = ::zserio::calcHashCode(result, m_nvcList_);
    result = ::zserio::calcHashCode(result, m_numResults_);
    result = ::zserio::calcHashCode(result, m_results_);

    return result;
}

void GeneralSearchResponse::write(::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_hasDistanceInfo_);

    if (isSuggestionListSet())
    {
        out.writeBool(true);
        m_suggestionList_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }

    if (isNvcListSet())
    {
        out.writeBool(true);
        m_nvcList_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }

    out.writeVarUInt32(m_numResults_);

    // check array length
    if (m_results_.getRawArray().size() != static_cast<size_t>(getNumResults()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field GeneralSearchResponse.results: ") <<
                m_results_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumResults()) << "!";
    }
    m_results_.write(*this, out);
}

void GeneralSearchResponse::write(GeneralSearchResponse::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_hasDistanceInfo_);

    if (isSuggestionListSet())
    {
        out.writeBool(true);
        m_suggestionList_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }

    if (isNvcListSet())
    {
        out.writeBool(true);
        m_nvcList_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }

    context.getNumResults().write<::zserio::VarIntNNArrayTraits<uint32_t>>(out, m_numResults_);

    // check array length
    if (m_results_.getRawArray().size() != static_cast<size_t>(getNumResults()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field GeneralSearchResponse.results: ") <<
                m_results_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumResults()) << "!";
    }
    m_results_.writePacked(*this, out);
}

void GeneralSearchResponse::ZserioArrayExpressions_results::initializeElement(GeneralSearchResponse& owner,
        ::nds::search::types::SearchResult& element, size_t)
{
    element.initialize(static_cast<bool>(owner.getHasDistanceInfo()));
}

void GeneralSearchResponse::ZserioElementFactory_results::create(GeneralSearchResponse&         owner,
        ::zserio::vector<::nds::search::types::SearchResult>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, static_cast<bool>(owner.getHasDistanceInfo()), array.get_allocator());
}

void GeneralSearchResponse::ZserioElementFactory_results::create(GeneralSearchResponse&         owner,
        ::zserio::vector<::nds::search::types::SearchResult>& array,
        ::nds::search::types::SearchResult::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, static_cast<bool>(owner.getHasDistanceInfo()), array.get_allocator());
}

bool GeneralSearchResponse::readHasDistanceInfo(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
::zserio::InplaceOptionalHolder<::nds::search::types::Suggestions> GeneralSearchResponse::readSuggestionList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::types::Suggestions>(::nds::search::types::Suggestions(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::types::Suggestions>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::search::types::NextValidCharacterList> GeneralSearchResponse::readNvcList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::search::types::NextValidCharacterList>(::nds::search::types::NextValidCharacterList(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::search::types::NextValidCharacterList>(::zserio::NullOpt);
}
uint32_t GeneralSearchResponse::readNumResults(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarUInt32());
}

uint32_t GeneralSearchResponse::readNumResults(GeneralSearchResponse::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumResults().read<::zserio::VarIntNNArrayTraits<uint32_t>>(in);
}
GeneralSearchResponse::ZserioArrayType_results GeneralSearchResponse::readResults(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_results readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumResults()));

    return readField;
}

GeneralSearchResponse::ZserioArrayType_results GeneralSearchResponse::readResults(GeneralSearchResponse::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_results readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumResults()));

    return readField;
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/services/GeocodingPosition.h>

namespace nds
{
namespace search
{
namespace services
{

GeocodingPosition::GeocodingPosition(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_position_(allocator)
{
}

GeocodingPosition::GeocodingPosition(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_position_(readPosition(in, allocator))
{
}

GeocodingPosition::GeocodingPosition(GeocodingPosition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_position_(readPosition(context, in, allocator))
{
}

GeocodingPosition::GeocodingPosition(const GeocodingPosition& other) :
        m_position_(other.m_position_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

GeocodingPosition& GeocodingPosition::operator=(const GeocodingPosition& other)
{
    m_position_ = other.m_position_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

GeocodingPosition::GeocodingPosition(GeocodingPosition&& other) :
        m_position_(::std::move(other.m_position_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

GeocodingPosition& GeocodingPosition::operator=(GeocodingPosition&& other)
{
    m_position_ = ::std::move(other.m_position_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

GeocodingPosition::GeocodingPosition(::zserio::PropagateAllocatorT,
        const GeocodingPosition& other, const allocator_type& allocator) :
        m_position_(::zserio::allocatorPropagatingCopy(other.m_position_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void GeocodingPosition::initializeChildren()
{
    m_position_.initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::core::geometry::Position2D& GeocodingPosition::getPosition()
{
    return m_position_;
}

const ::nds::core::geometry::Position2D& GeocodingPosition::getPosition() const
{
    return m_position_;
}

void GeocodingPosition::setPosition(const ::nds::core::geometry::Position2D& position_)
{
    m_position_ = position_;
}

void GeocodingPosition::setPosition(::nds::core::geometry::Position2D&& position_)
{
    m_position_ = ::std::move(position_);
}

void GeocodingPosition::initPackingContext(GeocodingPosition::ZserioPackingContext& context) const
{
    m_position_.initPackingContext(context.getPosition());
}

size_t GeocodingPosition::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_position_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t GeocodingPosition::bitSizeOf(GeocodingPosition::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_position_.bitSizeOf(context.getPosition(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t GeocodingPosition::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_position_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t GeocodingPosition::initializeOffsets(GeocodingPosition::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_position_.initializeOffsets(context.getPosition(), endBitPosition);

    return endBitPosition;
}

bool GeocodingPosition::operator==(const GeocodingPosition& other) const
{
    if (this != &other)
    {
        return
                (m_position_ == other.m_position_);
    }

    return true;
}

uint32_t GeocodingPosition::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_position_);

    return result;
}

void GeocodingPosition::write(::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_position_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field GeocodingPosition.position: ") <<
                m_position_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_position_.write(out);
}

void GeocodingPosition::write(GeocodingPosition::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_position_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field GeocodingPosition.position: ") <<
                m_position_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_position_.write(context.getPosition(), out);
}

::nds::core::geometry::Position2D GeocodingPosition::readPosition(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}

::nds::core::geometry::Position2D GeocodingPosition::readPosition(GeocodingPosition::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(context.getPosition(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/search/services/GeocodingAddress.h>
#include <nds/search/services/GeocodingContentType.h>

namespace nds
{
namespace search
{
namespace services
{

GeocodingAddress::GeocodingAddress(const allocator_type&) noexcept :
        m_content_(::nds::search::services::GeocodingContentType()),
        m_addressString_(::zserio::NullOpt),
        m_addressDetails_(::zserio::NullOpt)
{
}

GeocodingAddress::GeocodingAddress(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_addressString_(readAddressString(in, allocator)),
        m_addressDetails_(readAddressDetails(in, allocator))
{
}

GeocodingAddress::GeocodingAddress(GeocodingAddress::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_addressString_(readAddressString(in, allocator)),
        m_addressDetails_(readAddressDetails(in, allocator))
{
}

GeocodingAddress::GeocodingAddress(::zserio::PropagateAllocatorT,
        const GeocodingAddress& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_addressString_(::zserio::allocatorPropagatingCopy(other.m_addressString_, allocator)),
        m_addressDetails_(::zserio::allocatorPropagatingCopy(other.m_addressDetails_, allocator))
{
}

::nds::search::services::GeocodingContentType GeocodingAddress::getContent() const
{
    return m_content_;
}

void GeocodingAddress::setContent(::nds::search::services::GeocodingContentType content_)
{
    m_content_ = content_;
}

::zserio::string<>& GeocodingAddress::getAddressString()
{
    return m_addressString_.value();
}

const ::zserio::string<>& GeocodingAddress::getAddressString() const
{
    return m_addressString_.value();
}

void GeocodingAddress::setAddressString(const ::zserio::string<>& addressString_)
{
    m_addressString_ = addressString_;
}

void GeocodingAddress::setAddressString(::zserio::string<>&& addressString_)
{
    m_addressString_ = ::std::move(addressString_);
}

bool GeocodingAddress::isAddressStringUsed() const
{
    return ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING);
}

bool GeocodingAddress::isAddressStringSet() const
{
    return m_addressString_.hasValue();
}

void GeocodingAddress::resetAddressString()
{
    m_addressString_.reset();
}

::nds::system::types::ExternData& GeocodingAddress::getAddressDetails()
{
    return m_addressDetails_.value();
}

const ::nds::system::types::ExternData& GeocodingAddress::getAddressDetails() const
{
    return m_addressDetails_.value();
}

void GeocodingAddress::setAddressDetails(const ::nds::system::types::ExternData& addressDetails_)
{
    m_addressDetails_ = addressDetails_;
}

void GeocodingAddress::setAddressDetails(::nds::system::types::ExternData&& addressDetails_)
{
    m_addressDetails_ = ::std::move(addressDetails_);
}

bool GeocodingAddress::isAddressDetailsUsed() const
{
    return ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS);
}

bool GeocodingAddress::isAddressDetailsSet() const
{
    return m_addressDetails_.hasValue();
}

void GeocodingAddress::resetAddressDetails()
{
    m_addressDetails_.reset();
}

void GeocodingAddress::initPackingContext(GeocodingAddress::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
}

size_t GeocodingAddress::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_addressString_.value());
    }
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS)
    {
        endBitPosition += m_addressDetails_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t GeocodingAddress::bitSizeOf(GeocodingAddress::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_addressString_.value());
    }
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS)
    {
        endBitPosition += m_addressDetails_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t GeocodingAddress::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_addressString_.value());
    }
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS)
    {
        endBitPosition = m_addressDetails_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t GeocodingAddress::initializeOffsets(GeocodingAddress::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_addressString_.value());
    }
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS)
    {
        endBitPosition = m_addressDetails_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

bool GeocodingAddress::operator==(const GeocodingAddress& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isAddressStringUsed() ? !other.isAddressStringUsed() : (m_addressString_ == other.m_addressString_)) &&
                (!isAddressDetailsUsed() ? !other.isAddressDetailsUsed() : (m_addressDetails_ == other.m_addressDetails_));
    }

    return true;
}

uint32_t GeocodingAddress::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isAddressStringUsed())
        result = ::zserio::calcHashCode(result, m_addressString_);
    if (isAddressDetailsUsed())
        result = ::zserio::calcHashCode(result, m_addressDetails_);

    return result;
}

void GeocodingAddress::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING)
    {
        out.writeString(m_addressString_.value());
    }
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS)
    {
        m_addressDetails_.value().write(out);
    }
}

void GeocodingAddress::write(GeocodingAddress::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING)
    {
        out.writeString(m_addressString_.value());
    }
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS)
    {
        m_addressDetails_.value().write(out);
    }
}

::nds::search::services::GeocodingContentType GeocodingAddress::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::search::services::GeocodingContentType(in);
}

::nds::search::services::GeocodingContentType GeocodingAddress::readContent(GeocodingAddress::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::search::services::GeocodingContentType(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::zserio::string<>> GeocodingAddress::readAddressString(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_STRING)
    {
        return ::zserio::InplaceOptionalHolder<::zserio::string<>>(static_cast<::zserio::string<>>(in.readString(allocator)));
    }

    return ::zserio::InplaceOptionalHolder<::zserio::string<>>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> GeocodingAddress::readAddressDetails(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS) == ::nds::search::services::GeocodingContentType::Values::ADDRESS_DETAILS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::nds::system::types::ExternData(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::zserio::NullOpt);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/services/GeocodingServiceCapabilities.h>

namespace nds
{
namespace search
{
namespace services
{

GeocodingServiceCapabilities::GeocodingServiceCapabilities(const allocator_type&) noexcept :
        m_implementedMethods_(::nds::search::services::GeocodingServiceMethods())
{
}

GeocodingServiceCapabilities::GeocodingServiceCapabilities(::zserio::BitStreamReader& in, const allocator_type&) :
        m_implementedMethods_(readImplementedMethods(in))
{
}

GeocodingServiceCapabilities::GeocodingServiceCapabilities(GeocodingServiceCapabilities::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_implementedMethods_(readImplementedMethods(context, in))
{
}

GeocodingServiceCapabilities::GeocodingServiceCapabilities(::zserio::PropagateAllocatorT,
        const GeocodingServiceCapabilities& other, const allocator_type& allocator) :
        m_implementedMethods_(::zserio::allocatorPropagatingCopy(other.m_implementedMethods_, allocator))
{
}

::nds::search::services::GeocodingServiceMethods GeocodingServiceCapabilities::getImplementedMethods() const
{
    return m_implementedMethods_;
}

void GeocodingServiceCapabilities::setImplementedMethods(::nds::search::services::GeocodingServiceMethods implementedMethods_)
{
    m_implementedMethods_ = implementedMethods_;
}

void GeocodingServiceCapabilities::initPackingContext(GeocodingServiceCapabilities::ZserioPackingContext& context) const
{
    m_implementedMethods_.initPackingContext(context.getImplementedMethods());
}

size_t GeocodingServiceCapabilities::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_implementedMethods_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t GeocodingServiceCapabilities::bitSizeOf(GeocodingServiceCapabilities::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_implementedMethods_.bitSizeOf(context.getImplementedMethods(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t GeocodingServiceCapabilities::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_implementedMethods_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t GeocodingServiceCapabilities::initializeOffsets(GeocodingServiceCapabilities::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_implementedMethods_.initializeOffsets(context.getImplementedMethods(), endBitPosition);

    return endBitPosition;
}

bool GeocodingServiceCapabilities::operator==(const GeocodingServiceCapabilities& other) const
{
    if (this != &other)
    {
        return
                (m_implementedMethods_ == other.m_implementedMethods_);
    }

    return true;
}

uint32_t GeocodingServiceCapabilities::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_implementedMethods_);

    return result;
}

void GeocodingServiceCapabilities::write(::zserio::BitStreamWriter& out) const
{
    m_implementedMethods_.write(out);
}

void GeocodingServiceCapabilities::write(GeocodingServiceCapabilities::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_implementedMethods_.write(context.getImplementedMethods(), out);
}

::nds::search::services::GeocodingServiceMethods GeocodingServiceCapabilities::readImplementedMethods(::zserio::BitStreamReader& in)
{
    return ::nds::search::services::GeocodingServiceMethods(in);
}

::nds::search::services::GeocodingServiceMethods GeocodingServiceCapabilities::readImplementedMethods(GeocodingServiceCapabilities::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::search::services::GeocodingServiceMethods(context.getImplementedMethods(), in);
}

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>

#include <nds/search/services/SearchService.h>

namespace nds
{
namespace search
{
namespace services
{

namespace SearchService
{

Service::Service(const allocator_type& allocator) :
        ::zserio::AllocatorHolder<::std::allocator<uint8_t>>(allocator)
{}

::zserio::IServiceDataPtr Service::callMethod(
        ::zserio::StringView methodName, ::zserio::Span<const uint8_t> requestData, void* context)
{
    if (methodName == methodNames()[0])
        return getServiceModuleDefinitionMethod(requestData, context);
    if (methodName == methodNames()[1])
        return getServiceNodeSystemReferenceMethod(requestData, context);
    if (methodName == methodNames()[2])
        return getConfigurationMethod(requestData, context);
    if (methodName == methodNames()[3])
        return searchMethod(requestData, context);
    throw ::zserio::ServiceException("nds.search.services.SearchService: Method '") << methodName << "' does not exist!";
}

::zserio::StringView Service::serviceFullName() noexcept
{
    static const ::zserio::StringView serviceFullName = ::zserio::makeStringView("nds.search.services.SearchService");
    return serviceFullName;
}

const ::std::array<::zserio::StringView, 4>& Service::methodNames() noexcept
{
    static constexpr ::std::array<::zserio::StringView, 4> names =
    {
        ::zserio::makeStringView("getServiceModuleDefinition"),
        ::zserio::makeStringView("getServiceNodeSystemReference"),
        ::zserio::makeStringView("getConfiguration"),
        ::zserio::makeStringView("search")
    };

    return names;
}

::zserio::IServiceDataPtr Service::getServiceModuleDefinitionMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::core::types::Empty request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::system::types::ModuleDefinition&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            getServiceModuleDefinitionImpl(request, context), get_allocator_ref());
}

::zserio::IServiceDataPtr Service::getServiceNodeSystemReferenceMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::core::types::Empty request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::system::types::NdsSystemToken&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            getServiceNodeSystemReferenceImpl(request, context), get_allocator_ref());
}

::zserio::IServiceDataPtr Service::getConfigurationMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::core::types::Empty request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::search::services::SupportedSearchConfiguration&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            getConfigurationImpl(request, context), get_allocator_ref());
}

::zserio::IServiceDataPtr Service::searchMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::search::services::GeneralSearchRequest request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::search::services::GeneralSearchResponse&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            searchImpl(request, context), get_allocator_ref());
}

Client::Client(::zserio::IServiceClient& service, const allocator_type& allocator) :
        ::zserio::AllocatorHolder<::std::allocator<uint8_t>>(allocator),
        m_service(service)
{
}

::nds::system::types::ModuleDefinition Client::getServiceModuleDefinitionMethod(const ::nds::core::types::Empty& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("getServiceModuleDefinition"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::system::types::ModuleDefinition(reader, get_allocator_ref());
}

::nds::system::types::NdsSystemToken Client::getServiceNodeSystemReferenceMethod(const ::nds::core::types::Empty& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("getServiceNodeSystemReference"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::system::types::NdsSystemToken(reader, get_allocator_ref());
}

::nds::search::services::SupportedSearchConfiguration Client::getConfigurationMethod(const ::nds::core::types::Empty& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("getConfiguration"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::search::services::SupportedSearchConfiguration(reader, get_allocator_ref());
}

::nds::search::services::GeneralSearchResponse Client::searchMethod(const ::nds::search::services::GeneralSearchRequest& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("search"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::search::services::GeneralSearchResponse(reader, get_allocator_ref());
}

} // namespace SearchService

} // namespace services
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>

#include <nds/search/services/GeocodingService.h>

namespace nds
{
namespace search
{
namespace services
{

namespace GeocodingService
{

Service::Service(const allocator_type& allocator) :
        ::zserio::AllocatorHolder<::std::allocator<uint8_t>>(allocator)
{}

::zserio::IServiceDataPtr Service::callMethod(
        ::zserio::StringView methodName, ::zserio::Span<const uint8_t> requestData, void* context)
{
    if (methodName == methodNames()[0])
        return getServiceModuleDefinitionMethod(requestData, context);
    if (methodName == methodNames()[1])
        return getServiceNodeSystemReferenceMethod(requestData, context);
    if (methodName == methodNames()[2])
        return getGeocodingServiceCapabilitiesMethod(requestData, context);
    if (methodName == methodNames()[3])
        return geocodeMethod(requestData, context);
    if (methodName == methodNames()[4])
        return reverseGeocodeMethod(requestData, context);
    throw ::zserio::ServiceException("nds.search.services.GeocodingService: Method '") << methodName << "' does not exist!";
}

::zserio::StringView Service::serviceFullName() noexcept
{
    static const ::zserio::StringView serviceFullName = ::zserio::makeStringView("nds.search.services.GeocodingService");
    return serviceFullName;
}

const ::std::array<::zserio::StringView, 5>& Service::methodNames() noexcept
{
    static constexpr ::std::array<::zserio::StringView, 5> names =
    {
        ::zserio::makeStringView("getServiceModuleDefinition"),
        ::zserio::makeStringView("getServiceNodeSystemReference"),
        ::zserio::makeStringView("getGeocodingServiceCapabilities"),
        ::zserio::makeStringView("geocode"),
        ::zserio::makeStringView("reverseGeocode")
    };

    return names;
}

::zserio::IServiceDataPtr Service::getServiceModuleDefinitionMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::core::types::Empty request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::system::types::ModuleDefinition&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            getServiceModuleDefinitionImpl(request, context), get_allocator_ref());
}

::zserio::IServiceDataPtr Service::getServiceNodeSystemReferenceMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::core::types::Empty request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::system::types::NdsSystemToken&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            getServiceNodeSystemReferenceImpl(request, context), get_allocator_ref());
}

::zserio::IServiceDataPtr Service::getGeocodingServiceCapabilitiesMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::core::types::Empty request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::search::services::GeocodingServiceCapabilities&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            getGeocodingServiceCapabilitiesImpl(request, context), get_allocator_ref());
}

::zserio::IServiceDataPtr Service::geocodeMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::search::services::GeocodingAddress request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::search::services::GeocodingPosition&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            geocodeImpl(request, context), get_allocator_ref());
}

::zserio::IServiceDataPtr Service::reverseGeocodeMethod(
        ::zserio::Span<const uint8_t> requestData, void* context)
{
    ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
    const ::nds::search::services::GeocodingPosition request(reader, get_allocator_ref());

    class ResponseData : public ::zserio::IServiceDataPtr::element_type
    {
    public:
        ResponseData(::nds::search::services::GeocodingAddress&& response, const allocator_type& allocator) :
                m_serviceData(response, allocator)
        {}

        ::zserio::IReflectableConstPtr getReflectable() const override
        {
            return m_serviceData.getReflectable();
        }

        ::zserio::Span<const uint8_t> getData() const override
        {
            return m_serviceData.getData();
        }

    private:
        ::zserio::ObjectServiceData m_serviceData;
    };

    return ::std::allocate_shared<ResponseData>(get_allocator_ref(),
            reverseGeocodeImpl(request, context), get_allocator_ref());
}

Client::Client(::zserio::IServiceClient& service, const allocator_type& allocator) :
        ::zserio::AllocatorHolder<::std::allocator<uint8_t>>(allocator),
        m_service(service)
{
}

::nds::system::types::ModuleDefinition Client::getServiceModuleDefinitionMethod(const ::nds::core::types::Empty& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("getServiceModuleDefinition"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::system::types::ModuleDefinition(reader, get_allocator_ref());
}

::nds::system::types::NdsSystemToken Client::getServiceNodeSystemReferenceMethod(const ::nds::core::types::Empty& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("getServiceNodeSystemReference"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::system::types::NdsSystemToken(reader, get_allocator_ref());
}

::nds::search::services::GeocodingServiceCapabilities Client::getGeocodingServiceCapabilitiesMethod(const ::nds::core::types::Empty& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("getGeocodingServiceCapabilities"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::search::services::GeocodingServiceCapabilities(reader, get_allocator_ref());
}

::nds::search::services::GeocodingPosition Client::geocodeMethod(const ::nds::search::services::GeocodingAddress& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("geocode"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::search::services::GeocodingPosition(reader, get_allocator_ref());
}

::nds::search::services::GeocodingAddress Client::reverseGeocodeMethod(const ::nds::search::services::GeocodingPosition& request, void* context)
{
    const ::zserio::ObjectServiceData requestData(request, get_allocator_ref());

    auto responseData = m_service.callMethod(::zserio::makeStringView("reverseGeocode"), requestData, context);

    ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
    return ::nds::search::services::GeocodingAddress(reader, get_allocator_ref());
}

} // namespace GeocodingService

} // namespace services
} // namespace search
} // namespace nds
