/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SEARCH_SERVICES_REQUEST_OPTIONS_H
#define NDS_SEARCH_SERVICES_REQUEST_OPTIONS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace search
{
namespace services
{

class RequestOptions
{
public:
    using underlying_type = uint16_t;

    enum class Values : underlying_type
    {
        PREFERRED_LANGUAGE = UINT16_C(1),
        SEARCH_AROUND = UINT16_C(2),
        SEARCH_ALONG = UINT16_C(4),
        SEARCH_IN_GEO_AREA = UINT16_C(8),
        SEARCH_IN_ISO_COUNTRY = UINT16_C(16),
        MAX_RESPONSE = UINT16_C(32),
        RESULT_ORDER = UINT16_C(64),
        POI_FILTER = UINT16_C(128),
        ADDRESS_FILTER = UINT16_C(256)
    };

    constexpr RequestOptions() noexcept :
            m_value(0)
    {}

    explicit RequestOptions(::zserio::BitStreamReader& in);
    RequestOptions(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);
    constexpr RequestOptions(Values value) noexcept :
            m_value(static_cast<underlying_type>(value))
    {}

    explicit RequestOptions(underlying_type value);

    ~RequestOptions() = default;

    RequestOptions(const RequestOptions&) = default;
    RequestOptions& operator=(const RequestOptions&) = default;

    RequestOptions(RequestOptions&&) = default;
    RequestOptions& operator=(RequestOptions&&) = default;

    constexpr explicit operator underlying_type() const
    {
        return m_value;
    }

    constexpr underlying_type getValue() const
    {
        return m_value;
    }

    void initPackingContext(::zserio::DeltaContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::DeltaContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0) const;
    size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const;

    ::zserio::string<> toString(const ::zserio::string<>::allocator_type& allocator =
            ::zserio::string<>::allocator_type()) const;

private:
    static underlying_type readValue(::zserio::BitStreamReader& in);
    static underlying_type readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

    underlying_type m_value;
};

inline bool operator==(const RequestOptions& lhs, const RequestOptions& rhs)
{
    return lhs.getValue() == rhs.getValue();
}

inline bool operator!=(const RequestOptions& lhs, const RequestOptions& rhs)
{
    return lhs.getValue() != rhs.getValue();
}

inline RequestOptions operator|(RequestOptions::Values lhs, RequestOptions::Values rhs)
{
    return RequestOptions(static_cast<RequestOptions::underlying_type>(lhs) | static_cast<RequestOptions::underlying_type>(rhs));
}

inline RequestOptions operator|(const RequestOptions& lhs, const RequestOptions& rhs)
{
    return RequestOptions(lhs.getValue() | rhs.getValue());
}

inline RequestOptions operator&(RequestOptions::Values lhs, RequestOptions::Values rhs)
{
    return RequestOptions(static_cast<RequestOptions::underlying_type>(lhs) & static_cast<RequestOptions::underlying_type>(rhs));
}

inline RequestOptions operator&(const RequestOptions& lhs, const RequestOptions& rhs)
{
    return RequestOptions(lhs.getValue() & rhs.getValue());
}

inline RequestOptions operator^(RequestOptions::Values lhs, RequestOptions::Values rhs)
{
    return RequestOptions(static_cast<RequestOptions::underlying_type>(lhs) ^ static_cast<RequestOptions::underlying_type>(rhs));
}

inline RequestOptions operator^(const RequestOptions& lhs, const RequestOptions& rhs)
{
    return RequestOptions(lhs.getValue() ^ rhs.getValue());
}

inline RequestOptions operator~(RequestOptions::Values lhs)
{
    return RequestOptions(~static_cast<RequestOptions::underlying_type>(lhs) & UINT16_C(32767));
}

inline RequestOptions operator~(const RequestOptions& lhs)
{
    return RequestOptions(~lhs.getValue() & UINT16_C(32767));
}

inline RequestOptions operator|=(RequestOptions& lhs, const RequestOptions& rhs)
{
    lhs = RequestOptions(lhs.getValue() | rhs.getValue());
    return lhs;
}

inline RequestOptions operator&=(RequestOptions& lhs, const RequestOptions& rhs)
{
    lhs = RequestOptions(lhs.getValue() & rhs.getValue());
    return lhs;
}

inline RequestOptions operator^=(RequestOptions& lhs, const RequestOptions& rhs)
{
    lhs = RequestOptions(lhs.getValue() ^ rhs.getValue());
    return lhs;
}

} // namespace services
} // namespace search
} // namespace nds

#endif // NDS_SEARCH_SERVICES_REQUEST_OPTIONS_H
