/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/search/types/SearchResultType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for SearchResultType enumeration.
constexpr ::std::array<const char*, 6> EnumTraits<::nds::search::types::SearchResultType>::names;
constexpr ::std::array<::nds::search::types::SearchResultType, 6> EnumTraits<::nds::search::types::SearchResultType>::values;
constexpr const char* EnumTraits<::nds::search::types::SearchResultType>::enumName;

template <>
size_t enumToOrdinal(::nds::search::types::SearchResultType value)
{
    switch (value)
    {
    case ::nds::search::types::SearchResultType::ADDRESS:
        return 0;
    case ::nds::search::types::SearchResultType::ADDRESS_COUNTRY:
        return 1;
    case ::nds::search::types::SearchResultType::ADDRESS_PLACE:
        return 2;
    case ::nds::search::types::SearchResultType::ADDRESS_ROAD:
        return 3;
    case ::nds::search::types::SearchResultType::ADDRESS_INTERSECTION:
        return 4;
    case ::nds::search::types::SearchResultType::POI:
        return 5;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration SearchResultType: ") <<
                static_cast<typename ::std::underlying_type<::nds::search::types::SearchResultType>::type>(value) << "!";
    }
}

template <>
::nds::search::types::SearchResultType valueToEnum(
        typename ::std::underlying_type<::nds::search::types::SearchResultType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
    case UINT8_C(5):
        return static_cast<::nds::search::types::SearchResultType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration SearchResultType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::search::types::SearchResultType>(::nds::search::types::SearchResultType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::search::types::SearchResultType value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::search::types::SearchResultType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::search::types::SearchResultType)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::search::types::SearchResultType value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::search::types::SearchResultType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::search::types::SearchResultType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::search::types::SearchResultType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::search::types::SearchResultType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::search::types::SearchResultType>(
            static_cast<typename ::std::underlying_type<::nds::search::types::SearchResultType>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::search::types::SearchResultType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::search::types::SearchResultType>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::search::types::SearchResultType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::search::types::SearchResultType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::search::types::SearchResultType value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::search::types::SearchResultType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>

#include <nds/search/types/ResultOrder.h>

namespace nds
{
namespace search
{
namespace types
{

ResultOrder::ResultOrder(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

ResultOrder::ResultOrder(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

void ResultOrder::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::StdIntArrayTraits<::nds::search::types::ResultOrder::underlying_type>>(m_value);
}

size_t ResultOrder::bitSizeOf(size_t) const
{
    return UINT8_C(8);
}

size_t ResultOrder::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<::nds::search::types::ResultOrder::underlying_type>>(m_value);
}

size_t ResultOrder::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t ResultOrder::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t ResultOrder::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void ResultOrder::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_value, UINT8_C(8));
}

void ResultOrder::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::StdIntArrayTraits<::nds::search::types::ResultOrder::underlying_type>>(out, m_value);
}

::zserio::string<> ResultOrder::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & ResultOrder::Values::GENERAL) == ResultOrder::Values::GENERAL)
        result += result.empty() ? "GENERAL" : " | GENERAL";
    if ((*this & ResultOrder::Values::DISTANCE) == ResultOrder::Values::DISTANCE)
        result += result.empty() ? "DISTANCE" : " | DISTANCE";
    if ((*this & ResultOrder::Values::TRAVEL_DISTANCE) == ResultOrder::Values::TRAVEL_DISTANCE)
        result += result.empty() ? "TRAVEL_DISTANCE" : " | TRAVEL_DISTANCE";
    if ((*this & ResultOrder::Values::TERM_RELEVANCE) == ResultOrder::Values::TERM_RELEVANCE)
        result += result.empty() ? "TERM_RELEVANCE" : " | TERM_RELEVANCE";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

ResultOrder::underlying_type ResultOrder::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readBits(UINT8_C(8)));
}

ResultOrder::underlying_type ResultOrder::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::StdIntArrayTraits<::nds::search::types::ResultOrder::underlying_type>>(
            in);
}

} // namespace types
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/types/SearchResult.h>

namespace nds
{
namespace search
{
namespace types
{

SearchResult::SearchResult(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_position_(allocator),
        m_path_(::zserio::NullOpt),
        m_distanceToOrigin_(::zserio::NullOpt),
        m_hasTravelDistance_(::zserio::NullOpt),
        m_travelDistanceToOrigin_(::zserio::NullOpt),
        m_displayString_(allocator),
        m_highlight_(::zserio::NullOpt),
        m_type_(::nds::search::types::SearchResultType()),
        m_globalSourceId_(::zserio::NullOpt),
        m_detailedResultInformation_(::zserio::NullOpt)
{
}

SearchResult::SearchResult(::zserio::BitStreamReader& in,
        bool hasDistanceInfo_, const allocator_type& allocator) :
        m_hasDistanceInfo_(hasDistanceInfo_),
        m_isInitialized(true),
        m_position_(readPosition(in, allocator)),
        m_path_(readPath(in, allocator)),
        m_distanceToOrigin_(readDistanceToOrigin(in)),
        m_hasTravelDistance_(readHasTravelDistance(in)),
        m_travelDistanceToOrigin_(readTravelDistanceToOrigin(in)),
        m_displayString_(readDisplayString(in, allocator)),
        m_highlight_(readHighlight(in, allocator)),
        m_type_(readType(in)),
        m_globalSourceId_(readGlobalSourceId(in, allocator)),
        m_detailedResultInformation_(readDetailedResultInformation(in, allocator))
{
}

SearchResult::SearchResult(SearchResult::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        bool hasDistanceInfo_, const allocator_type& allocator) :
        m_hasDistanceInfo_(hasDistanceInfo_),
        m_isInitialized(true),
        m_position_(readPosition(context, in, allocator)),
        m_path_(readPath(context, in, allocator)),
        m_distanceToOrigin_(readDistanceToOrigin(context, in)),
        m_hasTravelDistance_(readHasTravelDistance(in)),
        m_travelDistanceToOrigin_(readTravelDistanceToOrigin(context, in)),
        m_displayString_(readDisplayString(in, allocator)),
        m_highlight_(readHighlight(context, in, allocator)),
        m_type_(readType(context, in)),
        m_globalSourceId_(readGlobalSourceId(in, allocator)),
        m_detailedResultInformation_(readDetailedResultInformation(in, allocator))
{
}

SearchResult::SearchResult(const SearchResult& other) :
        m_position_(other.m_position_),
        m_path_(other.m_path_),
        m_distanceToOrigin_(other.m_distanceToOrigin_),
        m_hasTravelDistance_(other.m_hasTravelDistance_),
        m_travelDistanceToOrigin_(other.m_travelDistanceToOrigin_),
        m_displayString_(other.m_displayString_),
        m_highlight_(other.m_highlight_),
        m_type_(other.m_type_),
        m_globalSourceId_(other.m_globalSourceId_),
        m_detailedResultInformation_(other.m_detailedResultInformation_)
{
    if (other.m_isInitialized)
        initialize(other.m_hasDistanceInfo_);
    else
        m_isInitialized = false;
}

SearchResult& SearchResult::operator=(const SearchResult& other)
{
    m_position_ = other.m_position_;
    m_path_ = other.m_path_;
    m_distanceToOrigin_ = other.m_distanceToOrigin_;
    m_hasTravelDistance_ = other.m_hasTravelDistance_;
    m_travelDistanceToOrigin_ = other.m_travelDistanceToOrigin_;
    m_displayString_ = other.m_displayString_;
    m_highlight_ = other.m_highlight_;
    m_type_ = other.m_type_;
    m_globalSourceId_ = other.m_globalSourceId_;
    m_detailedResultInformation_ = other.m_detailedResultInformation_;
    if (other.m_isInitialized)
        initialize(other.m_hasDistanceInfo_);
    else
        m_isInitialized = false;

    return *this;
}

SearchResult::SearchResult(SearchResult&& other) :
        m_position_(::std::move(other.m_position_)),
        m_path_(::std::move(other.m_path_)),
        m_distanceToOrigin_(::std::move(other.m_distanceToOrigin_)),
        m_hasTravelDistance_(::std::move(other.m_hasTravelDistance_)),
        m_travelDistanceToOrigin_(::std::move(other.m_travelDistanceToOrigin_)),
        m_displayString_(::std::move(other.m_displayString_)),
        m_highlight_(::std::move(other.m_highlight_)),
        m_type_(::std::move(other.m_type_)),
        m_globalSourceId_(::std::move(other.m_globalSourceId_)),
        m_detailedResultInformation_(::std::move(other.m_detailedResultInformation_))
{
    if (other.m_isInitialized)
        initialize(other.m_hasDistanceInfo_);
    else
        m_isInitialized = false;
}

SearchResult& SearchResult::operator=(SearchResult&& other)
{
    m_position_ = ::std::move(other.m_position_);
    m_path_ = ::std::move(other.m_path_);
    m_distanceToOrigin_ = ::std::move(other.m_distanceToOrigin_);
    m_hasTravelDistance_ = ::std::move(other.m_hasTravelDistance_);
    m_travelDistanceToOrigin_ = ::std::move(other.m_travelDistanceToOrigin_);
    m_displayString_ = ::std::move(other.m_displayString_);
    m_highlight_ = ::std::move(other.m_highlight_);
    m_type_ = ::std::move(other.m_type_);
    m_globalSourceId_ = ::std::move(other.m_globalSourceId_);
    m_detailedResultInformation_ = ::std::move(other.m_detailedResultInformation_);
    if (other.m_isInitialized)
        initialize(other.m_hasDistanceInfo_);
    else
        m_isInitialized = false;

    return *this;
}

SearchResult::SearchResult(::zserio::PropagateAllocatorT,
        const SearchResult& other, const allocator_type& allocator) :
        m_position_(::zserio::allocatorPropagatingCopy(other.m_position_, allocator)),
        m_path_(::zserio::allocatorPropagatingCopy(other.m_path_, allocator)),
        m_distanceToOrigin_(::zserio::allocatorPropagatingCopy(other.m_distanceToOrigin_, allocator)),
        m_hasTravelDistance_(::zserio::allocatorPropagatingCopy(other.m_hasTravelDistance_, allocator)),
        m_travelDistanceToOrigin_(::zserio::allocatorPropagatingCopy(other.m_travelDistanceToOrigin_, allocator)),
        m_displayString_(::zserio::allocatorPropagatingCopy(other.m_displayString_, allocator)),
        m_highlight_(::zserio::allocatorPropagatingCopy(other.m_highlight_, allocator)),
        m_type_(::zserio::allocatorPropagatingCopy(other.m_type_, allocator)),
        m_globalSourceId_(::zserio::allocatorPropagatingCopy(other.m_globalSourceId_, allocator)),
        m_detailedResultInformation_(::zserio::allocatorPropagatingCopy(other.m_detailedResultInformation_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_hasDistanceInfo_);
    else
        m_isInitialized = false;
}

void SearchResult::initialize(
        bool hasDistanceInfo_)
{
    m_hasDistanceInfo_ = hasDistanceInfo_;
    m_isInitialized = true;

    initializeChildren();
}

bool SearchResult::isInitialized() const
{
    return m_isInitialized;
}

void SearchResult::initializeChildren()
{
    m_position_.initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if (isPathSet())
        m_path_.value().initializeChildren();
}

bool SearchResult::getHasDistanceInfo() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasDistanceInfo' of compound 'SearchResult' is not initialized!");

    return m_hasDistanceInfo_;
}

::nds::core::geometry::Position2D& SearchResult::getPosition()
{
    return m_position_;
}

const ::nds::core::geometry::Position2D& SearchResult::getPosition() const
{
    return m_position_;
}

void SearchResult::setPosition(const ::nds::core::geometry::Position2D& position_)
{
    m_position_ = position_;
}

void SearchResult::setPosition(::nds::core::geometry::Position2D&& position_)
{
    m_position_ = ::std::move(position_);
}

::nds::core::location::RoadLocationPath& SearchResult::getPath()
{
    return m_path_.value();
}

const ::nds::core::location::RoadLocationPath& SearchResult::getPath() const
{
    return m_path_.value();
}

void SearchResult::setPath(const ::nds::core::location::RoadLocationPath& path_)
{
    m_path_ = path_;
}

void SearchResult::setPath(::nds::core::location::RoadLocationPath&& path_)
{
    m_path_ = ::std::move(path_);
}

bool SearchResult::isPathUsed() const
{
    return (isPathSet());
}

bool SearchResult::isPathSet() const
{
    return m_path_.hasValue();
}

void SearchResult::resetPath()
{
    m_path_.reset();
}

::nds::core::types::DistanceMeters SearchResult::getDistanceToOrigin() const
{
    return m_distanceToOrigin_.value();
}

void SearchResult::setDistanceToOrigin(::nds::core::types::DistanceMeters distanceToOrigin_)
{
    m_distanceToOrigin_ = distanceToOrigin_;
}

bool SearchResult::isDistanceToOriginUsed() const
{
    return (getHasDistanceInfo());
}

bool SearchResult::isDistanceToOriginSet() const
{
    return m_distanceToOrigin_.hasValue();
}

void SearchResult::resetDistanceToOrigin()
{
    m_distanceToOrigin_.reset();
}

bool SearchResult::getHasTravelDistance() const
{
    return m_hasTravelDistance_.value();
}

void SearchResult::setHasTravelDistance(bool hasTravelDistance_)
{
    m_hasTravelDistance_ = hasTravelDistance_;
}

bool SearchResult::isHasTravelDistanceUsed() const
{
    return (getHasDistanceInfo());
}

bool SearchResult::isHasTravelDistanceSet() const
{
    return m_hasTravelDistance_.hasValue();
}

void SearchResult::resetHasTravelDistance()
{
    m_hasTravelDistance_.reset();
}

::nds::core::types::DistanceMeters SearchResult::getTravelDistanceToOrigin() const
{
    return m_travelDistanceToOrigin_.value();
}

void SearchResult::setTravelDistanceToOrigin(::nds::core::types::DistanceMeters travelDistanceToOrigin_)
{
    m_travelDistanceToOrigin_ = travelDistanceToOrigin_;
}

bool SearchResult::isTravelDistanceToOriginUsed() const
{
    return (getHasDistanceInfo() && getHasTravelDistance());
}

bool SearchResult::isTravelDistanceToOriginSet() const
{
    return m_travelDistanceToOrigin_.hasValue();
}

void SearchResult::resetTravelDistanceToOrigin()
{
    m_travelDistanceToOrigin_.reset();
}

::zserio::string<>& SearchResult::getDisplayString()
{
    return m_displayString_;
}

const ::zserio::string<>& SearchResult::getDisplayString() const
{
    return m_displayString_;
}

void SearchResult::setDisplayString(const ::zserio::string<>& displayString_)
{
    m_displayString_ = displayString_;
}

void SearchResult::setDisplayString(::zserio::string<>&& displayString_)
{
    m_displayString_ = ::std::move(displayString_);
}

::zserio::vector<::nds::search::types::TextRange>& SearchResult::getHighlight()
{
    return m_highlight_.value().getRawArray();
}

const ::zserio::vector<::nds::search::types::TextRange>& SearchResult::getHighlight() const
{
    return m_highlight_.value().getRawArray();
}

void SearchResult::setHighlight(const ::zserio::vector<::nds::search::types::TextRange>& highlight_)
{
    m_highlight_ = ZserioArrayType_highlight(highlight_);
}

void SearchResult::setHighlight(::zserio::vector<::nds::search::types::TextRange>&& highlight_)
{
    m_highlight_ = ZserioArrayType_highlight(std::move(highlight_));
}

bool SearchResult::isHighlightUsed() const
{
    return (isHighlightSet());
}

bool SearchResult::isHighlightSet() const
{
    return m_highlight_.hasValue();
}

void SearchResult::resetHighlight()
{
    m_highlight_.reset();
}

::nds::search::types::SearchResultType SearchResult::getType() const
{
    return m_type_;
}

void SearchResult::setType(::nds::search::types::SearchResultType type_)
{
    m_type_ = type_;
}

::nds::core::types::GlobalSourceId& SearchResult::getGlobalSourceId()
{
    return m_globalSourceId_.value();
}

const ::nds::core::types::GlobalSourceId& SearchResult::getGlobalSourceId() const
{
    return m_globalSourceId_.value();
}

void SearchResult::setGlobalSourceId(const ::nds::core::types::GlobalSourceId& globalSourceId_)
{
    m_globalSourceId_ = globalSourceId_;
}

void SearchResult::setGlobalSourceId(::nds::core::types::GlobalSourceId&& globalSourceId_)
{
    m_globalSourceId_ = ::std::move(globalSourceId_);
}

bool SearchResult::isGlobalSourceIdUsed() const
{
    return (isGlobalSourceIdSet());
}

bool SearchResult::isGlobalSourceIdSet() const
{
    return m_globalSourceId_.hasValue();
}

void SearchResult::resetGlobalSourceId()
{
    m_globalSourceId_.reset();
}

::nds::system::types::ExternData& SearchResult::getDetailedResultInformation()
{
    return m_detailedResultInformation_.value();
}

const ::nds::system::types::ExternData& SearchResult::getDetailedResultInformation() const
{
    return m_detailedResultInformation_.value();
}

void SearchResult::setDetailedResultInformation(const ::nds::system::types::ExternData& detailedResultInformation_)
{
    m_detailedResultInformation_ = detailedResultInformation_;
}

void SearchResult::setDetailedResultInformation(::nds::system::types::ExternData&& detailedResultInformation_)
{
    m_detailedResultInformation_ = ::std::move(detailedResultInformation_);
}

bool SearchResult::isDetailedResultInformationUsed() const
{
    return (isDetailedResultInformationSet());
}

bool SearchResult::isDetailedResultInformationSet() const
{
    return m_detailedResultInformation_.hasValue();
}

void SearchResult::resetDetailedResultInformation()
{
    m_detailedResultInformation_.reset();
}

void SearchResult::initPackingContext(SearchResult::ZserioPackingContext& context) const
{
    m_position_.initPackingContext(context.getPosition());
    if (isPathSet())
    {
        m_path_.value().initPackingContext(context.getPath());
    }
    if (getHasDistanceInfo())
    {
        context.getDistanceToOrigin().init<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_distanceToOrigin_.value());
    }
    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        context.getTravelDistanceToOrigin().init<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_travelDistanceToOrigin_.value());
    }
    ::zserio::initPackingContext(context.getType(), m_type_);
}

size_t SearchResult::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_position_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isPathSet())
    {
        endBitPosition += m_path_.value().bitSizeOf(endBitPosition);
    }
    if (getHasDistanceInfo())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_distanceToOrigin_.value());
    }
    if (getHasDistanceInfo())
    {
        endBitPosition += UINT8_C(1);
    }
    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_travelDistanceToOrigin_.value());
    }
    endBitPosition += ::zserio::bitSizeOfString(m_displayString_);
    endBitPosition += 1;
    if (isHighlightSet())
    {
        endBitPosition += m_highlight_.value().bitSizeOf(*this, endBitPosition);
    }
    endBitPosition += ::zserio::bitSizeOf(m_type_);
    endBitPosition += 1;
    if (isGlobalSourceIdSet())
    {
        endBitPosition += ::zserio::bitSizeOfString(m_globalSourceId_.value());
    }
    endBitPosition += 1;
    if (isDetailedResultInformationSet())
    {
        endBitPosition += m_detailedResultInformation_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t SearchResult::bitSizeOf(SearchResult::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_position_.bitSizeOf(context.getPosition(), endBitPosition);
    endBitPosition += 1;
    if (isPathSet())
    {
        endBitPosition += m_path_.value().bitSizeOf(context.getPath(), endBitPosition);
    }
    if (getHasDistanceInfo())
    {
        endBitPosition += context.getDistanceToOrigin().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_distanceToOrigin_.value());
    }
    if (getHasDistanceInfo())
    {
        endBitPosition += UINT8_C(1);
    }
    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        endBitPosition += context.getTravelDistanceToOrigin().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_travelDistanceToOrigin_.value());
    }
    endBitPosition += ::zserio::bitSizeOfString(m_displayString_);
    endBitPosition += 1;
    if (isHighlightSet())
    {
        endBitPosition += m_highlight_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    endBitPosition += ::zserio::bitSizeOf(context.getType(), m_type_);
    endBitPosition += 1;
    if (isGlobalSourceIdSet())
    {
        endBitPosition += ::zserio::bitSizeOfString(m_globalSourceId_.value());
    }
    endBitPosition += 1;
    if (isDetailedResultInformationSet())
    {
        endBitPosition += m_detailedResultInformation_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t SearchResult::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_position_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isPathSet())
    {
        endBitPosition = m_path_.value().initializeOffsets(endBitPosition);
    }
    if (getHasDistanceInfo())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_distanceToOrigin_.value());
    }
    if (getHasDistanceInfo())
    {
        endBitPosition += UINT8_C(1);
    }
    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_travelDistanceToOrigin_.value());
    }
    endBitPosition += ::zserio::bitSizeOfString(m_displayString_);
    endBitPosition += 1;
    if (isHighlightSet())
    {
        endBitPosition = m_highlight_.value().initializeOffsets(*this, endBitPosition);
    }
    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_type_);
    endBitPosition += 1;
    if (isGlobalSourceIdSet())
    {
        endBitPosition += ::zserio::bitSizeOfString(m_globalSourceId_.value());
    }
    endBitPosition += 1;
    if (isDetailedResultInformationSet())
    {
        endBitPosition = m_detailedResultInformation_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t SearchResult::initializeOffsets(SearchResult::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_position_.initializeOffsets(context.getPosition(), endBitPosition);
    endBitPosition += 1;
    if (isPathSet())
    {
        endBitPosition = m_path_.value().initializeOffsets(context.getPath(), endBitPosition);
    }
    if (getHasDistanceInfo())
    {
        endBitPosition += context.getDistanceToOrigin().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_distanceToOrigin_.value());
    }
    if (getHasDistanceInfo())
    {
        endBitPosition += UINT8_C(1);
    }
    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        endBitPosition += context.getTravelDistanceToOrigin().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(m_travelDistanceToOrigin_.value());
    }
    endBitPosition += ::zserio::bitSizeOfString(m_displayString_);
    endBitPosition += 1;
    if (isHighlightSet())
    {
        endBitPosition = m_highlight_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    endBitPosition = ::zserio::initializeOffsets(context.getType(), endBitPosition,
        m_type_);
    endBitPosition += 1;
    if (isGlobalSourceIdSet())
    {
        endBitPosition += ::zserio::bitSizeOfString(m_globalSourceId_.value());
    }
    endBitPosition += 1;
    if (isDetailedResultInformationSet())
    {
        endBitPosition = m_detailedResultInformation_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

bool SearchResult::operator==(const SearchResult& other) const
{
    if (this != &other)
    {
        return
                (getHasDistanceInfo() == other.getHasDistanceInfo()) &&
                (m_position_ == other.m_position_) &&
                (!isPathUsed() ? !other.isPathUsed() : (m_path_ == other.m_path_)) &&
                (!isDistanceToOriginUsed() ? !other.isDistanceToOriginUsed() : (m_distanceToOrigin_ == other.m_distanceToOrigin_)) &&
                (!isHasTravelDistanceUsed() ? !other.isHasTravelDistanceUsed() : (m_hasTravelDistance_ == other.m_hasTravelDistance_)) &&
                (!isTravelDistanceToOriginUsed() ? !other.isTravelDistanceToOriginUsed() : (m_travelDistanceToOrigin_ == other.m_travelDistanceToOrigin_)) &&
                (m_displayString_ == other.m_displayString_) &&
                (!isHighlightUsed() ? !other.isHighlightUsed() : (m_highlight_ == other.m_highlight_)) &&
                (m_type_ == other.m_type_) &&
                (!isGlobalSourceIdUsed() ? !other.isGlobalSourceIdUsed() : (m_globalSourceId_ == other.m_globalSourceId_)) &&
                (!isDetailedResultInformationUsed() ? !other.isDetailedResultInformationUsed() : (m_detailedResultInformation_ == other.m_detailedResultInformation_));
    }

    return true;
}

uint32_t SearchResult::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getHasDistanceInfo());
    result = ::zserio::calcHashCode(result, m_position_);
    if (isPathUsed())
        result = ::zserio::calcHashCode(result, m_path_);
    if (isDistanceToOriginUsed())
        result = ::zserio::calcHashCode(result, m_distanceToOrigin_);
    if (isHasTravelDistanceUsed())
        result = ::zserio::calcHashCode(result, m_hasTravelDistance_);
    if (isTravelDistanceToOriginUsed())
        result = ::zserio::calcHashCode(result, m_travelDistanceToOrigin_);
    result = ::zserio::calcHashCode(result, m_displayString_);
    if (isHighlightUsed())
        result = ::zserio::calcHashCode(result, m_highlight_);
    result = ::zserio::calcHashCode(result, m_type_);
    if (isGlobalSourceIdUsed())
        result = ::zserio::calcHashCode(result, m_globalSourceId_);
    if (isDetailedResultInformationUsed())
        result = ::zserio::calcHashCode(result, m_detailedResultInformation_);

    return result;
}

void SearchResult::write(::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_position_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field SearchResult.position: ") <<
                m_position_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_position_.write(out);

    if (isPathSet())
    {
        out.writeBool(true);
        m_path_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }

    if (getHasDistanceInfo())
    {
        out.writeVarUInt32(m_distanceToOrigin_.value());
    }

    if (getHasDistanceInfo())
    {
        out.writeBool(m_hasTravelDistance_.value());
    }

    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        out.writeVarUInt32(m_travelDistanceToOrigin_.value());
    }

    out.writeString(m_displayString_);

    if (isHighlightSet())
    {
        out.writeBool(true);
        m_highlight_.value().write(*this, out);
    }
    else
    {
        out.writeBool(false);
    }

    ::zserio::write(out, m_type_);

    if (isGlobalSourceIdSet())
    {
        out.writeBool(true);
        out.writeString(m_globalSourceId_.value());
    }
    else
    {
        out.writeBool(false);
    }

    if (isDetailedResultInformationSet())
    {
        out.writeBool(true);
        m_detailedResultInformation_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
}

void SearchResult::write(SearchResult::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_position_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field SearchResult.position: ") <<
                m_position_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_position_.write(context.getPosition(), out);

    if (isPathSet())
    {
        out.writeBool(true);
        m_path_.value().write(context.getPath(), out);
    }
    else
    {
        out.writeBool(false);
    }

    if (getHasDistanceInfo())
    {
        context.getDistanceToOrigin().write<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(out, m_distanceToOrigin_.value());
    }

    if (getHasDistanceInfo())
    {
        out.writeBool(m_hasTravelDistance_.value());
    }

    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        context.getTravelDistanceToOrigin().write<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(out, m_travelDistanceToOrigin_.value());
    }

    out.writeString(m_displayString_);

    if (isHighlightSet())
    {
        out.writeBool(true);
        m_highlight_.value().writePacked(*this, out);
    }
    else
    {
        out.writeBool(false);
    }

    ::zserio::write(context.getType(), out, m_type_);

    if (isGlobalSourceIdSet())
    {
        out.writeBool(true);
        out.writeString(m_globalSourceId_.value());
    }
    else
    {
        out.writeBool(false);
    }

    if (isDetailedResultInformationSet())
    {
        out.writeBool(true);
        m_detailedResultInformation_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
}

void SearchResult::ZserioElementFactory_highlight::create(SearchResult&        ,
        ::zserio::vector<::nds::search::types::TextRange>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void SearchResult::ZserioElementFactory_highlight::create(SearchResult&        ,
        ::zserio::vector<::nds::search::types::TextRange>& array,
        ::nds::search::types::TextRange::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::geometry::Position2D SearchResult::readPosition(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}

::nds::core::geometry::Position2D SearchResult::readPosition(SearchResult::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(context.getPosition(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}
::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath> SearchResult::readPath(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath>(::nds::core::location::RoadLocationPath(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath> SearchResult::readPath(SearchResult::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath>(::nds::core::location::RoadLocationPath(context.getPath(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> SearchResult::readDistanceToOrigin(::zserio::BitStreamReader& in)
{
    if (getHasDistanceInfo())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(static_cast<::nds::core::types::DistanceMeters>(in.readVarUInt32()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> SearchResult::readDistanceToOrigin(SearchResult::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getHasDistanceInfo())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(context.getDistanceToOrigin().read<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<bool> SearchResult::readHasTravelDistance(::zserio::BitStreamReader& in)
{
    if (getHasDistanceInfo())
    {
        return ::zserio::InplaceOptionalHolder<bool>(static_cast<bool>(in.readBool()));
    }

    return ::zserio::InplaceOptionalHolder<bool>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> SearchResult::readTravelDistanceToOrigin(::zserio::BitStreamReader& in)
{
    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(static_cast<::nds::core::types::DistanceMeters>(in.readVarUInt32()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> SearchResult::readTravelDistanceToOrigin(SearchResult::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getHasDistanceInfo() && getHasTravelDistance())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(context.getTravelDistanceToOrigin().read<::zserio::VarIntNNArrayTraits<::nds::core::types::DistanceMeters>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters>(::zserio::NullOpt);
}
::zserio::string<> SearchResult::readDisplayString(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::string<>>(in.readString(allocator));
}
::zserio::InplaceOptionalHolder<SearchResult::ZserioArrayType_highlight> SearchResult::readHighlight(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_highlight readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_highlight>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_highlight>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<SearchResult::ZserioArrayType_highlight> SearchResult::readHighlight(SearchResult::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_highlight readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_highlight>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_highlight>(::zserio::NullOpt);
}
::nds::search::types::SearchResultType SearchResult::readType(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::search::types::SearchResultType>(in);
}

::nds::search::types::SearchResultType SearchResult::readType(SearchResult::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::search::types::SearchResultType>(context.getType(), in);
}
::zserio::InplaceOptionalHolder<::nds::core::types::GlobalSourceId> SearchResult::readGlobalSourceId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::GlobalSourceId>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::GlobalSourceId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> SearchResult::readDetailedResultInformation(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::nds::system::types::ExternData(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData>(::zserio::NullOpt);
}

} // namespace types
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/types/TextRange.h>

namespace nds
{
namespace search
{
namespace types
{

TextRange::TextRange(const allocator_type&) noexcept :
        m_startIndex_(::nds::search::types::CharacterIndex()),
        m_endIndex_(::nds::search::types::CharacterIndex())
{
}

TextRange::TextRange(::zserio::BitStreamReader& in, const allocator_type&) :
        m_startIndex_(readStartIndex(in)),
        m_endIndex_(readEndIndex(in))
{
}

TextRange::TextRange(TextRange::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_startIndex_(readStartIndex(context, in)),
        m_endIndex_(readEndIndex(context, in))
{
}

TextRange::TextRange(::zserio::PropagateAllocatorT,
        const TextRange& other, const allocator_type& allocator) :
        m_startIndex_(::zserio::allocatorPropagatingCopy(other.m_startIndex_, allocator)),
        m_endIndex_(::zserio::allocatorPropagatingCopy(other.m_endIndex_, allocator))
{
}

::nds::search::types::CharacterIndex TextRange::getStartIndex() const
{
    return m_startIndex_;
}

void TextRange::setStartIndex(::nds::search::types::CharacterIndex startIndex_)
{
    m_startIndex_ = startIndex_;
}

::nds::search::types::CharacterIndex TextRange::getEndIndex() const
{
    return m_endIndex_;
}

void TextRange::setEndIndex(::nds::search::types::CharacterIndex endIndex_)
{
    m_endIndex_ = endIndex_;
}

void TextRange::initPackingContext(TextRange::ZserioPackingContext& context) const
{
    context.getStartIndex().init<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(m_startIndex_);
    context.getEndIndex().init<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(m_endIndex_);
}

size_t TextRange::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_startIndex_);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_endIndex_);

    return endBitPosition - bitPosition;
}

size_t TextRange::bitSizeOf(TextRange::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getStartIndex().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(m_startIndex_);
    endBitPosition += context.getEndIndex().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(m_endIndex_);

    return endBitPosition - bitPosition;
}

size_t TextRange::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_startIndex_);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_endIndex_);

    return endBitPosition;
}

size_t TextRange::initializeOffsets(TextRange::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getStartIndex().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(m_startIndex_);
    endBitPosition += context.getEndIndex().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(m_endIndex_);

    return endBitPosition;
}

bool TextRange::operator==(const TextRange& other) const
{
    if (this != &other)
    {
        return
                (m_startIndex_ == other.m_startIndex_) &&
                (m_endIndex_ == other.m_endIndex_);
    }

    return true;
}

uint32_t TextRange::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_startIndex_);
    result = ::zserio::calcHashCode(result, m_endIndex_);

    return result;
}

void TextRange::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_startIndex_);
    out.writeVarUInt32(m_endIndex_);
}

void TextRange::write(TextRange::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getStartIndex().write<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(out, m_startIndex_);
    context.getEndIndex().write<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(out, m_endIndex_);
}

::nds::search::types::CharacterIndex TextRange::readStartIndex(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::search::types::CharacterIndex>(in.readVarUInt32());
}

::nds::search::types::CharacterIndex TextRange::readStartIndex(TextRange::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getStartIndex().read<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(in);
}
::nds::search::types::CharacterIndex TextRange::readEndIndex(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::search::types::CharacterIndex>(in.readVarUInt32());
}

::nds::search::types::CharacterIndex TextRange::readEndIndex(TextRange::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getEndIndex().read<::zserio::VarIntNNArrayTraits<::nds::search::types::CharacterIndex>>(in);
}

} // namespace types
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/types/Suggestions.h>

namespace nds
{
namespace search
{
namespace types
{

Suggestions::Suggestions(const allocator_type& allocator) noexcept :
        m_suggestion_(allocator)
{
}

Suggestions::Suggestions(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_suggestion_(readSuggestion(in, allocator))
{
}

Suggestions::Suggestions(::zserio::PropagateAllocatorT,
        const Suggestions& other, const allocator_type& allocator) :
        m_suggestion_(::zserio::allocatorPropagatingCopy(other.m_suggestion_, allocator))
{
}

::zserio::vector<::zserio::string<>>& Suggestions::getSuggestion()
{
    return m_suggestion_.getRawArray();
}

const ::zserio::vector<::zserio::string<>>& Suggestions::getSuggestion() const
{
    return m_suggestion_.getRawArray();
}

void Suggestions::setSuggestion(const ::zserio::vector<::zserio::string<>>& suggestion_)
{
    m_suggestion_ = ZserioArrayType_suggestion(suggestion_);
}

void Suggestions::setSuggestion(::zserio::vector<::zserio::string<>>&& suggestion_)
{
    m_suggestion_ = ZserioArrayType_suggestion(std::move(suggestion_));
}

size_t Suggestions::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_suggestion_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Suggestions::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_suggestion_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

bool Suggestions::operator==(const Suggestions& other) const
{
    if (this != &other)
    {
        return
                (m_suggestion_ == other.m_suggestion_);
    }

    return true;
}

uint32_t Suggestions::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_suggestion_);

    return result;
}

void Suggestions::write(::zserio::BitStreamWriter& out) const
{
    m_suggestion_.write(out);
}

Suggestions::ZserioArrayType_suggestion Suggestions::readSuggestion(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_suggestion readField(allocator);
    readField.read(in);

    return readField;
}

} // namespace types
} // namespace search
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/search/types/NextValidCharacterList.h>

namespace nds
{
namespace search
{
namespace types
{

NextValidCharacterList::NextValidCharacterList(const allocator_type& allocator) noexcept :
        m_nvc_(allocator)
{
}

NextValidCharacterList::NextValidCharacterList(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_nvc_(readNvc(in, allocator))
{
}

NextValidCharacterList::NextValidCharacterList(::zserio::PropagateAllocatorT,
        const NextValidCharacterList& other, const allocator_type& allocator) :
        m_nvc_(::zserio::allocatorPropagatingCopy(other.m_nvc_, allocator))
{
}

::zserio::string<>& NextValidCharacterList::getNvc()
{
    return m_nvc_;
}

const ::zserio::string<>& NextValidCharacterList::getNvc() const
{
    return m_nvc_;
}

void NextValidCharacterList::setNvc(const ::zserio::string<>& nvc_)
{
    m_nvc_ = nvc_;
}

void NextValidCharacterList::setNvc(::zserio::string<>&& nvc_)
{
    m_nvc_ = ::std::move(nvc_);
}

size_t NextValidCharacterList::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfString(m_nvc_);

    return endBitPosition - bitPosition;
}

size_t NextValidCharacterList::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfString(m_nvc_);

    return endBitPosition;
}

bool NextValidCharacterList::operator==(const NextValidCharacterList& other) const
{
    if (this != &other)
    {
        return
                (m_nvc_ == other.m_nvc_);
    }

    return true;
}

uint32_t NextValidCharacterList::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_nvc_);

    return result;
}

void NextValidCharacterList::write(::zserio::BitStreamWriter& out) const
{
    out.writeString(m_nvc_);
}

::zserio::string<> NextValidCharacterList::readNvc(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::string<>>(in.readString(allocator));
}

} // namespace types
} // namespace search
} // namespace nds
