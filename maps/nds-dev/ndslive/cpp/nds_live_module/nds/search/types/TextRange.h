/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SEARCH_TYPES_TEXT_RANGE_H
#define NDS_SEARCH_TYPES_TEXT_RANGE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/search/types/CharacterIndex.h>

namespace nds
{
namespace search
{
namespace types
{

class TextRange
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getStartIndex()
        {
            return m_startIndex_;
        }

        ::zserio::DeltaContext& getEndIndex()
        {
            return m_endIndex_;
        }

    private:
        ::zserio::DeltaContext m_startIndex_;
        ::zserio::DeltaContext m_endIndex_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TextRange() noexcept :
            TextRange(allocator_type())
    {}

    explicit TextRange(const allocator_type& allocator) noexcept;

    TextRange(
            ::nds::search::types::CharacterIndex startIndex_,
            ::nds::search::types::CharacterIndex endIndex_,
            const allocator_type& allocator = allocator_type()) :
            TextRange(allocator)
    {
        m_startIndex_ = startIndex_;
        m_endIndex_ = endIndex_;
    }

    explicit TextRange(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TextRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TextRange() = default;

    TextRange(const TextRange&) = default;
    TextRange& operator=(const TextRange&) = default;

    TextRange(TextRange&&) = default;
    TextRange& operator=(TextRange&&) = default;

    TextRange(::zserio::PropagateAllocatorT,
            const TextRange& other, const allocator_type& allocator);

    ::nds::search::types::CharacterIndex getStartIndex() const;
    void setStartIndex(::nds::search::types::CharacterIndex startIndex_);

    ::nds::search::types::CharacterIndex getEndIndex() const;
    void setEndIndex(::nds::search::types::CharacterIndex endIndex_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TextRange& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::search::types::CharacterIndex readStartIndex(::zserio::BitStreamReader& in);
    ::nds::search::types::CharacterIndex readStartIndex(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::search::types::CharacterIndex readEndIndex(::zserio::BitStreamReader& in);
    ::nds::search::types::CharacterIndex readEndIndex(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::search::types::CharacterIndex m_startIndex_;
    ::nds::search::types::CharacterIndex m_endIndex_;
};

} // namespace types
} // namespace search
} // namespace nds

#endif // NDS_SEARCH_TYPES_TEXT_RANGE_H
