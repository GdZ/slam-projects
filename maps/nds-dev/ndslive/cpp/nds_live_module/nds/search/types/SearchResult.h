/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SEARCH_TYPES_SEARCH_RESULT_H
#define NDS_SEARCH_TYPES_SEARCH_RESULT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Position2D.h>
#include <nds/core/location/RoadLocationPath.h>
#include <nds/core/types/DistanceMeters.h>
#include <nds/core/types/GlobalSourceId.h>
#include <nds/search/types/SearchResultType.h>
#include <nds/search/types/TextRange.h>
#include <nds/system/types/ExternData.h>

namespace nds
{
namespace search
{
namespace types
{

class SearchResult
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::geometry::Position2D::ZserioPackingContext& getPosition()
        {
            return m_position_;
        }

        ::nds::core::location::RoadLocationPath::ZserioPackingContext& getPath()
        {
            return m_path_;
        }

        ::zserio::DeltaContext& getDistanceToOrigin()
        {
            return m_distanceToOrigin_;
        }

        ::zserio::DeltaContext& getTravelDistanceToOrigin()
        {
            return m_travelDistanceToOrigin_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

    private:
        ::nds::core::geometry::Position2D::ZserioPackingContext m_position_;
        ::nds::core::location::RoadLocationPath::ZserioPackingContext m_path_;
        ::zserio::DeltaContext m_distanceToOrigin_;
        ::zserio::DeltaContext m_travelDistanceToOrigin_;
        ::zserio::DeltaContext m_type_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SearchResult() noexcept :
            SearchResult(allocator_type())
    {}

    explicit SearchResult(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_position = ::nds::core::geometry::Position2D,
            typename ZSERIO_T_path = ::nds::core::location::RoadLocationPath,
            typename ZSERIO_T_distanceToOrigin = ::nds::core::types::DistanceMeters,
            typename ZSERIO_T_hasTravelDistance = bool,
            typename ZSERIO_T_travelDistanceToOrigin = ::nds::core::types::DistanceMeters,
            typename ZSERIO_T_displayString = ::zserio::string<>,
            typename ZSERIO_T_highlight = ::zserio::vector<::nds::search::types::TextRange>,
            typename ZSERIO_T_globalSourceId = ::nds::core::types::GlobalSourceId,
            typename ZSERIO_T_detailedResultInformation = ::nds::system::types::ExternData,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_position, SearchResult, allocator_type> = 0>
    SearchResult(
            ZSERIO_T_position&& position_,
            ZSERIO_T_path&& path_,
            ZSERIO_T_distanceToOrigin&& distanceToOrigin_,
            ZSERIO_T_hasTravelDistance&& hasTravelDistance_,
            ZSERIO_T_travelDistanceToOrigin&& travelDistanceToOrigin_,
            ZSERIO_T_displayString&& displayString_,
            ZSERIO_T_highlight&& highlight_,
            ::nds::search::types::SearchResultType type_,
            ZSERIO_T_globalSourceId&& globalSourceId_,
            ZSERIO_T_detailedResultInformation&& detailedResultInformation_,
            const allocator_type& allocator = allocator_type()) :
            SearchResult(allocator)
    {
        m_position_ = ::std::forward<ZSERIO_T_position>(position_);
        m_path_ = ::std::forward<ZSERIO_T_path>(path_);
        m_distanceToOrigin_ = ::std::forward<ZSERIO_T_distanceToOrigin>(distanceToOrigin_);
        m_hasTravelDistance_ = ::std::forward<ZSERIO_T_hasTravelDistance>(hasTravelDistance_);
        m_travelDistanceToOrigin_ = ::std::forward<ZSERIO_T_travelDistanceToOrigin>(travelDistanceToOrigin_);
        m_displayString_ = ::std::forward<ZSERIO_T_displayString>(displayString_);
        m_highlight_ = ::zserio::createOptionalArray<ZserioArrayType_highlight>(::std::forward<ZSERIO_T_highlight>(highlight_));
        m_type_ = type_;
        m_globalSourceId_ = ::std::forward<ZSERIO_T_globalSourceId>(globalSourceId_);
        m_detailedResultInformation_ = ::std::forward<ZSERIO_T_detailedResultInformation>(detailedResultInformation_);
    }

    explicit SearchResult(::zserio::BitStreamReader& in,
            bool hasDistanceInfo_, const allocator_type& allocator = allocator_type());
    explicit SearchResult(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            bool hasDistanceInfo_, const allocator_type& allocator = allocator_type());

    ~SearchResult() = default;

    SearchResult(const SearchResult& other);
    SearchResult& operator=(const SearchResult& other);

    SearchResult(SearchResult&& other);
    SearchResult& operator=(SearchResult&& other);

    SearchResult(::zserio::PropagateAllocatorT,
            const SearchResult& other, const allocator_type& allocator);

    void initialize(
            bool hasDistanceInfo_);
    bool isInitialized() const;
    void initializeChildren();

    bool getHasDistanceInfo() const;

    const ::nds::core::geometry::Position2D& getPosition() const;
    ::nds::core::geometry::Position2D& getPosition();
    void setPosition(const ::nds::core::geometry::Position2D& position_);
    void setPosition(::nds::core::geometry::Position2D&& position_);

    const ::nds::core::location::RoadLocationPath& getPath() const;
    ::nds::core::location::RoadLocationPath& getPath();
    void setPath(const ::nds::core::location::RoadLocationPath& path_);
    void setPath(::nds::core::location::RoadLocationPath&& path_);
    bool isPathUsed() const;
    bool isPathSet() const;
    void resetPath();

    ::nds::core::types::DistanceMeters getDistanceToOrigin() const;
    void setDistanceToOrigin(::nds::core::types::DistanceMeters distanceToOrigin_);
    bool isDistanceToOriginUsed() const;
    bool isDistanceToOriginSet() const;
    void resetDistanceToOrigin();

    bool getHasTravelDistance() const;
    void setHasTravelDistance(bool hasTravelDistance_);
    bool isHasTravelDistanceUsed() const;
    bool isHasTravelDistanceSet() const;
    void resetHasTravelDistance();

    ::nds::core::types::DistanceMeters getTravelDistanceToOrigin() const;
    void setTravelDistanceToOrigin(::nds::core::types::DistanceMeters travelDistanceToOrigin_);
    bool isTravelDistanceToOriginUsed() const;
    bool isTravelDistanceToOriginSet() const;
    void resetTravelDistanceToOrigin();

    const ::zserio::string<>& getDisplayString() const;
    ::zserio::string<>& getDisplayString();
    void setDisplayString(const ::zserio::string<>& displayString_);
    void setDisplayString(::zserio::string<>&& displayString_);

    const ::zserio::vector<::nds::search::types::TextRange>& getHighlight() const;
    ::zserio::vector<::nds::search::types::TextRange>& getHighlight();
    void setHighlight(const ::zserio::vector<::nds::search::types::TextRange>& highlight_);
    void setHighlight(::zserio::vector<::nds::search::types::TextRange>&& highlight_);
    bool isHighlightUsed() const;
    bool isHighlightSet() const;
    void resetHighlight();

    ::nds::search::types::SearchResultType getType() const;
    void setType(::nds::search::types::SearchResultType type_);

    const ::nds::core::types::GlobalSourceId& getGlobalSourceId() const;
    ::nds::core::types::GlobalSourceId& getGlobalSourceId();
    void setGlobalSourceId(const ::nds::core::types::GlobalSourceId& globalSourceId_);
    void setGlobalSourceId(::nds::core::types::GlobalSourceId&& globalSourceId_);
    bool isGlobalSourceIdUsed() const;
    bool isGlobalSourceIdSet() const;
    void resetGlobalSourceId();

    const ::nds::system::types::ExternData& getDetailedResultInformation() const;
    ::nds::system::types::ExternData& getDetailedResultInformation();
    void setDetailedResultInformation(const ::nds::system::types::ExternData& detailedResultInformation_);
    void setDetailedResultInformation(::nds::system::types::ExternData&& detailedResultInformation_);
    bool isDetailedResultInformationUsed() const;
    bool isDetailedResultInformationSet() const;
    void resetDetailedResultInformation();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SearchResult& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_highlight
    {
    public:
        using OwnerType = SearchResult;

        static void create(SearchResult& owner,
                ::zserio::vector<::nds::search::types::TextRange>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SearchResult& owner,
                ::zserio::vector<::nds::search::types::TextRange>& array,
                ::nds::search::types::TextRange::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_highlight = ::zserio::Array<::zserio::vector<::nds::search::types::TextRange>, ::zserio::ObjectArrayTraits<::nds::search::types::TextRange, ZserioElementFactory_highlight>, ::zserio::ArrayType::AUTO>;

    ::nds::core::geometry::Position2D readPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Position2D readPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath> readPath(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath> readPath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> readDistanceToOrigin(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> readDistanceToOrigin(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<bool> readHasTravelDistance(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> readTravelDistanceToOrigin(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> readTravelDistanceToOrigin(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::string<> readDisplayString(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_highlight> readHighlight(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_highlight> readHighlight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::search::types::SearchResultType readType(::zserio::BitStreamReader& in);
    ::nds::search::types::SearchResultType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::GlobalSourceId> readGlobalSourceId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> readDetailedResultInformation(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    bool m_hasDistanceInfo_;
    bool m_isInitialized;
    ::nds::core::geometry::Position2D m_position_;
    ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath> m_path_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> m_distanceToOrigin_;
    ::zserio::InplaceOptionalHolder<bool> m_hasTravelDistance_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> m_travelDistanceToOrigin_;
    ::zserio::string<> m_displayString_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_highlight> m_highlight_;
    ::nds::search::types::SearchResultType m_type_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::GlobalSourceId> m_globalSourceId_;
    ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> m_detailedResultInformation_;
};

} // namespace types
} // namespace search
} // namespace nds

#endif // NDS_SEARCH_TYPES_SEARCH_RESULT_H
