/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/signs/warning/WarningSign.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for WarningSign enumeration.
constexpr ::std::array<const char*, 172> EnumTraits<::nds::signs::warning::WarningSign>::names;
constexpr ::std::array<::nds::signs::warning::WarningSign, 172> EnumTraits<::nds::signs::warning::WarningSign>::values;
constexpr const char* EnumTraits<::nds::signs::warning::WarningSign>::enumName;

template <>
size_t enumToOrdinal(::nds::signs::warning::WarningSign value)
{
    switch (value)
    {
    case ::nds::signs::warning::WarningSign::GENERAL_HAZARD:
        return 0;
    case ::nds::signs::warning::WarningSign::PASS_LEFT_OR_RIGHT_OF_OBSTACLE:
        return 1;
    case ::nds::signs::warning::WarningSign::PASS_LEFT_OF_OBSTACLE:
        return 2;
    case ::nds::signs::warning::WarningSign::PASS_RIGHT_OF_OBSTACLE:
        return 3;
    case ::nds::signs::warning::WarningSign::CATTLE:
        return 4;
    case ::nds::signs::warning::WarningSign::ANIMALS:
        return 5;
    case ::nds::signs::warning::WarningSign::ROAD_WORKS:
        return 6;
    case ::nds::signs::warning::WarningSign::LIVING_STREET_ENTRY:
        return 7;
    case ::nds::signs::warning::WarningSign::LIVING_STREET_EXIT:
        return 8;
    case ::nds::signs::warning::WarningSign::CURVE_RIGHT:
        return 9;
    case ::nds::signs::warning::WarningSign::CURVE_LEFT:
        return 10;
    case ::nds::signs::warning::WarningSign::TRUCK_ROLLOVER:
        return 11;
    case ::nds::signs::warning::WarningSign::FOG_AREA:
        return 12;
    case ::nds::signs::warning::WarningSign::CURVE_RIGHT_THEN_LEFT:
        return 13;
    case ::nds::signs::warning::WarningSign::CURVE_LEFT_THEN_RIGHT:
        return 14;
    case ::nds::signs::warning::WarningSign::TIRE_CHAINS_MANDATORY:
        return 15;
    case ::nds::signs::warning::WarningSign::HIJACKING_HOTSPOT:
        return 16;
    case ::nds::signs::warning::WarningSign::CURVY_ROAD:
        return 17;
    case ::nds::signs::warning::WarningSign::REVERSE_BENDS:
        return 18;
    case ::nds::signs::warning::WarningSign::ROUNDABOUT_AHEAD:
        return 19;
    case ::nds::signs::warning::WarningSign::NO_OVERTAKING_FOR_TRUCKS:
        return 20;
    case ::nds::signs::warning::WarningSign::NO_OVERTAKING_FOR_TRUCKS_END:
        return 21;
    case ::nds::signs::warning::WarningSign::DANGEROUS_INTERSECTION:
        return 22;
    case ::nds::signs::warning::WarningSign::OVERPASS_AHEAD:
        return 23;
    case ::nds::signs::warning::WarningSign::TUNNEL:
        return 24;
    case ::nds::signs::warning::WarningSign::FERRY_TERMINAL:
        return 25;
    case ::nds::signs::warning::WarningSign::NARROW_BRIDGE:
        return 26;
    case ::nds::signs::warning::WarningSign::NO_IDLING:
        return 27;
    case ::nds::signs::warning::WarningSign::HUMPBACK_BRIDGE:
        return 28;
    case ::nds::signs::warning::WarningSign::EMBANKMENT_ON_THE_RIGHT:
        return 29;
    case ::nds::signs::warning::WarningSign::EMBANKMENT_ON_THE_LEFT:
        return 30;
    case ::nds::signs::warning::WarningSign::LIGHT_SIGNALS:
        return 31;
    case ::nds::signs::warning::WarningSign::YIELD:
        return 32;
    case ::nds::signs::warning::WarningSign::STOP:
        return 33;
    case ::nds::signs::warning::WarningSign::PRIORITY_ROAD:
        return 34;
    case ::nds::signs::warning::WarningSign::INTERSECTION:
        return 35;
    case ::nds::signs::warning::WarningSign::CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD:
        return 36;
    case ::nds::signs::warning::WarningSign::CROSSING_WITH_PRIORITY_TO_THE_RIGHT:
        return 37;
    case ::nds::signs::warning::WarningSign::BRANCH_TO_THE_RIGHT:
        return 38;
    case ::nds::signs::warning::WarningSign::BRANCH_TO_THE_LEFT:
        return 39;
    case ::nds::signs::warning::WarningSign::CARRIAGEWAY_NARROWS:
        return 40;
    case ::nds::signs::warning::WarningSign::CARRIAGEWAY_NARROWS_RIGHT:
        return 41;
    case ::nds::signs::warning::WarningSign::CARRIAGEWAY_NARROWS_LEFT:
        return 42;
    case ::nds::signs::warning::WarningSign::LANE_MERGE_FROM_RIGHT:
        return 43;
    case ::nds::signs::warning::WarningSign::LANE_MERGE_FROM_LEFT:
        return 44;
    case ::nds::signs::warning::WarningSign::LANE_MERGE_CENTER:
        return 45;
    case ::nds::signs::warning::WarningSign::NO_OVERTAKING:
        return 46;
    case ::nds::signs::warning::WarningSign::NO_OVERTAKING_END:
        return 47;
    case ::nds::signs::warning::WarningSign::PROTECTED_PASSING_END:
        return 48;
    case ::nds::signs::warning::WarningSign::PROTECTED_PASSING:
        return 49;
    case ::nds::signs::warning::WarningSign::PEDESTRIANS:
        return 50;
    case ::nds::signs::warning::WarningSign::PEDESTRIAN_CROSSING:
        return 51;
    case ::nds::signs::warning::WarningSign::CHILDREN:
        return 52;
    case ::nds::signs::warning::WarningSign::SCHOOL_ZONE:
        return 53;
    case ::nds::signs::warning::WarningSign::CYCLISTS:
        return 54;
    case ::nds::signs::warning::WarningSign::TWO_WAY_TRAFFIC:
        return 55;
    case ::nds::signs::warning::WarningSign::RAILROAD_CROSSING_WITH_GATES:
        return 56;
    case ::nds::signs::warning::WarningSign::RAILROAD_CROSSING_WITHOUT_GATES:
        return 57;
    case ::nds::signs::warning::WarningSign::RAILROAD_CROSSING:
        return 58;
    case ::nds::signs::warning::WarningSign::TRAMWAY_CROSSING:
        return 59;
    case ::nds::signs::warning::WarningSign::FALLING_ROCKS:
        return 60;
    case ::nds::signs::warning::WarningSign::FALLING_ROCKS_ON_THE_LEFT:
        return 61;
    case ::nds::signs::warning::WarningSign::FALLING_ROCKS_ON_THE_RIGHT:
        return 62;
    case ::nds::signs::warning::WarningSign::STEEP_DROP_ON_LEFT:
        return 63;
    case ::nds::signs::warning::WarningSign::STEEP_DROP_ON_RIGHT:
        return 64;
    case ::nds::signs::warning::WarningSign::SLIPPERY_ROAD:
        return 65;
    case ::nds::signs::warning::WarningSign::STEEP_INCLINE:
        return 66;
    case ::nds::signs::warning::WarningSign::STEEP_DECLINE:
        return 67;
    case ::nds::signs::warning::WarningSign::UNEVEN_ROAD:
        return 68;
    case ::nds::signs::warning::WarningSign::BUMP:
        return 69;
    case ::nds::signs::warning::WarningSign::DIP:
        return 70;
    case ::nds::signs::warning::WarningSign::ROAD_FLOODS:
        return 71;
    case ::nds::signs::warning::WarningSign::ICY_ROAD:
        return 72;
    case ::nds::signs::warning::WarningSign::WIND:
        return 73;
    case ::nds::signs::warning::WarningSign::TRAFFIC_CONGESTION:
        return 74;
    case ::nds::signs::warning::WarningSign::HIGH_ACCIDENT_AREA:
        return 75;
    case ::nds::signs::warning::WarningSign::CITY_ENTRY:
        return 76;
    case ::nds::signs::warning::WarningSign::AUDIBLE_WARNING:
        return 77;
    case ::nds::signs::warning::WarningSign::END_OF_ALL_RESTRICTIONS:
        return 78;
    case ::nds::signs::warning::WarningSign::PRIORITY_OVER_ONCOMING:
        return 79;
    case ::nds::signs::warning::WarningSign::YIELD_TO_ONCOMING:
        return 80;
    case ::nds::signs::warning::WarningSign::CITY_EXIT:
        return 81;
    case ::nds::signs::warning::WarningSign::VILLAGE_AHEAD:
        return 82;
    case ::nds::signs::warning::WarningSign::SPEED_CAMERA:
        return 83;
    case ::nds::signs::warning::WarningSign::TRAFFIC_ENFORCEMENT_CAMERA:
        return 84;
    case ::nds::signs::warning::WarningSign::SPEED_LIMIT:
        return 85;
    case ::nds::signs::warning::WarningSign::SPEED_LIMIT_END:
        return 86;
    case ::nds::signs::warning::WarningSign::MOVABLE_BRIDGE:
        return 87;
    case ::nds::signs::warning::WarningSign::SLOW_DOWN:
        return 88;
    case ::nds::signs::warning::WarningSign::INTERSECTION_T_RIGHT:
        return 89;
    case ::nds::signs::warning::WarningSign::INTERSECTION_T_LEFT:
        return 90;
    case ::nds::signs::warning::WarningSign::INTERSECTION_T_LEFT_RIGHT:
        return 91;
    case ::nds::signs::warning::WarningSign::INTERSECTION_Y:
        return 92;
    case ::nds::signs::warning::WarningSign::PRIORITY_ROAD_END:
        return 93;
    case ::nds::signs::warning::WarningSign::USE_LOW_GEAR:
        return 94;
    case ::nds::signs::warning::WarningSign::NO_COMPRESSION_BRAKING:
        return 95;
    case ::nds::signs::warning::WarningSign::WAITING_LINE:
        return 96;
    case ::nds::signs::warning::WarningSign::DONT_STOP_ZONE:
        return 97;
    case ::nds::signs::warning::WarningSign::LANE_USED_IN_BOTH_DIRECTIONS:
        return 98;
    case ::nds::signs::warning::WarningSign::HONKING_PROHIBITED:
        return 99;
    case ::nds::signs::warning::WarningSign::FASTEN_SEAT_BELT:
        return 100;
    case ::nds::signs::warning::WarningSign::DEAD_END:
        return 101;
    case ::nds::signs::warning::WarningSign::ADVISORY_SPEED_LIMIT:
        return 102;
    case ::nds::signs::warning::WarningSign::SPEED_LIMIT_NIGHT:
        return 103;
    case ::nds::signs::warning::WarningSign::MINIMUM_SPEED:
        return 104;
    case ::nds::signs::warning::WarningSign::VARIABLE_SPEED_LIMIT:
        return 105;
    case ::nds::signs::warning::WarningSign::VARIABLE:
        return 106;
    case ::nds::signs::warning::WarningSign::UNPROTECTED_LEFT_TURN:
        return 107;
    case ::nds::signs::warning::WarningSign::USE_LOW_GEAR_END:
        return 108;
    case ::nds::signs::warning::WarningSign::NO_COMPRESSION_BRAKING_END:
        return 109;
    case ::nds::signs::warning::WarningSign::DOUBLE_HAIRPIN_CURVE:
        return 110;
    case ::nds::signs::warning::WarningSign::TRIPLE_HAIRPIN_CURVE:
        return 111;
    case ::nds::signs::warning::WarningSign::EMBANKMENT:
        return 112;
    case ::nds::signs::warning::WarningSign::HILL:
        return 113;
    case ::nds::signs::warning::WarningSign::PROTECTED_PASSING_LEFT:
        return 114;
    case ::nds::signs::warning::WarningSign::PROTECTED_PASSING_RIGHT:
        return 115;
    case ::nds::signs::warning::WarningSign::RISK_OF_GROUNDING:
        return 116;
    case ::nds::signs::warning::WarningSign::CURVY_ROAD_LEFT:
        return 117;
    case ::nds::signs::warning::WarningSign::CURVY_ROAD_RIGHT:
        return 118;
    case ::nds::signs::warning::WarningSign::ADVISORY_SPEED_LIMIT_END:
        return 119;
    case ::nds::signs::warning::WarningSign::MOTORWAY:
        return 120;
    case ::nds::signs::warning::WarningSign::MOTORWAY_END:
        return 121;
    case ::nds::signs::warning::WarningSign::ONEWAY:
        return 122;
    case ::nds::signs::warning::WarningSign::BICYCLE_PATH:
        return 123;
    case ::nds::signs::warning::WarningSign::BICYCLE_PATH_END:
        return 124;
    case ::nds::signs::warning::WarningSign::HEIGHT_RESTRICTION:
        return 125;
    case ::nds::signs::warning::WarningSign::LENGTH_RESTRICTION:
        return 126;
    case ::nds::signs::warning::WarningSign::WIDTH_RESTRICTION:
        return 127;
    case ::nds::signs::warning::WarningSign::WEIGHT_RESTRICTION:
        return 128;
    case ::nds::signs::warning::WarningSign::PASSING_RESTRICTION:
        return 129;
    case ::nds::signs::warning::WarningSign::TURN_RESTRICTION:
        return 130;
    case ::nds::signs::warning::WarningSign::CARS_PROHIBITED:
        return 131;
    case ::nds::signs::warning::WarningSign::VEHICLES_PROHIBITED:
        return 132;
    case ::nds::signs::warning::WarningSign::PEDESTRIANS_PROHIBITED:
        return 133;
    case ::nds::signs::warning::WarningSign::PEDESTRIAN_ZONE:
        return 134;
    case ::nds::signs::warning::WarningSign::PEDESTRIAN_ZONE_END:
        return 135;
    case ::nds::signs::warning::WarningSign::DO_NOT_ENTER:
        return 136;
    case ::nds::signs::warning::WarningSign::TRUCK_SPEED_LIMIT:
        return 137;
    case ::nds::signs::warning::WarningSign::TRUCK_SPEED_LIMIT_END:
        return 138;
    case ::nds::signs::warning::WarningSign::MINIMUM_SPEED_END:
        return 139;
    case ::nds::signs::warning::WarningSign::HAMLET_ENTRY:
        return 140;
    case ::nds::signs::warning::WarningSign::HAMLET_EXIT:
        return 141;
    case ::nds::signs::warning::WarningSign::MOTOR_VEHICLE_ROAD:
        return 142;
    case ::nds::signs::warning::WarningSign::MOTOR_VEHICLE_ROAD_END:
        return 143;
    case ::nds::signs::warning::WarningSign::PEDESTRIAN_PATH:
        return 144;
    case ::nds::signs::warning::WarningSign::PEDESTRIAN_PATH_END:
        return 145;
    case ::nds::signs::warning::WarningSign::GOOD_LUCK:
        return 146;
    case ::nds::signs::warning::WarningSign::NO_TURN_ON_RED:
        return 147;
    case ::nds::signs::warning::WarningSign::TURN_ON_RED_ALLOWED:
        return 148;
    case ::nds::signs::warning::WarningSign::NO_LEFT_TURN:
        return 149;
    case ::nds::signs::warning::WarningSign::NO_RIGHT_TURN:
        return 150;
    case ::nds::signs::warning::WarningSign::NO_STRAIGHT_THROUGH:
        return 151;
    case ::nds::signs::warning::WarningSign::NO_LEFT_OR_RIGHT_TURN:
        return 152;
    case ::nds::signs::warning::WarningSign::NO_STRAIGHT_THROUGH_OR_LEFT_TURN:
        return 153;
    case ::nds::signs::warning::WarningSign::NO_STRAIGHT_THROUGH_OR_RIGHT_TURN:
        return 154;
    case ::nds::signs::warning::WarningSign::STRAIGHT_THROUGH_ONLY:
        return 155;
    case ::nds::signs::warning::WarningSign::LEFT_TURN_ONLY:
        return 156;
    case ::nds::signs::warning::WarningSign::RIGHT_TURN_ONLY:
        return 157;
    case ::nds::signs::warning::WarningSign::STRAIGHT_THROUGH_OR_LEFT_TURN_ONLY:
        return 158;
    case ::nds::signs::warning::WarningSign::STRAIGHT_THROUGH_OR_RIGHT_TURN_ONLY:
        return 159;
    case ::nds::signs::warning::WarningSign::LEFT_OR_RIGHT_TURN_ONLY:
        return 160;
    case ::nds::signs::warning::WarningSign::NO_U_TURN:
        return 161;
    case ::nds::signs::warning::WarningSign::U_TURN_ONLY:
        return 162;
    case ::nds::signs::warning::WarningSign::U_TURN_ALLOWED:
        return 163;
    case ::nds::signs::warning::WarningSign::CROSSING_WITH_PRIORITY_TO_THE_LEFT:
        return 164;
    case ::nds::signs::warning::WarningSign::UNPROTECTED_RIGHT_TURN:
        return 165;
    case ::nds::signs::warning::WarningSign::ROUNDABOUT:
        return 166;
    case ::nds::signs::warning::WarningSign::SPEED_LIMIT_ZONE:
        return 167;
    case ::nds::signs::warning::WarningSign::SPEED_LIMIT_ZONE_END:
        return 168;
    case ::nds::signs::warning::WarningSign::BICYCLE_ZONE:
        return 169;
    case ::nds::signs::warning::WarningSign::BICYCLE_ZONE_END:
        return 170;
    case ::nds::signs::warning::WarningSign::SCHOOL_ZONE_END:
        return 171;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration WarningSign: ") <<
                static_cast<typename ::std::underlying_type<::nds::signs::warning::WarningSign>::type>(value) << "!";
    }
}

template <>
::nds::signs::warning::WarningSign valueToEnum(
        typename ::std::underlying_type<::nds::signs::warning::WarningSign>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
    case UINT16_C(18):
    case UINT16_C(19):
    case UINT16_C(20):
    case UINT16_C(21):
    case UINT16_C(22):
    case UINT16_C(23):
    case UINT16_C(24):
    case UINT16_C(25):
    case UINT16_C(26):
    case UINT16_C(27):
    case UINT16_C(28):
    case UINT16_C(29):
    case UINT16_C(30):
    case UINT16_C(31):
    case UINT16_C(32):
    case UINT16_C(33):
    case UINT16_C(34):
    case UINT16_C(35):
    case UINT16_C(36):
    case UINT16_C(37):
    case UINT16_C(38):
    case UINT16_C(39):
    case UINT16_C(40):
    case UINT16_C(41):
    case UINT16_C(42):
    case UINT16_C(43):
    case UINT16_C(44):
    case UINT16_C(45):
    case UINT16_C(46):
    case UINT16_C(47):
    case UINT16_C(48):
    case UINT16_C(49):
    case UINT16_C(50):
    case UINT16_C(51):
    case UINT16_C(52):
    case UINT16_C(53):
    case UINT16_C(54):
    case UINT16_C(55):
    case UINT16_C(56):
    case UINT16_C(57):
    case UINT16_C(58):
    case UINT16_C(59):
    case UINT16_C(60):
    case UINT16_C(61):
    case UINT16_C(62):
    case UINT16_C(63):
    case UINT16_C(64):
    case UINT16_C(65):
    case UINT16_C(66):
    case UINT16_C(67):
    case UINT16_C(68):
    case UINT16_C(69):
    case UINT16_C(70):
    case UINT16_C(71):
    case UINT16_C(72):
    case UINT16_C(73):
    case UINT16_C(74):
    case UINT16_C(75):
    case UINT16_C(76):
    case UINT16_C(77):
    case UINT16_C(78):
    case UINT16_C(79):
    case UINT16_C(80):
    case UINT16_C(81):
    case UINT16_C(82):
    case UINT16_C(83):
    case UINT16_C(84):
    case UINT16_C(85):
    case UINT16_C(86):
    case UINT16_C(87):
    case UINT16_C(88):
    case UINT16_C(89):
    case UINT16_C(90):
    case UINT16_C(91):
    case UINT16_C(92):
    case UINT16_C(93):
    case UINT16_C(94):
    case UINT16_C(95):
    case UINT16_C(96):
    case UINT16_C(97):
    case UINT16_C(98):
    case UINT16_C(99):
    case UINT16_C(100):
    case UINT16_C(101):
    case UINT16_C(102):
    case UINT16_C(103):
    case UINT16_C(104):
    case UINT16_C(105):
    case UINT16_C(106):
    case UINT16_C(107):
    case UINT16_C(108):
    case UINT16_C(109):
    case UINT16_C(110):
    case UINT16_C(111):
    case UINT16_C(112):
    case UINT16_C(113):
    case UINT16_C(114):
    case UINT16_C(115):
    case UINT16_C(116):
    case UINT16_C(117):
    case UINT16_C(118):
    case UINT16_C(119):
    case UINT16_C(120):
    case UINT16_C(121):
    case UINT16_C(122):
    case UINT16_C(123):
    case UINT16_C(124):
    case UINT16_C(125):
    case UINT16_C(126):
    case UINT16_C(127):
    case UINT16_C(128):
    case UINT16_C(129):
    case UINT16_C(130):
    case UINT16_C(131):
    case UINT16_C(132):
    case UINT16_C(133):
    case UINT16_C(134):
    case UINT16_C(135):
    case UINT16_C(136):
    case UINT16_C(137):
    case UINT16_C(138):
    case UINT16_C(139):
    case UINT16_C(140):
    case UINT16_C(141):
    case UINT16_C(142):
    case UINT16_C(143):
    case UINT16_C(144):
    case UINT16_C(145):
    case UINT16_C(146):
    case UINT16_C(147):
    case UINT16_C(148):
    case UINT16_C(149):
    case UINT16_C(150):
    case UINT16_C(151):
    case UINT16_C(152):
    case UINT16_C(153):
    case UINT16_C(154):
    case UINT16_C(155):
    case UINT16_C(156):
    case UINT16_C(157):
    case UINT16_C(158):
    case UINT16_C(159):
    case UINT16_C(160):
    case UINT16_C(161):
    case UINT16_C(162):
    case UINT16_C(163):
    case UINT16_C(164):
    case UINT16_C(165):
    case UINT16_C(166):
    case UINT16_C(167):
    case UINT16_C(168):
    case UINT16_C(169):
    case UINT16_C(170):
    case UINT16_C(171):
        return static_cast<::nds::signs::warning::WarningSign>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration WarningSign: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::signs::warning::WarningSign>(::nds::signs::warning::WarningSign value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::signs::warning::WarningSign value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::signs::warning::WarningSign>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::signs::warning::WarningSign value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::signs::warning::WarningSign value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::signs::warning::WarningSign>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::signs::warning::WarningSign value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::signs::warning::WarningSign value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::signs::warning::WarningSign read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::signs::warning::WarningSign>(
            static_cast<typename ::std::underlying_type<::nds::signs::warning::WarningSign>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::signs::warning::WarningSign read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::signs::warning::WarningSign>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::signs::warning::WarningSign>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::signs::warning::WarningSign value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::signs::warning::WarningSign value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::signs::warning::WarningSign>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/signs/warning/SupplementaryWarningSign.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for SupplementaryWarningSign enumeration.
constexpr ::std::array<const char*, 9> EnumTraits<::nds::signs::warning::SupplementaryWarningSign>::names;
constexpr ::std::array<::nds::signs::warning::SupplementaryWarningSign, 9> EnumTraits<::nds::signs::warning::SupplementaryWarningSign>::values;
constexpr const char* EnumTraits<::nds::signs::warning::SupplementaryWarningSign>::enumName;

template <>
size_t enumToOrdinal(::nds::signs::warning::SupplementaryWarningSign value)
{
    switch (value)
    {
    case ::nds::signs::warning::SupplementaryWarningSign::LEFT_TURN:
        return 0;
    case ::nds::signs::warning::SupplementaryWarningSign::RIGHT_TURN:
        return 1;
    case ::nds::signs::warning::SupplementaryWarningSign::RIGHT:
        return 2;
    case ::nds::signs::warning::SupplementaryWarningSign::LEFT:
        return 3;
    case ::nds::signs::warning::SupplementaryWarningSign::FOR_DISTANCE:
        return 4;
    case ::nds::signs::warning::SupplementaryWarningSign::IN_DISTANCE:
        return 5;
    case ::nds::signs::warning::SupplementaryWarningSign::TIME_RANGE:
        return 6;
    case ::nds::signs::warning::SupplementaryWarningSign::ATTENTION:
        return 7;
    case ::nds::signs::warning::SupplementaryWarningSign::ALL_WAY_STOP:
        return 8;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration SupplementaryWarningSign: ") <<
                static_cast<typename ::std::underlying_type<::nds::signs::warning::SupplementaryWarningSign>::type>(value) << "!";
    }
}

template <>
::nds::signs::warning::SupplementaryWarningSign valueToEnum(
        typename ::std::underlying_type<::nds::signs::warning::SupplementaryWarningSign>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
        return static_cast<::nds::signs::warning::SupplementaryWarningSign>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration SupplementaryWarningSign: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::signs::warning::SupplementaryWarningSign>(::nds::signs::warning::SupplementaryWarningSign value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::signs::warning::SupplementaryWarningSign value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::signs::warning::SupplementaryWarningSign>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::signs::warning::SupplementaryWarningSign value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::signs::warning::SupplementaryWarningSign value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::signs::warning::SupplementaryWarningSign>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::signs::warning::SupplementaryWarningSign value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::signs::warning::SupplementaryWarningSign value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::signs::warning::SupplementaryWarningSign read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::signs::warning::SupplementaryWarningSign>(
            static_cast<typename ::std::underlying_type<::nds::signs::warning::SupplementaryWarningSign>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::signs::warning::SupplementaryWarningSign read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::signs::warning::SupplementaryWarningSign>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::signs::warning::SupplementaryWarningSign>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::signs::warning::SupplementaryWarningSign value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::signs::warning::SupplementaryWarningSign value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::signs::warning::SupplementaryWarningSign>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/signs/warning/VariableWarningSignProperties.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for VariableWarningSignProperties enumeration.
constexpr ::std::array<const char*, 2> EnumTraits<::nds::signs::warning::VariableWarningSignProperties>::names;
constexpr ::std::array<::nds::signs::warning::VariableWarningSignProperties, 2> EnumTraits<::nds::signs::warning::VariableWarningSignProperties>::values;
constexpr const char* EnumTraits<::nds::signs::warning::VariableWarningSignProperties>::enumName;

template <>
size_t enumToOrdinal(::nds::signs::warning::VariableWarningSignProperties value)
{
    switch (value)
    {
    case ::nds::signs::warning::VariableWarningSignProperties::MECHANIC_ELEMENTS:
        return 0;
    case ::nds::signs::warning::VariableWarningSignProperties::LIGHT_ELEMENTS:
        return 1;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration VariableWarningSignProperties: ") <<
                static_cast<typename ::std::underlying_type<::nds::signs::warning::VariableWarningSignProperties>::type>(value) << "!";
    }
}

template <>
::nds::signs::warning::VariableWarningSignProperties valueToEnum(
        typename ::std::underlying_type<::nds::signs::warning::VariableWarningSignProperties>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
        return static_cast<::nds::signs::warning::VariableWarningSignProperties>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration VariableWarningSignProperties: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::signs::warning::VariableWarningSignProperties>(::nds::signs::warning::VariableWarningSignProperties value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::signs::warning::VariableWarningSignProperties value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::signs::warning::VariableWarningSignProperties>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::signs::warning::VariableWarningSignProperties)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::signs::warning::VariableWarningSignProperties value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::signs::warning::VariableWarningSignProperties>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::signs::warning::VariableWarningSignProperties value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::signs::warning::VariableWarningSignProperties value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::signs::warning::VariableWarningSignProperties read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::signs::warning::VariableWarningSignProperties>(
            static_cast<typename ::std::underlying_type<::nds::signs::warning::VariableWarningSignProperties>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::signs::warning::VariableWarningSignProperties read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::signs::warning::VariableWarningSignProperties>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::signs::warning::VariableWarningSignProperties>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::signs::warning::VariableWarningSignProperties value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::signs::warning::VariableWarningSignProperties value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::signs::warning::VariableWarningSignProperties>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/signs/warning/ClassicAdasisWarningSign.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for ClassicAdasisWarningSign enumeration.
constexpr ::std::array<const char*, 147> EnumTraits<::nds::signs::warning::ClassicAdasisWarningSign>::names;
constexpr ::std::array<::nds::signs::warning::ClassicAdasisWarningSign, 147> EnumTraits<::nds::signs::warning::ClassicAdasisWarningSign>::values;
constexpr const char* EnumTraits<::nds::signs::warning::ClassicAdasisWarningSign>::enumName;

template <>
size_t enumToOrdinal(::nds::signs::warning::ClassicAdasisWarningSign value)
{
    switch (value)
    {
    case ::nds::signs::warning::ClassicAdasisWarningSign::GENERAL_HAZARD:
        return 0;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PASS_LEFT_OR_RIGHT_OF_OBSTACLE:
        return 1;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PASS_LEFT_OF_OBSTACLE:
        return 2;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PASS_RIGHT_OF_OBSTACLE:
        return 3;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CATTLE:
        return 4;
    case ::nds::signs::warning::ClassicAdasisWarningSign::ANIMALS:
        return 5;
    case ::nds::signs::warning::ClassicAdasisWarningSign::ROAD_WORKS:
        return 6;
    case ::nds::signs::warning::ClassicAdasisWarningSign::LIVING_STREET_ENTRY:
        return 7;
    case ::nds::signs::warning::ClassicAdasisWarningSign::LIVING_STREET_EXIT:
        return 8;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CURVE_RIGHT:
        return 9;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CURVE_LEFT:
        return 10;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TRUCK_ROLLOVER:
        return 11;
    case ::nds::signs::warning::ClassicAdasisWarningSign::FOG_AREA:
        return 12;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CURVE_RIGHT_THEN_LEFT:
        return 13;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CURVE_LEFT_THEN_RIGHT:
        return 14;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TIRE_CHAINS_MANDATORY:
        return 15;
    case ::nds::signs::warning::ClassicAdasisWarningSign::HIJACKING_HOTSPOT:
        return 16;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CURVY_ROAD:
        return 17;
    case ::nds::signs::warning::ClassicAdasisWarningSign::REVERSE_BENDS:
        return 18;
    case ::nds::signs::warning::ClassicAdasisWarningSign::ROUNDABOUT_AHEAD:
        return 19;
    case ::nds::signs::warning::ClassicAdasisWarningSign::NO_OVERTAKING_FOR_TRUCKS:
        return 20;
    case ::nds::signs::warning::ClassicAdasisWarningSign::NO_OVERTAKING_FOR_TRUCKS_END:
        return 21;
    case ::nds::signs::warning::ClassicAdasisWarningSign::DANGEROUS_INTERSECTION:
        return 22;
    case ::nds::signs::warning::ClassicAdasisWarningSign::OVERPASS_AHEAD:
        return 23;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TUNNEL:
        return 24;
    case ::nds::signs::warning::ClassicAdasisWarningSign::FERRY_TERMINAL:
        return 25;
    case ::nds::signs::warning::ClassicAdasisWarningSign::NARROW_BRIDGE:
        return 26;
    case ::nds::signs::warning::ClassicAdasisWarningSign::NO_IDLING:
        return 27;
    case ::nds::signs::warning::ClassicAdasisWarningSign::HUMPBACK_BRIDGE:
        return 28;
    case ::nds::signs::warning::ClassicAdasisWarningSign::EMBANKMENT_ON_THE_RIGHT:
        return 29;
    case ::nds::signs::warning::ClassicAdasisWarningSign::EMBANKMENT_ON_THE_LEFT:
        return 30;
    case ::nds::signs::warning::ClassicAdasisWarningSign::LIGHT_SIGNALS:
        return 31;
    case ::nds::signs::warning::ClassicAdasisWarningSign::YIELD:
        return 32;
    case ::nds::signs::warning::ClassicAdasisWarningSign::STOP:
        return 33;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PRIORITY_ROAD:
        return 34;
    case ::nds::signs::warning::ClassicAdasisWarningSign::INTERSECTION:
        return 35;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD:
        return 36;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CROSSING_WITH_PRIORITY_TO_THE_RIGHT:
        return 37;
    case ::nds::signs::warning::ClassicAdasisWarningSign::BRANCH_TO_THE_RIGHT:
        return 38;
    case ::nds::signs::warning::ClassicAdasisWarningSign::BRANCH_TO_THE_LEFT:
        return 39;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CARRIAGEWAY_NARROWS:
        return 40;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CARRIAGEWAY_NARROWS_RIGHT:
        return 41;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CARRIAGEWAY_NARROWS_LEFT:
        return 42;
    case ::nds::signs::warning::ClassicAdasisWarningSign::LANE_MERGE_FROM_RIGHT:
        return 43;
    case ::nds::signs::warning::ClassicAdasisWarningSign::LANE_MERGE_FROM_LEFT:
        return 44;
    case ::nds::signs::warning::ClassicAdasisWarningSign::LANE_MERGE_CENTER:
        return 45;
    case ::nds::signs::warning::ClassicAdasisWarningSign::NO_OVERTAKING:
        return 46;
    case ::nds::signs::warning::ClassicAdasisWarningSign::NO_OVERTAKING_END:
        return 47;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PROTECTED_PASSING_END:
        return 48;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PROTECTED_PASSING:
        return 49;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PEDESTRIANS:
        return 50;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PEDESTRIAN_CROSSING:
        return 51;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CHILDREN:
        return 52;
    case ::nds::signs::warning::ClassicAdasisWarningSign::SCHOOL_ZONE:
        return 53;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CYCLISTS:
        return 54;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TWO_WAY_TRAFFIC:
        return 55;
    case ::nds::signs::warning::ClassicAdasisWarningSign::RAILROAD_CROSSING_WITH_GATES:
        return 56;
    case ::nds::signs::warning::ClassicAdasisWarningSign::RAILROAD_CROSSING_WITHOUT_GATES:
        return 57;
    case ::nds::signs::warning::ClassicAdasisWarningSign::RAILROAD_CROSSING:
        return 58;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TRAMWAY_CROSSING:
        return 59;
    case ::nds::signs::warning::ClassicAdasisWarningSign::FALLING_ROCKS:
        return 60;
    case ::nds::signs::warning::ClassicAdasisWarningSign::FALLING_ROCKS_ON_THE_LEFT:
        return 61;
    case ::nds::signs::warning::ClassicAdasisWarningSign::FALLING_ROCKS_ON_THE_RIGHT:
        return 62;
    case ::nds::signs::warning::ClassicAdasisWarningSign::STEEP_DROP_ON_LEFT:
        return 63;
    case ::nds::signs::warning::ClassicAdasisWarningSign::STEEP_DROP_ON_RIGHT:
        return 64;
    case ::nds::signs::warning::ClassicAdasisWarningSign::SLIPPERY_ROAD:
        return 65;
    case ::nds::signs::warning::ClassicAdasisWarningSign::STEEP_INCLINE:
        return 66;
    case ::nds::signs::warning::ClassicAdasisWarningSign::STEEP_DECLINE:
        return 67;
    case ::nds::signs::warning::ClassicAdasisWarningSign::UNEVEN_ROAD:
        return 68;
    case ::nds::signs::warning::ClassicAdasisWarningSign::BUMP:
        return 69;
    case ::nds::signs::warning::ClassicAdasisWarningSign::DIP:
        return 70;
    case ::nds::signs::warning::ClassicAdasisWarningSign::ROAD_FLOODS:
        return 71;
    case ::nds::signs::warning::ClassicAdasisWarningSign::ICY_ROAD:
        return 72;
    case ::nds::signs::warning::ClassicAdasisWarningSign::WIND:
        return 73;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TRAFFIC_CONGESTION:
        return 74;
    case ::nds::signs::warning::ClassicAdasisWarningSign::HIGH_ACCIDENT_AREA:
        return 75;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CITY_ENTRY:
        return 76;
    case ::nds::signs::warning::ClassicAdasisWarningSign::AUDIBLE_WARNING:
        return 77;
    case ::nds::signs::warning::ClassicAdasisWarningSign::END_OF_ALL_RESTRICTIONS:
        return 78;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PRIORITY_OVER_ONCOMING:
        return 79;
    case ::nds::signs::warning::ClassicAdasisWarningSign::YIELD_TO_ONCOMING:
        return 80;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CITY_EXIT:
        return 81;
    case ::nds::signs::warning::ClassicAdasisWarningSign::VILLAGE_AHEAD:
        return 82;
    case ::nds::signs::warning::ClassicAdasisWarningSign::SPEED_CAMERA:
        return 83;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TRAFFIC_ENFORCEMENT_CAMERA:
        return 84;
    case ::nds::signs::warning::ClassicAdasisWarningSign::SPEED_LIMIT:
        return 85;
    case ::nds::signs::warning::ClassicAdasisWarningSign::SPEED_LIMIT_END:
        return 86;
    case ::nds::signs::warning::ClassicAdasisWarningSign::MOVABLE_BRIDGE:
        return 87;
    case ::nds::signs::warning::ClassicAdasisWarningSign::SLOW_DOWN:
        return 88;
    case ::nds::signs::warning::ClassicAdasisWarningSign::INTERSECTION_T_RIGHT:
        return 89;
    case ::nds::signs::warning::ClassicAdasisWarningSign::INTERSECTION_T_LEFT:
        return 90;
    case ::nds::signs::warning::ClassicAdasisWarningSign::INTERSECTION_T_LEFT_RIGHT:
        return 91;
    case ::nds::signs::warning::ClassicAdasisWarningSign::INTERSECTION_Y:
        return 92;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PRIORITY_ROAD_END:
        return 93;
    case ::nds::signs::warning::ClassicAdasisWarningSign::USE_LOW_GEAR:
        return 94;
    case ::nds::signs::warning::ClassicAdasisWarningSign::NO_COMPRESSION_BRAKING:
        return 95;
    case ::nds::signs::warning::ClassicAdasisWarningSign::WAITING_LINE:
        return 96;
    case ::nds::signs::warning::ClassicAdasisWarningSign::DONT_STOP_ZONE:
        return 97;
    case ::nds::signs::warning::ClassicAdasisWarningSign::LANE_USED_IN_BOTH_DIRECTIONS:
        return 98;
    case ::nds::signs::warning::ClassicAdasisWarningSign::HONKING_PROHIBITED:
        return 99;
    case ::nds::signs::warning::ClassicAdasisWarningSign::FASTEN_SEAT_BELT:
        return 100;
    case ::nds::signs::warning::ClassicAdasisWarningSign::DEAD_END:
        return 101;
    case ::nds::signs::warning::ClassicAdasisWarningSign::ADVISORY_SPEED_LIMIT:
        return 102;
    case ::nds::signs::warning::ClassicAdasisWarningSign::SPEED_LIMIT_NIGHT:
        return 103;
    case ::nds::signs::warning::ClassicAdasisWarningSign::MINIMUM_SPEED:
        return 104;
    case ::nds::signs::warning::ClassicAdasisWarningSign::VARIABLE_SPEED_LIMIT:
        return 105;
    case ::nds::signs::warning::ClassicAdasisWarningSign::VARIABLE:
        return 106;
    case ::nds::signs::warning::ClassicAdasisWarningSign::UNPROTECTED_LEFT_TURN:
        return 107;
    case ::nds::signs::warning::ClassicAdasisWarningSign::USE_LOW_GEAR_END:
        return 108;
    case ::nds::signs::warning::ClassicAdasisWarningSign::NO_COMPRESSION_BRAKING_END:
        return 109;
    case ::nds::signs::warning::ClassicAdasisWarningSign::DOUBLE_HAIRPIN_CURVE:
        return 110;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TRIPLE_HAIRPIN_CURVE:
        return 111;
    case ::nds::signs::warning::ClassicAdasisWarningSign::EMBANKMENT:
        return 112;
    case ::nds::signs::warning::ClassicAdasisWarningSign::HILL:
        return 113;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PROTECTED_PASSING_LEFT:
        return 114;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PROTECTED_PASSING_RIGHT:
        return 115;
    case ::nds::signs::warning::ClassicAdasisWarningSign::RISK_OF_GROUNDING:
        return 116;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CURVY_ROAD_LEFT:
        return 117;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CURVY_ROAD_RIGHT:
        return 118;
    case ::nds::signs::warning::ClassicAdasisWarningSign::ADVISORY_SPEED_LIMIT_END:
        return 119;
    case ::nds::signs::warning::ClassicAdasisWarningSign::MOTORWAY:
        return 120;
    case ::nds::signs::warning::ClassicAdasisWarningSign::MOTORWAY_END:
        return 121;
    case ::nds::signs::warning::ClassicAdasisWarningSign::ONEWAY:
        return 122;
    case ::nds::signs::warning::ClassicAdasisWarningSign::BICYCLE_PATH:
        return 123;
    case ::nds::signs::warning::ClassicAdasisWarningSign::BICYCLE_PATH_END:
        return 124;
    case ::nds::signs::warning::ClassicAdasisWarningSign::HEIGHT_RESTRICTION:
        return 125;
    case ::nds::signs::warning::ClassicAdasisWarningSign::LENGTH_RESTRICTION:
        return 126;
    case ::nds::signs::warning::ClassicAdasisWarningSign::WIDTH_RESTRICTION:
        return 127;
    case ::nds::signs::warning::ClassicAdasisWarningSign::WEIGHT_RESTRICTION:
        return 128;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PASSING_RESTRICTION:
        return 129;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TURN_RESTRICTION:
        return 130;
    case ::nds::signs::warning::ClassicAdasisWarningSign::CARS_PROHIBITED:
        return 131;
    case ::nds::signs::warning::ClassicAdasisWarningSign::VEHICLES_PROHIBITED:
        return 132;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PEDESTRIANS_PROHIBITED:
        return 133;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PEDESTRIAN_ZONE:
        return 134;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PEDESTRIAN_ZONE_END:
        return 135;
    case ::nds::signs::warning::ClassicAdasisWarningSign::DO_NOT_ENTER:
        return 136;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TRUCK_SPEED_LIMIT:
        return 137;
    case ::nds::signs::warning::ClassicAdasisWarningSign::TRUCK_SPEED_LIMIT_END:
        return 138;
    case ::nds::signs::warning::ClassicAdasisWarningSign::MINIMUM_SPEED_END:
        return 139;
    case ::nds::signs::warning::ClassicAdasisWarningSign::HAMLET_ENTRY:
        return 140;
    case ::nds::signs::warning::ClassicAdasisWarningSign::HAMLET_EXIT:
        return 141;
    case ::nds::signs::warning::ClassicAdasisWarningSign::MOTOR_VEHICLE_ROAD:
        return 142;
    case ::nds::signs::warning::ClassicAdasisWarningSign::MOTOR_VEHICLE_ROAD_END:
        return 143;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PEDESTRIAN_PATH:
        return 144;
    case ::nds::signs::warning::ClassicAdasisWarningSign::PEDESTRIAN_PATH_END:
        return 145;
    case ::nds::signs::warning::ClassicAdasisWarningSign::GOOD_LUCK:
        return 146;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ClassicAdasisWarningSign: ") <<
                static_cast<typename ::std::underlying_type<::nds::signs::warning::ClassicAdasisWarningSign>::type>(value) << "!";
    }
}

template <>
::nds::signs::warning::ClassicAdasisWarningSign valueToEnum(
        typename ::std::underlying_type<::nds::signs::warning::ClassicAdasisWarningSign>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
    case UINT8_C(5):
    case UINT8_C(6):
    case UINT8_C(7):
    case UINT8_C(8):
    case UINT8_C(9):
    case UINT8_C(10):
    case UINT8_C(11):
    case UINT8_C(12):
    case UINT8_C(13):
    case UINT8_C(14):
    case UINT8_C(15):
    case UINT8_C(16):
    case UINT8_C(17):
    case UINT8_C(18):
    case UINT8_C(19):
    case UINT8_C(20):
    case UINT8_C(21):
    case UINT8_C(22):
    case UINT8_C(23):
    case UINT8_C(24):
    case UINT8_C(25):
    case UINT8_C(26):
    case UINT8_C(27):
    case UINT8_C(28):
    case UINT8_C(29):
    case UINT8_C(30):
    case UINT8_C(31):
    case UINT8_C(32):
    case UINT8_C(33):
    case UINT8_C(34):
    case UINT8_C(35):
    case UINT8_C(36):
    case UINT8_C(37):
    case UINT8_C(38):
    case UINT8_C(39):
    case UINT8_C(40):
    case UINT8_C(41):
    case UINT8_C(42):
    case UINT8_C(43):
    case UINT8_C(44):
    case UINT8_C(45):
    case UINT8_C(46):
    case UINT8_C(47):
    case UINT8_C(48):
    case UINT8_C(49):
    case UINT8_C(50):
    case UINT8_C(51):
    case UINT8_C(52):
    case UINT8_C(53):
    case UINT8_C(54):
    case UINT8_C(55):
    case UINT8_C(56):
    case UINT8_C(57):
    case UINT8_C(58):
    case UINT8_C(59):
    case UINT8_C(60):
    case UINT8_C(61):
    case UINT8_C(62):
    case UINT8_C(63):
    case UINT8_C(64):
    case UINT8_C(66):
    case UINT8_C(67):
    case UINT8_C(68):
    case UINT8_C(69):
    case UINT8_C(70):
    case UINT8_C(71):
    case UINT8_C(72):
    case UINT8_C(73):
    case UINT8_C(74):
    case UINT8_C(75):
    case UINT8_C(76):
    case UINT8_C(77):
    case UINT8_C(78):
    case UINT8_C(79):
    case UINT8_C(81):
    case UINT8_C(82):
    case UINT8_C(83):
    case UINT8_C(84):
    case UINT8_C(85):
    case UINT8_C(86):
    case UINT8_C(87):
    case UINT8_C(88):
    case UINT8_C(89):
    case UINT8_C(90):
    case UINT8_C(91):
    case UINT8_C(92):
    case UINT8_C(93):
    case UINT8_C(94):
    case UINT8_C(95):
    case UINT8_C(96):
    case UINT8_C(97):
    case UINT8_C(98):
    case UINT8_C(99):
    case UINT8_C(100):
    case UINT8_C(101):
    case UINT8_C(102):
    case UINT8_C(103):
    case UINT8_C(104):
    case UINT8_C(105):
    case UINT8_C(106):
    case UINT8_C(107):
    case UINT8_C(108):
    case UINT8_C(109):
    case UINT8_C(110):
    case UINT8_C(111):
    case UINT8_C(112):
    case UINT8_C(113):
    case UINT8_C(114):
    case UINT8_C(115):
    case UINT8_C(116):
    case UINT8_C(117):
    case UINT8_C(118):
    case UINT8_C(119):
    case UINT8_C(120):
    case UINT8_C(122):
    case UINT8_C(123):
    case UINT8_C(124):
    case UINT8_C(125):
    case UINT8_C(126):
    case UINT8_C(127):
    case UINT8_C(128):
    case UINT8_C(129):
    case UINT8_C(130):
    case UINT8_C(131):
    case UINT8_C(132):
    case UINT8_C(133):
    case UINT8_C(134):
    case UINT8_C(135):
    case UINT8_C(136):
    case UINT8_C(137):
    case UINT8_C(138):
    case UINT8_C(139):
    case UINT8_C(140):
    case UINT8_C(141):
    case UINT8_C(142):
    case UINT8_C(143):
    case UINT8_C(144):
    case UINT8_C(145):
    case UINT8_C(146):
    case UINT8_C(147):
    case UINT8_C(148):
    case UINT8_C(255):
        return static_cast<::nds::signs::warning::ClassicAdasisWarningSign>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ClassicAdasisWarningSign: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::signs::warning::ClassicAdasisWarningSign>(::nds::signs::warning::ClassicAdasisWarningSign value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::signs::warning::ClassicAdasisWarningSign value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::signs::warning::ClassicAdasisWarningSign>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::signs::warning::ClassicAdasisWarningSign)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::signs::warning::ClassicAdasisWarningSign value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::signs::warning::ClassicAdasisWarningSign>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::signs::warning::ClassicAdasisWarningSign value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::signs::warning::ClassicAdasisWarningSign value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::signs::warning::ClassicAdasisWarningSign read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::signs::warning::ClassicAdasisWarningSign>(
            static_cast<typename ::std::underlying_type<::nds::signs::warning::ClassicAdasisWarningSign>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::signs::warning::ClassicAdasisWarningSign read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::signs::warning::ClassicAdasisWarningSign>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::signs::warning::ClassicAdasisWarningSign>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::signs::warning::ClassicAdasisWarningSign value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::signs::warning::ClassicAdasisWarningSign value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::signs::warning::ClassicAdasisWarningSign>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio
