/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SIGNS_WARNING_SUPPLEMENTARY_WARNING_SIGN_H
#define NDS_SIGNS_WARNING_SUPPLEMENTARY_WARNING_SIGN_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace signs
{
namespace warning
{

enum class SupplementaryWarningSign : uint16_t
{
    LEFT_TURN = UINT16_C(0),
    RIGHT_TURN = UINT16_C(1),
    RIGHT = UINT16_C(2),
    LEFT = UINT16_C(3),
    FOR_DISTANCE = UINT16_C(4),
    IN_DISTANCE = UINT16_C(5),
    TIME_RANGE = UINT16_C(6),
    ATTENTION = UINT16_C(7),
    ALL_WAY_STOP = UINT16_C(8)
};

} // namespace warning
} // namespace signs
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for SupplementaryWarningSign enumeration.
template <>
struct EnumTraits<::nds::signs::warning::SupplementaryWarningSign>
{
    static constexpr ::std::array<const char*, 9> names =
    {{
        "LEFT_TURN",
        "RIGHT_TURN",
        "RIGHT",
        "LEFT",
        "FOR_DISTANCE",
        "IN_DISTANCE",
        "TIME_RANGE",
        "ATTENTION",
        "ALL_WAY_STOP"
    }};

    static constexpr ::std::array<::nds::signs::warning::SupplementaryWarningSign, 9> values =
    {{
        ::nds::signs::warning::SupplementaryWarningSign::LEFT_TURN,
        ::nds::signs::warning::SupplementaryWarningSign::RIGHT_TURN,
        ::nds::signs::warning::SupplementaryWarningSign::RIGHT,
        ::nds::signs::warning::SupplementaryWarningSign::LEFT,
        ::nds::signs::warning::SupplementaryWarningSign::FOR_DISTANCE,
        ::nds::signs::warning::SupplementaryWarningSign::IN_DISTANCE,
        ::nds::signs::warning::SupplementaryWarningSign::TIME_RANGE,
        ::nds::signs::warning::SupplementaryWarningSign::ATTENTION,
        ::nds::signs::warning::SupplementaryWarningSign::ALL_WAY_STOP
    }};

    static constexpr const char* enumName = "SupplementaryWarningSign";
};

template <>
size_t enumToOrdinal<::nds::signs::warning::SupplementaryWarningSign>(::nds::signs::warning::SupplementaryWarningSign value);

template <>
::nds::signs::warning::SupplementaryWarningSign valueToEnum<::nds::signs::warning::SupplementaryWarningSign>(
        typename ::std::underlying_type<::nds::signs::warning::SupplementaryWarningSign>::type rawValue);

template <>
uint32_t enumHashCode<::nds::signs::warning::SupplementaryWarningSign>(::nds::signs::warning::SupplementaryWarningSign value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::signs::warning::SupplementaryWarningSign>(::zserio::DeltaContext& context, ::nds::signs::warning::SupplementaryWarningSign value);

template <>
size_t bitSizeOf<::nds::signs::warning::SupplementaryWarningSign>(::nds::signs::warning::SupplementaryWarningSign value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::signs::warning::SupplementaryWarningSign>(::zserio::DeltaContext& context, ::nds::signs::warning::SupplementaryWarningSign value);

template <>
size_t initializeOffsets<::nds::signs::warning::SupplementaryWarningSign>(size_t bitPosition, ::nds::signs::warning::SupplementaryWarningSign value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::signs::warning::SupplementaryWarningSign>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::signs::warning::SupplementaryWarningSign value);

template <>
::nds::signs::warning::SupplementaryWarningSign read<::nds::signs::warning::SupplementaryWarningSign>(::zserio::BitStreamReader& in);

template <>
::nds::signs::warning::SupplementaryWarningSign read<::nds::signs::warning::SupplementaryWarningSign, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::signs::warning::SupplementaryWarningSign>(::zserio::BitStreamWriter& out, ::nds::signs::warning::SupplementaryWarningSign value);

template <>
void write<::zserio::DeltaContext, ::nds::signs::warning::SupplementaryWarningSign>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::signs::warning::SupplementaryWarningSign value);

} // namespace zserio

#endif // NDS_SIGNS_WARNING_SUPPLEMENTARY_WARNING_SIGN_H
