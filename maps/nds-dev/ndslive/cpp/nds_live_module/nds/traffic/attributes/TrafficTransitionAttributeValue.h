/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_TRAFFIC_ATTRIBUTES_TRAFFIC_TRANSITION_ATTRIBUTE_VALUE_H
#define NDS_TRAFFIC_ATTRIBUTES_TRAFFIC_TRANSITION_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/attributes/TrafficTransitionAttributeType.h>
#include <nds/traffic/types/CurrentRoadCondition.h>
#include <nds/traffic/types/TrafficFlow.h>

namespace nds
{
namespace traffic
{
namespace attributes
{

class TrafficTransitionAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_trafficFlow = 0,
        CHOICE_currentRoadCondition = 1,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getTrafficFlow()
        {
            return m_trafficFlow_;
        }

    private:
        ::zserio::DeltaContext m_trafficFlow_;
    };

    TrafficTransitionAttributeValue() noexcept :
            TrafficTransitionAttributeValue(allocator_type())
    {}

    explicit TrafficTransitionAttributeValue(const allocator_type& allocator) noexcept;

    explicit TrafficTransitionAttributeValue(::zserio::BitStreamReader& in,
            ::nds::traffic::attributes::TrafficTransitionAttributeType type_, const allocator_type& allocator = allocator_type());
    explicit TrafficTransitionAttributeValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::traffic::attributes::TrafficTransitionAttributeType type_, const allocator_type& allocator = allocator_type());

    ~TrafficTransitionAttributeValue() = default;

    TrafficTransitionAttributeValue(const TrafficTransitionAttributeValue& other);
    TrafficTransitionAttributeValue& operator=(const TrafficTransitionAttributeValue& other);

    TrafficTransitionAttributeValue(TrafficTransitionAttributeValue&& other);
    TrafficTransitionAttributeValue& operator=(TrafficTransitionAttributeValue&& other);

    TrafficTransitionAttributeValue(::zserio::PropagateAllocatorT,
            const TrafficTransitionAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::traffic::attributes::TrafficTransitionAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::traffic::attributes::TrafficTransitionAttributeType getType() const;

    ::nds::traffic::types::TrafficFlow getTrafficFlow() const;
    void setTrafficFlow(::nds::traffic::types::TrafficFlow trafficFlow_);

    const ::nds::traffic::types::CurrentRoadCondition& getCurrentRoadCondition() const;
    ::nds::traffic::types::CurrentRoadCondition& getCurrentRoadCondition();
    void setCurrentRoadCondition(const ::nds::traffic::types::CurrentRoadCondition& currentRoadCondition_);
    void setCurrentRoadCondition(::nds::traffic::types::CurrentRoadCondition&& currentRoadCondition_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TrafficTransitionAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::traffic::attributes::TrafficTransitionAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace traffic
} // namespace nds

#endif // NDS_TRAFFIC_ATTRIBUTES_TRAFFIC_TRANSITION_ATTRIBUTE_VALUE_H
