/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/traffic/metadata/RoadTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

RoadTrafficLayerContent::RoadTrafficLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RoadTrafficLayerContent::RoadTrafficLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RoadTrafficLayerContent::RoadTrafficLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RoadTrafficLayerContent' out of bounds: ") << value << "!";
}

void RoadTrafficLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::RoadTrafficLayerContent::underlying_type>>(m_value);
}

size_t RoadTrafficLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t RoadTrafficLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::RoadTrafficLayerContent::underlying_type>>(m_value);
}

size_t RoadTrafficLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RoadTrafficLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RoadTrafficLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RoadTrafficLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void RoadTrafficLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::RoadTrafficLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RoadTrafficLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
        result += result.empty() ? "ROAD_RANGE_MAPS" : " | ROAD_RANGE_MAPS";
    if ((*this & RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
        result += result.empty() ? "ROAD_RANGE_SETS" : " | ROAD_RANGE_SETS";
    if ((*this & RoadTrafficLayerContent::Values::TRANSITION_MAPS) == RoadTrafficLayerContent::Values::TRANSITION_MAPS)
        result += result.empty() ? "TRANSITION_MAPS" : " | TRANSITION_MAPS";
    if ((*this & RoadTrafficLayerContent::Values::TRANSITION_SETS) == RoadTrafficLayerContent::Values::TRANSITION_SETS)
        result += result.empty() ? "TRANSITION_SETS" : " | TRANSITION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RoadTrafficLayerContent::underlying_type RoadTrafficLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

RoadTrafficLayerContent::underlying_type RoadTrafficLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::RoadTrafficLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/traffic/metadata/RoadLocationTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

RoadLocationTrafficLayerContent::RoadLocationTrafficLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RoadLocationTrafficLayerContent::RoadLocationTrafficLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RoadLocationTrafficLayerContent::RoadLocationTrafficLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RoadLocationTrafficLayerContent' out of bounds: ") << value << "!";
}

void RoadLocationTrafficLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::RoadLocationTrafficLayerContent::underlying_type>>(m_value);
}

size_t RoadLocationTrafficLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t RoadLocationTrafficLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::RoadLocationTrafficLayerContent::underlying_type>>(m_value);
}

size_t RoadLocationTrafficLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RoadLocationTrafficLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RoadLocationTrafficLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RoadLocationTrafficLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void RoadLocationTrafficLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::RoadLocationTrafficLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RoadLocationTrafficLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
        result += result.empty() ? "ROAD_LOCATION_MAPS" : " | ROAD_LOCATION_MAPS";
    if ((*this & RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
        result += result.empty() ? "ROAD_LOCATION_SETS" : " | ROAD_LOCATION_SETS";
    if ((*this & RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
        result += result.empty() ? "ROAD_LOCATION_TRANSITION_MAPS" : " | ROAD_LOCATION_TRANSITION_MAPS";
    if ((*this & RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
        result += result.empty() ? "ROAD_LOCATION_TRANSITION_SETS" : " | ROAD_LOCATION_TRANSITION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RoadLocationTrafficLayerContent::underlying_type RoadLocationTrafficLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

RoadLocationTrafficLayerContent::underlying_type RoadLocationTrafficLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::RoadLocationTrafficLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/traffic/metadata/LaneTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

LaneTrafficLayerContent::LaneTrafficLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

LaneTrafficLayerContent::LaneTrafficLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

LaneTrafficLayerContent::LaneTrafficLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'LaneTrafficLayerContent' out of bounds: ") << value << "!";
}

void LaneTrafficLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::LaneTrafficLayerContent::underlying_type>>(m_value);
}

size_t LaneTrafficLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t LaneTrafficLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::LaneTrafficLayerContent::underlying_type>>(m_value);
}

size_t LaneTrafficLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t LaneTrafficLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t LaneTrafficLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void LaneTrafficLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void LaneTrafficLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::LaneTrafficLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> LaneTrafficLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
        result += result.empty() ? "LANE_RANGE_MAPS" : " | LANE_RANGE_MAPS";
    if ((*this & LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
        result += result.empty() ? "LANE_RANGE_SETS" : " | LANE_RANGE_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

LaneTrafficLayerContent::underlying_type LaneTrafficLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

LaneTrafficLayerContent::underlying_type LaneTrafficLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::LaneTrafficLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/traffic/metadata/DisplayLineTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

DisplayLineTrafficLayerContent::DisplayLineTrafficLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

DisplayLineTrafficLayerContent::DisplayLineTrafficLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

DisplayLineTrafficLayerContent::DisplayLineTrafficLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'DisplayLineTrafficLayerContent' out of bounds: ") << value << "!";
}

void DisplayLineTrafficLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::DisplayLineTrafficLayerContent::underlying_type>>(m_value);
}

size_t DisplayLineTrafficLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t DisplayLineTrafficLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::DisplayLineTrafficLayerContent::underlying_type>>(m_value);
}

size_t DisplayLineTrafficLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t DisplayLineTrafficLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t DisplayLineTrafficLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void DisplayLineTrafficLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void DisplayLineTrafficLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::DisplayLineTrafficLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> DisplayLineTrafficLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
        result += result.empty() ? "DISPLAY_LINE_RANGE_MAPS" : " | DISPLAY_LINE_RANGE_MAPS";
    if ((*this & DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
        result += result.empty() ? "DISPLAY_LINE_RANGE_SETS" : " | DISPLAY_LINE_RANGE_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

DisplayLineTrafficLayerContent::underlying_type DisplayLineTrafficLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

DisplayLineTrafficLayerContent::underlying_type DisplayLineTrafficLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::traffic::metadata::DisplayLineTrafficLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/metadata/RoadTrafficLayerMetadata.h>
#include <nds/traffic/metadata/RoadTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

RoadTrafficLayerMetadata::RoadTrafficLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::traffic::metadata::RoadTrafficLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator)
{
}

RoadTrafficLayerMetadata::RoadTrafficLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator))
{
}

RoadTrafficLayerMetadata::RoadTrafficLayerMetadata(RoadTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator))
{
}

RoadTrafficLayerMetadata::RoadTrafficLayerMetadata(::zserio::PropagateAllocatorT,
        const RoadTrafficLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator))
{
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerMetadata::getContent() const
{
    return m_content_;
}

void RoadTrafficLayerMetadata::setContent(::nds::traffic::metadata::RoadTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& RoadTrafficLayerMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& RoadTrafficLayerMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadTrafficLayerMetadata::setRoadRangeAttributeMetadata(const ::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadTrafficLayerMetadata::setRoadRangeAttributeMetadata(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadTrafficLayerMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadTrafficLayerMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadTrafficLayerMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& RoadTrafficLayerMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& RoadTrafficLayerMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void RoadTrafficLayerMetadata::setTransitionAttributeMetadata(const ::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void RoadTrafficLayerMetadata::setTransitionAttributeMetadata(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool RoadTrafficLayerMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS);
}

bool RoadTrafficLayerMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void RoadTrafficLayerMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadTrafficLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadTrafficLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadTrafficLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadTrafficLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

void RoadTrafficLayerMetadata::initPackingContext(RoadTrafficLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
}

size_t RoadTrafficLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadTrafficLayerMetadata::bitSizeOf(RoadTrafficLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadTrafficLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t RoadTrafficLayerMetadata::initializeOffsets(RoadTrafficLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool RoadTrafficLayerMetadata::operator==(const RoadTrafficLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_);
    }

    return true;
}

uint32_t RoadTrafficLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);

    return result;
}

void RoadTrafficLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
}

void RoadTrafficLayerMetadata::write(RoadTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
}

void RoadTrafficLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadTrafficLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadTrafficLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadTrafficLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadTrafficLayerContent(in);
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerMetadata::readContent(RoadTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadTrafficLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata> RoadTrafficLayerMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata> RoadTrafficLayerMetadata::readRoadRangeAttributeMetadata(RoadTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata> RoadTrafficLayerMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata> RoadTrafficLayerMetadata::readTransitionAttributeMetadata(RoadTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::zserio::NullOpt);
}
RoadTrafficLayerMetadata::ZserioArrayType_coveredRoadTypes RoadTrafficLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadTrafficLayerMetadata::ZserioArrayType_coveredRoadTypes RoadTrafficLayerMetadata::readCoveredRoadTypes(RoadTrafficLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/metadata/RoadTrafficLayerIndirectMetadata.h>
#include <nds/traffic/metadata/RoadTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

RoadTrafficLayerIndirectMetadata::RoadTrafficLayerIndirectMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::traffic::metadata::RoadTrafficLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator)
{
}

RoadTrafficLayerIndirectMetadata::RoadTrafficLayerIndirectMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator))
{
}

RoadTrafficLayerIndirectMetadata::RoadTrafficLayerIndirectMetadata(RoadTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator))
{
}

RoadTrafficLayerIndirectMetadata::RoadTrafficLayerIndirectMetadata(::zserio::PropagateAllocatorT,
        const RoadTrafficLayerIndirectMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator))
{
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerIndirectMetadata::getContent() const
{
    return m_content_;
}

void RoadTrafficLayerIndirectMetadata::setContent(::nds::traffic::metadata::RoadTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& RoadTrafficLayerIndirectMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& RoadTrafficLayerIndirectMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadTrafficLayerIndirectMetadata::setRoadRangeAttributeMetadata(const ::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadTrafficLayerIndirectMetadata::setRoadRangeAttributeMetadata(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadTrafficLayerIndirectMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadTrafficLayerIndirectMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadTrafficLayerIndirectMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& RoadTrafficLayerIndirectMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& RoadTrafficLayerIndirectMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void RoadTrafficLayerIndirectMetadata::setTransitionAttributeMetadata(const ::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void RoadTrafficLayerIndirectMetadata::setTransitionAttributeMetadata(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool RoadTrafficLayerIndirectMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS);
}

bool RoadTrafficLayerIndirectMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void RoadTrafficLayerIndirectMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadTrafficLayerIndirectMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadTrafficLayerIndirectMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadTrafficLayerIndirectMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadTrafficLayerIndirectMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

void RoadTrafficLayerIndirectMetadata::initPackingContext(RoadTrafficLayerIndirectMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
}

size_t RoadTrafficLayerIndirectMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadTrafficLayerIndirectMetadata::bitSizeOf(RoadTrafficLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadTrafficLayerIndirectMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t RoadTrafficLayerIndirectMetadata::initializeOffsets(RoadTrafficLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool RoadTrafficLayerIndirectMetadata::operator==(const RoadTrafficLayerIndirectMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_);
    }

    return true;
}

uint32_t RoadTrafficLayerIndirectMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);

    return result;
}

void RoadTrafficLayerIndirectMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
}

void RoadTrafficLayerIndirectMetadata::write(RoadTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
}

void RoadTrafficLayerIndirectMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadTrafficLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadTrafficLayerIndirectMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadTrafficLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerIndirectMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadTrafficLayerContent(in);
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerIndirectMetadata::readContent(RoadTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadTrafficLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata> RoadTrafficLayerIndirectMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata> RoadTrafficLayerIndirectMetadata::readRoadRangeAttributeMetadata(RoadTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata> RoadTrafficLayerIndirectMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata> RoadTrafficLayerIndirectMetadata::readTransitionAttributeMetadata(RoadTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::zserio::NullOpt);
}
RoadTrafficLayerIndirectMetadata::ZserioArrayType_coveredRoadTypes RoadTrafficLayerIndirectMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadTrafficLayerIndirectMetadata::ZserioArrayType_coveredRoadTypes RoadTrafficLayerIndirectMetadata::readCoveredRoadTypes(RoadTrafficLayerIndirectMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/metadata/RoadLocationTrafficLayerMetadata.h>
#include <nds/traffic/metadata/RoadLocationTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

RoadLocationTrafficLayerMetadata::RoadLocationTrafficLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::traffic::metadata::RoadLocationTrafficLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator)
{
}

RoadLocationTrafficLayerMetadata::RoadLocationTrafficLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator))
{
}

RoadLocationTrafficLayerMetadata::RoadLocationTrafficLayerMetadata(RoadLocationTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator))
{
}

RoadLocationTrafficLayerMetadata::RoadLocationTrafficLayerMetadata(::zserio::PropagateAllocatorT,
        const RoadLocationTrafficLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator))
{
}

::nds::traffic::metadata::RoadLocationTrafficLayerContent RoadLocationTrafficLayerMetadata::getContent() const
{
    return m_content_;
}

void RoadLocationTrafficLayerMetadata::setContent(::nds::traffic::metadata::RoadLocationTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& RoadLocationTrafficLayerMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& RoadLocationTrafficLayerMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadLocationTrafficLayerMetadata::setRoadRangeAttributeMetadata(const ::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadLocationTrafficLayerMetadata::setRoadRangeAttributeMetadata(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadLocationTrafficLayerMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS);
}

bool RoadLocationTrafficLayerMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadLocationTrafficLayerMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& RoadLocationTrafficLayerMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& RoadLocationTrafficLayerMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void RoadLocationTrafficLayerMetadata::setTransitionAttributeMetadata(const ::nds::traffic::instantiations::TrafficTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void RoadLocationTrafficLayerMetadata::setTransitionAttributeMetadata(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool RoadLocationTrafficLayerMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS);
}

bool RoadLocationTrafficLayerMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void RoadLocationTrafficLayerMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadLocationTrafficLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadLocationTrafficLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadLocationTrafficLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadLocationTrafficLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

void RoadLocationTrafficLayerMetadata::initPackingContext(RoadLocationTrafficLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
}

size_t RoadLocationTrafficLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadLocationTrafficLayerMetadata::bitSizeOf(RoadLocationTrafficLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadLocationTrafficLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t RoadLocationTrafficLayerMetadata::initializeOffsets(RoadLocationTrafficLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool RoadLocationTrafficLayerMetadata::operator==(const RoadLocationTrafficLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_);
    }

    return true;
}

uint32_t RoadLocationTrafficLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);

    return result;
}

void RoadLocationTrafficLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
}

void RoadLocationTrafficLayerMetadata::write(RoadLocationTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
}

void RoadLocationTrafficLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadLocationTrafficLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadLocationTrafficLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadLocationTrafficLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::traffic::metadata::RoadLocationTrafficLayerContent RoadLocationTrafficLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadLocationTrafficLayerContent(in);
}

::nds::traffic::metadata::RoadLocationTrafficLayerContent RoadLocationTrafficLayerMetadata::readContent(RoadLocationTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadLocationTrafficLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata> RoadLocationTrafficLayerMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata> RoadLocationTrafficLayerMetadata::readRoadRangeAttributeMetadata(RoadLocationTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata> RoadLocationTrafficLayerMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata> RoadLocationTrafficLayerMetadata::readTransitionAttributeMetadata(RoadLocationTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::nds::traffic::instantiations::TrafficTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMetadata>(::zserio::NullOpt);
}
RoadLocationTrafficLayerMetadata::ZserioArrayType_coveredRoadTypes RoadLocationTrafficLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadLocationTrafficLayerMetadata::ZserioArrayType_coveredRoadTypes RoadLocationTrafficLayerMetadata::readCoveredRoadTypes(RoadLocationTrafficLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/metadata/LaneTrafficLayerMetadata.h>
#include <nds/traffic/metadata/LaneTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

LaneTrafficLayerMetadata::LaneTrafficLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::traffic::metadata::LaneTrafficLayerContent()),
        m_laneRangeAttributeMetadata_(::zserio::NullOpt),
        m_coveredLaneTypes_(allocator)
{
}

LaneTrafficLayerMetadata::LaneTrafficLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(in, allocator))
{
}

LaneTrafficLayerMetadata::LaneTrafficLayerMetadata(LaneTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(context, in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(context, in, allocator))
{
}

LaneTrafficLayerMetadata::LaneTrafficLayerMetadata(::zserio::PropagateAllocatorT,
        const LaneTrafficLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMetadata_, allocator)),
        m_coveredLaneTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredLaneTypes_, allocator))
{
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerMetadata::getContent() const
{
    return m_content_;
}

void LaneTrafficLayerMetadata::setContent(::nds::traffic::metadata::LaneTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata& LaneTrafficLayerMetadata::getLaneRangeAttributeMetadata()
{
    return m_laneRangeAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata& LaneTrafficLayerMetadata::getLaneRangeAttributeMetadata() const
{
    return m_laneRangeAttributeMetadata_.value();
}

void LaneTrafficLayerMetadata::setLaneRangeAttributeMetadata(const ::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = laneRangeAttributeMetadata_;
}

void LaneTrafficLayerMetadata::setLaneRangeAttributeMetadata(::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = ::std::move(laneRangeAttributeMetadata_);
}

bool LaneTrafficLayerMetadata::isLaneRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneTrafficLayerMetadata::isLaneRangeAttributeMetadataSet() const
{
    return m_laneRangeAttributeMetadata_.hasValue();
}

void LaneTrafficLayerMetadata::resetLaneRangeAttributeMetadata()
{
    m_laneRangeAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::LaneType>& LaneTrafficLayerMetadata::getCoveredLaneTypes()
{
    return m_coveredLaneTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::LaneType>& LaneTrafficLayerMetadata::getCoveredLaneTypes() const
{
    return m_coveredLaneTypes_.getRawArray();
}

void LaneTrafficLayerMetadata::setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(coveredLaneTypes_);
}

void LaneTrafficLayerMetadata::setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(std::move(coveredLaneTypes_));
}

void LaneTrafficLayerMetadata::initPackingContext(LaneTrafficLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().initPackingContext(context.getLaneRangeAttributeMetadata());
    }
}

size_t LaneTrafficLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneTrafficLayerMetadata::bitSizeOf(LaneTrafficLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneTrafficLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t LaneTrafficLayerMetadata::initializeOffsets(LaneTrafficLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool LaneTrafficLayerMetadata::operator==(const LaneTrafficLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMetadataUsed() ? !other.isLaneRangeAttributeMetadataUsed() : (m_laneRangeAttributeMetadata_ == other.m_laneRangeAttributeMetadata_)) &&
                (m_coveredLaneTypes_ == other.m_coveredLaneTypes_);
    }

    return true;
}

uint32_t LaneTrafficLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredLaneTypes_);

    return result;
}

void LaneTrafficLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(out);
    }
    m_coveredLaneTypes_.write(*this, out);
}

void LaneTrafficLayerMetadata::write(LaneTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(context.getLaneRangeAttributeMetadata(), out);
    }
    m_coveredLaneTypes_.writePacked(*this, out);
}

void LaneTrafficLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneTrafficLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneTrafficLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneTrafficLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::nds::core::types::LaneType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::LaneTrafficLayerContent(in);
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerMetadata::readContent(LaneTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::LaneTrafficLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata> LaneTrafficLayerMetadata::readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata> LaneTrafficLayerMetadata::readLaneRangeAttributeMetadata(LaneTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata(context.getLaneRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata>(::zserio::NullOpt);
}
LaneTrafficLayerMetadata::ZserioArrayType_coveredLaneTypes LaneTrafficLayerMetadata::readCoveredLaneTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

LaneTrafficLayerMetadata::ZserioArrayType_coveredLaneTypes LaneTrafficLayerMetadata::readCoveredLaneTypes(LaneTrafficLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/metadata/LaneTrafficLayerIndirectMetadata.h>
#include <nds/traffic/metadata/LaneTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

LaneTrafficLayerIndirectMetadata::LaneTrafficLayerIndirectMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::traffic::metadata::LaneTrafficLayerContent()),
        m_laneRangeAttributeMetadata_(::zserio::NullOpt),
        m_coveredLaneTypes_(allocator)
{
}

LaneTrafficLayerIndirectMetadata::LaneTrafficLayerIndirectMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(in, allocator))
{
}

LaneTrafficLayerIndirectMetadata::LaneTrafficLayerIndirectMetadata(LaneTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(context, in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(context, in, allocator))
{
}

LaneTrafficLayerIndirectMetadata::LaneTrafficLayerIndirectMetadata(::zserio::PropagateAllocatorT,
        const LaneTrafficLayerIndirectMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMetadata_, allocator)),
        m_coveredLaneTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredLaneTypes_, allocator))
{
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerIndirectMetadata::getContent() const
{
    return m_content_;
}

void LaneTrafficLayerIndirectMetadata::setContent(::nds::traffic::metadata::LaneTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata& LaneTrafficLayerIndirectMetadata::getLaneRangeAttributeMetadata()
{
    return m_laneRangeAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata& LaneTrafficLayerIndirectMetadata::getLaneRangeAttributeMetadata() const
{
    return m_laneRangeAttributeMetadata_.value();
}

void LaneTrafficLayerIndirectMetadata::setLaneRangeAttributeMetadata(const ::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = laneRangeAttributeMetadata_;
}

void LaneTrafficLayerIndirectMetadata::setLaneRangeAttributeMetadata(::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = ::std::move(laneRangeAttributeMetadata_);
}

bool LaneTrafficLayerIndirectMetadata::isLaneRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneTrafficLayerIndirectMetadata::isLaneRangeAttributeMetadataSet() const
{
    return m_laneRangeAttributeMetadata_.hasValue();
}

void LaneTrafficLayerIndirectMetadata::resetLaneRangeAttributeMetadata()
{
    m_laneRangeAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::LaneType>& LaneTrafficLayerIndirectMetadata::getCoveredLaneTypes()
{
    return m_coveredLaneTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::LaneType>& LaneTrafficLayerIndirectMetadata::getCoveredLaneTypes() const
{
    return m_coveredLaneTypes_.getRawArray();
}

void LaneTrafficLayerIndirectMetadata::setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(coveredLaneTypes_);
}

void LaneTrafficLayerIndirectMetadata::setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(std::move(coveredLaneTypes_));
}

void LaneTrafficLayerIndirectMetadata::initPackingContext(LaneTrafficLayerIndirectMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().initPackingContext(context.getLaneRangeAttributeMetadata());
    }
}

size_t LaneTrafficLayerIndirectMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneTrafficLayerIndirectMetadata::bitSizeOf(LaneTrafficLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneTrafficLayerIndirectMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t LaneTrafficLayerIndirectMetadata::initializeOffsets(LaneTrafficLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool LaneTrafficLayerIndirectMetadata::operator==(const LaneTrafficLayerIndirectMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMetadataUsed() ? !other.isLaneRangeAttributeMetadataUsed() : (m_laneRangeAttributeMetadata_ == other.m_laneRangeAttributeMetadata_)) &&
                (m_coveredLaneTypes_ == other.m_coveredLaneTypes_);
    }

    return true;
}

uint32_t LaneTrafficLayerIndirectMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredLaneTypes_);

    return result;
}

void LaneTrafficLayerIndirectMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(out);
    }
    m_coveredLaneTypes_.write(*this, out);
}

void LaneTrafficLayerIndirectMetadata::write(LaneTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(context.getLaneRangeAttributeMetadata(), out);
    }
    m_coveredLaneTypes_.writePacked(*this, out);
}

void LaneTrafficLayerIndirectMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneTrafficLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneTrafficLayerIndirectMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneTrafficLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::nds::core::types::LaneType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerIndirectMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::LaneTrafficLayerContent(in);
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerIndirectMetadata::readContent(LaneTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::LaneTrafficLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata> LaneTrafficLayerIndirectMetadata::readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata> LaneTrafficLayerIndirectMetadata::readLaneRangeAttributeMetadata(LaneTrafficLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata(context.getLaneRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMetadata>(::zserio::NullOpt);
}
LaneTrafficLayerIndirectMetadata::ZserioArrayType_coveredLaneTypes LaneTrafficLayerIndirectMetadata::readCoveredLaneTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

LaneTrafficLayerIndirectMetadata::ZserioArrayType_coveredLaneTypes LaneTrafficLayerIndirectMetadata::readCoveredLaneTypes(LaneTrafficLayerIndirectMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/metadata/DisplayLineTrafficLayerMetadata.h>
#include <nds/traffic/metadata/DisplayLineTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace metadata
{

DisplayLineTrafficLayerMetadata::DisplayLineTrafficLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::traffic::metadata::DisplayLineTrafficLayerContent()),
        m_displayLineRangeAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator)
{
}

DisplayLineTrafficLayerMetadata::DisplayLineTrafficLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_displayLineRangeAttributeMetadata_(readDisplayLineRangeAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator))
{
}

DisplayLineTrafficLayerMetadata::DisplayLineTrafficLayerMetadata(DisplayLineTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_displayLineRangeAttributeMetadata_(readDisplayLineRangeAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator))
{
}

DisplayLineTrafficLayerMetadata::DisplayLineTrafficLayerMetadata(::zserio::PropagateAllocatorT,
        const DisplayLineTrafficLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_displayLineRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator))
{
}

::nds::traffic::metadata::DisplayLineTrafficLayerContent DisplayLineTrafficLayerMetadata::getContent() const
{
    return m_content_;
}

void DisplayLineTrafficLayerMetadata::setContent(::nds::traffic::metadata::DisplayLineTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata& DisplayLineTrafficLayerMetadata::getDisplayLineRangeAttributeMetadata()
{
    return m_displayLineRangeAttributeMetadata_.value();
}

const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata& DisplayLineTrafficLayerMetadata::getDisplayLineRangeAttributeMetadata() const
{
    return m_displayLineRangeAttributeMetadata_.value();
}

void DisplayLineTrafficLayerMetadata::setDisplayLineRangeAttributeMetadata(const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata& displayLineRangeAttributeMetadata_)
{
    m_displayLineRangeAttributeMetadata_ = displayLineRangeAttributeMetadata_;
}

void DisplayLineTrafficLayerMetadata::setDisplayLineRangeAttributeMetadata(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata&& displayLineRangeAttributeMetadata_)
{
    m_displayLineRangeAttributeMetadata_ = ::std::move(displayLineRangeAttributeMetadata_);
}

bool DisplayLineTrafficLayerMetadata::isDisplayLineRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS);
}

bool DisplayLineTrafficLayerMetadata::isDisplayLineRangeAttributeMetadataSet() const
{
    return m_displayLineRangeAttributeMetadata_.hasValue();
}

void DisplayLineTrafficLayerMetadata::resetDisplayLineRangeAttributeMetadata()
{
    m_displayLineRangeAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& DisplayLineTrafficLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& DisplayLineTrafficLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void DisplayLineTrafficLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void DisplayLineTrafficLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

void DisplayLineTrafficLayerMetadata::initPackingContext(DisplayLineTrafficLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().initPackingContext(context.getDisplayLineRangeAttributeMetadata());
    }
}

size_t DisplayLineTrafficLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayLineTrafficLayerMetadata::bitSizeOf(DisplayLineTrafficLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeMetadata_.value().bitSizeOf(context.getDisplayLineRangeAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayLineTrafficLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t DisplayLineTrafficLayerMetadata::initializeOffsets(DisplayLineTrafficLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeMetadata_.value().initializeOffsets(context.getDisplayLineRangeAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool DisplayLineTrafficLayerMetadata::operator==(const DisplayLineTrafficLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isDisplayLineRangeAttributeMetadataUsed() ? !other.isDisplayLineRangeAttributeMetadataUsed() : (m_displayLineRangeAttributeMetadata_ == other.m_displayLineRangeAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_);
    }

    return true;
}

uint32_t DisplayLineTrafficLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isDisplayLineRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);

    return result;
}

void DisplayLineTrafficLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
}

void DisplayLineTrafficLayerMetadata::write(DisplayLineTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().write(context.getDisplayLineRangeAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
}

void DisplayLineTrafficLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(DisplayLineTrafficLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void DisplayLineTrafficLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(DisplayLineTrafficLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::traffic::metadata::DisplayLineTrafficLayerContent DisplayLineTrafficLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::DisplayLineTrafficLayerContent(in);
}

::nds::traffic::metadata::DisplayLineTrafficLayerContent DisplayLineTrafficLayerMetadata::readContent(DisplayLineTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::DisplayLineTrafficLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata> DisplayLineTrafficLayerMetadata::readDisplayLineRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata> DisplayLineTrafficLayerMetadata::readDisplayLineRangeAttributeMetadata(DisplayLineTrafficLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata>(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata(context.getDisplayLineRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMetadata>(::zserio::NullOpt);
}
DisplayLineTrafficLayerMetadata::ZserioArrayType_coveredRoadTypes DisplayLineTrafficLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

DisplayLineTrafficLayerMetadata::ZserioArrayType_coveredRoadTypes DisplayLineTrafficLayerMetadata::readCoveredRoadTypes(DisplayLineTrafficLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace traffic
} // namespace nds
