/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_TRAFFIC_TYPES_TRAFFIC_EVENT_H
#define NDS_TRAFFIC_TYPES_TRAFFIC_EVENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/Seconds.h>
#include <nds/traffic/types/TrafficEventReason.h>

namespace nds
{
namespace traffic
{
namespace types
{

class TrafficEvent
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getReason()
        {
            return m_reason_;
        }

        ::zserio::DeltaContext& getDelay()
        {
            return m_delay_;
        }

    private:
        ::zserio::DeltaContext m_reason_;
        ::zserio::DeltaContext m_delay_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TrafficEvent() noexcept :
            TrafficEvent(allocator_type())
    {}

    explicit TrafficEvent(const allocator_type& allocator) noexcept;

    TrafficEvent(
            ::nds::traffic::types::TrafficEventReason reason_,
            ::nds::core::types::Seconds delay_,
            bool blockedPassage_,
            const allocator_type& allocator = allocator_type()) :
            TrafficEvent(allocator)
    {
        m_reason_ = reason_;
        m_delay_ = delay_;
        m_blockedPassage_ = blockedPassage_;
    }

    explicit TrafficEvent(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TrafficEvent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TrafficEvent() = default;

    TrafficEvent(const TrafficEvent&) = default;
    TrafficEvent& operator=(const TrafficEvent&) = default;

    TrafficEvent(TrafficEvent&&) = default;
    TrafficEvent& operator=(TrafficEvent&&) = default;

    TrafficEvent(::zserio::PropagateAllocatorT,
            const TrafficEvent& other, const allocator_type& allocator);

    ::nds::traffic::types::TrafficEventReason getReason() const;
    void setReason(::nds::traffic::types::TrafficEventReason reason_);

    ::nds::core::types::Seconds getDelay() const;
    void setDelay(::nds::core::types::Seconds delay_);

    bool getBlockedPassage() const;
    void setBlockedPassage(bool blockedPassage_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TrafficEvent& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::traffic::types::TrafficEventReason readReason(::zserio::BitStreamReader& in);
    ::nds::traffic::types::TrafficEventReason readReason(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::Seconds readDelay(::zserio::BitStreamReader& in);
    ::nds::core::types::Seconds readDelay(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readBlockedPassage(::zserio::BitStreamReader& in);

    ::nds::traffic::types::TrafficEventReason m_reason_;
    ::nds::core::types::Seconds m_delay_;
    bool m_blockedPassage_;
};

} // namespace types
} // namespace traffic
} // namespace nds

#endif // NDS_TRAFFIC_TYPES_TRAFFIC_EVENT_H
