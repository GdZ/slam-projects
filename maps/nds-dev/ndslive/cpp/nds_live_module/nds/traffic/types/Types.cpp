/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/traffic/types/TrafficEventReason.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficEventReason enumeration.
constexpr ::std::array<const char*, 69> EnumTraits<::nds::traffic::types::TrafficEventReason>::names;
constexpr ::std::array<::nds::traffic::types::TrafficEventReason, 69> EnumTraits<::nds::traffic::types::TrafficEventReason>::values;
constexpr const char* EnumTraits<::nds::traffic::types::TrafficEventReason>::enumName;

template <>
size_t enumToOrdinal(::nds::traffic::types::TrafficEventReason value)
{
    switch (value)
    {
    case ::nds::traffic::types::TrafficEventReason::UNKNOWN:
        return 0;
    case ::nds::traffic::types::TrafficEventReason::TRAFFIC_CONGESTION:
        return 1;
    case ::nds::traffic::types::TrafficEventReason::ACCIDENT:
        return 2;
    case ::nds::traffic::types::TrafficEventReason::ROADWORKS:
        return 3;
    case ::nds::traffic::types::TrafficEventReason::NARROW_LANES:
        return 4;
    case ::nds::traffic::types::TrafficEventReason::IMPASSIBILITY:
        return 5;
    case ::nds::traffic::types::TrafficEventReason::SLIPPERY_ROAD:
        return 6;
    case ::nds::traffic::types::TrafficEventReason::AQUAPLANING:
        return 7;
    case ::nds::traffic::types::TrafficEventReason::FIRE:
        return 8;
    case ::nds::traffic::types::TrafficEventReason::HAZARDOUS_DRIVING_CONDITIONS:
        return 9;
    case ::nds::traffic::types::TrafficEventReason::OBJECTS_ON_THE_ROAD:
        return 10;
    case ::nds::traffic::types::TrafficEventReason::ANIMALS_ON_ROADWAY:
        return 11;
    case ::nds::traffic::types::TrafficEventReason::PEOPLE_ON_ROADWAY:
        return 12;
    case ::nds::traffic::types::TrafficEventReason::BROKEN_DOWN_VEHICLES:
        return 13;
    case ::nds::traffic::types::TrafficEventReason::VEHICLE_ON_WRONG_CARRIAGE_WAY_GHOSTDRIVER:
        return 14;
    case ::nds::traffic::types::TrafficEventReason::RESCUE_RECOVERY_IN_PROGRESS:
        return 15;
    case ::nds::traffic::types::TrafficEventReason::REGULATORY_MEASURE:
        return 16;
    case ::nds::traffic::types::TrafficEventReason::EXTREME_WEATHER_CONDITIONS:
        return 17;
    case ::nds::traffic::types::TrafficEventReason::VISIBILITY_REDUCED:
        return 18;
    case ::nds::traffic::types::TrafficEventReason::PRECIPITATION:
        return 19;
    case ::nds::traffic::types::TrafficEventReason::RECKLESS_PERSONS:
        return 20;
    case ::nds::traffic::types::TrafficEventReason::OVERHEIGHT_WARNING_SYSTEM_TRIGGERED:
        return 21;
    case ::nds::traffic::types::TrafficEventReason::TRAFFIC_REGULATIONS_CHANGED:
        return 22;
    case ::nds::traffic::types::TrafficEventReason::MAJOR_EVENT:
        return 23;
    case ::nds::traffic::types::TrafficEventReason::SERVICE_NOT_OPERATING:
        return 24;
    case ::nds::traffic::types::TrafficEventReason::SERVICE_NOT_USABLE:
        return 25;
    case ::nds::traffic::types::TrafficEventReason::SLOW_MOVING_VEHICLES:
        return 26;
    case ::nds::traffic::types::TrafficEventReason::DANGEROUS_END_OF_QUEUE:
        return 27;
    case ::nds::traffic::types::TrafficEventReason::RISK_OF_FIRE:
        return 28;
    case ::nds::traffic::types::TrafficEventReason::TIME_DELAY:
        return 29;
    case ::nds::traffic::types::TrafficEventReason::POLICE_CHECKPOINT:
        return 30;
    case ::nds::traffic::types::TrafficEventReason::MALFUNCTIONING_ROADSIDE_EQUIPMENT:
        return 31;
    case ::nds::traffic::types::TrafficEventReason::SERIOUS_ACCIDENT:
        return 32;
    case ::nds::traffic::types::TrafficEventReason::EARLIER_ACCIDENT:
        return 33;
    case ::nds::traffic::types::TrafficEventReason::ACCIDENT_REPORTED:
        return 34;
    case ::nds::traffic::types::TrafficEventReason::ACCIDENT_INVESTIGATION_WORK:
        return 35;
    case ::nds::traffic::types::TrafficEventReason::MULTI_VEHICLE_ACCIDENT:
        return 36;
    case ::nds::traffic::types::TrafficEventReason::ACCIDENT_INVOLVING_LORRY:
        return 37;
    case ::nds::traffic::types::TrafficEventReason::ACCIDENT_TRAFFIC_BEING_DIRECTED_AROUND:
        return 38;
    case ::nds::traffic::types::TrafficEventReason::LONG_TERM_ROADWORKS:
        return 39;
    case ::nds::traffic::types::TrafficEventReason::CONSTRUCTION_WORK:
        return 40;
    case ::nds::traffic::types::TrafficEventReason::BRIDGE_MAINTENANCE_WORK:
        return 41;
    case ::nds::traffic::types::TrafficEventReason::RESURFACING_WORK:
        return 42;
    case ::nds::traffic::types::TrafficEventReason::MAJOR_ROADWORKS:
        return 43;
    case ::nds::traffic::types::TrafficEventReason::ROAD_MAINTENANCE_WORKS:
        return 44;
    case ::nds::traffic::types::TrafficEventReason::ROADWORKS_DURING_NIGHT:
        return 45;
    case ::nds::traffic::types::TrafficEventReason::ROADWORKS_SINGLE_LINE_TRAFFIC_ALTERNATE_DIRECTIONS:
        return 46;
    case ::nds::traffic::types::TrafficEventReason::FLOODING:
        return 47;
    case ::nds::traffic::types::TrafficEventReason::SNOW_ON_ROAD:
        return 48;
    case ::nds::traffic::types::TrafficEventReason::ICE_ON_ROAD:
        return 49;
    case ::nds::traffic::types::TrafficEventReason::BLACK_ICE_ON_ROAD:
        return 50;
    case ::nds::traffic::types::TrafficEventReason::GRASS_FIRE:
        return 51;
    case ::nds::traffic::types::TrafficEventReason::FOREST_FIRE:
        return 52;
    case ::nds::traffic::types::TrafficEventReason::OVERTURNED_VEHICLE:
        return 53;
    case ::nds::traffic::types::TrafficEventReason::BROKEN_DOWN_LORRY:
        return 54;
    case ::nds::traffic::types::TrafficEventReason::VEHICLE_SPUN_AROUND:
        return 55;
    case ::nds::traffic::types::TrafficEventReason::VEHICLE_ON_FIRE:
        return 56;
    case ::nds::traffic::types::TrafficEventReason::GUSTY_WINDS:
        return 57;
    case ::nds::traffic::types::TrafficEventReason::STRONG_WINDS:
        return 58;
    case ::nds::traffic::types::TrafficEventReason::THUNDERSTORM:
        return 59;
    case ::nds::traffic::types::TrafficEventReason::VISIBILITY_REDUCED_BY_FOG:
        return 60;
    case ::nds::traffic::types::TrafficEventReason::VISIBILITY_REDUCED_BY_LOW_SUN_GLARE:
        return 61;
    case ::nds::traffic::types::TrafficEventReason::SNOW:
        return 62;
    case ::nds::traffic::types::TrafficEventReason::RAIN:
        return 63;
    case ::nds::traffic::types::TrafficEventReason::HAIL:
        return 64;
    case ::nds::traffic::types::TrafficEventReason::SPORTS_EVENT:
        return 65;
    case ::nds::traffic::types::TrafficEventReason::TRAFFIC_CONTROL_SIGNALS_NOT_WORKING:
        return 66;
    case ::nds::traffic::types::TrafficEventReason::TRAFFIC_CONTROL_SIGNALS_WORKING_INCORRECTLY:
        return 67;
    case ::nds::traffic::types::TrafficEventReason::CLOSURE:
        return 68;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration TrafficEventReason: ") <<
                static_cast<typename ::std::underlying_type<::nds::traffic::types::TrafficEventReason>::type>(value) << "!";
    }
}

template <>
::nds::traffic::types::TrafficEventReason valueToEnum(
        typename ::std::underlying_type<::nds::traffic::types::TrafficEventReason>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
    case UINT16_C(18):
    case UINT16_C(19):
    case UINT16_C(20):
    case UINT16_C(21):
    case UINT16_C(22):
    case UINT16_C(23):
    case UINT16_C(24):
    case UINT16_C(25):
    case UINT16_C(26):
    case UINT16_C(27):
    case UINT16_C(28):
    case UINT16_C(29):
    case UINT16_C(30):
    case UINT16_C(31):
    case UINT16_C(32):
    case UINT16_C(33):
    case UINT16_C(34):
    case UINT16_C(35):
    case UINT16_C(36):
    case UINT16_C(37):
    case UINT16_C(38):
    case UINT16_C(39):
    case UINT16_C(40):
    case UINT16_C(41):
    case UINT16_C(42):
    case UINT16_C(43):
    case UINT16_C(44):
    case UINT16_C(45):
    case UINT16_C(46):
    case UINT16_C(47):
    case UINT16_C(48):
    case UINT16_C(49):
    case UINT16_C(50):
    case UINT16_C(51):
    case UINT16_C(52):
    case UINT16_C(53):
    case UINT16_C(54):
    case UINT16_C(55):
    case UINT16_C(56):
    case UINT16_C(57):
    case UINT16_C(58):
    case UINT16_C(59):
    case UINT16_C(60):
    case UINT16_C(61):
    case UINT16_C(62):
    case UINT16_C(63):
    case UINT16_C(64):
    case UINT16_C(65):
    case UINT16_C(66):
    case UINT16_C(67):
    case UINT16_C(68):
        return static_cast<::nds::traffic::types::TrafficEventReason>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration TrafficEventReason: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::traffic::types::TrafficEventReason>(::nds::traffic::types::TrafficEventReason value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::traffic::types::TrafficEventReason value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficEventReason>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::traffic::types::TrafficEventReason value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::traffic::types::TrafficEventReason value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficEventReason>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::traffic::types::TrafficEventReason value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::traffic::types::TrafficEventReason value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::traffic::types::TrafficEventReason read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::traffic::types::TrafficEventReason>(
            static_cast<typename ::std::underlying_type<::nds::traffic::types::TrafficEventReason>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::traffic::types::TrafficEventReason read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::traffic::types::TrafficEventReason>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficEventReason>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::traffic::types::TrafficEventReason value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::traffic::types::TrafficEventReason value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficEventReason>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/traffic/types/TrafficEventAdvice.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficEventAdvice enumeration.
constexpr ::std::array<const char*, 1> EnumTraits<::nds::traffic::types::TrafficEventAdvice>::names;
constexpr ::std::array<::nds::traffic::types::TrafficEventAdvice, 1> EnumTraits<::nds::traffic::types::TrafficEventAdvice>::values;
constexpr const char* EnumTraits<::nds::traffic::types::TrafficEventAdvice>::enumName;

template <>
size_t enumToOrdinal(::nds::traffic::types::TrafficEventAdvice value)
{
    switch (value)
    {
    case ::nds::traffic::types::TrafficEventAdvice::GIVE_WAY_TO_VEHICLE_FROM_BEHIND:
        return 0;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration TrafficEventAdvice: ") <<
                static_cast<typename ::std::underlying_type<::nds::traffic::types::TrafficEventAdvice>::type>(value) << "!";
    }
}

template <>
::nds::traffic::types::TrafficEventAdvice valueToEnum(
        typename ::std::underlying_type<::nds::traffic::types::TrafficEventAdvice>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
        return static_cast<::nds::traffic::types::TrafficEventAdvice>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration TrafficEventAdvice: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::traffic::types::TrafficEventAdvice>(::nds::traffic::types::TrafficEventAdvice value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::traffic::types::TrafficEventAdvice value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficEventAdvice>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::traffic::types::TrafficEventAdvice value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::traffic::types::TrafficEventAdvice value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficEventAdvice>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::traffic::types::TrafficEventAdvice value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::traffic::types::TrafficEventAdvice value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::traffic::types::TrafficEventAdvice read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::traffic::types::TrafficEventAdvice>(
            static_cast<typename ::std::underlying_type<::nds::traffic::types::TrafficEventAdvice>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::traffic::types::TrafficEventAdvice read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::traffic::types::TrafficEventAdvice>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficEventAdvice>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::traffic::types::TrafficEventAdvice value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::traffic::types::TrafficEventAdvice value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficEventAdvice>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/traffic/types/TrafficFlow.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficFlow enumeration.
constexpr ::std::array<const char*, 8> EnumTraits<::nds::traffic::types::TrafficFlow>::names;
constexpr ::std::array<::nds::traffic::types::TrafficFlow, 8> EnumTraits<::nds::traffic::types::TrafficFlow>::values;
constexpr const char* EnumTraits<::nds::traffic::types::TrafficFlow>::enumName;

template <>
size_t enumToOrdinal(::nds::traffic::types::TrafficFlow value)
{
    switch (value)
    {
    case ::nds::traffic::types::TrafficFlow::JAM:
        return 0;
    case ::nds::traffic::types::TrafficFlow::QUEUEING_TRAFFIC:
        return 1;
    case ::nds::traffic::types::TrafficFlow::SLOW_TRAFFIC:
        return 2;
    case ::nds::traffic::types::TrafficFlow::TRAFFIC_LIGHTER_THAN_NORMAL:
        return 3;
    case ::nds::traffic::types::TrafficFlow::FREE_FLOW:
        return 4;
    case ::nds::traffic::types::TrafficFlow::HEAVY_TRAFFIC:
        return 5;
    case ::nds::traffic::types::TrafficFlow::TRAFFIC_HEAVIER_THAN_NORMAL:
        return 6;
    case ::nds::traffic::types::TrafficFlow::TRAFFIC_BUILDING_UP:
        return 7;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration TrafficFlow: ") <<
                static_cast<typename ::std::underlying_type<::nds::traffic::types::TrafficFlow>::type>(value) << "!";
    }
}

template <>
::nds::traffic::types::TrafficFlow valueToEnum(
        typename ::std::underlying_type<::nds::traffic::types::TrafficFlow>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
    case UINT8_C(5):
    case UINT8_C(6):
    case UINT8_C(7):
        return static_cast<::nds::traffic::types::TrafficFlow>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration TrafficFlow: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::traffic::types::TrafficFlow>(::nds::traffic::types::TrafficFlow value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::traffic::types::TrafficFlow value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficFlow>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::traffic::types::TrafficFlow)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::traffic::types::TrafficFlow value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficFlow>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::traffic::types::TrafficFlow value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::traffic::types::TrafficFlow value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::traffic::types::TrafficFlow read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::traffic::types::TrafficFlow>(
            static_cast<typename ::std::underlying_type<::nds::traffic::types::TrafficFlow>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::traffic::types::TrafficFlow read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::traffic::types::TrafficFlow>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficFlow>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::traffic::types::TrafficFlow value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::traffic::types::TrafficFlow value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::traffic::types::TrafficFlow>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/traffic/types/TrafficEvent.h>

namespace nds
{
namespace traffic
{
namespace types
{

TrafficEvent::TrafficEvent(const allocator_type&) noexcept :
        m_reason_(::nds::traffic::types::TrafficEventReason()),
        m_delay_(::nds::core::types::Seconds()),
        m_blockedPassage_(bool())
{
}

TrafficEvent::TrafficEvent(::zserio::BitStreamReader& in, const allocator_type&) :
        m_reason_(readReason(in)),
        m_delay_(readDelay(in)),
        m_blockedPassage_(readBlockedPassage(in))
{
}

TrafficEvent::TrafficEvent(TrafficEvent::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_reason_(readReason(context, in)),
        m_delay_(readDelay(context, in)),
        m_blockedPassage_(readBlockedPassage(in))
{
}

TrafficEvent::TrafficEvent(::zserio::PropagateAllocatorT,
        const TrafficEvent& other, const allocator_type& allocator) :
        m_reason_(::zserio::allocatorPropagatingCopy(other.m_reason_, allocator)),
        m_delay_(::zserio::allocatorPropagatingCopy(other.m_delay_, allocator)),
        m_blockedPassage_(::zserio::allocatorPropagatingCopy(other.m_blockedPassage_, allocator))
{
}

::nds::traffic::types::TrafficEventReason TrafficEvent::getReason() const
{
    return m_reason_;
}

void TrafficEvent::setReason(::nds::traffic::types::TrafficEventReason reason_)
{
    m_reason_ = reason_;
}

::nds::core::types::Seconds TrafficEvent::getDelay() const
{
    return m_delay_;
}

void TrafficEvent::setDelay(::nds::core::types::Seconds delay_)
{
    m_delay_ = delay_;
}

bool TrafficEvent::getBlockedPassage() const
{
    return m_blockedPassage_;
}

void TrafficEvent::setBlockedPassage(bool blockedPassage_)
{
    m_blockedPassage_ = blockedPassage_;
}

void TrafficEvent::initPackingContext(TrafficEvent::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getReason(), m_reason_);
    context.getDelay().init<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_delay_);
}

size_t TrafficEvent::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_reason_);
    endBitPosition += ::zserio::bitSizeOfVarUInt(m_delay_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TrafficEvent::bitSizeOf(TrafficEvent::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getReason(), m_reason_);
    endBitPosition += context.getDelay().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_delay_);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t TrafficEvent::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_reason_);
    endBitPosition += ::zserio::bitSizeOfVarUInt(m_delay_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t TrafficEvent::initializeOffsets(TrafficEvent::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getReason(), endBitPosition,
        m_reason_);
    endBitPosition += context.getDelay().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(m_delay_);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool TrafficEvent::operator==(const TrafficEvent& other) const
{
    if (this != &other)
    {
        return
                (m_reason_ == other.m_reason_) &&
                (m_delay_ == other.m_delay_) &&
                (m_blockedPassage_ == other.m_blockedPassage_);
    }

    return true;
}

uint32_t TrafficEvent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_reason_);
    result = ::zserio::calcHashCode(result, m_delay_);
    result = ::zserio::calcHashCode(result, m_blockedPassage_);

    return result;
}

void TrafficEvent::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_reason_);
    out.writeVarUInt(m_delay_);
    out.writeBool(m_blockedPassage_);
}

void TrafficEvent::write(TrafficEvent::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getReason(), out, m_reason_);
    context.getDelay().write<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(out, m_delay_);
    out.writeBool(m_blockedPassage_);
}

::nds::traffic::types::TrafficEventReason TrafficEvent::readReason(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::traffic::types::TrafficEventReason>(in);
}

::nds::traffic::types::TrafficEventReason TrafficEvent::readReason(TrafficEvent::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::traffic::types::TrafficEventReason>(context.getReason(), in);
}
::nds::core::types::Seconds TrafficEvent::readDelay(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::Seconds>(in.readVarUInt());
}

::nds::core::types::Seconds TrafficEvent::readDelay(TrafficEvent::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getDelay().read<::zserio::VarIntArrayTraits<::nds::core::types::Seconds>>(in);
}
bool TrafficEvent::readBlockedPassage(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace types
} // namespace traffic
} // namespace nds
