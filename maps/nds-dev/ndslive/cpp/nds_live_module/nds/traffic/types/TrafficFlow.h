/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_TRAFFIC_TYPES_TRAFFIC_FLOW_H
#define NDS_TRAFFIC_TYPES_TRAFFIC_FLOW_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace traffic
{
namespace types
{

enum class TrafficFlow : uint8_t
{
    JAM = UINT8_C(0),
    QUEUEING_TRAFFIC = UINT8_C(1),
    SLOW_TRAFFIC = UINT8_C(2),
    TRAFFIC_LIGHTER_THAN_NORMAL = UINT8_C(3),
    FREE_FLOW = UINT8_C(4),
    HEAVY_TRAFFIC = UINT8_C(5),
    TRAFFIC_HEAVIER_THAN_NORMAL = UINT8_C(6),
    TRAFFIC_BUILDING_UP = UINT8_C(7)
};

} // namespace types
} // namespace traffic
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficFlow enumeration.
template <>
struct EnumTraits<::nds::traffic::types::TrafficFlow>
{
    static constexpr ::std::array<const char*, 8> names =
    {{
        "JAM",
        "QUEUEING_TRAFFIC",
        "SLOW_TRAFFIC",
        "TRAFFIC_LIGHTER_THAN_NORMAL",
        "FREE_FLOW",
        "HEAVY_TRAFFIC",
        "TRAFFIC_HEAVIER_THAN_NORMAL",
        "TRAFFIC_BUILDING_UP"
    }};

    static constexpr ::std::array<::nds::traffic::types::TrafficFlow, 8> values =
    {{
        ::nds::traffic::types::TrafficFlow::JAM,
        ::nds::traffic::types::TrafficFlow::QUEUEING_TRAFFIC,
        ::nds::traffic::types::TrafficFlow::SLOW_TRAFFIC,
        ::nds::traffic::types::TrafficFlow::TRAFFIC_LIGHTER_THAN_NORMAL,
        ::nds::traffic::types::TrafficFlow::FREE_FLOW,
        ::nds::traffic::types::TrafficFlow::HEAVY_TRAFFIC,
        ::nds::traffic::types::TrafficFlow::TRAFFIC_HEAVIER_THAN_NORMAL,
        ::nds::traffic::types::TrafficFlow::TRAFFIC_BUILDING_UP
    }};

    static constexpr const char* enumName = "TrafficFlow";
};

template <>
size_t enumToOrdinal<::nds::traffic::types::TrafficFlow>(::nds::traffic::types::TrafficFlow value);

template <>
::nds::traffic::types::TrafficFlow valueToEnum<::nds::traffic::types::TrafficFlow>(
        typename ::std::underlying_type<::nds::traffic::types::TrafficFlow>::type rawValue);

template <>
uint32_t enumHashCode<::nds::traffic::types::TrafficFlow>(::nds::traffic::types::TrafficFlow value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::traffic::types::TrafficFlow>(::zserio::DeltaContext& context, ::nds::traffic::types::TrafficFlow value);

template <>
size_t bitSizeOf<::nds::traffic::types::TrafficFlow>(::nds::traffic::types::TrafficFlow value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::traffic::types::TrafficFlow>(::zserio::DeltaContext& context, ::nds::traffic::types::TrafficFlow value);

template <>
size_t initializeOffsets<::nds::traffic::types::TrafficFlow>(size_t bitPosition, ::nds::traffic::types::TrafficFlow value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::traffic::types::TrafficFlow>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::traffic::types::TrafficFlow value);

template <>
::nds::traffic::types::TrafficFlow read<::nds::traffic::types::TrafficFlow>(::zserio::BitStreamReader& in);

template <>
::nds::traffic::types::TrafficFlow read<::nds::traffic::types::TrafficFlow, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::traffic::types::TrafficFlow>(::zserio::BitStreamWriter& out, ::nds::traffic::types::TrafficFlow value);

template <>
void write<::zserio::DeltaContext, ::nds::traffic::types::TrafficFlow>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::traffic::types::TrafficFlow value);

} // namespace zserio

#endif // NDS_TRAFFIC_TYPES_TRAFFIC_FLOW_H
