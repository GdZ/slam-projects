/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_TRAFFIC_PROPERTIES_PROPERTY_VALUE_H
#define NDS_TRAFFIC_PROPERTIES_PROPERTY_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/Seconds.h>
#include <nds/core/types/SpeedKmh.h>
#include <nds/traffic/properties/PropertyType.h>
#include <nds/traffic/types/TrafficEventAdvice.h>
#include <nds/traffic/types/TrafficEventId.h>
#include <nds/traffic/types/TrafficEventIdString.h>
#include <nds/traffic/types/TrafficEventUuid.h>

namespace nds
{
namespace traffic
{
namespace properties
{

class PropertyValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_eventId = 0,
        CHOICE_eventUuid = 1,
        CHOICE_eventIdString = 2,
        CHOICE_advice = 3,
        CHOICE_estimatedTravelTime = 4,
        CHOICE_estimatedAverageSpeed = 5,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getEventId()
        {
            return m_eventId_;
        }

        ::nds::traffic::types::TrafficEventUuid::ZserioPackingContext& getEventUuid()
        {
            return m_eventUuid_;
        }

        ::zserio::DeltaContext& getAdvice()
        {
            return m_advice_;
        }

        ::zserio::DeltaContext& getEstimatedTravelTime()
        {
            return m_estimatedTravelTime_;
        }

        ::zserio::DeltaContext& getEstimatedAverageSpeed()
        {
            return m_estimatedAverageSpeed_;
        }

    private:
        ::zserio::DeltaContext m_eventId_;
        ::nds::traffic::types::TrafficEventUuid::ZserioPackingContext m_eventUuid_;
        ::zserio::DeltaContext m_advice_;
        ::zserio::DeltaContext m_estimatedTravelTime_;
        ::zserio::DeltaContext m_estimatedAverageSpeed_;
    };

    PropertyValue() noexcept :
            PropertyValue(allocator_type())
    {}

    explicit PropertyValue(const allocator_type& allocator) noexcept;

    explicit PropertyValue(::zserio::BitStreamReader& in,
            ::nds::traffic::properties::PropertyType type_, const allocator_type& allocator = allocator_type());
    explicit PropertyValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::traffic::properties::PropertyType type_, const allocator_type& allocator = allocator_type());

    ~PropertyValue() = default;

    PropertyValue(const PropertyValue& other);
    PropertyValue& operator=(const PropertyValue& other);

    PropertyValue(PropertyValue&& other);
    PropertyValue& operator=(PropertyValue&& other);

    PropertyValue(::zserio::PropagateAllocatorT,
            const PropertyValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::traffic::properties::PropertyType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::traffic::properties::PropertyType getType() const;

    ::nds::traffic::types::TrafficEventId getEventId() const;
    void setEventId(::nds::traffic::types::TrafficEventId eventId_);

    const ::nds::traffic::types::TrafficEventUuid& getEventUuid() const;
    ::nds::traffic::types::TrafficEventUuid& getEventUuid();
    void setEventUuid(const ::nds::traffic::types::TrafficEventUuid& eventUuid_);
    void setEventUuid(::nds::traffic::types::TrafficEventUuid&& eventUuid_);

    const ::nds::traffic::types::TrafficEventIdString& getEventIdString() const;
    ::nds::traffic::types::TrafficEventIdString& getEventIdString();
    void setEventIdString(const ::nds::traffic::types::TrafficEventIdString& eventIdString_);
    void setEventIdString(::nds::traffic::types::TrafficEventIdString&& eventIdString_);

    ::nds::traffic::types::TrafficEventAdvice getAdvice() const;
    void setAdvice(::nds::traffic::types::TrafficEventAdvice advice_);

    ::nds::core::types::Seconds getEstimatedTravelTime() const;
    void setEstimatedTravelTime(::nds::core::types::Seconds estimatedTravelTime_);

    ::nds::core::types::SpeedKmh getEstimatedAverageSpeed() const;
    void setEstimatedAverageSpeed(::nds::core::types::SpeedKmh estimatedAverageSpeed_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PropertyValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::traffic::properties::PropertyType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace properties
} // namespace traffic
} // namespace nds

#endif // NDS_TRAFFIC_PROPERTIES_PROPERTY_VALUE_H
