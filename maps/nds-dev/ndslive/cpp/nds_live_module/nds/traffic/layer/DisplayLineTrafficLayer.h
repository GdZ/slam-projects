/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_TRAFFIC_LAYER_DISPLAY_LINE_TRAFFIC_LAYER_H
#define NDS_TRAFFIC_LAYER_DISPLAY_LINE_TRAFFIC_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/system/types/LayerType.h>
#include <nds/traffic/instantiations/TrafficDisplayLineRangeAttributeMapList.h>
#include <nds/traffic/instantiations/TrafficDisplayLineRangeAttributeSetList.h>
#include <nds/traffic/metadata/DisplayLineTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace layer
{

class DisplayLineTrafficLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList::ZserioPackingContext& getDisplayLineRangeAttributeMaps()
        {
            return m_displayLineRangeAttributeMaps_;
        }

        ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList::ZserioPackingContext& getDisplayLineRangeAttributeSets()
        {
            return m_displayLineRangeAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::zserio::DeltaContext m_shift_;
        ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList::ZserioPackingContext m_displayLineRangeAttributeMaps_;
        ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList::ZserioPackingContext m_displayLineRangeAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DisplayLineTrafficLayer() noexcept :
            DisplayLineTrafficLayer(allocator_type())
    {}

    explicit DisplayLineTrafficLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_displayLineRangeAttributeMaps = ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList,
            typename ZSERIO_T_displayLineRangeAttributeSets = ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList>
    DisplayLineTrafficLayer(
            ::nds::traffic::metadata::DisplayLineTrafficLayerContent content_,
            ::nds::core::geometry::CoordShift shift_,
            ZSERIO_T_displayLineRangeAttributeMaps&& displayLineRangeAttributeMaps_,
            ZSERIO_T_displayLineRangeAttributeSets&& displayLineRangeAttributeSets_,
            const allocator_type& allocator = allocator_type()) :
            DisplayLineTrafficLayer(allocator)
    {
        m_content_ = content_;
        m_shift_ = shift_;
        m_displayLineRangeAttributeMaps_ = ::std::forward<ZSERIO_T_displayLineRangeAttributeMaps>(displayLineRangeAttributeMaps_);
        m_displayLineRangeAttributeSets_ = ::std::forward<ZSERIO_T_displayLineRangeAttributeSets>(displayLineRangeAttributeSets_);
    }

    explicit DisplayLineTrafficLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DisplayLineTrafficLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DisplayLineTrafficLayer() = default;

    DisplayLineTrafficLayer(const DisplayLineTrafficLayer& other);
    DisplayLineTrafficLayer& operator=(const DisplayLineTrafficLayer& other);

    DisplayLineTrafficLayer(DisplayLineTrafficLayer&& other);
    DisplayLineTrafficLayer& operator=(DisplayLineTrafficLayer&& other);

    DisplayLineTrafficLayer(::zserio::PropagateAllocatorT,
            const DisplayLineTrafficLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::traffic::metadata::DisplayLineTrafficLayerContent getContent() const;
    void setContent(::nds::traffic::metadata::DisplayLineTrafficLayerContent content_);

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList& getDisplayLineRangeAttributeMaps() const;
    ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList& getDisplayLineRangeAttributeMaps();
    void setDisplayLineRangeAttributeMaps(const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList& displayLineRangeAttributeMaps_);
    void setDisplayLineRangeAttributeMaps(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList&& displayLineRangeAttributeMaps_);
    bool isDisplayLineRangeAttributeMapsUsed() const;
    bool isDisplayLineRangeAttributeMapsSet() const;
    void resetDisplayLineRangeAttributeMaps();

    const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList& getDisplayLineRangeAttributeSets() const;
    ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList& getDisplayLineRangeAttributeSets();
    void setDisplayLineRangeAttributeSets(const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList& displayLineRangeAttributeSets_);
    void setDisplayLineRangeAttributeSets(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList&& displayLineRangeAttributeSets_);
    bool isDisplayLineRangeAttributeSetsUsed() const;
    bool isDisplayLineRangeAttributeSetsSet() const;
    void resetDisplayLineRangeAttributeSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DisplayLineTrafficLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::traffic::metadata::DisplayLineTrafficLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::traffic::metadata::DisplayLineTrafficLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList> readDisplayLineRangeAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList> readDisplayLineRangeAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList> readDisplayLineRangeAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList> readDisplayLineRangeAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::traffic::metadata::DisplayLineTrafficLayerContent m_content_;
    ::nds::core::geometry::CoordShift m_shift_;
    ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList> m_displayLineRangeAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList> m_displayLineRangeAttributeSets_;
};

} // namespace layer
} // namespace traffic
} // namespace nds

#endif // NDS_TRAFFIC_LAYER_DISPLAY_LINE_TRAFFIC_LAYER_H
