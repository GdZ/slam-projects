/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/layer/RoadTrafficLayer.h>
#include <nds/system/types/LayerType.h>
#include <nds/traffic/metadata/RoadTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace layer
{

RoadTrafficLayer::RoadTrafficLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::traffic::metadata::RoadTrafficLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_roadRangeAttributeMaps_(::zserio::NullOpt),
        m_transitionAttributeMaps_(::zserio::NullOpt),
        m_roadRangeAttributeSets_(::zserio::NullOpt),
        m_transitionAttributeSets_(::zserio::NullOpt)
{
}

RoadTrafficLayer::RoadTrafficLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(in, allocator)),
        m_transitionAttributeMaps_(readTransitionAttributeMaps(in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(in, allocator)),
        m_transitionAttributeSets_(readTransitionAttributeSets(in, allocator))
{
}

RoadTrafficLayer::RoadTrafficLayer(RoadTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(context, in, allocator)),
        m_transitionAttributeMaps_(readTransitionAttributeMaps(context, in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(context, in, allocator)),
        m_transitionAttributeSets_(readTransitionAttributeSets(context, in, allocator))
{
}

RoadTrafficLayer::RoadTrafficLayer(const RoadTrafficLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_roadRangeAttributeMaps_(other.m_roadRangeAttributeMaps_),
        m_transitionAttributeMaps_(other.m_transitionAttributeMaps_),
        m_roadRangeAttributeSets_(other.m_roadRangeAttributeSets_),
        m_transitionAttributeSets_(other.m_transitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadTrafficLayer& RoadTrafficLayer::operator=(const RoadTrafficLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_roadRangeAttributeMaps_ = other.m_roadRangeAttributeMaps_;
    m_transitionAttributeMaps_ = other.m_transitionAttributeMaps_;
    m_roadRangeAttributeSets_ = other.m_roadRangeAttributeSets_;
    m_transitionAttributeSets_ = other.m_transitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadTrafficLayer::RoadTrafficLayer(RoadTrafficLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_roadRangeAttributeMaps_(::std::move(other.m_roadRangeAttributeMaps_)),
        m_transitionAttributeMaps_(::std::move(other.m_transitionAttributeMaps_)),
        m_roadRangeAttributeSets_(::std::move(other.m_roadRangeAttributeSets_)),
        m_transitionAttributeSets_(::std::move(other.m_transitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadTrafficLayer& RoadTrafficLayer::operator=(RoadTrafficLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_roadRangeAttributeMaps_ = ::std::move(other.m_roadRangeAttributeMaps_);
    m_transitionAttributeMaps_ = ::std::move(other.m_transitionAttributeMaps_);
    m_roadRangeAttributeSets_ = ::std::move(other.m_roadRangeAttributeSets_);
    m_transitionAttributeSets_ = ::std::move(other.m_transitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadTrafficLayer::RoadTrafficLayer(::zserio::PropagateAllocatorT,
        const RoadTrafficLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_roadRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMaps_, allocator)),
        m_transitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMaps_, allocator)),
        m_roadRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeSets_, allocator)),
        m_transitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadTrafficLayer::initializeChildren()
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
        m_roadRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
        m_transitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
        m_roadRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
        m_transitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayer::getContent() const
{
    return m_content_;
}

void RoadTrafficLayer::setContent(::nds::traffic::metadata::RoadTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift RoadTrafficLayer::getShift() const
{
    return m_shift_;
}

void RoadTrafficLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList& RoadTrafficLayer::getRoadRangeAttributeMaps()
{
    return m_roadRangeAttributeMaps_.value();
}

const ::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList& RoadTrafficLayer::getRoadRangeAttributeMaps() const
{
    return m_roadRangeAttributeMaps_.value();
}

void RoadTrafficLayer::setRoadRangeAttributeMaps(const ::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = roadRangeAttributeMaps_;
}

void RoadTrafficLayer::setRoadRangeAttributeMaps(::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList&& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = ::std::move(roadRangeAttributeMaps_);
}

bool RoadTrafficLayer::isRoadRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS);
}

bool RoadTrafficLayer::isRoadRangeAttributeMapsSet() const
{
    return m_roadRangeAttributeMaps_.hasValue();
}

void RoadTrafficLayer::resetRoadRangeAttributeMaps()
{
    m_roadRangeAttributeMaps_.reset();
}

::nds::traffic::instantiations::TrafficTransitionAttributeMapList& RoadTrafficLayer::getTransitionAttributeMaps()
{
    return m_transitionAttributeMaps_.value();
}

const ::nds::traffic::instantiations::TrafficTransitionAttributeMapList& RoadTrafficLayer::getTransitionAttributeMaps() const
{
    return m_transitionAttributeMaps_.value();
}

void RoadTrafficLayer::setTransitionAttributeMaps(const ::nds::traffic::instantiations::TrafficTransitionAttributeMapList& transitionAttributeMaps_)
{
    m_transitionAttributeMaps_ = transitionAttributeMaps_;
}

void RoadTrafficLayer::setTransitionAttributeMaps(::nds::traffic::instantiations::TrafficTransitionAttributeMapList&& transitionAttributeMaps_)
{
    m_transitionAttributeMaps_ = ::std::move(transitionAttributeMaps_);
}

bool RoadTrafficLayer::isTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS);
}

bool RoadTrafficLayer::isTransitionAttributeMapsSet() const
{
    return m_transitionAttributeMaps_.hasValue();
}

void RoadTrafficLayer::resetTransitionAttributeMaps()
{
    m_transitionAttributeMaps_.reset();
}

::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList& RoadTrafficLayer::getRoadRangeAttributeSets()
{
    return m_roadRangeAttributeSets_.value();
}

const ::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList& RoadTrafficLayer::getRoadRangeAttributeSets() const
{
    return m_roadRangeAttributeSets_.value();
}

void RoadTrafficLayer::setRoadRangeAttributeSets(const ::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = roadRangeAttributeSets_;
}

void RoadTrafficLayer::setRoadRangeAttributeSets(::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList&& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = ::std::move(roadRangeAttributeSets_);
}

bool RoadTrafficLayer::isRoadRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadTrafficLayer::isRoadRangeAttributeSetsSet() const
{
    return m_roadRangeAttributeSets_.hasValue();
}

void RoadTrafficLayer::resetRoadRangeAttributeSets()
{
    m_roadRangeAttributeSets_.reset();
}

::nds::traffic::instantiations::TrafficTransitionAttributeSetList& RoadTrafficLayer::getTransitionAttributeSets()
{
    return m_transitionAttributeSets_.value();
}

const ::nds::traffic::instantiations::TrafficTransitionAttributeSetList& RoadTrafficLayer::getTransitionAttributeSets() const
{
    return m_transitionAttributeSets_.value();
}

void RoadTrafficLayer::setTransitionAttributeSets(const ::nds::traffic::instantiations::TrafficTransitionAttributeSetList& transitionAttributeSets_)
{
    m_transitionAttributeSets_ = transitionAttributeSets_;
}

void RoadTrafficLayer::setTransitionAttributeSets(::nds::traffic::instantiations::TrafficTransitionAttributeSetList&& transitionAttributeSets_)
{
    m_transitionAttributeSets_ = ::std::move(transitionAttributeSets_);
}

bool RoadTrafficLayer::isTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS);
}

bool RoadTrafficLayer::isTransitionAttributeSetsSet() const
{
    return m_transitionAttributeSets_.hasValue();
}

void RoadTrafficLayer::resetTransitionAttributeSets()
{
    m_transitionAttributeSets_.reset();
}

::nds::system::types::LayerType RoadTrafficLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadTrafficLayer::initPackingContext(RoadTrafficLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        m_roadRangeAttributeMaps_.value().initPackingContext(context.getRoadRangeAttributeMaps());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        m_transitionAttributeMaps_.value().initPackingContext(context.getTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeSets_.value().initPackingContext(context.getRoadRangeAttributeSets());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeSets_.value().initPackingContext(context.getTransitionAttributeSets());
    }
}

size_t RoadTrafficLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_transitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadTrafficLayer::bitSizeOf(RoadTrafficLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_transitionAttributeMaps_.value().bitSizeOf(context.getTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(context.getRoadRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeSets_.value().bitSizeOf(context.getTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadTrafficLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_transitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadTrafficLayer::initializeOffsets(RoadTrafficLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_transitionAttributeMaps_.value().initializeOffsets(context.getTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(context.getRoadRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeSets_.value().initializeOffsets(context.getTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadTrafficLayer::operator==(const RoadTrafficLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isRoadRangeAttributeMapsUsed() ? !other.isRoadRangeAttributeMapsUsed() : (m_roadRangeAttributeMaps_ == other.m_roadRangeAttributeMaps_)) &&
                (!isTransitionAttributeMapsUsed() ? !other.isTransitionAttributeMapsUsed() : (m_transitionAttributeMaps_ == other.m_transitionAttributeMaps_)) &&
                (!isRoadRangeAttributeSetsUsed() ? !other.isRoadRangeAttributeSetsUsed() : (m_roadRangeAttributeSets_ == other.m_roadRangeAttributeSets_)) &&
                (!isTransitionAttributeSetsUsed() ? !other.isTransitionAttributeSetsUsed() : (m_transitionAttributeSets_ == other.m_transitionAttributeSets_));
    }

    return true;
}

uint32_t RoadTrafficLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isRoadRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMaps_);
    if (isTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMaps_);
    if (isRoadRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeSets_);
    if (isTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeSets_);

    return result;
}

void RoadTrafficLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayer.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_transitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayer.transitionAttributeMaps: ") <<
                    m_transitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayer.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_transitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayer.transitionAttributeSets: ") <<
                    m_transitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeSets_.value().write(out);
    }
}

void RoadTrafficLayer::write(RoadTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayer.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(context.getRoadRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_transitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayer.transitionAttributeMaps: ") <<
                    m_transitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeMaps_.value().write(context.getTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayer.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(context.getRoadRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_transitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayer.transitionAttributeSets: ") <<
                    m_transitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeSets_.value().write(context.getTransitionAttributeSets(), out);
    }
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadTrafficLayerContent(in);
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayer::readContent(RoadTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadTrafficLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift RoadTrafficLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadTrafficLayer::readShift(RoadTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList> RoadTrafficLayer::readRoadRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList>(::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList> RoadTrafficLayer::readRoadRangeAttributeMaps(RoadTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList>(::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList(context.getRoadRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMapList> RoadTrafficLayer::readTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMapList>(::nds::traffic::instantiations::TrafficTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMapList> RoadTrafficLayer::readTransitionAttributeMaps(RoadTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMapList>(::nds::traffic::instantiations::TrafficTransitionAttributeMapList(context.getTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList> RoadTrafficLayer::readRoadRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList>(::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList> RoadTrafficLayer::readRoadRangeAttributeSets(RoadTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList>(::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList(context.getRoadRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeSetList> RoadTrafficLayer::readTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeSetList>(::nds::traffic::instantiations::TrafficTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeSetList> RoadTrafficLayer::readTransitionAttributeSets(RoadTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeSetList>(::nds::traffic::instantiations::TrafficTransitionAttributeSetList(context.getTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/layer/RoadTrafficLayerIndirect.h>
#include <nds/system/types/LayerType.h>
#include <nds/traffic/metadata/RoadTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace layer
{

RoadTrafficLayerIndirect::RoadTrafficLayerIndirect(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::traffic::metadata::RoadTrafficLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_roadRangeAttributeMaps_(::zserio::NullOpt),
        m_roadRangeAttributeSets_(::zserio::NullOpt)
{
}

RoadTrafficLayerIndirect::RoadTrafficLayerIndirect(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(in, allocator))
{
}

RoadTrafficLayerIndirect::RoadTrafficLayerIndirect(RoadTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(context, in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(context, in, allocator))
{
}

RoadTrafficLayerIndirect::RoadTrafficLayerIndirect(const RoadTrafficLayerIndirect& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_roadRangeAttributeMaps_(other.m_roadRangeAttributeMaps_),
        m_roadRangeAttributeSets_(other.m_roadRangeAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadTrafficLayerIndirect& RoadTrafficLayerIndirect::operator=(const RoadTrafficLayerIndirect& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_roadRangeAttributeMaps_ = other.m_roadRangeAttributeMaps_;
    m_roadRangeAttributeSets_ = other.m_roadRangeAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadTrafficLayerIndirect::RoadTrafficLayerIndirect(RoadTrafficLayerIndirect&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_roadRangeAttributeMaps_(::std::move(other.m_roadRangeAttributeMaps_)),
        m_roadRangeAttributeSets_(::std::move(other.m_roadRangeAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadTrafficLayerIndirect& RoadTrafficLayerIndirect::operator=(RoadTrafficLayerIndirect&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_roadRangeAttributeMaps_ = ::std::move(other.m_roadRangeAttributeMaps_);
    m_roadRangeAttributeSets_ = ::std::move(other.m_roadRangeAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadTrafficLayerIndirect::RoadTrafficLayerIndirect(::zserio::PropagateAllocatorT,
        const RoadTrafficLayerIndirect& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_roadRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMaps_, allocator)),
        m_roadRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadTrafficLayerIndirect::initializeChildren()
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
        m_roadRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
        m_roadRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerIndirect::getContent() const
{
    return m_content_;
}

void RoadTrafficLayerIndirect::setContent(::nds::traffic::metadata::RoadTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift RoadTrafficLayerIndirect::getShift() const
{
    return m_shift_;
}

void RoadTrafficLayerIndirect::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList& RoadTrafficLayerIndirect::getRoadRangeAttributeMaps()
{
    return m_roadRangeAttributeMaps_.value();
}

const ::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList& RoadTrafficLayerIndirect::getRoadRangeAttributeMaps() const
{
    return m_roadRangeAttributeMaps_.value();
}

void RoadTrafficLayerIndirect::setRoadRangeAttributeMaps(const ::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = roadRangeAttributeMaps_;
}

void RoadTrafficLayerIndirect::setRoadRangeAttributeMaps(::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList&& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = ::std::move(roadRangeAttributeMaps_);
}

bool RoadTrafficLayerIndirect::isRoadRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS);
}

bool RoadTrafficLayerIndirect::isRoadRangeAttributeMapsSet() const
{
    return m_roadRangeAttributeMaps_.hasValue();
}

void RoadTrafficLayerIndirect::resetRoadRangeAttributeMaps()
{
    m_roadRangeAttributeMaps_.reset();
}

::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList& RoadTrafficLayerIndirect::getRoadRangeAttributeSets()
{
    return m_roadRangeAttributeSets_.value();
}

const ::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList& RoadTrafficLayerIndirect::getRoadRangeAttributeSets() const
{
    return m_roadRangeAttributeSets_.value();
}

void RoadTrafficLayerIndirect::setRoadRangeAttributeSets(const ::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = roadRangeAttributeSets_;
}

void RoadTrafficLayerIndirect::setRoadRangeAttributeSets(::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList&& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = ::std::move(roadRangeAttributeSets_);
}

bool RoadTrafficLayerIndirect::isRoadRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadTrafficLayerIndirect::isRoadRangeAttributeSetsSet() const
{
    return m_roadRangeAttributeSets_.hasValue();
}

void RoadTrafficLayerIndirect::resetRoadRangeAttributeSets()
{
    m_roadRangeAttributeSets_.reset();
}

::nds::system::types::LayerType RoadTrafficLayerIndirect::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadTrafficLayerIndirect::initPackingContext(RoadTrafficLayerIndirect::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        m_roadRangeAttributeMaps_.value().initPackingContext(context.getRoadRangeAttributeMaps());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeSets_.value().initPackingContext(context.getRoadRangeAttributeSets());
    }
}

size_t RoadTrafficLayerIndirect::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadTrafficLayerIndirect::bitSizeOf(RoadTrafficLayerIndirect::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(context.getRoadRangeAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadTrafficLayerIndirect::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadTrafficLayerIndirect::initializeOffsets(RoadTrafficLayerIndirect::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(context.getRoadRangeAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadTrafficLayerIndirect::operator==(const RoadTrafficLayerIndirect& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isRoadRangeAttributeMapsUsed() ? !other.isRoadRangeAttributeMapsUsed() : (m_roadRangeAttributeMaps_ == other.m_roadRangeAttributeMaps_)) &&
                (!isRoadRangeAttributeSetsUsed() ? !other.isRoadRangeAttributeSetsUsed() : (m_roadRangeAttributeSets_ == other.m_roadRangeAttributeSets_));
    }

    return true;
}

uint32_t RoadTrafficLayerIndirect::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isRoadRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMaps_);
    if (isRoadRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeSets_);

    return result;
}

void RoadTrafficLayerIndirect::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayerIndirect.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayerIndirect.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(out);
    }
}

void RoadTrafficLayerIndirect::write(RoadTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayerIndirect.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(context.getRoadRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadTrafficLayerIndirect.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(context.getRoadRangeAttributeSets(), out);
    }
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerIndirect::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadTrafficLayerContent(in);
}

::nds::traffic::metadata::RoadTrafficLayerContent RoadTrafficLayerIndirect::readContent(RoadTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadTrafficLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift RoadTrafficLayerIndirect::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadTrafficLayerIndirect::readShift(RoadTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList> RoadTrafficLayerIndirect::readRoadRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList>(::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList> RoadTrafficLayerIndirect::readRoadRangeAttributeMaps(RoadTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList>(::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList(context.getRoadRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList> RoadTrafficLayerIndirect::readRoadRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList>(::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList> RoadTrafficLayerIndirect::readRoadRangeAttributeSets(RoadTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS) == ::nds::traffic::metadata::RoadTrafficLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList>(::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList(context.getRoadRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectRoadRangeAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/layer/RoadLocationTrafficLayer.h>
#include <nds/system/types/LayerType.h>
#include <nds/traffic/metadata/RoadLocationTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace layer
{

RoadLocationTrafficLayer::RoadLocationTrafficLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::traffic::metadata::RoadLocationTrafficLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_roadLocationRangeAttributeMaps_(::zserio::NullOpt),
        m_roadLocationTransitionAttributeMaps_(::zserio::NullOpt),
        m_roadLocationRangeAttributeSets_(::zserio::NullOpt),
        m_roadLocationTransitionAttributeSets_(::zserio::NullOpt)
{
}

RoadLocationTrafficLayer::RoadLocationTrafficLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_roadLocationRangeAttributeMaps_(readRoadLocationRangeAttributeMaps(in, allocator)),
        m_roadLocationTransitionAttributeMaps_(readRoadLocationTransitionAttributeMaps(in, allocator)),
        m_roadLocationRangeAttributeSets_(readRoadLocationRangeAttributeSets(in, allocator)),
        m_roadLocationTransitionAttributeSets_(readRoadLocationTransitionAttributeSets(in, allocator))
{
}

RoadLocationTrafficLayer::RoadLocationTrafficLayer(RoadLocationTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_roadLocationRangeAttributeMaps_(readRoadLocationRangeAttributeMaps(context, in, allocator)),
        m_roadLocationTransitionAttributeMaps_(readRoadLocationTransitionAttributeMaps(context, in, allocator)),
        m_roadLocationRangeAttributeSets_(readRoadLocationRangeAttributeSets(context, in, allocator)),
        m_roadLocationTransitionAttributeSets_(readRoadLocationTransitionAttributeSets(context, in, allocator))
{
}

RoadLocationTrafficLayer::RoadLocationTrafficLayer(const RoadLocationTrafficLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_roadLocationRangeAttributeMaps_(other.m_roadLocationRangeAttributeMaps_),
        m_roadLocationTransitionAttributeMaps_(other.m_roadLocationTransitionAttributeMaps_),
        m_roadLocationRangeAttributeSets_(other.m_roadLocationRangeAttributeSets_),
        m_roadLocationTransitionAttributeSets_(other.m_roadLocationTransitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadLocationTrafficLayer& RoadLocationTrafficLayer::operator=(const RoadLocationTrafficLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_roadLocationRangeAttributeMaps_ = other.m_roadLocationRangeAttributeMaps_;
    m_roadLocationTransitionAttributeMaps_ = other.m_roadLocationTransitionAttributeMaps_;
    m_roadLocationRangeAttributeSets_ = other.m_roadLocationRangeAttributeSets_;
    m_roadLocationTransitionAttributeSets_ = other.m_roadLocationTransitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadLocationTrafficLayer::RoadLocationTrafficLayer(RoadLocationTrafficLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_roadLocationRangeAttributeMaps_(::std::move(other.m_roadLocationRangeAttributeMaps_)),
        m_roadLocationTransitionAttributeMaps_(::std::move(other.m_roadLocationTransitionAttributeMaps_)),
        m_roadLocationRangeAttributeSets_(::std::move(other.m_roadLocationRangeAttributeSets_)),
        m_roadLocationTransitionAttributeSets_(::std::move(other.m_roadLocationTransitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadLocationTrafficLayer& RoadLocationTrafficLayer::operator=(RoadLocationTrafficLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_roadLocationRangeAttributeMaps_ = ::std::move(other.m_roadLocationRangeAttributeMaps_);
    m_roadLocationTransitionAttributeMaps_ = ::std::move(other.m_roadLocationTransitionAttributeMaps_);
    m_roadLocationRangeAttributeSets_ = ::std::move(other.m_roadLocationRangeAttributeSets_);
    m_roadLocationTransitionAttributeSets_ = ::std::move(other.m_roadLocationTransitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadLocationTrafficLayer::RoadLocationTrafficLayer(::zserio::PropagateAllocatorT,
        const RoadLocationTrafficLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_roadLocationRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadLocationRangeAttributeMaps_, allocator)),
        m_roadLocationTransitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadLocationTransitionAttributeMaps_, allocator)),
        m_roadLocationRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadLocationRangeAttributeSets_, allocator)),
        m_roadLocationTransitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadLocationTransitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadLocationTrafficLayer::initializeChildren()
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
        m_roadLocationRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
        m_roadLocationTransitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
        m_roadLocationRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
        m_roadLocationTransitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::traffic::metadata::RoadLocationTrafficLayerContent RoadLocationTrafficLayer::getContent() const
{
    return m_content_;
}

void RoadLocationTrafficLayer::setContent(::nds::traffic::metadata::RoadLocationTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift RoadLocationTrafficLayer::getShift() const
{
    return m_shift_;
}

void RoadLocationTrafficLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList& RoadLocationTrafficLayer::getRoadLocationRangeAttributeMaps()
{
    return m_roadLocationRangeAttributeMaps_.value();
}

const ::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList& RoadLocationTrafficLayer::getRoadLocationRangeAttributeMaps() const
{
    return m_roadLocationRangeAttributeMaps_.value();
}

void RoadLocationTrafficLayer::setRoadLocationRangeAttributeMaps(const ::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList& roadLocationRangeAttributeMaps_)
{
    m_roadLocationRangeAttributeMaps_ = roadLocationRangeAttributeMaps_;
}

void RoadLocationTrafficLayer::setRoadLocationRangeAttributeMaps(::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList&& roadLocationRangeAttributeMaps_)
{
    m_roadLocationRangeAttributeMaps_ = ::std::move(roadLocationRangeAttributeMaps_);
}

bool RoadLocationTrafficLayer::isRoadLocationRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS);
}

bool RoadLocationTrafficLayer::isRoadLocationRangeAttributeMapsSet() const
{
    return m_roadLocationRangeAttributeMaps_.hasValue();
}

void RoadLocationTrafficLayer::resetRoadLocationRangeAttributeMaps()
{
    m_roadLocationRangeAttributeMaps_.reset();
}

::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList& RoadLocationTrafficLayer::getRoadLocationTransitionAttributeMaps()
{
    return m_roadLocationTransitionAttributeMaps_.value();
}

const ::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList& RoadLocationTrafficLayer::getRoadLocationTransitionAttributeMaps() const
{
    return m_roadLocationTransitionAttributeMaps_.value();
}

void RoadLocationTrafficLayer::setRoadLocationTransitionAttributeMaps(const ::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList& roadLocationTransitionAttributeMaps_)
{
    m_roadLocationTransitionAttributeMaps_ = roadLocationTransitionAttributeMaps_;
}

void RoadLocationTrafficLayer::setRoadLocationTransitionAttributeMaps(::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList&& roadLocationTransitionAttributeMaps_)
{
    m_roadLocationTransitionAttributeMaps_ = ::std::move(roadLocationTransitionAttributeMaps_);
}

bool RoadLocationTrafficLayer::isRoadLocationTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS);
}

bool RoadLocationTrafficLayer::isRoadLocationTransitionAttributeMapsSet() const
{
    return m_roadLocationTransitionAttributeMaps_.hasValue();
}

void RoadLocationTrafficLayer::resetRoadLocationTransitionAttributeMaps()
{
    m_roadLocationTransitionAttributeMaps_.reset();
}

::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList& RoadLocationTrafficLayer::getRoadLocationRangeAttributeSets()
{
    return m_roadLocationRangeAttributeSets_.value();
}

const ::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList& RoadLocationTrafficLayer::getRoadLocationRangeAttributeSets() const
{
    return m_roadLocationRangeAttributeSets_.value();
}

void RoadLocationTrafficLayer::setRoadLocationRangeAttributeSets(const ::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList& roadLocationRangeAttributeSets_)
{
    m_roadLocationRangeAttributeSets_ = roadLocationRangeAttributeSets_;
}

void RoadLocationTrafficLayer::setRoadLocationRangeAttributeSets(::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList&& roadLocationRangeAttributeSets_)
{
    m_roadLocationRangeAttributeSets_ = ::std::move(roadLocationRangeAttributeSets_);
}

bool RoadLocationTrafficLayer::isRoadLocationRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS);
}

bool RoadLocationTrafficLayer::isRoadLocationRangeAttributeSetsSet() const
{
    return m_roadLocationRangeAttributeSets_.hasValue();
}

void RoadLocationTrafficLayer::resetRoadLocationRangeAttributeSets()
{
    m_roadLocationRangeAttributeSets_.reset();
}

::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList& RoadLocationTrafficLayer::getRoadLocationTransitionAttributeSets()
{
    return m_roadLocationTransitionAttributeSets_.value();
}

const ::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList& RoadLocationTrafficLayer::getRoadLocationTransitionAttributeSets() const
{
    return m_roadLocationTransitionAttributeSets_.value();
}

void RoadLocationTrafficLayer::setRoadLocationTransitionAttributeSets(const ::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList& roadLocationTransitionAttributeSets_)
{
    m_roadLocationTransitionAttributeSets_ = roadLocationTransitionAttributeSets_;
}

void RoadLocationTrafficLayer::setRoadLocationTransitionAttributeSets(::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList&& roadLocationTransitionAttributeSets_)
{
    m_roadLocationTransitionAttributeSets_ = ::std::move(roadLocationTransitionAttributeSets_);
}

bool RoadLocationTrafficLayer::isRoadLocationTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS);
}

bool RoadLocationTrafficLayer::isRoadLocationTransitionAttributeSetsSet() const
{
    return m_roadLocationTransitionAttributeSets_.hasValue();
}

void RoadLocationTrafficLayer::resetRoadLocationTransitionAttributeSets()
{
    m_roadLocationTransitionAttributeSets_.reset();
}

::nds::system::types::LayerType RoadLocationTrafficLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadLocationTrafficLayer::initPackingContext(RoadLocationTrafficLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        m_roadLocationRangeAttributeMaps_.value().initPackingContext(context.getRoadLocationRangeAttributeMaps());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        m_roadLocationTransitionAttributeMaps_.value().initPackingContext(context.getRoadLocationTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadLocationRangeAttributeSets_.value().initPackingContext(context.getRoadLocationRangeAttributeSets());
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_roadLocationTransitionAttributeSets_.value().initPackingContext(context.getRoadLocationTransitionAttributeSets());
    }
}

size_t RoadLocationTrafficLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition += m_roadLocationRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition += m_roadLocationTransitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadLocationRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_roadLocationTransitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadLocationTrafficLayer::bitSizeOf(RoadLocationTrafficLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition += m_roadLocationRangeAttributeMaps_.value().bitSizeOf(context.getRoadLocationRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition += m_roadLocationTransitionAttributeMaps_.value().bitSizeOf(context.getRoadLocationTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadLocationRangeAttributeSets_.value().bitSizeOf(context.getRoadLocationRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_roadLocationTransitionAttributeSets_.value().bitSizeOf(context.getRoadLocationTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadLocationTrafficLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition = m_roadLocationRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition = m_roadLocationTransitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadLocationRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_roadLocationTransitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadLocationTrafficLayer::initializeOffsets(RoadLocationTrafficLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition = m_roadLocationRangeAttributeMaps_.value().initializeOffsets(context.getRoadLocationRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition = m_roadLocationTransitionAttributeMaps_.value().initializeOffsets(context.getRoadLocationTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadLocationRangeAttributeSets_.value().initializeOffsets(context.getRoadLocationRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_roadLocationTransitionAttributeSets_.value().initializeOffsets(context.getRoadLocationTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadLocationTrafficLayer::operator==(const RoadLocationTrafficLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isRoadLocationRangeAttributeMapsUsed() ? !other.isRoadLocationRangeAttributeMapsUsed() : (m_roadLocationRangeAttributeMaps_ == other.m_roadLocationRangeAttributeMaps_)) &&
                (!isRoadLocationTransitionAttributeMapsUsed() ? !other.isRoadLocationTransitionAttributeMapsUsed() : (m_roadLocationTransitionAttributeMaps_ == other.m_roadLocationTransitionAttributeMaps_)) &&
                (!isRoadLocationRangeAttributeSetsUsed() ? !other.isRoadLocationRangeAttributeSetsUsed() : (m_roadLocationRangeAttributeSets_ == other.m_roadLocationRangeAttributeSets_)) &&
                (!isRoadLocationTransitionAttributeSetsUsed() ? !other.isRoadLocationTransitionAttributeSetsUsed() : (m_roadLocationTransitionAttributeSets_ == other.m_roadLocationTransitionAttributeSets_));
    }

    return true;
}

uint32_t RoadLocationTrafficLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isRoadLocationRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationRangeAttributeMaps_);
    if (isRoadLocationTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationTransitionAttributeMaps_);
    if (isRoadLocationRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationRangeAttributeSets_);
    if (isRoadLocationTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationTransitionAttributeSets_);

    return result;
}

void RoadLocationTrafficLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        // check parameters
        if (m_roadLocationRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationTrafficLayer.roadLocationRangeAttributeMaps: ") <<
                    m_roadLocationRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        // check parameters
        if (m_roadLocationTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationTrafficLayer.roadLocationTransitionAttributeMaps: ") <<
                    m_roadLocationTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationTransitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        // check parameters
        if (m_roadLocationRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationTrafficLayer.roadLocationRangeAttributeSets: ") <<
                    m_roadLocationRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        // check parameters
        if (m_roadLocationTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationTrafficLayer.roadLocationTransitionAttributeSets: ") <<
                    m_roadLocationTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationTransitionAttributeSets_.value().write(out);
    }
}

void RoadLocationTrafficLayer::write(RoadLocationTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        // check parameters
        if (m_roadLocationRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationTrafficLayer.roadLocationRangeAttributeMaps: ") <<
                    m_roadLocationRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationRangeAttributeMaps_.value().write(context.getRoadLocationRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        // check parameters
        if (m_roadLocationTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationTrafficLayer.roadLocationTransitionAttributeMaps: ") <<
                    m_roadLocationTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationTransitionAttributeMaps_.value().write(context.getRoadLocationTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        // check parameters
        if (m_roadLocationRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationTrafficLayer.roadLocationRangeAttributeSets: ") <<
                    m_roadLocationRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationRangeAttributeSets_.value().write(context.getRoadLocationRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        // check parameters
        if (m_roadLocationTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationTrafficLayer.roadLocationTransitionAttributeSets: ") <<
                    m_roadLocationTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationTransitionAttributeSets_.value().write(context.getRoadLocationTransitionAttributeSets(), out);
    }
}

::nds::traffic::metadata::RoadLocationTrafficLayerContent RoadLocationTrafficLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadLocationTrafficLayerContent(in);
}

::nds::traffic::metadata::RoadLocationTrafficLayerContent RoadLocationTrafficLayer::readContent(RoadLocationTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::RoadLocationTrafficLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift RoadLocationTrafficLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadLocationTrafficLayer::readShift(RoadLocationTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList> RoadLocationTrafficLayer::readRoadLocationRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList>(::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList> RoadLocationTrafficLayer::readRoadLocationRangeAttributeMaps(RoadLocationTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList>(::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList(context.getRoadLocationRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList> RoadLocationTrafficLayer::readRoadLocationTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList>(::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList> RoadLocationTrafficLayer::readRoadLocationTransitionAttributeMaps(RoadLocationTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList>(::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList(context.getRoadLocationTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList> RoadLocationTrafficLayer::readRoadLocationRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList>(::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList> RoadLocationTrafficLayer::readRoadLocationRangeAttributeSets(RoadLocationTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList>(::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList(context.getRoadLocationRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList> RoadLocationTrafficLayer::readRoadLocationTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList>(::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList> RoadLocationTrafficLayer::readRoadLocationTransitionAttributeSets(RoadLocationTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::traffic::metadata::RoadLocationTrafficLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList>(::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList(context.getRoadLocationTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficRoadLocationTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/layer/LaneTrafficLayer.h>
#include <nds/system/types/LayerType.h>
#include <nds/traffic/metadata/LaneTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace layer
{

LaneTrafficLayer::LaneTrafficLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::traffic::metadata::LaneTrafficLayerContent()),
        m_laneRangeAttributeMaps_(::zserio::NullOpt),
        m_laneRangeAttributeSets_(::zserio::NullOpt)
{
}

LaneTrafficLayer::LaneTrafficLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(in, allocator))
{
}

LaneTrafficLayer::LaneTrafficLayer(LaneTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(context, in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(context, in, allocator))
{
}

LaneTrafficLayer::LaneTrafficLayer(const LaneTrafficLayer& other) :
        m_content_(other.m_content_),
        m_laneRangeAttributeMaps_(other.m_laneRangeAttributeMaps_),
        m_laneRangeAttributeSets_(other.m_laneRangeAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneTrafficLayer& LaneTrafficLayer::operator=(const LaneTrafficLayer& other)
{
    m_content_ = other.m_content_;
    m_laneRangeAttributeMaps_ = other.m_laneRangeAttributeMaps_;
    m_laneRangeAttributeSets_ = other.m_laneRangeAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneTrafficLayer::LaneTrafficLayer(LaneTrafficLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_laneRangeAttributeMaps_(::std::move(other.m_laneRangeAttributeMaps_)),
        m_laneRangeAttributeSets_(::std::move(other.m_laneRangeAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneTrafficLayer& LaneTrafficLayer::operator=(LaneTrafficLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_laneRangeAttributeMaps_ = ::std::move(other.m_laneRangeAttributeMaps_);
    m_laneRangeAttributeSets_ = ::std::move(other.m_laneRangeAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneTrafficLayer::LaneTrafficLayer(::zserio::PropagateAllocatorT,
        const LaneTrafficLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMaps_, allocator)),
        m_laneRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneTrafficLayer::initializeChildren()
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
        m_laneRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
        m_laneRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayer::getContent() const
{
    return m_content_;
}

void LaneTrafficLayer::setContent(::nds::traffic::metadata::LaneTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList& LaneTrafficLayer::getLaneRangeAttributeMaps()
{
    return m_laneRangeAttributeMaps_.value();
}

const ::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList& LaneTrafficLayer::getLaneRangeAttributeMaps() const
{
    return m_laneRangeAttributeMaps_.value();
}

void LaneTrafficLayer::setLaneRangeAttributeMaps(const ::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = laneRangeAttributeMaps_;
}

void LaneTrafficLayer::setLaneRangeAttributeMaps(::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList&& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = ::std::move(laneRangeAttributeMaps_);
}

bool LaneTrafficLayer::isLaneRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS);
}

bool LaneTrafficLayer::isLaneRangeAttributeMapsSet() const
{
    return m_laneRangeAttributeMaps_.hasValue();
}

void LaneTrafficLayer::resetLaneRangeAttributeMaps()
{
    m_laneRangeAttributeMaps_.reset();
}

::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList& LaneTrafficLayer::getLaneRangeAttributeSets()
{
    return m_laneRangeAttributeSets_.value();
}

const ::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList& LaneTrafficLayer::getLaneRangeAttributeSets() const
{
    return m_laneRangeAttributeSets_.value();
}

void LaneTrafficLayer::setLaneRangeAttributeSets(const ::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = laneRangeAttributeSets_;
}

void LaneTrafficLayer::setLaneRangeAttributeSets(::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList&& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = ::std::move(laneRangeAttributeSets_);
}

bool LaneTrafficLayer::isLaneRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneTrafficLayer::isLaneRangeAttributeSetsSet() const
{
    return m_laneRangeAttributeSets_.hasValue();
}

void LaneTrafficLayer::resetLaneRangeAttributeSets()
{
    m_laneRangeAttributeSets_.reset();
}

::nds::system::types::LayerType LaneTrafficLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void LaneTrafficLayer::initPackingContext(LaneTrafficLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_laneRangeAttributeMaps_.value().initPackingContext(context.getLaneRangeAttributeMaps());
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeSets_.value().initPackingContext(context.getLaneRangeAttributeSets());
    }
}

size_t LaneTrafficLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneTrafficLayer::bitSizeOf(LaneTrafficLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(context.getLaneRangeAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneTrafficLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneTrafficLayer::initializeOffsets(LaneTrafficLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(context.getLaneRangeAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool LaneTrafficLayer::operator==(const LaneTrafficLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMapsUsed() ? !other.isLaneRangeAttributeMapsUsed() : (m_laneRangeAttributeMaps_ == other.m_laneRangeAttributeMaps_)) &&
                (!isLaneRangeAttributeSetsUsed() ? !other.isLaneRangeAttributeSetsUsed() : (m_laneRangeAttributeSets_ == other.m_laneRangeAttributeSets_));
    }

    return true;
}

uint32_t LaneTrafficLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMaps_);
    if (isLaneRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeSets_);

    return result;
}

void LaneTrafficLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneTrafficLayer.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneTrafficLayer.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(out);
    }
}

void LaneTrafficLayer::write(LaneTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneTrafficLayer.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(context.getLaneRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneTrafficLayer.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(context.getLaneRangeAttributeSets(), out);
    }
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::LaneTrafficLayerContent(in);
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayer::readContent(LaneTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::LaneTrafficLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList> LaneTrafficLayer::readLaneRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList>(::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList> LaneTrafficLayer::readLaneRangeAttributeMaps(LaneTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList>(::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList(context.getLaneRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList> LaneTrafficLayer::readLaneRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList>(::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList> LaneTrafficLayer::readLaneRangeAttributeSets(LaneTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList>(::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList(context.getLaneRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficLaneRangeAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/layer/LaneTrafficLayerIndirect.h>
#include <nds/system/types/LayerType.h>
#include <nds/traffic/metadata/LaneTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace layer
{

LaneTrafficLayerIndirect::LaneTrafficLayerIndirect(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::traffic::metadata::LaneTrafficLayerContent()),
        m_laneRangeAttributeMaps_(::zserio::NullOpt),
        m_laneRangeAttributeSets_(::zserio::NullOpt)
{
}

LaneTrafficLayerIndirect::LaneTrafficLayerIndirect(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(in, allocator))
{
}

LaneTrafficLayerIndirect::LaneTrafficLayerIndirect(LaneTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(context, in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(context, in, allocator))
{
}

LaneTrafficLayerIndirect::LaneTrafficLayerIndirect(const LaneTrafficLayerIndirect& other) :
        m_content_(other.m_content_),
        m_laneRangeAttributeMaps_(other.m_laneRangeAttributeMaps_),
        m_laneRangeAttributeSets_(other.m_laneRangeAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneTrafficLayerIndirect& LaneTrafficLayerIndirect::operator=(const LaneTrafficLayerIndirect& other)
{
    m_content_ = other.m_content_;
    m_laneRangeAttributeMaps_ = other.m_laneRangeAttributeMaps_;
    m_laneRangeAttributeSets_ = other.m_laneRangeAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneTrafficLayerIndirect::LaneTrafficLayerIndirect(LaneTrafficLayerIndirect&& other) :
        m_content_(::std::move(other.m_content_)),
        m_laneRangeAttributeMaps_(::std::move(other.m_laneRangeAttributeMaps_)),
        m_laneRangeAttributeSets_(::std::move(other.m_laneRangeAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneTrafficLayerIndirect& LaneTrafficLayerIndirect::operator=(LaneTrafficLayerIndirect&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_laneRangeAttributeMaps_ = ::std::move(other.m_laneRangeAttributeMaps_);
    m_laneRangeAttributeSets_ = ::std::move(other.m_laneRangeAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneTrafficLayerIndirect::LaneTrafficLayerIndirect(::zserio::PropagateAllocatorT,
        const LaneTrafficLayerIndirect& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMaps_, allocator)),
        m_laneRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneTrafficLayerIndirect::initializeChildren()
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
        m_laneRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
        m_laneRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerIndirect::getContent() const
{
    return m_content_;
}

void LaneTrafficLayerIndirect::setContent(::nds::traffic::metadata::LaneTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList& LaneTrafficLayerIndirect::getLaneRangeAttributeMaps()
{
    return m_laneRangeAttributeMaps_.value();
}

const ::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList& LaneTrafficLayerIndirect::getLaneRangeAttributeMaps() const
{
    return m_laneRangeAttributeMaps_.value();
}

void LaneTrafficLayerIndirect::setLaneRangeAttributeMaps(const ::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = laneRangeAttributeMaps_;
}

void LaneTrafficLayerIndirect::setLaneRangeAttributeMaps(::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList&& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = ::std::move(laneRangeAttributeMaps_);
}

bool LaneTrafficLayerIndirect::isLaneRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS);
}

bool LaneTrafficLayerIndirect::isLaneRangeAttributeMapsSet() const
{
    return m_laneRangeAttributeMaps_.hasValue();
}

void LaneTrafficLayerIndirect::resetLaneRangeAttributeMaps()
{
    m_laneRangeAttributeMaps_.reset();
}

::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList& LaneTrafficLayerIndirect::getLaneRangeAttributeSets()
{
    return m_laneRangeAttributeSets_.value();
}

const ::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList& LaneTrafficLayerIndirect::getLaneRangeAttributeSets() const
{
    return m_laneRangeAttributeSets_.value();
}

void LaneTrafficLayerIndirect::setLaneRangeAttributeSets(const ::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = laneRangeAttributeSets_;
}

void LaneTrafficLayerIndirect::setLaneRangeAttributeSets(::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList&& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = ::std::move(laneRangeAttributeSets_);
}

bool LaneTrafficLayerIndirect::isLaneRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneTrafficLayerIndirect::isLaneRangeAttributeSetsSet() const
{
    return m_laneRangeAttributeSets_.hasValue();
}

void LaneTrafficLayerIndirect::resetLaneRangeAttributeSets()
{
    m_laneRangeAttributeSets_.reset();
}

::nds::system::types::LayerType LaneTrafficLayerIndirect::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void LaneTrafficLayerIndirect::initPackingContext(LaneTrafficLayerIndirect::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_laneRangeAttributeMaps_.value().initPackingContext(context.getLaneRangeAttributeMaps());
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeSets_.value().initPackingContext(context.getLaneRangeAttributeSets());
    }
}

size_t LaneTrafficLayerIndirect::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneTrafficLayerIndirect::bitSizeOf(LaneTrafficLayerIndirect::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(context.getLaneRangeAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneTrafficLayerIndirect::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneTrafficLayerIndirect::initializeOffsets(LaneTrafficLayerIndirect::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(context.getLaneRangeAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool LaneTrafficLayerIndirect::operator==(const LaneTrafficLayerIndirect& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMapsUsed() ? !other.isLaneRangeAttributeMapsUsed() : (m_laneRangeAttributeMaps_ == other.m_laneRangeAttributeMaps_)) &&
                (!isLaneRangeAttributeSetsUsed() ? !other.isLaneRangeAttributeSetsUsed() : (m_laneRangeAttributeSets_ == other.m_laneRangeAttributeSets_));
    }

    return true;
}

uint32_t LaneTrafficLayerIndirect::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMaps_);
    if (isLaneRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeSets_);

    return result;
}

void LaneTrafficLayerIndirect::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneTrafficLayerIndirect.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneTrafficLayerIndirect.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(out);
    }
}

void LaneTrafficLayerIndirect::write(LaneTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneTrafficLayerIndirect.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(context.getLaneRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneTrafficLayerIndirect.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(context.getLaneRangeAttributeSets(), out);
    }
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerIndirect::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::LaneTrafficLayerContent(in);
}

::nds::traffic::metadata::LaneTrafficLayerContent LaneTrafficLayerIndirect::readContent(LaneTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::LaneTrafficLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList> LaneTrafficLayerIndirect::readLaneRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList>(::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList> LaneTrafficLayerIndirect::readLaneRangeAttributeMaps(LaneTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList>(::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList(context.getLaneRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList> LaneTrafficLayerIndirect::readLaneRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList>(::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList> LaneTrafficLayerIndirect::readLaneRangeAttributeSets(LaneTrafficLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS) == ::nds::traffic::metadata::LaneTrafficLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList>(::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList(context.getLaneRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficIndirectLaneRangeAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace traffic
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/traffic/layer/DisplayLineTrafficLayer.h>
#include <nds/system/types/LayerType.h>
#include <nds/traffic/metadata/DisplayLineTrafficLayerContent.h>

namespace nds
{
namespace traffic
{
namespace layer
{

DisplayLineTrafficLayer::DisplayLineTrafficLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::traffic::metadata::DisplayLineTrafficLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_displayLineRangeAttributeMaps_(::zserio::NullOpt),
        m_displayLineRangeAttributeSets_(::zserio::NullOpt)
{
}

DisplayLineTrafficLayer::DisplayLineTrafficLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_displayLineRangeAttributeMaps_(readDisplayLineRangeAttributeMaps(in, allocator)),
        m_displayLineRangeAttributeSets_(readDisplayLineRangeAttributeSets(in, allocator))
{
}

DisplayLineTrafficLayer::DisplayLineTrafficLayer(DisplayLineTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_displayLineRangeAttributeMaps_(readDisplayLineRangeAttributeMaps(context, in, allocator)),
        m_displayLineRangeAttributeSets_(readDisplayLineRangeAttributeSets(context, in, allocator))
{
}

DisplayLineTrafficLayer::DisplayLineTrafficLayer(const DisplayLineTrafficLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_displayLineRangeAttributeMaps_(other.m_displayLineRangeAttributeMaps_),
        m_displayLineRangeAttributeSets_(other.m_displayLineRangeAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

DisplayLineTrafficLayer& DisplayLineTrafficLayer::operator=(const DisplayLineTrafficLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_displayLineRangeAttributeMaps_ = other.m_displayLineRangeAttributeMaps_;
    m_displayLineRangeAttributeSets_ = other.m_displayLineRangeAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

DisplayLineTrafficLayer::DisplayLineTrafficLayer(DisplayLineTrafficLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_displayLineRangeAttributeMaps_(::std::move(other.m_displayLineRangeAttributeMaps_)),
        m_displayLineRangeAttributeSets_(::std::move(other.m_displayLineRangeAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

DisplayLineTrafficLayer& DisplayLineTrafficLayer::operator=(DisplayLineTrafficLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_displayLineRangeAttributeMaps_ = ::std::move(other.m_displayLineRangeAttributeMaps_);
    m_displayLineRangeAttributeSets_ = ::std::move(other.m_displayLineRangeAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

DisplayLineTrafficLayer::DisplayLineTrafficLayer(::zserio::PropagateAllocatorT,
        const DisplayLineTrafficLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_displayLineRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeMaps_, allocator)),
        m_displayLineRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void DisplayLineTrafficLayer::initializeChildren()
{
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
        m_displayLineRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
        m_displayLineRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::traffic::metadata::DisplayLineTrafficLayerContent DisplayLineTrafficLayer::getContent() const
{
    return m_content_;
}

void DisplayLineTrafficLayer::setContent(::nds::traffic::metadata::DisplayLineTrafficLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift DisplayLineTrafficLayer::getShift() const
{
    return m_shift_;
}

void DisplayLineTrafficLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList& DisplayLineTrafficLayer::getDisplayLineRangeAttributeMaps()
{
    return m_displayLineRangeAttributeMaps_.value();
}

const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList& DisplayLineTrafficLayer::getDisplayLineRangeAttributeMaps() const
{
    return m_displayLineRangeAttributeMaps_.value();
}

void DisplayLineTrafficLayer::setDisplayLineRangeAttributeMaps(const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList& displayLineRangeAttributeMaps_)
{
    m_displayLineRangeAttributeMaps_ = displayLineRangeAttributeMaps_;
}

void DisplayLineTrafficLayer::setDisplayLineRangeAttributeMaps(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList&& displayLineRangeAttributeMaps_)
{
    m_displayLineRangeAttributeMaps_ = ::std::move(displayLineRangeAttributeMaps_);
}

bool DisplayLineTrafficLayer::isDisplayLineRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS);
}

bool DisplayLineTrafficLayer::isDisplayLineRangeAttributeMapsSet() const
{
    return m_displayLineRangeAttributeMaps_.hasValue();
}

void DisplayLineTrafficLayer::resetDisplayLineRangeAttributeMaps()
{
    m_displayLineRangeAttributeMaps_.reset();
}

::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList& DisplayLineTrafficLayer::getDisplayLineRangeAttributeSets()
{
    return m_displayLineRangeAttributeSets_.value();
}

const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList& DisplayLineTrafficLayer::getDisplayLineRangeAttributeSets() const
{
    return m_displayLineRangeAttributeSets_.value();
}

void DisplayLineTrafficLayer::setDisplayLineRangeAttributeSets(const ::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList& displayLineRangeAttributeSets_)
{
    m_displayLineRangeAttributeSets_ = displayLineRangeAttributeSets_;
}

void DisplayLineTrafficLayer::setDisplayLineRangeAttributeSets(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList&& displayLineRangeAttributeSets_)
{
    m_displayLineRangeAttributeSets_ = ::std::move(displayLineRangeAttributeSets_);
}

bool DisplayLineTrafficLayer::isDisplayLineRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS);
}

bool DisplayLineTrafficLayer::isDisplayLineRangeAttributeSetsSet() const
{
    return m_displayLineRangeAttributeSets_.hasValue();
}

void DisplayLineTrafficLayer::resetDisplayLineRangeAttributeSets()
{
    m_displayLineRangeAttributeSets_.reset();
}

::nds::system::types::LayerType DisplayLineTrafficLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void DisplayLineTrafficLayer::initPackingContext(DisplayLineTrafficLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        m_displayLineRangeAttributeMaps_.value().initPackingContext(context.getDisplayLineRangeAttributeMaps());
    }
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeSets_.value().initPackingContext(context.getDisplayLineRangeAttributeSets());
    }
}

size_t DisplayLineTrafficLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition += m_displayLineRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineTrafficLayer::bitSizeOf(DisplayLineTrafficLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition += m_displayLineRangeAttributeMaps_.value().bitSizeOf(context.getDisplayLineRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeSets_.value().bitSizeOf(context.getDisplayLineRangeAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineTrafficLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition = m_displayLineRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t DisplayLineTrafficLayer::initializeOffsets(DisplayLineTrafficLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition = m_displayLineRangeAttributeMaps_.value().initializeOffsets(context.getDisplayLineRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeSets_.value().initializeOffsets(context.getDisplayLineRangeAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool DisplayLineTrafficLayer::operator==(const DisplayLineTrafficLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isDisplayLineRangeAttributeMapsUsed() ? !other.isDisplayLineRangeAttributeMapsUsed() : (m_displayLineRangeAttributeMaps_ == other.m_displayLineRangeAttributeMaps_)) &&
                (!isDisplayLineRangeAttributeSetsUsed() ? !other.isDisplayLineRangeAttributeSetsUsed() : (m_displayLineRangeAttributeSets_ == other.m_displayLineRangeAttributeSets_));
    }

    return true;
}

uint32_t DisplayLineTrafficLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isDisplayLineRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeMaps_);
    if (isDisplayLineRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeSets_);

    return result;
}

void DisplayLineTrafficLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        // check parameters
        if (m_displayLineRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineTrafficLayer.displayLineRangeAttributeMaps: ") <<
                    m_displayLineRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        // check parameters
        if (m_displayLineRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineTrafficLayer.displayLineRangeAttributeSets: ") <<
                    m_displayLineRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeSets_.value().write(out);
    }
}

void DisplayLineTrafficLayer::write(DisplayLineTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        // check parameters
        if (m_displayLineRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineTrafficLayer.displayLineRangeAttributeMaps: ") <<
                    m_displayLineRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeMaps_.value().write(context.getDisplayLineRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        // check parameters
        if (m_displayLineRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineTrafficLayer.displayLineRangeAttributeSets: ") <<
                    m_displayLineRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeSets_.value().write(context.getDisplayLineRangeAttributeSets(), out);
    }
}

::nds::traffic::metadata::DisplayLineTrafficLayerContent DisplayLineTrafficLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::DisplayLineTrafficLayerContent(in);
}

::nds::traffic::metadata::DisplayLineTrafficLayerContent DisplayLineTrafficLayer::readContent(DisplayLineTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::traffic::metadata::DisplayLineTrafficLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift DisplayLineTrafficLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift DisplayLineTrafficLayer::readShift(DisplayLineTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList> DisplayLineTrafficLayer::readDisplayLineRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList>(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList> DisplayLineTrafficLayer::readDisplayLineRangeAttributeMaps(DisplayLineTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList>(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList(context.getDisplayLineRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList> DisplayLineTrafficLayer::readDisplayLineRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList>(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList> DisplayLineTrafficLayer::readDisplayLineRangeAttributeSets(DisplayLineTrafficLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::traffic::metadata::DisplayLineTrafficLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList>(::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList(context.getDisplayLineRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::traffic::instantiations::TrafficDisplayLineRangeAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace traffic
} // namespace nds
