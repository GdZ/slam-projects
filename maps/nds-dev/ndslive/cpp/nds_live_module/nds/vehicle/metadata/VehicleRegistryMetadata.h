/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VEHICLE_METADATA_VEHICLE_REGISTRY_METADATA_H
#define NDS_VEHICLE_METADATA_VEHICLE_REGISTRY_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/vehicle/metadata/VehicleServiceCapabilities.h>
#include <nds/vehicle/metadata/VehicleServiceType.h>

namespace nds
{
namespace vehicle
{
namespace metadata
{

class VehicleRegistryMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getVehicleServiceType()
        {
            return m_vehicleServiceType_;
        }

        ::nds::vehicle::metadata::VehicleServiceCapabilities::ZserioPackingContext& getCapabilities()
        {
            return m_capabilities_;
        }

    private:
        ::zserio::DeltaContext m_vehicleServiceType_;
        ::nds::vehicle::metadata::VehicleServiceCapabilities::ZserioPackingContext m_capabilities_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    VehicleRegistryMetadata() noexcept :
            VehicleRegistryMetadata(allocator_type())
    {}

    explicit VehicleRegistryMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_capabilities = ::nds::vehicle::metadata::VehicleServiceCapabilities>
    VehicleRegistryMetadata(
            ::nds::vehicle::metadata::VehicleServiceType vehicleServiceType_,
            ZSERIO_T_capabilities&& capabilities_,
            const allocator_type& allocator = allocator_type()) :
            VehicleRegistryMetadata(allocator)
    {
        m_vehicleServiceType_ = vehicleServiceType_;
        m_capabilities_ = ::std::forward<ZSERIO_T_capabilities>(capabilities_);
    }

    explicit VehicleRegistryMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit VehicleRegistryMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~VehicleRegistryMetadata() = default;

    VehicleRegistryMetadata(const VehicleRegistryMetadata& other);
    VehicleRegistryMetadata& operator=(const VehicleRegistryMetadata& other);

    VehicleRegistryMetadata(VehicleRegistryMetadata&& other);
    VehicleRegistryMetadata& operator=(VehicleRegistryMetadata&& other);

    VehicleRegistryMetadata(::zserio::PropagateAllocatorT,
            const VehicleRegistryMetadata& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::vehicle::metadata::VehicleServiceType getVehicleServiceType() const;
    void setVehicleServiceType(::nds::vehicle::metadata::VehicleServiceType vehicleServiceType_);

    const ::nds::vehicle::metadata::VehicleServiceCapabilities& getCapabilities() const;
    ::nds::vehicle::metadata::VehicleServiceCapabilities& getCapabilities();
    void setCapabilities(const ::nds::vehicle::metadata::VehicleServiceCapabilities& capabilities_);
    void setCapabilities(::nds::vehicle::metadata::VehicleServiceCapabilities&& capabilities_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const VehicleRegistryMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::vehicle::metadata::VehicleServiceType readVehicleServiceType(::zserio::BitStreamReader& in);
    ::nds::vehicle::metadata::VehicleServiceType readVehicleServiceType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::vehicle::metadata::VehicleServiceCapabilities readCapabilities(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::vehicle::metadata::VehicleServiceCapabilities readCapabilities(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::vehicle::metadata::VehicleServiceType m_vehicleServiceType_;
    ::nds::vehicle::metadata::VehicleServiceCapabilities m_capabilities_;
};

} // namespace metadata
} // namespace vehicle
} // namespace nds

#endif // NDS_VEHICLE_METADATA_VEHICLE_REGISTRY_METADATA_H
