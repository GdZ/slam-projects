/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VEHICLE_SERVICES_HORIZON_REQUEST_H
#define NDS_VEHICLE_SERVICES_HORIZON_REQUEST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/types/LengthMeters.h>
#include <nds/core/vehicle/VehiclePose.h>

namespace nds
{
namespace vehicle
{
namespace services
{

class HorizonRequest
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getHorizonLength()
        {
            return m_horizonLength_;
        }

    private:
        ::zserio::DeltaContext m_horizonLength_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    HorizonRequest() noexcept :
            HorizonRequest(allocator_type())
    {}

    explicit HorizonRequest(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_pose = ::zserio::vector<::nds::core::vehicle::VehiclePose>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_pose, HorizonRequest, allocator_type> = 0>
    HorizonRequest(
            ZSERIO_T_pose&& pose_,
            ::nds::core::types::LengthMeters horizonLength_,
            const allocator_type& allocator = allocator_type()) :
            HorizonRequest(allocator)
    {
        m_pose_ = ZserioArrayType_pose(::std::forward<ZSERIO_T_pose>(pose_));
        m_horizonLength_ = horizonLength_;
    }

    explicit HorizonRequest(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit HorizonRequest(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~HorizonRequest() = default;

    HorizonRequest(const HorizonRequest&) = default;
    HorizonRequest& operator=(const HorizonRequest&) = default;

    HorizonRequest(HorizonRequest&&) = default;
    HorizonRequest& operator=(HorizonRequest&&) = default;

    HorizonRequest(::zserio::PropagateAllocatorT,
            const HorizonRequest& other, const allocator_type& allocator);

    void initializeChildren();

    const ::zserio::vector<::nds::core::vehicle::VehiclePose>& getPose() const;
    ::zserio::vector<::nds::core::vehicle::VehiclePose>& getPose();
    void setPose(const ::zserio::vector<::nds::core::vehicle::VehiclePose>& pose_);
    void setPose(::zserio::vector<::nds::core::vehicle::VehiclePose>&& pose_);

    ::nds::core::types::LengthMeters getHorizonLength() const;
    void setHorizonLength(::nds::core::types::LengthMeters horizonLength_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const HorizonRequest& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_pose
    {
    public:
        using OwnerType = HorizonRequest;

        static void initializeElement(HorizonRequest& owner,
                ::nds::core::vehicle::VehiclePose& element, size_t index);
    };

    class ZserioElementFactory_pose
    {
    public:
        using OwnerType = HorizonRequest;

        static void create(HorizonRequest& owner,
                ::zserio::vector<::nds::core::vehicle::VehiclePose>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(HorizonRequest& owner,
                ::zserio::vector<::nds::core::vehicle::VehiclePose>& array,
                ::nds::core::vehicle::VehiclePose::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_pose = ::zserio::Array<::zserio::vector<::nds::core::vehicle::VehiclePose>, ::zserio::ObjectArrayTraits<::nds::core::vehicle::VehiclePose, ZserioElementFactory_pose>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_pose>;

    ZserioArrayType_pose readPose(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_pose readPose(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::types::LengthMeters readHorizonLength(::zserio::BitStreamReader& in);
    ::nds::core::types::LengthMeters readHorizonLength(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ZserioArrayType_pose m_pose_;
    ::nds::core::types::LengthMeters m_horizonLength_;
};

} // namespace services
} // namespace vehicle
} // namespace nds

#endif // NDS_VEHICLE_SERVICES_HORIZON_REQUEST_H
