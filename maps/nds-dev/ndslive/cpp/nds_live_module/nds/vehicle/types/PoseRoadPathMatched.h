/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VEHICLE_TYPES_POSE_ROAD_PATH_MATCHED_H
#define NDS_VEHICLE_TYPES_POSE_ROAD_PATH_MATCHED_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/types/SpeedKmh.h>
#include <nds/core/vehicle/Heading.h>
#include <nds/core/vehicle/MatchProbability.h>
#include <nds/vehicle/reference/types/HorizonPathId.h>
#include <nds/vehicle/reference/types/HorizonPathOffset.h>

namespace nds
{
namespace vehicle
{
namespace types
{

class PoseRoadPathMatched
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

        ::zserio::DeltaContext& getOffset()
        {
            return m_offset_;
        }

        ::zserio::DeltaContext& getAltitude()
        {
            return m_altitude_;
        }

        ::zserio::DeltaContext& getHeading()
        {
            return m_heading_;
        }

        ::zserio::DeltaContext& getSpeed()
        {
            return m_speed_;
        }

        ::nds::core::vehicle::MatchProbability::ZserioPackingContext& getProbability()
        {
            return m_probability_;
        }

    private:
        ::zserio::DeltaContext m_id_;
        ::zserio::DeltaContext m_offset_;
        ::zserio::DeltaContext m_altitude_;
        ::zserio::DeltaContext m_heading_;
        ::zserio::DeltaContext m_speed_;
        ::nds::core::vehicle::MatchProbability::ZserioPackingContext m_probability_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PoseRoadPathMatched() noexcept :
            PoseRoadPathMatched(allocator_type())
    {}

    explicit PoseRoadPathMatched(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_altitude = int32_t,
            typename ZSERIO_T_heading = ::nds::core::vehicle::Heading,
            typename ZSERIO_T_speed = ::nds::core::types::SpeedKmh,
            typename ZSERIO_T_probability = ::nds::core::vehicle::MatchProbability>
    PoseRoadPathMatched(
            ::nds::vehicle::reference::types::HorizonPathId id_,
            ::nds::vehicle::reference::types::HorizonPathOffset offset_,
            ZSERIO_T_altitude&& altitude_,
            ZSERIO_T_heading&& heading_,
            ZSERIO_T_speed&& speed_,
            ZSERIO_T_probability&& probability_,
            const allocator_type& allocator = allocator_type()) :
            PoseRoadPathMatched(allocator)
    {
        m_id_ = id_;
        m_offset_ = offset_;
        m_altitude_ = ::std::forward<ZSERIO_T_altitude>(altitude_);
        m_heading_ = ::std::forward<ZSERIO_T_heading>(heading_);
        m_speed_ = ::std::forward<ZSERIO_T_speed>(speed_);
        m_probability_ = ::std::forward<ZSERIO_T_probability>(probability_);
    }

    explicit PoseRoadPathMatched(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PoseRoadPathMatched(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PoseRoadPathMatched() = default;

    PoseRoadPathMatched(const PoseRoadPathMatched&) = default;
    PoseRoadPathMatched& operator=(const PoseRoadPathMatched&) = default;

    PoseRoadPathMatched(PoseRoadPathMatched&&) = default;
    PoseRoadPathMatched& operator=(PoseRoadPathMatched&&) = default;

    PoseRoadPathMatched(::zserio::PropagateAllocatorT,
            const PoseRoadPathMatched& other, const allocator_type& allocator);

    ::nds::vehicle::reference::types::HorizonPathId getId() const;
    void setId(::nds::vehicle::reference::types::HorizonPathId id_);

    ::nds::vehicle::reference::types::HorizonPathOffset getOffset() const;
    void setOffset(::nds::vehicle::reference::types::HorizonPathOffset offset_);

    int32_t getAltitude() const;
    void setAltitude(int32_t altitude_);
    bool isAltitudeUsed() const;
    bool isAltitudeSet() const;
    void resetAltitude();

    ::nds::core::vehicle::Heading getHeading() const;
    void setHeading(::nds::core::vehicle::Heading heading_);
    bool isHeadingUsed() const;
    bool isHeadingSet() const;
    void resetHeading();

    ::nds::core::types::SpeedKmh getSpeed() const;
    void setSpeed(::nds::core::types::SpeedKmh speed_);
    bool isSpeedUsed() const;
    bool isSpeedSet() const;
    void resetSpeed();

    const ::nds::core::vehicle::MatchProbability& getProbability() const;
    ::nds::core::vehicle::MatchProbability& getProbability();
    void setProbability(const ::nds::core::vehicle::MatchProbability& probability_);
    void setProbability(::nds::core::vehicle::MatchProbability&& probability_);
    bool isProbabilityUsed() const;
    bool isProbabilitySet() const;
    void resetProbability();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PoseRoadPathMatched& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::vehicle::reference::types::HorizonPathId readId(::zserio::BitStreamReader& in);
    ::nds::vehicle::reference::types::HorizonPathId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::vehicle::reference::types::HorizonPathOffset readOffset(::zserio::BitStreamReader& in);
    ::nds::vehicle::reference::types::HorizonPathOffset readOffset(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readAltitude(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readAltitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> readHeading(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> readHeading(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> readSpeed(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> readSpeed(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::MatchProbability> readProbability(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::MatchProbability> readProbability(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::vehicle::reference::types::HorizonPathId m_id_;
    ::nds::vehicle::reference::types::HorizonPathOffset m_offset_;
    ::zserio::InplaceOptionalHolder<int32_t> m_altitude_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> m_heading_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> m_speed_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::MatchProbability> m_probability_;
};

} // namespace types
} // namespace vehicle
} // namespace nds

#endif // NDS_VEHICLE_TYPES_POSE_ROAD_PATH_MATCHED_H
