/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VEHICLE_TOPICS_VEHICLE_TOPIC_COLLECTION_H
#define NDS_VEHICLE_TOPICS_VEHICLE_TOPIC_COLLECTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <memory>
#include <zserio/AllocatorHolder.h>
#include <zserio/IPubsub.h>
#include <zserio/PubsubException.h>
#include <zserio/ArrayTraits.h>

#include <nds/vehicle/topics/GeoRoadNetworkTopic.h>
#include <nds/vehicle/topics/MatchedGeoRoadNetworkTopic.h>
#include <nds/vehicle/topics/MppTopic.h>
#include <nds/vehicle/topics/PoseGeoMatchedTopic.h>
#include <nds/vehicle/topics/PoseRawTopic.h>

namespace nds
{
namespace vehicle
{
namespace topics
{

class VehicleTopicCollection : public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    explicit VehicleTopicCollection(::zserio::IPubsub& pubsub, const allocator_type& allocator = allocator_type());
    ~VehicleTopicCollection() = default;

    VehicleTopicCollection(const VehicleTopicCollection&) = delete;
    VehicleTopicCollection& operator=(const VehicleTopicCollection&) = delete;

    VehicleTopicCollection(VehicleTopicCollection&&) = default;
    VehicleTopicCollection& operator=(VehicleTopicCollection&&) = delete;

    template <typename ZSERIO_MESSAGE>
    class VehicleTopicCollectionCallback
    {
    public:
        virtual ~VehicleTopicCollectionCallback() = default;
        virtual void operator()(::zserio::StringView topic, const ZSERIO_MESSAGE& message) = 0;
    };

    void publishPoseRaw(const ::nds::vehicle::topics::PoseRawTopic& message, void* context = nullptr);

    ::zserio::IPubsub::SubscriptionId subscribePoseRaw(
            const ::std::shared_ptr<VehicleTopicCollectionCallback<::nds::vehicle::topics::PoseRawTopic>>& callback,
            void* context = nullptr);

    void publishPoseGeoMatched(const ::nds::vehicle::topics::PoseGeoMatchedTopic& message, void* context = nullptr);

    ::zserio::IPubsub::SubscriptionId subscribePoseGeoMatched(
            const ::std::shared_ptr<VehicleTopicCollectionCallback<::nds::vehicle::topics::PoseGeoMatchedTopic>>& callback,
            void* context = nullptr);

    void publishGeoRoadNetwork(const ::nds::vehicle::topics::GeoRoadNetworkTopic& message, void* context = nullptr);

    ::zserio::IPubsub::SubscriptionId subscribeGeoRoadNetwork(
            const ::std::shared_ptr<VehicleTopicCollectionCallback<::nds::vehicle::topics::GeoRoadNetworkTopic>>& callback,
            void* context = nullptr);

    void publishMpp(const ::nds::vehicle::topics::MppTopic& message, void* context = nullptr);

    ::zserio::IPubsub::SubscriptionId subscribeMpp(
            const ::std::shared_ptr<VehicleTopicCollectionCallback<::nds::vehicle::topics::MppTopic>>& callback,
            void* context = nullptr);

    void publishMatchedGeoRoadNetwork(const ::nds::vehicle::topics::MatchedGeoRoadNetworkTopic& message, void* context = nullptr);

    ::zserio::IPubsub::SubscriptionId subscribeMatchedGeoRoadNetwork(
            const ::std::shared_ptr<VehicleTopicCollectionCallback<::nds::vehicle::topics::MatchedGeoRoadNetworkTopic>>& callback,
            void* context = nullptr);

    void unsubscribe(::zserio::IPubsub::SubscriptionId id);

private:
    template <typename ZSERIO_MESSAGE>
    void publish(ZSERIO_MESSAGE& message, ::zserio::StringView topic, void* context);

    ::zserio::IPubsub& m_pubsub;
};

} // namespace topics
} // namespace vehicle
} // namespace nds

#endif // NDS_VEHICLE_TOPICS_VEHICLE_TOPIC_COLLECTION_H
