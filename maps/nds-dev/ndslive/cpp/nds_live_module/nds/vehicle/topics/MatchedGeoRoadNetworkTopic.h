/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VEHICLE_TOPICS_MATCHED_GEO_ROAD_NETWORK_TOPIC_H
#define NDS_VEHICLE_TOPICS_MATCHED_GEO_ROAD_NETWORK_TOPIC_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/types/TimeStamp.h>
#include <nds/vehicle/reference/types/HorizonPathId.h>
#include <nds/vehicle/types/Horizon.h>

namespace nds
{
namespace vehicle
{
namespace topics
{

class MatchedGeoRoadNetworkTopic
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::types::TimeStamp::ZserioPackingContext& getStamp()
        {
            return m_stamp_;
        }

        ::nds::vehicle::types::Horizon::ZserioPackingContext& getMatchedRoadNetwork()
        {
            return m_matchedRoadNetwork_;
        }

    private:
        ::nds::core::types::TimeStamp::ZserioPackingContext m_stamp_;
        ::nds::vehicle::types::Horizon::ZserioPackingContext m_matchedRoadNetwork_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    MatchedGeoRoadNetworkTopic() noexcept :
            MatchedGeoRoadNetworkTopic(allocator_type())
    {}

    explicit MatchedGeoRoadNetworkTopic(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_stamp = ::nds::core::types::TimeStamp,
            typename ZSERIO_T_matchedRoadNetwork = ::nds::vehicle::types::Horizon,
            typename ZSERIO_T_unmatchedPaths = ::zserio::vector<::nds::vehicle::reference::types::HorizonPathId>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_stamp, MatchedGeoRoadNetworkTopic, allocator_type> = 0>
    MatchedGeoRoadNetworkTopic(
            ZSERIO_T_stamp&& stamp_,
            ZSERIO_T_matchedRoadNetwork&& matchedRoadNetwork_,
            ZSERIO_T_unmatchedPaths&& unmatchedPaths_,
            const allocator_type& allocator = allocator_type()) :
            MatchedGeoRoadNetworkTopic(allocator)
    {
        m_stamp_ = ::std::forward<ZSERIO_T_stamp>(stamp_);
        m_matchedRoadNetwork_ = ::std::forward<ZSERIO_T_matchedRoadNetwork>(matchedRoadNetwork_);
        m_unmatchedPaths_ = ZserioArrayType_unmatchedPaths(::std::forward<ZSERIO_T_unmatchedPaths>(unmatchedPaths_));
    }

    explicit MatchedGeoRoadNetworkTopic(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit MatchedGeoRoadNetworkTopic(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~MatchedGeoRoadNetworkTopic() = default;

    MatchedGeoRoadNetworkTopic(const MatchedGeoRoadNetworkTopic&) = default;
    MatchedGeoRoadNetworkTopic& operator=(const MatchedGeoRoadNetworkTopic&) = default;

    MatchedGeoRoadNetworkTopic(MatchedGeoRoadNetworkTopic&&) = default;
    MatchedGeoRoadNetworkTopic& operator=(MatchedGeoRoadNetworkTopic&&) = default;

    MatchedGeoRoadNetworkTopic(::zserio::PropagateAllocatorT,
            const MatchedGeoRoadNetworkTopic& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::core::types::TimeStamp& getStamp() const;
    ::nds::core::types::TimeStamp& getStamp();
    void setStamp(const ::nds::core::types::TimeStamp& stamp_);
    void setStamp(::nds::core::types::TimeStamp&& stamp_);

    const ::nds::vehicle::types::Horizon& getMatchedRoadNetwork() const;
    ::nds::vehicle::types::Horizon& getMatchedRoadNetwork();
    void setMatchedRoadNetwork(const ::nds::vehicle::types::Horizon& matchedRoadNetwork_);
    void setMatchedRoadNetwork(::nds::vehicle::types::Horizon&& matchedRoadNetwork_);

    const ::zserio::vector<::nds::vehicle::reference::types::HorizonPathId>& getUnmatchedPaths() const;
    ::zserio::vector<::nds::vehicle::reference::types::HorizonPathId>& getUnmatchedPaths();
    void setUnmatchedPaths(const ::zserio::vector<::nds::vehicle::reference::types::HorizonPathId>& unmatchedPaths_);
    void setUnmatchedPaths(::zserio::vector<::nds::vehicle::reference::types::HorizonPathId>&& unmatchedPaths_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const MatchedGeoRoadNetworkTopic& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_unmatchedPaths = ::zserio::Array<::zserio::vector<::nds::vehicle::reference::types::HorizonPathId>, ::zserio::VarIntNNArrayTraits<::nds::vehicle::reference::types::HorizonPathId>, ::zserio::ArrayType::AUTO>;

    ::nds::core::types::TimeStamp readStamp(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::TimeStamp readStamp(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::vehicle::types::Horizon readMatchedRoadNetwork(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::vehicle::types::Horizon readMatchedRoadNetwork(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_unmatchedPaths readUnmatchedPaths(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_unmatchedPaths readUnmatchedPaths(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::types::TimeStamp m_stamp_;
    ::nds::vehicle::types::Horizon m_matchedRoadNetwork_;
    ZserioArrayType_unmatchedPaths m_unmatchedPaths_;
};

} // namespace topics
} // namespace vehicle
} // namespace nds

#endif // NDS_VEHICLE_TOPICS_MATCHED_GEO_ROAD_NETWORK_TOPIC_H
