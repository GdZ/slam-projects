/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_VEHICLE_TOPICS_GEO_ROAD_NETWORK_TOPIC_H
#define NDS_VEHICLE_TOPICS_GEO_ROAD_NETWORK_TOPIC_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/TimeStamp.h>
#include <nds/vehicle/types/Horizon.h>

namespace nds
{
namespace vehicle
{
namespace topics
{

class GeoRoadNetworkTopic
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::types::TimeStamp::ZserioPackingContext& getStamp()
        {
            return m_stamp_;
        }

        ::nds::vehicle::types::Horizon::ZserioPackingContext& getRoadNetwork()
        {
            return m_roadNetwork_;
        }

    private:
        ::nds::core::types::TimeStamp::ZserioPackingContext m_stamp_;
        ::nds::vehicle::types::Horizon::ZserioPackingContext m_roadNetwork_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    GeoRoadNetworkTopic() noexcept :
            GeoRoadNetworkTopic(allocator_type())
    {}

    explicit GeoRoadNetworkTopic(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_stamp = ::nds::core::types::TimeStamp,
            typename ZSERIO_T_roadNetwork = ::nds::vehicle::types::Horizon,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_stamp, GeoRoadNetworkTopic, allocator_type> = 0>
    GeoRoadNetworkTopic(
            ZSERIO_T_stamp&& stamp_,
            ZSERIO_T_roadNetwork&& roadNetwork_,
            const allocator_type& allocator = allocator_type()) :
            GeoRoadNetworkTopic(allocator)
    {
        m_stamp_ = ::std::forward<ZSERIO_T_stamp>(stamp_);
        m_roadNetwork_ = ::std::forward<ZSERIO_T_roadNetwork>(roadNetwork_);
    }

    explicit GeoRoadNetworkTopic(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit GeoRoadNetworkTopic(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~GeoRoadNetworkTopic() = default;

    GeoRoadNetworkTopic(const GeoRoadNetworkTopic&) = default;
    GeoRoadNetworkTopic& operator=(const GeoRoadNetworkTopic&) = default;

    GeoRoadNetworkTopic(GeoRoadNetworkTopic&&) = default;
    GeoRoadNetworkTopic& operator=(GeoRoadNetworkTopic&&) = default;

    GeoRoadNetworkTopic(::zserio::PropagateAllocatorT,
            const GeoRoadNetworkTopic& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::core::types::TimeStamp& getStamp() const;
    ::nds::core::types::TimeStamp& getStamp();
    void setStamp(const ::nds::core::types::TimeStamp& stamp_);
    void setStamp(::nds::core::types::TimeStamp&& stamp_);

    const ::nds::vehicle::types::Horizon& getRoadNetwork() const;
    ::nds::vehicle::types::Horizon& getRoadNetwork();
    void setRoadNetwork(const ::nds::vehicle::types::Horizon& roadNetwork_);
    void setRoadNetwork(::nds::vehicle::types::Horizon&& roadNetwork_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const GeoRoadNetworkTopic& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::TimeStamp readStamp(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::TimeStamp readStamp(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::vehicle::types::Horizon readRoadNetwork(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::vehicle::types::Horizon readRoadNetwork(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::types::TimeStamp m_stamp_;
    ::nds::vehicle::types::Horizon m_roadNetwork_;
};

} // namespace topics
} // namespace vehicle
} // namespace nds

#endif // NDS_VEHICLE_TOPICS_GEO_ROAD_NETWORK_TOPIC_H
