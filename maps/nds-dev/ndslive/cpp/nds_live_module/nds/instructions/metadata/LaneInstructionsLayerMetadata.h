/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_METADATA_LANE_INSTRUCTIONS_LAYER_METADATA_H
#define NDS_INSTRUCTIONS_METADATA_LANE_INSTRUCTIONS_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/language/AvailableLanguages.h>
#include <nds/core/types/LaneType.h>
#include <nds/instructions/instantiations/InstructionsLaneTransitionAttributeMetadata.h>
#include <nds/instructions/metadata/LaneInstructionsLayerContent.h>

namespace nds
{
namespace instructions
{
namespace metadata
{

class LaneInstructionsLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata::ZserioPackingContext& getLaneTransitionAttributeMetadata()
        {
            return m_laneTransitionAttributeMetadata_;
        }

        ::nds::core::language::AvailableLanguages::ZserioPackingContext& getAvailableLanguages()
        {
            return m_availableLanguages_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata::ZserioPackingContext m_laneTransitionAttributeMetadata_;
        ::nds::core::language::AvailableLanguages::ZserioPackingContext m_availableLanguages_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneInstructionsLayerMetadata() noexcept :
            LaneInstructionsLayerMetadata(allocator_type())
    {}

    explicit LaneInstructionsLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneTransitionAttributeMetadata = ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata,
            typename ZSERIO_T_coveredLaneTypes = ::zserio::vector<::nds::core::types::LaneType>,
            typename ZSERIO_T_availableLanguages = ::nds::core::language::AvailableLanguages>
    LaneInstructionsLayerMetadata(
            ::nds::instructions::metadata::LaneInstructionsLayerContent content_,
            ZSERIO_T_laneTransitionAttributeMetadata&& laneTransitionAttributeMetadata_,
            ZSERIO_T_coveredLaneTypes&& coveredLaneTypes_,
            bool globalImageReferences_,
            ZSERIO_T_availableLanguages&& availableLanguages_,
            const allocator_type& allocator = allocator_type()) :
            LaneInstructionsLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_laneTransitionAttributeMetadata_ = ::std::forward<ZSERIO_T_laneTransitionAttributeMetadata>(laneTransitionAttributeMetadata_);
        m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(::std::forward<ZSERIO_T_coveredLaneTypes>(coveredLaneTypes_));
        m_globalImageReferences_ = globalImageReferences_;
        m_availableLanguages_ = ::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_);
    }

    explicit LaneInstructionsLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneInstructionsLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneInstructionsLayerMetadata() = default;

    LaneInstructionsLayerMetadata(const LaneInstructionsLayerMetadata&) = default;
    LaneInstructionsLayerMetadata& operator=(const LaneInstructionsLayerMetadata&) = default;

    LaneInstructionsLayerMetadata(LaneInstructionsLayerMetadata&&) = default;
    LaneInstructionsLayerMetadata& operator=(LaneInstructionsLayerMetadata&&) = default;

    LaneInstructionsLayerMetadata(::zserio::PropagateAllocatorT,
            const LaneInstructionsLayerMetadata& other, const allocator_type& allocator);

    ::nds::instructions::metadata::LaneInstructionsLayerContent getContent() const;
    void setContent(::nds::instructions::metadata::LaneInstructionsLayerContent content_);

    const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata& getLaneTransitionAttributeMetadata() const;
    ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata& getLaneTransitionAttributeMetadata();
    void setLaneTransitionAttributeMetadata(const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata& laneTransitionAttributeMetadata_);
    void setLaneTransitionAttributeMetadata(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata&& laneTransitionAttributeMetadata_);
    bool isLaneTransitionAttributeMetadataUsed() const;
    bool isLaneTransitionAttributeMetadataSet() const;
    void resetLaneTransitionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::LaneType>& getCoveredLaneTypes() const;
    ::zserio::vector<::nds::core::types::LaneType>& getCoveredLaneTypes();
    void setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_);
    void setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_);

    bool getGlobalImageReferences() const;
    void setGlobalImageReferences(bool globalImageReferences_);

    const ::nds::core::language::AvailableLanguages& getAvailableLanguages() const;
    ::nds::core::language::AvailableLanguages& getAvailableLanguages();
    void setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_);
    void setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneInstructionsLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredLaneTypes
    {
    public:
        using OwnerType = LaneInstructionsLayerMetadata;

        static void create(LaneInstructionsLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::LaneType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneInstructionsLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::LaneType>& array,
                ::nds::core::types::LaneType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredLaneTypes = ::zserio::Array<::zserio::vector<::nds::core::types::LaneType>, ::zserio::ObjectArrayTraits<::nds::core::types::LaneType, ZserioElementFactory_coveredLaneTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::instructions::metadata::LaneInstructionsLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::instructions::metadata::LaneInstructionsLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata> readLaneTransitionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata> readLaneTransitionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredLaneTypes readCoveredLaneTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredLaneTypes readCoveredLaneTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readGlobalImageReferences(::zserio::BitStreamReader& in);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::instructions::metadata::LaneInstructionsLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMetadata> m_laneTransitionAttributeMetadata_;
    ZserioArrayType_coveredLaneTypes m_coveredLaneTypes_;
    bool m_globalImageReferences_;
    ::nds::core::language::AvailableLanguages m_availableLanguages_;
};

} // namespace metadata
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_METADATA_LANE_INSTRUCTIONS_LAYER_METADATA_H
