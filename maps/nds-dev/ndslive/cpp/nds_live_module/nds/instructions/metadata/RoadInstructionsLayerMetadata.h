/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_METADATA_ROAD_INSTRUCTIONS_LAYER_METADATA_H
#define NDS_INSTRUCTIONS_METADATA_ROAD_INSTRUCTIONS_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/language/AvailableLanguages.h>
#include <nds/core/types/RoadType.h>
#include <nds/instructions/instantiations/InstructionsTransitionAttributeMetadata.h>
#include <nds/instructions/metadata/RoadInstructionsLayerContent.h>

namespace nds
{
namespace instructions
{
namespace metadata
{

class RoadInstructionsLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata::ZserioPackingContext& getTransitionMetadata()
        {
            return m_transitionMetadata_;
        }

        ::nds::core::language::AvailableLanguages::ZserioPackingContext& getAvailableLanguages()
        {
            return m_availableLanguages_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata::ZserioPackingContext m_transitionMetadata_;
        ::nds::core::language::AvailableLanguages::ZserioPackingContext m_availableLanguages_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadInstructionsLayerMetadata() noexcept :
            RoadInstructionsLayerMetadata(allocator_type())
    {}

    explicit RoadInstructionsLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_transitionMetadata = ::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata,
            typename ZSERIO_T_coveredRoadTypes = ::zserio::vector<::nds::core::types::RoadType>,
            typename ZSERIO_T_availableLanguages = ::nds::core::language::AvailableLanguages>
    RoadInstructionsLayerMetadata(
            ::nds::instructions::metadata::RoadInstructionsLayerContent content_,
            ZSERIO_T_transitionMetadata&& transitionMetadata_,
            ZSERIO_T_coveredRoadTypes&& coveredRoadTypes_,
            bool globalImageReferences_,
            ZSERIO_T_availableLanguages&& availableLanguages_,
            const allocator_type& allocator = allocator_type()) :
            RoadInstructionsLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_transitionMetadata_ = ::std::forward<ZSERIO_T_transitionMetadata>(transitionMetadata_);
        m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(::std::forward<ZSERIO_T_coveredRoadTypes>(coveredRoadTypes_));
        m_globalImageReferences_ = globalImageReferences_;
        m_availableLanguages_ = ::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_);
    }

    explicit RoadInstructionsLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadInstructionsLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadInstructionsLayerMetadata() = default;

    RoadInstructionsLayerMetadata(const RoadInstructionsLayerMetadata&) = default;
    RoadInstructionsLayerMetadata& operator=(const RoadInstructionsLayerMetadata&) = default;

    RoadInstructionsLayerMetadata(RoadInstructionsLayerMetadata&&) = default;
    RoadInstructionsLayerMetadata& operator=(RoadInstructionsLayerMetadata&&) = default;

    RoadInstructionsLayerMetadata(::zserio::PropagateAllocatorT,
            const RoadInstructionsLayerMetadata& other, const allocator_type& allocator);

    ::nds::instructions::metadata::RoadInstructionsLayerContent getContent() const;
    void setContent(::nds::instructions::metadata::RoadInstructionsLayerContent content_);

    const ::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata& getTransitionMetadata() const;
    ::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata& getTransitionMetadata();
    void setTransitionMetadata(const ::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata& transitionMetadata_);
    void setTransitionMetadata(::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata&& transitionMetadata_);
    bool isTransitionMetadataUsed() const;
    bool isTransitionMetadataSet() const;
    void resetTransitionMetadata();

    const ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes() const;
    ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes();
    void setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_);
    void setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_);

    bool getGlobalImageReferences() const;
    void setGlobalImageReferences(bool globalImageReferences_);

    const ::nds::core::language::AvailableLanguages& getAvailableLanguages() const;
    ::nds::core::language::AvailableLanguages& getAvailableLanguages();
    void setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_);
    void setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadInstructionsLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredRoadTypes
    {
    public:
        using OwnerType = RoadInstructionsLayerMetadata;

        static void create(RoadInstructionsLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadInstructionsLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::nds::core::types::RoadType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredRoadTypes = ::zserio::Array<::zserio::vector<::nds::core::types::RoadType>, ::zserio::ObjectArrayTraits<::nds::core::types::RoadType, ZserioElementFactory_coveredRoadTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::instructions::metadata::RoadInstructionsLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::instructions::metadata::RoadInstructionsLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata> readTransitionMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata> readTransitionMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readGlobalImageReferences(::zserio::BitStreamReader& in);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::instructions::metadata::RoadInstructionsLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMetadata> m_transitionMetadata_;
    ZserioArrayType_coveredRoadTypes m_coveredRoadTypes_;
    bool m_globalImageReferences_;
    ::nds::core::language::AvailableLanguages m_availableLanguages_;
};

} // namespace metadata
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_METADATA_ROAD_INSTRUCTIONS_LAYER_METADATA_H
