/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_TYPES_SIGNPOST_INSTRUCTION_H
#define NDS_INSTRUCTIONS_TYPES_SIGNPOST_INSTRUCTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Vector.h>

#include <nds/core/types/PercentagePosition.h>
#include <nds/instructions/types/SignpostInstructionContent.h>
#include <nds/instructions/types/SignpostIntersectionType.h>

namespace nds
{
namespace instructions
{
namespace types
{

class SignpostInstruction
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getIntersectionType()
        {
            return m_intersectionType_;
        }

        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::core::types::PercentagePosition::ZserioPackingContext& getPosition()
        {
            return m_position_;
        }

    private:
        ::zserio::DeltaContext m_intersectionType_;
        ::zserio::DeltaContext m_content_;
        ::nds::core::types::PercentagePosition::ZserioPackingContext m_position_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SignpostInstruction() noexcept :
            SignpostInstruction(allocator_type())
    {}

    explicit SignpostInstruction(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_position = ::nds::core::types::PercentagePosition,
            typename ZSERIO_T_exitName = ::zserio::string<>,
            typename ZSERIO_T_exitNumber = ::zserio::string<>,
            typename ZSERIO_T_towardsName = ::zserio::vector<::zserio::string<>>,
            typename ZSERIO_T_towardsNumber = ::zserio::vector<::zserio::string<>>,
            typename ZSERIO_T_directionName = ::zserio::vector<::zserio::string<>>,
            typename ZSERIO_T_directionNumber = ::zserio::vector<::zserio::string<>>>
    SignpostInstruction(
            ::nds::instructions::types::SignpostIntersectionType intersectionType_,
            ::nds::instructions::types::SignpostInstructionContent content_,
            ZSERIO_T_position&& position_,
            ZSERIO_T_exitName&& exitName_,
            ZSERIO_T_exitNumber&& exitNumber_,
            ZSERIO_T_towardsName&& towardsName_,
            ZSERIO_T_towardsNumber&& towardsNumber_,
            ZSERIO_T_directionName&& directionName_,
            ZSERIO_T_directionNumber&& directionNumber_,
            const allocator_type& allocator = allocator_type()) :
            SignpostInstruction(allocator)
    {
        m_intersectionType_ = intersectionType_;
        m_content_ = content_;
        m_position_ = ::std::forward<ZSERIO_T_position>(position_);
        m_exitName_ = ::std::forward<ZSERIO_T_exitName>(exitName_);
        m_exitNumber_ = ::std::forward<ZSERIO_T_exitNumber>(exitNumber_);
        m_towardsName_ = ::zserio::createOptionalArray<ZserioArrayType_towardsName>(::std::forward<ZSERIO_T_towardsName>(towardsName_));
        m_towardsNumber_ = ::zserio::createOptionalArray<ZserioArrayType_towardsNumber>(::std::forward<ZSERIO_T_towardsNumber>(towardsNumber_));
        m_directionName_ = ::zserio::createOptionalArray<ZserioArrayType_directionName>(::std::forward<ZSERIO_T_directionName>(directionName_));
        m_directionNumber_ = ::zserio::createOptionalArray<ZserioArrayType_directionNumber>(::std::forward<ZSERIO_T_directionNumber>(directionNumber_));
    }

    explicit SignpostInstruction(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SignpostInstruction(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SignpostInstruction() = default;

    SignpostInstruction(const SignpostInstruction&) = default;
    SignpostInstruction& operator=(const SignpostInstruction&) = default;

    SignpostInstruction(SignpostInstruction&&) = default;
    SignpostInstruction& operator=(SignpostInstruction&&) = default;

    SignpostInstruction(::zserio::PropagateAllocatorT,
            const SignpostInstruction& other, const allocator_type& allocator);

    ::nds::instructions::types::SignpostIntersectionType getIntersectionType() const;
    void setIntersectionType(::nds::instructions::types::SignpostIntersectionType intersectionType_);

    ::nds::instructions::types::SignpostInstructionContent getContent() const;
    void setContent(::nds::instructions::types::SignpostInstructionContent content_);

    const ::nds::core::types::PercentagePosition& getPosition() const;
    ::nds::core::types::PercentagePosition& getPosition();
    void setPosition(const ::nds::core::types::PercentagePosition& position_);
    void setPosition(::nds::core::types::PercentagePosition&& position_);

    const ::zserio::string<>& getExitName() const;
    ::zserio::string<>& getExitName();
    void setExitName(const ::zserio::string<>& exitName_);
    void setExitName(::zserio::string<>&& exitName_);
    bool isExitNameUsed() const;
    bool isExitNameSet() const;
    void resetExitName();

    const ::zserio::string<>& getExitNumber() const;
    ::zserio::string<>& getExitNumber();
    void setExitNumber(const ::zserio::string<>& exitNumber_);
    void setExitNumber(::zserio::string<>&& exitNumber_);
    bool isExitNumberUsed() const;
    bool isExitNumberSet() const;
    void resetExitNumber();

    const ::zserio::vector<::zserio::string<>>& getTowardsName() const;
    ::zserio::vector<::zserio::string<>>& getTowardsName();
    void setTowardsName(const ::zserio::vector<::zserio::string<>>& towardsName_);
    void setTowardsName(::zserio::vector<::zserio::string<>>&& towardsName_);
    bool isTowardsNameUsed() const;
    bool isTowardsNameSet() const;
    void resetTowardsName();

    const ::zserio::vector<::zserio::string<>>& getTowardsNumber() const;
    ::zserio::vector<::zserio::string<>>& getTowardsNumber();
    void setTowardsNumber(const ::zserio::vector<::zserio::string<>>& towardsNumber_);
    void setTowardsNumber(::zserio::vector<::zserio::string<>>&& towardsNumber_);
    bool isTowardsNumberUsed() const;
    bool isTowardsNumberSet() const;
    void resetTowardsNumber();

    const ::zserio::vector<::zserio::string<>>& getDirectionName() const;
    ::zserio::vector<::zserio::string<>>& getDirectionName();
    void setDirectionName(const ::zserio::vector<::zserio::string<>>& directionName_);
    void setDirectionName(::zserio::vector<::zserio::string<>>&& directionName_);
    bool isDirectionNameUsed() const;
    bool isDirectionNameSet() const;
    void resetDirectionName();

    const ::zserio::vector<::zserio::string<>>& getDirectionNumber() const;
    ::zserio::vector<::zserio::string<>>& getDirectionNumber();
    void setDirectionNumber(const ::zserio::vector<::zserio::string<>>& directionNumber_);
    void setDirectionNumber(::zserio::vector<::zserio::string<>>&& directionNumber_);
    bool isDirectionNumberUsed() const;
    bool isDirectionNumberSet() const;
    void resetDirectionNumber();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SignpostInstruction& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_towardsName = ::zserio::Array<::zserio::vector<::zserio::string<>>, ::zserio::StringArrayTraits, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_towardsNumber = ::zserio::Array<::zserio::vector<::zserio::string<>>, ::zserio::StringArrayTraits, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_directionName = ::zserio::Array<::zserio::vector<::zserio::string<>>, ::zserio::StringArrayTraits, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_directionNumber = ::zserio::Array<::zserio::vector<::zserio::string<>>, ::zserio::StringArrayTraits, ::zserio::ArrayType::AUTO>;

    ::nds::instructions::types::SignpostIntersectionType readIntersectionType(::zserio::BitStreamReader& in);
    ::nds::instructions::types::SignpostIntersectionType readIntersectionType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::instructions::types::SignpostInstructionContent readContent(::zserio::BitStreamReader& in);
    ::nds::instructions::types::SignpostInstructionContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::PercentagePosition readPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::PercentagePosition readPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readExitName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readExitNumber(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsName> readTowardsName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsNumber> readTowardsNumber(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_directionName> readDirectionName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_directionNumber> readDirectionNumber(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::instructions::types::SignpostIntersectionType m_intersectionType_;
    ::nds::instructions::types::SignpostInstructionContent m_content_;
    ::nds::core::types::PercentagePosition m_position_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_exitName_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_exitNumber_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsName> m_towardsName_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsNumber> m_towardsNumber_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_directionName> m_directionName_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_directionNumber> m_directionNumber_;
};

} // namespace types
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_TYPES_SIGNPOST_INSTRUCTION_H
