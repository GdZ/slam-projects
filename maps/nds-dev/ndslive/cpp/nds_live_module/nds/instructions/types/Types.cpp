/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/instructions/types/SignpostIntersectionType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for SignpostIntersectionType enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::instructions::types::SignpostIntersectionType>::names;
constexpr ::std::array<::nds::instructions::types::SignpostIntersectionType, 4> EnumTraits<::nds::instructions::types::SignpostIntersectionType>::values;
constexpr const char* EnumTraits<::nds::instructions::types::SignpostIntersectionType>::enumName;

template <>
size_t enumToOrdinal(::nds::instructions::types::SignpostIntersectionType value)
{
    switch (value)
    {
    case ::nds::instructions::types::SignpostIntersectionType::STANDARD:
        return 0;
    case ::nds::instructions::types::SignpostIntersectionType::INTERCHANGE:
        return 1;
    case ::nds::instructions::types::SignpostIntersectionType::EXIT:
        return 2;
    case ::nds::instructions::types::SignpostIntersectionType::INTERCHANGE_AND_EXIT:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration SignpostIntersectionType: ") <<
                static_cast<typename ::std::underlying_type<::nds::instructions::types::SignpostIntersectionType>::type>(value) << "!";
    }
}

template <>
::nds::instructions::types::SignpostIntersectionType valueToEnum(
        typename ::std::underlying_type<::nds::instructions::types::SignpostIntersectionType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
        return static_cast<::nds::instructions::types::SignpostIntersectionType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration SignpostIntersectionType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::instructions::types::SignpostIntersectionType>(::nds::instructions::types::SignpostIntersectionType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::instructions::types::SignpostIntersectionType value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::SignpostIntersectionType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::instructions::types::SignpostIntersectionType)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::instructions::types::SignpostIntersectionType value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::SignpostIntersectionType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::instructions::types::SignpostIntersectionType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::instructions::types::SignpostIntersectionType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::instructions::types::SignpostIntersectionType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::instructions::types::SignpostIntersectionType>(
            static_cast<typename ::std::underlying_type<::nds::instructions::types::SignpostIntersectionType>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::instructions::types::SignpostIntersectionType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::instructions::types::SignpostIntersectionType>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::SignpostIntersectionType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::instructions::types::SignpostIntersectionType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::instructions::types::SignpostIntersectionType value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::SignpostIntersectionType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/instructions/types/JunctionViewImageFormat.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for JunctionViewImageFormat enumeration.
constexpr ::std::array<const char*, 2> EnumTraits<::nds::instructions::types::JunctionViewImageFormat>::names;
constexpr ::std::array<::nds::instructions::types::JunctionViewImageFormat, 2> EnumTraits<::nds::instructions::types::JunctionViewImageFormat>::values;
constexpr const char* EnumTraits<::nds::instructions::types::JunctionViewImageFormat>::enumName;

template <>
size_t enumToOrdinal(::nds::instructions::types::JunctionViewImageFormat value)
{
    switch (value)
    {
    case ::nds::instructions::types::JunctionViewImageFormat::PNG:
        return 0;
    case ::nds::instructions::types::JunctionViewImageFormat::SVG:
        return 1;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration JunctionViewImageFormat: ") <<
                static_cast<typename ::std::underlying_type<::nds::instructions::types::JunctionViewImageFormat>::type>(value) << "!";
    }
}

template <>
::nds::instructions::types::JunctionViewImageFormat valueToEnum(
        typename ::std::underlying_type<::nds::instructions::types::JunctionViewImageFormat>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
        return static_cast<::nds::instructions::types::JunctionViewImageFormat>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration JunctionViewImageFormat: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::instructions::types::JunctionViewImageFormat>(::nds::instructions::types::JunctionViewImageFormat value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::instructions::types::JunctionViewImageFormat value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::JunctionViewImageFormat>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::instructions::types::JunctionViewImageFormat)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::instructions::types::JunctionViewImageFormat value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::JunctionViewImageFormat>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::instructions::types::JunctionViewImageFormat value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::instructions::types::JunctionViewImageFormat value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::instructions::types::JunctionViewImageFormat read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::instructions::types::JunctionViewImageFormat>(
            static_cast<typename ::std::underlying_type<::nds::instructions::types::JunctionViewImageFormat>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::instructions::types::JunctionViewImageFormat read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::instructions::types::JunctionViewImageFormat>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::JunctionViewImageFormat>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::instructions::types::JunctionViewImageFormat value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::instructions::types::JunctionViewImageFormat value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::JunctionViewImageFormat>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/instructions/types/JunctionViewAbstractionLevel.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for JunctionViewAbstractionLevel enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::instructions::types::JunctionViewAbstractionLevel>::names;
constexpr ::std::array<::nds::instructions::types::JunctionViewAbstractionLevel, 4> EnumTraits<::nds::instructions::types::JunctionViewAbstractionLevel>::values;
constexpr const char* EnumTraits<::nds::instructions::types::JunctionViewAbstractionLevel>::enumName;

template <>
size_t enumToOrdinal(::nds::instructions::types::JunctionViewAbstractionLevel value)
{
    switch (value)
    {
    case ::nds::instructions::types::JunctionViewAbstractionLevel::MIXED:
        return 0;
    case ::nds::instructions::types::JunctionViewAbstractionLevel::LOW:
        return 1;
    case ::nds::instructions::types::JunctionViewAbstractionLevel::MEDIUM:
        return 2;
    case ::nds::instructions::types::JunctionViewAbstractionLevel::HIGH:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration JunctionViewAbstractionLevel: ") <<
                static_cast<typename ::std::underlying_type<::nds::instructions::types::JunctionViewAbstractionLevel>::type>(value) << "!";
    }
}

template <>
::nds::instructions::types::JunctionViewAbstractionLevel valueToEnum(
        typename ::std::underlying_type<::nds::instructions::types::JunctionViewAbstractionLevel>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
        return static_cast<::nds::instructions::types::JunctionViewAbstractionLevel>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration JunctionViewAbstractionLevel: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::instructions::types::JunctionViewAbstractionLevel>(::nds::instructions::types::JunctionViewAbstractionLevel value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::instructions::types::JunctionViewAbstractionLevel value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::JunctionViewAbstractionLevel>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::instructions::types::JunctionViewAbstractionLevel)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::instructions::types::JunctionViewAbstractionLevel value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::JunctionViewAbstractionLevel>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::instructions::types::JunctionViewAbstractionLevel value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::instructions::types::JunctionViewAbstractionLevel value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::instructions::types::JunctionViewAbstractionLevel read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::instructions::types::JunctionViewAbstractionLevel>(
            static_cast<typename ::std::underlying_type<::nds::instructions::types::JunctionViewAbstractionLevel>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::instructions::types::JunctionViewAbstractionLevel read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::instructions::types::JunctionViewAbstractionLevel>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::JunctionViewAbstractionLevel>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::instructions::types::JunctionViewAbstractionLevel value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::instructions::types::JunctionViewAbstractionLevel value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::instructions::types::JunctionViewAbstractionLevel>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/instructions/types/SignpostInstructionContent.h>

namespace nds
{
namespace instructions
{
namespace types
{

SignpostInstructionContent::SignpostInstructionContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

SignpostInstructionContent::SignpostInstructionContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

SignpostInstructionContent::SignpostInstructionContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'SignpostInstructionContent' out of bounds: ") << value << "!";
}

void SignpostInstructionContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::instructions::types::SignpostInstructionContent::underlying_type>>(m_value);
}

size_t SignpostInstructionContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t SignpostInstructionContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::instructions::types::SignpostInstructionContent::underlying_type>>(m_value);
}

size_t SignpostInstructionContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t SignpostInstructionContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t SignpostInstructionContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void SignpostInstructionContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void SignpostInstructionContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::instructions::types::SignpostInstructionContent::underlying_type>>(out, m_value);
}

::zserio::string<> SignpostInstructionContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & SignpostInstructionContent::Values::EXIT_NAME) == SignpostInstructionContent::Values::EXIT_NAME)
        result += result.empty() ? "EXIT_NAME" : " | EXIT_NAME";
    if ((*this & SignpostInstructionContent::Values::EXIT_NUMBER) == SignpostInstructionContent::Values::EXIT_NUMBER)
        result += result.empty() ? "EXIT_NUMBER" : " | EXIT_NUMBER";
    if ((*this & SignpostInstructionContent::Values::TOWARDS_NAME) == SignpostInstructionContent::Values::TOWARDS_NAME)
        result += result.empty() ? "TOWARDS_NAME" : " | TOWARDS_NAME";
    if ((*this & SignpostInstructionContent::Values::TOWARDS_NUMBER) == SignpostInstructionContent::Values::TOWARDS_NUMBER)
        result += result.empty() ? "TOWARDS_NUMBER" : " | TOWARDS_NUMBER";
    if ((*this & SignpostInstructionContent::Values::DIRECTION_NAME) == SignpostInstructionContent::Values::DIRECTION_NAME)
        result += result.empty() ? "DIRECTION_NAME" : " | DIRECTION_NAME";
    if ((*this & SignpostInstructionContent::Values::DIRECTION_NUMBER) == SignpostInstructionContent::Values::DIRECTION_NUMBER)
        result += result.empty() ? "DIRECTION_NUMBER" : " | DIRECTION_NUMBER";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

SignpostInstructionContent::underlying_type SignpostInstructionContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

SignpostInstructionContent::underlying_type SignpostInstructionContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::instructions::types::SignpostInstructionContent::underlying_type>>(
            in);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/instructions/types/InstructionLaneMarking.h>

namespace nds
{
namespace instructions
{
namespace types
{

InstructionLaneMarking::InstructionLaneMarking(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

InstructionLaneMarking::InstructionLaneMarking(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

InstructionLaneMarking::InstructionLaneMarking(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT64_C(144115188075855871))
        throw ::zserio::CppRuntimeException("Value for bitmask 'InstructionLaneMarking' out of bounds: ") << value << "!";
}

void InstructionLaneMarking::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::instructions::types::InstructionLaneMarking::underlying_type>>(m_value);
}

size_t InstructionLaneMarking::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt64(m_value);
}

size_t InstructionLaneMarking::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::instructions::types::InstructionLaneMarking::underlying_type>>(m_value);
}

size_t InstructionLaneMarking::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t InstructionLaneMarking::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t InstructionLaneMarking::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void InstructionLaneMarking::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt64(m_value);
}

void InstructionLaneMarking::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::instructions::types::InstructionLaneMarking::underlying_type>>(out, m_value);
}

::zserio::string<> InstructionLaneMarking::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & InstructionLaneMarking::Values::ARROW_STRAIGHT) == InstructionLaneMarking::Values::ARROW_STRAIGHT)
        result += result.empty() ? "ARROW_STRAIGHT" : " | ARROW_STRAIGHT";
    if ((*this & InstructionLaneMarking::Values::ARROW_LEFT) == InstructionLaneMarking::Values::ARROW_LEFT)
        result += result.empty() ? "ARROW_LEFT" : " | ARROW_LEFT";
    if ((*this & InstructionLaneMarking::Values::ARROW_RIGHT) == InstructionLaneMarking::Values::ARROW_RIGHT)
        result += result.empty() ? "ARROW_RIGHT" : " | ARROW_RIGHT";
    if ((*this & InstructionLaneMarking::Values::ARROW_SLIGHT_LEFT) == InstructionLaneMarking::Values::ARROW_SLIGHT_LEFT)
        result += result.empty() ? "ARROW_SLIGHT_LEFT" : " | ARROW_SLIGHT_LEFT";
    if ((*this & InstructionLaneMarking::Values::ARROW_SLIGHT_RIGHT) == InstructionLaneMarking::Values::ARROW_SLIGHT_RIGHT)
        result += result.empty() ? "ARROW_SLIGHT_RIGHT" : " | ARROW_SLIGHT_RIGHT";
    if ((*this & InstructionLaneMarking::Values::ARROW_SHARP_RIGHT) == InstructionLaneMarking::Values::ARROW_SHARP_RIGHT)
        result += result.empty() ? "ARROW_SHARP_RIGHT" : " | ARROW_SHARP_RIGHT";
    if ((*this & InstructionLaneMarking::Values::ARROW_SHARP_LEFT) == InstructionLaneMarking::Values::ARROW_SHARP_LEFT)
        result += result.empty() ? "ARROW_SHARP_LEFT" : " | ARROW_SHARP_LEFT";
    if ((*this & InstructionLaneMarking::Values::ARROW_U_TURN_LEFT) == InstructionLaneMarking::Values::ARROW_U_TURN_LEFT)
        result += result.empty() ? "ARROW_U_TURN_LEFT" : " | ARROW_U_TURN_LEFT";
    if ((*this & InstructionLaneMarking::Values::ARROW_U_TURN_RIGHT) == InstructionLaneMarking::Values::ARROW_U_TURN_RIGHT)
        result += result.empty() ? "ARROW_U_TURN_RIGHT" : " | ARROW_U_TURN_RIGHT";
    if (result.empty() && m_value == 0)
        result += "NONE";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

InstructionLaneMarking::underlying_type InstructionLaneMarking::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt64());
}

InstructionLaneMarking::underlying_type InstructionLaneMarking::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::instructions::types::InstructionLaneMarking::underlying_type>>(
            in);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/instructions/types/JunctionViewContent.h>

namespace nds
{
namespace instructions
{
namespace types
{

JunctionViewContent::JunctionViewContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

JunctionViewContent::JunctionViewContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

JunctionViewContent::JunctionViewContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'JunctionViewContent' out of bounds: ") << value << "!";
}

void JunctionViewContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::instructions::types::JunctionViewContent::underlying_type>>(m_value);
}

size_t JunctionViewContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t JunctionViewContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::instructions::types::JunctionViewContent::underlying_type>>(m_value);
}

size_t JunctionViewContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t JunctionViewContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t JunctionViewContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void JunctionViewContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void JunctionViewContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::instructions::types::JunctionViewContent::underlying_type>>(out, m_value);
}

::zserio::string<> JunctionViewContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & JunctionViewContent::Values::BACKGROUND) == JunctionViewContent::Values::BACKGROUND)
        result += result.empty() ? "BACKGROUND" : " | BACKGROUND";
    if ((*this & JunctionViewContent::Values::SIGNBOARD) == JunctionViewContent::Values::SIGNBOARD)
        result += result.empty() ? "SIGNBOARD" : " | SIGNBOARD";
    if ((*this & JunctionViewContent::Values::ARROW) == JunctionViewContent::Values::ARROW)
        result += result.empty() ? "ARROW" : " | ARROW";
    if ((*this & JunctionViewContent::Values::SIGNBOARD_ARROW) == JunctionViewContent::Values::SIGNBOARD_ARROW)
        result += result.empty() ? "SIGNBOARD_ARROW" : " | SIGNBOARD_ARROW";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

JunctionViewContent::underlying_type JunctionViewContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

JunctionViewContent::underlying_type JunctionViewContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::instructions::types::JunctionViewContent::underlying_type>>(
            in);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/instructions/types/JunctionViewImageUsageType.h>

namespace nds
{
namespace instructions
{
namespace types
{

JunctionViewImageUsageType::JunctionViewImageUsageType(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

JunctionViewImageUsageType::JunctionViewImageUsageType(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

JunctionViewImageUsageType::JunctionViewImageUsageType(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'JunctionViewImageUsageType' out of bounds: ") << value << "!";
}

void JunctionViewImageUsageType::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::instructions::types::JunctionViewImageUsageType::underlying_type>>(m_value);
}

size_t JunctionViewImageUsageType::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t JunctionViewImageUsageType::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::instructions::types::JunctionViewImageUsageType::underlying_type>>(m_value);
}

size_t JunctionViewImageUsageType::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t JunctionViewImageUsageType::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t JunctionViewImageUsageType::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void JunctionViewImageUsageType::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void JunctionViewImageUsageType::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::instructions::types::JunctionViewImageUsageType::underlying_type>>(out, m_value);
}

::zserio::string<> JunctionViewImageUsageType::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & JunctionViewImageUsageType::Values::DAY) == JunctionViewImageUsageType::Values::DAY)
        result += result.empty() ? "DAY" : " | DAY";
    if ((*this & JunctionViewImageUsageType::Values::NIGHT) == JunctionViewImageUsageType::Values::NIGHT)
        result += result.empty() ? "NIGHT" : " | NIGHT";
    if ((*this & JunctionViewImageUsageType::Values::SUNSHINE) == JunctionViewImageUsageType::Values::SUNSHINE)
        result += result.empty() ? "SUNSHINE" : " | SUNSHINE";
    if ((*this & JunctionViewImageUsageType::Values::RAIN) == JunctionViewImageUsageType::Values::RAIN)
        result += result.empty() ? "RAIN" : " | RAIN";
    if ((*this & JunctionViewImageUsageType::Values::SNOW) == JunctionViewImageUsageType::Values::SNOW)
        result += result.empty() ? "SNOW" : " | SNOW";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

JunctionViewImageUsageType::underlying_type JunctionViewImageUsageType::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

JunctionViewImageUsageType::underlying_type JunctionViewImageUsageType::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::instructions::types::JunctionViewImageUsageType::underlying_type>>(
            in);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/instructions/types/SignpostInstruction.h>
#include <nds/instructions/types/SignpostInstructionContent.h>

namespace nds
{
namespace instructions
{
namespace types
{

SignpostInstruction::SignpostInstruction(const allocator_type& allocator) noexcept :
        m_intersectionType_(::nds::instructions::types::SignpostIntersectionType()),
        m_content_(::nds::instructions::types::SignpostInstructionContent()),
        m_position_(allocator),
        m_exitName_(::zserio::NullOpt),
        m_exitNumber_(::zserio::NullOpt),
        m_towardsName_(::zserio::NullOpt),
        m_towardsNumber_(::zserio::NullOpt),
        m_directionName_(::zserio::NullOpt),
        m_directionNumber_(::zserio::NullOpt)
{
}

SignpostInstruction::SignpostInstruction(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_intersectionType_(readIntersectionType(in)),
        m_content_(readContent(in)),
        m_position_(readPosition(in, allocator)),
        m_exitName_(readExitName(in, allocator)),
        m_exitNumber_(readExitNumber(in, allocator)),
        m_towardsName_(readTowardsName(in, allocator)),
        m_towardsNumber_(readTowardsNumber(in, allocator)),
        m_directionName_(readDirectionName(in, allocator)),
        m_directionNumber_(readDirectionNumber(in, allocator))
{
}

SignpostInstruction::SignpostInstruction(SignpostInstruction::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_intersectionType_(readIntersectionType(context, in)),
        m_content_(readContent(context, in)),
        m_position_(readPosition(context, in, allocator)),
        m_exitName_(readExitName(in, allocator)),
        m_exitNumber_(readExitNumber(in, allocator)),
        m_towardsName_(readTowardsName(in, allocator)),
        m_towardsNumber_(readTowardsNumber(in, allocator)),
        m_directionName_(readDirectionName(in, allocator)),
        m_directionNumber_(readDirectionNumber(in, allocator))
{
}

SignpostInstruction::SignpostInstruction(::zserio::PropagateAllocatorT,
        const SignpostInstruction& other, const allocator_type& allocator) :
        m_intersectionType_(::zserio::allocatorPropagatingCopy(other.m_intersectionType_, allocator)),
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_position_(::zserio::allocatorPropagatingCopy(other.m_position_, allocator)),
        m_exitName_(::zserio::allocatorPropagatingCopy(other.m_exitName_, allocator)),
        m_exitNumber_(::zserio::allocatorPropagatingCopy(other.m_exitNumber_, allocator)),
        m_towardsName_(::zserio::allocatorPropagatingCopy(other.m_towardsName_, allocator)),
        m_towardsNumber_(::zserio::allocatorPropagatingCopy(other.m_towardsNumber_, allocator)),
        m_directionName_(::zserio::allocatorPropagatingCopy(other.m_directionName_, allocator)),
        m_directionNumber_(::zserio::allocatorPropagatingCopy(other.m_directionNumber_, allocator))
{
}

::nds::instructions::types::SignpostIntersectionType SignpostInstruction::getIntersectionType() const
{
    return m_intersectionType_;
}

void SignpostInstruction::setIntersectionType(::nds::instructions::types::SignpostIntersectionType intersectionType_)
{
    m_intersectionType_ = intersectionType_;
}

::nds::instructions::types::SignpostInstructionContent SignpostInstruction::getContent() const
{
    return m_content_;
}

void SignpostInstruction::setContent(::nds::instructions::types::SignpostInstructionContent content_)
{
    m_content_ = content_;
}

::nds::core::types::PercentagePosition& SignpostInstruction::getPosition()
{
    return m_position_;
}

const ::nds::core::types::PercentagePosition& SignpostInstruction::getPosition() const
{
    return m_position_;
}

void SignpostInstruction::setPosition(const ::nds::core::types::PercentagePosition& position_)
{
    m_position_ = position_;
}

void SignpostInstruction::setPosition(::nds::core::types::PercentagePosition&& position_)
{
    m_position_ = ::std::move(position_);
}

::zserio::string<>& SignpostInstruction::getExitName()
{
    return m_exitName_.value();
}

const ::zserio::string<>& SignpostInstruction::getExitName() const
{
    return m_exitName_.value();
}

void SignpostInstruction::setExitName(const ::zserio::string<>& exitName_)
{
    m_exitName_ = exitName_;
}

void SignpostInstruction::setExitName(::zserio::string<>&& exitName_)
{
    m_exitName_ = ::std::move(exitName_);
}

bool SignpostInstruction::isExitNameUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME);
}

bool SignpostInstruction::isExitNameSet() const
{
    return m_exitName_.hasValue();
}

void SignpostInstruction::resetExitName()
{
    m_exitName_.reset();
}

::zserio::string<>& SignpostInstruction::getExitNumber()
{
    return m_exitNumber_.value();
}

const ::zserio::string<>& SignpostInstruction::getExitNumber() const
{
    return m_exitNumber_.value();
}

void SignpostInstruction::setExitNumber(const ::zserio::string<>& exitNumber_)
{
    m_exitNumber_ = exitNumber_;
}

void SignpostInstruction::setExitNumber(::zserio::string<>&& exitNumber_)
{
    m_exitNumber_ = ::std::move(exitNumber_);
}

bool SignpostInstruction::isExitNumberUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER);
}

bool SignpostInstruction::isExitNumberSet() const
{
    return m_exitNumber_.hasValue();
}

void SignpostInstruction::resetExitNumber()
{
    m_exitNumber_.reset();
}

::zserio::vector<::zserio::string<>>& SignpostInstruction::getTowardsName()
{
    return m_towardsName_.value().getRawArray();
}

const ::zserio::vector<::zserio::string<>>& SignpostInstruction::getTowardsName() const
{
    return m_towardsName_.value().getRawArray();
}

void SignpostInstruction::setTowardsName(const ::zserio::vector<::zserio::string<>>& towardsName_)
{
    m_towardsName_ = ZserioArrayType_towardsName(towardsName_);
}

void SignpostInstruction::setTowardsName(::zserio::vector<::zserio::string<>>&& towardsName_)
{
    m_towardsName_ = ZserioArrayType_towardsName(std::move(towardsName_));
}

bool SignpostInstruction::isTowardsNameUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME);
}

bool SignpostInstruction::isTowardsNameSet() const
{
    return m_towardsName_.hasValue();
}

void SignpostInstruction::resetTowardsName()
{
    m_towardsName_.reset();
}

::zserio::vector<::zserio::string<>>& SignpostInstruction::getTowardsNumber()
{
    return m_towardsNumber_.value().getRawArray();
}

const ::zserio::vector<::zserio::string<>>& SignpostInstruction::getTowardsNumber() const
{
    return m_towardsNumber_.value().getRawArray();
}

void SignpostInstruction::setTowardsNumber(const ::zserio::vector<::zserio::string<>>& towardsNumber_)
{
    m_towardsNumber_ = ZserioArrayType_towardsNumber(towardsNumber_);
}

void SignpostInstruction::setTowardsNumber(::zserio::vector<::zserio::string<>>&& towardsNumber_)
{
    m_towardsNumber_ = ZserioArrayType_towardsNumber(std::move(towardsNumber_));
}

bool SignpostInstruction::isTowardsNumberUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER);
}

bool SignpostInstruction::isTowardsNumberSet() const
{
    return m_towardsNumber_.hasValue();
}

void SignpostInstruction::resetTowardsNumber()
{
    m_towardsNumber_.reset();
}

::zserio::vector<::zserio::string<>>& SignpostInstruction::getDirectionName()
{
    return m_directionName_.value().getRawArray();
}

const ::zserio::vector<::zserio::string<>>& SignpostInstruction::getDirectionName() const
{
    return m_directionName_.value().getRawArray();
}

void SignpostInstruction::setDirectionName(const ::zserio::vector<::zserio::string<>>& directionName_)
{
    m_directionName_ = ZserioArrayType_directionName(directionName_);
}

void SignpostInstruction::setDirectionName(::zserio::vector<::zserio::string<>>&& directionName_)
{
    m_directionName_ = ZserioArrayType_directionName(std::move(directionName_));
}

bool SignpostInstruction::isDirectionNameUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME);
}

bool SignpostInstruction::isDirectionNameSet() const
{
    return m_directionName_.hasValue();
}

void SignpostInstruction::resetDirectionName()
{
    m_directionName_.reset();
}

::zserio::vector<::zserio::string<>>& SignpostInstruction::getDirectionNumber()
{
    return m_directionNumber_.value().getRawArray();
}

const ::zserio::vector<::zserio::string<>>& SignpostInstruction::getDirectionNumber() const
{
    return m_directionNumber_.value().getRawArray();
}

void SignpostInstruction::setDirectionNumber(const ::zserio::vector<::zserio::string<>>& directionNumber_)
{
    m_directionNumber_ = ZserioArrayType_directionNumber(directionNumber_);
}

void SignpostInstruction::setDirectionNumber(::zserio::vector<::zserio::string<>>&& directionNumber_)
{
    m_directionNumber_ = ZserioArrayType_directionNumber(std::move(directionNumber_));
}

bool SignpostInstruction::isDirectionNumberUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER);
}

bool SignpostInstruction::isDirectionNumberSet() const
{
    return m_directionNumber_.hasValue();
}

void SignpostInstruction::resetDirectionNumber()
{
    m_directionNumber_.reset();
}

void SignpostInstruction::initPackingContext(SignpostInstruction::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getIntersectionType(), m_intersectionType_);
    m_content_.initPackingContext(context.getContent());
    m_position_.initPackingContext(context.getPosition());
}

size_t SignpostInstruction::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_intersectionType_);
    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += m_position_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_exitName_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_exitNumber_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        endBitPosition += m_towardsName_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        endBitPosition += m_towardsNumber_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        endBitPosition += m_directionName_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        endBitPosition += m_directionNumber_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t SignpostInstruction::bitSizeOf(SignpostInstruction::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getIntersectionType(), m_intersectionType_);
    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += m_position_.bitSizeOf(context.getPosition(), endBitPosition);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_exitName_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_exitNumber_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        endBitPosition += m_towardsName_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        endBitPosition += m_towardsNumber_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        endBitPosition += m_directionName_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        endBitPosition += m_directionNumber_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t SignpostInstruction::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_intersectionType_);
    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition = m_position_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_exitName_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_exitNumber_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        endBitPosition = m_towardsName_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        endBitPosition = m_towardsNumber_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        endBitPosition = m_directionName_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        endBitPosition = m_directionNumber_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t SignpostInstruction::initializeOffsets(SignpostInstruction::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getIntersectionType(), endBitPosition,
        m_intersectionType_);
    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition = m_position_.initializeOffsets(context.getPosition(), endBitPosition);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_exitName_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        endBitPosition += ::zserio::bitSizeOfString(m_exitNumber_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        endBitPosition = m_towardsName_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        endBitPosition = m_towardsNumber_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        endBitPosition = m_directionName_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        endBitPosition = m_directionNumber_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

bool SignpostInstruction::operator==(const SignpostInstruction& other) const
{
    if (this != &other)
    {
        return
                (m_intersectionType_ == other.m_intersectionType_) &&
                (m_content_ == other.m_content_) &&
                (m_position_ == other.m_position_) &&
                (!isExitNameUsed() ? !other.isExitNameUsed() : (m_exitName_ == other.m_exitName_)) &&
                (!isExitNumberUsed() ? !other.isExitNumberUsed() : (m_exitNumber_ == other.m_exitNumber_)) &&
                (!isTowardsNameUsed() ? !other.isTowardsNameUsed() : (m_towardsName_ == other.m_towardsName_)) &&
                (!isTowardsNumberUsed() ? !other.isTowardsNumberUsed() : (m_towardsNumber_ == other.m_towardsNumber_)) &&
                (!isDirectionNameUsed() ? !other.isDirectionNameUsed() : (m_directionName_ == other.m_directionName_)) &&
                (!isDirectionNumberUsed() ? !other.isDirectionNumberUsed() : (m_directionNumber_ == other.m_directionNumber_));
    }

    return true;
}

uint32_t SignpostInstruction::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_intersectionType_);
    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_position_);
    if (isExitNameUsed())
        result = ::zserio::calcHashCode(result, m_exitName_);
    if (isExitNumberUsed())
        result = ::zserio::calcHashCode(result, m_exitNumber_);
    if (isTowardsNameUsed())
        result = ::zserio::calcHashCode(result, m_towardsName_);
    if (isTowardsNumberUsed())
        result = ::zserio::calcHashCode(result, m_towardsNumber_);
    if (isDirectionNameUsed())
        result = ::zserio::calcHashCode(result, m_directionName_);
    if (isDirectionNumberUsed())
        result = ::zserio::calcHashCode(result, m_directionNumber_);

    return result;
}

void SignpostInstruction::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_intersectionType_);
    m_content_.write(out);
    m_position_.write(out);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        out.writeString(m_exitName_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        out.writeString(m_exitNumber_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        m_towardsName_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        m_towardsNumber_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        m_directionName_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        m_directionNumber_.value().write(out);
    }
}

void SignpostInstruction::write(SignpostInstruction::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getIntersectionType(), out, m_intersectionType_);
    m_content_.write(context.getContent(), out);
    m_position_.write(context.getPosition(), out);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        out.writeString(m_exitName_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        out.writeString(m_exitNumber_.value());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        m_towardsName_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        m_towardsNumber_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        m_directionName_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        m_directionNumber_.value().write(out);
    }
}

::nds::instructions::types::SignpostIntersectionType SignpostInstruction::readIntersectionType(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::instructions::types::SignpostIntersectionType>(in);
}

::nds::instructions::types::SignpostIntersectionType SignpostInstruction::readIntersectionType(SignpostInstruction::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::instructions::types::SignpostIntersectionType>(context.getIntersectionType(), in);
}
::nds::instructions::types::SignpostInstructionContent SignpostInstruction::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::instructions::types::SignpostInstructionContent(in);
}

::nds::instructions::types::SignpostInstructionContent SignpostInstruction::readContent(SignpostInstruction::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::instructions::types::SignpostInstructionContent(context.getContent(), in);
}
::nds::core::types::PercentagePosition SignpostInstruction::readPosition(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::types::PercentagePosition(in, allocator);
}

::nds::core::types::PercentagePosition SignpostInstruction::readPosition(SignpostInstruction::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::types::PercentagePosition(context.getPosition(), in, allocator);
}
::zserio::InplaceOptionalHolder<::zserio::string<>> SignpostInstruction::readExitName(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        return ::zserio::InplaceOptionalHolder<::zserio::string<>>(static_cast<::zserio::string<>>(in.readString(allocator)));
    }

    return ::zserio::InplaceOptionalHolder<::zserio::string<>>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::zserio::string<>> SignpostInstruction::readExitNumber(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        return ::zserio::InplaceOptionalHolder<::zserio::string<>>(static_cast<::zserio::string<>>(in.readString(allocator)));
    }

    return ::zserio::InplaceOptionalHolder<::zserio::string<>>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<SignpostInstruction::ZserioArrayType_towardsName> SignpostInstruction::readTowardsName(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        ZserioArrayType_towardsName readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsName>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsName>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<SignpostInstruction::ZserioArrayType_towardsNumber> SignpostInstruction::readTowardsNumber(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        ZserioArrayType_towardsNumber readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsNumber>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsNumber>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<SignpostInstruction::ZserioArrayType_directionName> SignpostInstruction::readDirectionName(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        ZserioArrayType_directionName readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionName>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionName>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<SignpostInstruction::ZserioArrayType_directionNumber> SignpostInstruction::readDirectionNumber(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        ZserioArrayType_directionNumber readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionNumber>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionNumber>(::zserio::NullOpt);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/instructions/types/SignpostPhoneticTranscriptions.h>
#include <nds/instructions/types/SignpostInstructionContent.h>

namespace nds
{
namespace instructions
{
namespace types
{

SignpostPhoneticTranscriptions::SignpostPhoneticTranscriptions(const allocator_type&) noexcept :
        m_content_(::nds::instructions::types::SignpostInstructionContent()),
        m_exitName_(::zserio::NullOpt),
        m_exitNumber_(::zserio::NullOpt),
        m_towardsName_(::zserio::NullOpt),
        m_towardsNumber_(::zserio::NullOpt),
        m_directionName_(::zserio::NullOpt),
        m_directionNumber_(::zserio::NullOpt)
{
}

SignpostPhoneticTranscriptions::SignpostPhoneticTranscriptions(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_exitName_(readExitName(in, allocator)),
        m_exitNumber_(readExitNumber(in, allocator)),
        m_towardsName_(readTowardsName(in, allocator)),
        m_towardsNumber_(readTowardsNumber(in, allocator)),
        m_directionName_(readDirectionName(in, allocator)),
        m_directionNumber_(readDirectionNumber(in, allocator))
{
}

SignpostPhoneticTranscriptions::SignpostPhoneticTranscriptions(SignpostPhoneticTranscriptions::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_exitName_(readExitName(context, in, allocator)),
        m_exitNumber_(readExitNumber(context, in, allocator)),
        m_towardsName_(readTowardsName(context, in, allocator)),
        m_towardsNumber_(readTowardsNumber(context, in, allocator)),
        m_directionName_(readDirectionName(context, in, allocator)),
        m_directionNumber_(readDirectionNumber(context, in, allocator))
{
}

SignpostPhoneticTranscriptions::SignpostPhoneticTranscriptions(::zserio::PropagateAllocatorT,
        const SignpostPhoneticTranscriptions& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_exitName_(::zserio::allocatorPropagatingCopy(other.m_exitName_, allocator)),
        m_exitNumber_(::zserio::allocatorPropagatingCopy(other.m_exitNumber_, allocator)),
        m_towardsName_(::zserio::allocatorPropagatingCopy(other.m_towardsName_, allocator)),
        m_towardsNumber_(::zserio::allocatorPropagatingCopy(other.m_towardsNumber_, allocator)),
        m_directionName_(::zserio::allocatorPropagatingCopy(other.m_directionName_, allocator)),
        m_directionNumber_(::zserio::allocatorPropagatingCopy(other.m_directionNumber_, allocator))
{
}

::nds::instructions::types::SignpostInstructionContent SignpostPhoneticTranscriptions::getContent() const
{
    return m_content_;
}

void SignpostPhoneticTranscriptions::setContent(::nds::instructions::types::SignpostInstructionContent content_)
{
    m_content_ = content_;
}

::nds::core::speech::PhoneticTranscriptionList& SignpostPhoneticTranscriptions::getExitName()
{
    return m_exitName_.value();
}

const ::nds::core::speech::PhoneticTranscriptionList& SignpostPhoneticTranscriptions::getExitName() const
{
    return m_exitName_.value();
}

void SignpostPhoneticTranscriptions::setExitName(const ::nds::core::speech::PhoneticTranscriptionList& exitName_)
{
    m_exitName_ = exitName_;
}

void SignpostPhoneticTranscriptions::setExitName(::nds::core::speech::PhoneticTranscriptionList&& exitName_)
{
    m_exitName_ = ::std::move(exitName_);
}

bool SignpostPhoneticTranscriptions::isExitNameUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME);
}

bool SignpostPhoneticTranscriptions::isExitNameSet() const
{
    return m_exitName_.hasValue();
}

void SignpostPhoneticTranscriptions::resetExitName()
{
    m_exitName_.reset();
}

::nds::core::speech::PhoneticTranscriptionList& SignpostPhoneticTranscriptions::getExitNumber()
{
    return m_exitNumber_.value();
}

const ::nds::core::speech::PhoneticTranscriptionList& SignpostPhoneticTranscriptions::getExitNumber() const
{
    return m_exitNumber_.value();
}

void SignpostPhoneticTranscriptions::setExitNumber(const ::nds::core::speech::PhoneticTranscriptionList& exitNumber_)
{
    m_exitNumber_ = exitNumber_;
}

void SignpostPhoneticTranscriptions::setExitNumber(::nds::core::speech::PhoneticTranscriptionList&& exitNumber_)
{
    m_exitNumber_ = ::std::move(exitNumber_);
}

bool SignpostPhoneticTranscriptions::isExitNumberUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER);
}

bool SignpostPhoneticTranscriptions::isExitNumberSet() const
{
    return m_exitNumber_.hasValue();
}

void SignpostPhoneticTranscriptions::resetExitNumber()
{
    m_exitNumber_.reset();
}

::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& SignpostPhoneticTranscriptions::getTowardsName()
{
    return m_towardsName_.value().getRawArray();
}

const ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& SignpostPhoneticTranscriptions::getTowardsName() const
{
    return m_towardsName_.value().getRawArray();
}

void SignpostPhoneticTranscriptions::setTowardsName(const ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& towardsName_)
{
    m_towardsName_ = ZserioArrayType_towardsName(towardsName_);
}

void SignpostPhoneticTranscriptions::setTowardsName(::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>&& towardsName_)
{
    m_towardsName_ = ZserioArrayType_towardsName(std::move(towardsName_));
}

bool SignpostPhoneticTranscriptions::isTowardsNameUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME);
}

bool SignpostPhoneticTranscriptions::isTowardsNameSet() const
{
    return m_towardsName_.hasValue();
}

void SignpostPhoneticTranscriptions::resetTowardsName()
{
    m_towardsName_.reset();
}

::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& SignpostPhoneticTranscriptions::getTowardsNumber()
{
    return m_towardsNumber_.value().getRawArray();
}

const ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& SignpostPhoneticTranscriptions::getTowardsNumber() const
{
    return m_towardsNumber_.value().getRawArray();
}

void SignpostPhoneticTranscriptions::setTowardsNumber(const ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& towardsNumber_)
{
    m_towardsNumber_ = ZserioArrayType_towardsNumber(towardsNumber_);
}

void SignpostPhoneticTranscriptions::setTowardsNumber(::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>&& towardsNumber_)
{
    m_towardsNumber_ = ZserioArrayType_towardsNumber(std::move(towardsNumber_));
}

bool SignpostPhoneticTranscriptions::isTowardsNumberUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER);
}

bool SignpostPhoneticTranscriptions::isTowardsNumberSet() const
{
    return m_towardsNumber_.hasValue();
}

void SignpostPhoneticTranscriptions::resetTowardsNumber()
{
    m_towardsNumber_.reset();
}

::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& SignpostPhoneticTranscriptions::getDirectionName()
{
    return m_directionName_.value().getRawArray();
}

const ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& SignpostPhoneticTranscriptions::getDirectionName() const
{
    return m_directionName_.value().getRawArray();
}

void SignpostPhoneticTranscriptions::setDirectionName(const ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& directionName_)
{
    m_directionName_ = ZserioArrayType_directionName(directionName_);
}

void SignpostPhoneticTranscriptions::setDirectionName(::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>&& directionName_)
{
    m_directionName_ = ZserioArrayType_directionName(std::move(directionName_));
}

bool SignpostPhoneticTranscriptions::isDirectionNameUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME);
}

bool SignpostPhoneticTranscriptions::isDirectionNameSet() const
{
    return m_directionName_.hasValue();
}

void SignpostPhoneticTranscriptions::resetDirectionName()
{
    m_directionName_.reset();
}

::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& SignpostPhoneticTranscriptions::getDirectionNumber()
{
    return m_directionNumber_.value().getRawArray();
}

const ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& SignpostPhoneticTranscriptions::getDirectionNumber() const
{
    return m_directionNumber_.value().getRawArray();
}

void SignpostPhoneticTranscriptions::setDirectionNumber(const ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& directionNumber_)
{
    m_directionNumber_ = ZserioArrayType_directionNumber(directionNumber_);
}

void SignpostPhoneticTranscriptions::setDirectionNumber(::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>&& directionNumber_)
{
    m_directionNumber_ = ZserioArrayType_directionNumber(std::move(directionNumber_));
}

bool SignpostPhoneticTranscriptions::isDirectionNumberUsed() const
{
    return ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER);
}

bool SignpostPhoneticTranscriptions::isDirectionNumberSet() const
{
    return m_directionNumber_.hasValue();
}

void SignpostPhoneticTranscriptions::resetDirectionNumber()
{
    m_directionNumber_.reset();
}

void SignpostPhoneticTranscriptions::initPackingContext(SignpostPhoneticTranscriptions::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        m_exitName_.value().initPackingContext(context.getExitName());
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        m_exitNumber_.value().initPackingContext(context.getExitNumber());
    }
}

size_t SignpostPhoneticTranscriptions::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        endBitPosition += m_exitName_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        endBitPosition += m_exitNumber_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        endBitPosition += m_towardsName_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        endBitPosition += m_towardsNumber_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        endBitPosition += m_directionName_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        endBitPosition += m_directionNumber_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t SignpostPhoneticTranscriptions::bitSizeOf(SignpostPhoneticTranscriptions::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        endBitPosition += m_exitName_.value().bitSizeOf(context.getExitName(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        endBitPosition += m_exitNumber_.value().bitSizeOf(context.getExitNumber(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        endBitPosition += m_towardsName_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        endBitPosition += m_towardsNumber_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        endBitPosition += m_directionName_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        endBitPosition += m_directionNumber_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t SignpostPhoneticTranscriptions::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        endBitPosition = m_exitName_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        endBitPosition = m_exitNumber_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        endBitPosition = m_towardsName_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        endBitPosition = m_towardsNumber_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        endBitPosition = m_directionName_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        endBitPosition = m_directionNumber_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t SignpostPhoneticTranscriptions::initializeOffsets(SignpostPhoneticTranscriptions::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        endBitPosition = m_exitName_.value().initializeOffsets(context.getExitName(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        endBitPosition = m_exitNumber_.value().initializeOffsets(context.getExitNumber(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        endBitPosition = m_towardsName_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        endBitPosition = m_towardsNumber_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        endBitPosition = m_directionName_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        endBitPosition = m_directionNumber_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool SignpostPhoneticTranscriptions::operator==(const SignpostPhoneticTranscriptions& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isExitNameUsed() ? !other.isExitNameUsed() : (m_exitName_ == other.m_exitName_)) &&
                (!isExitNumberUsed() ? !other.isExitNumberUsed() : (m_exitNumber_ == other.m_exitNumber_)) &&
                (!isTowardsNameUsed() ? !other.isTowardsNameUsed() : (m_towardsName_ == other.m_towardsName_)) &&
                (!isTowardsNumberUsed() ? !other.isTowardsNumberUsed() : (m_towardsNumber_ == other.m_towardsNumber_)) &&
                (!isDirectionNameUsed() ? !other.isDirectionNameUsed() : (m_directionName_ == other.m_directionName_)) &&
                (!isDirectionNumberUsed() ? !other.isDirectionNumberUsed() : (m_directionNumber_ == other.m_directionNumber_));
    }

    return true;
}

uint32_t SignpostPhoneticTranscriptions::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isExitNameUsed())
        result = ::zserio::calcHashCode(result, m_exitName_);
    if (isExitNumberUsed())
        result = ::zserio::calcHashCode(result, m_exitNumber_);
    if (isTowardsNameUsed())
        result = ::zserio::calcHashCode(result, m_towardsName_);
    if (isTowardsNumberUsed())
        result = ::zserio::calcHashCode(result, m_towardsNumber_);
    if (isDirectionNameUsed())
        result = ::zserio::calcHashCode(result, m_directionName_);
    if (isDirectionNumberUsed())
        result = ::zserio::calcHashCode(result, m_directionNumber_);

    return result;
}

void SignpostPhoneticTranscriptions::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        m_exitName_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        m_exitNumber_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        m_towardsName_.value().write(*this, out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        m_towardsNumber_.value().write(*this, out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        m_directionName_.value().write(*this, out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        m_directionNumber_.value().write(*this, out);
    }
}

void SignpostPhoneticTranscriptions::write(SignpostPhoneticTranscriptions::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        m_exitName_.value().write(context.getExitName(), out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        m_exitNumber_.value().write(context.getExitNumber(), out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        m_towardsName_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        m_towardsNumber_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        m_directionName_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        m_directionNumber_.value().writePacked(*this, out);
    }
}

void SignpostPhoneticTranscriptions::ZserioElementFactory_towardsName::create(SignpostPhoneticTranscriptions&        ,
        ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void SignpostPhoneticTranscriptions::ZserioElementFactory_towardsName::create(SignpostPhoneticTranscriptions&        ,
        ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& array,
        ::nds::core::speech::PhoneticTranscriptionList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void SignpostPhoneticTranscriptions::ZserioElementFactory_towardsNumber::create(SignpostPhoneticTranscriptions&        ,
        ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void SignpostPhoneticTranscriptions::ZserioElementFactory_towardsNumber::create(SignpostPhoneticTranscriptions&        ,
        ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& array,
        ::nds::core::speech::PhoneticTranscriptionList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void SignpostPhoneticTranscriptions::ZserioElementFactory_directionName::create(SignpostPhoneticTranscriptions&        ,
        ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void SignpostPhoneticTranscriptions::ZserioElementFactory_directionName::create(SignpostPhoneticTranscriptions&        ,
        ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& array,
        ::nds::core::speech::PhoneticTranscriptionList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void SignpostPhoneticTranscriptions::ZserioElementFactory_directionNumber::create(SignpostPhoneticTranscriptions&        ,
        ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void SignpostPhoneticTranscriptions::ZserioElementFactory_directionNumber::create(SignpostPhoneticTranscriptions&        ,
        ::zserio::vector<::nds::core::speech::PhoneticTranscriptionList>& array,
        ::nds::core::speech::PhoneticTranscriptionList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::instructions::types::SignpostInstructionContent SignpostPhoneticTranscriptions::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::instructions::types::SignpostInstructionContent(in);
}

::nds::instructions::types::SignpostInstructionContent SignpostPhoneticTranscriptions::readContent(SignpostPhoneticTranscriptions::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::instructions::types::SignpostInstructionContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList> SignpostPhoneticTranscriptions::readExitName(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList>(::nds::core::speech::PhoneticTranscriptionList(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList> SignpostPhoneticTranscriptions::readExitName(SignpostPhoneticTranscriptions::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NAME)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList>(::nds::core::speech::PhoneticTranscriptionList(context.getExitName(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList> SignpostPhoneticTranscriptions::readExitNumber(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList>(::nds::core::speech::PhoneticTranscriptionList(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList> SignpostPhoneticTranscriptions::readExitNumber(SignpostPhoneticTranscriptions::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::EXIT_NUMBER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList>(::nds::core::speech::PhoneticTranscriptionList(context.getExitNumber(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticTranscriptionList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<SignpostPhoneticTranscriptions::ZserioArrayType_towardsName> SignpostPhoneticTranscriptions::readTowardsName(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        ZserioArrayType_towardsName readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsName>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsName>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<SignpostPhoneticTranscriptions::ZserioArrayType_towardsName> SignpostPhoneticTranscriptions::readTowardsName(SignpostPhoneticTranscriptions::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NAME)
    {
        ZserioArrayType_towardsName readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsName>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsName>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<SignpostPhoneticTranscriptions::ZserioArrayType_towardsNumber> SignpostPhoneticTranscriptions::readTowardsNumber(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        ZserioArrayType_towardsNumber readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsNumber>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsNumber>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<SignpostPhoneticTranscriptions::ZserioArrayType_towardsNumber> SignpostPhoneticTranscriptions::readTowardsNumber(SignpostPhoneticTranscriptions::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::TOWARDS_NUMBER)
    {
        ZserioArrayType_towardsNumber readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsNumber>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_towardsNumber>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<SignpostPhoneticTranscriptions::ZserioArrayType_directionName> SignpostPhoneticTranscriptions::readDirectionName(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        ZserioArrayType_directionName readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionName>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionName>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<SignpostPhoneticTranscriptions::ZserioArrayType_directionName> SignpostPhoneticTranscriptions::readDirectionName(SignpostPhoneticTranscriptions::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NAME)
    {
        ZserioArrayType_directionName readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionName>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionName>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<SignpostPhoneticTranscriptions::ZserioArrayType_directionNumber> SignpostPhoneticTranscriptions::readDirectionNumber(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        ZserioArrayType_directionNumber readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionNumber>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionNumber>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<SignpostPhoneticTranscriptions::ZserioArrayType_directionNumber> SignpostPhoneticTranscriptions::readDirectionNumber(SignpostPhoneticTranscriptions::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER) == ::nds::instructions::types::SignpostInstructionContent::Values::DIRECTION_NUMBER)
    {
        ZserioArrayType_directionNumber readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionNumber>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_directionNumber>(::zserio::NullOpt);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/instructions/types/SignpostImageList.h>

namespace nds
{
namespace instructions
{
namespace types
{

SignpostImageList::SignpostImageList(const allocator_type& allocator) noexcept :
        m_numSignposts_(uint32_t()),
        m_ids_(allocator),
        m_signpost_(allocator)
{
}

SignpostImageList::SignpostImageList(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numSignposts_(readNumSignposts(in)),
        m_ids_(readIds(in, allocator)),
        m_signpost_(readSignpost(in, allocator))
{
}

SignpostImageList::SignpostImageList(SignpostImageList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numSignposts_(readNumSignposts(context, in)),
        m_ids_(readIds(context, in, allocator)),
        m_signpost_(readSignpost(context, in, allocator))
{
}

SignpostImageList::SignpostImageList(::zserio::PropagateAllocatorT,
        const SignpostImageList& other, const allocator_type& allocator) :
        m_numSignposts_(::zserio::allocatorPropagatingCopy(other.m_numSignposts_, allocator)),
        m_ids_(::zserio::allocatorPropagatingCopy(other.m_ids_, allocator)),
        m_signpost_(::zserio::allocatorPropagatingCopy(other.m_signpost_, allocator))
{
}

uint32_t SignpostImageList::getNumSignposts() const
{
    return m_numSignposts_;
}

void SignpostImageList::setNumSignposts(uint32_t numSignposts_)
{
    m_numSignposts_ = numSignposts_;
}

::zserio::vector<::nds::instructions::types::SignpostImageId>& SignpostImageList::getIds()
{
    return m_ids_.getRawArray();
}

const ::zserio::vector<::nds::instructions::types::SignpostImageId>& SignpostImageList::getIds() const
{
    return m_ids_.getRawArray();
}

void SignpostImageList::setIds(const ::zserio::vector<::nds::instructions::types::SignpostImageId>& ids_)
{
    m_ids_ = ZserioArrayType_ids(ids_);
}

void SignpostImageList::setIds(::zserio::vector<::nds::instructions::types::SignpostImageId>&& ids_)
{
    m_ids_ = ZserioArrayType_ids(std::move(ids_));
}

::zserio::vector<::nds::core::icons::IconImage>& SignpostImageList::getSignpost()
{
    return m_signpost_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconImage>& SignpostImageList::getSignpost() const
{
    return m_signpost_.getRawArray();
}

void SignpostImageList::setSignpost(const ::zserio::vector<::nds::core::icons::IconImage>& signpost_)
{
    m_signpost_ = ZserioArrayType_signpost(signpost_);
}

void SignpostImageList::setSignpost(::zserio::vector<::nds::core::icons::IconImage>&& signpost_)
{
    m_signpost_ = ZserioArrayType_signpost(std::move(signpost_));
}

void SignpostImageList::initPackingContext(SignpostImageList::ZserioPackingContext& context) const
{
    context.getNumSignposts().init<::zserio::VarSizeArrayTraits>(m_numSignposts_);
}

size_t SignpostImageList::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numSignposts_);
    endBitPosition += m_ids_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_signpost_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t SignpostImageList::bitSizeOf(SignpostImageList::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumSignposts().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numSignposts_);
    endBitPosition += m_ids_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_signpost_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t SignpostImageList::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numSignposts_);
    endBitPosition = m_ids_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_signpost_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t SignpostImageList::initializeOffsets(SignpostImageList::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumSignposts().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numSignposts_);
    endBitPosition = m_ids_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_signpost_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool SignpostImageList::operator==(const SignpostImageList& other) const
{
    if (this != &other)
    {
        return
                (m_numSignposts_ == other.m_numSignposts_) &&
                (m_ids_ == other.m_ids_) &&
                (m_signpost_ == other.m_signpost_);
    }

    return true;
}

uint32_t SignpostImageList::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numSignposts_);
    result = ::zserio::calcHashCode(result, m_ids_);
    result = ::zserio::calcHashCode(result, m_signpost_);

    return result;
}

void SignpostImageList::write(::zserio::BitStreamWriter& out) const
{
    out.alignTo(8);
    out.writeVarSize(m_numSignposts_);

    // check array length
    if (m_ids_.getRawArray().size() != static_cast<size_t>(getNumSignposts()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field SignpostImageList.ids: ") <<
                m_ids_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumSignposts()) << "!";
    }
    m_ids_.writePacked(out);

    // check array length
    if (m_signpost_.getRawArray().size() != static_cast<size_t>(getNumSignposts()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field SignpostImageList.signpost: ") <<
                m_signpost_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumSignposts()) << "!";
    }
    m_signpost_.write(*this, out);
}

void SignpostImageList::write(SignpostImageList::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    out.alignTo(8);
    context.getNumSignposts().write<::zserio::VarSizeArrayTraits>(out, m_numSignposts_);

    // check array length
    if (m_ids_.getRawArray().size() != static_cast<size_t>(getNumSignposts()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field SignpostImageList.ids: ") <<
                m_ids_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumSignposts()) << "!";
    }
    m_ids_.writePacked(out);

    // check array length
    if (m_signpost_.getRawArray().size() != static_cast<size_t>(getNumSignposts()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field SignpostImageList.signpost: ") <<
                m_signpost_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumSignposts()) << "!";
    }
    m_signpost_.writePacked(*this, out);
}

void SignpostImageList::ZserioElementFactory_signpost::create(SignpostImageList&        ,
        ::zserio::vector<::nds::core::icons::IconImage>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void SignpostImageList::ZserioElementFactory_signpost::create(SignpostImageList&        ,
        ::zserio::vector<::nds::core::icons::IconImage>& array,
        ::nds::core::icons::IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

uint32_t SignpostImageList::readNumSignposts(::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t SignpostImageList::readNumSignposts(SignpostImageList::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return context.getNumSignposts().read<::zserio::VarSizeArrayTraits>(in);
}
SignpostImageList::ZserioArrayType_ids SignpostImageList::readIds(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_ids readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumSignposts()));

    return readField;
}

SignpostImageList::ZserioArrayType_ids SignpostImageList::readIds(SignpostImageList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_ids readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumSignposts()));

    return readField;
}
SignpostImageList::ZserioArrayType_signpost SignpostImageList::readSignpost(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_signpost readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumSignposts()));

    return readField;
}

SignpostImageList::ZserioArrayType_signpost SignpostImageList::readSignpost(SignpostImageList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_signpost readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumSignposts()));

    return readField;
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/instructions/types/SignpostImage.h>

namespace nds
{
namespace instructions
{
namespace types
{

SignpostImage::SignpostImage(const allocator_type& allocator) noexcept :
        m_id_(::nds::instructions::types::SignPostImageReference()),
        m_position_(allocator)
{
}

SignpostImage::SignpostImage(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_id_(readId(in)),
        m_position_(readPosition(in, allocator))
{
}

SignpostImage::SignpostImage(SignpostImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_id_(readId(context, in)),
        m_position_(readPosition(context, in, allocator))
{
}

SignpostImage::SignpostImage(::zserio::PropagateAllocatorT,
        const SignpostImage& other, const allocator_type& allocator) :
        m_id_(::zserio::allocatorPropagatingCopy(other.m_id_, allocator)),
        m_position_(::zserio::allocatorPropagatingCopy(other.m_position_, allocator))
{
}

::nds::instructions::types::SignPostImageReference SignpostImage::getId() const
{
    return m_id_;
}

void SignpostImage::setId(::nds::instructions::types::SignPostImageReference id_)
{
    m_id_ = id_;
}

::nds::core::types::PercentagePosition& SignpostImage::getPosition()
{
    return m_position_;
}

const ::nds::core::types::PercentagePosition& SignpostImage::getPosition() const
{
    return m_position_;
}

void SignpostImage::setPosition(const ::nds::core::types::PercentagePosition& position_)
{
    m_position_ = position_;
}

void SignpostImage::setPosition(::nds::core::types::PercentagePosition&& position_)
{
    m_position_ = ::std::move(position_);
}

void SignpostImage::initPackingContext(SignpostImage::ZserioPackingContext& context) const
{
    context.getId().init<::zserio::VarIntArrayTraits<::nds::instructions::types::SignPostImageReference>>(m_id_);
    m_position_.initPackingContext(context.getPosition());
}

size_t SignpostImage::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt(m_id_);
    endBitPosition += m_position_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t SignpostImage::bitSizeOf(SignpostImage::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getId().bitSizeOf<::zserio::VarIntArrayTraits<::nds::instructions::types::SignPostImageReference>>(m_id_);
    endBitPosition += m_position_.bitSizeOf(context.getPosition(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t SignpostImage::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt(m_id_);
    endBitPosition = m_position_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t SignpostImage::initializeOffsets(SignpostImage::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getId().bitSizeOf<::zserio::VarIntArrayTraits<::nds::instructions::types::SignPostImageReference>>(m_id_);
    endBitPosition = m_position_.initializeOffsets(context.getPosition(), endBitPosition);

    return endBitPosition;
}

bool SignpostImage::operator==(const SignpostImage& other) const
{
    if (this != &other)
    {
        return
                (m_id_ == other.m_id_) &&
                (m_position_ == other.m_position_);
    }

    return true;
}

uint32_t SignpostImage::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_id_);
    result = ::zserio::calcHashCode(result, m_position_);

    return result;
}

void SignpostImage::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt(m_id_);
    m_position_.write(out);
}

void SignpostImage::write(SignpostImage::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getId().write<::zserio::VarIntArrayTraits<::nds::instructions::types::SignPostImageReference>>(out, m_id_);
    m_position_.write(context.getPosition(), out);
}

::nds::instructions::types::SignPostImageReference SignpostImage::readId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::instructions::types::SignPostImageReference>(in.readVarUInt());
}

::nds::instructions::types::SignPostImageReference SignpostImage::readId(SignpostImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getId().read<::zserio::VarIntArrayTraits<::nds::instructions::types::SignPostImageReference>>(in);
}
::nds::core::types::PercentagePosition SignpostImage::readPosition(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::types::PercentagePosition(in, allocator);
}

::nds::core::types::PercentagePosition SignpostImage::readPosition(SignpostImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::types::PercentagePosition(context.getPosition(), in, allocator);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/instructions/types/LaneInstruction.h>

namespace nds
{
namespace instructions
{
namespace types
{

LaneInstruction::LaneInstruction(const allocator_type& allocator) noexcept :
        m_numScenes_(uint32_t()),
        m_scenes_(allocator),
        m_positions_(allocator)
{
}

LaneInstruction::LaneInstruction(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numScenes_(readNumScenes(in)),
        m_scenes_(readScenes(in, allocator)),
        m_positions_(readPositions(in, allocator))
{
}

LaneInstruction::LaneInstruction(LaneInstruction::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numScenes_(readNumScenes(context, in)),
        m_scenes_(readScenes(context, in, allocator)),
        m_positions_(readPositions(context, in, allocator))
{
}

LaneInstruction::LaneInstruction(::zserio::PropagateAllocatorT,
        const LaneInstruction& other, const allocator_type& allocator) :
        m_numScenes_(::zserio::allocatorPropagatingCopy(other.m_numScenes_, allocator)),
        m_scenes_(::zserio::allocatorPropagatingCopy(other.m_scenes_, allocator)),
        m_positions_(::zserio::allocatorPropagatingCopy(other.m_positions_, allocator))
{
}

uint32_t LaneInstruction::getNumScenes() const
{
    return m_numScenes_;
}

void LaneInstruction::setNumScenes(uint32_t numScenes_)
{
    m_numScenes_ = numScenes_;
}

::zserio::vector<::nds::instructions::types::LaneInstructionScene>& LaneInstruction::getScenes()
{
    return m_scenes_.getRawArray();
}

const ::zserio::vector<::nds::instructions::types::LaneInstructionScene>& LaneInstruction::getScenes() const
{
    return m_scenes_.getRawArray();
}

void LaneInstruction::setScenes(const ::zserio::vector<::nds::instructions::types::LaneInstructionScene>& scenes_)
{
    m_scenes_ = ZserioArrayType_scenes(scenes_);
}

void LaneInstruction::setScenes(::zserio::vector<::nds::instructions::types::LaneInstructionScene>&& scenes_)
{
    m_scenes_ = ZserioArrayType_scenes(std::move(scenes_));
}

::zserio::vector<::nds::core::types::PercentagePosition>& LaneInstruction::getPositions()
{
    return m_positions_.getRawArray();
}

const ::zserio::vector<::nds::core::types::PercentagePosition>& LaneInstruction::getPositions() const
{
    return m_positions_.getRawArray();
}

void LaneInstruction::setPositions(const ::zserio::vector<::nds::core::types::PercentagePosition>& positions_)
{
    m_positions_ = ZserioArrayType_positions(positions_);
}

void LaneInstruction::setPositions(::zserio::vector<::nds::core::types::PercentagePosition>&& positions_)
{
    m_positions_ = ZserioArrayType_positions(std::move(positions_));
}

void LaneInstruction::initPackingContext(LaneInstruction::ZserioPackingContext& context) const
{
    context.getNumScenes().init<::zserio::VarSizeArrayTraits>(m_numScenes_);
}

size_t LaneInstruction::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numScenes_);
    endBitPosition += m_scenes_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_positions_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneInstruction::bitSizeOf(LaneInstruction::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumScenes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numScenes_);
    endBitPosition += m_scenes_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_positions_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneInstruction::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numScenes_);
    endBitPosition = m_scenes_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_positions_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t LaneInstruction::initializeOffsets(LaneInstruction::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumScenes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numScenes_);
    endBitPosition = m_scenes_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_positions_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool LaneInstruction::operator==(const LaneInstruction& other) const
{
    if (this != &other)
    {
        return
                (m_numScenes_ == other.m_numScenes_) &&
                (m_scenes_ == other.m_scenes_) &&
                (m_positions_ == other.m_positions_);
    }

    return true;
}

uint32_t LaneInstruction::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numScenes_);
    result = ::zserio::calcHashCode(result, m_scenes_);
    result = ::zserio::calcHashCode(result, m_positions_);

    return result;
}

void LaneInstruction::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarSize(m_numScenes_);

    // check array length
    if (m_scenes_.getRawArray().size() != static_cast<size_t>(getNumScenes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field LaneInstruction.scenes: ") <<
                m_scenes_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumScenes()) << "!";
    }
    m_scenes_.write(*this, out);

    // check array length
    if (m_positions_.getRawArray().size() != static_cast<size_t>(getNumScenes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field LaneInstruction.positions: ") <<
                m_positions_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumScenes()) << "!";
    }
    m_positions_.write(*this, out);
}

void LaneInstruction::write(LaneInstruction::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumScenes().write<::zserio::VarSizeArrayTraits>(out, m_numScenes_);

    // check array length
    if (m_scenes_.getRawArray().size() != static_cast<size_t>(getNumScenes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field LaneInstruction.scenes: ") <<
                m_scenes_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumScenes()) << "!";
    }
    m_scenes_.writePacked(*this, out);

    // check array length
    if (m_positions_.getRawArray().size() != static_cast<size_t>(getNumScenes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field LaneInstruction.positions: ") <<
                m_positions_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumScenes()) << "!";
    }
    m_positions_.writePacked(*this, out);
}

void LaneInstruction::ZserioElementFactory_scenes::create(LaneInstruction&        ,
        ::zserio::vector<::nds::instructions::types::LaneInstructionScene>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneInstruction::ZserioElementFactory_scenes::create(LaneInstruction&        ,
        ::zserio::vector<::nds::instructions::types::LaneInstructionScene>& array,
        ::nds::instructions::types::LaneInstructionScene::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void LaneInstruction::ZserioElementFactory_positions::create(LaneInstruction&        ,
        ::zserio::vector<::nds::core::types::PercentagePosition>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneInstruction::ZserioElementFactory_positions::create(LaneInstruction&        ,
        ::zserio::vector<::nds::core::types::PercentagePosition>& array,
        ::nds::core::types::PercentagePosition::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

uint32_t LaneInstruction::readNumScenes(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t LaneInstruction::readNumScenes(LaneInstruction::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumScenes().read<::zserio::VarSizeArrayTraits>(in);
}
LaneInstruction::ZserioArrayType_scenes LaneInstruction::readScenes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_scenes readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumScenes()));

    return readField;
}

LaneInstruction::ZserioArrayType_scenes LaneInstruction::readScenes(LaneInstruction::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_scenes readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumScenes()));

    return readField;
}
LaneInstruction::ZserioArrayType_positions LaneInstruction::readPositions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_positions readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumScenes()));

    return readField;
}

LaneInstruction::ZserioArrayType_positions LaneInstruction::readPositions(LaneInstruction::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_positions readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumScenes()));

    return readField;
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/instructions/types/LaneInstructionScene.h>

namespace nds
{
namespace instructions
{
namespace types
{

LaneInstructionScene::LaneInstructionScene(const allocator_type& allocator) noexcept :
        m_numLanes_(uint8_t()),
        m_activeLanes_(allocator),
        m_markings_(::zserio::NullOpt)
{
}

LaneInstructionScene::LaneInstructionScene(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numLanes_(readNumLanes(in)),
        m_activeLanes_(readActiveLanes(in, allocator)),
        m_markings_(readMarkings(in, allocator))
{
}

LaneInstructionScene::LaneInstructionScene(LaneInstructionScene::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numLanes_(readNumLanes(context, in)),
        m_activeLanes_(readActiveLanes(in, allocator)),
        m_markings_(readMarkings(context, in, allocator))
{
}

LaneInstructionScene::LaneInstructionScene(::zserio::PropagateAllocatorT,
        const LaneInstructionScene& other, const allocator_type& allocator) :
        m_numLanes_(::zserio::allocatorPropagatingCopy(other.m_numLanes_, allocator)),
        m_activeLanes_(::zserio::allocatorPropagatingCopy(other.m_activeLanes_, allocator)),
        m_markings_(::zserio::allocatorPropagatingCopy(other.m_markings_, allocator))
{
}

uint8_t LaneInstructionScene::getNumLanes() const
{
    return m_numLanes_;
}

void LaneInstructionScene::setNumLanes(uint8_t numLanes_)
{
    m_numLanes_ = numLanes_;
}

::zserio::vector<bool>& LaneInstructionScene::getActiveLanes()
{
    return m_activeLanes_.getRawArray();
}

const ::zserio::vector<bool>& LaneInstructionScene::getActiveLanes() const
{
    return m_activeLanes_.getRawArray();
}

void LaneInstructionScene::setActiveLanes(const ::zserio::vector<bool>& activeLanes_)
{
    m_activeLanes_ = ZserioArrayType_activeLanes(activeLanes_);
}

void LaneInstructionScene::setActiveLanes(::zserio::vector<bool>&& activeLanes_)
{
    m_activeLanes_ = ZserioArrayType_activeLanes(std::move(activeLanes_));
}

::zserio::vector<::nds::instructions::types::InstructionLaneMarking>& LaneInstructionScene::getMarkings()
{
    return m_markings_.value().getRawArray();
}

const ::zserio::vector<::nds::instructions::types::InstructionLaneMarking>& LaneInstructionScene::getMarkings() const
{
    return m_markings_.value().getRawArray();
}

void LaneInstructionScene::setMarkings(const ::zserio::vector<::nds::instructions::types::InstructionLaneMarking>& markings_)
{
    m_markings_ = ZserioArrayType_markings(markings_);
}

void LaneInstructionScene::setMarkings(::zserio::vector<::nds::instructions::types::InstructionLaneMarking>&& markings_)
{
    m_markings_ = ZserioArrayType_markings(std::move(markings_));
}

bool LaneInstructionScene::isMarkingsUsed() const
{
    return (isMarkingsSet());
}

bool LaneInstructionScene::isMarkingsSet() const
{
    return m_markings_.hasValue();
}

void LaneInstructionScene::resetMarkings()
{
    m_markings_.reset();
}

void LaneInstructionScene::initPackingContext(LaneInstructionScene::ZserioPackingContext& context) const
{
    context.getNumLanes().init<::zserio::StdIntArrayTraits<uint8_t>>(m_numLanes_);
}

size_t LaneInstructionScene::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += m_activeLanes_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isMarkingsSet())
    {
        endBitPosition += m_markings_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneInstructionScene::bitSizeOf(LaneInstructionScene::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumLanes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_numLanes_);
    endBitPosition += m_activeLanes_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isMarkingsSet())
    {
        endBitPosition += m_markings_.value().bitSizeOfPacked(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneInstructionScene::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition = m_activeLanes_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isMarkingsSet())
    {
        endBitPosition = m_markings_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneInstructionScene::initializeOffsets(LaneInstructionScene::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumLanes().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_numLanes_);
    endBitPosition = m_activeLanes_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isMarkingsSet())
    {
        endBitPosition = m_markings_.value().initializeOffsetsPacked(endBitPosition);
    }

    return endBitPosition;
}

bool LaneInstructionScene::operator==(const LaneInstructionScene& other) const
{
    if (this != &other)
    {
        return
                (m_numLanes_ == other.m_numLanes_) &&
                (m_activeLanes_ == other.m_activeLanes_) &&
                (!isMarkingsUsed() ? !other.isMarkingsUsed() : (m_markings_ == other.m_markings_));
    }

    return true;
}

uint32_t LaneInstructionScene::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numLanes_);
    result = ::zserio::calcHashCode(result, m_activeLanes_);
    if (isMarkingsUsed())
        result = ::zserio::calcHashCode(result, m_markings_);

    return result;
}

void LaneInstructionScene::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_numLanes_, UINT8_C(8));

    // check array length
    if (m_activeLanes_.getRawArray().size() != static_cast<size_t>(getNumLanes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field LaneInstructionScene.activeLanes: ") <<
                m_activeLanes_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumLanes()) << "!";
    }
    m_activeLanes_.write(out);

    if (isMarkingsSet())
    {
        out.writeBool(true);
        // check array length
        if (m_markings_.value().getRawArray().size() != static_cast<size_t>(getNumLanes()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field LaneInstructionScene.markings: ") <<
                    m_markings_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumLanes()) << "!";
        }
        m_markings_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
}

void LaneInstructionScene::write(LaneInstructionScene::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumLanes().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_numLanes_);

    // check array length
    if (m_activeLanes_.getRawArray().size() != static_cast<size_t>(getNumLanes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field LaneInstructionScene.activeLanes: ") <<
                m_activeLanes_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumLanes()) << "!";
    }
    m_activeLanes_.write(out);

    if (isMarkingsSet())
    {
        out.writeBool(true);
        // check array length
        if (m_markings_.value().getRawArray().size() != static_cast<size_t>(getNumLanes()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field LaneInstructionScene.markings: ") <<
                    m_markings_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumLanes()) << "!";
        }
        m_markings_.value().writePacked(out);
    }
    else
    {
        out.writeBool(false);
    }
}

uint8_t LaneInstructionScene::readNumLanes(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}

uint8_t LaneInstructionScene::readNumLanes(LaneInstructionScene::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumLanes().read<::zserio::StdIntArrayTraits<uint8_t>>(in);
}
LaneInstructionScene::ZserioArrayType_activeLanes LaneInstructionScene::readActiveLanes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_activeLanes readField(allocator);
    readField.read(in, static_cast<size_t>(getNumLanes()));

    return readField;
}
::zserio::InplaceOptionalHolder<LaneInstructionScene::ZserioArrayType_markings> LaneInstructionScene::readMarkings(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_markings readField(allocator);
        readField.read(in, static_cast<size_t>(getNumLanes()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_markings>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_markings>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<LaneInstructionScene::ZserioArrayType_markings> LaneInstructionScene::readMarkings(LaneInstructionScene::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_markings readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumLanes()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_markings>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_markings>(::zserio::NullOpt);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/instructions/types/JunctionView.h>

namespace nds
{
namespace instructions
{
namespace types
{

JunctionView::JunctionView(const allocator_type& allocator) noexcept :
        m_numScenes_(uint32_t()),
        m_scenes_(allocator),
        m_positions_(allocator)
{
}

JunctionView::JunctionView(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numScenes_(readNumScenes(in)),
        m_scenes_(readScenes(in, allocator)),
        m_positions_(readPositions(in, allocator))
{
}

JunctionView::JunctionView(JunctionView::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numScenes_(readNumScenes(context, in)),
        m_scenes_(readScenes(context, in, allocator)),
        m_positions_(readPositions(context, in, allocator))
{
}

JunctionView::JunctionView(::zserio::PropagateAllocatorT,
        const JunctionView& other, const allocator_type& allocator) :
        m_numScenes_(::zserio::allocatorPropagatingCopy(other.m_numScenes_, allocator)),
        m_scenes_(::zserio::allocatorPropagatingCopy(other.m_scenes_, allocator)),
        m_positions_(::zserio::allocatorPropagatingCopy(other.m_positions_, allocator))
{
}

uint32_t JunctionView::getNumScenes() const
{
    return m_numScenes_;
}

void JunctionView::setNumScenes(uint32_t numScenes_)
{
    m_numScenes_ = numScenes_;
}

::zserio::vector<::nds::instructions::types::JunctionViewScene>& JunctionView::getScenes()
{
    return m_scenes_.getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewScene>& JunctionView::getScenes() const
{
    return m_scenes_.getRawArray();
}

void JunctionView::setScenes(const ::zserio::vector<::nds::instructions::types::JunctionViewScene>& scenes_)
{
    m_scenes_ = ZserioArrayType_scenes(scenes_);
}

void JunctionView::setScenes(::zserio::vector<::nds::instructions::types::JunctionViewScene>&& scenes_)
{
    m_scenes_ = ZserioArrayType_scenes(std::move(scenes_));
}

::zserio::vector<::nds::core::types::PercentagePosition>& JunctionView::getPositions()
{
    return m_positions_.getRawArray();
}

const ::zserio::vector<::nds::core::types::PercentagePosition>& JunctionView::getPositions() const
{
    return m_positions_.getRawArray();
}

void JunctionView::setPositions(const ::zserio::vector<::nds::core::types::PercentagePosition>& positions_)
{
    m_positions_ = ZserioArrayType_positions(positions_);
}

void JunctionView::setPositions(::zserio::vector<::nds::core::types::PercentagePosition>&& positions_)
{
    m_positions_ = ZserioArrayType_positions(std::move(positions_));
}

void JunctionView::initPackingContext(JunctionView::ZserioPackingContext& context) const
{
    context.getNumScenes().init<::zserio::VarSizeArrayTraits>(m_numScenes_);
}

size_t JunctionView::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numScenes_);
    endBitPosition += m_scenes_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_positions_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t JunctionView::bitSizeOf(JunctionView::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumScenes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numScenes_);
    endBitPosition += m_scenes_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_positions_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t JunctionView::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numScenes_);
    endBitPosition = m_scenes_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_positions_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

size_t JunctionView::initializeOffsets(JunctionView::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumScenes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numScenes_);
    endBitPosition = m_scenes_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_positions_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool JunctionView::operator==(const JunctionView& other) const
{
    if (this != &other)
    {
        return
                (m_numScenes_ == other.m_numScenes_) &&
                (m_scenes_ == other.m_scenes_) &&
                (m_positions_ == other.m_positions_);
    }

    return true;
}

uint32_t JunctionView::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numScenes_);
    result = ::zserio::calcHashCode(result, m_scenes_);
    result = ::zserio::calcHashCode(result, m_positions_);

    return result;
}

void JunctionView::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarSize(m_numScenes_);

    // check array length
    if (m_scenes_.getRawArray().size() != static_cast<size_t>(getNumScenes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionView.scenes: ") <<
                m_scenes_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumScenes()) << "!";
    }
    m_scenes_.write(*this, out);

    // check array length
    if (m_positions_.getRawArray().size() != static_cast<size_t>(getNumScenes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionView.positions: ") <<
                m_positions_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumScenes()) << "!";
    }
    m_positions_.writePacked(*this, out);
}

void JunctionView::write(JunctionView::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumScenes().write<::zserio::VarSizeArrayTraits>(out, m_numScenes_);

    // check array length
    if (m_scenes_.getRawArray().size() != static_cast<size_t>(getNumScenes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionView.scenes: ") <<
                m_scenes_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumScenes()) << "!";
    }
    m_scenes_.writePacked(*this, out);

    // check array length
    if (m_positions_.getRawArray().size() != static_cast<size_t>(getNumScenes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionView.positions: ") <<
                m_positions_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumScenes()) << "!";
    }
    m_positions_.writePacked(*this, out);
}

void JunctionView::ZserioElementFactory_scenes::create(JunctionView&        ,
        ::zserio::vector<::nds::instructions::types::JunctionViewScene>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void JunctionView::ZserioElementFactory_scenes::create(JunctionView&        ,
        ::zserio::vector<::nds::instructions::types::JunctionViewScene>& array,
        ::nds::instructions::types::JunctionViewScene::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void JunctionView::ZserioElementFactory_positions::create(JunctionView&        ,
        ::zserio::vector<::nds::core::types::PercentagePosition>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void JunctionView::ZserioElementFactory_positions::create(JunctionView&        ,
        ::zserio::vector<::nds::core::types::PercentagePosition>& array,
        ::nds::core::types::PercentagePosition::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

uint32_t JunctionView::readNumScenes(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t JunctionView::readNumScenes(JunctionView::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumScenes().read<::zserio::VarSizeArrayTraits>(in);
}
JunctionView::ZserioArrayType_scenes JunctionView::readScenes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_scenes readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumScenes()));

    return readField;
}

JunctionView::ZserioArrayType_scenes JunctionView::readScenes(JunctionView::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_scenes readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumScenes()));

    return readField;
}
JunctionView::ZserioArrayType_positions JunctionView::readPositions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_positions readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumScenes()));

    return readField;
}

JunctionView::ZserioArrayType_positions JunctionView::readPositions(JunctionView::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_positions readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumScenes()));

    return readField;
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/instructions/types/JunctionViewScene.h>
#include <nds/instructions/types/JunctionViewContent.h>

namespace nds
{
namespace instructions
{
namespace types
{

JunctionViewScene::JunctionViewScene(const allocator_type& allocator) noexcept :
        m_content_(::nds::instructions::types::JunctionViewContent()),
        m_intersectionId_(allocator),
        m_backgroundId_(::zserio::NullOpt),
        m_signboardId_(::zserio::NullOpt),
        m_arrowId_(::zserio::NullOpt),
        m_signboardArrowId_(::zserio::NullOpt)
{
}

JunctionViewScene::JunctionViewScene(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_intersectionId_(readIntersectionId(in, allocator)),
        m_backgroundId_(readBackgroundId(in, allocator)),
        m_signboardId_(readSignboardId(in, allocator)),
        m_arrowId_(readArrowId(in, allocator)),
        m_signboardArrowId_(readSignboardArrowId(in, allocator))
{
}

JunctionViewScene::JunctionViewScene(JunctionViewScene::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_intersectionId_(readIntersectionId(context, in, allocator)),
        m_backgroundId_(readBackgroundId(context, in, allocator)),
        m_signboardId_(readSignboardId(context, in, allocator)),
        m_arrowId_(readArrowId(context, in, allocator)),
        m_signboardArrowId_(readSignboardArrowId(context, in, allocator))
{
}

JunctionViewScene::JunctionViewScene(::zserio::PropagateAllocatorT,
        const JunctionViewScene& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_intersectionId_(::zserio::allocatorPropagatingCopy(other.m_intersectionId_, allocator)),
        m_backgroundId_(::zserio::allocatorPropagatingCopy(other.m_backgroundId_, allocator)),
        m_signboardId_(::zserio::allocatorPropagatingCopy(other.m_signboardId_, allocator)),
        m_arrowId_(::zserio::allocatorPropagatingCopy(other.m_arrowId_, allocator)),
        m_signboardArrowId_(::zserio::allocatorPropagatingCopy(other.m_signboardArrowId_, allocator))
{
}

::nds::instructions::types::JunctionViewContent JunctionViewScene::getContent() const
{
    return m_content_;
}

void JunctionViewScene::setContent(::nds::instructions::types::JunctionViewContent content_)
{
    m_content_ = content_;
}

::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getIntersectionId()
{
    return m_intersectionId_.getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getIntersectionId() const
{
    return m_intersectionId_.getRawArray();
}

void JunctionViewScene::setIntersectionId(const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& intersectionId_)
{
    m_intersectionId_ = ZserioArrayType_intersectionId(intersectionId_);
}

void JunctionViewScene::setIntersectionId(::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>&& intersectionId_)
{
    m_intersectionId_ = ZserioArrayType_intersectionId(std::move(intersectionId_));
}

::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getBackgroundId()
{
    return m_backgroundId_.value().getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getBackgroundId() const
{
    return m_backgroundId_.value().getRawArray();
}

void JunctionViewScene::setBackgroundId(const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& backgroundId_)
{
    m_backgroundId_ = ZserioArrayType_backgroundId(backgroundId_);
}

void JunctionViewScene::setBackgroundId(::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>&& backgroundId_)
{
    m_backgroundId_ = ZserioArrayType_backgroundId(std::move(backgroundId_));
}

bool JunctionViewScene::isBackgroundIdUsed() const
{
    return ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND);
}

bool JunctionViewScene::isBackgroundIdSet() const
{
    return m_backgroundId_.hasValue();
}

void JunctionViewScene::resetBackgroundId()
{
    m_backgroundId_.reset();
}

::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getSignboardId()
{
    return m_signboardId_.value().getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getSignboardId() const
{
    return m_signboardId_.value().getRawArray();
}

void JunctionViewScene::setSignboardId(const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& signboardId_)
{
    m_signboardId_ = ZserioArrayType_signboardId(signboardId_);
}

void JunctionViewScene::setSignboardId(::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>&& signboardId_)
{
    m_signboardId_ = ZserioArrayType_signboardId(std::move(signboardId_));
}

bool JunctionViewScene::isSignboardIdUsed() const
{
    return ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD);
}

bool JunctionViewScene::isSignboardIdSet() const
{
    return m_signboardId_.hasValue();
}

void JunctionViewScene::resetSignboardId()
{
    m_signboardId_.reset();
}

::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getArrowId()
{
    return m_arrowId_.value().getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getArrowId() const
{
    return m_arrowId_.value().getRawArray();
}

void JunctionViewScene::setArrowId(const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& arrowId_)
{
    m_arrowId_ = ZserioArrayType_arrowId(arrowId_);
}

void JunctionViewScene::setArrowId(::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>&& arrowId_)
{
    m_arrowId_ = ZserioArrayType_arrowId(std::move(arrowId_));
}

bool JunctionViewScene::isArrowIdUsed() const
{
    return ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW);
}

bool JunctionViewScene::isArrowIdSet() const
{
    return m_arrowId_.hasValue();
}

void JunctionViewScene::resetArrowId()
{
    m_arrowId_.reset();
}

::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getSignboardArrowId()
{
    return m_signboardArrowId_.value().getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& JunctionViewScene::getSignboardArrowId() const
{
    return m_signboardArrowId_.value().getRawArray();
}

void JunctionViewScene::setSignboardArrowId(const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>& signboardArrowId_)
{
    m_signboardArrowId_ = ZserioArrayType_signboardArrowId(signboardArrowId_);
}

void JunctionViewScene::setSignboardArrowId(::zserio::vector<::nds::instructions::types::JunctionViewImageSetReference>&& signboardArrowId_)
{
    m_signboardArrowId_ = ZserioArrayType_signboardArrowId(std::move(signboardArrowId_));
}

bool JunctionViewScene::isSignboardArrowIdUsed() const
{
    return ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW);
}

bool JunctionViewScene::isSignboardArrowIdSet() const
{
    return m_signboardArrowId_.hasValue();
}

void JunctionViewScene::resetSignboardArrowId()
{
    m_signboardArrowId_.reset();
}

void JunctionViewScene::initPackingContext(JunctionViewScene::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
}

size_t JunctionViewScene::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += m_intersectionId_.bitSizeOfPacked(endBitPosition);
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND)
    {
        endBitPosition += m_backgroundId_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD)
    {
        endBitPosition += m_signboardId_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW)
    {
        endBitPosition += m_arrowId_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW)
    {
        endBitPosition += m_signboardArrowId_.value().bitSizeOfPacked(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t JunctionViewScene::bitSizeOf(JunctionViewScene::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += m_intersectionId_.bitSizeOfPacked(endBitPosition);
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND)
    {
        endBitPosition += m_backgroundId_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD)
    {
        endBitPosition += m_signboardId_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW)
    {
        endBitPosition += m_arrowId_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW)
    {
        endBitPosition += m_signboardArrowId_.value().bitSizeOfPacked(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t JunctionViewScene::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition = m_intersectionId_.initializeOffsetsPacked(endBitPosition);
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND)
    {
        endBitPosition = m_backgroundId_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD)
    {
        endBitPosition = m_signboardId_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW)
    {
        endBitPosition = m_arrowId_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW)
    {
        endBitPosition = m_signboardArrowId_.value().initializeOffsetsPacked(endBitPosition);
    }

    return endBitPosition;
}

size_t JunctionViewScene::initializeOffsets(JunctionViewScene::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition = m_intersectionId_.initializeOffsetsPacked(endBitPosition);
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND)
    {
        endBitPosition = m_backgroundId_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD)
    {
        endBitPosition = m_signboardId_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW)
    {
        endBitPosition = m_arrowId_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW)
    {
        endBitPosition = m_signboardArrowId_.value().initializeOffsetsPacked(endBitPosition);
    }

    return endBitPosition;
}

bool JunctionViewScene::operator==(const JunctionViewScene& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_intersectionId_ == other.m_intersectionId_) &&
                (!isBackgroundIdUsed() ? !other.isBackgroundIdUsed() : (m_backgroundId_ == other.m_backgroundId_)) &&
                (!isSignboardIdUsed() ? !other.isSignboardIdUsed() : (m_signboardId_ == other.m_signboardId_)) &&
                (!isArrowIdUsed() ? !other.isArrowIdUsed() : (m_arrowId_ == other.m_arrowId_)) &&
                (!isSignboardArrowIdUsed() ? !other.isSignboardArrowIdUsed() : (m_signboardArrowId_ == other.m_signboardArrowId_));
    }

    return true;
}

uint32_t JunctionViewScene::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_intersectionId_);
    if (isBackgroundIdUsed())
        result = ::zserio::calcHashCode(result, m_backgroundId_);
    if (isSignboardIdUsed())
        result = ::zserio::calcHashCode(result, m_signboardId_);
    if (isArrowIdUsed())
        result = ::zserio::calcHashCode(result, m_arrowId_);
    if (isSignboardArrowIdUsed())
        result = ::zserio::calcHashCode(result, m_signboardArrowId_);

    return result;
}

void JunctionViewScene::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    m_intersectionId_.writePacked(out);
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND)
    {
        m_backgroundId_.value().writePacked(out);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD)
    {
        m_signboardId_.value().writePacked(out);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW)
    {
        m_arrowId_.value().writePacked(out);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW)
    {
        m_signboardArrowId_.value().writePacked(out);
    }
}

void JunctionViewScene::write(JunctionViewScene::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    m_intersectionId_.writePacked(out);
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND)
    {
        m_backgroundId_.value().writePacked(out);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD)
    {
        m_signboardId_.value().writePacked(out);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW)
    {
        m_arrowId_.value().writePacked(out);
    }
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW)
    {
        m_signboardArrowId_.value().writePacked(out);
    }
}

::nds::instructions::types::JunctionViewContent JunctionViewScene::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::instructions::types::JunctionViewContent(in);
}

::nds::instructions::types::JunctionViewContent JunctionViewScene::readContent(JunctionViewScene::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::instructions::types::JunctionViewContent(context.getContent(), in);
}
JunctionViewScene::ZserioArrayType_intersectionId JunctionViewScene::readIntersectionId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_intersectionId readField(allocator);
    readField.readPacked(in);

    return readField;
}

JunctionViewScene::ZserioArrayType_intersectionId JunctionViewScene::readIntersectionId(JunctionViewScene::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_intersectionId readField(allocator);
    readField.readPacked(in);

    return readField;
}
::zserio::InplaceOptionalHolder<JunctionViewScene::ZserioArrayType_backgroundId> JunctionViewScene::readBackgroundId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND)
    {
        ZserioArrayType_backgroundId readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_backgroundId>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_backgroundId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<JunctionViewScene::ZserioArrayType_backgroundId> JunctionViewScene::readBackgroundId(JunctionViewScene::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND) == ::nds::instructions::types::JunctionViewContent::Values::BACKGROUND)
    {
        ZserioArrayType_backgroundId readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_backgroundId>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_backgroundId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<JunctionViewScene::ZserioArrayType_signboardId> JunctionViewScene::readSignboardId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD)
    {
        ZserioArrayType_signboardId readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_signboardId>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_signboardId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<JunctionViewScene::ZserioArrayType_signboardId> JunctionViewScene::readSignboardId(JunctionViewScene::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD)
    {
        ZserioArrayType_signboardId readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_signboardId>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_signboardId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<JunctionViewScene::ZserioArrayType_arrowId> JunctionViewScene::readArrowId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW)
    {
        ZserioArrayType_arrowId readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_arrowId>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_arrowId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<JunctionViewScene::ZserioArrayType_arrowId> JunctionViewScene::readArrowId(JunctionViewScene::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::ARROW) == ::nds::instructions::types::JunctionViewContent::Values::ARROW)
    {
        ZserioArrayType_arrowId readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_arrowId>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_arrowId>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<JunctionViewScene::ZserioArrayType_signboardArrowId> JunctionViewScene::readSignboardArrowId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW)
    {
        ZserioArrayType_signboardArrowId readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_signboardArrowId>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_signboardArrowId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<JunctionViewScene::ZserioArrayType_signboardArrowId> JunctionViewScene::readSignboardArrowId(JunctionViewScene::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW) == ::nds::instructions::types::JunctionViewContent::Values::SIGNBOARD_ARROW)
    {
        ZserioArrayType_signboardArrowId readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_signboardArrowId>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_signboardArrowId>(::zserio::NullOpt);
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/instructions/types/JunctionViewImageList.h>

namespace nds
{
namespace instructions
{
namespace types
{

JunctionViewImageList::JunctionViewImageList(const allocator_type& allocator) noexcept :
        m_imageFormat_(::nds::instructions::types::JunctionViewImageFormat()),
        m_numImages_(uint32_t()),
        m_setId_(allocator),
        m_usageType_(allocator),
        m_ratio_(allocator),
        m_imageData_(allocator)
{
}

JunctionViewImageList::JunctionViewImageList(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_imageFormat_(readImageFormat(in)),
        m_numImages_(readNumImages(in)),
        m_setId_(readSetId(in, allocator)),
        m_usageType_(readUsageType(in, allocator)),
        m_ratio_(readRatio(in, allocator)),
        m_imageData_(readImageData(in, allocator))
{
}

JunctionViewImageList::JunctionViewImageList(JunctionViewImageList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_imageFormat_(readImageFormat(context, in)),
        m_numImages_(readNumImages(context, in)),
        m_setId_(readSetId(context, in, allocator)),
        m_usageType_(readUsageType(context, in, allocator)),
        m_ratio_(readRatio(context, in, allocator)),
        m_imageData_(readImageData(in, allocator))
{
}

JunctionViewImageList::JunctionViewImageList(::zserio::PropagateAllocatorT,
        const JunctionViewImageList& other, const allocator_type& allocator) :
        m_imageFormat_(::zserio::allocatorPropagatingCopy(other.m_imageFormat_, allocator)),
        m_numImages_(::zserio::allocatorPropagatingCopy(other.m_numImages_, allocator)),
        m_setId_(::zserio::allocatorPropagatingCopy(other.m_setId_, allocator)),
        m_usageType_(::zserio::allocatorPropagatingCopy(other.m_usageType_, allocator)),
        m_ratio_(::zserio::allocatorPropagatingCopy(other.m_ratio_, allocator)),
        m_imageData_(::zserio::allocatorPropagatingCopy(other.m_imageData_, allocator))
{
}

::nds::instructions::types::JunctionViewImageFormat JunctionViewImageList::getImageFormat() const
{
    return m_imageFormat_;
}

void JunctionViewImageList::setImageFormat(::nds::instructions::types::JunctionViewImageFormat imageFormat_)
{
    m_imageFormat_ = imageFormat_;
}

uint32_t JunctionViewImageList::getNumImages() const
{
    return m_numImages_;
}

void JunctionViewImageList::setNumImages(uint32_t numImages_)
{
    m_numImages_ = numImages_;
}

::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>& JunctionViewImageList::getSetId()
{
    return m_setId_.getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>& JunctionViewImageList::getSetId() const
{
    return m_setId_.getRawArray();
}

void JunctionViewImageList::setSetId(const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>& setId_)
{
    m_setId_ = ZserioArrayType_setId(setId_);
}

void JunctionViewImageList::setSetId(::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>&& setId_)
{
    m_setId_ = ZserioArrayType_setId(std::move(setId_));
}

::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>& JunctionViewImageList::getUsageType()
{
    return m_usageType_.getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>& JunctionViewImageList::getUsageType() const
{
    return m_usageType_.getRawArray();
}

void JunctionViewImageList::setUsageType(const ::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>& usageType_)
{
    m_usageType_ = ZserioArrayType_usageType(usageType_);
}

void JunctionViewImageList::setUsageType(::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>&& usageType_)
{
    m_usageType_ = ZserioArrayType_usageType(std::move(usageType_));
}

::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& JunctionViewImageList::getRatio()
{
    return m_ratio_.getRawArray();
}

const ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& JunctionViewImageList::getRatio() const
{
    return m_ratio_.getRawArray();
}

void JunctionViewImageList::setRatio(const ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& ratio_)
{
    m_ratio_ = ZserioArrayType_ratio(ratio_);
}

void JunctionViewImageList::setRatio(::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>&& ratio_)
{
    m_ratio_ = ZserioArrayType_ratio(std::move(ratio_));
}

::zserio::vector<::zserio::BitBuffer>& JunctionViewImageList::getImageData()
{
    return m_imageData_.getRawArray();
}

const ::zserio::vector<::zserio::BitBuffer>& JunctionViewImageList::getImageData() const
{
    return m_imageData_.getRawArray();
}

void JunctionViewImageList::setImageData(const ::zserio::vector<::zserio::BitBuffer>& imageData_)
{
    m_imageData_ = ZserioArrayType_imageData(imageData_);
}

void JunctionViewImageList::setImageData(::zserio::vector<::zserio::BitBuffer>&& imageData_)
{
    m_imageData_ = ZserioArrayType_imageData(std::move(imageData_));
}

void JunctionViewImageList::initPackingContext(JunctionViewImageList::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getImageFormat(), m_imageFormat_);
    context.getNumImages().init<::zserio::VarSizeArrayTraits>(m_numImages_);
}

size_t JunctionViewImageList::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_imageFormat_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numImages_);
    endBitPosition += m_setId_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_usageType_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_ratio_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_imageData_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t JunctionViewImageList::bitSizeOf(JunctionViewImageList::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getImageFormat(), m_imageFormat_);
    endBitPosition += context.getNumImages().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numImages_);
    endBitPosition += m_setId_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_usageType_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_ratio_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_imageData_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t JunctionViewImageList::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_imageFormat_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numImages_);
    endBitPosition = m_setId_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_usageType_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_ratio_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_imageData_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t JunctionViewImageList::initializeOffsets(JunctionViewImageList::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getImageFormat(), endBitPosition,
        m_imageFormat_);
    endBitPosition += context.getNumImages().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numImages_);
    endBitPosition = m_setId_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_usageType_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_ratio_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_imageData_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

bool JunctionViewImageList::operator==(const JunctionViewImageList& other) const
{
    if (this != &other)
    {
        return
                (m_imageFormat_ == other.m_imageFormat_) &&
                (m_numImages_ == other.m_numImages_) &&
                (m_setId_ == other.m_setId_) &&
                (m_usageType_ == other.m_usageType_) &&
                (m_ratio_ == other.m_ratio_) &&
                (m_imageData_ == other.m_imageData_);
    }

    return true;
}

uint32_t JunctionViewImageList::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_imageFormat_);
    result = ::zserio::calcHashCode(result, m_numImages_);
    result = ::zserio::calcHashCode(result, m_setId_);
    result = ::zserio::calcHashCode(result, m_usageType_);
    result = ::zserio::calcHashCode(result, m_ratio_);
    result = ::zserio::calcHashCode(result, m_imageData_);

    return result;
}

void JunctionViewImageList::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_imageFormat_);

    out.writeVarSize(m_numImages_);

    // check array length
    if (m_setId_.getRawArray().size() != static_cast<size_t>(getNumImages()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionViewImageList.setId: ") <<
                m_setId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumImages()) << "!";
    }
    m_setId_.writePacked(out);

    // check array length
    if (m_usageType_.getRawArray().size() != static_cast<size_t>(getNumImages()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionViewImageList.usageType: ") <<
                m_usageType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumImages()) << "!";
    }
    m_usageType_.writePacked(out);

    // check array length
    if (m_ratio_.getRawArray().size() != static_cast<size_t>(getNumImages()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionViewImageList.ratio: ") <<
                m_ratio_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumImages()) << "!";
    }
    m_ratio_.writePacked(*this, out);

    // check array length
    if (m_imageData_.getRawArray().size() != static_cast<size_t>(getNumImages()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionViewImageList.imageData: ") <<
                m_imageData_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumImages()) << "!";
    }
    m_imageData_.write(out);
}

void JunctionViewImageList::write(JunctionViewImageList::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getImageFormat(), out, m_imageFormat_);

    context.getNumImages().write<::zserio::VarSizeArrayTraits>(out, m_numImages_);

    // check array length
    if (m_setId_.getRawArray().size() != static_cast<size_t>(getNumImages()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionViewImageList.setId: ") <<
                m_setId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumImages()) << "!";
    }
    m_setId_.writePacked(out);

    // check array length
    if (m_usageType_.getRawArray().size() != static_cast<size_t>(getNumImages()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionViewImageList.usageType: ") <<
                m_usageType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumImages()) << "!";
    }
    m_usageType_.writePacked(out);

    // check array length
    if (m_ratio_.getRawArray().size() != static_cast<size_t>(getNumImages()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionViewImageList.ratio: ") <<
                m_ratio_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumImages()) << "!";
    }
    m_ratio_.writePacked(*this, out);

    // check array length
    if (m_imageData_.getRawArray().size() != static_cast<size_t>(getNumImages()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field JunctionViewImageList.imageData: ") <<
                m_imageData_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumImages()) << "!";
    }
    m_imageData_.write(out);
}

void JunctionViewImageList::ZserioElementFactory_ratio::create(JunctionViewImageList&        ,
        ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void JunctionViewImageList::ZserioElementFactory_ratio::create(JunctionViewImageList&        ,
        ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& array,
        ::nds::instructions::types::JunctionViewImageRatio::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::instructions::types::JunctionViewImageFormat JunctionViewImageList::readImageFormat(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::instructions::types::JunctionViewImageFormat>(in);
}

::nds::instructions::types::JunctionViewImageFormat JunctionViewImageList::readImageFormat(JunctionViewImageList::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::instructions::types::JunctionViewImageFormat>(context.getImageFormat(), in);
}
uint32_t JunctionViewImageList::readNumImages(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t JunctionViewImageList::readNumImages(JunctionViewImageList::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumImages().read<::zserio::VarSizeArrayTraits>(in);
}
JunctionViewImageList::ZserioArrayType_setId JunctionViewImageList::readSetId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_setId readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumImages()));

    return readField;
}

JunctionViewImageList::ZserioArrayType_setId JunctionViewImageList::readSetId(JunctionViewImageList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_setId readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumImages()));

    return readField;
}
JunctionViewImageList::ZserioArrayType_usageType JunctionViewImageList::readUsageType(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_usageType readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumImages()));

    return readField;
}

JunctionViewImageList::ZserioArrayType_usageType JunctionViewImageList::readUsageType(JunctionViewImageList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_usageType readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumImages()));

    return readField;
}
JunctionViewImageList::ZserioArrayType_ratio JunctionViewImageList::readRatio(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_ratio readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumImages()));

    return readField;
}

JunctionViewImageList::ZserioArrayType_ratio JunctionViewImageList::readRatio(JunctionViewImageList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_ratio readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumImages()));

    return readField;
}
JunctionViewImageList::ZserioArrayType_imageData JunctionViewImageList::readImageData(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_imageData readField(allocator);
    readField.read(in, static_cast<size_t>(getNumImages()));

    return readField;
}

} // namespace types
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/instructions/types/JunctionViewImageRatio.h>

namespace nds
{
namespace instructions
{
namespace types
{

JunctionViewImageRatio::JunctionViewImageRatio(const allocator_type&) noexcept :
        m_width_(::nds::core::icons::NumPixels()),
        m_height_(::nds::core::icons::NumPixels())
{
}

JunctionViewImageRatio::JunctionViewImageRatio(::zserio::BitStreamReader& in, const allocator_type&) :
        m_width_(readWidth(in)),
        m_height_(readHeight(in))
{
}

JunctionViewImageRatio::JunctionViewImageRatio(JunctionViewImageRatio::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_width_(readWidth(context, in)),
        m_height_(readHeight(context, in))
{
}

JunctionViewImageRatio::JunctionViewImageRatio(::zserio::PropagateAllocatorT,
        const JunctionViewImageRatio& other, const allocator_type& allocator) :
        m_width_(::zserio::allocatorPropagatingCopy(other.m_width_, allocator)),
        m_height_(::zserio::allocatorPropagatingCopy(other.m_height_, allocator))
{
}

::nds::core::icons::NumPixels JunctionViewImageRatio::getWidth() const
{
    return m_width_;
}

void JunctionViewImageRatio::setWidth(::nds::core::icons::NumPixels width_)
{
    m_width_ = width_;
}

::nds::core::icons::NumPixels JunctionViewImageRatio::getHeight() const
{
    return m_height_;
}

void JunctionViewImageRatio::setHeight(::nds::core::icons::NumPixels height_)
{
    m_height_ = height_;
}

void JunctionViewImageRatio::initPackingContext(JunctionViewImageRatio::ZserioPackingContext& context) const
{
    context.getWidth().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_width_);
    context.getHeight().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_height_);
}

size_t JunctionViewImageRatio::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarInt32(m_width_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_height_);

    return endBitPosition - bitPosition;
}

size_t JunctionViewImageRatio::bitSizeOf(JunctionViewImageRatio::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_width_);
    endBitPosition += context.getHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_height_);

    return endBitPosition - bitPosition;
}

size_t JunctionViewImageRatio::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarInt32(m_width_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_height_);

    return endBitPosition;
}

size_t JunctionViewImageRatio::initializeOffsets(JunctionViewImageRatio::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_width_);
    endBitPosition += context.getHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_height_);

    return endBitPosition;
}

bool JunctionViewImageRatio::operator==(const JunctionViewImageRatio& other) const
{
    if (this != &other)
    {
        return
                (m_width_ == other.m_width_) &&
                (m_height_ == other.m_height_);
    }

    return true;
}

uint32_t JunctionViewImageRatio::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_width_);
    result = ::zserio::calcHashCode(result, m_height_);

    return result;
}

void JunctionViewImageRatio::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarInt32(m_width_);
    out.writeVarInt32(m_height_);
}

void JunctionViewImageRatio::write(JunctionViewImageRatio::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getWidth().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_width_);
    context.getHeight().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_height_);
}

::nds::core::icons::NumPixels JunctionViewImageRatio::readWidth(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels JunctionViewImageRatio::readWidth(JunctionViewImageRatio::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getWidth().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}
::nds::core::icons::NumPixels JunctionViewImageRatio::readHeight(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels JunctionViewImageRatio::readHeight(JunctionViewImageRatio::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getHeight().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}

} // namespace types
} // namespace instructions
} // namespace nds
