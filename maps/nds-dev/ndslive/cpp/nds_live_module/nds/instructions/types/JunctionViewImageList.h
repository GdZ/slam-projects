/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_TYPES_JUNCTION_VIEW_IMAGE_LIST_H
#define NDS_INSTRUCTIONS_TYPES_JUNCTION_VIEW_IMAGE_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/instructions/types/JunctionViewImageFormat.h>
#include <nds/instructions/types/JunctionViewImageRatio.h>
#include <nds/instructions/types/JunctionViewImageSetId.h>
#include <nds/instructions/types/JunctionViewImageUsageType.h>

namespace nds
{
namespace instructions
{
namespace types
{

class JunctionViewImageList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getImageFormat()
        {
            return m_imageFormat_;
        }

        ::zserio::DeltaContext& getNumImages()
        {
            return m_numImages_;
        }

    private:
        ::zserio::DeltaContext m_imageFormat_;
        ::zserio::DeltaContext m_numImages_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    JunctionViewImageList() noexcept :
            JunctionViewImageList(allocator_type())
    {}

    explicit JunctionViewImageList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_setId = ::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>,
            typename ZSERIO_T_usageType = ::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>,
            typename ZSERIO_T_ratio = ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>,
            typename ZSERIO_T_imageData = ::zserio::vector<::zserio::BitBuffer>>
    JunctionViewImageList(
            ::nds::instructions::types::JunctionViewImageFormat imageFormat_,
            uint32_t numImages_,
            ZSERIO_T_setId&& setId_,
            ZSERIO_T_usageType&& usageType_,
            ZSERIO_T_ratio&& ratio_,
            ZSERIO_T_imageData&& imageData_,
            const allocator_type& allocator = allocator_type()) :
            JunctionViewImageList(allocator)
    {
        m_imageFormat_ = imageFormat_;
        m_numImages_ = numImages_;
        m_setId_ = ZserioArrayType_setId(::std::forward<ZSERIO_T_setId>(setId_));
        m_usageType_ = ZserioArrayType_usageType(::std::forward<ZSERIO_T_usageType>(usageType_));
        m_ratio_ = ZserioArrayType_ratio(::std::forward<ZSERIO_T_ratio>(ratio_));
        m_imageData_ = ZserioArrayType_imageData(::std::forward<ZSERIO_T_imageData>(imageData_));
    }

    explicit JunctionViewImageList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit JunctionViewImageList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~JunctionViewImageList() = default;

    JunctionViewImageList(const JunctionViewImageList&) = default;
    JunctionViewImageList& operator=(const JunctionViewImageList&) = default;

    JunctionViewImageList(JunctionViewImageList&&) = default;
    JunctionViewImageList& operator=(JunctionViewImageList&&) = default;

    JunctionViewImageList(::zserio::PropagateAllocatorT,
            const JunctionViewImageList& other, const allocator_type& allocator);

    ::nds::instructions::types::JunctionViewImageFormat getImageFormat() const;
    void setImageFormat(::nds::instructions::types::JunctionViewImageFormat imageFormat_);

    uint32_t getNumImages() const;
    void setNumImages(uint32_t numImages_);

    const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>& getSetId() const;
    ::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>& getSetId();
    void setSetId(const ::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>& setId_);
    void setSetId(::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>&& setId_);

    const ::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>& getUsageType() const;
    ::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>& getUsageType();
    void setUsageType(const ::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>& usageType_);
    void setUsageType(::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>&& usageType_);

    const ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& getRatio() const;
    ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& getRatio();
    void setRatio(const ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& ratio_);
    void setRatio(::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>&& ratio_);

    const ::zserio::vector<::zserio::BitBuffer>& getImageData() const;
    ::zserio::vector<::zserio::BitBuffer>& getImageData();
    void setImageData(const ::zserio::vector<::zserio::BitBuffer>& imageData_);
    void setImageData(::zserio::vector<::zserio::BitBuffer>&& imageData_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const JunctionViewImageList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_ratio
    {
    public:
        using OwnerType = JunctionViewImageList;

        static void create(JunctionViewImageList& owner,
                ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(JunctionViewImageList& owner,
                ::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>& array,
                ::nds::instructions::types::JunctionViewImageRatio::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_setId = ::zserio::Array<::zserio::vector<::nds::instructions::types::JunctionViewImageSetId>, ::zserio::VarIntArrayTraits<::nds::instructions::types::JunctionViewImageSetId>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_usageType = ::zserio::Array<::zserio::vector<::nds::instructions::types::JunctionViewImageUsageType>, ::zserio::BitmaskArrayTraits<::nds::instructions::types::JunctionViewImageUsageType>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_ratio = ::zserio::Array<::zserio::vector<::nds::instructions::types::JunctionViewImageRatio>, ::zserio::ObjectArrayTraits<::nds::instructions::types::JunctionViewImageRatio, ZserioElementFactory_ratio>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_imageData = ::zserio::Array<::zserio::vector<::zserio::BitBuffer>, ::zserio::BitBufferArrayTraits, ::zserio::ArrayType::NORMAL>;

    ::nds::instructions::types::JunctionViewImageFormat readImageFormat(::zserio::BitStreamReader& in);
    ::nds::instructions::types::JunctionViewImageFormat readImageFormat(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint32_t readNumImages(::zserio::BitStreamReader& in);
    uint32_t readNumImages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_setId readSetId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_setId readSetId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_usageType readUsageType(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_usageType readUsageType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_ratio readRatio(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_ratio readRatio(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_imageData readImageData(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::instructions::types::JunctionViewImageFormat m_imageFormat_;
    uint32_t m_numImages_;
    ZserioArrayType_setId m_setId_;
    ZserioArrayType_usageType m_usageType_;
    ZserioArrayType_ratio m_ratio_;
    ZserioArrayType_imageData m_imageData_;
};

} // namespace types
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_TYPES_JUNCTION_VIEW_IMAGE_LIST_H
