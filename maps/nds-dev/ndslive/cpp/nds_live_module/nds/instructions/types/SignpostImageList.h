/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_TYPES_SIGNPOST_IMAGE_LIST_H
#define NDS_INSTRUCTIONS_TYPES_SIGNPOST_IMAGE_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/icons/IconImage.h>
#include <nds/instructions/types/SignpostImageId.h>

namespace nds
{
namespace instructions
{
namespace types
{

class SignpostImageList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumSignposts()
        {
            return m_numSignposts_;
        }

    private:
        ::zserio::DeltaContext m_numSignposts_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SignpostImageList() noexcept :
            SignpostImageList(allocator_type())
    {}

    explicit SignpostImageList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_ids = ::zserio::vector<::nds::instructions::types::SignpostImageId>,
            typename ZSERIO_T_signpost = ::zserio::vector<::nds::core::icons::IconImage>>
    SignpostImageList(
            uint32_t numSignposts_,
            ZSERIO_T_ids&& ids_,
            ZSERIO_T_signpost&& signpost_,
            const allocator_type& allocator = allocator_type()) :
            SignpostImageList(allocator)
    {
        m_numSignposts_ = numSignposts_;
        m_ids_ = ZserioArrayType_ids(::std::forward<ZSERIO_T_ids>(ids_));
        m_signpost_ = ZserioArrayType_signpost(::std::forward<ZSERIO_T_signpost>(signpost_));
    }

    explicit SignpostImageList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SignpostImageList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SignpostImageList() = default;

    SignpostImageList(const SignpostImageList&) = default;
    SignpostImageList& operator=(const SignpostImageList&) = default;

    SignpostImageList(SignpostImageList&&) = default;
    SignpostImageList& operator=(SignpostImageList&&) = default;

    SignpostImageList(::zserio::PropagateAllocatorT,
            const SignpostImageList& other, const allocator_type& allocator);

    uint32_t getNumSignposts() const;
    void setNumSignposts(uint32_t numSignposts_);

    const ::zserio::vector<::nds::instructions::types::SignpostImageId>& getIds() const;
    ::zserio::vector<::nds::instructions::types::SignpostImageId>& getIds();
    void setIds(const ::zserio::vector<::nds::instructions::types::SignpostImageId>& ids_);
    void setIds(::zserio::vector<::nds::instructions::types::SignpostImageId>&& ids_);

    const ::zserio::vector<::nds::core::icons::IconImage>& getSignpost() const;
    ::zserio::vector<::nds::core::icons::IconImage>& getSignpost();
    void setSignpost(const ::zserio::vector<::nds::core::icons::IconImage>& signpost_);
    void setSignpost(::zserio::vector<::nds::core::icons::IconImage>&& signpost_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SignpostImageList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_signpost
    {
    public:
        using OwnerType = SignpostImageList;

        static void create(SignpostImageList& owner,
                ::zserio::vector<::nds::core::icons::IconImage>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(SignpostImageList& owner,
                ::zserio::vector<::nds::core::icons::IconImage>& array,
                ::nds::core::icons::IconImage::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_ids = ::zserio::Array<::zserio::vector<::nds::instructions::types::SignpostImageId>, ::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostImageId>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_signpost = ::zserio::Array<::zserio::vector<::nds::core::icons::IconImage>, ::zserio::ObjectArrayTraits<::nds::core::icons::IconImage, ZserioElementFactory_signpost>, ::zserio::ArrayType::NORMAL>;

    uint32_t readNumSignposts(::zserio::BitStreamReader& in);
    uint32_t readNumSignposts(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_ids readIds(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_ids readIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_signpost readSignpost(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_signpost readSignpost(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint32_t m_numSignposts_;
    ZserioArrayType_ids m_ids_;
    ZserioArrayType_signpost m_signpost_;
};

} // namespace types
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_TYPES_SIGNPOST_IMAGE_LIST_H
