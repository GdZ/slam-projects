/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_TYPES_JUNCTION_VIEW_IMAGE_RATIO_H
#define NDS_INSTRUCTIONS_TYPES_JUNCTION_VIEW_IMAGE_RATIO_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/icons/NumPixels.h>

namespace nds
{
namespace instructions
{
namespace types
{

class JunctionViewImageRatio
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getWidth()
        {
            return m_width_;
        }

        ::zserio::DeltaContext& getHeight()
        {
            return m_height_;
        }

    private:
        ::zserio::DeltaContext m_width_;
        ::zserio::DeltaContext m_height_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    JunctionViewImageRatio() noexcept :
            JunctionViewImageRatio(allocator_type())
    {}

    explicit JunctionViewImageRatio(const allocator_type& allocator) noexcept;

    JunctionViewImageRatio(
            ::nds::core::icons::NumPixels width_,
            ::nds::core::icons::NumPixels height_,
            const allocator_type& allocator = allocator_type()) :
            JunctionViewImageRatio(allocator)
    {
        m_width_ = width_;
        m_height_ = height_;
    }

    explicit JunctionViewImageRatio(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit JunctionViewImageRatio(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~JunctionViewImageRatio() = default;

    JunctionViewImageRatio(const JunctionViewImageRatio&) = default;
    JunctionViewImageRatio& operator=(const JunctionViewImageRatio&) = default;

    JunctionViewImageRatio(JunctionViewImageRatio&&) = default;
    JunctionViewImageRatio& operator=(JunctionViewImageRatio&&) = default;

    JunctionViewImageRatio(::zserio::PropagateAllocatorT,
            const JunctionViewImageRatio& other, const allocator_type& allocator);

    ::nds::core::icons::NumPixels getWidth() const;
    void setWidth(::nds::core::icons::NumPixels width_);

    ::nds::core::icons::NumPixels getHeight() const;
    void setHeight(::nds::core::icons::NumPixels height_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const JunctionViewImageRatio& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::icons::NumPixels readWidth(::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readWidth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readHeight(::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readHeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::icons::NumPixels m_width_;
    ::nds::core::icons::NumPixels m_height_;
};

} // namespace types
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_TYPES_JUNCTION_VIEW_IMAGE_RATIO_H
