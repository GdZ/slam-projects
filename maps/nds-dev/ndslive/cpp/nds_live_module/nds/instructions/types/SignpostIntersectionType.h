/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_TYPES_SIGNPOST_INTERSECTION_TYPE_H
#define NDS_INSTRUCTIONS_TYPES_SIGNPOST_INTERSECTION_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace instructions
{
namespace types
{

enum class SignpostIntersectionType : uint8_t
{
    STANDARD = UINT8_C(0),
    INTERCHANGE = UINT8_C(1),
    EXIT = UINT8_C(2),
    INTERCHANGE_AND_EXIT = UINT8_C(3)
};

} // namespace types
} // namespace instructions
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for SignpostIntersectionType enumeration.
template <>
struct EnumTraits<::nds::instructions::types::SignpostIntersectionType>
{
    static constexpr ::std::array<const char*, 4> names =
    {{
        "STANDARD",
        "INTERCHANGE",
        "EXIT",
        "INTERCHANGE_AND_EXIT"
    }};

    static constexpr ::std::array<::nds::instructions::types::SignpostIntersectionType, 4> values =
    {{
        ::nds::instructions::types::SignpostIntersectionType::STANDARD,
        ::nds::instructions::types::SignpostIntersectionType::INTERCHANGE,
        ::nds::instructions::types::SignpostIntersectionType::EXIT,
        ::nds::instructions::types::SignpostIntersectionType::INTERCHANGE_AND_EXIT
    }};

    static constexpr const char* enumName = "SignpostIntersectionType";
};

template <>
size_t enumToOrdinal<::nds::instructions::types::SignpostIntersectionType>(::nds::instructions::types::SignpostIntersectionType value);

template <>
::nds::instructions::types::SignpostIntersectionType valueToEnum<::nds::instructions::types::SignpostIntersectionType>(
        typename ::std::underlying_type<::nds::instructions::types::SignpostIntersectionType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::instructions::types::SignpostIntersectionType>(::nds::instructions::types::SignpostIntersectionType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::instructions::types::SignpostIntersectionType>(::zserio::DeltaContext& context, ::nds::instructions::types::SignpostIntersectionType value);

template <>
size_t bitSizeOf<::nds::instructions::types::SignpostIntersectionType>(::nds::instructions::types::SignpostIntersectionType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::instructions::types::SignpostIntersectionType>(::zserio::DeltaContext& context, ::nds::instructions::types::SignpostIntersectionType value);

template <>
size_t initializeOffsets<::nds::instructions::types::SignpostIntersectionType>(size_t bitPosition, ::nds::instructions::types::SignpostIntersectionType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::instructions::types::SignpostIntersectionType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::instructions::types::SignpostIntersectionType value);

template <>
::nds::instructions::types::SignpostIntersectionType read<::nds::instructions::types::SignpostIntersectionType>(::zserio::BitStreamReader& in);

template <>
::nds::instructions::types::SignpostIntersectionType read<::nds::instructions::types::SignpostIntersectionType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::instructions::types::SignpostIntersectionType>(::zserio::BitStreamWriter& out, ::nds::instructions::types::SignpostIntersectionType value);

template <>
void write<::zserio::DeltaContext, ::nds::instructions::types::SignpostIntersectionType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::instructions::types::SignpostIntersectionType value);

} // namespace zserio

#endif // NDS_INSTRUCTIONS_TYPES_SIGNPOST_INTERSECTION_TYPE_H
