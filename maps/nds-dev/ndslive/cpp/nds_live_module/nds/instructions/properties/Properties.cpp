/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/instructions/properties/PropertyType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PropertyType enumeration.
constexpr ::std::array<const char*, 8> EnumTraits<::nds::instructions::properties::PropertyType>::names;
constexpr ::std::array<::nds::instructions::properties::PropertyType, 8> EnumTraits<::nds::instructions::properties::PropertyType>::values;
constexpr const char* EnumTraits<::nds::instructions::properties::PropertyType>::enumName;

template <>
size_t enumToOrdinal(::nds::instructions::properties::PropertyType value)
{
    switch (value)
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        return 0;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        return 1;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        return 2;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        return 3;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        return 4;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        return 5;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        return 6;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        return 7;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PropertyType: ") <<
                static_cast<typename ::std::underlying_type<::nds::instructions::properties::PropertyType>::type>(value) << "!";
    }
}

template <>
::nds::instructions::properties::PropertyType valueToEnum(
        typename ::std::underlying_type<::nds::instructions::properties::PropertyType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
        return static_cast<::nds::instructions::properties::PropertyType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PropertyType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::instructions::properties::PropertyType>(::nds::instructions::properties::PropertyType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::instructions::properties::PropertyType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::instructions::properties::PropertyType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::instructions::properties::PropertyType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::instructions::properties::PropertyType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::instructions::properties::PropertyType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::instructions::properties::PropertyType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::instructions::properties::PropertyType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::instructions::properties::PropertyType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::instructions::properties::PropertyType>(
            static_cast<typename ::std::underlying_type<::nds::instructions::properties::PropertyType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::instructions::properties::PropertyType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::instructions::properties::PropertyType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::instructions::properties::PropertyType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::instructions::properties::PropertyType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::instructions::properties::PropertyType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::instructions::properties::PropertyType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/instructions/properties/InstructionsPropertyType.h>
#include <nds/instructions/properties/PropertyType.h>

namespace nds
{
namespace instructions
{
namespace properties
{

InstructionsPropertyType::InstructionsPropertyType(const allocator_type&) noexcept :
        m_type_(::nds::instructions::properties::PropertyType()),
        m_coreType_(::zserio::NullOpt)
{
}

InstructionsPropertyType::InstructionsPropertyType(::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(in)),
        m_coreType_(readCoreType(in))
{
}

InstructionsPropertyType::InstructionsPropertyType(InstructionsPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(context, in)),
        m_coreType_(readCoreType(context, in))
{
}

InstructionsPropertyType::InstructionsPropertyType(::zserio::PropagateAllocatorT,
        const InstructionsPropertyType& other, const allocator_type& allocator) :
        m_type_(::zserio::allocatorPropagatingCopy(other.m_type_, allocator)),
        m_coreType_(::zserio::allocatorPropagatingCopy(other.m_coreType_, allocator))
{
}

::nds::instructions::properties::PropertyType InstructionsPropertyType::getType() const
{
    return m_type_;
}

void InstructionsPropertyType::setType(::nds::instructions::properties::PropertyType type_)
{
    m_type_ = type_;
}

::nds::core::properties::CorePropertyType InstructionsPropertyType::getCoreType() const
{
    return m_coreType_.value();
}

void InstructionsPropertyType::setCoreType(::nds::core::properties::CorePropertyType coreType_)
{
    m_coreType_ = coreType_;
}

bool InstructionsPropertyType::isCoreTypeUsed() const
{
    return (getType() == ::nds::instructions::properties::PropertyType::CORE);
}

bool InstructionsPropertyType::isCoreTypeSet() const
{
    return m_coreType_.hasValue();
}

void InstructionsPropertyType::resetCoreType()
{
    m_coreType_.reset();
}

void InstructionsPropertyType::initPackingContext(InstructionsPropertyType::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getType(), m_type_);
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        ::zserio::initPackingContext(context.getCoreType(), m_coreType_.value());
    }
}

size_t InstructionsPropertyType::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_type_);
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition += ::zserio::bitSizeOf(m_coreType_.value());
    }

    return endBitPosition - bitPosition;
}

size_t InstructionsPropertyType::bitSizeOf(InstructionsPropertyType::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getType(), m_type_);
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition += ::zserio::bitSizeOf(context.getCoreType(), m_coreType_.value());
    }

    return endBitPosition - bitPosition;
}

size_t InstructionsPropertyType::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_type_);
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_coreType_.value());
    }

    return endBitPosition;
}

size_t InstructionsPropertyType::initializeOffsets(InstructionsPropertyType::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getType(), endBitPosition,
        m_type_);
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition = ::zserio::initializeOffsets(context.getCoreType(), endBitPosition,
        m_coreType_.value());
    }

    return endBitPosition;
}

bool InstructionsPropertyType::operator==(const InstructionsPropertyType& other) const
{
    if (this != &other)
    {
        return
                (m_type_ == other.m_type_) &&
                (!isCoreTypeUsed() ? !other.isCoreTypeUsed() : (m_coreType_ == other.m_coreType_));
    }

    return true;
}

uint32_t InstructionsPropertyType::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_type_);
    if (isCoreTypeUsed())
        result = ::zserio::calcHashCode(result, m_coreType_);

    return result;
}

void InstructionsPropertyType::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_type_);
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        ::zserio::write(out, m_coreType_.value());
    }
}

void InstructionsPropertyType::write(InstructionsPropertyType::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getType(), out, m_type_);
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        ::zserio::write(context.getCoreType(), out, m_coreType_.value());
    }
}

::nds::instructions::properties::PropertyType InstructionsPropertyType::readType(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::instructions::properties::PropertyType>(in);
}

::nds::instructions::properties::PropertyType InstructionsPropertyType::readType(InstructionsPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::instructions::properties::PropertyType>(context.getType(), in);
}
::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> InstructionsPropertyType::readCoreType(::zserio::BitStreamReader& in)
{
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::read<::nds::core::properties::CorePropertyType>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> InstructionsPropertyType::readCoreType(InstructionsPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::read<::nds::core::properties::CorePropertyType>(context.getCoreType(), in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::NullOpt);
}

} // namespace properties
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/instructions/properties/InstructionsPropertyValue.h>
#include <nds/instructions/properties/PropertyType.h>

namespace nds
{
namespace instructions
{
namespace properties
{

InstructionsPropertyValue::InstructionsPropertyValue(const allocator_type&) noexcept :
        m_isInitialized(false),
        m_value_(::zserio::NullOpt),
        m_coreValue_(::zserio::NullOpt)
{
}

InstructionsPropertyValue::InstructionsPropertyValue(::zserio::BitStreamReader& in,
        ::nds::instructions::properties::InstructionsPropertyType& type_, const allocator_type& allocator) :
        m_type_(&type_),
        m_isInitialized(true),
        m_value_(readValue(in, allocator)),
        m_coreValue_(readCoreValue(in, allocator))
{
}

InstructionsPropertyValue::InstructionsPropertyValue(InstructionsPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::instructions::properties::InstructionsPropertyType& type_, const allocator_type& allocator) :
        m_type_(&type_),
        m_isInitialized(true),
        m_value_(readValue(context, in, allocator)),
        m_coreValue_(readCoreValue(context, in, allocator))
{
}

InstructionsPropertyValue::InstructionsPropertyValue(const InstructionsPropertyValue& other) :
        m_value_(other.m_value_),
        m_coreValue_(other.m_coreValue_)
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

InstructionsPropertyValue& InstructionsPropertyValue::operator=(const InstructionsPropertyValue& other)
{
    m_value_ = other.m_value_;
    m_coreValue_ = other.m_coreValue_;
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;

    return *this;
}

InstructionsPropertyValue::InstructionsPropertyValue(InstructionsPropertyValue&& other) :
        m_value_(::std::move(other.m_value_)),
        m_coreValue_(::std::move(other.m_coreValue_))
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

InstructionsPropertyValue& InstructionsPropertyValue::operator=(InstructionsPropertyValue&& other)
{
    m_value_ = ::std::move(other.m_value_);
    m_coreValue_ = ::std::move(other.m_coreValue_);
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;

    return *this;
}

InstructionsPropertyValue::InstructionsPropertyValue(::zserio::PropagateAllocatorT,
        const InstructionsPropertyValue& other, const allocator_type& allocator) :
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator)),
        m_coreValue_(::zserio::allocatorPropagatingCopy(other.m_coreValue_, allocator))
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

void InstructionsPropertyValue::initialize(
        ::nds::instructions::properties::InstructionsPropertyType& type_)
{
    m_type_ = &type_;
    m_isInitialized = true;

    initializeChildren();
}

bool InstructionsPropertyValue::isInitialized() const
{
    return m_isInitialized;
}

void InstructionsPropertyValue::initializeChildren()
{
    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
        m_value_.value().initialize(static_cast<::nds::instructions::properties::PropertyType>(getType().getType()));
    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
        m_coreValue_.value().initialize(static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()));
}

::nds::instructions::properties::InstructionsPropertyType& InstructionsPropertyValue::getType()
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'InstructionsPropertyValue' is not initialized!");

    return *m_type_;
}

const ::nds::instructions::properties::InstructionsPropertyType& InstructionsPropertyValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'InstructionsPropertyValue' is not initialized!");

    return *m_type_;
}

::nds::instructions::properties::PropertyValue& InstructionsPropertyValue::getValue()
{
    return m_value_.value();
}

const ::nds::instructions::properties::PropertyValue& InstructionsPropertyValue::getValue() const
{
    return m_value_.value();
}

void InstructionsPropertyValue::setValue(const ::nds::instructions::properties::PropertyValue& value_)
{
    m_value_ = value_;
}

void InstructionsPropertyValue::setValue(::nds::instructions::properties::PropertyValue&& value_)
{
    m_value_ = ::std::move(value_);
}

bool InstructionsPropertyValue::isValueUsed() const
{
    return (getType().getType() != ::nds::instructions::properties::PropertyType::CORE);
}

bool InstructionsPropertyValue::isValueSet() const
{
    return m_value_.hasValue();
}

void InstructionsPropertyValue::resetValue()
{
    m_value_.reset();
}

::nds::core::properties::CorePropertyValue& InstructionsPropertyValue::getCoreValue()
{
    return m_coreValue_.value();
}

const ::nds::core::properties::CorePropertyValue& InstructionsPropertyValue::getCoreValue() const
{
    return m_coreValue_.value();
}

void InstructionsPropertyValue::setCoreValue(const ::nds::core::properties::CorePropertyValue& coreValue_)
{
    m_coreValue_ = coreValue_;
}

void InstructionsPropertyValue::setCoreValue(::nds::core::properties::CorePropertyValue&& coreValue_)
{
    m_coreValue_ = ::std::move(coreValue_);
}

bool InstructionsPropertyValue::isCoreValueUsed() const
{
    return (getType().getType() == ::nds::instructions::properties::PropertyType::CORE);
}

bool InstructionsPropertyValue::isCoreValueSet() const
{
    return m_coreValue_.hasValue();
}

void InstructionsPropertyValue::resetCoreValue()
{
    m_coreValue_.reset();
}

void InstructionsPropertyValue::initPackingContext(InstructionsPropertyValue::ZserioPackingContext& context) const
{
    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        m_value_.value().initPackingContext(context.getValue());
    }
    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        m_coreValue_.value().initPackingContext(context.getCoreValue());
    }
}

size_t InstructionsPropertyValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition += m_value_.value().bitSizeOf(endBitPosition);
    }
    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition += m_coreValue_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t InstructionsPropertyValue::bitSizeOf(InstructionsPropertyValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition += m_value_.value().bitSizeOf(context.getValue(), endBitPosition);
    }
    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition += m_coreValue_.value().bitSizeOf(context.getCoreValue(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t InstructionsPropertyValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition = m_value_.value().initializeOffsets(endBitPosition);
    }
    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition = m_coreValue_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t InstructionsPropertyValue::initializeOffsets(InstructionsPropertyValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition = m_value_.value().initializeOffsets(context.getValue(), endBitPosition);
    }
    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        endBitPosition = m_coreValue_.value().initializeOffsets(context.getCoreValue(), endBitPosition);
    }

    return endBitPosition;
}

bool InstructionsPropertyValue::operator==(const InstructionsPropertyValue& other) const
{
    if (this != &other)
    {
        return
                (getType() == other.getType()) &&
                (!isValueUsed() ? !other.isValueUsed() : (m_value_ == other.m_value_)) &&
                (!isCoreValueUsed() ? !other.isCoreValueUsed() : (m_coreValue_ == other.m_coreValue_));
    }

    return true;
}

uint32_t InstructionsPropertyValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (isValueUsed())
        result = ::zserio::calcHashCode(result, m_value_);
    if (isCoreValueUsed())
        result = ::zserio::calcHashCode(result, m_coreValue_);

    return result;
}

void InstructionsPropertyValue::write(::zserio::BitStreamWriter& out) const
{
    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_value_.value().getType() != static_cast<::nds::instructions::properties::PropertyType>(getType().getType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field InstructionsPropertyValue.value: ") <<
                    m_value_.value().getType() << " != " << static_cast<::nds::instructions::properties::PropertyType>(getType().getType()) << "!";
        }
        m_value_.value().write(out);
    }

    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_coreValue_.value().getType() != static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field InstructionsPropertyValue.coreValue: ") <<
                    m_coreValue_.value().getType() << " != " << static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()) << "!";
        }
        m_coreValue_.value().write(out);
    }
}

void InstructionsPropertyValue::write(InstructionsPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_value_.value().getType() != static_cast<::nds::instructions::properties::PropertyType>(getType().getType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field InstructionsPropertyValue.value: ") <<
                    m_value_.value().getType() << " != " << static_cast<::nds::instructions::properties::PropertyType>(getType().getType()) << "!";
        }
        m_value_.value().write(context.getValue(), out);
    }

    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_coreValue_.value().getType() != static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field InstructionsPropertyValue.coreValue: ") <<
                    m_coreValue_.value().getType() << " != " << static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()) << "!";
        }
        m_coreValue_.value().write(context.getCoreValue(), out);
    }
}

::zserio::InplaceOptionalHolder<::nds::instructions::properties::PropertyValue> InstructionsPropertyValue::readValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::properties::PropertyValue>(::nds::instructions::properties::PropertyValue(in, static_cast<::nds::instructions::properties::PropertyType>(getType().getType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::properties::PropertyValue>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::instructions::properties::PropertyValue> InstructionsPropertyValue::readValue(InstructionsPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getType().getType() != ::nds::instructions::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::properties::PropertyValue>(::nds::instructions::properties::PropertyValue(context.getValue(), in, static_cast<::nds::instructions::properties::PropertyType>(getType().getType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::properties::PropertyValue>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> InstructionsPropertyValue::readCoreValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::nds::core::properties::CorePropertyValue(in, static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> InstructionsPropertyValue::readCoreValue(InstructionsPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getType().getType() == ::nds::instructions::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::nds::core::properties::CorePropertyValue(context.getCoreValue(), in, static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::zserio::NullOpt);
}

} // namespace properties
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/instructions/properties/PropertyValue.h>

namespace nds
{
namespace instructions
{
namespace properties
{

PropertyValue::PropertyValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

PropertyValue::PropertyValue(::zserio::BitStreamReader& in,
        ::nds::instructions::properties::PropertyType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

PropertyValue::PropertyValue(PropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::instructions::properties::PropertyType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

PropertyValue::PropertyValue(const PropertyValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PropertyValue& PropertyValue::operator=(const PropertyValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PropertyValue::PropertyValue(PropertyValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PropertyValue& PropertyValue::operator=(PropertyValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PropertyValue::PropertyValue(::zserio::PropagateAllocatorT,
        const PropertyValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void PropertyValue::initialize(
        ::nds::instructions::properties::PropertyType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool PropertyValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::instructions::properties::PropertyType PropertyValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PropertyValue' is not initialized!");

    return m_type_;
}

::nds::core::types::LanguageCode PropertyValue::getLanguageCode() const
{
    return m_objectChoice.get<::nds::core::types::LanguageCode>();
}

void PropertyValue::setLanguageCode(::nds::core::types::LanguageCode languageCode_)
{
    m_objectChoice = languageCode_;
}

::nds::instructions::types::SignpostPhoneticTranscriptions& PropertyValue::getSignpostPhoneticTranscriptions()
{
    return m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>();
}

const ::nds::instructions::types::SignpostPhoneticTranscriptions& PropertyValue::getSignpostPhoneticTranscriptions() const
{
    return m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>();
}

void PropertyValue::setSignpostPhoneticTranscriptions(const ::nds::instructions::types::SignpostPhoneticTranscriptions& signpostPhoneticTranscriptions_)
{
    m_objectChoice = signpostPhoneticTranscriptions_;
}

void PropertyValue::setSignpostPhoneticTranscriptions(::nds::instructions::types::SignpostPhoneticTranscriptions&& signpostPhoneticTranscriptions_)
{
    m_objectChoice = ::std::move(signpostPhoneticTranscriptions_);
}

::nds::instructions::types::SignpostGraphicsBackgroundColor& PropertyValue::getSignpostGraphicsBackgroundColor()
{
    return m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>();
}

const ::nds::instructions::types::SignpostGraphicsBackgroundColor& PropertyValue::getSignpostGraphicsBackgroundColor() const
{
    return m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>();
}

void PropertyValue::setSignpostGraphicsBackgroundColor(const ::nds::instructions::types::SignpostGraphicsBackgroundColor& signpostGraphicsBackgroundColor_)
{
    m_objectChoice = signpostGraphicsBackgroundColor_;
}

void PropertyValue::setSignpostGraphicsBackgroundColor(::nds::instructions::types::SignpostGraphicsBackgroundColor&& signpostGraphicsBackgroundColor_)
{
    m_objectChoice = ::std::move(signpostGraphicsBackgroundColor_);
}

::nds::instructions::types::SignpostGraphicsBackgroundIcon PropertyValue::getSignpostGraphicsBackgroundIcon() const
{
    return m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>();
}

void PropertyValue::setSignpostGraphicsBackgroundIcon(::nds::instructions::types::SignpostGraphicsBackgroundIcon signpostGraphicsBackgroundIcon_)
{
    m_objectChoice = signpostGraphicsBackgroundIcon_;
}

::nds::instructions::types::SignpostGraphicsTowardsIcon PropertyValue::getSignpostGraphicsTowardsIcon() const
{
    return m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>();
}

void PropertyValue::setSignpostGraphicsTowardsIcon(::nds::instructions::types::SignpostGraphicsTowardsIcon signpostGraphicsTowardsIcon_)
{
    m_objectChoice = signpostGraphicsTowardsIcon_;
}

::nds::instructions::types::SignpostGraphicsDirectionIcon PropertyValue::getSignpostGraphicsDirectionIcon() const
{
    return m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>();
}

void PropertyValue::setSignpostGraphicsDirectionIcon(::nds::instructions::types::SignpostGraphicsDirectionIcon signpostGraphicsDirectionIcon_)
{
    m_objectChoice = signpostGraphicsDirectionIcon_;
}

::nds::instructions::types::SignpostGraphicsTextColor& PropertyValue::getSignpostGraphicsTextColor()
{
    return m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>();
}

const ::nds::instructions::types::SignpostGraphicsTextColor& PropertyValue::getSignpostGraphicsTextColor() const
{
    return m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>();
}

void PropertyValue::setSignpostGraphicsTextColor(const ::nds::instructions::types::SignpostGraphicsTextColor& signpostGraphicsTextColor_)
{
    m_objectChoice = signpostGraphicsTextColor_;
}

void PropertyValue::setSignpostGraphicsTextColor(::nds::instructions::types::SignpostGraphicsTextColor&& signpostGraphicsTextColor_)
{
    m_objectChoice = ::std::move(signpostGraphicsTextColor_);
}

PropertyValue::ChoiceTag PropertyValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        return UNDEFINED_CHOICE;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        return CHOICE_languageCode;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        return CHOICE_signpostPhoneticTranscriptions;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        return CHOICE_signpostGraphicsBackgroundColor;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        return CHOICE_signpostGraphicsBackgroundIcon;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        return CHOICE_signpostGraphicsTowardsIcon;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        return CHOICE_signpostGraphicsDirectionIcon;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        return CHOICE_signpostGraphicsTextColor;
    default:
        return UNDEFINED_CHOICE;
    }
}

void PropertyValue::initPackingContext(PropertyValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        context.getLanguageCode().init<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>().initPackingContext(context.getSignpostPhoneticTranscriptions());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>().initPackingContext(context.getSignpostGraphicsBackgroundColor());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        context.getSignpostGraphicsBackgroundIcon().init<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsBackgroundIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        context.getSignpostGraphicsTowardsIcon().init<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsTowardsIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        context.getSignpostGraphicsDirectionIcon().init<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsDirectionIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>().initPackingContext(context.getSignpostGraphicsTextColor());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

size_t PropertyValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        endBitPosition += m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>().bitSizeOf(endBitPosition);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        endBitPosition += m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>().bitSizeOf(endBitPosition);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        endBitPosition += m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>().bitSizeOf(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PropertyValue::bitSizeOf(PropertyValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += context.getLanguageCode().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        endBitPosition += m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>().bitSizeOf(context.getSignpostPhoneticTranscriptions(), endBitPosition);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        endBitPosition += m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>().bitSizeOf(context.getSignpostGraphicsBackgroundColor(), endBitPosition);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        endBitPosition += context.getSignpostGraphicsBackgroundIcon().bitSizeOf<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsBackgroundIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        endBitPosition += context.getSignpostGraphicsTowardsIcon().bitSizeOf<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsTowardsIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        endBitPosition += context.getSignpostGraphicsDirectionIcon().bitSizeOf<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsDirectionIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        endBitPosition += m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>().bitSizeOf(context.getSignpostGraphicsTextColor(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PropertyValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        endBitPosition = m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>().initializeOffsets(endBitPosition);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        endBitPosition = m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>().initializeOffsets(endBitPosition);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        endBitPosition = m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>().initializeOffsets(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition;
}

size_t PropertyValue::initializeOffsets(PropertyValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += context.getLanguageCode().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        endBitPosition = m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>().initializeOffsets(context.getSignpostPhoneticTranscriptions(), endBitPosition);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        endBitPosition = m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>().initializeOffsets(context.getSignpostGraphicsBackgroundColor(), endBitPosition);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        endBitPosition += context.getSignpostGraphicsBackgroundIcon().bitSizeOf<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsBackgroundIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        endBitPosition += context.getSignpostGraphicsTowardsIcon().bitSizeOf<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsTowardsIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        endBitPosition += context.getSignpostGraphicsDirectionIcon().bitSizeOf<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsDirectionIcon>>(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        endBitPosition = m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>().initializeOffsets(context.getSignpostGraphicsTextColor(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition;
}

bool PropertyValue::operator==(const PropertyValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        return true; // empty
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::LanguageCode>() == other.m_objectChoice.get<::nds::core::types::LanguageCode>());
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>() == other.m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>());
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>() == other.m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>());
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>() == other.m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>() == other.m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>() == other.m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>() == other.m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

uint32_t PropertyValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::instructions::properties::PropertyType::CORE:
            // empty
            break;
        case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::LanguageCode>());
            break;
        case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>());
            break;
        case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>());
            break;
        case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
            break;
        case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
            break;
        case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
            break;
        case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>());
            break;
        default:
            break;
        }
    }

    return result;
}

void PropertyValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        out.writeVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>().write(out);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>().write(out);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        out.writeVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        out.writeVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        out.writeVarUInt(m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>().write(out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

void PropertyValue::write(PropertyValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        context.getLanguageCode().write<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(out, m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        m_objectChoice.get<::nds::instructions::types::SignpostPhoneticTranscriptions>().write(context.getSignpostPhoneticTranscriptions(), out);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundColor>().write(context.getSignpostGraphicsBackgroundColor(), out);
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        context.getSignpostGraphicsBackgroundIcon().write<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsBackgroundIcon>>(out, m_objectChoice.get<::nds::instructions::types::SignpostGraphicsBackgroundIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        context.getSignpostGraphicsTowardsIcon().write<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsTowardsIcon>>(out, m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTowardsIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        context.getSignpostGraphicsDirectionIcon().write<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsDirectionIcon>>(out, m_objectChoice.get<::nds::instructions::types::SignpostGraphicsDirectionIcon>());
        break;
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        m_objectChoice.get<::nds::instructions::types::SignpostGraphicsTextColor>().write(context.getSignpostGraphicsTextColor(), out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::LanguageCode>(in.readVarUInt16()), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        return ::zserio::AnyHolder<>(::nds::instructions::types::SignpostPhoneticTranscriptions(in, allocator), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        return ::zserio::AnyHolder<>(::nds::instructions::types::SignpostGraphicsBackgroundColor(in, allocator), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        return ::zserio::AnyHolder<>(static_cast<::nds::instructions::types::SignpostGraphicsBackgroundIcon>(in.readVarUInt()), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        return ::zserio::AnyHolder<>(static_cast<::nds::instructions::types::SignpostGraphicsTowardsIcon>(in.readVarUInt()), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        return ::zserio::AnyHolder<>(static_cast<::nds::instructions::types::SignpostGraphicsDirectionIcon>(in.readVarUInt()), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        return ::zserio::AnyHolder<>(::nds::instructions::types::SignpostGraphicsTextColor(in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::readObject(PropertyValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::AnyHolder<>(context.getLanguageCode().read<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(in), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        return ::zserio::AnyHolder<>(::nds::instructions::types::SignpostPhoneticTranscriptions(context.getSignpostPhoneticTranscriptions(), in, allocator), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        return ::zserio::AnyHolder<>(::nds::instructions::types::SignpostGraphicsBackgroundColor(context.getSignpostGraphicsBackgroundColor(), in, allocator), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        return ::zserio::AnyHolder<>(context.getSignpostGraphicsBackgroundIcon().read<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsBackgroundIcon>>(in), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        return ::zserio::AnyHolder<>(context.getSignpostGraphicsTowardsIcon().read<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsTowardsIcon>>(in), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        return ::zserio::AnyHolder<>(context.getSignpostGraphicsDirectionIcon().read<::zserio::VarIntArrayTraits<::nds::instructions::types::SignpostGraphicsDirectionIcon>>(in), allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        return ::zserio::AnyHolder<>(::nds::instructions::types::SignpostGraphicsTextColor(context.getSignpostGraphicsTextColor(), in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::instructions::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::instructions::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::LanguageCode>(m_objectChoice, allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_PHONETIC_TRANSCRIPTIONS:
        return ::zserio::allocatorPropagatingCopy<::nds::instructions::types::SignpostPhoneticTranscriptions>(m_objectChoice, allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_COLOR:
        return ::zserio::allocatorPropagatingCopy<::nds::instructions::types::SignpostGraphicsBackgroundColor>(m_objectChoice, allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_BACKGROUND_ICON:
        return ::zserio::allocatorPropagatingCopy<::nds::instructions::types::SignpostGraphicsBackgroundIcon>(m_objectChoice, allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TOWARDS_ICON:
        return ::zserio::allocatorPropagatingCopy<::nds::instructions::types::SignpostGraphicsTowardsIcon>(m_objectChoice, allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_DIRECTION_ICON:
        return ::zserio::allocatorPropagatingCopy<::nds::instructions::types::SignpostGraphicsDirectionIcon>(m_objectChoice, allocator);
    case ::nds::instructions::properties::PropertyType::SIGNPOST_GRAPHICS_TEXT_COLOR:
        return ::zserio::allocatorPropagatingCopy<::nds::instructions::types::SignpostGraphicsTextColor>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

} // namespace properties
} // namespace instructions
} // namespace nds
