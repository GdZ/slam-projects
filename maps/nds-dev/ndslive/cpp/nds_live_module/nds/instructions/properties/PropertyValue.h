/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_PROPERTIES_PROPERTY_VALUE_H
#define NDS_INSTRUCTIONS_PROPERTIES_PROPERTY_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/LanguageCode.h>
#include <nds/instructions/properties/PropertyType.h>
#include <nds/instructions/types/SignpostGraphicsBackgroundColor.h>
#include <nds/instructions/types/SignpostGraphicsBackgroundIcon.h>
#include <nds/instructions/types/SignpostGraphicsDirectionIcon.h>
#include <nds/instructions/types/SignpostGraphicsTextColor.h>
#include <nds/instructions/types/SignpostGraphicsTowardsIcon.h>
#include <nds/instructions/types/SignpostPhoneticTranscriptions.h>

namespace nds
{
namespace instructions
{
namespace properties
{

class PropertyValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_languageCode = 0,
        CHOICE_signpostPhoneticTranscriptions = 1,
        CHOICE_signpostGraphicsBackgroundColor = 2,
        CHOICE_signpostGraphicsBackgroundIcon = 3,
        CHOICE_signpostGraphicsTowardsIcon = 4,
        CHOICE_signpostGraphicsDirectionIcon = 5,
        CHOICE_signpostGraphicsTextColor = 6,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLanguageCode()
        {
            return m_languageCode_;
        }

        ::nds::instructions::types::SignpostPhoneticTranscriptions::ZserioPackingContext& getSignpostPhoneticTranscriptions()
        {
            return m_signpostPhoneticTranscriptions_;
        }

        ::nds::instructions::types::SignpostGraphicsBackgroundColor::ZserioPackingContext& getSignpostGraphicsBackgroundColor()
        {
            return m_signpostGraphicsBackgroundColor_;
        }

        ::zserio::DeltaContext& getSignpostGraphicsBackgroundIcon()
        {
            return m_signpostGraphicsBackgroundIcon_;
        }

        ::zserio::DeltaContext& getSignpostGraphicsTowardsIcon()
        {
            return m_signpostGraphicsTowardsIcon_;
        }

        ::zserio::DeltaContext& getSignpostGraphicsDirectionIcon()
        {
            return m_signpostGraphicsDirectionIcon_;
        }

        ::nds::instructions::types::SignpostGraphicsTextColor::ZserioPackingContext& getSignpostGraphicsTextColor()
        {
            return m_signpostGraphicsTextColor_;
        }

    private:
        ::zserio::DeltaContext m_languageCode_;
        ::nds::instructions::types::SignpostPhoneticTranscriptions::ZserioPackingContext m_signpostPhoneticTranscriptions_;
        ::nds::instructions::types::SignpostGraphicsBackgroundColor::ZserioPackingContext m_signpostGraphicsBackgroundColor_;
        ::zserio::DeltaContext m_signpostGraphicsBackgroundIcon_;
        ::zserio::DeltaContext m_signpostGraphicsTowardsIcon_;
        ::zserio::DeltaContext m_signpostGraphicsDirectionIcon_;
        ::nds::instructions::types::SignpostGraphicsTextColor::ZserioPackingContext m_signpostGraphicsTextColor_;
    };

    PropertyValue() noexcept :
            PropertyValue(allocator_type())
    {}

    explicit PropertyValue(const allocator_type& allocator) noexcept;

    explicit PropertyValue(::zserio::BitStreamReader& in,
            ::nds::instructions::properties::PropertyType type_, const allocator_type& allocator = allocator_type());
    explicit PropertyValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::instructions::properties::PropertyType type_, const allocator_type& allocator = allocator_type());

    ~PropertyValue() = default;

    PropertyValue(const PropertyValue& other);
    PropertyValue& operator=(const PropertyValue& other);

    PropertyValue(PropertyValue&& other);
    PropertyValue& operator=(PropertyValue&& other);

    PropertyValue(::zserio::PropagateAllocatorT,
            const PropertyValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::instructions::properties::PropertyType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::instructions::properties::PropertyType getType() const;

    ::nds::core::types::LanguageCode getLanguageCode() const;
    void setLanguageCode(::nds::core::types::LanguageCode languageCode_);

    const ::nds::instructions::types::SignpostPhoneticTranscriptions& getSignpostPhoneticTranscriptions() const;
    ::nds::instructions::types::SignpostPhoneticTranscriptions& getSignpostPhoneticTranscriptions();
    void setSignpostPhoneticTranscriptions(const ::nds::instructions::types::SignpostPhoneticTranscriptions& signpostPhoneticTranscriptions_);
    void setSignpostPhoneticTranscriptions(::nds::instructions::types::SignpostPhoneticTranscriptions&& signpostPhoneticTranscriptions_);

    const ::nds::instructions::types::SignpostGraphicsBackgroundColor& getSignpostGraphicsBackgroundColor() const;
    ::nds::instructions::types::SignpostGraphicsBackgroundColor& getSignpostGraphicsBackgroundColor();
    void setSignpostGraphicsBackgroundColor(const ::nds::instructions::types::SignpostGraphicsBackgroundColor& signpostGraphicsBackgroundColor_);
    void setSignpostGraphicsBackgroundColor(::nds::instructions::types::SignpostGraphicsBackgroundColor&& signpostGraphicsBackgroundColor_);

    ::nds::instructions::types::SignpostGraphicsBackgroundIcon getSignpostGraphicsBackgroundIcon() const;
    void setSignpostGraphicsBackgroundIcon(::nds::instructions::types::SignpostGraphicsBackgroundIcon signpostGraphicsBackgroundIcon_);

    ::nds::instructions::types::SignpostGraphicsTowardsIcon getSignpostGraphicsTowardsIcon() const;
    void setSignpostGraphicsTowardsIcon(::nds::instructions::types::SignpostGraphicsTowardsIcon signpostGraphicsTowardsIcon_);

    ::nds::instructions::types::SignpostGraphicsDirectionIcon getSignpostGraphicsDirectionIcon() const;
    void setSignpostGraphicsDirectionIcon(::nds::instructions::types::SignpostGraphicsDirectionIcon signpostGraphicsDirectionIcon_);

    const ::nds::instructions::types::SignpostGraphicsTextColor& getSignpostGraphicsTextColor() const;
    ::nds::instructions::types::SignpostGraphicsTextColor& getSignpostGraphicsTextColor();
    void setSignpostGraphicsTextColor(const ::nds::instructions::types::SignpostGraphicsTextColor& signpostGraphicsTextColor_);
    void setSignpostGraphicsTextColor(::nds::instructions::types::SignpostGraphicsTextColor&& signpostGraphicsTextColor_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PropertyValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::instructions::properties::PropertyType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace properties
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_PROPERTIES_PROPERTY_VALUE_H
