/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_ATTRIBUTES_INSTRUCTIONS_LANE_TRANSITION_ATTRIBUTE_TYPE_H
#define NDS_INSTRUCTIONS_ATTRIBUTES_INSTRUCTIONS_LANE_TRANSITION_ATTRIBUTE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace instructions
{
namespace attributes
{

enum class InstructionsLaneTransitionAttributeType : uint16_t
{
    SIGNPOST_IMAGE = UINT16_C(0),
    SIGNPOST_INSTRUCTION = UINT16_C(1),
    LANE_INSTRUCTION = UINT16_C(2),
    JUNCTION_VIEW = UINT16_C(3)
};

} // namespace attributes
} // namespace instructions
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for InstructionsLaneTransitionAttributeType enumeration.
template <>
struct EnumTraits<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>
{
    static constexpr ::std::array<const char*, 4> names =
    {{
        "SIGNPOST_IMAGE",
        "SIGNPOST_INSTRUCTION",
        "LANE_INSTRUCTION",
        "JUNCTION_VIEW"
    }};

    static constexpr ::std::array<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType, 4> values =
    {{
        ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType::SIGNPOST_IMAGE,
        ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType::SIGNPOST_INSTRUCTION,
        ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType::LANE_INSTRUCTION,
        ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType::JUNCTION_VIEW
    }};

    static constexpr const char* enumName = "InstructionsLaneTransitionAttributeType";
};

template <>
size_t enumToOrdinal<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

template <>
::nds::instructions::attributes::InstructionsLaneTransitionAttributeType valueToEnum<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(
        typename ::std::underlying_type<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::zserio::DeltaContext& context, ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

template <>
size_t bitSizeOf<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::zserio::DeltaContext& context, ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

template <>
size_t initializeOffsets<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(size_t bitPosition, ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

template <>
::nds::instructions::attributes::InstructionsLaneTransitionAttributeType read<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::zserio::BitStreamReader& in);

template <>
::nds::instructions::attributes::InstructionsLaneTransitionAttributeType read<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::zserio::BitStreamWriter& out, ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

template <>
void write<::zserio::DeltaContext, ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::instructions::attributes::InstructionsLaneTransitionAttributeType value);

} // namespace zserio

#endif // NDS_INSTRUCTIONS_ATTRIBUTES_INSTRUCTIONS_LANE_TRANSITION_ATTRIBUTE_TYPE_H
