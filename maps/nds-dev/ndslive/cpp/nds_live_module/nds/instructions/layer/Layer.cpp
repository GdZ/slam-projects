/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/instructions/layer/RoadInstructionsLayer.h>
#include <nds/instructions/metadata/RoadInstructionsLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace instructions
{
namespace layer
{

RoadInstructionsLayer::RoadInstructionsLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::instructions::metadata::RoadInstructionsLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_transitionAttributeMaps_(::zserio::NullOpt),
        m_transitionAttributeSets_(::zserio::NullOpt)
{
}

RoadInstructionsLayer::RoadInstructionsLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_transitionAttributeMaps_(readTransitionAttributeMaps(in, allocator)),
        m_transitionAttributeSets_(readTransitionAttributeSets(in, allocator))
{
}

RoadInstructionsLayer::RoadInstructionsLayer(RoadInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_transitionAttributeMaps_(readTransitionAttributeMaps(context, in, allocator)),
        m_transitionAttributeSets_(readTransitionAttributeSets(context, in, allocator))
{
}

RoadInstructionsLayer::RoadInstructionsLayer(const RoadInstructionsLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_transitionAttributeMaps_(other.m_transitionAttributeMaps_),
        m_transitionAttributeSets_(other.m_transitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadInstructionsLayer& RoadInstructionsLayer::operator=(const RoadInstructionsLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_transitionAttributeMaps_ = other.m_transitionAttributeMaps_;
    m_transitionAttributeSets_ = other.m_transitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadInstructionsLayer::RoadInstructionsLayer(RoadInstructionsLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_transitionAttributeMaps_(::std::move(other.m_transitionAttributeMaps_)),
        m_transitionAttributeSets_(::std::move(other.m_transitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadInstructionsLayer& RoadInstructionsLayer::operator=(RoadInstructionsLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_transitionAttributeMaps_ = ::std::move(other.m_transitionAttributeMaps_);
    m_transitionAttributeSets_ = ::std::move(other.m_transitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadInstructionsLayer::RoadInstructionsLayer(::zserio::PropagateAllocatorT,
        const RoadInstructionsLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_transitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMaps_, allocator)),
        m_transitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadInstructionsLayer::initializeChildren()
{
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
        m_transitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
        m_transitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::instructions::metadata::RoadInstructionsLayerContent RoadInstructionsLayer::getContent() const
{
    return m_content_;
}

void RoadInstructionsLayer::setContent(::nds::instructions::metadata::RoadInstructionsLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift RoadInstructionsLayer::getShift() const
{
    return m_shift_;
}

void RoadInstructionsLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::instructions::instantiations::InstructionsTransitionAttributeMapList& RoadInstructionsLayer::getTransitionAttributeMaps()
{
    return m_transitionAttributeMaps_.value();
}

const ::nds::instructions::instantiations::InstructionsTransitionAttributeMapList& RoadInstructionsLayer::getTransitionAttributeMaps() const
{
    return m_transitionAttributeMaps_.value();
}

void RoadInstructionsLayer::setTransitionAttributeMaps(const ::nds::instructions::instantiations::InstructionsTransitionAttributeMapList& transitionAttributeMaps_)
{
    m_transitionAttributeMaps_ = transitionAttributeMaps_;
}

void RoadInstructionsLayer::setTransitionAttributeMaps(::nds::instructions::instantiations::InstructionsTransitionAttributeMapList&& transitionAttributeMaps_)
{
    m_transitionAttributeMaps_ = ::std::move(transitionAttributeMaps_);
}

bool RoadInstructionsLayer::isTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS);
}

bool RoadInstructionsLayer::isTransitionAttributeMapsSet() const
{
    return m_transitionAttributeMaps_.hasValue();
}

void RoadInstructionsLayer::resetTransitionAttributeMaps()
{
    m_transitionAttributeMaps_.reset();
}

::nds::instructions::instantiations::InstructionsTransitionAttributeSetList& RoadInstructionsLayer::getTransitionAttributeSets()
{
    return m_transitionAttributeSets_.value();
}

const ::nds::instructions::instantiations::InstructionsTransitionAttributeSetList& RoadInstructionsLayer::getTransitionAttributeSets() const
{
    return m_transitionAttributeSets_.value();
}

void RoadInstructionsLayer::setTransitionAttributeSets(const ::nds::instructions::instantiations::InstructionsTransitionAttributeSetList& transitionAttributeSets_)
{
    m_transitionAttributeSets_ = transitionAttributeSets_;
}

void RoadInstructionsLayer::setTransitionAttributeSets(::nds::instructions::instantiations::InstructionsTransitionAttributeSetList&& transitionAttributeSets_)
{
    m_transitionAttributeSets_ = ::std::move(transitionAttributeSets_);
}

bool RoadInstructionsLayer::isTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS);
}

bool RoadInstructionsLayer::isTransitionAttributeSetsSet() const
{
    return m_transitionAttributeSets_.hasValue();
}

void RoadInstructionsLayer::resetTransitionAttributeSets()
{
    m_transitionAttributeSets_.reset();
}

::nds::system::types::LayerType RoadInstructionsLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadInstructionsLayer::initPackingContext(RoadInstructionsLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        m_transitionAttributeMaps_.value().initPackingContext(context.getTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeSets_.value().initPackingContext(context.getTransitionAttributeSets());
    }
}

size_t RoadInstructionsLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_transitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadInstructionsLayer::bitSizeOf(RoadInstructionsLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_transitionAttributeMaps_.value().bitSizeOf(context.getTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeSets_.value().bitSizeOf(context.getTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadInstructionsLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_transitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadInstructionsLayer::initializeOffsets(RoadInstructionsLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_transitionAttributeMaps_.value().initializeOffsets(context.getTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeSets_.value().initializeOffsets(context.getTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadInstructionsLayer::operator==(const RoadInstructionsLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isTransitionAttributeMapsUsed() ? !other.isTransitionAttributeMapsUsed() : (m_transitionAttributeMaps_ == other.m_transitionAttributeMaps_)) &&
                (!isTransitionAttributeSetsUsed() ? !other.isTransitionAttributeSetsUsed() : (m_transitionAttributeSets_ == other.m_transitionAttributeSets_));
    }

    return true;
}

uint32_t RoadInstructionsLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMaps_);
    if (isTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeSets_);

    return result;
}

void RoadInstructionsLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_transitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadInstructionsLayer.transitionAttributeMaps: ") <<
                    m_transitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_transitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadInstructionsLayer.transitionAttributeSets: ") <<
                    m_transitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeSets_.value().write(out);
    }
}

void RoadInstructionsLayer::write(RoadInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_transitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadInstructionsLayer.transitionAttributeMaps: ") <<
                    m_transitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeMaps_.value().write(context.getTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_transitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadInstructionsLayer.transitionAttributeSets: ") <<
                    m_transitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeSets_.value().write(context.getTransitionAttributeSets(), out);
    }
}

::nds::instructions::metadata::RoadInstructionsLayerContent RoadInstructionsLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::instructions::metadata::RoadInstructionsLayerContent(in);
}

::nds::instructions::metadata::RoadInstructionsLayerContent RoadInstructionsLayer::readContent(RoadInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::instructions::metadata::RoadInstructionsLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift RoadInstructionsLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadInstructionsLayer::readShift(RoadInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList> RoadInstructionsLayer::readTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList>(::nds::instructions::instantiations::InstructionsTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList> RoadInstructionsLayer::readTransitionAttributeMaps(RoadInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList>(::nds::instructions::instantiations::InstructionsTransitionAttributeMapList(context.getTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList> RoadInstructionsLayer::readTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList>(::nds::instructions::instantiations::InstructionsTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList> RoadInstructionsLayer::readTransitionAttributeSets(RoadInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS) == ::nds::instructions::metadata::RoadInstructionsLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList>(::nds::instructions::instantiations::InstructionsTransitionAttributeSetList(context.getTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/instructions/layer/LaneInstructionsLayer.h>
#include <nds/instructions/metadata/LaneInstructionsLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace instructions
{
namespace layer
{

LaneInstructionsLayer::LaneInstructionsLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::instructions::metadata::LaneInstructionsLayerContent()),
        m_laneTransitionAttributeMaps_(::zserio::NullOpt),
        m_laneTransitionAttributeSets_(::zserio::NullOpt)
{
}

LaneInstructionsLayer::LaneInstructionsLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_laneTransitionAttributeMaps_(readLaneTransitionAttributeMaps(in, allocator)),
        m_laneTransitionAttributeSets_(readLaneTransitionAttributeSets(in, allocator))
{
}

LaneInstructionsLayer::LaneInstructionsLayer(LaneInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_laneTransitionAttributeMaps_(readLaneTransitionAttributeMaps(context, in, allocator)),
        m_laneTransitionAttributeSets_(readLaneTransitionAttributeSets(context, in, allocator))
{
}

LaneInstructionsLayer::LaneInstructionsLayer(const LaneInstructionsLayer& other) :
        m_content_(other.m_content_),
        m_laneTransitionAttributeMaps_(other.m_laneTransitionAttributeMaps_),
        m_laneTransitionAttributeSets_(other.m_laneTransitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneInstructionsLayer& LaneInstructionsLayer::operator=(const LaneInstructionsLayer& other)
{
    m_content_ = other.m_content_;
    m_laneTransitionAttributeMaps_ = other.m_laneTransitionAttributeMaps_;
    m_laneTransitionAttributeSets_ = other.m_laneTransitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneInstructionsLayer::LaneInstructionsLayer(LaneInstructionsLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_laneTransitionAttributeMaps_(::std::move(other.m_laneTransitionAttributeMaps_)),
        m_laneTransitionAttributeSets_(::std::move(other.m_laneTransitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneInstructionsLayer& LaneInstructionsLayer::operator=(LaneInstructionsLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_laneTransitionAttributeMaps_ = ::std::move(other.m_laneTransitionAttributeMaps_);
    m_laneTransitionAttributeSets_ = ::std::move(other.m_laneTransitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneInstructionsLayer::LaneInstructionsLayer(::zserio::PropagateAllocatorT,
        const LaneInstructionsLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneTransitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_laneTransitionAttributeMaps_, allocator)),
        m_laneTransitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_laneTransitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneInstructionsLayer::initializeChildren()
{
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
        m_laneTransitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
        m_laneTransitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::instructions::metadata::LaneInstructionsLayerContent LaneInstructionsLayer::getContent() const
{
    return m_content_;
}

void LaneInstructionsLayer::setContent(::nds::instructions::metadata::LaneInstructionsLayerContent content_)
{
    m_content_ = content_;
}

::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList& LaneInstructionsLayer::getLaneTransitionAttributeMaps()
{
    return m_laneTransitionAttributeMaps_.value();
}

const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList& LaneInstructionsLayer::getLaneTransitionAttributeMaps() const
{
    return m_laneTransitionAttributeMaps_.value();
}

void LaneInstructionsLayer::setLaneTransitionAttributeMaps(const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList& laneTransitionAttributeMaps_)
{
    m_laneTransitionAttributeMaps_ = laneTransitionAttributeMaps_;
}

void LaneInstructionsLayer::setLaneTransitionAttributeMaps(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList&& laneTransitionAttributeMaps_)
{
    m_laneTransitionAttributeMaps_ = ::std::move(laneTransitionAttributeMaps_);
}

bool LaneInstructionsLayer::isLaneTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS);
}

bool LaneInstructionsLayer::isLaneTransitionAttributeMapsSet() const
{
    return m_laneTransitionAttributeMaps_.hasValue();
}

void LaneInstructionsLayer::resetLaneTransitionAttributeMaps()
{
    m_laneTransitionAttributeMaps_.reset();
}

::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList& LaneInstructionsLayer::getLaneTransitionAttributeSets()
{
    return m_laneTransitionAttributeSets_.value();
}

const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList& LaneInstructionsLayer::getLaneTransitionAttributeSets() const
{
    return m_laneTransitionAttributeSets_.value();
}

void LaneInstructionsLayer::setLaneTransitionAttributeSets(const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList& laneTransitionAttributeSets_)
{
    m_laneTransitionAttributeSets_ = laneTransitionAttributeSets_;
}

void LaneInstructionsLayer::setLaneTransitionAttributeSets(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList&& laneTransitionAttributeSets_)
{
    m_laneTransitionAttributeSets_ = ::std::move(laneTransitionAttributeSets_);
}

bool LaneInstructionsLayer::isLaneTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS);
}

bool LaneInstructionsLayer::isLaneTransitionAttributeSetsSet() const
{
    return m_laneTransitionAttributeSets_.hasValue();
}

void LaneInstructionsLayer::resetLaneTransitionAttributeSets()
{
    m_laneTransitionAttributeSets_.reset();
}

::nds::system::types::LayerType LaneInstructionsLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void LaneInstructionsLayer::initPackingContext(LaneInstructionsLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        m_laneTransitionAttributeMaps_.value().initPackingContext(context.getLaneTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_laneTransitionAttributeSets_.value().initPackingContext(context.getLaneTransitionAttributeSets());
    }
}

size_t LaneInstructionsLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition += m_laneTransitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_laneTransitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneInstructionsLayer::bitSizeOf(LaneInstructionsLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition += m_laneTransitionAttributeMaps_.value().bitSizeOf(context.getLaneTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_laneTransitionAttributeSets_.value().bitSizeOf(context.getLaneTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneInstructionsLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition = m_laneTransitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_laneTransitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneInstructionsLayer::initializeOffsets(LaneInstructionsLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition = m_laneTransitionAttributeMaps_.value().initializeOffsets(context.getLaneTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_laneTransitionAttributeSets_.value().initializeOffsets(context.getLaneTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool LaneInstructionsLayer::operator==(const LaneInstructionsLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneTransitionAttributeMapsUsed() ? !other.isLaneTransitionAttributeMapsUsed() : (m_laneTransitionAttributeMaps_ == other.m_laneTransitionAttributeMaps_)) &&
                (!isLaneTransitionAttributeSetsUsed() ? !other.isLaneTransitionAttributeSetsUsed() : (m_laneTransitionAttributeSets_ == other.m_laneTransitionAttributeSets_));
    }

    return true;
}

uint32_t LaneInstructionsLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_laneTransitionAttributeMaps_);
    if (isLaneTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_laneTransitionAttributeSets_);

    return result;
}

void LaneInstructionsLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        // check parameters
        if (m_laneTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneInstructionsLayer.laneTransitionAttributeMaps: ") <<
                    m_laneTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneTransitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        // check parameters
        if (m_laneTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneInstructionsLayer.laneTransitionAttributeSets: ") <<
                    m_laneTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneTransitionAttributeSets_.value().write(out);
    }
}

void LaneInstructionsLayer::write(LaneInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        // check parameters
        if (m_laneTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneInstructionsLayer.laneTransitionAttributeMaps: ") <<
                    m_laneTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneTransitionAttributeMaps_.value().write(context.getLaneTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        // check parameters
        if (m_laneTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneInstructionsLayer.laneTransitionAttributeSets: ") <<
                    m_laneTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneTransitionAttributeSets_.value().write(context.getLaneTransitionAttributeSets(), out);
    }
}

::nds::instructions::metadata::LaneInstructionsLayerContent LaneInstructionsLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::instructions::metadata::LaneInstructionsLayerContent(in);
}

::nds::instructions::metadata::LaneInstructionsLayerContent LaneInstructionsLayer::readContent(LaneInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::instructions::metadata::LaneInstructionsLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList> LaneInstructionsLayer::readLaneTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList>(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList> LaneInstructionsLayer::readLaneTransitionAttributeMaps(LaneInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList>(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList(context.getLaneTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList> LaneInstructionsLayer::readLaneTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList>(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList> LaneInstructionsLayer::readLaneTransitionAttributeSets(LaneInstructionsLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::instructions::metadata::LaneInstructionsLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList>(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList(context.getLaneTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace instructions
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/instructions/layer/InstructionsImageLayer.h>
#include <nds/instructions/metadata/InstructionsImageLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace instructions
{
namespace layer
{

InstructionsImageLayer::InstructionsImageLayer(const allocator_type&) noexcept :
        m_content_(::nds::instructions::metadata::InstructionsImageLayerContent()),
        m_signpostImageList_(::zserio::NullOpt),
        m_junctionViewImageList_(::zserio::NullOpt)
{
}

InstructionsImageLayer::InstructionsImageLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_signpostImageList_(readSignpostImageList(in, allocator)),
        m_junctionViewImageList_(readJunctionViewImageList(in, allocator))
{
}

InstructionsImageLayer::InstructionsImageLayer(InstructionsImageLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_signpostImageList_(readSignpostImageList(context, in, allocator)),
        m_junctionViewImageList_(readJunctionViewImageList(context, in, allocator))
{
}

InstructionsImageLayer::InstructionsImageLayer(::zserio::PropagateAllocatorT,
        const InstructionsImageLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_signpostImageList_(::zserio::allocatorPropagatingCopy(other.m_signpostImageList_, allocator)),
        m_junctionViewImageList_(::zserio::allocatorPropagatingCopy(other.m_junctionViewImageList_, allocator))
{
}

::nds::instructions::metadata::InstructionsImageLayerContent InstructionsImageLayer::getContent() const
{
    return m_content_;
}

void InstructionsImageLayer::setContent(::nds::instructions::metadata::InstructionsImageLayerContent content_)
{
    m_content_ = content_;
}

::nds::instructions::types::SignpostImageList& InstructionsImageLayer::getSignpostImageList()
{
    return m_signpostImageList_.value();
}

const ::nds::instructions::types::SignpostImageList& InstructionsImageLayer::getSignpostImageList() const
{
    return m_signpostImageList_.value();
}

void InstructionsImageLayer::setSignpostImageList(const ::nds::instructions::types::SignpostImageList& signpostImageList_)
{
    m_signpostImageList_ = signpostImageList_;
}

void InstructionsImageLayer::setSignpostImageList(::nds::instructions::types::SignpostImageList&& signpostImageList_)
{
    m_signpostImageList_ = ::std::move(signpostImageList_);
}

bool InstructionsImageLayer::isSignpostImageListUsed() const
{
    return ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS);
}

bool InstructionsImageLayer::isSignpostImageListSet() const
{
    return m_signpostImageList_.hasValue();
}

void InstructionsImageLayer::resetSignpostImageList()
{
    m_signpostImageList_.reset();
}

::nds::instructions::types::JunctionViewImageList& InstructionsImageLayer::getJunctionViewImageList()
{
    return m_junctionViewImageList_.value();
}

const ::nds::instructions::types::JunctionViewImageList& InstructionsImageLayer::getJunctionViewImageList() const
{
    return m_junctionViewImageList_.value();
}

void InstructionsImageLayer::setJunctionViewImageList(const ::nds::instructions::types::JunctionViewImageList& junctionViewImageList_)
{
    m_junctionViewImageList_ = junctionViewImageList_;
}

void InstructionsImageLayer::setJunctionViewImageList(::nds::instructions::types::JunctionViewImageList&& junctionViewImageList_)
{
    m_junctionViewImageList_ = ::std::move(junctionViewImageList_);
}

bool InstructionsImageLayer::isJunctionViewImageListUsed() const
{
    return ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW);
}

bool InstructionsImageLayer::isJunctionViewImageListSet() const
{
    return m_junctionViewImageList_.hasValue();
}

void InstructionsImageLayer::resetJunctionViewImageList()
{
    m_junctionViewImageList_.reset();
}

::nds::system::types::LayerType InstructionsImageLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::GEOMETRY);
}

void InstructionsImageLayer::initPackingContext(InstructionsImageLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        m_signpostImageList_.value().initPackingContext(context.getSignpostImageList());
    }
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        m_junctionViewImageList_.value().initPackingContext(context.getJunctionViewImageList());
    }
}

size_t InstructionsImageLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        endBitPosition += m_signpostImageList_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        endBitPosition += m_junctionViewImageList_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t InstructionsImageLayer::bitSizeOf(InstructionsImageLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        endBitPosition += m_signpostImageList_.value().bitSizeOf(context.getSignpostImageList(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        endBitPosition += m_junctionViewImageList_.value().bitSizeOf(context.getJunctionViewImageList(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t InstructionsImageLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        endBitPosition = m_signpostImageList_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        endBitPosition = m_junctionViewImageList_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t InstructionsImageLayer::initializeOffsets(InstructionsImageLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        endBitPosition = m_signpostImageList_.value().initializeOffsets(context.getSignpostImageList(), endBitPosition);
    }
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        endBitPosition = m_junctionViewImageList_.value().initializeOffsets(context.getJunctionViewImageList(), endBitPosition);
    }

    return endBitPosition;
}

bool InstructionsImageLayer::operator==(const InstructionsImageLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isSignpostImageListUsed() ? !other.isSignpostImageListUsed() : (m_signpostImageList_ == other.m_signpostImageList_)) &&
                (!isJunctionViewImageListUsed() ? !other.isJunctionViewImageListUsed() : (m_junctionViewImageList_ == other.m_junctionViewImageList_));
    }

    return true;
}

uint32_t InstructionsImageLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isSignpostImageListUsed())
        result = ::zserio::calcHashCode(result, m_signpostImageList_);
    if (isJunctionViewImageListUsed())
        result = ::zserio::calcHashCode(result, m_junctionViewImageList_);

    return result;
}

void InstructionsImageLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        m_signpostImageList_.value().write(out);
    }
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        m_junctionViewImageList_.value().write(out);
    }
}

void InstructionsImageLayer::write(InstructionsImageLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        m_signpostImageList_.value().write(context.getSignpostImageList(), out);
    }
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        m_junctionViewImageList_.value().write(context.getJunctionViewImageList(), out);
    }
}

::nds::instructions::metadata::InstructionsImageLayerContent InstructionsImageLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::instructions::metadata::InstructionsImageLayerContent(in);
}

::nds::instructions::metadata::InstructionsImageLayerContent InstructionsImageLayer::readContent(InstructionsImageLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::instructions::metadata::InstructionsImageLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::instructions::types::SignpostImageList> InstructionsImageLayer::readSignpostImageList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::types::SignpostImageList>(::nds::instructions::types::SignpostImageList(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::types::SignpostImageList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::instructions::types::SignpostImageList> InstructionsImageLayer::readSignpostImageList(InstructionsImageLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::SIGNPOSTS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::types::SignpostImageList>(::nds::instructions::types::SignpostImageList(context.getSignpostImageList(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::types::SignpostImageList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::instructions::types::JunctionViewImageList> InstructionsImageLayer::readJunctionViewImageList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::types::JunctionViewImageList>(::nds::instructions::types::JunctionViewImageList(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::types::JunctionViewImageList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::instructions::types::JunctionViewImageList> InstructionsImageLayer::readJunctionViewImageList(InstructionsImageLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW) == ::nds::instructions::metadata::InstructionsImageLayerContent::Values::JUNCTION_VIEW)
    {
        return ::zserio::InplaceOptionalHolder<::nds::instructions::types::JunctionViewImageList>(::nds::instructions::types::JunctionViewImageList(context.getJunctionViewImageList(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::instructions::types::JunctionViewImageList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace instructions
} // namespace nds
