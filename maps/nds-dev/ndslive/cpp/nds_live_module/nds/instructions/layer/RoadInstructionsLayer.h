/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_LAYER_ROAD_INSTRUCTIONS_LAYER_H
#define NDS_INSTRUCTIONS_LAYER_ROAD_INSTRUCTIONS_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/instructions/instantiations/InstructionsTransitionAttributeMapList.h>
#include <nds/instructions/instantiations/InstructionsTransitionAttributeSetList.h>
#include <nds/instructions/metadata/RoadInstructionsLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace instructions
{
namespace layer
{

class RoadInstructionsLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::nds::instructions::instantiations::InstructionsTransitionAttributeMapList::ZserioPackingContext& getTransitionAttributeMaps()
        {
            return m_transitionAttributeMaps_;
        }

        ::nds::instructions::instantiations::InstructionsTransitionAttributeSetList::ZserioPackingContext& getTransitionAttributeSets()
        {
            return m_transitionAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::zserio::DeltaContext m_shift_;
        ::nds::instructions::instantiations::InstructionsTransitionAttributeMapList::ZserioPackingContext m_transitionAttributeMaps_;
        ::nds::instructions::instantiations::InstructionsTransitionAttributeSetList::ZserioPackingContext m_transitionAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadInstructionsLayer() noexcept :
            RoadInstructionsLayer(allocator_type())
    {}

    explicit RoadInstructionsLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_transitionAttributeMaps = ::nds::instructions::instantiations::InstructionsTransitionAttributeMapList,
            typename ZSERIO_T_transitionAttributeSets = ::nds::instructions::instantiations::InstructionsTransitionAttributeSetList>
    RoadInstructionsLayer(
            ::nds::instructions::metadata::RoadInstructionsLayerContent content_,
            ::nds::core::geometry::CoordShift shift_,
            ZSERIO_T_transitionAttributeMaps&& transitionAttributeMaps_,
            ZSERIO_T_transitionAttributeSets&& transitionAttributeSets_,
            const allocator_type& allocator = allocator_type()) :
            RoadInstructionsLayer(allocator)
    {
        m_content_ = content_;
        m_shift_ = shift_;
        m_transitionAttributeMaps_ = ::std::forward<ZSERIO_T_transitionAttributeMaps>(transitionAttributeMaps_);
        m_transitionAttributeSets_ = ::std::forward<ZSERIO_T_transitionAttributeSets>(transitionAttributeSets_);
    }

    explicit RoadInstructionsLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadInstructionsLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadInstructionsLayer() = default;

    RoadInstructionsLayer(const RoadInstructionsLayer& other);
    RoadInstructionsLayer& operator=(const RoadInstructionsLayer& other);

    RoadInstructionsLayer(RoadInstructionsLayer&& other);
    RoadInstructionsLayer& operator=(RoadInstructionsLayer&& other);

    RoadInstructionsLayer(::zserio::PropagateAllocatorT,
            const RoadInstructionsLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::instructions::metadata::RoadInstructionsLayerContent getContent() const;
    void setContent(::nds::instructions::metadata::RoadInstructionsLayerContent content_);

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    const ::nds::instructions::instantiations::InstructionsTransitionAttributeMapList& getTransitionAttributeMaps() const;
    ::nds::instructions::instantiations::InstructionsTransitionAttributeMapList& getTransitionAttributeMaps();
    void setTransitionAttributeMaps(const ::nds::instructions::instantiations::InstructionsTransitionAttributeMapList& transitionAttributeMaps_);
    void setTransitionAttributeMaps(::nds::instructions::instantiations::InstructionsTransitionAttributeMapList&& transitionAttributeMaps_);
    bool isTransitionAttributeMapsUsed() const;
    bool isTransitionAttributeMapsSet() const;
    void resetTransitionAttributeMaps();

    const ::nds::instructions::instantiations::InstructionsTransitionAttributeSetList& getTransitionAttributeSets() const;
    ::nds::instructions::instantiations::InstructionsTransitionAttributeSetList& getTransitionAttributeSets();
    void setTransitionAttributeSets(const ::nds::instructions::instantiations::InstructionsTransitionAttributeSetList& transitionAttributeSets_);
    void setTransitionAttributeSets(::nds::instructions::instantiations::InstructionsTransitionAttributeSetList&& transitionAttributeSets_);
    bool isTransitionAttributeSetsUsed() const;
    bool isTransitionAttributeSetsSet() const;
    void resetTransitionAttributeSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadInstructionsLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::instructions::metadata::RoadInstructionsLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::instructions::metadata::RoadInstructionsLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList> readTransitionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList> readTransitionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList> readTransitionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList> readTransitionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::instructions::metadata::RoadInstructionsLayerContent m_content_;
    ::nds::core::geometry::CoordShift m_shift_;
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeMapList> m_transitionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsTransitionAttributeSetList> m_transitionAttributeSets_;
};

} // namespace layer
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_LAYER_ROAD_INSTRUCTIONS_LAYER_H
