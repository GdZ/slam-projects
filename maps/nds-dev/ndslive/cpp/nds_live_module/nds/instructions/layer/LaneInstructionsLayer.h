/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_INSTRUCTIONS_LAYER_LANE_INSTRUCTIONS_LAYER_H
#define NDS_INSTRUCTIONS_LAYER_LANE_INSTRUCTIONS_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/instructions/instantiations/InstructionsLaneTransitionAttributeMapList.h>
#include <nds/instructions/instantiations/InstructionsLaneTransitionAttributeSetList.h>
#include <nds/instructions/metadata/LaneInstructionsLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace instructions
{
namespace layer
{

class LaneInstructionsLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList::ZserioPackingContext& getLaneTransitionAttributeMaps()
        {
            return m_laneTransitionAttributeMaps_;
        }

        ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList::ZserioPackingContext& getLaneTransitionAttributeSets()
        {
            return m_laneTransitionAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList::ZserioPackingContext m_laneTransitionAttributeMaps_;
        ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList::ZserioPackingContext m_laneTransitionAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneInstructionsLayer() noexcept :
            LaneInstructionsLayer(allocator_type())
    {}

    explicit LaneInstructionsLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneTransitionAttributeMaps = ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList,
            typename ZSERIO_T_laneTransitionAttributeSets = ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList>
    LaneInstructionsLayer(
            ::nds::instructions::metadata::LaneInstructionsLayerContent content_,
            ZSERIO_T_laneTransitionAttributeMaps&& laneTransitionAttributeMaps_,
            ZSERIO_T_laneTransitionAttributeSets&& laneTransitionAttributeSets_,
            const allocator_type& allocator = allocator_type()) :
            LaneInstructionsLayer(allocator)
    {
        m_content_ = content_;
        m_laneTransitionAttributeMaps_ = ::std::forward<ZSERIO_T_laneTransitionAttributeMaps>(laneTransitionAttributeMaps_);
        m_laneTransitionAttributeSets_ = ::std::forward<ZSERIO_T_laneTransitionAttributeSets>(laneTransitionAttributeSets_);
    }

    explicit LaneInstructionsLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneInstructionsLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneInstructionsLayer() = default;

    LaneInstructionsLayer(const LaneInstructionsLayer& other);
    LaneInstructionsLayer& operator=(const LaneInstructionsLayer& other);

    LaneInstructionsLayer(LaneInstructionsLayer&& other);
    LaneInstructionsLayer& operator=(LaneInstructionsLayer&& other);

    LaneInstructionsLayer(::zserio::PropagateAllocatorT,
            const LaneInstructionsLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::instructions::metadata::LaneInstructionsLayerContent getContent() const;
    void setContent(::nds::instructions::metadata::LaneInstructionsLayerContent content_);

    const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList& getLaneTransitionAttributeMaps() const;
    ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList& getLaneTransitionAttributeMaps();
    void setLaneTransitionAttributeMaps(const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList& laneTransitionAttributeMaps_);
    void setLaneTransitionAttributeMaps(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList&& laneTransitionAttributeMaps_);
    bool isLaneTransitionAttributeMapsUsed() const;
    bool isLaneTransitionAttributeMapsSet() const;
    void resetLaneTransitionAttributeMaps();

    const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList& getLaneTransitionAttributeSets() const;
    ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList& getLaneTransitionAttributeSets();
    void setLaneTransitionAttributeSets(const ::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList& laneTransitionAttributeSets_);
    void setLaneTransitionAttributeSets(::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList&& laneTransitionAttributeSets_);
    bool isLaneTransitionAttributeSetsUsed() const;
    bool isLaneTransitionAttributeSetsSet() const;
    void resetLaneTransitionAttributeSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneInstructionsLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::instructions::metadata::LaneInstructionsLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::instructions::metadata::LaneInstructionsLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList> readLaneTransitionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList> readLaneTransitionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList> readLaneTransitionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList> readLaneTransitionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::instructions::metadata::LaneInstructionsLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeMapList> m_laneTransitionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::instructions::instantiations::InstructionsLaneTransitionAttributeSetList> m_laneTransitionAttributeSets_;
};

} // namespace layer
} // namespace instructions
} // namespace nds

#endif // NDS_INSTRUCTIONS_LAYER_LANE_INSTRUCTIONS_LAYER_H
