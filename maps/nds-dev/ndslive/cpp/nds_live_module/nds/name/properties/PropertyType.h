/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_PROPERTIES_PROPERTY_TYPE_H
#define NDS_NAME_PROPERTIES_PROPERTY_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace name
{
namespace properties
{

enum class PropertyType : uint16_t
{
    CORE = UINT16_C(0),
    LANGUAGE_CODE = UINT16_C(1),
    USAGE_TYPE = UINT16_C(2),
    DETAIL_TYPE = UINT16_C(3),
    PREFERRED_NAME = UINT16_C(4),
    ADDRESS_ONLY = UINT16_C(5),
    ROAD_NAME_ID = UINT16_C(6),
    NOT_ADDRESS_RELEVANT = UINT16_C(7),
    ADDRESS_FORMAT_ID = UINT16_C(8),
    ROAD_NUMBER_PREFIX = UINT16_C(9),
    ROAD_NUMBER_SUFFIX = UINT16_C(10),
    ROAD_ADDRESS_POINT = UINT16_C(11),
    LANE_ADDRESS_POINT = UINT16_C(12),
    HOUSE_POSITION = UINT16_C(13),
    PHONETIC_TRANSCRIPTION = UINT16_C(14),
    PREFER_ROAD_NAME_OVER_ROAD_NUMBER = UINT16_C(15)
};

} // namespace properties
} // namespace name
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for PropertyType enumeration.
template <>
struct EnumTraits<::nds::name::properties::PropertyType>
{
    static constexpr ::std::array<const char*, 16> names =
    {{
        "CORE",
        "LANGUAGE_CODE",
        "USAGE_TYPE",
        "DETAIL_TYPE",
        "PREFERRED_NAME",
        "ADDRESS_ONLY",
        "ROAD_NAME_ID",
        "NOT_ADDRESS_RELEVANT",
        "ADDRESS_FORMAT_ID",
        "ROAD_NUMBER_PREFIX",
        "ROAD_NUMBER_SUFFIX",
        "ROAD_ADDRESS_POINT",
        "LANE_ADDRESS_POINT",
        "HOUSE_POSITION",
        "PHONETIC_TRANSCRIPTION",
        "PREFER_ROAD_NAME_OVER_ROAD_NUMBER"
    }};

    static constexpr ::std::array<::nds::name::properties::PropertyType, 16> values =
    {{
        ::nds::name::properties::PropertyType::CORE,
        ::nds::name::properties::PropertyType::LANGUAGE_CODE,
        ::nds::name::properties::PropertyType::USAGE_TYPE,
        ::nds::name::properties::PropertyType::DETAIL_TYPE,
        ::nds::name::properties::PropertyType::PREFERRED_NAME,
        ::nds::name::properties::PropertyType::ADDRESS_ONLY,
        ::nds::name::properties::PropertyType::ROAD_NAME_ID,
        ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT,
        ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID,
        ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX,
        ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX,
        ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT,
        ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT,
        ::nds::name::properties::PropertyType::HOUSE_POSITION,
        ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION,
        ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER
    }};

    static constexpr const char* enumName = "PropertyType";
};

template <>
size_t enumToOrdinal<::nds::name::properties::PropertyType>(::nds::name::properties::PropertyType value);

template <>
::nds::name::properties::PropertyType valueToEnum<::nds::name::properties::PropertyType>(
        typename ::std::underlying_type<::nds::name::properties::PropertyType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::name::properties::PropertyType>(::nds::name::properties::PropertyType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::name::properties::PropertyType>(::zserio::DeltaContext& context, ::nds::name::properties::PropertyType value);

template <>
size_t bitSizeOf<::nds::name::properties::PropertyType>(::nds::name::properties::PropertyType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::name::properties::PropertyType>(::zserio::DeltaContext& context, ::nds::name::properties::PropertyType value);

template <>
size_t initializeOffsets<::nds::name::properties::PropertyType>(size_t bitPosition, ::nds::name::properties::PropertyType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::name::properties::PropertyType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::name::properties::PropertyType value);

template <>
::nds::name::properties::PropertyType read<::nds::name::properties::PropertyType>(::zserio::BitStreamReader& in);

template <>
::nds::name::properties::PropertyType read<::nds::name::properties::PropertyType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::name::properties::PropertyType>(::zserio::BitStreamWriter& out, ::nds::name::properties::PropertyType value);

template <>
void write<::zserio::DeltaContext, ::nds::name::properties::PropertyType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::name::properties::PropertyType value);

} // namespace zserio

#endif // NDS_NAME_PROPERTIES_PROPERTY_TYPE_H
