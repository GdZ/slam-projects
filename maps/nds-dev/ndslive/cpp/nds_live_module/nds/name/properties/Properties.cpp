/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/name/properties/PropertyType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PropertyType enumeration.
constexpr ::std::array<const char*, 16> EnumTraits<::nds::name::properties::PropertyType>::names;
constexpr ::std::array<::nds::name::properties::PropertyType, 16> EnumTraits<::nds::name::properties::PropertyType>::values;
constexpr const char* EnumTraits<::nds::name::properties::PropertyType>::enumName;

template <>
size_t enumToOrdinal(::nds::name::properties::PropertyType value)
{
    switch (value)
    {
    case ::nds::name::properties::PropertyType::CORE:
        return 0;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        return 1;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        return 2;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        return 3;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        return 4;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        return 5;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        return 6;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        return 7;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        return 8;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        return 9;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        return 10;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        return 11;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        return 12;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        return 13;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        return 14;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        return 15;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PropertyType: ") <<
                static_cast<typename ::std::underlying_type<::nds::name::properties::PropertyType>::type>(value) << "!";
    }
}

template <>
::nds::name::properties::PropertyType valueToEnum(
        typename ::std::underlying_type<::nds::name::properties::PropertyType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
        return static_cast<::nds::name::properties::PropertyType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PropertyType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::name::properties::PropertyType>(::nds::name::properties::PropertyType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::name::properties::PropertyType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::name::properties::PropertyType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::name::properties::PropertyType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::name::properties::PropertyType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::name::properties::PropertyType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::name::properties::PropertyType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::name::properties::PropertyType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::name::properties::PropertyType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::name::properties::PropertyType>(
            static_cast<typename ::std::underlying_type<::nds::name::properties::PropertyType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::name::properties::PropertyType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::name::properties::PropertyType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::name::properties::PropertyType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::name::properties::PropertyType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::name::properties::PropertyType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::name::properties::PropertyType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/properties/NamePropertyType.h>
#include <nds/name/properties/PropertyType.h>

namespace nds
{
namespace name
{
namespace properties
{

NamePropertyType::NamePropertyType(const allocator_type&) noexcept :
        m_type_(::nds::name::properties::PropertyType()),
        m_coreType_(::zserio::NullOpt)
{
}

NamePropertyType::NamePropertyType(::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(in)),
        m_coreType_(readCoreType(in))
{
}

NamePropertyType::NamePropertyType(NamePropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(context, in)),
        m_coreType_(readCoreType(context, in))
{
}

NamePropertyType::NamePropertyType(::zserio::PropagateAllocatorT,
        const NamePropertyType& other, const allocator_type& allocator) :
        m_type_(::zserio::allocatorPropagatingCopy(other.m_type_, allocator)),
        m_coreType_(::zserio::allocatorPropagatingCopy(other.m_coreType_, allocator))
{
}

::nds::name::properties::PropertyType NamePropertyType::getType() const
{
    return m_type_;
}

void NamePropertyType::setType(::nds::name::properties::PropertyType type_)
{
    m_type_ = type_;
}

::nds::core::properties::CorePropertyType NamePropertyType::getCoreType() const
{
    return m_coreType_.value();
}

void NamePropertyType::setCoreType(::nds::core::properties::CorePropertyType coreType_)
{
    m_coreType_ = coreType_;
}

bool NamePropertyType::isCoreTypeUsed() const
{
    return (getType() == ::nds::name::properties::PropertyType::CORE);
}

bool NamePropertyType::isCoreTypeSet() const
{
    return m_coreType_.hasValue();
}

void NamePropertyType::resetCoreType()
{
    m_coreType_.reset();
}

void NamePropertyType::initPackingContext(NamePropertyType::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getType(), m_type_);
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        ::zserio::initPackingContext(context.getCoreType(), m_coreType_.value());
    }
}

size_t NamePropertyType::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_type_);
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition += ::zserio::bitSizeOf(m_coreType_.value());
    }

    return endBitPosition - bitPosition;
}

size_t NamePropertyType::bitSizeOf(NamePropertyType::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getType(), m_type_);
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition += ::zserio::bitSizeOf(context.getCoreType(), m_coreType_.value());
    }

    return endBitPosition - bitPosition;
}

size_t NamePropertyType::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_type_);
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_coreType_.value());
    }

    return endBitPosition;
}

size_t NamePropertyType::initializeOffsets(NamePropertyType::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getType(), endBitPosition,
        m_type_);
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition = ::zserio::initializeOffsets(context.getCoreType(), endBitPosition,
        m_coreType_.value());
    }

    return endBitPosition;
}

bool NamePropertyType::operator==(const NamePropertyType& other) const
{
    if (this != &other)
    {
        return
                (m_type_ == other.m_type_) &&
                (!isCoreTypeUsed() ? !other.isCoreTypeUsed() : (m_coreType_ == other.m_coreType_));
    }

    return true;
}

uint32_t NamePropertyType::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_type_);
    if (isCoreTypeUsed())
        result = ::zserio::calcHashCode(result, m_coreType_);

    return result;
}

void NamePropertyType::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_type_);
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        ::zserio::write(out, m_coreType_.value());
    }
}

void NamePropertyType::write(NamePropertyType::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getType(), out, m_type_);
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        ::zserio::write(context.getCoreType(), out, m_coreType_.value());
    }
}

::nds::name::properties::PropertyType NamePropertyType::readType(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::name::properties::PropertyType>(in);
}

::nds::name::properties::PropertyType NamePropertyType::readType(NamePropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::name::properties::PropertyType>(context.getType(), in);
}
::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> NamePropertyType::readCoreType(::zserio::BitStreamReader& in)
{
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::read<::nds::core::properties::CorePropertyType>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> NamePropertyType::readCoreType(NamePropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getType() == ::nds::name::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::read<::nds::core::properties::CorePropertyType>(context.getCoreType(), in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::NullOpt);
}

} // namespace properties
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/properties/NamePropertyValue.h>
#include <nds/name/properties/PropertyType.h>

namespace nds
{
namespace name
{
namespace properties
{

NamePropertyValue::NamePropertyValue(const allocator_type&) noexcept :
        m_isInitialized(false),
        m_value_(::zserio::NullOpt),
        m_coreValue_(::zserio::NullOpt)
{
}

NamePropertyValue::NamePropertyValue(::zserio::BitStreamReader& in,
        ::nds::name::properties::NamePropertyType& type_, const allocator_type& allocator) :
        m_type_(&type_),
        m_isInitialized(true),
        m_value_(readValue(in, allocator)),
        m_coreValue_(readCoreValue(in, allocator))
{
}

NamePropertyValue::NamePropertyValue(NamePropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::name::properties::NamePropertyType& type_, const allocator_type& allocator) :
        m_type_(&type_),
        m_isInitialized(true),
        m_value_(readValue(context, in, allocator)),
        m_coreValue_(readCoreValue(context, in, allocator))
{
}

NamePropertyValue::NamePropertyValue(const NamePropertyValue& other) :
        m_value_(other.m_value_),
        m_coreValue_(other.m_coreValue_)
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

NamePropertyValue& NamePropertyValue::operator=(const NamePropertyValue& other)
{
    m_value_ = other.m_value_;
    m_coreValue_ = other.m_coreValue_;
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;

    return *this;
}

NamePropertyValue::NamePropertyValue(NamePropertyValue&& other) :
        m_value_(::std::move(other.m_value_)),
        m_coreValue_(::std::move(other.m_coreValue_))
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

NamePropertyValue& NamePropertyValue::operator=(NamePropertyValue&& other)
{
    m_value_ = ::std::move(other.m_value_);
    m_coreValue_ = ::std::move(other.m_coreValue_);
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;

    return *this;
}

NamePropertyValue::NamePropertyValue(::zserio::PropagateAllocatorT,
        const NamePropertyValue& other, const allocator_type& allocator) :
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator)),
        m_coreValue_(::zserio::allocatorPropagatingCopy(other.m_coreValue_, allocator))
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

void NamePropertyValue::initialize(
        ::nds::name::properties::NamePropertyType& type_)
{
    m_type_ = &type_;
    m_isInitialized = true;

    initializeChildren();
}

bool NamePropertyValue::isInitialized() const
{
    return m_isInitialized;
}

void NamePropertyValue::initializeChildren()
{
    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
        m_value_.value().initialize(static_cast<::nds::name::properties::PropertyType>(getType().getType()));
    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
        m_coreValue_.value().initialize(static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()));
}

::nds::name::properties::NamePropertyType& NamePropertyValue::getType()
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'NamePropertyValue' is not initialized!");

    return *m_type_;
}

const ::nds::name::properties::NamePropertyType& NamePropertyValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'NamePropertyValue' is not initialized!");

    return *m_type_;
}

::nds::name::properties::PropertyValue& NamePropertyValue::getValue()
{
    return m_value_.value();
}

const ::nds::name::properties::PropertyValue& NamePropertyValue::getValue() const
{
    return m_value_.value();
}

void NamePropertyValue::setValue(const ::nds::name::properties::PropertyValue& value_)
{
    m_value_ = value_;
}

void NamePropertyValue::setValue(::nds::name::properties::PropertyValue&& value_)
{
    m_value_ = ::std::move(value_);
}

bool NamePropertyValue::isValueUsed() const
{
    return (getType().getType() != ::nds::name::properties::PropertyType::CORE);
}

bool NamePropertyValue::isValueSet() const
{
    return m_value_.hasValue();
}

void NamePropertyValue::resetValue()
{
    m_value_.reset();
}

::nds::core::properties::CorePropertyValue& NamePropertyValue::getCoreValue()
{
    return m_coreValue_.value();
}

const ::nds::core::properties::CorePropertyValue& NamePropertyValue::getCoreValue() const
{
    return m_coreValue_.value();
}

void NamePropertyValue::setCoreValue(const ::nds::core::properties::CorePropertyValue& coreValue_)
{
    m_coreValue_ = coreValue_;
}

void NamePropertyValue::setCoreValue(::nds::core::properties::CorePropertyValue&& coreValue_)
{
    m_coreValue_ = ::std::move(coreValue_);
}

bool NamePropertyValue::isCoreValueUsed() const
{
    return (getType().getType() == ::nds::name::properties::PropertyType::CORE);
}

bool NamePropertyValue::isCoreValueSet() const
{
    return m_coreValue_.hasValue();
}

void NamePropertyValue::resetCoreValue()
{
    m_coreValue_.reset();
}

void NamePropertyValue::initPackingContext(NamePropertyValue::ZserioPackingContext& context) const
{
    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        m_value_.value().initPackingContext(context.getValue());
    }
    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        m_coreValue_.value().initPackingContext(context.getCoreValue());
    }
}

size_t NamePropertyValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition += m_value_.value().bitSizeOf(endBitPosition);
    }
    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition += m_coreValue_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t NamePropertyValue::bitSizeOf(NamePropertyValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition += m_value_.value().bitSizeOf(context.getValue(), endBitPosition);
    }
    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition += m_coreValue_.value().bitSizeOf(context.getCoreValue(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t NamePropertyValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition = m_value_.value().initializeOffsets(endBitPosition);
    }
    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition = m_coreValue_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t NamePropertyValue::initializeOffsets(NamePropertyValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition = m_value_.value().initializeOffsets(context.getValue(), endBitPosition);
    }
    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        endBitPosition = m_coreValue_.value().initializeOffsets(context.getCoreValue(), endBitPosition);
    }

    return endBitPosition;
}

bool NamePropertyValue::operator==(const NamePropertyValue& other) const
{
    if (this != &other)
    {
        return
                (getType() == other.getType()) &&
                (!isValueUsed() ? !other.isValueUsed() : (m_value_ == other.m_value_)) &&
                (!isCoreValueUsed() ? !other.isCoreValueUsed() : (m_coreValue_ == other.m_coreValue_));
    }

    return true;
}

uint32_t NamePropertyValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (isValueUsed())
        result = ::zserio::calcHashCode(result, m_value_);
    if (isCoreValueUsed())
        result = ::zserio::calcHashCode(result, m_coreValue_);

    return result;
}

void NamePropertyValue::write(::zserio::BitStreamWriter& out) const
{
    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_value_.value().getType() != static_cast<::nds::name::properties::PropertyType>(getType().getType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field NamePropertyValue.value: ") <<
                    m_value_.value().getType() << " != " << static_cast<::nds::name::properties::PropertyType>(getType().getType()) << "!";
        }
        m_value_.value().write(out);
    }

    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_coreValue_.value().getType() != static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field NamePropertyValue.coreValue: ") <<
                    m_coreValue_.value().getType() << " != " << static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()) << "!";
        }
        m_coreValue_.value().write(out);
    }
}

void NamePropertyValue::write(NamePropertyValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_value_.value().getType() != static_cast<::nds::name::properties::PropertyType>(getType().getType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field NamePropertyValue.value: ") <<
                    m_value_.value().getType() << " != " << static_cast<::nds::name::properties::PropertyType>(getType().getType()) << "!";
        }
        m_value_.value().write(context.getValue(), out);
    }

    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_coreValue_.value().getType() != static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field NamePropertyValue.coreValue: ") <<
                    m_coreValue_.value().getType() << " != " << static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()) << "!";
        }
        m_coreValue_.value().write(context.getCoreValue(), out);
    }
}

::zserio::InplaceOptionalHolder<::nds::name::properties::PropertyValue> NamePropertyValue::readValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::properties::PropertyValue>(::nds::name::properties::PropertyValue(in, static_cast<::nds::name::properties::PropertyType>(getType().getType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::properties::PropertyValue>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::properties::PropertyValue> NamePropertyValue::readValue(NamePropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getType().getType() != ::nds::name::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::properties::PropertyValue>(::nds::name::properties::PropertyValue(context.getValue(), in, static_cast<::nds::name::properties::PropertyType>(getType().getType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::properties::PropertyValue>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> NamePropertyValue::readCoreValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::nds::core::properties::CorePropertyValue(in, static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> NamePropertyValue::readCoreValue(NamePropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getType().getType() == ::nds::name::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::nds::core::properties::CorePropertyValue(context.getCoreValue(), in, static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::zserio::NullOpt);
}

} // namespace properties
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/name/properties/PropertyValue.h>

namespace nds
{
namespace name
{
namespace properties
{

PropertyValue::PropertyValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

PropertyValue::PropertyValue(::zserio::BitStreamReader& in,
        ::nds::name::properties::PropertyType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

PropertyValue::PropertyValue(PropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::name::properties::PropertyType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

PropertyValue::PropertyValue(const PropertyValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PropertyValue& PropertyValue::operator=(const PropertyValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PropertyValue::PropertyValue(PropertyValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PropertyValue& PropertyValue::operator=(PropertyValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PropertyValue::PropertyValue(::zserio::PropagateAllocatorT,
        const PropertyValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void PropertyValue::initialize(
        ::nds::name::properties::PropertyType type_)
{
    m_type_ = type_;
    m_isInitialized = true;

    initializeChildren();
}

bool PropertyValue::isInitialized() const
{
    return m_isInitialized;
}

void PropertyValue::initializeChildren()
{
    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        break;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        break;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        break;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        break;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        break;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        break;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        m_objectChoice.get<::nds::name::types::RoadAddressPoint>().initializeChildren();
        break;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        m_objectChoice.get<::nds::name::types::LaneAddressPoint>().initializeChildren();
        break;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        m_objectChoice.get<::nds::name::types::HousePosition>().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
        break;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        break;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::nds::name::properties::PropertyType PropertyValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PropertyValue' is not initialized!");

    return m_type_;
}

::nds::core::types::LanguageCode PropertyValue::getLanguageCode() const
{
    return m_objectChoice.get<::nds::core::types::LanguageCode>();
}

void PropertyValue::setLanguageCode(::nds::core::types::LanguageCode languageCode_)
{
    m_objectChoice = languageCode_;
}

::nds::name::types::NameUsageType PropertyValue::getUsageType() const
{
    return m_objectChoice.get<::nds::name::types::NameUsageType>();
}

void PropertyValue::setUsageType(::nds::name::types::NameUsageType usageType_)
{
    m_objectChoice = usageType_;
}

::nds::name::types::NameDetailType PropertyValue::getDetailType() const
{
    return m_objectChoice.get<::nds::name::types::NameDetailType>();
}

void PropertyValue::setDetailType(::nds::name::types::NameDetailType detailType_)
{
    m_objectChoice = detailType_;
}

::nds::name::types::PreferredName& PropertyValue::getPreferredName()
{
    return m_objectChoice.get<::nds::name::types::PreferredName>();
}

const ::nds::name::types::PreferredName& PropertyValue::getPreferredName() const
{
    return m_objectChoice.get<::nds::name::types::PreferredName>();
}

void PropertyValue::setPreferredName(const ::nds::name::types::PreferredName& preferredName_)
{
    m_objectChoice = preferredName_;
}

void PropertyValue::setPreferredName(::nds::name::types::PreferredName&& preferredName_)
{
    m_objectChoice = ::std::move(preferredName_);
}

::nds::name::types::AddressOnly& PropertyValue::getAddressOnly()
{
    return m_objectChoice.get<::nds::name::types::AddressOnly>();
}

const ::nds::name::types::AddressOnly& PropertyValue::getAddressOnly() const
{
    return m_objectChoice.get<::nds::name::types::AddressOnly>();
}

void PropertyValue::setAddressOnly(const ::nds::name::types::AddressOnly& addressOnly_)
{
    m_objectChoice = addressOnly_;
}

void PropertyValue::setAddressOnly(::nds::name::types::AddressOnly&& addressOnly_)
{
    m_objectChoice = ::std::move(addressOnly_);
}

::nds::name::types::RoadNameId PropertyValue::getRoadNameId() const
{
    return m_objectChoice.get<::nds::name::types::RoadNameId>();
}

void PropertyValue::setRoadNameId(::nds::name::types::RoadNameId roadNameId_)
{
    m_objectChoice = roadNameId_;
}

::nds::name::types::NotAddressRelevant& PropertyValue::getNotAddressRelevant()
{
    return m_objectChoice.get<::nds::name::types::NotAddressRelevant>();
}

const ::nds::name::types::NotAddressRelevant& PropertyValue::getNotAddressRelevant() const
{
    return m_objectChoice.get<::nds::name::types::NotAddressRelevant>();
}

void PropertyValue::setNotAddressRelevant(const ::nds::name::types::NotAddressRelevant& notAddressRelevant_)
{
    m_objectChoice = notAddressRelevant_;
}

void PropertyValue::setNotAddressRelevant(::nds::name::types::NotAddressRelevant&& notAddressRelevant_)
{
    m_objectChoice = ::std::move(notAddressRelevant_);
}

::nds::name::types::AddressFormatId PropertyValue::getAddressFormatId() const
{
    return m_objectChoice.get<::nds::name::types::AddressFormatId>();
}

void PropertyValue::setAddressFormatId(::nds::name::types::AddressFormatId addressFormatId_)
{
    m_objectChoice = addressFormatId_;
}

::nds::name::types::RoadNumberPrefix& PropertyValue::getRoadNumberPrefix()
{
    return m_objectChoice.get<::nds::name::types::RoadNumberPrefix>();
}

const ::nds::name::types::RoadNumberPrefix& PropertyValue::getRoadNumberPrefix() const
{
    return m_objectChoice.get<::nds::name::types::RoadNumberPrefix>();
}

void PropertyValue::setRoadNumberPrefix(const ::nds::name::types::RoadNumberPrefix& roadNumberPrefix_)
{
    m_objectChoice = roadNumberPrefix_;
}

void PropertyValue::setRoadNumberPrefix(::nds::name::types::RoadNumberPrefix&& roadNumberPrefix_)
{
    m_objectChoice = ::std::move(roadNumberPrefix_);
}

::nds::name::types::RoadNumberSuffix& PropertyValue::getRoadNumberSuffix()
{
    return m_objectChoice.get<::nds::name::types::RoadNumberSuffix>();
}

const ::nds::name::types::RoadNumberSuffix& PropertyValue::getRoadNumberSuffix() const
{
    return m_objectChoice.get<::nds::name::types::RoadNumberSuffix>();
}

void PropertyValue::setRoadNumberSuffix(const ::nds::name::types::RoadNumberSuffix& roadNumberSuffix_)
{
    m_objectChoice = roadNumberSuffix_;
}

void PropertyValue::setRoadNumberSuffix(::nds::name::types::RoadNumberSuffix&& roadNumberSuffix_)
{
    m_objectChoice = ::std::move(roadNumberSuffix_);
}

::nds::name::types::RoadAddressPoint& PropertyValue::getRoadAddressPoint()
{
    return m_objectChoice.get<::nds::name::types::RoadAddressPoint>();
}

const ::nds::name::types::RoadAddressPoint& PropertyValue::getRoadAddressPoint() const
{
    return m_objectChoice.get<::nds::name::types::RoadAddressPoint>();
}

void PropertyValue::setRoadAddressPoint(const ::nds::name::types::RoadAddressPoint& roadAddressPoint_)
{
    m_objectChoice = roadAddressPoint_;
}

void PropertyValue::setRoadAddressPoint(::nds::name::types::RoadAddressPoint&& roadAddressPoint_)
{
    m_objectChoice = ::std::move(roadAddressPoint_);
}

::nds::name::types::LaneAddressPoint& PropertyValue::getLaneAddressPoint()
{
    return m_objectChoice.get<::nds::name::types::LaneAddressPoint>();
}

const ::nds::name::types::LaneAddressPoint& PropertyValue::getLaneAddressPoint() const
{
    return m_objectChoice.get<::nds::name::types::LaneAddressPoint>();
}

void PropertyValue::setLaneAddressPoint(const ::nds::name::types::LaneAddressPoint& laneAddressPoint_)
{
    m_objectChoice = laneAddressPoint_;
}

void PropertyValue::setLaneAddressPoint(::nds::name::types::LaneAddressPoint&& laneAddressPoint_)
{
    m_objectChoice = ::std::move(laneAddressPoint_);
}

::nds::name::types::HousePosition& PropertyValue::getHousePosition()
{
    return m_objectChoice.get<::nds::name::types::HousePosition>();
}

const ::nds::name::types::HousePosition& PropertyValue::getHousePosition() const
{
    return m_objectChoice.get<::nds::name::types::HousePosition>();
}

void PropertyValue::setHousePosition(const ::nds::name::types::HousePosition& housePosition_)
{
    m_objectChoice = housePosition_;
}

void PropertyValue::setHousePosition(::nds::name::types::HousePosition&& housePosition_)
{
    m_objectChoice = ::std::move(housePosition_);
}

::nds::core::speech::PhoneticTranscriptionList& PropertyValue::getPhoneticTranscription()
{
    return m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>();
}

const ::nds::core::speech::PhoneticTranscriptionList& PropertyValue::getPhoneticTranscription() const
{
    return m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>();
}

void PropertyValue::setPhoneticTranscription(const ::nds::core::speech::PhoneticTranscriptionList& phoneticTranscription_)
{
    m_objectChoice = phoneticTranscription_;
}

void PropertyValue::setPhoneticTranscription(::nds::core::speech::PhoneticTranscriptionList&& phoneticTranscription_)
{
    m_objectChoice = ::std::move(phoneticTranscription_);
}

::nds::name::types::PreferRoadNameOverRoadNumber& PropertyValue::getPreferRoadNameOverRoadNumber()
{
    return m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>();
}

const ::nds::name::types::PreferRoadNameOverRoadNumber& PropertyValue::getPreferRoadNameOverRoadNumber() const
{
    return m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>();
}

void PropertyValue::setPreferRoadNameOverRoadNumber(const ::nds::name::types::PreferRoadNameOverRoadNumber& preferRoadNameOverRoadNumber_)
{
    m_objectChoice = preferRoadNameOverRoadNumber_;
}

void PropertyValue::setPreferRoadNameOverRoadNumber(::nds::name::types::PreferRoadNameOverRoadNumber&& preferRoadNameOverRoadNumber_)
{
    m_objectChoice = ::std::move(preferRoadNameOverRoadNumber_);
}

PropertyValue::ChoiceTag PropertyValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        return UNDEFINED_CHOICE;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        return CHOICE_languageCode;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        return CHOICE_usageType;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        return CHOICE_detailType;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        return CHOICE_preferredName;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        return CHOICE_addressOnly;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        return CHOICE_roadNameId;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        return CHOICE_notAddressRelevant;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        return CHOICE_addressFormatId;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        return CHOICE_roadNumberPrefix;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        return CHOICE_roadNumberSuffix;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        return CHOICE_roadAddressPoint;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        return CHOICE_laneAddressPoint;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        return CHOICE_housePosition;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        return CHOICE_phoneticTranscription;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        return CHOICE_preferRoadNameOverRoadNumber;
    default:
        return UNDEFINED_CHOICE;
    }
}

void PropertyValue::initPackingContext(PropertyValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        context.getLanguageCode().init<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        ::zserio::initPackingContext(context.getUsageType(), m_objectChoice.get<::nds::name::types::NameUsageType>());
        break;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        ::zserio::initPackingContext(context.getDetailType(), m_objectChoice.get<::nds::name::types::NameDetailType>());
        break;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        break;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        context.getRoadNameId().init<::zserio::StdIntArrayTraits<::nds::name::types::RoadNameId>>(m_objectChoice.get<::nds::name::types::RoadNameId>());
        break;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        context.getAddressFormatId().init<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_objectChoice.get<::nds::name::types::AddressFormatId>());
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        m_objectChoice.get<::nds::name::types::RoadNumberPrefix>().initPackingContext(context.getRoadNumberPrefix());
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        m_objectChoice.get<::nds::name::types::RoadNumberSuffix>().initPackingContext(context.getRoadNumberSuffix());
        break;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        m_objectChoice.get<::nds::name::types::RoadAddressPoint>().initPackingContext(context.getRoadAddressPoint());
        break;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        m_objectChoice.get<::nds::name::types::LaneAddressPoint>().initPackingContext(context.getLaneAddressPoint());
        break;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        m_objectChoice.get<::nds::name::types::HousePosition>().initPackingContext(context.getHousePosition());
        break;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>().initPackingContext(context.getPhoneticTranscription());
        break;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

size_t PropertyValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::name::types::NameUsageType>());
        break;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::name::types::NameDetailType>());
        break;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        endBitPosition += m_objectChoice.get<::nds::name::types::PreferredName>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        endBitPosition += m_objectChoice.get<::nds::name::types::AddressOnly>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        endBitPosition += m_objectChoice.get<::nds::name::types::NotAddressRelevant>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::name::types::AddressFormatId>());
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        endBitPosition += m_objectChoice.get<::nds::name::types::RoadNumberPrefix>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        endBitPosition += m_objectChoice.get<::nds::name::types::RoadNumberSuffix>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        endBitPosition += m_objectChoice.get<::nds::name::types::RoadAddressPoint>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        endBitPosition += m_objectChoice.get<::nds::name::types::LaneAddressPoint>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        endBitPosition += m_objectChoice.get<::nds::name::types::HousePosition>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        endBitPosition += m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        endBitPosition += m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>().bitSizeOf(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PropertyValue::bitSizeOf(PropertyValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += context.getLanguageCode().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getUsageType(), m_objectChoice.get<::nds::name::types::NameUsageType>());
        break;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getDetailType(), m_objectChoice.get<::nds::name::types::NameDetailType>());
        break;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        endBitPosition += m_objectChoice.get<::nds::name::types::PreferredName>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        endBitPosition += m_objectChoice.get<::nds::name::types::AddressOnly>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        endBitPosition += context.getRoadNameId().bitSizeOf<::zserio::StdIntArrayTraits<::nds::name::types::RoadNameId>>(m_objectChoice.get<::nds::name::types::RoadNameId>());
        break;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        endBitPosition += m_objectChoice.get<::nds::name::types::NotAddressRelevant>().bitSizeOf(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        endBitPosition += context.getAddressFormatId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_objectChoice.get<::nds::name::types::AddressFormatId>());
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        endBitPosition += m_objectChoice.get<::nds::name::types::RoadNumberPrefix>().bitSizeOf(context.getRoadNumberPrefix(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        endBitPosition += m_objectChoice.get<::nds::name::types::RoadNumberSuffix>().bitSizeOf(context.getRoadNumberSuffix(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        endBitPosition += m_objectChoice.get<::nds::name::types::RoadAddressPoint>().bitSizeOf(context.getRoadAddressPoint(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        endBitPosition += m_objectChoice.get<::nds::name::types::LaneAddressPoint>().bitSizeOf(context.getLaneAddressPoint(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        endBitPosition += m_objectChoice.get<::nds::name::types::HousePosition>().bitSizeOf(context.getHousePosition(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        endBitPosition += m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>().bitSizeOf(context.getPhoneticTranscription(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        endBitPosition += m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>().bitSizeOf(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PropertyValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::name::types::NameUsageType>());
        break;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::name::types::NameDetailType>());
        break;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        endBitPosition = m_objectChoice.get<::nds::name::types::PreferredName>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        endBitPosition = m_objectChoice.get<::nds::name::types::AddressOnly>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        endBitPosition = m_objectChoice.get<::nds::name::types::NotAddressRelevant>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::name::types::AddressFormatId>());
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        endBitPosition = m_objectChoice.get<::nds::name::types::RoadNumberPrefix>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        endBitPosition = m_objectChoice.get<::nds::name::types::RoadNumberSuffix>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        endBitPosition = m_objectChoice.get<::nds::name::types::RoadAddressPoint>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        endBitPosition = m_objectChoice.get<::nds::name::types::LaneAddressPoint>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        endBitPosition = m_objectChoice.get<::nds::name::types::HousePosition>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        endBitPosition = m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        endBitPosition = m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>().initializeOffsets(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition;
}

size_t PropertyValue::initializeOffsets(PropertyValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += context.getLanguageCode().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getUsageType(), endBitPosition,
        m_objectChoice.get<::nds::name::types::NameUsageType>());
        break;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getDetailType(), endBitPosition,
        m_objectChoice.get<::nds::name::types::NameDetailType>());
        break;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        endBitPosition = m_objectChoice.get<::nds::name::types::PreferredName>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        endBitPosition = m_objectChoice.get<::nds::name::types::AddressOnly>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        endBitPosition += context.getRoadNameId().bitSizeOf<::zserio::StdIntArrayTraits<::nds::name::types::RoadNameId>>(m_objectChoice.get<::nds::name::types::RoadNameId>());
        break;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        endBitPosition = m_objectChoice.get<::nds::name::types::NotAddressRelevant>().initializeOffsets(endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        endBitPosition += context.getAddressFormatId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_objectChoice.get<::nds::name::types::AddressFormatId>());
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        endBitPosition = m_objectChoice.get<::nds::name::types::RoadNumberPrefix>().initializeOffsets(context.getRoadNumberPrefix(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        endBitPosition = m_objectChoice.get<::nds::name::types::RoadNumberSuffix>().initializeOffsets(context.getRoadNumberSuffix(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        endBitPosition = m_objectChoice.get<::nds::name::types::RoadAddressPoint>().initializeOffsets(context.getRoadAddressPoint(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        endBitPosition = m_objectChoice.get<::nds::name::types::LaneAddressPoint>().initializeOffsets(context.getLaneAddressPoint(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        endBitPosition = m_objectChoice.get<::nds::name::types::HousePosition>().initializeOffsets(context.getHousePosition(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        endBitPosition = m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>().initializeOffsets(context.getPhoneticTranscription(), endBitPosition);
        break;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        endBitPosition = m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>().initializeOffsets(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition;
}

bool PropertyValue::operator==(const PropertyValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        return true; // empty
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::LanguageCode>() == other.m_objectChoice.get<::nds::core::types::LanguageCode>());
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::NameUsageType>() == other.m_objectChoice.get<::nds::name::types::NameUsageType>());
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::NameDetailType>() == other.m_objectChoice.get<::nds::name::types::NameDetailType>());
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::PreferredName>() == other.m_objectChoice.get<::nds::name::types::PreferredName>());
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::AddressOnly>() == other.m_objectChoice.get<::nds::name::types::AddressOnly>());
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::RoadNameId>() == other.m_objectChoice.get<::nds::name::types::RoadNameId>());
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::NotAddressRelevant>() == other.m_objectChoice.get<::nds::name::types::NotAddressRelevant>());
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::AddressFormatId>() == other.m_objectChoice.get<::nds::name::types::AddressFormatId>());
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::RoadNumberPrefix>() == other.m_objectChoice.get<::nds::name::types::RoadNumberPrefix>());
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::RoadNumberSuffix>() == other.m_objectChoice.get<::nds::name::types::RoadNumberSuffix>());
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::RoadAddressPoint>() == other.m_objectChoice.get<::nds::name::types::RoadAddressPoint>());
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::LaneAddressPoint>() == other.m_objectChoice.get<::nds::name::types::LaneAddressPoint>());
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::HousePosition>() == other.m_objectChoice.get<::nds::name::types::HousePosition>());
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>() == other.m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>());
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>() == other.m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

uint32_t PropertyValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::name::properties::PropertyType::CORE:
            // empty
            break;
        case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::LanguageCode>());
            break;
        case ::nds::name::properties::PropertyType::USAGE_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::NameUsageType>());
            break;
        case ::nds::name::properties::PropertyType::DETAIL_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::NameDetailType>());
            break;
        case ::nds::name::properties::PropertyType::PREFERRED_NAME:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::PreferredName>());
            break;
        case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::AddressOnly>());
            break;
        case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::RoadNameId>());
            break;
        case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::NotAddressRelevant>());
            break;
        case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::AddressFormatId>());
            break;
        case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::RoadNumberPrefix>());
            break;
        case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::RoadNumberSuffix>());
            break;
        case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::RoadAddressPoint>());
            break;
        case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::LaneAddressPoint>());
            break;
        case ::nds::name::properties::PropertyType::HOUSE_POSITION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::HousePosition>());
            break;
        case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>());
            break;
        case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>());
            break;
        default:
            break;
        }
    }

    return result;
}

void PropertyValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        out.writeVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::name::types::NameUsageType>());
        break;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::name::types::NameDetailType>());
        break;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        m_objectChoice.get<::nds::name::types::PreferredName>().write(out);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        m_objectChoice.get<::nds::name::types::AddressOnly>().write(out);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        out.writeBits(m_objectChoice.get<::nds::name::types::RoadNameId>(), UINT8_C(8));
        break;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        m_objectChoice.get<::nds::name::types::NotAddressRelevant>().write(out);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        out.writeVarUInt16(m_objectChoice.get<::nds::name::types::AddressFormatId>());
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        m_objectChoice.get<::nds::name::types::RoadNumberPrefix>().write(out);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        m_objectChoice.get<::nds::name::types::RoadNumberSuffix>().write(out);
        break;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        m_objectChoice.get<::nds::name::types::RoadAddressPoint>().write(out);
        break;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        m_objectChoice.get<::nds::name::types::LaneAddressPoint>().write(out);
        break;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        // check parameters
        if (m_objectChoice.get<::nds::name::types::HousePosition>().getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field PropertyValue.housePosition: ") <<
                    m_objectChoice.get<::nds::name::types::HousePosition>().getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_objectChoice.get<::nds::name::types::HousePosition>().write(out);
        break;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>().write(out);
        break;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>().write(out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

void PropertyValue::write(PropertyValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        context.getLanguageCode().write<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(out, m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        ::zserio::write(context.getUsageType(), out, m_objectChoice.get<::nds::name::types::NameUsageType>());
        break;
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        ::zserio::write(context.getDetailType(), out, m_objectChoice.get<::nds::name::types::NameDetailType>());
        break;
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        m_objectChoice.get<::nds::name::types::PreferredName>().write(out);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        m_objectChoice.get<::nds::name::types::AddressOnly>().write(out);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        context.getRoadNameId().write<::zserio::StdIntArrayTraits<::nds::name::types::RoadNameId>>(out, m_objectChoice.get<::nds::name::types::RoadNameId>());
        break;
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        m_objectChoice.get<::nds::name::types::NotAddressRelevant>().write(out);
        break;
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        context.getAddressFormatId().write<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(out, m_objectChoice.get<::nds::name::types::AddressFormatId>());
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        m_objectChoice.get<::nds::name::types::RoadNumberPrefix>().write(context.getRoadNumberPrefix(), out);
        break;
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        m_objectChoice.get<::nds::name::types::RoadNumberSuffix>().write(context.getRoadNumberSuffix(), out);
        break;
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        m_objectChoice.get<::nds::name::types::RoadAddressPoint>().write(context.getRoadAddressPoint(), out);
        break;
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        m_objectChoice.get<::nds::name::types::LaneAddressPoint>().write(context.getLaneAddressPoint(), out);
        break;
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        // check parameters
        if (m_objectChoice.get<::nds::name::types::HousePosition>().getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field PropertyValue.housePosition: ") <<
                    m_objectChoice.get<::nds::name::types::HousePosition>().getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_objectChoice.get<::nds::name::types::HousePosition>().write(context.getHousePosition(), out);
        break;
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        m_objectChoice.get<::nds::core::speech::PhoneticTranscriptionList>().write(context.getPhoneticTranscription(), out);
        break;
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        m_objectChoice.get<::nds::name::types::PreferRoadNameOverRoadNumber>().write(out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::LanguageCode>(in.readVarUInt16()), allocator);
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::name::types::NameUsageType>(in), allocator);
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::name::types::NameDetailType>(in), allocator);
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        return ::zserio::AnyHolder<>(::nds::name::types::PreferredName(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        return ::zserio::AnyHolder<>(::nds::name::types::AddressOnly(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::name::types::RoadNameId>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        return ::zserio::AnyHolder<>(::nds::name::types::NotAddressRelevant(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::name::types::AddressFormatId>(in.readVarUInt16()), allocator);
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        return ::zserio::AnyHolder<>(::nds::name::types::RoadNumberPrefix(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        return ::zserio::AnyHolder<>(::nds::name::types::RoadNumberSuffix(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        return ::zserio::AnyHolder<>(::nds::name::types::RoadAddressPoint(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        return ::zserio::AnyHolder<>(::nds::name::types::LaneAddressPoint(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        return ::zserio::AnyHolder<>(::nds::name::types::HousePosition(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator), allocator);
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        return ::zserio::AnyHolder<>(::nds::core::speech::PhoneticTranscriptionList(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        return ::zserio::AnyHolder<>(::nds::name::types::PreferRoadNameOverRoadNumber(in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::readObject(PropertyValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::AnyHolder<>(context.getLanguageCode().read<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(in), allocator);
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::name::types::NameUsageType>(context.getUsageType(), in), allocator);
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::name::types::NameDetailType>(context.getDetailType(), in), allocator);
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        return ::zserio::AnyHolder<>(::nds::name::types::PreferredName(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        return ::zserio::AnyHolder<>(::nds::name::types::AddressOnly(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        return ::zserio::AnyHolder<>(context.getRoadNameId().read<::zserio::StdIntArrayTraits<::nds::name::types::RoadNameId>>(in), allocator);
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        return ::zserio::AnyHolder<>(::nds::name::types::NotAddressRelevant(in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        return ::zserio::AnyHolder<>(context.getAddressFormatId().read<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(in), allocator);
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        return ::zserio::AnyHolder<>(::nds::name::types::RoadNumberPrefix(context.getRoadNumberPrefix(), in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        return ::zserio::AnyHolder<>(::nds::name::types::RoadNumberSuffix(context.getRoadNumberSuffix(), in, allocator), allocator);
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        return ::zserio::AnyHolder<>(::nds::name::types::RoadAddressPoint(context.getRoadAddressPoint(), in, allocator), allocator);
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        return ::zserio::AnyHolder<>(::nds::name::types::LaneAddressPoint(context.getLaneAddressPoint(), in, allocator), allocator);
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        return ::zserio::AnyHolder<>(::nds::name::types::HousePosition(context.getHousePosition(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator), allocator);
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        return ::zserio::AnyHolder<>(::nds::core::speech::PhoneticTranscriptionList(context.getPhoneticTranscription(), in, allocator), allocator);
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        return ::zserio::AnyHolder<>(::nds::name::types::PreferRoadNameOverRoadNumber(in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::name::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::name::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::LanguageCode>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::USAGE_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::NameUsageType>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::DETAIL_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::NameDetailType>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::PREFERRED_NAME:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::PreferredName>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::ADDRESS_ONLY:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::AddressOnly>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::ROAD_NAME_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::RoadNameId>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::NOT_ADDRESS_RELEVANT:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::NotAddressRelevant>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::ADDRESS_FORMAT_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::AddressFormatId>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_PREFIX:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::RoadNumberPrefix>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::ROAD_NUMBER_SUFFIX:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::RoadNumberSuffix>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::ROAD_ADDRESS_POINT:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::RoadAddressPoint>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::LANE_ADDRESS_POINT:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::LaneAddressPoint>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::HOUSE_POSITION:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::HousePosition>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::PHONETIC_TRANSCRIPTION:
        return ::zserio::allocatorPropagatingCopy<::nds::core::speech::PhoneticTranscriptionList>(m_objectChoice, allocator);
    case ::nds::name::properties::PropertyType::PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
        return ::zserio::allocatorPropagatingCopy<::nds::name::types::PreferRoadNameOverRoadNumber>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

} // namespace properties
} // namespace name
} // namespace nds
