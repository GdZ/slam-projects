/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_PROPERTIES_PROPERTY_VALUE_H
#define NDS_NAME_PROPERTIES_PROPERTY_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/speech/PhoneticTranscriptionList.h>
#include <nds/core/types/LanguageCode.h>
#include <nds/name/properties/PropertyType.h>
#include <nds/name/types/AddressFormatId.h>
#include <nds/name/types/AddressOnly.h>
#include <nds/name/types/HousePosition.h>
#include <nds/name/types/LaneAddressPoint.h>
#include <nds/name/types/NameDetailType.h>
#include <nds/name/types/NameUsageType.h>
#include <nds/name/types/NotAddressRelevant.h>
#include <nds/name/types/PreferRoadNameOverRoadNumber.h>
#include <nds/name/types/PreferredName.h>
#include <nds/name/types/RoadAddressPoint.h>
#include <nds/name/types/RoadNameId.h>
#include <nds/name/types/RoadNumberPrefix.h>
#include <nds/name/types/RoadNumberSuffix.h>

namespace nds
{
namespace name
{
namespace properties
{

class PropertyValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_languageCode = 0,
        CHOICE_usageType = 1,
        CHOICE_detailType = 2,
        CHOICE_preferredName = 3,
        CHOICE_addressOnly = 4,
        CHOICE_roadNameId = 5,
        CHOICE_notAddressRelevant = 6,
        CHOICE_addressFormatId = 7,
        CHOICE_roadNumberPrefix = 8,
        CHOICE_roadNumberSuffix = 9,
        CHOICE_roadAddressPoint = 10,
        CHOICE_laneAddressPoint = 11,
        CHOICE_housePosition = 12,
        CHOICE_phoneticTranscription = 13,
        CHOICE_preferRoadNameOverRoadNumber = 14,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLanguageCode()
        {
            return m_languageCode_;
        }

        ::zserio::DeltaContext& getUsageType()
        {
            return m_usageType_;
        }

        ::zserio::DeltaContext& getDetailType()
        {
            return m_detailType_;
        }

        ::zserio::DeltaContext& getRoadNameId()
        {
            return m_roadNameId_;
        }

        ::zserio::DeltaContext& getAddressFormatId()
        {
            return m_addressFormatId_;
        }

        ::nds::name::types::RoadNumberPrefix::ZserioPackingContext& getRoadNumberPrefix()
        {
            return m_roadNumberPrefix_;
        }

        ::nds::name::types::RoadNumberSuffix::ZserioPackingContext& getRoadNumberSuffix()
        {
            return m_roadNumberSuffix_;
        }

        ::nds::name::types::RoadAddressPoint::ZserioPackingContext& getRoadAddressPoint()
        {
            return m_roadAddressPoint_;
        }

        ::nds::name::types::LaneAddressPoint::ZserioPackingContext& getLaneAddressPoint()
        {
            return m_laneAddressPoint_;
        }

        ::nds::name::types::HousePosition::ZserioPackingContext& getHousePosition()
        {
            return m_housePosition_;
        }

        ::nds::core::speech::PhoneticTranscriptionList::ZserioPackingContext& getPhoneticTranscription()
        {
            return m_phoneticTranscription_;
        }

    private:
        ::zserio::DeltaContext m_languageCode_;
        ::zserio::DeltaContext m_usageType_;
        ::zserio::DeltaContext m_detailType_;
        ::zserio::DeltaContext m_roadNameId_;
        ::zserio::DeltaContext m_addressFormatId_;
        ::nds::name::types::RoadNumberPrefix::ZserioPackingContext m_roadNumberPrefix_;
        ::nds::name::types::RoadNumberSuffix::ZserioPackingContext m_roadNumberSuffix_;
        ::nds::name::types::RoadAddressPoint::ZserioPackingContext m_roadAddressPoint_;
        ::nds::name::types::LaneAddressPoint::ZserioPackingContext m_laneAddressPoint_;
        ::nds::name::types::HousePosition::ZserioPackingContext m_housePosition_;
        ::nds::core::speech::PhoneticTranscriptionList::ZserioPackingContext m_phoneticTranscription_;
    };

    PropertyValue() noexcept :
            PropertyValue(allocator_type())
    {}

    explicit PropertyValue(const allocator_type& allocator) noexcept;

    explicit PropertyValue(::zserio::BitStreamReader& in,
            ::nds::name::properties::PropertyType type_, const allocator_type& allocator = allocator_type());
    explicit PropertyValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::name::properties::PropertyType type_, const allocator_type& allocator = allocator_type());

    ~PropertyValue() = default;

    PropertyValue(const PropertyValue& other);
    PropertyValue& operator=(const PropertyValue& other);

    PropertyValue(PropertyValue&& other);
    PropertyValue& operator=(PropertyValue&& other);

    PropertyValue(::zserio::PropagateAllocatorT,
            const PropertyValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::name::properties::PropertyType type_);
    bool isInitialized() const;
    void initializeChildren();

    ChoiceTag choiceTag() const;

    ::nds::name::properties::PropertyType getType() const;

    ::nds::core::types::LanguageCode getLanguageCode() const;
    void setLanguageCode(::nds::core::types::LanguageCode languageCode_);

    ::nds::name::types::NameUsageType getUsageType() const;
    void setUsageType(::nds::name::types::NameUsageType usageType_);

    ::nds::name::types::NameDetailType getDetailType() const;
    void setDetailType(::nds::name::types::NameDetailType detailType_);

    const ::nds::name::types::PreferredName& getPreferredName() const;
    ::nds::name::types::PreferredName& getPreferredName();
    void setPreferredName(const ::nds::name::types::PreferredName& preferredName_);
    void setPreferredName(::nds::name::types::PreferredName&& preferredName_);

    const ::nds::name::types::AddressOnly& getAddressOnly() const;
    ::nds::name::types::AddressOnly& getAddressOnly();
    void setAddressOnly(const ::nds::name::types::AddressOnly& addressOnly_);
    void setAddressOnly(::nds::name::types::AddressOnly&& addressOnly_);

    ::nds::name::types::RoadNameId getRoadNameId() const;
    void setRoadNameId(::nds::name::types::RoadNameId roadNameId_);

    const ::nds::name::types::NotAddressRelevant& getNotAddressRelevant() const;
    ::nds::name::types::NotAddressRelevant& getNotAddressRelevant();
    void setNotAddressRelevant(const ::nds::name::types::NotAddressRelevant& notAddressRelevant_);
    void setNotAddressRelevant(::nds::name::types::NotAddressRelevant&& notAddressRelevant_);

    ::nds::name::types::AddressFormatId getAddressFormatId() const;
    void setAddressFormatId(::nds::name::types::AddressFormatId addressFormatId_);

    const ::nds::name::types::RoadNumberPrefix& getRoadNumberPrefix() const;
    ::nds::name::types::RoadNumberPrefix& getRoadNumberPrefix();
    void setRoadNumberPrefix(const ::nds::name::types::RoadNumberPrefix& roadNumberPrefix_);
    void setRoadNumberPrefix(::nds::name::types::RoadNumberPrefix&& roadNumberPrefix_);

    const ::nds::name::types::RoadNumberSuffix& getRoadNumberSuffix() const;
    ::nds::name::types::RoadNumberSuffix& getRoadNumberSuffix();
    void setRoadNumberSuffix(const ::nds::name::types::RoadNumberSuffix& roadNumberSuffix_);
    void setRoadNumberSuffix(::nds::name::types::RoadNumberSuffix&& roadNumberSuffix_);

    const ::nds::name::types::RoadAddressPoint& getRoadAddressPoint() const;
    ::nds::name::types::RoadAddressPoint& getRoadAddressPoint();
    void setRoadAddressPoint(const ::nds::name::types::RoadAddressPoint& roadAddressPoint_);
    void setRoadAddressPoint(::nds::name::types::RoadAddressPoint&& roadAddressPoint_);

    const ::nds::name::types::LaneAddressPoint& getLaneAddressPoint() const;
    ::nds::name::types::LaneAddressPoint& getLaneAddressPoint();
    void setLaneAddressPoint(const ::nds::name::types::LaneAddressPoint& laneAddressPoint_);
    void setLaneAddressPoint(::nds::name::types::LaneAddressPoint&& laneAddressPoint_);

    const ::nds::name::types::HousePosition& getHousePosition() const;
    ::nds::name::types::HousePosition& getHousePosition();
    void setHousePosition(const ::nds::name::types::HousePosition& housePosition_);
    void setHousePosition(::nds::name::types::HousePosition&& housePosition_);

    const ::nds::core::speech::PhoneticTranscriptionList& getPhoneticTranscription() const;
    ::nds::core::speech::PhoneticTranscriptionList& getPhoneticTranscription();
    void setPhoneticTranscription(const ::nds::core::speech::PhoneticTranscriptionList& phoneticTranscription_);
    void setPhoneticTranscription(::nds::core::speech::PhoneticTranscriptionList&& phoneticTranscription_);

    const ::nds::name::types::PreferRoadNameOverRoadNumber& getPreferRoadNameOverRoadNumber() const;
    ::nds::name::types::PreferRoadNameOverRoadNumber& getPreferRoadNameOverRoadNumber();
    void setPreferRoadNameOverRoadNumber(const ::nds::name::types::PreferRoadNameOverRoadNumber& preferRoadNameOverRoadNumber_);
    void setPreferRoadNameOverRoadNumber(::nds::name::types::PreferRoadNameOverRoadNumber&& preferRoadNameOverRoadNumber_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PropertyValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::name::properties::PropertyType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace properties
} // namespace name
} // namespace nds

#endif // NDS_NAME_PROPERTIES_PROPERTY_VALUE_H
