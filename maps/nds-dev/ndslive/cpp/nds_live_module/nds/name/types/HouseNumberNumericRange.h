/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_TYPES_HOUSE_NUMBER_NUMERIC_RANGE_H
#define NDS_NAME_TYPES_HOUSE_NUMBER_NUMERIC_RANGE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/name/types/HouseNumberIncrement.h>
#include <nds/name/types/HouseNumberNumeric.h>

namespace nds
{
namespace name
{
namespace types
{

class HouseNumberNumericRange
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getStartHouseNumber()
        {
            return m_startHouseNumber_;
        }

        ::zserio::DeltaContext& getEndHouseNumber()
        {
            return m_endHouseNumber_;
        }

    private:
        ::zserio::DeltaContext m_startHouseNumber_;
        ::zserio::DeltaContext m_endHouseNumber_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    HouseNumberNumericRange() noexcept :
            HouseNumberNumericRange(allocator_type())
    {}

    explicit HouseNumberNumericRange(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_pattern = ::zserio::string<>>
    HouseNumberNumericRange(
            ::nds::name::types::HouseNumberNumeric startHouseNumber_,
            ::nds::name::types::HouseNumberNumeric endHouseNumber_,
            ZSERIO_T_pattern&& pattern_,
            const allocator_type& allocator = allocator_type()) :
            HouseNumberNumericRange(allocator)
    {
        m_startHouseNumber_ = startHouseNumber_;
        m_endHouseNumber_ = endHouseNumber_;
        m_pattern_ = ::std::forward<ZSERIO_T_pattern>(pattern_);
    }

    explicit HouseNumberNumericRange(::zserio::BitStreamReader& in,
            bool hasPattern_,
            bool isEvenOdd_, const allocator_type& allocator = allocator_type());
    explicit HouseNumberNumericRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            bool hasPattern_,
            bool isEvenOdd_, const allocator_type& allocator = allocator_type());

    ~HouseNumberNumericRange() = default;

    HouseNumberNumericRange(const HouseNumberNumericRange& other);
    HouseNumberNumericRange& operator=(const HouseNumberNumericRange& other);

    HouseNumberNumericRange(HouseNumberNumericRange&& other);
    HouseNumberNumericRange& operator=(HouseNumberNumericRange&& other);

    HouseNumberNumericRange(::zserio::PropagateAllocatorT,
            const HouseNumberNumericRange& other, const allocator_type& allocator);

    void initialize(
            bool hasPattern_,
            bool isEvenOdd_);
    bool isInitialized() const;

    bool getHasPattern() const;

    bool getIsEvenOdd() const;

    ::nds::name::types::HouseNumberNumeric getStartHouseNumber() const;
    void setStartHouseNumber(::nds::name::types::HouseNumberNumeric startHouseNumber_);

    ::nds::name::types::HouseNumberNumeric getEndHouseNumber() const;
    void setEndHouseNumber(::nds::name::types::HouseNumberNumeric endHouseNumber_);

    const ::zserio::string<>& getPattern() const;
    ::zserio::string<>& getPattern();
    void setPattern(const ::zserio::string<>& pattern_);
    void setPattern(::zserio::string<>&& pattern_);
    bool isPatternUsed() const;
    bool isPatternSet() const;
    void resetPattern();

    ::nds::name::types::HouseNumberIncrement funcGetIncrement() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const HouseNumberNumericRange& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::name::types::HouseNumberNumeric readStartHouseNumber(::zserio::BitStreamReader& in);
    ::nds::name::types::HouseNumberNumeric readStartHouseNumber(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::name::types::HouseNumberNumeric readEndHouseNumber(::zserio::BitStreamReader& in);
    ::nds::name::types::HouseNumberNumeric readEndHouseNumber(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readPattern(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    bool m_hasPattern_;
    bool m_isEvenOdd_;
    bool m_isInitialized;
    ::nds::name::types::HouseNumberNumeric m_startHouseNumber_;
    ::nds::name::types::HouseNumberNumeric m_endHouseNumber_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_pattern_;
};

} // namespace types
} // namespace name
} // namespace nds

#endif // NDS_NAME_TYPES_HOUSE_NUMBER_NUMERIC_RANGE_H
