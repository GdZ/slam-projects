/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_TYPES_ADDRESS_FORMAT_ELEMENT_H
#define NDS_NAME_TYPES_ADDRESS_FORMAT_ELEMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/name/types/AddressFormatElementType.h>
#include <nds/name/types/AdminHierarchyElementType.h>

namespace nds
{
namespace name
{
namespace types
{

class AddressFormatElement
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getAdminHierarchyElementType()
        {
            return m_adminHierarchyElementType_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_adminHierarchyElementType_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AddressFormatElement() noexcept :
            AddressFormatElement(allocator_type())
    {}

    explicit AddressFormatElement(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_adminHierarchyElementType = ::nds::name::types::AdminHierarchyElementType,
            typename ZSERIO_T_elementSeparator = ::zserio::string<>>
    AddressFormatElement(
            ::nds::name::types::AddressFormatElementType type_,
            ZSERIO_T_adminHierarchyElementType&& adminHierarchyElementType_,
            ZSERIO_T_elementSeparator&& elementSeparator_,
            const allocator_type& allocator = allocator_type()) :
            AddressFormatElement(allocator)
    {
        m_type_ = type_;
        m_adminHierarchyElementType_ = ::std::forward<ZSERIO_T_adminHierarchyElementType>(adminHierarchyElementType_);
        m_elementSeparator_ = ::std::forward<ZSERIO_T_elementSeparator>(elementSeparator_);
    }

    explicit AddressFormatElement(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AddressFormatElement(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AddressFormatElement() = default;

    AddressFormatElement(const AddressFormatElement&) = default;
    AddressFormatElement& operator=(const AddressFormatElement&) = default;

    AddressFormatElement(AddressFormatElement&&) = default;
    AddressFormatElement& operator=(AddressFormatElement&&) = default;

    AddressFormatElement(::zserio::PropagateAllocatorT,
            const AddressFormatElement& other, const allocator_type& allocator);

    ::nds::name::types::AddressFormatElementType getType() const;
    void setType(::nds::name::types::AddressFormatElementType type_);

    ::nds::name::types::AdminHierarchyElementType getAdminHierarchyElementType() const;
    void setAdminHierarchyElementType(::nds::name::types::AdminHierarchyElementType adminHierarchyElementType_);
    bool isAdminHierarchyElementTypeUsed() const;
    bool isAdminHierarchyElementTypeSet() const;
    void resetAdminHierarchyElementType();

    const ::zserio::string<>& getElementSeparator() const;
    ::zserio::string<>& getElementSeparator();
    void setElementSeparator(const ::zserio::string<>& elementSeparator_);
    void setElementSeparator(::zserio::string<>&& elementSeparator_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AddressFormatElement& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::name::types::AddressFormatElementType readType(::zserio::BitStreamReader& in);
    ::nds::name::types::AddressFormatElementType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::name::types::AdminHierarchyElementType> readAdminHierarchyElementType(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::name::types::AdminHierarchyElementType> readAdminHierarchyElementType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::string<> readElementSeparator(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::name::types::AddressFormatElementType m_type_;
    ::zserio::InplaceOptionalHolder<::nds::name::types::AdminHierarchyElementType> m_adminHierarchyElementType_;
    ::zserio::string<> m_elementSeparator_;
};

} // namespace types
} // namespace name
} // namespace nds

#endif // NDS_NAME_TYPES_ADDRESS_FORMAT_ELEMENT_H
