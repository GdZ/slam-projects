/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_TYPES_ADMINISTRATIVE_HIERARCHY_ELEMENT_H
#define NDS_NAME_TYPES_ADMINISTRATIVE_HIERARCHY_ELEMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/name/types/AdminHierarchyElementId.h>
#include <nds/name/types/AdminHierarchyElementType.h>
#include <nds/name/types/AdminHierarchyName.h>

namespace nds
{
namespace name
{
namespace types
{

class AdministrativeHierarchyElement
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

    private:
        ::zserio::DeltaContext m_id_;
        ::zserio::DeltaContext m_type_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AdministrativeHierarchyElement() noexcept :
            AdministrativeHierarchyElement(allocator_type())
    {}

    explicit AdministrativeHierarchyElement(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_name = ::nds::name::types::AdminHierarchyName>
    AdministrativeHierarchyElement(
            ::nds::name::types::AdminHierarchyElementId id_,
            ::nds::name::types::AdminHierarchyElementType type_,
            ZSERIO_T_name&& name_,
            const allocator_type& allocator = allocator_type()) :
            AdministrativeHierarchyElement(allocator)
    {
        m_id_ = id_;
        m_type_ = type_;
        m_name_ = ::std::forward<ZSERIO_T_name>(name_);
    }

    explicit AdministrativeHierarchyElement(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AdministrativeHierarchyElement(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AdministrativeHierarchyElement() = default;

    AdministrativeHierarchyElement(const AdministrativeHierarchyElement&) = default;
    AdministrativeHierarchyElement& operator=(const AdministrativeHierarchyElement&) = default;

    AdministrativeHierarchyElement(AdministrativeHierarchyElement&&) = default;
    AdministrativeHierarchyElement& operator=(AdministrativeHierarchyElement&&) = default;

    AdministrativeHierarchyElement(::zserio::PropagateAllocatorT,
            const AdministrativeHierarchyElement& other, const allocator_type& allocator);

    ::nds::name::types::AdminHierarchyElementId getId() const;
    void setId(::nds::name::types::AdminHierarchyElementId id_);

    ::nds::name::types::AdminHierarchyElementType getType() const;
    void setType(::nds::name::types::AdminHierarchyElementType type_);

    const ::nds::name::types::AdminHierarchyName& getName() const;
    ::nds::name::types::AdminHierarchyName& getName();
    void setName(const ::nds::name::types::AdminHierarchyName& name_);
    void setName(::nds::name::types::AdminHierarchyName&& name_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AdministrativeHierarchyElement& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::name::types::AdminHierarchyElementId readId(::zserio::BitStreamReader& in);
    ::nds::name::types::AdminHierarchyElementId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::name::types::AdminHierarchyElementType readType(::zserio::BitStreamReader& in);
    ::nds::name::types::AdminHierarchyElementType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::name::types::AdminHierarchyName readName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::name::types::AdminHierarchyElementId m_id_;
    ::nds::name::types::AdminHierarchyElementType m_type_;
    ::nds::name::types::AdminHierarchyName m_name_;
};

} // namespace types
} // namespace name
} // namespace nds

#endif // NDS_NAME_TYPES_ADMINISTRATIVE_HIERARCHY_ELEMENT_H
