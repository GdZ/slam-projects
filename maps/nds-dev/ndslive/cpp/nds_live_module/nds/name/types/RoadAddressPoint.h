/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_TYPES_ROAD_ADDRESS_POINT_H
#define NDS_NAME_TYPES_ROAD_ADDRESS_POINT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/name/types/AddressPointType.h>
#include <nds/name/types/RoadAddressPointReference.h>

namespace nds
{
namespace name
{
namespace types
{

class RoadAddressPoint
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::nds::name::types::RoadAddressPointReference::ZserioPackingContext& getPostalPosition()
        {
            return m_postalPosition_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::nds::name::types::RoadAddressPointReference::ZserioPackingContext m_postalPosition_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadAddressPoint() noexcept :
            RoadAddressPoint(allocator_type())
    {}

    explicit RoadAddressPoint(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_accessPositions = ::zserio::vector<::nds::name::types::RoadAddressPointReference>,
            typename ZSERIO_T_postalPosition = ::nds::name::types::RoadAddressPointReference>
    RoadAddressPoint(
            ::nds::name::types::AddressPointType type_,
            ZSERIO_T_accessPositions&& accessPositions_,
            ZSERIO_T_postalPosition&& postalPosition_,
            const allocator_type& allocator = allocator_type()) :
            RoadAddressPoint(allocator)
    {
        m_type_ = type_;
        m_accessPositions_ = ::zserio::createOptionalArray<ZserioArrayType_accessPositions>(::std::forward<ZSERIO_T_accessPositions>(accessPositions_));
        m_postalPosition_ = ::std::forward<ZSERIO_T_postalPosition>(postalPosition_);
    }

    explicit RoadAddressPoint(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadAddressPoint(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadAddressPoint() = default;

    RoadAddressPoint(const RoadAddressPoint&) = default;
    RoadAddressPoint& operator=(const RoadAddressPoint&) = default;

    RoadAddressPoint(RoadAddressPoint&&) = default;
    RoadAddressPoint& operator=(RoadAddressPoint&&) = default;

    RoadAddressPoint(::zserio::PropagateAllocatorT,
            const RoadAddressPoint& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::name::types::AddressPointType getType() const;
    void setType(::nds::name::types::AddressPointType type_);

    const ::zserio::vector<::nds::name::types::RoadAddressPointReference>& getAccessPositions() const;
    ::zserio::vector<::nds::name::types::RoadAddressPointReference>& getAccessPositions();
    void setAccessPositions(const ::zserio::vector<::nds::name::types::RoadAddressPointReference>& accessPositions_);
    void setAccessPositions(::zserio::vector<::nds::name::types::RoadAddressPointReference>&& accessPositions_);
    bool isAccessPositionsUsed() const;
    bool isAccessPositionsSet() const;
    void resetAccessPositions();

    const ::nds::name::types::RoadAddressPointReference& getPostalPosition() const;
    ::nds::name::types::RoadAddressPointReference& getPostalPosition();
    void setPostalPosition(const ::nds::name::types::RoadAddressPointReference& postalPosition_);
    void setPostalPosition(::nds::name::types::RoadAddressPointReference&& postalPosition_);
    bool isPostalPositionUsed() const;
    bool isPostalPositionSet() const;
    void resetPostalPosition();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadAddressPoint& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_accessPositions
    {
    public:
        using OwnerType = RoadAddressPoint;

        static void initializeElement(RoadAddressPoint& owner,
                ::nds::name::types::RoadAddressPointReference& element, size_t index);
    };

    class ZserioElementFactory_accessPositions
    {
    public:
        using OwnerType = RoadAddressPoint;

        static void create(RoadAddressPoint& owner,
                ::zserio::vector<::nds::name::types::RoadAddressPointReference>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadAddressPoint& owner,
                ::zserio::vector<::nds::name::types::RoadAddressPointReference>& array,
                ::nds::name::types::RoadAddressPointReference::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_accessPositions = ::zserio::Array<::zserio::vector<::nds::name::types::RoadAddressPointReference>, ::zserio::ObjectArrayTraits<::nds::name::types::RoadAddressPointReference, ZserioElementFactory_accessPositions>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_accessPositions>;

    ::nds::name::types::AddressPointType readType(::zserio::BitStreamReader& in);
    ::nds::name::types::AddressPointType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_accessPositions> readAccessPositions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_accessPositions> readAccessPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::types::RoadAddressPointReference> readPostalPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::types::RoadAddressPointReference> readPostalPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::name::types::AddressPointType m_type_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_accessPositions> m_accessPositions_;
    ::zserio::InplaceOptionalHolder<::nds::name::types::RoadAddressPointReference> m_postalPosition_;
};

} // namespace types
} // namespace name
} // namespace nds

#endif // NDS_NAME_TYPES_ROAD_ADDRESS_POINT_H
