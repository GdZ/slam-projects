/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_TYPES_ADDRESS_FORMAT_H
#define NDS_NAME_TYPES_ADDRESS_FORMAT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/name/types/AddressFormatElement.h>
#include <nds/name/types/AddressFormatId.h>

namespace nds
{
namespace name
{
namespace types
{

class AddressFormat
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

    private:
        ::zserio::DeltaContext m_id_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AddressFormat() noexcept :
            AddressFormat(allocator_type())
    {}

    explicit AddressFormat(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_elements = ::zserio::vector<::nds::name::types::AddressFormatElement>>
    AddressFormat(
            ::nds::name::types::AddressFormatId id_,
            ZSERIO_T_elements&& elements_,
            const allocator_type& allocator = allocator_type()) :
            AddressFormat(allocator)
    {
        m_id_ = id_;
        m_elements_ = ZserioArrayType_elements(::std::forward<ZSERIO_T_elements>(elements_));
    }

    explicit AddressFormat(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AddressFormat(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AddressFormat() = default;

    AddressFormat(const AddressFormat&) = default;
    AddressFormat& operator=(const AddressFormat&) = default;

    AddressFormat(AddressFormat&&) = default;
    AddressFormat& operator=(AddressFormat&&) = default;

    AddressFormat(::zserio::PropagateAllocatorT,
            const AddressFormat& other, const allocator_type& allocator);

    ::nds::name::types::AddressFormatId getId() const;
    void setId(::nds::name::types::AddressFormatId id_);

    const ::zserio::vector<::nds::name::types::AddressFormatElement>& getElements() const;
    ::zserio::vector<::nds::name::types::AddressFormatElement>& getElements();
    void setElements(const ::zserio::vector<::nds::name::types::AddressFormatElement>& elements_);
    void setElements(::zserio::vector<::nds::name::types::AddressFormatElement>&& elements_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AddressFormat& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_elements
    {
    public:
        using OwnerType = AddressFormat;

        static void create(AddressFormat& owner,
                ::zserio::vector<::nds::name::types::AddressFormatElement>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(AddressFormat& owner,
                ::zserio::vector<::nds::name::types::AddressFormatElement>& array,
                ::nds::name::types::AddressFormatElement::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_elements = ::zserio::Array<::zserio::vector<::nds::name::types::AddressFormatElement>, ::zserio::ObjectArrayTraits<::nds::name::types::AddressFormatElement, ZserioElementFactory_elements>, ::zserio::ArrayType::AUTO>;

    ::nds::name::types::AddressFormatId readId(::zserio::BitStreamReader& in);
    ::nds::name::types::AddressFormatId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_elements readElements(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_elements readElements(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::name::types::AddressFormatId m_id_;
    ZserioArrayType_elements m_elements_;
};

} // namespace types
} // namespace name
} // namespace nds

#endif // NDS_NAME_TYPES_ADDRESS_FORMAT_H
