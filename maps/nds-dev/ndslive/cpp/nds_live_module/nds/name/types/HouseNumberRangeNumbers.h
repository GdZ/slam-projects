/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_TYPES_HOUSE_NUMBER_RANGE_NUMBERS_H
#define NDS_NAME_TYPES_HOUSE_NUMBER_RANGE_NUMBERS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/name/types/HouseNumber.h>
#include <nds/name/types/HouseNumberNumeric.h>
#include <nds/name/types/HouseNumberNumericRange.h>
#include <nds/name/types/HouseNumberType.h>

namespace nds
{
namespace name
{
namespace types
{

class HouseNumberRangeNumbers
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_houseNumberRangeEvenOdd = 0,
        CHOICE_houseNumberRangeEvenOddPattern = 1,
        CHOICE_houseNumberRangeContinuous = 2,
        CHOICE_houseNumberRangeContinuousPattern = 3,
        CHOICE_houseNumberNumeric = 4,
        CHOICE_houseNumber = 5,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::name::types::HouseNumberNumericRange::ZserioPackingContext& getHouseNumberRangeEvenOdd()
        {
            return m_houseNumberRangeEvenOdd_;
        }

        ::nds::name::types::HouseNumberNumericRange::ZserioPackingContext& getHouseNumberRangeEvenOddPattern()
        {
            return m_houseNumberRangeEvenOddPattern_;
        }

        ::nds::name::types::HouseNumberNumericRange::ZserioPackingContext& getHouseNumberRangeContinuous()
        {
            return m_houseNumberRangeContinuous_;
        }

        ::nds::name::types::HouseNumberNumericRange::ZserioPackingContext& getHouseNumberRangeContinuousPattern()
        {
            return m_houseNumberRangeContinuousPattern_;
        }

    private:
        ::nds::name::types::HouseNumberNumericRange::ZserioPackingContext m_houseNumberRangeEvenOdd_;
        ::nds::name::types::HouseNumberNumericRange::ZserioPackingContext m_houseNumberRangeEvenOddPattern_;
        ::nds::name::types::HouseNumberNumericRange::ZserioPackingContext m_houseNumberRangeContinuous_;
        ::nds::name::types::HouseNumberNumericRange::ZserioPackingContext m_houseNumberRangeContinuousPattern_;
    };

    HouseNumberRangeNumbers() noexcept :
            HouseNumberRangeNumbers(allocator_type())
    {}

    explicit HouseNumberRangeNumbers(const allocator_type& allocator) noexcept;

    explicit HouseNumberRangeNumbers(::zserio::BitStreamReader& in,
            ::nds::name::types::HouseNumberType type_, const allocator_type& allocator = allocator_type());
    explicit HouseNumberRangeNumbers(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::name::types::HouseNumberType type_, const allocator_type& allocator = allocator_type());

    ~HouseNumberRangeNumbers() = default;

    HouseNumberRangeNumbers(const HouseNumberRangeNumbers& other);
    HouseNumberRangeNumbers& operator=(const HouseNumberRangeNumbers& other);

    HouseNumberRangeNumbers(HouseNumberRangeNumbers&& other);
    HouseNumberRangeNumbers& operator=(HouseNumberRangeNumbers&& other);

    HouseNumberRangeNumbers(::zserio::PropagateAllocatorT,
            const HouseNumberRangeNumbers& other, const allocator_type& allocator);

    void initialize(
            ::nds::name::types::HouseNumberType type_);
    bool isInitialized() const;
    void initializeChildren();

    ChoiceTag choiceTag() const;

    ::nds::name::types::HouseNumberType getType() const;

    const ::nds::name::types::HouseNumberNumericRange& getHouseNumberRangeEvenOdd() const;
    ::nds::name::types::HouseNumberNumericRange& getHouseNumberRangeEvenOdd();
    void setHouseNumberRangeEvenOdd(const ::nds::name::types::HouseNumberNumericRange& houseNumberRangeEvenOdd_);
    void setHouseNumberRangeEvenOdd(::nds::name::types::HouseNumberNumericRange&& houseNumberRangeEvenOdd_);

    const ::nds::name::types::HouseNumberNumericRange& getHouseNumberRangeEvenOddPattern() const;
    ::nds::name::types::HouseNumberNumericRange& getHouseNumberRangeEvenOddPattern();
    void setHouseNumberRangeEvenOddPattern(const ::nds::name::types::HouseNumberNumericRange& houseNumberRangeEvenOddPattern_);
    void setHouseNumberRangeEvenOddPattern(::nds::name::types::HouseNumberNumericRange&& houseNumberRangeEvenOddPattern_);

    const ::nds::name::types::HouseNumberNumericRange& getHouseNumberRangeContinuous() const;
    ::nds::name::types::HouseNumberNumericRange& getHouseNumberRangeContinuous();
    void setHouseNumberRangeContinuous(const ::nds::name::types::HouseNumberNumericRange& houseNumberRangeContinuous_);
    void setHouseNumberRangeContinuous(::nds::name::types::HouseNumberNumericRange&& houseNumberRangeContinuous_);

    const ::nds::name::types::HouseNumberNumericRange& getHouseNumberRangeContinuousPattern() const;
    ::nds::name::types::HouseNumberNumericRange& getHouseNumberRangeContinuousPattern();
    void setHouseNumberRangeContinuousPattern(const ::nds::name::types::HouseNumberNumericRange& houseNumberRangeContinuousPattern_);
    void setHouseNumberRangeContinuousPattern(::nds::name::types::HouseNumberNumericRange&& houseNumberRangeContinuousPattern_);

    const ::zserio::vector<::nds::name::types::HouseNumberNumeric>& getHouseNumberNumeric() const;
    ::zserio::vector<::nds::name::types::HouseNumberNumeric>& getHouseNumberNumeric();
    void setHouseNumberNumeric(const ::zserio::vector<::nds::name::types::HouseNumberNumeric>& houseNumberNumeric_);
    void setHouseNumberNumeric(::zserio::vector<::nds::name::types::HouseNumberNumeric>&& houseNumberNumeric_);

    const ::zserio::vector<::nds::name::types::HouseNumber>& getHouseNumber() const;
    ::zserio::vector<::nds::name::types::HouseNumber>& getHouseNumber();
    void setHouseNumber(const ::zserio::vector<::nds::name::types::HouseNumber>& houseNumber_);
    void setHouseNumber(::zserio::vector<::nds::name::types::HouseNumber>&& houseNumber_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const HouseNumberRangeNumbers& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_houseNumberNumeric = ::zserio::Array<::zserio::vector<::nds::name::types::HouseNumberNumeric>, ::zserio::VarIntNNArrayTraits<::nds::name::types::HouseNumberNumeric>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_houseNumber = ::zserio::Array<::zserio::vector<::nds::name::types::HouseNumber>, ::zserio::StringArrayTraits, ::zserio::ArrayType::AUTO>;

    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::name::types::HouseNumberType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace types
} // namespace name
} // namespace nds

#endif // NDS_NAME_TYPES_HOUSE_NUMBER_RANGE_NUMBERS_H
