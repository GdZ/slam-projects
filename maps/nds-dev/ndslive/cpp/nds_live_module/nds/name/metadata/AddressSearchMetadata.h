/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_METADATA_ADDRESS_SEARCH_METADATA_H
#define NDS_NAME_METADATA_ADDRESS_SEARCH_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/name/metadata/AddressSearchFilterOptions.h>
#include <nds/name/types/AddressFormat.h>

namespace nds
{
namespace name
{
namespace metadata
{

class AddressSearchMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getSupportedFilter()
        {
            return m_supportedFilter_;
        }

    private:
        ::zserio::DeltaContext m_supportedFilter_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AddressSearchMetadata() noexcept :
            AddressSearchMetadata(allocator_type())
    {}

    explicit AddressSearchMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_addressFormats = ::zserio::vector<::nds::name::types::AddressFormat>>
    AddressSearchMetadata(
            ::nds::name::metadata::AddressSearchFilterOptions supportedFilter_,
            ZSERIO_T_addressFormats&& addressFormats_,
            const allocator_type& allocator = allocator_type()) :
            AddressSearchMetadata(allocator)
    {
        m_supportedFilter_ = supportedFilter_;
        m_addressFormats_ = ZserioArrayType_addressFormats(::std::forward<ZSERIO_T_addressFormats>(addressFormats_));
    }

    explicit AddressSearchMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AddressSearchMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AddressSearchMetadata() = default;

    AddressSearchMetadata(const AddressSearchMetadata&) = default;
    AddressSearchMetadata& operator=(const AddressSearchMetadata&) = default;

    AddressSearchMetadata(AddressSearchMetadata&&) = default;
    AddressSearchMetadata& operator=(AddressSearchMetadata&&) = default;

    AddressSearchMetadata(::zserio::PropagateAllocatorT,
            const AddressSearchMetadata& other, const allocator_type& allocator);

    ::nds::name::metadata::AddressSearchFilterOptions getSupportedFilter() const;
    void setSupportedFilter(::nds::name::metadata::AddressSearchFilterOptions supportedFilter_);

    const ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats() const;
    ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats();
    void setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_);
    void setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AddressSearchMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_addressFormats
    {
    public:
        using OwnerType = AddressSearchMetadata;

        static void create(AddressSearchMetadata& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(AddressSearchMetadata& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::nds::name::types::AddressFormat::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_addressFormats = ::zserio::Array<::zserio::vector<::nds::name::types::AddressFormat>, ::zserio::ObjectArrayTraits<::nds::name::types::AddressFormat, ZserioElementFactory_addressFormats>, ::zserio::ArrayType::AUTO>;

    ::nds::name::metadata::AddressSearchFilterOptions readSupportedFilter(::zserio::BitStreamReader& in);
    ::nds::name::metadata::AddressSearchFilterOptions readSupportedFilter(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_addressFormats readAddressFormats(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_addressFormats readAddressFormats(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::name::metadata::AddressSearchFilterOptions m_supportedFilter_;
    ZserioArrayType_addressFormats m_addressFormats_;
};

} // namespace metadata
} // namespace name
} // namespace nds

#endif // NDS_NAME_METADATA_ADDRESS_SEARCH_METADATA_H
