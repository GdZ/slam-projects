/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/name/metadata/RoadNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

RoadNameLayerContent::RoadNameLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RoadNameLayerContent::RoadNameLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RoadNameLayerContent::RoadNameLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RoadNameLayerContent' out of bounds: ") << value << "!";
}

void RoadNameLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::name::metadata::RoadNameLayerContent::underlying_type>>(m_value);
}

size_t RoadNameLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t RoadNameLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::metadata::RoadNameLayerContent::underlying_type>>(m_value);
}

size_t RoadNameLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RoadNameLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RoadNameLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RoadNameLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void RoadNameLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::name::metadata::RoadNameLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RoadNameLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
        result += result.empty() ? "ROAD_RANGE_MAPS" : " | ROAD_RANGE_MAPS";
    if ((*this & RoadNameLayerContent::Values::ROAD_RANGE_SETS) == RoadNameLayerContent::Values::ROAD_RANGE_SETS)
        result += result.empty() ? "ROAD_RANGE_SETS" : " | ROAD_RANGE_SETS";
    if ((*this & RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
        result += result.empty() ? "ROAD_POSITION_MAPS" : " | ROAD_POSITION_MAPS";
    if ((*this & RoadNameLayerContent::Values::ROAD_POSITION_SETS) == RoadNameLayerContent::Values::ROAD_POSITION_SETS)
        result += result.empty() ? "ROAD_POSITION_SETS" : " | ROAD_POSITION_SETS";
    if ((*this & RoadNameLayerContent::Values::TRANSITION_MAPS) == RoadNameLayerContent::Values::TRANSITION_MAPS)
        result += result.empty() ? "TRANSITION_MAPS" : " | TRANSITION_MAPS";
    if ((*this & RoadNameLayerContent::Values::TRANSITION_SETS) == RoadNameLayerContent::Values::TRANSITION_SETS)
        result += result.empty() ? "TRANSITION_SETS" : " | TRANSITION_SETS";
    if ((*this & RoadNameLayerContent::Values::ADMIN_HIERARCHY) == RoadNameLayerContent::Values::ADMIN_HIERARCHY)
        result += result.empty() ? "ADMIN_HIERARCHY" : " | ADMIN_HIERARCHY";
    if ((*this & RoadNameLayerContent::Values::ADDRESS_FORMAT) == RoadNameLayerContent::Values::ADDRESS_FORMAT)
        result += result.empty() ? "ADDRESS_FORMAT" : " | ADDRESS_FORMAT";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RoadNameLayerContent::underlying_type RoadNameLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

RoadNameLayerContent::underlying_type RoadNameLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::name::metadata::RoadNameLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/name/metadata/LaneNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

LaneNameLayerContent::LaneNameLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

LaneNameLayerContent::LaneNameLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

LaneNameLayerContent::LaneNameLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'LaneNameLayerContent' out of bounds: ") << value << "!";
}

void LaneNameLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::name::metadata::LaneNameLayerContent::underlying_type>>(m_value);
}

size_t LaneNameLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t LaneNameLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::metadata::LaneNameLayerContent::underlying_type>>(m_value);
}

size_t LaneNameLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t LaneNameLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t LaneNameLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void LaneNameLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void LaneNameLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::name::metadata::LaneNameLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> LaneNameLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & LaneNameLayerContent::Values::LANE_RANGE_MAPS) == LaneNameLayerContent::Values::LANE_RANGE_MAPS)
        result += result.empty() ? "LANE_RANGE_MAPS" : " | LANE_RANGE_MAPS";
    if ((*this & LaneNameLayerContent::Values::LANE_RANGE_SETS) == LaneNameLayerContent::Values::LANE_RANGE_SETS)
        result += result.empty() ? "LANE_RANGE_SETS" : " | LANE_RANGE_SETS";
    if ((*this & LaneNameLayerContent::Values::LANE_POSITION_MAPS) == LaneNameLayerContent::Values::LANE_POSITION_MAPS)
        result += result.empty() ? "LANE_POSITION_MAPS" : " | LANE_POSITION_MAPS";
    if ((*this & LaneNameLayerContent::Values::LANE_POSITION_SETS) == LaneNameLayerContent::Values::LANE_POSITION_SETS)
        result += result.empty() ? "LANE_POSITION_SETS" : " | LANE_POSITION_SETS";
    if ((*this & LaneNameLayerContent::Values::ADMIN_HIERARCHY) == LaneNameLayerContent::Values::ADMIN_HIERARCHY)
        result += result.empty() ? "ADMIN_HIERARCHY" : " | ADMIN_HIERARCHY";
    if ((*this & LaneNameLayerContent::Values::ADDRESS_FORMAT) == LaneNameLayerContent::Values::ADDRESS_FORMAT)
        result += result.empty() ? "ADDRESS_FORMAT" : " | ADDRESS_FORMAT";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

LaneNameLayerContent::underlying_type LaneNameLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

LaneNameLayerContent::underlying_type LaneNameLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::name::metadata::LaneNameLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/name/metadata/DisplayNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

DisplayNameLayerContent::DisplayNameLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

DisplayNameLayerContent::DisplayNameLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

DisplayNameLayerContent::DisplayNameLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'DisplayNameLayerContent' out of bounds: ") << value << "!";
}

void DisplayNameLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::name::metadata::DisplayNameLayerContent::underlying_type>>(m_value);
}

size_t DisplayNameLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t DisplayNameLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::metadata::DisplayNameLayerContent::underlying_type>>(m_value);
}

size_t DisplayNameLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t DisplayNameLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t DisplayNameLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void DisplayNameLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void DisplayNameLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::name::metadata::DisplayNameLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> DisplayNameLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
        result += result.empty() ? "DISPLAY_LINE_RANGE_MAPS" : " | DISPLAY_LINE_RANGE_MAPS";
    if ((*this & DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
        result += result.empty() ? "DISPLAY_AREA_MAPS" : " | DISPLAY_AREA_MAPS";
    if ((*this & DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
        result += result.empty() ? "DISPLAY_POINT_MAPS" : " | DISPLAY_POINT_MAPS";
    if ((*this & DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
        result += result.empty() ? "DISPLAY_LINE_RANGE_SETS" : " | DISPLAY_LINE_RANGE_SETS";
    if ((*this & DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
        result += result.empty() ? "DISPLAY_AREA_SETS" : " | DISPLAY_AREA_SETS";
    if ((*this & DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
        result += result.empty() ? "DISPLAY_POINT_SETS" : " | DISPLAY_POINT_SETS";
    if ((*this & DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
        result += result.empty() ? "ADMIN_HIERARCHY" : " | ADMIN_HIERARCHY";
    if ((*this & DisplayNameLayerContent::Values::ADDRESS_FORMAT) == DisplayNameLayerContent::Values::ADDRESS_FORMAT)
        result += result.empty() ? "ADDRESS_FORMAT" : " | ADDRESS_FORMAT";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

DisplayNameLayerContent::underlying_type DisplayNameLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

DisplayNameLayerContent::underlying_type DisplayNameLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::name::metadata::DisplayNameLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/name/metadata/AddressSearchFilterOptions.h>

namespace nds
{
namespace name
{
namespace metadata
{

AddressSearchFilterOptions::AddressSearchFilterOptions(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

AddressSearchFilterOptions::AddressSearchFilterOptions(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

AddressSearchFilterOptions::AddressSearchFilterOptions(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'AddressSearchFilterOptions' out of bounds: ") << value << "!";
}

void AddressSearchFilterOptions::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::name::metadata::AddressSearchFilterOptions::underlying_type>>(m_value);
}

size_t AddressSearchFilterOptions::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t AddressSearchFilterOptions::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::metadata::AddressSearchFilterOptions::underlying_type>>(m_value);
}

size_t AddressSearchFilterOptions::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t AddressSearchFilterOptions::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t AddressSearchFilterOptions::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void AddressSearchFilterOptions::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void AddressSearchFilterOptions::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::name::metadata::AddressSearchFilterOptions::underlying_type>>(out, m_value);
}

::zserio::string<> AddressSearchFilterOptions::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
        result += result.empty() ? "ADMINISTRATIVE_HIERARCHY_FILTER" : " | ADMINISTRATIVE_HIERARCHY_FILTER";
    if ((*this & AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
        result += result.empty() ? "ADDRESS_FORMAT_FILTER" : " | ADDRESS_FORMAT_FILTER";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

AddressSearchFilterOptions::underlying_type AddressSearchFilterOptions::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

AddressSearchFilterOptions::underlying_type AddressSearchFilterOptions::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::name::metadata::AddressSearchFilterOptions::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/name/metadata/AddressSearchResultDetailsContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

AddressSearchResultDetailsContent::AddressSearchResultDetailsContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

AddressSearchResultDetailsContent::AddressSearchResultDetailsContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

AddressSearchResultDetailsContent::AddressSearchResultDetailsContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'AddressSearchResultDetailsContent' out of bounds: ") << value << "!";
}

void AddressSearchResultDetailsContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::name::metadata::AddressSearchResultDetailsContent::underlying_type>>(m_value);
}

size_t AddressSearchResultDetailsContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t AddressSearchResultDetailsContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::metadata::AddressSearchResultDetailsContent::underlying_type>>(m_value);
}

size_t AddressSearchResultDetailsContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t AddressSearchResultDetailsContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t AddressSearchResultDetailsContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void AddressSearchResultDetailsContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void AddressSearchResultDetailsContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::name::metadata::AddressSearchResultDetailsContent::underlying_type>>(out, m_value);
}

::zserio::string<> AddressSearchResultDetailsContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & AddressSearchResultDetailsContent::Values::ATTRIBUTES) == AddressSearchResultDetailsContent::Values::ATTRIBUTES)
        result += result.empty() ? "ATTRIBUTES" : " | ATTRIBUTES";
    if ((*this & AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
        result += result.empty() ? "ADMINISTRATIVE_HIERARCHY" : " | ADMINISTRATIVE_HIERARCHY";
    if ((*this & AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
        result += result.empty() ? "ADDRESS_FORMAT_ID" : " | ADDRESS_FORMAT_ID";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

AddressSearchResultDetailsContent::underlying_type AddressSearchResultDetailsContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

AddressSearchResultDetailsContent::underlying_type AddressSearchResultDetailsContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::name::metadata::AddressSearchResultDetailsContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/name/metadata/PoiNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

PoiNameLayerContent::PoiNameLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

PoiNameLayerContent::PoiNameLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

PoiNameLayerContent::PoiNameLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'PoiNameLayerContent' out of bounds: ") << value << "!";
}

void PoiNameLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::name::metadata::PoiNameLayerContent::underlying_type>>(m_value);
}

size_t PoiNameLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t PoiNameLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::metadata::PoiNameLayerContent::underlying_type>>(m_value);
}

size_t PoiNameLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t PoiNameLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t PoiNameLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void PoiNameLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void PoiNameLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::name::metadata::PoiNameLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> PoiNameLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & PoiNameLayerContent::Values::POI_MAPS) == PoiNameLayerContent::Values::POI_MAPS)
        result += result.empty() ? "POI_MAPS" : " | POI_MAPS";
    if ((*this & PoiNameLayerContent::Values::POI_SETS) == PoiNameLayerContent::Values::POI_SETS)
        result += result.empty() ? "POI_SETS" : " | POI_SETS";
    if ((*this & PoiNameLayerContent::Values::ADDRESS_FORMAT) == PoiNameLayerContent::Values::ADDRESS_FORMAT)
        result += result.empty() ? "ADDRESS_FORMAT" : " | ADDRESS_FORMAT";
    if ((*this & PoiNameLayerContent::Values::ADMIN_HIERARCHY) == PoiNameLayerContent::Values::ADMIN_HIERARCHY)
        result += result.empty() ? "ADMIN_HIERARCHY" : " | ADMIN_HIERARCHY";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

PoiNameLayerContent::underlying_type PoiNameLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

PoiNameLayerContent::underlying_type PoiNameLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::name::metadata::PoiNameLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/metadata/RoadNameLayerMetadata.h>
#include <nds/name/metadata/RoadNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

RoadNameLayerMetadata::RoadNameLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::name::metadata::RoadNameLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_roadPositionAttributeMetadata_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt),
        m_availableLanguages_(allocator)
{
}

RoadNameLayerMetadata::RoadNameLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

RoadNameLayerMetadata::RoadNameLayerMetadata(RoadNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

RoadNameLayerMetadata::RoadNameLayerMetadata(::zserio::PropagateAllocatorT,
        const RoadNameLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_roadPositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeMetadata_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::name::metadata::RoadNameLayerContent RoadNameLayerMetadata::getContent() const
{
    return m_content_;
}

void RoadNameLayerMetadata::setContent(::nds::name::metadata::RoadNameLayerContent content_)
{
    m_content_ = content_;
}

::nds::name::instantiations::NameRoadRangeAttributeMetadata& RoadNameLayerMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::name::instantiations::NameRoadRangeAttributeMetadata& RoadNameLayerMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadNameLayerMetadata::setRoadRangeAttributeMetadata(const ::nds::name::instantiations::NameRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadNameLayerMetadata::setRoadRangeAttributeMetadata(::nds::name::instantiations::NameRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadNameLayerMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadNameLayerMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadNameLayerMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::name::instantiations::NameRoadPositionAttributeMetadata& RoadNameLayerMetadata::getRoadPositionAttributeMetadata()
{
    return m_roadPositionAttributeMetadata_.value();
}

const ::nds::name::instantiations::NameRoadPositionAttributeMetadata& RoadNameLayerMetadata::getRoadPositionAttributeMetadata() const
{
    return m_roadPositionAttributeMetadata_.value();
}

void RoadNameLayerMetadata::setRoadPositionAttributeMetadata(const ::nds::name::instantiations::NameRoadPositionAttributeMetadata& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = roadPositionAttributeMetadata_;
}

void RoadNameLayerMetadata::setRoadPositionAttributeMetadata(::nds::name::instantiations::NameRoadPositionAttributeMetadata&& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = ::std::move(roadPositionAttributeMetadata_);
}

bool RoadNameLayerMetadata::isRoadPositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS);
}

bool RoadNameLayerMetadata::isRoadPositionAttributeMetadataSet() const
{
    return m_roadPositionAttributeMetadata_.hasValue();
}

void RoadNameLayerMetadata::resetRoadPositionAttributeMetadata()
{
    m_roadPositionAttributeMetadata_.reset();
}

::nds::name::instantiations::NameTransitionAttributeMetadata& RoadNameLayerMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::name::instantiations::NameTransitionAttributeMetadata& RoadNameLayerMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void RoadNameLayerMetadata::setTransitionAttributeMetadata(const ::nds::name::instantiations::NameTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void RoadNameLayerMetadata::setTransitionAttributeMetadata(::nds::name::instantiations::NameTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool RoadNameLayerMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS);
}

bool RoadNameLayerMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void RoadNameLayerMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

::nds::core::language::AvailableLanguages& RoadNameLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& RoadNameLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void RoadNameLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void RoadNameLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

void RoadNameLayerMetadata::initPackingContext(RoadNameLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().initPackingContext(context.getRoadPositionAttributeMetadata());
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
}

size_t RoadNameLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadNameLayerMetadata::bitSizeOf(RoadNameLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadNameLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t RoadNameLayerMetadata::initializeOffsets(RoadNameLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition;
}

bool RoadNameLayerMetadata::operator==(const RoadNameLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isRoadPositionAttributeMetadataUsed() ? !other.isRoadPositionAttributeMetadataUsed() : (m_roadPositionAttributeMetadata_ == other.m_roadPositionAttributeMetadata_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_)) &&
                (m_availableLanguages_ == other.m_availableLanguages_);
    }

    return true;
}

uint32_t RoadNameLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isRoadPositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeMetadata_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void RoadNameLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
    m_availableLanguages_.write(out);
}

void RoadNameLayerMetadata::write(RoadNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(context.getRoadPositionAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
}

::nds::name::metadata::RoadNameLayerContent RoadNameLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::RoadNameLayerContent(in);
}

::nds::name::metadata::RoadNameLayerContent RoadNameLayerMetadata::readContent(RoadNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::RoadNameLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata> RoadNameLayerMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata>(::nds::name::instantiations::NameRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata> RoadNameLayerMetadata::readRoadRangeAttributeMetadata(RoadNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata>(::nds::name::instantiations::NameRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata> RoadNameLayerMetadata::readRoadPositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata>(::nds::name::instantiations::NameRoadPositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata> RoadNameLayerMetadata::readRoadPositionAttributeMetadata(RoadNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata>(::nds::name::instantiations::NameRoadPositionAttributeMetadata(context.getRoadPositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata> RoadNameLayerMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata>(::nds::name::instantiations::NameTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata> RoadNameLayerMetadata::readTransitionAttributeMetadata(RoadNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata>(::nds::name::instantiations::NameTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata>(::zserio::NullOpt);
}
::nds::core::language::AvailableLanguages RoadNameLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages RoadNameLayerMetadata::readAvailableLanguages(RoadNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/metadata/LaneNameLayerMetadata.h>
#include <nds/name/metadata/LaneNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

LaneNameLayerMetadata::LaneNameLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::name::metadata::LaneNameLayerContent()),
        m_laneRangeAttributeMetadata_(::zserio::NullOpt),
        m_lanePositionAttributeMetadata_(::zserio::NullOpt),
        m_availableLanguages_(allocator)
{
}

LaneNameLayerMetadata::LaneNameLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(in, allocator)),
        m_lanePositionAttributeMetadata_(readLanePositionAttributeMetadata(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

LaneNameLayerMetadata::LaneNameLayerMetadata(LaneNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(context, in, allocator)),
        m_lanePositionAttributeMetadata_(readLanePositionAttributeMetadata(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

LaneNameLayerMetadata::LaneNameLayerMetadata(::zserio::PropagateAllocatorT,
        const LaneNameLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMetadata_, allocator)),
        m_lanePositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeMetadata_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::name::metadata::LaneNameLayerContent LaneNameLayerMetadata::getContent() const
{
    return m_content_;
}

void LaneNameLayerMetadata::setContent(::nds::name::metadata::LaneNameLayerContent content_)
{
    m_content_ = content_;
}

::nds::name::instantiations::NameLaneRangeAttributeMetadata& LaneNameLayerMetadata::getLaneRangeAttributeMetadata()
{
    return m_laneRangeAttributeMetadata_.value();
}

const ::nds::name::instantiations::NameLaneRangeAttributeMetadata& LaneNameLayerMetadata::getLaneRangeAttributeMetadata() const
{
    return m_laneRangeAttributeMetadata_.value();
}

void LaneNameLayerMetadata::setLaneRangeAttributeMetadata(const ::nds::name::instantiations::NameLaneRangeAttributeMetadata& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = laneRangeAttributeMetadata_;
}

void LaneNameLayerMetadata::setLaneRangeAttributeMetadata(::nds::name::instantiations::NameLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = ::std::move(laneRangeAttributeMetadata_);
}

bool LaneNameLayerMetadata::isLaneRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneNameLayerMetadata::isLaneRangeAttributeMetadataSet() const
{
    return m_laneRangeAttributeMetadata_.hasValue();
}

void LaneNameLayerMetadata::resetLaneRangeAttributeMetadata()
{
    m_laneRangeAttributeMetadata_.reset();
}

::nds::name::instantiations::NameLanePositionAttributeMetadata& LaneNameLayerMetadata::getLanePositionAttributeMetadata()
{
    return m_lanePositionAttributeMetadata_.value();
}

const ::nds::name::instantiations::NameLanePositionAttributeMetadata& LaneNameLayerMetadata::getLanePositionAttributeMetadata() const
{
    return m_lanePositionAttributeMetadata_.value();
}

void LaneNameLayerMetadata::setLanePositionAttributeMetadata(const ::nds::name::instantiations::NameLanePositionAttributeMetadata& lanePositionAttributeMetadata_)
{
    m_lanePositionAttributeMetadata_ = lanePositionAttributeMetadata_;
}

void LaneNameLayerMetadata::setLanePositionAttributeMetadata(::nds::name::instantiations::NameLanePositionAttributeMetadata&& lanePositionAttributeMetadata_)
{
    m_lanePositionAttributeMetadata_ = ::std::move(lanePositionAttributeMetadata_);
}

bool LaneNameLayerMetadata::isLanePositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS);
}

bool LaneNameLayerMetadata::isLanePositionAttributeMetadataSet() const
{
    return m_lanePositionAttributeMetadata_.hasValue();
}

void LaneNameLayerMetadata::resetLanePositionAttributeMetadata()
{
    m_lanePositionAttributeMetadata_.reset();
}

::nds::core::language::AvailableLanguages& LaneNameLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& LaneNameLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void LaneNameLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void LaneNameLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

void LaneNameLayerMetadata::initPackingContext(LaneNameLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().initPackingContext(context.getLaneRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().initPackingContext(context.getLanePositionAttributeMetadata());
    }
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
}

size_t LaneNameLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneNameLayerMetadata::bitSizeOf(LaneNameLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeMetadata_.value().bitSizeOf(context.getLanePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LaneNameLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t LaneNameLayerMetadata::initializeOffsets(LaneNameLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeMetadata_.value().initializeOffsets(context.getLanePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition;
}

bool LaneNameLayerMetadata::operator==(const LaneNameLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMetadataUsed() ? !other.isLaneRangeAttributeMetadataUsed() : (m_laneRangeAttributeMetadata_ == other.m_laneRangeAttributeMetadata_)) &&
                (!isLanePositionAttributeMetadataUsed() ? !other.isLanePositionAttributeMetadataUsed() : (m_lanePositionAttributeMetadata_ == other.m_lanePositionAttributeMetadata_)) &&
                (m_availableLanguages_ == other.m_availableLanguages_);
    }

    return true;
}

uint32_t LaneNameLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMetadata_);
    if (isLanePositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void LaneNameLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().write(out);
    }
    m_availableLanguages_.write(out);
}

void LaneNameLayerMetadata::write(LaneNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(context.getLaneRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().write(context.getLanePositionAttributeMetadata(), out);
    }
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
}

::nds::name::metadata::LaneNameLayerContent LaneNameLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::LaneNameLayerContent(in);
}

::nds::name::metadata::LaneNameLayerContent LaneNameLayerMetadata::readContent(LaneNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::LaneNameLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMetadata> LaneNameLayerMetadata::readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMetadata>(::nds::name::instantiations::NameLaneRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMetadata> LaneNameLayerMetadata::readLaneRangeAttributeMetadata(LaneNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMetadata>(::nds::name::instantiations::NameLaneRangeAttributeMetadata(context.getLaneRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMetadata> LaneNameLayerMetadata::readLanePositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMetadata>(::nds::name::instantiations::NameLanePositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMetadata> LaneNameLayerMetadata::readLanePositionAttributeMetadata(LaneNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMetadata>(::nds::name::instantiations::NameLanePositionAttributeMetadata(context.getLanePositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMetadata>(::zserio::NullOpt);
}
::nds::core::language::AvailableLanguages LaneNameLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages LaneNameLayerMetadata::readAvailableLanguages(LaneNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/metadata/DisplayNameLayerMetadata.h>
#include <nds/name/metadata/DisplayNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

DisplayNameLayerMetadata::DisplayNameLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::name::metadata::DisplayNameLayerContent()),
        m_displayLineRangeAttributeMetadata_(::zserio::NullOpt),
        m_displayAreaAttributeMetadata_(::zserio::NullOpt),
        m_displayPointAttributeMetadata_(::zserio::NullOpt),
        m_availableLanguages_(allocator)
{
}

DisplayNameLayerMetadata::DisplayNameLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_displayLineRangeAttributeMetadata_(readDisplayLineRangeAttributeMetadata(in, allocator)),
        m_displayAreaAttributeMetadata_(readDisplayAreaAttributeMetadata(in, allocator)),
        m_displayPointAttributeMetadata_(readDisplayPointAttributeMetadata(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

DisplayNameLayerMetadata::DisplayNameLayerMetadata(DisplayNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_displayLineRangeAttributeMetadata_(readDisplayLineRangeAttributeMetadata(context, in, allocator)),
        m_displayAreaAttributeMetadata_(readDisplayAreaAttributeMetadata(context, in, allocator)),
        m_displayPointAttributeMetadata_(readDisplayPointAttributeMetadata(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

DisplayNameLayerMetadata::DisplayNameLayerMetadata(::zserio::PropagateAllocatorT,
        const DisplayNameLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_displayLineRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeMetadata_, allocator)),
        m_displayAreaAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayAreaAttributeMetadata_, allocator)),
        m_displayPointAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayPointAttributeMetadata_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::name::metadata::DisplayNameLayerContent DisplayNameLayerMetadata::getContent() const
{
    return m_content_;
}

void DisplayNameLayerMetadata::setContent(::nds::name::metadata::DisplayNameLayerContent content_)
{
    m_content_ = content_;
}

::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata& DisplayNameLayerMetadata::getDisplayLineRangeAttributeMetadata()
{
    return m_displayLineRangeAttributeMetadata_.value();
}

const ::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata& DisplayNameLayerMetadata::getDisplayLineRangeAttributeMetadata() const
{
    return m_displayLineRangeAttributeMetadata_.value();
}

void DisplayNameLayerMetadata::setDisplayLineRangeAttributeMetadata(const ::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata& displayLineRangeAttributeMetadata_)
{
    m_displayLineRangeAttributeMetadata_ = displayLineRangeAttributeMetadata_;
}

void DisplayNameLayerMetadata::setDisplayLineRangeAttributeMetadata(::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata&& displayLineRangeAttributeMetadata_)
{
    m_displayLineRangeAttributeMetadata_ = ::std::move(displayLineRangeAttributeMetadata_);
}

bool DisplayNameLayerMetadata::isDisplayLineRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS);
}

bool DisplayNameLayerMetadata::isDisplayLineRangeAttributeMetadataSet() const
{
    return m_displayLineRangeAttributeMetadata_.hasValue();
}

void DisplayNameLayerMetadata::resetDisplayLineRangeAttributeMetadata()
{
    m_displayLineRangeAttributeMetadata_.reset();
}

::nds::name::instantiations::NameDisplayAreaAttributeMetadata& DisplayNameLayerMetadata::getDisplayAreaAttributeMetadata()
{
    return m_displayAreaAttributeMetadata_.value();
}

const ::nds::name::instantiations::NameDisplayAreaAttributeMetadata& DisplayNameLayerMetadata::getDisplayAreaAttributeMetadata() const
{
    return m_displayAreaAttributeMetadata_.value();
}

void DisplayNameLayerMetadata::setDisplayAreaAttributeMetadata(const ::nds::name::instantiations::NameDisplayAreaAttributeMetadata& displayAreaAttributeMetadata_)
{
    m_displayAreaAttributeMetadata_ = displayAreaAttributeMetadata_;
}

void DisplayNameLayerMetadata::setDisplayAreaAttributeMetadata(::nds::name::instantiations::NameDisplayAreaAttributeMetadata&& displayAreaAttributeMetadata_)
{
    m_displayAreaAttributeMetadata_ = ::std::move(displayAreaAttributeMetadata_);
}

bool DisplayNameLayerMetadata::isDisplayAreaAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS);
}

bool DisplayNameLayerMetadata::isDisplayAreaAttributeMetadataSet() const
{
    return m_displayAreaAttributeMetadata_.hasValue();
}

void DisplayNameLayerMetadata::resetDisplayAreaAttributeMetadata()
{
    m_displayAreaAttributeMetadata_.reset();
}

::nds::name::instantiations::NameDisplayPointAttributeMetadata& DisplayNameLayerMetadata::getDisplayPointAttributeMetadata()
{
    return m_displayPointAttributeMetadata_.value();
}

const ::nds::name::instantiations::NameDisplayPointAttributeMetadata& DisplayNameLayerMetadata::getDisplayPointAttributeMetadata() const
{
    return m_displayPointAttributeMetadata_.value();
}

void DisplayNameLayerMetadata::setDisplayPointAttributeMetadata(const ::nds::name::instantiations::NameDisplayPointAttributeMetadata& displayPointAttributeMetadata_)
{
    m_displayPointAttributeMetadata_ = displayPointAttributeMetadata_;
}

void DisplayNameLayerMetadata::setDisplayPointAttributeMetadata(::nds::name::instantiations::NameDisplayPointAttributeMetadata&& displayPointAttributeMetadata_)
{
    m_displayPointAttributeMetadata_ = ::std::move(displayPointAttributeMetadata_);
}

bool DisplayNameLayerMetadata::isDisplayPointAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS);
}

bool DisplayNameLayerMetadata::isDisplayPointAttributeMetadataSet() const
{
    return m_displayPointAttributeMetadata_.hasValue();
}

void DisplayNameLayerMetadata::resetDisplayPointAttributeMetadata()
{
    m_displayPointAttributeMetadata_.reset();
}

::nds::core::language::AvailableLanguages& DisplayNameLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& DisplayNameLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void DisplayNameLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void DisplayNameLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

void DisplayNameLayerMetadata::initPackingContext(DisplayNameLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().initPackingContext(context.getDisplayLineRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        m_displayAreaAttributeMetadata_.value().initPackingContext(context.getDisplayAreaAttributeMetadata());
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        m_displayPointAttributeMetadata_.value().initPackingContext(context.getDisplayPointAttributeMetadata());
    }
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
}

size_t DisplayNameLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition += m_displayAreaAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition += m_displayPointAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayNameLayerMetadata::bitSizeOf(DisplayNameLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeMetadata_.value().bitSizeOf(context.getDisplayLineRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition += m_displayAreaAttributeMetadata_.value().bitSizeOf(context.getDisplayAreaAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition += m_displayPointAttributeMetadata_.value().bitSizeOf(context.getDisplayPointAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayNameLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition = m_displayAreaAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition = m_displayPointAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t DisplayNameLayerMetadata::initializeOffsets(DisplayNameLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeMetadata_.value().initializeOffsets(context.getDisplayLineRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition = m_displayAreaAttributeMetadata_.value().initializeOffsets(context.getDisplayAreaAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition = m_displayPointAttributeMetadata_.value().initializeOffsets(context.getDisplayPointAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition;
}

bool DisplayNameLayerMetadata::operator==(const DisplayNameLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isDisplayLineRangeAttributeMetadataUsed() ? !other.isDisplayLineRangeAttributeMetadataUsed() : (m_displayLineRangeAttributeMetadata_ == other.m_displayLineRangeAttributeMetadata_)) &&
                (!isDisplayAreaAttributeMetadataUsed() ? !other.isDisplayAreaAttributeMetadataUsed() : (m_displayAreaAttributeMetadata_ == other.m_displayAreaAttributeMetadata_)) &&
                (!isDisplayPointAttributeMetadataUsed() ? !other.isDisplayPointAttributeMetadataUsed() : (m_displayPointAttributeMetadata_ == other.m_displayPointAttributeMetadata_)) &&
                (m_availableLanguages_ == other.m_availableLanguages_);
    }

    return true;
}

uint32_t DisplayNameLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isDisplayLineRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeMetadata_);
    if (isDisplayAreaAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayAreaAttributeMetadata_);
    if (isDisplayPointAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayPointAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void DisplayNameLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        m_displayAreaAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        m_displayPointAttributeMetadata_.value().write(out);
    }
    m_availableLanguages_.write(out);
}

void DisplayNameLayerMetadata::write(DisplayNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().write(context.getDisplayLineRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        m_displayAreaAttributeMetadata_.value().write(context.getDisplayAreaAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        m_displayPointAttributeMetadata_.value().write(context.getDisplayPointAttributeMetadata(), out);
    }
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
}

::nds::name::metadata::DisplayNameLayerContent DisplayNameLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::DisplayNameLayerContent(in);
}

::nds::name::metadata::DisplayNameLayerContent DisplayNameLayerMetadata::readContent(DisplayNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::DisplayNameLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata> DisplayNameLayerMetadata::readDisplayLineRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata>(::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata> DisplayNameLayerMetadata::readDisplayLineRangeAttributeMetadata(DisplayNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata>(::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata(context.getDisplayLineRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMetadata> DisplayNameLayerMetadata::readDisplayAreaAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMetadata>(::nds::name::instantiations::NameDisplayAreaAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMetadata> DisplayNameLayerMetadata::readDisplayAreaAttributeMetadata(DisplayNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMetadata>(::nds::name::instantiations::NameDisplayAreaAttributeMetadata(context.getDisplayAreaAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMetadata> DisplayNameLayerMetadata::readDisplayPointAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMetadata>(::nds::name::instantiations::NameDisplayPointAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMetadata> DisplayNameLayerMetadata::readDisplayPointAttributeMetadata(DisplayNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMetadata>(::nds::name::instantiations::NameDisplayPointAttributeMetadata(context.getDisplayPointAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMetadata>(::zserio::NullOpt);
}
::nds::core::language::AvailableLanguages DisplayNameLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages DisplayNameLayerMetadata::readAvailableLanguages(DisplayNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/name/metadata/AddressSearchMetadata.h>

namespace nds
{
namespace name
{
namespace metadata
{

AddressSearchMetadata::AddressSearchMetadata(const allocator_type& allocator) noexcept :
        m_supportedFilter_(::nds::name::metadata::AddressSearchFilterOptions()),
        m_addressFormats_(allocator)
{
}

AddressSearchMetadata::AddressSearchMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_supportedFilter_(readSupportedFilter(in)),
        m_addressFormats_(readAddressFormats(in, allocator))
{
}

AddressSearchMetadata::AddressSearchMetadata(AddressSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_supportedFilter_(readSupportedFilter(context, in)),
        m_addressFormats_(readAddressFormats(context, in, allocator))
{
}

AddressSearchMetadata::AddressSearchMetadata(::zserio::PropagateAllocatorT,
        const AddressSearchMetadata& other, const allocator_type& allocator) :
        m_supportedFilter_(::zserio::allocatorPropagatingCopy(other.m_supportedFilter_, allocator)),
        m_addressFormats_(::zserio::allocatorPropagatingCopy(other.m_addressFormats_, allocator))
{
}

::nds::name::metadata::AddressSearchFilterOptions AddressSearchMetadata::getSupportedFilter() const
{
    return m_supportedFilter_;
}

void AddressSearchMetadata::setSupportedFilter(::nds::name::metadata::AddressSearchFilterOptions supportedFilter_)
{
    m_supportedFilter_ = supportedFilter_;
}

::zserio::vector<::nds::name::types::AddressFormat>& AddressSearchMetadata::getAddressFormats()
{
    return m_addressFormats_.getRawArray();
}

const ::zserio::vector<::nds::name::types::AddressFormat>& AddressSearchMetadata::getAddressFormats() const
{
    return m_addressFormats_.getRawArray();
}

void AddressSearchMetadata::setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(addressFormats_);
}

void AddressSearchMetadata::setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(std::move(addressFormats_));
}

void AddressSearchMetadata::initPackingContext(AddressSearchMetadata::ZserioPackingContext& context) const
{
    m_supportedFilter_.initPackingContext(context.getSupportedFilter());
}

size_t AddressSearchMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_supportedFilter_.bitSizeOf(endBitPosition);
    endBitPosition += m_addressFormats_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AddressSearchMetadata::bitSizeOf(AddressSearchMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_supportedFilter_.bitSizeOf(context.getSupportedFilter(), endBitPosition);
    endBitPosition += m_addressFormats_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AddressSearchMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_supportedFilter_.initializeOffsets(endBitPosition);
    endBitPosition = m_addressFormats_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t AddressSearchMetadata::initializeOffsets(AddressSearchMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_supportedFilter_.initializeOffsets(context.getSupportedFilter(), endBitPosition);
    endBitPosition = m_addressFormats_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool AddressSearchMetadata::operator==(const AddressSearchMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_supportedFilter_ == other.m_supportedFilter_) &&
                (m_addressFormats_ == other.m_addressFormats_);
    }

    return true;
}

uint32_t AddressSearchMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_supportedFilter_);
    result = ::zserio::calcHashCode(result, m_addressFormats_);

    return result;
}

void AddressSearchMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_supportedFilter_.write(out);
    m_addressFormats_.write(*this, out);
}

void AddressSearchMetadata::write(AddressSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_supportedFilter_.write(context.getSupportedFilter(), out);
    m_addressFormats_.writePacked(*this, out);
}

void AddressSearchMetadata::ZserioElementFactory_addressFormats::create(AddressSearchMetadata&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void AddressSearchMetadata::ZserioElementFactory_addressFormats::create(AddressSearchMetadata&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::nds::name::types::AddressFormat::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::name::metadata::AddressSearchFilterOptions AddressSearchMetadata::readSupportedFilter(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::AddressSearchFilterOptions(in);
}

::nds::name::metadata::AddressSearchFilterOptions AddressSearchMetadata::readSupportedFilter(AddressSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::AddressSearchFilterOptions(context.getSupportedFilter(), in);
}
AddressSearchMetadata::ZserioArrayType_addressFormats AddressSearchMetadata::readAddressFormats(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_addressFormats readField(allocator);
    readField.read(*this, in);

    return readField;
}

AddressSearchMetadata::ZserioArrayType_addressFormats AddressSearchMetadata::readAddressFormats(AddressSearchMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_addressFormats readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/metadata/AddressSearchResultDetails.h>
#include <nds/name/metadata/AddressSearchResultDetailsContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

AddressSearchResultDetails::AddressSearchResultDetails(const allocator_type&) noexcept :
        m_content_(::nds::name::metadata::AddressSearchResultDetailsContent()),
        m_nameAttributes_(::zserio::NullOpt),
        m_adminElements_(::zserio::NullOpt),
        m_addressFormatId_(::zserio::NullOpt)
{
}

AddressSearchResultDetails::AddressSearchResultDetails(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_nameAttributes_(readNameAttributes(in, allocator)),
        m_adminElements_(readAdminElements(in, allocator)),
        m_addressFormatId_(readAddressFormatId(in))
{
}

AddressSearchResultDetails::AddressSearchResultDetails(AddressSearchResultDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_nameAttributes_(readNameAttributes(context, in, allocator)),
        m_adminElements_(readAdminElements(context, in, allocator)),
        m_addressFormatId_(readAddressFormatId(context, in))
{
}

AddressSearchResultDetails::AddressSearchResultDetails(::zserio::PropagateAllocatorT,
        const AddressSearchResultDetails& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_nameAttributes_(::zserio::allocatorPropagatingCopy(other.m_nameAttributes_, allocator)),
        m_adminElements_(::zserio::allocatorPropagatingCopy(other.m_adminElements_, allocator)),
        m_addressFormatId_(::zserio::allocatorPropagatingCopy(other.m_addressFormatId_, allocator))
{
}

void AddressSearchResultDetails::initializeChildren()
{
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
        m_nameAttributes_.value().initializeElements(*this);
}

::nds::name::metadata::AddressSearchResultDetailsContent AddressSearchResultDetails::getContent() const
{
    return m_content_;
}

void AddressSearchResultDetails::setContent(::nds::name::metadata::AddressSearchResultDetailsContent content_)
{
    m_content_ = content_;
}

::zserio::vector<::nds::name::instantiations::NameRoadRangeFullAttribute>& AddressSearchResultDetails::getNameAttributes()
{
    return m_nameAttributes_.value().getRawArray();
}

const ::zserio::vector<::nds::name::instantiations::NameRoadRangeFullAttribute>& AddressSearchResultDetails::getNameAttributes() const
{
    return m_nameAttributes_.value().getRawArray();
}

void AddressSearchResultDetails::setNameAttributes(const ::zserio::vector<::nds::name::instantiations::NameRoadRangeFullAttribute>& nameAttributes_)
{
    m_nameAttributes_ = ZserioArrayType_nameAttributes(nameAttributes_);
}

void AddressSearchResultDetails::setNameAttributes(::zserio::vector<::nds::name::instantiations::NameRoadRangeFullAttribute>&& nameAttributes_)
{
    m_nameAttributes_ = ZserioArrayType_nameAttributes(std::move(nameAttributes_));
}

bool AddressSearchResultDetails::isNameAttributesUsed() const
{
    return ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES);
}

bool AddressSearchResultDetails::isNameAttributesSet() const
{
    return m_nameAttributes_.hasValue();
}

void AddressSearchResultDetails::resetNameAttributes()
{
    m_nameAttributes_.reset();
}

::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& AddressSearchResultDetails::getAdminElements()
{
    return m_adminElements_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& AddressSearchResultDetails::getAdminElements() const
{
    return m_adminElements_.value().getRawArray();
}

void AddressSearchResultDetails::setAdminElements(const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& adminElements_)
{
    m_adminElements_ = ZserioArrayType_adminElements(adminElements_);
}

void AddressSearchResultDetails::setAdminElements(::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>&& adminElements_)
{
    m_adminElements_ = ZserioArrayType_adminElements(std::move(adminElements_));
}

bool AddressSearchResultDetails::isAdminElementsUsed() const
{
    return ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY);
}

bool AddressSearchResultDetails::isAdminElementsSet() const
{
    return m_adminElements_.hasValue();
}

void AddressSearchResultDetails::resetAdminElements()
{
    m_adminElements_.reset();
}

::nds::name::types::AddressFormatId AddressSearchResultDetails::getAddressFormatId() const
{
    return m_addressFormatId_.value();
}

void AddressSearchResultDetails::setAddressFormatId(::nds::name::types::AddressFormatId addressFormatId_)
{
    m_addressFormatId_ = addressFormatId_;
}

bool AddressSearchResultDetails::isAddressFormatIdUsed() const
{
    return ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID);
}

bool AddressSearchResultDetails::isAddressFormatIdSet() const
{
    return m_addressFormatId_.hasValue();
}

void AddressSearchResultDetails::resetAddressFormatId()
{
    m_addressFormatId_.reset();
}

void AddressSearchResultDetails::initPackingContext(AddressSearchResultDetails::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        context.getAddressFormatId().init<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_addressFormatId_.value());
    }
}

size_t AddressSearchResultDetails::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
    {
        endBitPosition += m_nameAttributes_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
    {
        endBitPosition += m_adminElements_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_addressFormatId_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AddressSearchResultDetails::bitSizeOf(AddressSearchResultDetails::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
    {
        endBitPosition += m_nameAttributes_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
    {
        endBitPosition += m_adminElements_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        endBitPosition += context.getAddressFormatId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_addressFormatId_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AddressSearchResultDetails::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
    {
        endBitPosition = m_nameAttributes_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
    {
        endBitPosition = m_adminElements_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_addressFormatId_.value());
    }

    return endBitPosition;
}

size_t AddressSearchResultDetails::initializeOffsets(AddressSearchResultDetails::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
    {
        endBitPosition = m_nameAttributes_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
    {
        endBitPosition = m_adminElements_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        endBitPosition += context.getAddressFormatId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_addressFormatId_.value());
    }

    return endBitPosition;
}

bool AddressSearchResultDetails::operator==(const AddressSearchResultDetails& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isNameAttributesUsed() ? !other.isNameAttributesUsed() : (m_nameAttributes_ == other.m_nameAttributes_)) &&
                (!isAdminElementsUsed() ? !other.isAdminElementsUsed() : (m_adminElements_ == other.m_adminElements_)) &&
                (!isAddressFormatIdUsed() ? !other.isAddressFormatIdUsed() : (m_addressFormatId_ == other.m_addressFormatId_));
    }

    return true;
}

uint32_t AddressSearchResultDetails::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isNameAttributesUsed())
        result = ::zserio::calcHashCode(result, m_nameAttributes_);
    if (isAdminElementsUsed())
        result = ::zserio::calcHashCode(result, m_adminElements_);
    if (isAddressFormatIdUsed())
        result = ::zserio::calcHashCode(result, m_addressFormatId_);

    return result;
}

void AddressSearchResultDetails::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
    {
        m_nameAttributes_.value().write(*this, out);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
    {
        m_adminElements_.value().write(*this, out);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        out.writeVarUInt16(m_addressFormatId_.value());
    }
}

void AddressSearchResultDetails::write(AddressSearchResultDetails::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
    {
        m_nameAttributes_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
    {
        m_adminElements_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        context.getAddressFormatId().write<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(out, m_addressFormatId_.value());
    }
}

void AddressSearchResultDetails::ZserioArrayExpressions_nameAttributes::initializeElement(AddressSearchResultDetails&,
        ::nds::name::instantiations::NameRoadRangeFullAttribute& element, size_t)
{
    element.initializeChildren();
}

void AddressSearchResultDetails::ZserioElementFactory_nameAttributes::create(AddressSearchResultDetails&        ,
        ::zserio::vector<::nds::name::instantiations::NameRoadRangeFullAttribute>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void AddressSearchResultDetails::ZserioElementFactory_nameAttributes::create(AddressSearchResultDetails&        ,
        ::zserio::vector<::nds::name::instantiations::NameRoadRangeFullAttribute>& array,
        ::nds::name::instantiations::NameRoadRangeFullAttribute::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void AddressSearchResultDetails::ZserioElementFactory_adminElements::create(AddressSearchResultDetails&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void AddressSearchResultDetails::ZserioElementFactory_adminElements::create(AddressSearchResultDetails&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::nds::name::types::AdministrativeHierarchyElement::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::name::metadata::AddressSearchResultDetailsContent AddressSearchResultDetails::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::AddressSearchResultDetailsContent(in);
}

::nds::name::metadata::AddressSearchResultDetailsContent AddressSearchResultDetails::readContent(AddressSearchResultDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::AddressSearchResultDetailsContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<AddressSearchResultDetails::ZserioArrayType_nameAttributes> AddressSearchResultDetails::readNameAttributes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
    {
        ZserioArrayType_nameAttributes readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_nameAttributes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_nameAttributes>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<AddressSearchResultDetails::ZserioArrayType_nameAttributes> AddressSearchResultDetails::readNameAttributes(AddressSearchResultDetails::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ATTRIBUTES)
    {
        ZserioArrayType_nameAttributes readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_nameAttributes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_nameAttributes>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<AddressSearchResultDetails::ZserioArrayType_adminElements> AddressSearchResultDetails::readAdminElements(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
    {
        ZserioArrayType_adminElements readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminElements>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminElements>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<AddressSearchResultDetails::ZserioArrayType_adminElements> AddressSearchResultDetails::readAdminElements(AddressSearchResultDetails::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADMINISTRATIVE_HIERARCHY)
    {
        ZserioArrayType_adminElements readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminElements>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminElements>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId> AddressSearchResultDetails::readAddressFormatId(::zserio::BitStreamReader& in)
{
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId>(static_cast<::nds::name::types::AddressFormatId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId> AddressSearchResultDetails::readAddressFormatId(AddressSearchResultDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if ((getContent() & ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID) == ::nds::name::metadata::AddressSearchResultDetailsContent::Values::ADDRESS_FORMAT_ID)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId>(context.getAddressFormatId().read<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/metadata/AddressSearchFilter.h>
#include <nds/name/metadata/AddressSearchFilterOptions.h>

namespace nds
{
namespace name
{
namespace metadata
{

AddressSearchFilter::AddressSearchFilter(const allocator_type&) noexcept :
        m_filterOptions_(::nds::name::metadata::AddressSearchFilterOptions()),
        m_adminHierarchyElementType_(::zserio::NullOpt),
        m_addressFormatId_(::zserio::NullOpt)
{
}

AddressSearchFilter::AddressSearchFilter(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_filterOptions_(readFilterOptions(in)),
        m_adminHierarchyElementType_(readAdminHierarchyElementType(in, allocator)),
        m_addressFormatId_(readAddressFormatId(in))
{
}

AddressSearchFilter::AddressSearchFilter(AddressSearchFilter::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_filterOptions_(readFilterOptions(context, in)),
        m_adminHierarchyElementType_(readAdminHierarchyElementType(context, in, allocator)),
        m_addressFormatId_(readAddressFormatId(context, in))
{
}

AddressSearchFilter::AddressSearchFilter(::zserio::PropagateAllocatorT,
        const AddressSearchFilter& other, const allocator_type& allocator) :
        m_filterOptions_(::zserio::allocatorPropagatingCopy(other.m_filterOptions_, allocator)),
        m_adminHierarchyElementType_(::zserio::allocatorPropagatingCopy(other.m_adminHierarchyElementType_, allocator)),
        m_addressFormatId_(::zserio::allocatorPropagatingCopy(other.m_addressFormatId_, allocator))
{
}

::nds::name::metadata::AddressSearchFilterOptions AddressSearchFilter::getFilterOptions() const
{
    return m_filterOptions_;
}

void AddressSearchFilter::setFilterOptions(::nds::name::metadata::AddressSearchFilterOptions filterOptions_)
{
    m_filterOptions_ = filterOptions_;
}

::zserio::vector<::nds::name::types::AdminHierarchyElementType>& AddressSearchFilter::getAdminHierarchyElementType()
{
    return m_adminHierarchyElementType_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AdminHierarchyElementType>& AddressSearchFilter::getAdminHierarchyElementType() const
{
    return m_adminHierarchyElementType_.value().getRawArray();
}

void AddressSearchFilter::setAdminHierarchyElementType(const ::zserio::vector<::nds::name::types::AdminHierarchyElementType>& adminHierarchyElementType_)
{
    m_adminHierarchyElementType_ = ZserioArrayType_adminHierarchyElementType(adminHierarchyElementType_);
}

void AddressSearchFilter::setAdminHierarchyElementType(::zserio::vector<::nds::name::types::AdminHierarchyElementType>&& adminHierarchyElementType_)
{
    m_adminHierarchyElementType_ = ZserioArrayType_adminHierarchyElementType(std::move(adminHierarchyElementType_));
}

bool AddressSearchFilter::isAdminHierarchyElementTypeUsed() const
{
    return ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER);
}

bool AddressSearchFilter::isAdminHierarchyElementTypeSet() const
{
    return m_adminHierarchyElementType_.hasValue();
}

void AddressSearchFilter::resetAdminHierarchyElementType()
{
    m_adminHierarchyElementType_.reset();
}

::nds::name::types::AddressFormatId AddressSearchFilter::getAddressFormatId() const
{
    return m_addressFormatId_.value();
}

void AddressSearchFilter::setAddressFormatId(::nds::name::types::AddressFormatId addressFormatId_)
{
    m_addressFormatId_ = addressFormatId_;
}

bool AddressSearchFilter::isAddressFormatIdUsed() const
{
    return ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER);
}

bool AddressSearchFilter::isAddressFormatIdSet() const
{
    return m_addressFormatId_.hasValue();
}

void AddressSearchFilter::resetAddressFormatId()
{
    m_addressFormatId_.reset();
}

void AddressSearchFilter::initPackingContext(AddressSearchFilter::ZserioPackingContext& context) const
{
    m_filterOptions_.initPackingContext(context.getFilterOptions());
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        context.getAddressFormatId().init<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_addressFormatId_.value());
    }
}

size_t AddressSearchFilter::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_filterOptions_.bitSizeOf(endBitPosition);
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
    {
        endBitPosition += m_adminHierarchyElementType_.value().bitSizeOf(endBitPosition);
    }
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_addressFormatId_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AddressSearchFilter::bitSizeOf(AddressSearchFilter::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_filterOptions_.bitSizeOf(context.getFilterOptions(), endBitPosition);
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
    {
        endBitPosition += m_adminHierarchyElementType_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        endBitPosition += context.getAddressFormatId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_addressFormatId_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AddressSearchFilter::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_filterOptions_.initializeOffsets(endBitPosition);
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
    {
        endBitPosition = m_adminHierarchyElementType_.value().initializeOffsets(endBitPosition);
    }
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_addressFormatId_.value());
    }

    return endBitPosition;
}

size_t AddressSearchFilter::initializeOffsets(AddressSearchFilter::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_filterOptions_.initializeOffsets(context.getFilterOptions(), endBitPosition);
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
    {
        endBitPosition = m_adminHierarchyElementType_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        endBitPosition += context.getAddressFormatId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(m_addressFormatId_.value());
    }

    return endBitPosition;
}

bool AddressSearchFilter::operator==(const AddressSearchFilter& other) const
{
    if (this != &other)
    {
        return
                (m_filterOptions_ == other.m_filterOptions_) &&
                (!isAdminHierarchyElementTypeUsed() ? !other.isAdminHierarchyElementTypeUsed() : (m_adminHierarchyElementType_ == other.m_adminHierarchyElementType_)) &&
                (!isAddressFormatIdUsed() ? !other.isAddressFormatIdUsed() : (m_addressFormatId_ == other.m_addressFormatId_));
    }

    return true;
}

uint32_t AddressSearchFilter::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_filterOptions_);
    if (isAdminHierarchyElementTypeUsed())
        result = ::zserio::calcHashCode(result, m_adminHierarchyElementType_);
    if (isAddressFormatIdUsed())
        result = ::zserio::calcHashCode(result, m_addressFormatId_);

    return result;
}

void AddressSearchFilter::write(::zserio::BitStreamWriter& out) const
{
    m_filterOptions_.write(out);
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
    {
        m_adminHierarchyElementType_.value().write(out);
    }
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        out.writeVarUInt16(m_addressFormatId_.value());
    }
}

void AddressSearchFilter::write(AddressSearchFilter::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_filterOptions_.write(context.getFilterOptions(), out);
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
    {
        m_adminHierarchyElementType_.value().writePacked(out);
    }
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        context.getAddressFormatId().write<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(out, m_addressFormatId_.value());
    }
}

::nds::name::metadata::AddressSearchFilterOptions AddressSearchFilter::readFilterOptions(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::AddressSearchFilterOptions(in);
}

::nds::name::metadata::AddressSearchFilterOptions AddressSearchFilter::readFilterOptions(AddressSearchFilter::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::AddressSearchFilterOptions(context.getFilterOptions(), in);
}
::zserio::InplaceOptionalHolder<AddressSearchFilter::ZserioArrayType_adminHierarchyElementType> AddressSearchFilter::readAdminHierarchyElementType(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
    {
        ZserioArrayType_adminHierarchyElementType readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementType>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementType>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<AddressSearchFilter::ZserioArrayType_adminHierarchyElementType> AddressSearchFilter::readAdminHierarchyElementType(AddressSearchFilter::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADMINISTRATIVE_HIERARCHY_FILTER)
    {
        ZserioArrayType_adminHierarchyElementType readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementType>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementType>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId> AddressSearchFilter::readAddressFormatId(::zserio::BitStreamReader& in)
{
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId>(static_cast<::nds::name::types::AddressFormatId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId> AddressSearchFilter::readAddressFormatId(AddressSearchFilter::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if ((getFilterOptions() & ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER) == ::nds::name::metadata::AddressSearchFilterOptions::Values::ADDRESS_FORMAT_FILTER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId>(context.getAddressFormatId().read<::zserio::VarIntNNArrayTraits<::nds::name::types::AddressFormatId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::types::AddressFormatId>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/metadata/PoiNameLayerMetadata.h>
#include <nds/name/metadata/PoiNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

PoiNameLayerMetadata::PoiNameLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::name::metadata::PoiNameLayerContent()),
        m_poiAttributeMetadata_(::zserio::NullOpt),
        m_addressFormats_(allocator),
        m_availableLanguages_(allocator)
{
}

PoiNameLayerMetadata::PoiNameLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_poiAttributeMetadata_(readPoiAttributeMetadata(in, allocator)),
        m_addressFormats_(readAddressFormats(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

PoiNameLayerMetadata::PoiNameLayerMetadata(PoiNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_poiAttributeMetadata_(readPoiAttributeMetadata(context, in, allocator)),
        m_addressFormats_(readAddressFormats(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

PoiNameLayerMetadata::PoiNameLayerMetadata(::zserio::PropagateAllocatorT,
        const PoiNameLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_poiAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_poiAttributeMetadata_, allocator)),
        m_addressFormats_(::zserio::allocatorPropagatingCopy(other.m_addressFormats_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::name::metadata::PoiNameLayerContent PoiNameLayerMetadata::getContent() const
{
    return m_content_;
}

void PoiNameLayerMetadata::setContent(::nds::name::metadata::PoiNameLayerContent content_)
{
    m_content_ = content_;
}

::nds::name::instantiations::NamePoiAttributeMetadata& PoiNameLayerMetadata::getPoiAttributeMetadata()
{
    return m_poiAttributeMetadata_.value();
}

const ::nds::name::instantiations::NamePoiAttributeMetadata& PoiNameLayerMetadata::getPoiAttributeMetadata() const
{
    return m_poiAttributeMetadata_.value();
}

void PoiNameLayerMetadata::setPoiAttributeMetadata(const ::nds::name::instantiations::NamePoiAttributeMetadata& poiAttributeMetadata_)
{
    m_poiAttributeMetadata_ = poiAttributeMetadata_;
}

void PoiNameLayerMetadata::setPoiAttributeMetadata(::nds::name::instantiations::NamePoiAttributeMetadata&& poiAttributeMetadata_)
{
    m_poiAttributeMetadata_ = ::std::move(poiAttributeMetadata_);
}

bool PoiNameLayerMetadata::isPoiAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS);
}

bool PoiNameLayerMetadata::isPoiAttributeMetadataSet() const
{
    return m_poiAttributeMetadata_.hasValue();
}

void PoiNameLayerMetadata::resetPoiAttributeMetadata()
{
    m_poiAttributeMetadata_.reset();
}

::zserio::vector<::nds::name::types::AddressFormat>& PoiNameLayerMetadata::getAddressFormats()
{
    return m_addressFormats_.getRawArray();
}

const ::zserio::vector<::nds::name::types::AddressFormat>& PoiNameLayerMetadata::getAddressFormats() const
{
    return m_addressFormats_.getRawArray();
}

void PoiNameLayerMetadata::setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(addressFormats_);
}

void PoiNameLayerMetadata::setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(std::move(addressFormats_));
}

::nds::core::language::AvailableLanguages& PoiNameLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& PoiNameLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void PoiNameLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void PoiNameLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

void PoiNameLayerMetadata::initPackingContext(PoiNameLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        m_poiAttributeMetadata_.value().initPackingContext(context.getPoiAttributeMetadata());
    }
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
}

size_t PoiNameLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        endBitPosition += m_poiAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_addressFormats_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t PoiNameLayerMetadata::bitSizeOf(PoiNameLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        endBitPosition += m_poiAttributeMetadata_.value().bitSizeOf(context.getPoiAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_addressFormats_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t PoiNameLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        endBitPosition = m_poiAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_addressFormats_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t PoiNameLayerMetadata::initializeOffsets(PoiNameLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        endBitPosition = m_poiAttributeMetadata_.value().initializeOffsets(context.getPoiAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_addressFormats_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition;
}

bool PoiNameLayerMetadata::operator==(const PoiNameLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isPoiAttributeMetadataUsed() ? !other.isPoiAttributeMetadataUsed() : (m_poiAttributeMetadata_ == other.m_poiAttributeMetadata_)) &&
                (m_addressFormats_ == other.m_addressFormats_) &&
                (m_availableLanguages_ == other.m_availableLanguages_);
    }

    return true;
}

uint32_t PoiNameLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isPoiAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_poiAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_addressFormats_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void PoiNameLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        m_poiAttributeMetadata_.value().write(out);
    }
    m_addressFormats_.write(*this, out);
    m_availableLanguages_.write(out);
}

void PoiNameLayerMetadata::write(PoiNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        m_poiAttributeMetadata_.value().write(context.getPoiAttributeMetadata(), out);
    }
    m_addressFormats_.writePacked(*this, out);
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
}

void PoiNameLayerMetadata::ZserioElementFactory_addressFormats::create(PoiNameLayerMetadata&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PoiNameLayerMetadata::ZserioElementFactory_addressFormats::create(PoiNameLayerMetadata&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::nds::name::types::AddressFormat::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::name::metadata::PoiNameLayerContent PoiNameLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::PoiNameLayerContent(in);
}

::nds::name::metadata::PoiNameLayerContent PoiNameLayerMetadata::readContent(PoiNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::PoiNameLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata> PoiNameLayerMetadata::readPoiAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata>(::nds::name::instantiations::NamePoiAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata> PoiNameLayerMetadata::readPoiAttributeMetadata(PoiNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS || (getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata>(::nds::name::instantiations::NamePoiAttributeMetadata(context.getPoiAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata>(::zserio::NullOpt);
}
PoiNameLayerMetadata::ZserioArrayType_addressFormats PoiNameLayerMetadata::readAddressFormats(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_addressFormats readField(allocator);
    readField.read(*this, in);

    return readField;
}

PoiNameLayerMetadata::ZserioArrayType_addressFormats PoiNameLayerMetadata::readAddressFormats(PoiNameLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_addressFormats readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::nds::core::language::AvailableLanguages PoiNameLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages PoiNameLayerMetadata::readAvailableLanguages(PoiNameLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}

} // namespace metadata
} // namespace name
} // namespace nds
