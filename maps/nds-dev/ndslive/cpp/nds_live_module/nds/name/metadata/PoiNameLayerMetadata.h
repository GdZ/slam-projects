/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_METADATA_POI_NAME_LAYER_METADATA_H
#define NDS_NAME_METADATA_POI_NAME_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/language/AvailableLanguages.h>
#include <nds/name/instantiations/NamePoiAttributeMetadata.h>
#include <nds/name/metadata/PoiNameLayerContent.h>
#include <nds/name/types/AddressFormat.h>

namespace nds
{
namespace name
{
namespace metadata
{

class PoiNameLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::name::instantiations::NamePoiAttributeMetadata::ZserioPackingContext& getPoiAttributeMetadata()
        {
            return m_poiAttributeMetadata_;
        }

        ::nds::core::language::AvailableLanguages::ZserioPackingContext& getAvailableLanguages()
        {
            return m_availableLanguages_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::name::instantiations::NamePoiAttributeMetadata::ZserioPackingContext m_poiAttributeMetadata_;
        ::nds::core::language::AvailableLanguages::ZserioPackingContext m_availableLanguages_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PoiNameLayerMetadata() noexcept :
            PoiNameLayerMetadata(allocator_type())
    {}

    explicit PoiNameLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_poiAttributeMetadata = ::nds::name::instantiations::NamePoiAttributeMetadata,
            typename ZSERIO_T_addressFormats = ::zserio::vector<::nds::name::types::AddressFormat>,
            typename ZSERIO_T_availableLanguages = ::nds::core::language::AvailableLanguages>
    PoiNameLayerMetadata(
            ::nds::name::metadata::PoiNameLayerContent content_,
            ZSERIO_T_poiAttributeMetadata&& poiAttributeMetadata_,
            ZSERIO_T_addressFormats&& addressFormats_,
            ZSERIO_T_availableLanguages&& availableLanguages_,
            const allocator_type& allocator = allocator_type()) :
            PoiNameLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_poiAttributeMetadata_ = ::std::forward<ZSERIO_T_poiAttributeMetadata>(poiAttributeMetadata_);
        m_addressFormats_ = ZserioArrayType_addressFormats(::std::forward<ZSERIO_T_addressFormats>(addressFormats_));
        m_availableLanguages_ = ::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_);
    }

    explicit PoiNameLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PoiNameLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PoiNameLayerMetadata() = default;

    PoiNameLayerMetadata(const PoiNameLayerMetadata&) = default;
    PoiNameLayerMetadata& operator=(const PoiNameLayerMetadata&) = default;

    PoiNameLayerMetadata(PoiNameLayerMetadata&&) = default;
    PoiNameLayerMetadata& operator=(PoiNameLayerMetadata&&) = default;

    PoiNameLayerMetadata(::zserio::PropagateAllocatorT,
            const PoiNameLayerMetadata& other, const allocator_type& allocator);

    ::nds::name::metadata::PoiNameLayerContent getContent() const;
    void setContent(::nds::name::metadata::PoiNameLayerContent content_);

    const ::nds::name::instantiations::NamePoiAttributeMetadata& getPoiAttributeMetadata() const;
    ::nds::name::instantiations::NamePoiAttributeMetadata& getPoiAttributeMetadata();
    void setPoiAttributeMetadata(const ::nds::name::instantiations::NamePoiAttributeMetadata& poiAttributeMetadata_);
    void setPoiAttributeMetadata(::nds::name::instantiations::NamePoiAttributeMetadata&& poiAttributeMetadata_);
    bool isPoiAttributeMetadataUsed() const;
    bool isPoiAttributeMetadataSet() const;
    void resetPoiAttributeMetadata();

    const ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats() const;
    ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats();
    void setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_);
    void setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_);

    const ::nds::core::language::AvailableLanguages& getAvailableLanguages() const;
    ::nds::core::language::AvailableLanguages& getAvailableLanguages();
    void setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_);
    void setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PoiNameLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_addressFormats
    {
    public:
        using OwnerType = PoiNameLayerMetadata;

        static void create(PoiNameLayerMetadata& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(PoiNameLayerMetadata& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::nds::name::types::AddressFormat::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_addressFormats = ::zserio::Array<::zserio::vector<::nds::name::types::AddressFormat>, ::zserio::ObjectArrayTraits<::nds::name::types::AddressFormat, ZserioElementFactory_addressFormats>, ::zserio::ArrayType::AUTO>;

    ::nds::name::metadata::PoiNameLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::name::metadata::PoiNameLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata> readPoiAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata> readPoiAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_addressFormats readAddressFormats(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_addressFormats readAddressFormats(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::name::metadata::PoiNameLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMetadata> m_poiAttributeMetadata_;
    ZserioArrayType_addressFormats m_addressFormats_;
    ::nds::core::language::AvailableLanguages m_availableLanguages_;
};

} // namespace metadata
} // namespace name
} // namespace nds

#endif // NDS_NAME_METADATA_POI_NAME_LAYER_METADATA_H
