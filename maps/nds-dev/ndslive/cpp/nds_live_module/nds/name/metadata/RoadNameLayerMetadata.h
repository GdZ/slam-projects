/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_METADATA_ROAD_NAME_LAYER_METADATA_H
#define NDS_NAME_METADATA_ROAD_NAME_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/language/AvailableLanguages.h>
#include <nds/name/instantiations/NameRoadPositionAttributeMetadata.h>
#include <nds/name/instantiations/NameRoadRangeAttributeMetadata.h>
#include <nds/name/instantiations/NameTransitionAttributeMetadata.h>
#include <nds/name/metadata/RoadNameLayerContent.h>

namespace nds
{
namespace name
{
namespace metadata
{

class RoadNameLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::name::instantiations::NameRoadRangeAttributeMetadata::ZserioPackingContext& getRoadRangeAttributeMetadata()
        {
            return m_roadRangeAttributeMetadata_;
        }

        ::nds::name::instantiations::NameRoadPositionAttributeMetadata::ZserioPackingContext& getRoadPositionAttributeMetadata()
        {
            return m_roadPositionAttributeMetadata_;
        }

        ::nds::name::instantiations::NameTransitionAttributeMetadata::ZserioPackingContext& getTransitionAttributeMetadata()
        {
            return m_transitionAttributeMetadata_;
        }

        ::nds::core::language::AvailableLanguages::ZserioPackingContext& getAvailableLanguages()
        {
            return m_availableLanguages_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::name::instantiations::NameRoadRangeAttributeMetadata::ZserioPackingContext m_roadRangeAttributeMetadata_;
        ::nds::name::instantiations::NameRoadPositionAttributeMetadata::ZserioPackingContext m_roadPositionAttributeMetadata_;
        ::nds::name::instantiations::NameTransitionAttributeMetadata::ZserioPackingContext m_transitionAttributeMetadata_;
        ::nds::core::language::AvailableLanguages::ZserioPackingContext m_availableLanguages_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadNameLayerMetadata() noexcept :
            RoadNameLayerMetadata(allocator_type())
    {}

    explicit RoadNameLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadRangeAttributeMetadata = ::nds::name::instantiations::NameRoadRangeAttributeMetadata,
            typename ZSERIO_T_roadPositionAttributeMetadata = ::nds::name::instantiations::NameRoadPositionAttributeMetadata,
            typename ZSERIO_T_transitionAttributeMetadata = ::nds::name::instantiations::NameTransitionAttributeMetadata,
            typename ZSERIO_T_availableLanguages = ::nds::core::language::AvailableLanguages>
    RoadNameLayerMetadata(
            ::nds::name::metadata::RoadNameLayerContent content_,
            ZSERIO_T_roadRangeAttributeMetadata&& roadRangeAttributeMetadata_,
            ZSERIO_T_roadPositionAttributeMetadata&& roadPositionAttributeMetadata_,
            ZSERIO_T_transitionAttributeMetadata&& transitionAttributeMetadata_,
            ZSERIO_T_availableLanguages&& availableLanguages_,
            const allocator_type& allocator = allocator_type()) :
            RoadNameLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_roadRangeAttributeMetadata_ = ::std::forward<ZSERIO_T_roadRangeAttributeMetadata>(roadRangeAttributeMetadata_);
        m_roadPositionAttributeMetadata_ = ::std::forward<ZSERIO_T_roadPositionAttributeMetadata>(roadPositionAttributeMetadata_);
        m_transitionAttributeMetadata_ = ::std::forward<ZSERIO_T_transitionAttributeMetadata>(transitionAttributeMetadata_);
        m_availableLanguages_ = ::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_);
    }

    explicit RoadNameLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadNameLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadNameLayerMetadata() = default;

    RoadNameLayerMetadata(const RoadNameLayerMetadata&) = default;
    RoadNameLayerMetadata& operator=(const RoadNameLayerMetadata&) = default;

    RoadNameLayerMetadata(RoadNameLayerMetadata&&) = default;
    RoadNameLayerMetadata& operator=(RoadNameLayerMetadata&&) = default;

    RoadNameLayerMetadata(::zserio::PropagateAllocatorT,
            const RoadNameLayerMetadata& other, const allocator_type& allocator);

    ::nds::name::metadata::RoadNameLayerContent getContent() const;
    void setContent(::nds::name::metadata::RoadNameLayerContent content_);

    const ::nds::name::instantiations::NameRoadRangeAttributeMetadata& getRoadRangeAttributeMetadata() const;
    ::nds::name::instantiations::NameRoadRangeAttributeMetadata& getRoadRangeAttributeMetadata();
    void setRoadRangeAttributeMetadata(const ::nds::name::instantiations::NameRoadRangeAttributeMetadata& roadRangeAttributeMetadata_);
    void setRoadRangeAttributeMetadata(::nds::name::instantiations::NameRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_);
    bool isRoadRangeAttributeMetadataUsed() const;
    bool isRoadRangeAttributeMetadataSet() const;
    void resetRoadRangeAttributeMetadata();

    const ::nds::name::instantiations::NameRoadPositionAttributeMetadata& getRoadPositionAttributeMetadata() const;
    ::nds::name::instantiations::NameRoadPositionAttributeMetadata& getRoadPositionAttributeMetadata();
    void setRoadPositionAttributeMetadata(const ::nds::name::instantiations::NameRoadPositionAttributeMetadata& roadPositionAttributeMetadata_);
    void setRoadPositionAttributeMetadata(::nds::name::instantiations::NameRoadPositionAttributeMetadata&& roadPositionAttributeMetadata_);
    bool isRoadPositionAttributeMetadataUsed() const;
    bool isRoadPositionAttributeMetadataSet() const;
    void resetRoadPositionAttributeMetadata();

    const ::nds::name::instantiations::NameTransitionAttributeMetadata& getTransitionAttributeMetadata() const;
    ::nds::name::instantiations::NameTransitionAttributeMetadata& getTransitionAttributeMetadata();
    void setTransitionAttributeMetadata(const ::nds::name::instantiations::NameTransitionAttributeMetadata& transitionAttributeMetadata_);
    void setTransitionAttributeMetadata(::nds::name::instantiations::NameTransitionAttributeMetadata&& transitionAttributeMetadata_);
    bool isTransitionAttributeMetadataUsed() const;
    bool isTransitionAttributeMetadataSet() const;
    void resetTransitionAttributeMetadata();

    const ::nds::core::language::AvailableLanguages& getAvailableLanguages() const;
    ::nds::core::language::AvailableLanguages& getAvailableLanguages();
    void setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_);
    void setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadNameLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::name::metadata::RoadNameLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::name::metadata::RoadNameLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata> readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata> readRoadRangeAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata> readRoadPositionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata> readRoadPositionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata> readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata> readTransitionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::name::metadata::RoadNameLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMetadata> m_roadRangeAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMetadata> m_roadPositionAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMetadata> m_transitionAttributeMetadata_;
    ::nds::core::language::AvailableLanguages m_availableLanguages_;
};

} // namespace metadata
} // namespace name
} // namespace nds

#endif // NDS_NAME_METADATA_ROAD_NAME_LAYER_METADATA_H
