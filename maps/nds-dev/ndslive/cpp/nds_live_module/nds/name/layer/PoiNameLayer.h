/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_LAYER_POI_NAME_LAYER_H
#define NDS_NAME_LAYER_POI_NAME_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/name/instantiations/NamePoiAttributeMapList.h>
#include <nds/name/instantiations/NamePoiAttributeSetList.h>
#include <nds/name/metadata/PoiNameLayerContent.h>
#include <nds/name/types/AddressFormat.h>
#include <nds/name/types/AdministrativeHierarchyElement.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace name
{
namespace layer
{

class PoiNameLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::name::instantiations::NamePoiAttributeMapList::ZserioPackingContext& getPoiAttributeMaps()
        {
            return m_poiAttributeMaps_;
        }

        ::nds::name::instantiations::NamePoiAttributeSetList::ZserioPackingContext& getPoiAttributeSets()
        {
            return m_poiAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::name::instantiations::NamePoiAttributeMapList::ZserioPackingContext m_poiAttributeMaps_;
        ::nds::name::instantiations::NamePoiAttributeSetList::ZserioPackingContext m_poiAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PoiNameLayer() noexcept :
            PoiNameLayer(allocator_type())
    {}

    explicit PoiNameLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_poiAttributeMaps = ::nds::name::instantiations::NamePoiAttributeMapList,
            typename ZSERIO_T_poiAttributeSets = ::nds::name::instantiations::NamePoiAttributeSetList,
            typename ZSERIO_T_addressFormats = ::zserio::vector<::nds::name::types::AddressFormat>,
            typename ZSERIO_T_adminHierarchyElementDefinitions = ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>>
    PoiNameLayer(
            ::nds::name::metadata::PoiNameLayerContent content_,
            ZSERIO_T_poiAttributeMaps&& poiAttributeMaps_,
            ZSERIO_T_poiAttributeSets&& poiAttributeSets_,
            ZSERIO_T_addressFormats&& addressFormats_,
            ZSERIO_T_adminHierarchyElementDefinitions&& adminHierarchyElementDefinitions_,
            const allocator_type& allocator = allocator_type()) :
            PoiNameLayer(allocator)
    {
        m_content_ = content_;
        m_poiAttributeMaps_ = ::std::forward<ZSERIO_T_poiAttributeMaps>(poiAttributeMaps_);
        m_poiAttributeSets_ = ::std::forward<ZSERIO_T_poiAttributeSets>(poiAttributeSets_);
        m_addressFormats_ = ::zserio::createOptionalArray<ZserioArrayType_addressFormats>(::std::forward<ZSERIO_T_addressFormats>(addressFormats_));
        m_adminHierarchyElementDefinitions_ = ::zserio::createOptionalArray<ZserioArrayType_adminHierarchyElementDefinitions>(::std::forward<ZSERIO_T_adminHierarchyElementDefinitions>(adminHierarchyElementDefinitions_));
    }

    explicit PoiNameLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PoiNameLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PoiNameLayer() = default;

    PoiNameLayer(const PoiNameLayer& other);
    PoiNameLayer& operator=(const PoiNameLayer& other);

    PoiNameLayer(PoiNameLayer&& other);
    PoiNameLayer& operator=(PoiNameLayer&& other);

    PoiNameLayer(::zserio::PropagateAllocatorT,
            const PoiNameLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::name::metadata::PoiNameLayerContent getContent() const;
    void setContent(::nds::name::metadata::PoiNameLayerContent content_);

    const ::nds::name::instantiations::NamePoiAttributeMapList& getPoiAttributeMaps() const;
    ::nds::name::instantiations::NamePoiAttributeMapList& getPoiAttributeMaps();
    void setPoiAttributeMaps(const ::nds::name::instantiations::NamePoiAttributeMapList& poiAttributeMaps_);
    void setPoiAttributeMaps(::nds::name::instantiations::NamePoiAttributeMapList&& poiAttributeMaps_);
    bool isPoiAttributeMapsUsed() const;
    bool isPoiAttributeMapsSet() const;
    void resetPoiAttributeMaps();

    const ::nds::name::instantiations::NamePoiAttributeSetList& getPoiAttributeSets() const;
    ::nds::name::instantiations::NamePoiAttributeSetList& getPoiAttributeSets();
    void setPoiAttributeSets(const ::nds::name::instantiations::NamePoiAttributeSetList& poiAttributeSets_);
    void setPoiAttributeSets(::nds::name::instantiations::NamePoiAttributeSetList&& poiAttributeSets_);
    bool isPoiAttributeSetsUsed() const;
    bool isPoiAttributeSetsSet() const;
    void resetPoiAttributeSets();

    const ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats() const;
    ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats();
    void setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_);
    void setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_);
    bool isAddressFormatsUsed() const;
    bool isAddressFormatsSet() const;
    void resetAddressFormats();

    const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& getAdminHierarchyElementDefinitions() const;
    ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& getAdminHierarchyElementDefinitions();
    void setAdminHierarchyElementDefinitions(const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& adminHierarchyElementDefinitions_);
    void setAdminHierarchyElementDefinitions(::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>&& adminHierarchyElementDefinitions_);
    bool isAdminHierarchyElementDefinitionsUsed() const;
    bool isAdminHierarchyElementDefinitionsSet() const;
    void resetAdminHierarchyElementDefinitions();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PoiNameLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_addressFormats
    {
    public:
        using OwnerType = PoiNameLayer;

        static void create(PoiNameLayer& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(PoiNameLayer& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::nds::name::types::AddressFormat::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_adminHierarchyElementDefinitions
    {
    public:
        using OwnerType = PoiNameLayer;

        static void create(PoiNameLayer& owner,
                ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(PoiNameLayer& owner,
                ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
                ::nds::name::types::AdministrativeHierarchyElement::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_addressFormats = ::zserio::Array<::zserio::vector<::nds::name::types::AddressFormat>, ::zserio::ObjectArrayTraits<::nds::name::types::AddressFormat, ZserioElementFactory_addressFormats>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_adminHierarchyElementDefinitions = ::zserio::Array<::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>, ::zserio::ObjectArrayTraits<::nds::name::types::AdministrativeHierarchyElement, ZserioElementFactory_adminHierarchyElementDefinitions>, ::zserio::ArrayType::AUTO>;

    ::nds::name::metadata::PoiNameLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::name::metadata::PoiNameLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList> readPoiAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList> readPoiAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList> readPoiAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList> readPoiAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> readAddressFormats(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> readAddressFormats(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> readAdminHierarchyElementDefinitions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> readAdminHierarchyElementDefinitions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::name::metadata::PoiNameLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList> m_poiAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList> m_poiAttributeSets_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> m_addressFormats_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> m_adminHierarchyElementDefinitions_;
};

} // namespace layer
} // namespace name
} // namespace nds

#endif // NDS_NAME_LAYER_POI_NAME_LAYER_H
