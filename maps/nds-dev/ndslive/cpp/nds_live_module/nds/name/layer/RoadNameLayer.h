/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_LAYER_ROAD_NAME_LAYER_H
#define NDS_NAME_LAYER_ROAD_NAME_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/name/instantiations/NameRoadPositionAttributeMapList.h>
#include <nds/name/instantiations/NameRoadPositionAttributeSetList.h>
#include <nds/name/instantiations/NameRoadRangeAttributeMapList.h>
#include <nds/name/instantiations/NameRoadRangeAttributeSetList.h>
#include <nds/name/instantiations/NameTransitionAttributeMapList.h>
#include <nds/name/instantiations/NameTransitionAttributeSetList.h>
#include <nds/name/metadata/RoadNameLayerContent.h>
#include <nds/name/types/AddressFormat.h>
#include <nds/name/types/AdministrativeHierarchyElement.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace name
{
namespace layer
{

class RoadNameLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::nds::name::instantiations::NameRoadRangeAttributeMapList::ZserioPackingContext& getRoadRangeAttributeMaps()
        {
            return m_roadRangeAttributeMaps_;
        }

        ::nds::name::instantiations::NameRoadPositionAttributeMapList::ZserioPackingContext& getRoadPositionAttributeMaps()
        {
            return m_roadPositionAttributeMaps_;
        }

        ::nds::name::instantiations::NameTransitionAttributeMapList::ZserioPackingContext& getTransitionAttributeMaps()
        {
            return m_transitionAttributeMaps_;
        }

        ::nds::name::instantiations::NameRoadRangeAttributeSetList::ZserioPackingContext& getRoadRangeAttributeSets()
        {
            return m_roadRangeAttributeSets_;
        }

        ::nds::name::instantiations::NameRoadPositionAttributeSetList::ZserioPackingContext& getRoadPositionAttributeSets()
        {
            return m_roadPositionAttributeSets_;
        }

        ::nds::name::instantiations::NameTransitionAttributeSetList::ZserioPackingContext& getTransitionAttributeSets()
        {
            return m_transitionAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::zserio::DeltaContext m_shift_;
        ::nds::name::instantiations::NameRoadRangeAttributeMapList::ZserioPackingContext m_roadRangeAttributeMaps_;
        ::nds::name::instantiations::NameRoadPositionAttributeMapList::ZserioPackingContext m_roadPositionAttributeMaps_;
        ::nds::name::instantiations::NameTransitionAttributeMapList::ZserioPackingContext m_transitionAttributeMaps_;
        ::nds::name::instantiations::NameRoadRangeAttributeSetList::ZserioPackingContext m_roadRangeAttributeSets_;
        ::nds::name::instantiations::NameRoadPositionAttributeSetList::ZserioPackingContext m_roadPositionAttributeSets_;
        ::nds::name::instantiations::NameTransitionAttributeSetList::ZserioPackingContext m_transitionAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadNameLayer() noexcept :
            RoadNameLayer(allocator_type())
    {}

    explicit RoadNameLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadRangeAttributeMaps = ::nds::name::instantiations::NameRoadRangeAttributeMapList,
            typename ZSERIO_T_roadPositionAttributeMaps = ::nds::name::instantiations::NameRoadPositionAttributeMapList,
            typename ZSERIO_T_transitionAttributeMaps = ::nds::name::instantiations::NameTransitionAttributeMapList,
            typename ZSERIO_T_roadRangeAttributeSets = ::nds::name::instantiations::NameRoadRangeAttributeSetList,
            typename ZSERIO_T_roadPositionAttributeSets = ::nds::name::instantiations::NameRoadPositionAttributeSetList,
            typename ZSERIO_T_transitionAttributeSets = ::nds::name::instantiations::NameTransitionAttributeSetList,
            typename ZSERIO_T_adminHierarchyElementDefinitions = ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>,
            typename ZSERIO_T_addressFormats = ::zserio::vector<::nds::name::types::AddressFormat>>
    RoadNameLayer(
            ::nds::name::metadata::RoadNameLayerContent content_,
            ::nds::core::geometry::CoordShift shift_,
            ZSERIO_T_roadRangeAttributeMaps&& roadRangeAttributeMaps_,
            ZSERIO_T_roadPositionAttributeMaps&& roadPositionAttributeMaps_,
            ZSERIO_T_transitionAttributeMaps&& transitionAttributeMaps_,
            ZSERIO_T_roadRangeAttributeSets&& roadRangeAttributeSets_,
            ZSERIO_T_roadPositionAttributeSets&& roadPositionAttributeSets_,
            ZSERIO_T_transitionAttributeSets&& transitionAttributeSets_,
            ZSERIO_T_adminHierarchyElementDefinitions&& adminHierarchyElementDefinitions_,
            ZSERIO_T_addressFormats&& addressFormats_,
            const allocator_type& allocator = allocator_type()) :
            RoadNameLayer(allocator)
    {
        m_content_ = content_;
        m_shift_ = shift_;
        m_roadRangeAttributeMaps_ = ::std::forward<ZSERIO_T_roadRangeAttributeMaps>(roadRangeAttributeMaps_);
        m_roadPositionAttributeMaps_ = ::std::forward<ZSERIO_T_roadPositionAttributeMaps>(roadPositionAttributeMaps_);
        m_transitionAttributeMaps_ = ::std::forward<ZSERIO_T_transitionAttributeMaps>(transitionAttributeMaps_);
        m_roadRangeAttributeSets_ = ::std::forward<ZSERIO_T_roadRangeAttributeSets>(roadRangeAttributeSets_);
        m_roadPositionAttributeSets_ = ::std::forward<ZSERIO_T_roadPositionAttributeSets>(roadPositionAttributeSets_);
        m_transitionAttributeSets_ = ::std::forward<ZSERIO_T_transitionAttributeSets>(transitionAttributeSets_);
        m_adminHierarchyElementDefinitions_ = ::zserio::createOptionalArray<ZserioArrayType_adminHierarchyElementDefinitions>(::std::forward<ZSERIO_T_adminHierarchyElementDefinitions>(adminHierarchyElementDefinitions_));
        m_addressFormats_ = ::zserio::createOptionalArray<ZserioArrayType_addressFormats>(::std::forward<ZSERIO_T_addressFormats>(addressFormats_));
    }

    explicit RoadNameLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadNameLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadNameLayer() = default;

    RoadNameLayer(const RoadNameLayer& other);
    RoadNameLayer& operator=(const RoadNameLayer& other);

    RoadNameLayer(RoadNameLayer&& other);
    RoadNameLayer& operator=(RoadNameLayer&& other);

    RoadNameLayer(::zserio::PropagateAllocatorT,
            const RoadNameLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::name::metadata::RoadNameLayerContent getContent() const;
    void setContent(::nds::name::metadata::RoadNameLayerContent content_);

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    const ::nds::name::instantiations::NameRoadRangeAttributeMapList& getRoadRangeAttributeMaps() const;
    ::nds::name::instantiations::NameRoadRangeAttributeMapList& getRoadRangeAttributeMaps();
    void setRoadRangeAttributeMaps(const ::nds::name::instantiations::NameRoadRangeAttributeMapList& roadRangeAttributeMaps_);
    void setRoadRangeAttributeMaps(::nds::name::instantiations::NameRoadRangeAttributeMapList&& roadRangeAttributeMaps_);
    bool isRoadRangeAttributeMapsUsed() const;
    bool isRoadRangeAttributeMapsSet() const;
    void resetRoadRangeAttributeMaps();

    const ::nds::name::instantiations::NameRoadPositionAttributeMapList& getRoadPositionAttributeMaps() const;
    ::nds::name::instantiations::NameRoadPositionAttributeMapList& getRoadPositionAttributeMaps();
    void setRoadPositionAttributeMaps(const ::nds::name::instantiations::NameRoadPositionAttributeMapList& roadPositionAttributeMaps_);
    void setRoadPositionAttributeMaps(::nds::name::instantiations::NameRoadPositionAttributeMapList&& roadPositionAttributeMaps_);
    bool isRoadPositionAttributeMapsUsed() const;
    bool isRoadPositionAttributeMapsSet() const;
    void resetRoadPositionAttributeMaps();

    const ::nds::name::instantiations::NameTransitionAttributeMapList& getTransitionAttributeMaps() const;
    ::nds::name::instantiations::NameTransitionAttributeMapList& getTransitionAttributeMaps();
    void setTransitionAttributeMaps(const ::nds::name::instantiations::NameTransitionAttributeMapList& transitionAttributeMaps_);
    void setTransitionAttributeMaps(::nds::name::instantiations::NameTransitionAttributeMapList&& transitionAttributeMaps_);
    bool isTransitionAttributeMapsUsed() const;
    bool isTransitionAttributeMapsSet() const;
    void resetTransitionAttributeMaps();

    const ::nds::name::instantiations::NameRoadRangeAttributeSetList& getRoadRangeAttributeSets() const;
    ::nds::name::instantiations::NameRoadRangeAttributeSetList& getRoadRangeAttributeSets();
    void setRoadRangeAttributeSets(const ::nds::name::instantiations::NameRoadRangeAttributeSetList& roadRangeAttributeSets_);
    void setRoadRangeAttributeSets(::nds::name::instantiations::NameRoadRangeAttributeSetList&& roadRangeAttributeSets_);
    bool isRoadRangeAttributeSetsUsed() const;
    bool isRoadRangeAttributeSetsSet() const;
    void resetRoadRangeAttributeSets();

    const ::nds::name::instantiations::NameRoadPositionAttributeSetList& getRoadPositionAttributeSets() const;
    ::nds::name::instantiations::NameRoadPositionAttributeSetList& getRoadPositionAttributeSets();
    void setRoadPositionAttributeSets(const ::nds::name::instantiations::NameRoadPositionAttributeSetList& roadPositionAttributeSets_);
    void setRoadPositionAttributeSets(::nds::name::instantiations::NameRoadPositionAttributeSetList&& roadPositionAttributeSets_);
    bool isRoadPositionAttributeSetsUsed() const;
    bool isRoadPositionAttributeSetsSet() const;
    void resetRoadPositionAttributeSets();

    const ::nds::name::instantiations::NameTransitionAttributeSetList& getTransitionAttributeSets() const;
    ::nds::name::instantiations::NameTransitionAttributeSetList& getTransitionAttributeSets();
    void setTransitionAttributeSets(const ::nds::name::instantiations::NameTransitionAttributeSetList& transitionAttributeSets_);
    void setTransitionAttributeSets(::nds::name::instantiations::NameTransitionAttributeSetList&& transitionAttributeSets_);
    bool isTransitionAttributeSetsUsed() const;
    bool isTransitionAttributeSetsSet() const;
    void resetTransitionAttributeSets();

    const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& getAdminHierarchyElementDefinitions() const;
    ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& getAdminHierarchyElementDefinitions();
    void setAdminHierarchyElementDefinitions(const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& adminHierarchyElementDefinitions_);
    void setAdminHierarchyElementDefinitions(::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>&& adminHierarchyElementDefinitions_);
    bool isAdminHierarchyElementDefinitionsUsed() const;
    bool isAdminHierarchyElementDefinitionsSet() const;
    void resetAdminHierarchyElementDefinitions();

    const ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats() const;
    ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats();
    void setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_);
    void setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_);
    bool isAddressFormatsUsed() const;
    bool isAddressFormatsSet() const;
    void resetAddressFormats();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadNameLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_adminHierarchyElementDefinitions
    {
    public:
        using OwnerType = RoadNameLayer;

        static void create(RoadNameLayer& owner,
                ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadNameLayer& owner,
                ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
                ::nds::name::types::AdministrativeHierarchyElement::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_addressFormats
    {
    public:
        using OwnerType = RoadNameLayer;

        static void create(RoadNameLayer& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadNameLayer& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::nds::name::types::AddressFormat::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_adminHierarchyElementDefinitions = ::zserio::Array<::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>, ::zserio::ObjectArrayTraits<::nds::name::types::AdministrativeHierarchyElement, ZserioElementFactory_adminHierarchyElementDefinitions>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_addressFormats = ::zserio::Array<::zserio::vector<::nds::name::types::AddressFormat>, ::zserio::ObjectArrayTraits<::nds::name::types::AddressFormat, ZserioElementFactory_addressFormats>, ::zserio::ArrayType::AUTO>;

    ::nds::name::metadata::RoadNameLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::name::metadata::RoadNameLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList> readRoadRangeAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList> readRoadRangeAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList> readRoadPositionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList> readRoadPositionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList> readTransitionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList> readTransitionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList> readRoadRangeAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList> readRoadRangeAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList> readRoadPositionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList> readRoadPositionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList> readTransitionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList> readTransitionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> readAdminHierarchyElementDefinitions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> readAdminHierarchyElementDefinitions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> readAddressFormats(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> readAddressFormats(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::name::metadata::RoadNameLayerContent m_content_;
    ::nds::core::geometry::CoordShift m_shift_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList> m_roadRangeAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList> m_roadPositionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList> m_transitionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList> m_roadRangeAttributeSets_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList> m_roadPositionAttributeSets_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList> m_transitionAttributeSets_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> m_adminHierarchyElementDefinitions_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> m_addressFormats_;
};

} // namespace layer
} // namespace name
} // namespace nds

#endif // NDS_NAME_LAYER_ROAD_NAME_LAYER_H
