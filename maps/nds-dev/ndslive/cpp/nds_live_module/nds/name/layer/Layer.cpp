/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/layer/RoadNameLayer.h>
#include <nds/name/metadata/RoadNameLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace name
{
namespace layer
{

RoadNameLayer::RoadNameLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::name::metadata::RoadNameLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_roadRangeAttributeMaps_(::zserio::NullOpt),
        m_roadPositionAttributeMaps_(::zserio::NullOpt),
        m_transitionAttributeMaps_(::zserio::NullOpt),
        m_roadRangeAttributeSets_(::zserio::NullOpt),
        m_roadPositionAttributeSets_(::zserio::NullOpt),
        m_transitionAttributeSets_(::zserio::NullOpt),
        m_adminHierarchyElementDefinitions_(::zserio::NullOpt),
        m_addressFormats_(::zserio::NullOpt)
{
}

RoadNameLayer::RoadNameLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(in, allocator)),
        m_roadPositionAttributeMaps_(readRoadPositionAttributeMaps(in, allocator)),
        m_transitionAttributeMaps_(readTransitionAttributeMaps(in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(in, allocator)),
        m_roadPositionAttributeSets_(readRoadPositionAttributeSets(in, allocator)),
        m_transitionAttributeSets_(readTransitionAttributeSets(in, allocator)),
        m_adminHierarchyElementDefinitions_(readAdminHierarchyElementDefinitions(in, allocator)),
        m_addressFormats_(readAddressFormats(in, allocator))
{
}

RoadNameLayer::RoadNameLayer(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(context, in, allocator)),
        m_roadPositionAttributeMaps_(readRoadPositionAttributeMaps(context, in, allocator)),
        m_transitionAttributeMaps_(readTransitionAttributeMaps(context, in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(context, in, allocator)),
        m_roadPositionAttributeSets_(readRoadPositionAttributeSets(context, in, allocator)),
        m_transitionAttributeSets_(readTransitionAttributeSets(context, in, allocator)),
        m_adminHierarchyElementDefinitions_(readAdminHierarchyElementDefinitions(context, in, allocator)),
        m_addressFormats_(readAddressFormats(context, in, allocator))
{
}

RoadNameLayer::RoadNameLayer(const RoadNameLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_roadRangeAttributeMaps_(other.m_roadRangeAttributeMaps_),
        m_roadPositionAttributeMaps_(other.m_roadPositionAttributeMaps_),
        m_transitionAttributeMaps_(other.m_transitionAttributeMaps_),
        m_roadRangeAttributeSets_(other.m_roadRangeAttributeSets_),
        m_roadPositionAttributeSets_(other.m_roadPositionAttributeSets_),
        m_transitionAttributeSets_(other.m_transitionAttributeSets_),
        m_adminHierarchyElementDefinitions_(other.m_adminHierarchyElementDefinitions_),
        m_addressFormats_(other.m_addressFormats_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadNameLayer& RoadNameLayer::operator=(const RoadNameLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_roadRangeAttributeMaps_ = other.m_roadRangeAttributeMaps_;
    m_roadPositionAttributeMaps_ = other.m_roadPositionAttributeMaps_;
    m_transitionAttributeMaps_ = other.m_transitionAttributeMaps_;
    m_roadRangeAttributeSets_ = other.m_roadRangeAttributeSets_;
    m_roadPositionAttributeSets_ = other.m_roadPositionAttributeSets_;
    m_transitionAttributeSets_ = other.m_transitionAttributeSets_;
    m_adminHierarchyElementDefinitions_ = other.m_adminHierarchyElementDefinitions_;
    m_addressFormats_ = other.m_addressFormats_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadNameLayer::RoadNameLayer(RoadNameLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_roadRangeAttributeMaps_(::std::move(other.m_roadRangeAttributeMaps_)),
        m_roadPositionAttributeMaps_(::std::move(other.m_roadPositionAttributeMaps_)),
        m_transitionAttributeMaps_(::std::move(other.m_transitionAttributeMaps_)),
        m_roadRangeAttributeSets_(::std::move(other.m_roadRangeAttributeSets_)),
        m_roadPositionAttributeSets_(::std::move(other.m_roadPositionAttributeSets_)),
        m_transitionAttributeSets_(::std::move(other.m_transitionAttributeSets_)),
        m_adminHierarchyElementDefinitions_(::std::move(other.m_adminHierarchyElementDefinitions_)),
        m_addressFormats_(::std::move(other.m_addressFormats_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadNameLayer& RoadNameLayer::operator=(RoadNameLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_roadRangeAttributeMaps_ = ::std::move(other.m_roadRangeAttributeMaps_);
    m_roadPositionAttributeMaps_ = ::std::move(other.m_roadPositionAttributeMaps_);
    m_transitionAttributeMaps_ = ::std::move(other.m_transitionAttributeMaps_);
    m_roadRangeAttributeSets_ = ::std::move(other.m_roadRangeAttributeSets_);
    m_roadPositionAttributeSets_ = ::std::move(other.m_roadPositionAttributeSets_);
    m_transitionAttributeSets_ = ::std::move(other.m_transitionAttributeSets_);
    m_adminHierarchyElementDefinitions_ = ::std::move(other.m_adminHierarchyElementDefinitions_);
    m_addressFormats_ = ::std::move(other.m_addressFormats_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadNameLayer::RoadNameLayer(::zserio::PropagateAllocatorT,
        const RoadNameLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_roadRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMaps_, allocator)),
        m_roadPositionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeMaps_, allocator)),
        m_transitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMaps_, allocator)),
        m_roadRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeSets_, allocator)),
        m_roadPositionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeSets_, allocator)),
        m_transitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeSets_, allocator)),
        m_adminHierarchyElementDefinitions_(::zserio::allocatorPropagatingCopy(other.m_adminHierarchyElementDefinitions_, allocator)),
        m_addressFormats_(::zserio::allocatorPropagatingCopy(other.m_addressFormats_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadNameLayer::initializeChildren()
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
        m_roadRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
        m_roadPositionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
        m_transitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
        m_roadRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
        m_roadPositionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
        m_transitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::name::metadata::RoadNameLayerContent RoadNameLayer::getContent() const
{
    return m_content_;
}

void RoadNameLayer::setContent(::nds::name::metadata::RoadNameLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift RoadNameLayer::getShift() const
{
    return m_shift_;
}

void RoadNameLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::name::instantiations::NameRoadRangeAttributeMapList& RoadNameLayer::getRoadRangeAttributeMaps()
{
    return m_roadRangeAttributeMaps_.value();
}

const ::nds::name::instantiations::NameRoadRangeAttributeMapList& RoadNameLayer::getRoadRangeAttributeMaps() const
{
    return m_roadRangeAttributeMaps_.value();
}

void RoadNameLayer::setRoadRangeAttributeMaps(const ::nds::name::instantiations::NameRoadRangeAttributeMapList& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = roadRangeAttributeMaps_;
}

void RoadNameLayer::setRoadRangeAttributeMaps(::nds::name::instantiations::NameRoadRangeAttributeMapList&& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = ::std::move(roadRangeAttributeMaps_);
}

bool RoadNameLayer::isRoadRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS);
}

bool RoadNameLayer::isRoadRangeAttributeMapsSet() const
{
    return m_roadRangeAttributeMaps_.hasValue();
}

void RoadNameLayer::resetRoadRangeAttributeMaps()
{
    m_roadRangeAttributeMaps_.reset();
}

::nds::name::instantiations::NameRoadPositionAttributeMapList& RoadNameLayer::getRoadPositionAttributeMaps()
{
    return m_roadPositionAttributeMaps_.value();
}

const ::nds::name::instantiations::NameRoadPositionAttributeMapList& RoadNameLayer::getRoadPositionAttributeMaps() const
{
    return m_roadPositionAttributeMaps_.value();
}

void RoadNameLayer::setRoadPositionAttributeMaps(const ::nds::name::instantiations::NameRoadPositionAttributeMapList& roadPositionAttributeMaps_)
{
    m_roadPositionAttributeMaps_ = roadPositionAttributeMaps_;
}

void RoadNameLayer::setRoadPositionAttributeMaps(::nds::name::instantiations::NameRoadPositionAttributeMapList&& roadPositionAttributeMaps_)
{
    m_roadPositionAttributeMaps_ = ::std::move(roadPositionAttributeMaps_);
}

bool RoadNameLayer::isRoadPositionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS);
}

bool RoadNameLayer::isRoadPositionAttributeMapsSet() const
{
    return m_roadPositionAttributeMaps_.hasValue();
}

void RoadNameLayer::resetRoadPositionAttributeMaps()
{
    m_roadPositionAttributeMaps_.reset();
}

::nds::name::instantiations::NameTransitionAttributeMapList& RoadNameLayer::getTransitionAttributeMaps()
{
    return m_transitionAttributeMaps_.value();
}

const ::nds::name::instantiations::NameTransitionAttributeMapList& RoadNameLayer::getTransitionAttributeMaps() const
{
    return m_transitionAttributeMaps_.value();
}

void RoadNameLayer::setTransitionAttributeMaps(const ::nds::name::instantiations::NameTransitionAttributeMapList& transitionAttributeMaps_)
{
    m_transitionAttributeMaps_ = transitionAttributeMaps_;
}

void RoadNameLayer::setTransitionAttributeMaps(::nds::name::instantiations::NameTransitionAttributeMapList&& transitionAttributeMaps_)
{
    m_transitionAttributeMaps_ = ::std::move(transitionAttributeMaps_);
}

bool RoadNameLayer::isTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS);
}

bool RoadNameLayer::isTransitionAttributeMapsSet() const
{
    return m_transitionAttributeMaps_.hasValue();
}

void RoadNameLayer::resetTransitionAttributeMaps()
{
    m_transitionAttributeMaps_.reset();
}

::nds::name::instantiations::NameRoadRangeAttributeSetList& RoadNameLayer::getRoadRangeAttributeSets()
{
    return m_roadRangeAttributeSets_.value();
}

const ::nds::name::instantiations::NameRoadRangeAttributeSetList& RoadNameLayer::getRoadRangeAttributeSets() const
{
    return m_roadRangeAttributeSets_.value();
}

void RoadNameLayer::setRoadRangeAttributeSets(const ::nds::name::instantiations::NameRoadRangeAttributeSetList& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = roadRangeAttributeSets_;
}

void RoadNameLayer::setRoadRangeAttributeSets(::nds::name::instantiations::NameRoadRangeAttributeSetList&& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = ::std::move(roadRangeAttributeSets_);
}

bool RoadNameLayer::isRoadRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadNameLayer::isRoadRangeAttributeSetsSet() const
{
    return m_roadRangeAttributeSets_.hasValue();
}

void RoadNameLayer::resetRoadRangeAttributeSets()
{
    m_roadRangeAttributeSets_.reset();
}

::nds::name::instantiations::NameRoadPositionAttributeSetList& RoadNameLayer::getRoadPositionAttributeSets()
{
    return m_roadPositionAttributeSets_.value();
}

const ::nds::name::instantiations::NameRoadPositionAttributeSetList& RoadNameLayer::getRoadPositionAttributeSets() const
{
    return m_roadPositionAttributeSets_.value();
}

void RoadNameLayer::setRoadPositionAttributeSets(const ::nds::name::instantiations::NameRoadPositionAttributeSetList& roadPositionAttributeSets_)
{
    m_roadPositionAttributeSets_ = roadPositionAttributeSets_;
}

void RoadNameLayer::setRoadPositionAttributeSets(::nds::name::instantiations::NameRoadPositionAttributeSetList&& roadPositionAttributeSets_)
{
    m_roadPositionAttributeSets_ = ::std::move(roadPositionAttributeSets_);
}

bool RoadNameLayer::isRoadPositionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS);
}

bool RoadNameLayer::isRoadPositionAttributeSetsSet() const
{
    return m_roadPositionAttributeSets_.hasValue();
}

void RoadNameLayer::resetRoadPositionAttributeSets()
{
    m_roadPositionAttributeSets_.reset();
}

::nds::name::instantiations::NameTransitionAttributeSetList& RoadNameLayer::getTransitionAttributeSets()
{
    return m_transitionAttributeSets_.value();
}

const ::nds::name::instantiations::NameTransitionAttributeSetList& RoadNameLayer::getTransitionAttributeSets() const
{
    return m_transitionAttributeSets_.value();
}

void RoadNameLayer::setTransitionAttributeSets(const ::nds::name::instantiations::NameTransitionAttributeSetList& transitionAttributeSets_)
{
    m_transitionAttributeSets_ = transitionAttributeSets_;
}

void RoadNameLayer::setTransitionAttributeSets(::nds::name::instantiations::NameTransitionAttributeSetList&& transitionAttributeSets_)
{
    m_transitionAttributeSets_ = ::std::move(transitionAttributeSets_);
}

bool RoadNameLayer::isTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS);
}

bool RoadNameLayer::isTransitionAttributeSetsSet() const
{
    return m_transitionAttributeSets_.hasValue();
}

void RoadNameLayer::resetTransitionAttributeSets()
{
    m_transitionAttributeSets_.reset();
}

::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& RoadNameLayer::getAdminHierarchyElementDefinitions()
{
    return m_adminHierarchyElementDefinitions_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& RoadNameLayer::getAdminHierarchyElementDefinitions() const
{
    return m_adminHierarchyElementDefinitions_.value().getRawArray();
}

void RoadNameLayer::setAdminHierarchyElementDefinitions(const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& adminHierarchyElementDefinitions_)
{
    m_adminHierarchyElementDefinitions_ = ZserioArrayType_adminHierarchyElementDefinitions(adminHierarchyElementDefinitions_);
}

void RoadNameLayer::setAdminHierarchyElementDefinitions(::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>&& adminHierarchyElementDefinitions_)
{
    m_adminHierarchyElementDefinitions_ = ZserioArrayType_adminHierarchyElementDefinitions(std::move(adminHierarchyElementDefinitions_));
}

bool RoadNameLayer::isAdminHierarchyElementDefinitionsUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY);
}

bool RoadNameLayer::isAdminHierarchyElementDefinitionsSet() const
{
    return m_adminHierarchyElementDefinitions_.hasValue();
}

void RoadNameLayer::resetAdminHierarchyElementDefinitions()
{
    m_adminHierarchyElementDefinitions_.reset();
}

::zserio::vector<::nds::name::types::AddressFormat>& RoadNameLayer::getAddressFormats()
{
    return m_addressFormats_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AddressFormat>& RoadNameLayer::getAddressFormats() const
{
    return m_addressFormats_.value().getRawArray();
}

void RoadNameLayer::setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(addressFormats_);
}

void RoadNameLayer::setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(std::move(addressFormats_));
}

bool RoadNameLayer::isAddressFormatsUsed() const
{
    return ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT);
}

bool RoadNameLayer::isAddressFormatsSet() const
{
    return m_addressFormats_.hasValue();
}

void RoadNameLayer::resetAddressFormats()
{
    m_addressFormats_.reset();
}

::nds::system::types::LayerType RoadNameLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadNameLayer::initPackingContext(RoadNameLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        m_roadRangeAttributeMaps_.value().initPackingContext(context.getRoadRangeAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        m_roadPositionAttributeMaps_.value().initPackingContext(context.getRoadPositionAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        m_transitionAttributeMaps_.value().initPackingContext(context.getTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeSets_.value().initPackingContext(context.getRoadRangeAttributeSets());
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeSets_.value().initPackingContext(context.getRoadPositionAttributeSets());
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeSets_.value().initPackingContext(context.getTransitionAttributeSets());
    }
}

size_t RoadNameLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition += m_roadPositionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_transitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition += m_adminHierarchyElementDefinitions_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition += m_addressFormats_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadNameLayer::bitSizeOf(RoadNameLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition += m_roadPositionAttributeMaps_.value().bitSizeOf(context.getRoadPositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_transitionAttributeMaps_.value().bitSizeOf(context.getTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(context.getRoadRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeSets_.value().bitSizeOf(context.getRoadPositionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeSets_.value().bitSizeOf(context.getTransitionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition += m_adminHierarchyElementDefinitions_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition += m_addressFormats_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadNameLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition = m_roadPositionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_transitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition = m_adminHierarchyElementDefinitions_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition = m_addressFormats_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t RoadNameLayer::initializeOffsets(RoadNameLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition = m_roadPositionAttributeMaps_.value().initializeOffsets(context.getRoadPositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_transitionAttributeMaps_.value().initializeOffsets(context.getTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(context.getRoadRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeSets_.value().initializeOffsets(context.getRoadPositionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeSets_.value().initializeOffsets(context.getTransitionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition = m_adminHierarchyElementDefinitions_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition = m_addressFormats_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool RoadNameLayer::operator==(const RoadNameLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isRoadRangeAttributeMapsUsed() ? !other.isRoadRangeAttributeMapsUsed() : (m_roadRangeAttributeMaps_ == other.m_roadRangeAttributeMaps_)) &&
                (!isRoadPositionAttributeMapsUsed() ? !other.isRoadPositionAttributeMapsUsed() : (m_roadPositionAttributeMaps_ == other.m_roadPositionAttributeMaps_)) &&
                (!isTransitionAttributeMapsUsed() ? !other.isTransitionAttributeMapsUsed() : (m_transitionAttributeMaps_ == other.m_transitionAttributeMaps_)) &&
                (!isRoadRangeAttributeSetsUsed() ? !other.isRoadRangeAttributeSetsUsed() : (m_roadRangeAttributeSets_ == other.m_roadRangeAttributeSets_)) &&
                (!isRoadPositionAttributeSetsUsed() ? !other.isRoadPositionAttributeSetsUsed() : (m_roadPositionAttributeSets_ == other.m_roadPositionAttributeSets_)) &&
                (!isTransitionAttributeSetsUsed() ? !other.isTransitionAttributeSetsUsed() : (m_transitionAttributeSets_ == other.m_transitionAttributeSets_)) &&
                (!isAdminHierarchyElementDefinitionsUsed() ? !other.isAdminHierarchyElementDefinitionsUsed() : (m_adminHierarchyElementDefinitions_ == other.m_adminHierarchyElementDefinitions_)) &&
                (!isAddressFormatsUsed() ? !other.isAddressFormatsUsed() : (m_addressFormats_ == other.m_addressFormats_));
    }

    return true;
}

uint32_t RoadNameLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isRoadRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMaps_);
    if (isRoadPositionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeMaps_);
    if (isTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMaps_);
    if (isRoadRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeSets_);
    if (isRoadPositionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeSets_);
    if (isTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeSets_);
    if (isAdminHierarchyElementDefinitionsUsed())
        result = ::zserio::calcHashCode(result, m_adminHierarchyElementDefinitions_);
    if (isAddressFormatsUsed())
        result = ::zserio::calcHashCode(result, m_addressFormats_);

    return result;
}

void RoadNameLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        // check parameters
        if (m_roadPositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.roadPositionAttributeMaps: ") <<
                    m_roadPositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_transitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.transitionAttributeMaps: ") <<
                    m_transitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        // check parameters
        if (m_roadPositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.roadPositionAttributeSets: ") <<
                    m_roadPositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_transitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.transitionAttributeSets: ") <<
                    m_transitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        m_adminHierarchyElementDefinitions_.value().write(*this, out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT)
    {
        m_addressFormats_.value().write(*this, out);
    }
}

void RoadNameLayer::write(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(context.getRoadRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        // check parameters
        if (m_roadPositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.roadPositionAttributeMaps: ") <<
                    m_roadPositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeMaps_.value().write(context.getRoadPositionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_transitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.transitionAttributeMaps: ") <<
                    m_transitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeMaps_.value().write(context.getTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(context.getRoadRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        // check parameters
        if (m_roadPositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.roadPositionAttributeSets: ") <<
                    m_roadPositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeSets_.value().write(context.getRoadPositionAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_transitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadNameLayer.transitionAttributeSets: ") <<
                    m_transitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeSets_.value().write(context.getTransitionAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        m_adminHierarchyElementDefinitions_.value().writePacked(*this, out);
    }

    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT)
    {
        m_addressFormats_.value().writePacked(*this, out);
    }
}

void RoadNameLayer::ZserioElementFactory_adminHierarchyElementDefinitions::create(RoadNameLayer&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadNameLayer::ZserioElementFactory_adminHierarchyElementDefinitions::create(RoadNameLayer&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::nds::name::types::AdministrativeHierarchyElement::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void RoadNameLayer::ZserioElementFactory_addressFormats::create(RoadNameLayer&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadNameLayer::ZserioElementFactory_addressFormats::create(RoadNameLayer&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::nds::name::types::AddressFormat::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::name::metadata::RoadNameLayerContent RoadNameLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::RoadNameLayerContent(in);
}

::nds::name::metadata::RoadNameLayerContent RoadNameLayer::readContent(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::RoadNameLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift RoadNameLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadNameLayer::readShift(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList> RoadNameLayer::readRoadRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList>(::nds::name::instantiations::NameRoadRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList> RoadNameLayer::readRoadRangeAttributeMaps(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList>(::nds::name::instantiations::NameRoadRangeAttributeMapList(context.getRoadRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList> RoadNameLayer::readRoadPositionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList>(::nds::name::instantiations::NameRoadPositionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList> RoadNameLayer::readRoadPositionAttributeMaps(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList>(::nds::name::instantiations::NameRoadPositionAttributeMapList(context.getRoadPositionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList> RoadNameLayer::readTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList>(::nds::name::instantiations::NameTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList> RoadNameLayer::readTransitionAttributeMaps(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList>(::nds::name::instantiations::NameTransitionAttributeMapList(context.getTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList> RoadNameLayer::readRoadRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList>(::nds::name::instantiations::NameRoadRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList> RoadNameLayer::readRoadRangeAttributeSets(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList>(::nds::name::instantiations::NameRoadRangeAttributeSetList(context.getRoadRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList> RoadNameLayer::readRoadPositionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList>(::nds::name::instantiations::NameRoadPositionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList> RoadNameLayer::readRoadPositionAttributeSets(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList>(::nds::name::instantiations::NameRoadPositionAttributeSetList(context.getRoadPositionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameRoadPositionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList> RoadNameLayer::readTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList>(::nds::name::instantiations::NameTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList> RoadNameLayer::readTransitionAttributeSets(RoadNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS) == ::nds::name::metadata::RoadNameLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList>(::nds::name::instantiations::NameTransitionAttributeSetList(context.getTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameTransitionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<RoadNameLayer::ZserioArrayType_adminHierarchyElementDefinitions> RoadNameLayer::readAdminHierarchyElementDefinitions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        ZserioArrayType_adminHierarchyElementDefinitions readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<RoadNameLayer::ZserioArrayType_adminHierarchyElementDefinitions> RoadNameLayer::readAdminHierarchyElementDefinitions(RoadNameLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::RoadNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        ZserioArrayType_adminHierarchyElementDefinitions readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<RoadNameLayer::ZserioArrayType_addressFormats> RoadNameLayer::readAddressFormats(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT)
    {
        ZserioArrayType_addressFormats readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<RoadNameLayer::ZserioArrayType_addressFormats> RoadNameLayer::readAddressFormats(RoadNameLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::RoadNameLayerContent::Values::ADDRESS_FORMAT)
    {
        ZserioArrayType_addressFormats readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::zserio::NullOpt);
}

} // namespace layer
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/layer/LaneNameLayer.h>
#include <nds/name/metadata/LaneNameLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace name
{
namespace layer
{

LaneNameLayer::LaneNameLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::name::metadata::LaneNameLayerContent()),
        m_laneRangeAttributeMaps_(::zserio::NullOpt),
        m_lanePositionAttributeMaps_(::zserio::NullOpt),
        m_laneRangeAttributeSets_(::zserio::NullOpt),
        m_lanePositionAttributeSets_(::zserio::NullOpt),
        m_adminHierarchyElementDefinitions_(::zserio::NullOpt),
        m_addressFormats_(::zserio::NullOpt)
{
}

LaneNameLayer::LaneNameLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(in, allocator)),
        m_lanePositionAttributeMaps_(readLanePositionAttributeMaps(in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(in, allocator)),
        m_lanePositionAttributeSets_(readLanePositionAttributeSets(in, allocator)),
        m_adminHierarchyElementDefinitions_(readAdminHierarchyElementDefinitions(in, allocator)),
        m_addressFormats_(readAddressFormats(in, allocator))
{
}

LaneNameLayer::LaneNameLayer(LaneNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(context, in, allocator)),
        m_lanePositionAttributeMaps_(readLanePositionAttributeMaps(context, in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(context, in, allocator)),
        m_lanePositionAttributeSets_(readLanePositionAttributeSets(context, in, allocator)),
        m_adminHierarchyElementDefinitions_(readAdminHierarchyElementDefinitions(context, in, allocator)),
        m_addressFormats_(readAddressFormats(context, in, allocator))
{
}

LaneNameLayer::LaneNameLayer(const LaneNameLayer& other) :
        m_content_(other.m_content_),
        m_laneRangeAttributeMaps_(other.m_laneRangeAttributeMaps_),
        m_lanePositionAttributeMaps_(other.m_lanePositionAttributeMaps_),
        m_laneRangeAttributeSets_(other.m_laneRangeAttributeSets_),
        m_lanePositionAttributeSets_(other.m_lanePositionAttributeSets_),
        m_adminHierarchyElementDefinitions_(other.m_adminHierarchyElementDefinitions_),
        m_addressFormats_(other.m_addressFormats_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneNameLayer& LaneNameLayer::operator=(const LaneNameLayer& other)
{
    m_content_ = other.m_content_;
    m_laneRangeAttributeMaps_ = other.m_laneRangeAttributeMaps_;
    m_lanePositionAttributeMaps_ = other.m_lanePositionAttributeMaps_;
    m_laneRangeAttributeSets_ = other.m_laneRangeAttributeSets_;
    m_lanePositionAttributeSets_ = other.m_lanePositionAttributeSets_;
    m_adminHierarchyElementDefinitions_ = other.m_adminHierarchyElementDefinitions_;
    m_addressFormats_ = other.m_addressFormats_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneNameLayer::LaneNameLayer(LaneNameLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_laneRangeAttributeMaps_(::std::move(other.m_laneRangeAttributeMaps_)),
        m_lanePositionAttributeMaps_(::std::move(other.m_lanePositionAttributeMaps_)),
        m_laneRangeAttributeSets_(::std::move(other.m_laneRangeAttributeSets_)),
        m_lanePositionAttributeSets_(::std::move(other.m_lanePositionAttributeSets_)),
        m_adminHierarchyElementDefinitions_(::std::move(other.m_adminHierarchyElementDefinitions_)),
        m_addressFormats_(::std::move(other.m_addressFormats_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneNameLayer& LaneNameLayer::operator=(LaneNameLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_laneRangeAttributeMaps_ = ::std::move(other.m_laneRangeAttributeMaps_);
    m_lanePositionAttributeMaps_ = ::std::move(other.m_lanePositionAttributeMaps_);
    m_laneRangeAttributeSets_ = ::std::move(other.m_laneRangeAttributeSets_);
    m_lanePositionAttributeSets_ = ::std::move(other.m_lanePositionAttributeSets_);
    m_adminHierarchyElementDefinitions_ = ::std::move(other.m_adminHierarchyElementDefinitions_);
    m_addressFormats_ = ::std::move(other.m_addressFormats_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneNameLayer::LaneNameLayer(::zserio::PropagateAllocatorT,
        const LaneNameLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMaps_, allocator)),
        m_lanePositionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeMaps_, allocator)),
        m_laneRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeSets_, allocator)),
        m_lanePositionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeSets_, allocator)),
        m_adminHierarchyElementDefinitions_(::zserio::allocatorPropagatingCopy(other.m_adminHierarchyElementDefinitions_, allocator)),
        m_addressFormats_(::zserio::allocatorPropagatingCopy(other.m_addressFormats_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneNameLayer::initializeChildren()
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
        m_laneRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
        m_lanePositionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
        m_laneRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
        m_lanePositionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::name::metadata::LaneNameLayerContent LaneNameLayer::getContent() const
{
    return m_content_;
}

void LaneNameLayer::setContent(::nds::name::metadata::LaneNameLayerContent content_)
{
    m_content_ = content_;
}

::nds::name::instantiations::NameLaneRangeAttributeMapList& LaneNameLayer::getLaneRangeAttributeMaps()
{
    return m_laneRangeAttributeMaps_.value();
}

const ::nds::name::instantiations::NameLaneRangeAttributeMapList& LaneNameLayer::getLaneRangeAttributeMaps() const
{
    return m_laneRangeAttributeMaps_.value();
}

void LaneNameLayer::setLaneRangeAttributeMaps(const ::nds::name::instantiations::NameLaneRangeAttributeMapList& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = laneRangeAttributeMaps_;
}

void LaneNameLayer::setLaneRangeAttributeMaps(::nds::name::instantiations::NameLaneRangeAttributeMapList&& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = ::std::move(laneRangeAttributeMaps_);
}

bool LaneNameLayer::isLaneRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS);
}

bool LaneNameLayer::isLaneRangeAttributeMapsSet() const
{
    return m_laneRangeAttributeMaps_.hasValue();
}

void LaneNameLayer::resetLaneRangeAttributeMaps()
{
    m_laneRangeAttributeMaps_.reset();
}

::nds::name::instantiations::NameLanePositionAttributeMapList& LaneNameLayer::getLanePositionAttributeMaps()
{
    return m_lanePositionAttributeMaps_.value();
}

const ::nds::name::instantiations::NameLanePositionAttributeMapList& LaneNameLayer::getLanePositionAttributeMaps() const
{
    return m_lanePositionAttributeMaps_.value();
}

void LaneNameLayer::setLanePositionAttributeMaps(const ::nds::name::instantiations::NameLanePositionAttributeMapList& lanePositionAttributeMaps_)
{
    m_lanePositionAttributeMaps_ = lanePositionAttributeMaps_;
}

void LaneNameLayer::setLanePositionAttributeMaps(::nds::name::instantiations::NameLanePositionAttributeMapList&& lanePositionAttributeMaps_)
{
    m_lanePositionAttributeMaps_ = ::std::move(lanePositionAttributeMaps_);
}

bool LaneNameLayer::isLanePositionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS);
}

bool LaneNameLayer::isLanePositionAttributeMapsSet() const
{
    return m_lanePositionAttributeMaps_.hasValue();
}

void LaneNameLayer::resetLanePositionAttributeMaps()
{
    m_lanePositionAttributeMaps_.reset();
}

::nds::name::instantiations::NameLaneRangeAttributeSetList& LaneNameLayer::getLaneRangeAttributeSets()
{
    return m_laneRangeAttributeSets_.value();
}

const ::nds::name::instantiations::NameLaneRangeAttributeSetList& LaneNameLayer::getLaneRangeAttributeSets() const
{
    return m_laneRangeAttributeSets_.value();
}

void LaneNameLayer::setLaneRangeAttributeSets(const ::nds::name::instantiations::NameLaneRangeAttributeSetList& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = laneRangeAttributeSets_;
}

void LaneNameLayer::setLaneRangeAttributeSets(::nds::name::instantiations::NameLaneRangeAttributeSetList&& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = ::std::move(laneRangeAttributeSets_);
}

bool LaneNameLayer::isLaneRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneNameLayer::isLaneRangeAttributeSetsSet() const
{
    return m_laneRangeAttributeSets_.hasValue();
}

void LaneNameLayer::resetLaneRangeAttributeSets()
{
    m_laneRangeAttributeSets_.reset();
}

::nds::name::instantiations::NameLanePositionAttributeSetList& LaneNameLayer::getLanePositionAttributeSets()
{
    return m_lanePositionAttributeSets_.value();
}

const ::nds::name::instantiations::NameLanePositionAttributeSetList& LaneNameLayer::getLanePositionAttributeSets() const
{
    return m_lanePositionAttributeSets_.value();
}

void LaneNameLayer::setLanePositionAttributeSets(const ::nds::name::instantiations::NameLanePositionAttributeSetList& lanePositionAttributeSets_)
{
    m_lanePositionAttributeSets_ = lanePositionAttributeSets_;
}

void LaneNameLayer::setLanePositionAttributeSets(::nds::name::instantiations::NameLanePositionAttributeSetList&& lanePositionAttributeSets_)
{
    m_lanePositionAttributeSets_ = ::std::move(lanePositionAttributeSets_);
}

bool LaneNameLayer::isLanePositionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS);
}

bool LaneNameLayer::isLanePositionAttributeSetsSet() const
{
    return m_lanePositionAttributeSets_.hasValue();
}

void LaneNameLayer::resetLanePositionAttributeSets()
{
    m_lanePositionAttributeSets_.reset();
}

::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& LaneNameLayer::getAdminHierarchyElementDefinitions()
{
    return m_adminHierarchyElementDefinitions_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& LaneNameLayer::getAdminHierarchyElementDefinitions() const
{
    return m_adminHierarchyElementDefinitions_.value().getRawArray();
}

void LaneNameLayer::setAdminHierarchyElementDefinitions(const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& adminHierarchyElementDefinitions_)
{
    m_adminHierarchyElementDefinitions_ = ZserioArrayType_adminHierarchyElementDefinitions(adminHierarchyElementDefinitions_);
}

void LaneNameLayer::setAdminHierarchyElementDefinitions(::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>&& adminHierarchyElementDefinitions_)
{
    m_adminHierarchyElementDefinitions_ = ZserioArrayType_adminHierarchyElementDefinitions(std::move(adminHierarchyElementDefinitions_));
}

bool LaneNameLayer::isAdminHierarchyElementDefinitionsUsed() const
{
    return ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY);
}

bool LaneNameLayer::isAdminHierarchyElementDefinitionsSet() const
{
    return m_adminHierarchyElementDefinitions_.hasValue();
}

void LaneNameLayer::resetAdminHierarchyElementDefinitions()
{
    m_adminHierarchyElementDefinitions_.reset();
}

::zserio::vector<::nds::name::types::AddressFormat>& LaneNameLayer::getAddressFormats()
{
    return m_addressFormats_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AddressFormat>& LaneNameLayer::getAddressFormats() const
{
    return m_addressFormats_.value().getRawArray();
}

void LaneNameLayer::setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(addressFormats_);
}

void LaneNameLayer::setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(std::move(addressFormats_));
}

bool LaneNameLayer::isAddressFormatsUsed() const
{
    return ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT);
}

bool LaneNameLayer::isAddressFormatsSet() const
{
    return m_addressFormats_.hasValue();
}

void LaneNameLayer::resetAddressFormats()
{
    m_addressFormats_.reset();
}

::nds::system::types::LayerType LaneNameLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void LaneNameLayer::initPackingContext(LaneNameLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_laneRangeAttributeMaps_.value().initPackingContext(context.getLaneRangeAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        m_lanePositionAttributeMaps_.value().initPackingContext(context.getLanePositionAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeSets_.value().initPackingContext(context.getLaneRangeAttributeSets());
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeSets_.value().initPackingContext(context.getLanePositionAttributeSets());
    }
}

size_t LaneNameLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_lanePositionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition += m_adminHierarchyElementDefinitions_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition += m_addressFormats_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneNameLayer::bitSizeOf(LaneNameLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_lanePositionAttributeMaps_.value().bitSizeOf(context.getLanePositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(context.getLaneRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeSets_.value().bitSizeOf(context.getLanePositionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition += m_adminHierarchyElementDefinitions_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition += m_addressFormats_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneNameLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_lanePositionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition = m_adminHierarchyElementDefinitions_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition = m_addressFormats_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t LaneNameLayer::initializeOffsets(LaneNameLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_lanePositionAttributeMaps_.value().initializeOffsets(context.getLanePositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(context.getLaneRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeSets_.value().initializeOffsets(context.getLanePositionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition = m_adminHierarchyElementDefinitions_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition = m_addressFormats_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool LaneNameLayer::operator==(const LaneNameLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMapsUsed() ? !other.isLaneRangeAttributeMapsUsed() : (m_laneRangeAttributeMaps_ == other.m_laneRangeAttributeMaps_)) &&
                (!isLanePositionAttributeMapsUsed() ? !other.isLanePositionAttributeMapsUsed() : (m_lanePositionAttributeMaps_ == other.m_lanePositionAttributeMaps_)) &&
                (!isLaneRangeAttributeSetsUsed() ? !other.isLaneRangeAttributeSetsUsed() : (m_laneRangeAttributeSets_ == other.m_laneRangeAttributeSets_)) &&
                (!isLanePositionAttributeSetsUsed() ? !other.isLanePositionAttributeSetsUsed() : (m_lanePositionAttributeSets_ == other.m_lanePositionAttributeSets_)) &&
                (!isAdminHierarchyElementDefinitionsUsed() ? !other.isAdminHierarchyElementDefinitionsUsed() : (m_adminHierarchyElementDefinitions_ == other.m_adminHierarchyElementDefinitions_)) &&
                (!isAddressFormatsUsed() ? !other.isAddressFormatsUsed() : (m_addressFormats_ == other.m_addressFormats_));
    }

    return true;
}

uint32_t LaneNameLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMaps_);
    if (isLanePositionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeMaps_);
    if (isLaneRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeSets_);
    if (isLanePositionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeSets_);
    if (isAdminHierarchyElementDefinitionsUsed())
        result = ::zserio::calcHashCode(result, m_adminHierarchyElementDefinitions_);
    if (isAddressFormatsUsed())
        result = ::zserio::calcHashCode(result, m_addressFormats_);

    return result;
}

void LaneNameLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneNameLayer.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        // check parameters
        if (m_lanePositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneNameLayer.lanePositionAttributeMaps: ") <<
                    m_lanePositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneNameLayer.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        // check parameters
        if (m_lanePositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneNameLayer.lanePositionAttributeSets: ") <<
                    m_lanePositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        m_adminHierarchyElementDefinitions_.value().write(*this, out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT)
    {
        m_addressFormats_.value().write(*this, out);
    }
}

void LaneNameLayer::write(LaneNameLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneNameLayer.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(context.getLaneRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        // check parameters
        if (m_lanePositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneNameLayer.lanePositionAttributeMaps: ") <<
                    m_lanePositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeMaps_.value().write(context.getLanePositionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneNameLayer.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(context.getLaneRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        // check parameters
        if (m_lanePositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneNameLayer.lanePositionAttributeSets: ") <<
                    m_lanePositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeSets_.value().write(context.getLanePositionAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        m_adminHierarchyElementDefinitions_.value().writePacked(*this, out);
    }

    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT)
    {
        m_addressFormats_.value().writePacked(*this, out);
    }
}

void LaneNameLayer::ZserioElementFactory_adminHierarchyElementDefinitions::create(LaneNameLayer&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneNameLayer::ZserioElementFactory_adminHierarchyElementDefinitions::create(LaneNameLayer&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::nds::name::types::AdministrativeHierarchyElement::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void LaneNameLayer::ZserioElementFactory_addressFormats::create(LaneNameLayer&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneNameLayer::ZserioElementFactory_addressFormats::create(LaneNameLayer&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::nds::name::types::AddressFormat::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::name::metadata::LaneNameLayerContent LaneNameLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::LaneNameLayerContent(in);
}

::nds::name::metadata::LaneNameLayerContent LaneNameLayer::readContent(LaneNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::LaneNameLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList> LaneNameLayer::readLaneRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList>(::nds::name::instantiations::NameLaneRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList> LaneNameLayer::readLaneRangeAttributeMaps(LaneNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList>(::nds::name::instantiations::NameLaneRangeAttributeMapList(context.getLaneRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList> LaneNameLayer::readLanePositionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList>(::nds::name::instantiations::NameLanePositionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList> LaneNameLayer::readLanePositionAttributeMaps(LaneNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList>(::nds::name::instantiations::NameLanePositionAttributeMapList(context.getLanePositionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList> LaneNameLayer::readLaneRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList>(::nds::name::instantiations::NameLaneRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList> LaneNameLayer::readLaneRangeAttributeSets(LaneNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList>(::nds::name::instantiations::NameLaneRangeAttributeSetList(context.getLaneRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList> LaneNameLayer::readLanePositionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList>(::nds::name::instantiations::NameLanePositionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList> LaneNameLayer::readLanePositionAttributeSets(LaneNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS) == ::nds::name::metadata::LaneNameLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList>(::nds::name::instantiations::NameLanePositionAttributeSetList(context.getLanePositionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<LaneNameLayer::ZserioArrayType_adminHierarchyElementDefinitions> LaneNameLayer::readAdminHierarchyElementDefinitions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        ZserioArrayType_adminHierarchyElementDefinitions readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<LaneNameLayer::ZserioArrayType_adminHierarchyElementDefinitions> LaneNameLayer::readAdminHierarchyElementDefinitions(LaneNameLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::LaneNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        ZserioArrayType_adminHierarchyElementDefinitions readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<LaneNameLayer::ZserioArrayType_addressFormats> LaneNameLayer::readAddressFormats(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT)
    {
        ZserioArrayType_addressFormats readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<LaneNameLayer::ZserioArrayType_addressFormats> LaneNameLayer::readAddressFormats(LaneNameLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::LaneNameLayerContent::Values::ADDRESS_FORMAT)
    {
        ZserioArrayType_addressFormats readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::zserio::NullOpt);
}

} // namespace layer
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/layer/DisplayNameLayer.h>
#include <nds/name/metadata/DisplayNameLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace name
{
namespace layer
{

DisplayNameLayer::DisplayNameLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::name::metadata::DisplayNameLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_displayLineRangeAttributeMaps_(::zserio::NullOpt),
        m_displayAreaAttributeMaps_(::zserio::NullOpt),
        m_displayPointAttributeMaps_(::zserio::NullOpt),
        m_displayLineRangeAttributeSets_(::zserio::NullOpt),
        m_displayAreaAttributeSets_(::zserio::NullOpt),
        m_displayPointAttributeSets_(::zserio::NullOpt),
        m_adminHierarchyElementDefinitions_(::zserio::NullOpt),
        m_addressFormats_(::zserio::NullOpt)
{
}

DisplayNameLayer::DisplayNameLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_displayLineRangeAttributeMaps_(readDisplayLineRangeAttributeMaps(in, allocator)),
        m_displayAreaAttributeMaps_(readDisplayAreaAttributeMaps(in, allocator)),
        m_displayPointAttributeMaps_(readDisplayPointAttributeMaps(in, allocator)),
        m_displayLineRangeAttributeSets_(readDisplayLineRangeAttributeSets(in, allocator)),
        m_displayAreaAttributeSets_(readDisplayAreaAttributeSets(in, allocator)),
        m_displayPointAttributeSets_(readDisplayPointAttributeSets(in, allocator)),
        m_adminHierarchyElementDefinitions_(readAdminHierarchyElementDefinitions(in, allocator)),
        m_addressFormats_(readAddressFormats(in, allocator))
{
}

DisplayNameLayer::DisplayNameLayer(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_displayLineRangeAttributeMaps_(readDisplayLineRangeAttributeMaps(context, in, allocator)),
        m_displayAreaAttributeMaps_(readDisplayAreaAttributeMaps(context, in, allocator)),
        m_displayPointAttributeMaps_(readDisplayPointAttributeMaps(context, in, allocator)),
        m_displayLineRangeAttributeSets_(readDisplayLineRangeAttributeSets(context, in, allocator)),
        m_displayAreaAttributeSets_(readDisplayAreaAttributeSets(context, in, allocator)),
        m_displayPointAttributeSets_(readDisplayPointAttributeSets(context, in, allocator)),
        m_adminHierarchyElementDefinitions_(readAdminHierarchyElementDefinitions(context, in, allocator)),
        m_addressFormats_(readAddressFormats(context, in, allocator))
{
}

DisplayNameLayer::DisplayNameLayer(const DisplayNameLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_displayLineRangeAttributeMaps_(other.m_displayLineRangeAttributeMaps_),
        m_displayAreaAttributeMaps_(other.m_displayAreaAttributeMaps_),
        m_displayPointAttributeMaps_(other.m_displayPointAttributeMaps_),
        m_displayLineRangeAttributeSets_(other.m_displayLineRangeAttributeSets_),
        m_displayAreaAttributeSets_(other.m_displayAreaAttributeSets_),
        m_displayPointAttributeSets_(other.m_displayPointAttributeSets_),
        m_adminHierarchyElementDefinitions_(other.m_adminHierarchyElementDefinitions_),
        m_addressFormats_(other.m_addressFormats_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

DisplayNameLayer& DisplayNameLayer::operator=(const DisplayNameLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_displayLineRangeAttributeMaps_ = other.m_displayLineRangeAttributeMaps_;
    m_displayAreaAttributeMaps_ = other.m_displayAreaAttributeMaps_;
    m_displayPointAttributeMaps_ = other.m_displayPointAttributeMaps_;
    m_displayLineRangeAttributeSets_ = other.m_displayLineRangeAttributeSets_;
    m_displayAreaAttributeSets_ = other.m_displayAreaAttributeSets_;
    m_displayPointAttributeSets_ = other.m_displayPointAttributeSets_;
    m_adminHierarchyElementDefinitions_ = other.m_adminHierarchyElementDefinitions_;
    m_addressFormats_ = other.m_addressFormats_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

DisplayNameLayer::DisplayNameLayer(DisplayNameLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_displayLineRangeAttributeMaps_(::std::move(other.m_displayLineRangeAttributeMaps_)),
        m_displayAreaAttributeMaps_(::std::move(other.m_displayAreaAttributeMaps_)),
        m_displayPointAttributeMaps_(::std::move(other.m_displayPointAttributeMaps_)),
        m_displayLineRangeAttributeSets_(::std::move(other.m_displayLineRangeAttributeSets_)),
        m_displayAreaAttributeSets_(::std::move(other.m_displayAreaAttributeSets_)),
        m_displayPointAttributeSets_(::std::move(other.m_displayPointAttributeSets_)),
        m_adminHierarchyElementDefinitions_(::std::move(other.m_adminHierarchyElementDefinitions_)),
        m_addressFormats_(::std::move(other.m_addressFormats_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

DisplayNameLayer& DisplayNameLayer::operator=(DisplayNameLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_displayLineRangeAttributeMaps_ = ::std::move(other.m_displayLineRangeAttributeMaps_);
    m_displayAreaAttributeMaps_ = ::std::move(other.m_displayAreaAttributeMaps_);
    m_displayPointAttributeMaps_ = ::std::move(other.m_displayPointAttributeMaps_);
    m_displayLineRangeAttributeSets_ = ::std::move(other.m_displayLineRangeAttributeSets_);
    m_displayAreaAttributeSets_ = ::std::move(other.m_displayAreaAttributeSets_);
    m_displayPointAttributeSets_ = ::std::move(other.m_displayPointAttributeSets_);
    m_adminHierarchyElementDefinitions_ = ::std::move(other.m_adminHierarchyElementDefinitions_);
    m_addressFormats_ = ::std::move(other.m_addressFormats_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

DisplayNameLayer::DisplayNameLayer(::zserio::PropagateAllocatorT,
        const DisplayNameLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_displayLineRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeMaps_, allocator)),
        m_displayAreaAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayAreaAttributeMaps_, allocator)),
        m_displayPointAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayPointAttributeMaps_, allocator)),
        m_displayLineRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeSets_, allocator)),
        m_displayAreaAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayAreaAttributeSets_, allocator)),
        m_displayPointAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayPointAttributeSets_, allocator)),
        m_adminHierarchyElementDefinitions_(::zserio::allocatorPropagatingCopy(other.m_adminHierarchyElementDefinitions_, allocator)),
        m_addressFormats_(::zserio::allocatorPropagatingCopy(other.m_addressFormats_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void DisplayNameLayer::initializeChildren()
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
        m_displayLineRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
        m_displayAreaAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
        m_displayPointAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
        m_displayLineRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
        m_displayAreaAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
        m_displayPointAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::name::metadata::DisplayNameLayerContent DisplayNameLayer::getContent() const
{
    return m_content_;
}

void DisplayNameLayer::setContent(::nds::name::metadata::DisplayNameLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift DisplayNameLayer::getShift() const
{
    return m_shift_;
}

void DisplayNameLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::name::instantiations::NameDisplayLineRangeAttributeMapList& DisplayNameLayer::getDisplayLineRangeAttributeMaps()
{
    return m_displayLineRangeAttributeMaps_.value();
}

const ::nds::name::instantiations::NameDisplayLineRangeAttributeMapList& DisplayNameLayer::getDisplayLineRangeAttributeMaps() const
{
    return m_displayLineRangeAttributeMaps_.value();
}

void DisplayNameLayer::setDisplayLineRangeAttributeMaps(const ::nds::name::instantiations::NameDisplayLineRangeAttributeMapList& displayLineRangeAttributeMaps_)
{
    m_displayLineRangeAttributeMaps_ = displayLineRangeAttributeMaps_;
}

void DisplayNameLayer::setDisplayLineRangeAttributeMaps(::nds::name::instantiations::NameDisplayLineRangeAttributeMapList&& displayLineRangeAttributeMaps_)
{
    m_displayLineRangeAttributeMaps_ = ::std::move(displayLineRangeAttributeMaps_);
}

bool DisplayNameLayer::isDisplayLineRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS);
}

bool DisplayNameLayer::isDisplayLineRangeAttributeMapsSet() const
{
    return m_displayLineRangeAttributeMaps_.hasValue();
}

void DisplayNameLayer::resetDisplayLineRangeAttributeMaps()
{
    m_displayLineRangeAttributeMaps_.reset();
}

::nds::name::instantiations::NameDisplayAreaAttributeMapList& DisplayNameLayer::getDisplayAreaAttributeMaps()
{
    return m_displayAreaAttributeMaps_.value();
}

const ::nds::name::instantiations::NameDisplayAreaAttributeMapList& DisplayNameLayer::getDisplayAreaAttributeMaps() const
{
    return m_displayAreaAttributeMaps_.value();
}

void DisplayNameLayer::setDisplayAreaAttributeMaps(const ::nds::name::instantiations::NameDisplayAreaAttributeMapList& displayAreaAttributeMaps_)
{
    m_displayAreaAttributeMaps_ = displayAreaAttributeMaps_;
}

void DisplayNameLayer::setDisplayAreaAttributeMaps(::nds::name::instantiations::NameDisplayAreaAttributeMapList&& displayAreaAttributeMaps_)
{
    m_displayAreaAttributeMaps_ = ::std::move(displayAreaAttributeMaps_);
}

bool DisplayNameLayer::isDisplayAreaAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS);
}

bool DisplayNameLayer::isDisplayAreaAttributeMapsSet() const
{
    return m_displayAreaAttributeMaps_.hasValue();
}

void DisplayNameLayer::resetDisplayAreaAttributeMaps()
{
    m_displayAreaAttributeMaps_.reset();
}

::nds::name::instantiations::NameDisplayPointAttributeMapList& DisplayNameLayer::getDisplayPointAttributeMaps()
{
    return m_displayPointAttributeMaps_.value();
}

const ::nds::name::instantiations::NameDisplayPointAttributeMapList& DisplayNameLayer::getDisplayPointAttributeMaps() const
{
    return m_displayPointAttributeMaps_.value();
}

void DisplayNameLayer::setDisplayPointAttributeMaps(const ::nds::name::instantiations::NameDisplayPointAttributeMapList& displayPointAttributeMaps_)
{
    m_displayPointAttributeMaps_ = displayPointAttributeMaps_;
}

void DisplayNameLayer::setDisplayPointAttributeMaps(::nds::name::instantiations::NameDisplayPointAttributeMapList&& displayPointAttributeMaps_)
{
    m_displayPointAttributeMaps_ = ::std::move(displayPointAttributeMaps_);
}

bool DisplayNameLayer::isDisplayPointAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS);
}

bool DisplayNameLayer::isDisplayPointAttributeMapsSet() const
{
    return m_displayPointAttributeMaps_.hasValue();
}

void DisplayNameLayer::resetDisplayPointAttributeMaps()
{
    m_displayPointAttributeMaps_.reset();
}

::nds::name::instantiations::NameDisplayLineRangeAttributeSetList& DisplayNameLayer::getDisplayLineRangeAttributeSets()
{
    return m_displayLineRangeAttributeSets_.value();
}

const ::nds::name::instantiations::NameDisplayLineRangeAttributeSetList& DisplayNameLayer::getDisplayLineRangeAttributeSets() const
{
    return m_displayLineRangeAttributeSets_.value();
}

void DisplayNameLayer::setDisplayLineRangeAttributeSets(const ::nds::name::instantiations::NameDisplayLineRangeAttributeSetList& displayLineRangeAttributeSets_)
{
    m_displayLineRangeAttributeSets_ = displayLineRangeAttributeSets_;
}

void DisplayNameLayer::setDisplayLineRangeAttributeSets(::nds::name::instantiations::NameDisplayLineRangeAttributeSetList&& displayLineRangeAttributeSets_)
{
    m_displayLineRangeAttributeSets_ = ::std::move(displayLineRangeAttributeSets_);
}

bool DisplayNameLayer::isDisplayLineRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS);
}

bool DisplayNameLayer::isDisplayLineRangeAttributeSetsSet() const
{
    return m_displayLineRangeAttributeSets_.hasValue();
}

void DisplayNameLayer::resetDisplayLineRangeAttributeSets()
{
    m_displayLineRangeAttributeSets_.reset();
}

::nds::name::instantiations::NameDisplayAreaAttributeSetList& DisplayNameLayer::getDisplayAreaAttributeSets()
{
    return m_displayAreaAttributeSets_.value();
}

const ::nds::name::instantiations::NameDisplayAreaAttributeSetList& DisplayNameLayer::getDisplayAreaAttributeSets() const
{
    return m_displayAreaAttributeSets_.value();
}

void DisplayNameLayer::setDisplayAreaAttributeSets(const ::nds::name::instantiations::NameDisplayAreaAttributeSetList& displayAreaAttributeSets_)
{
    m_displayAreaAttributeSets_ = displayAreaAttributeSets_;
}

void DisplayNameLayer::setDisplayAreaAttributeSets(::nds::name::instantiations::NameDisplayAreaAttributeSetList&& displayAreaAttributeSets_)
{
    m_displayAreaAttributeSets_ = ::std::move(displayAreaAttributeSets_);
}

bool DisplayNameLayer::isDisplayAreaAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS);
}

bool DisplayNameLayer::isDisplayAreaAttributeSetsSet() const
{
    return m_displayAreaAttributeSets_.hasValue();
}

void DisplayNameLayer::resetDisplayAreaAttributeSets()
{
    m_displayAreaAttributeSets_.reset();
}

::nds::name::instantiations::NameDisplayPointAttributeSetList& DisplayNameLayer::getDisplayPointAttributeSets()
{
    return m_displayPointAttributeSets_.value();
}

const ::nds::name::instantiations::NameDisplayPointAttributeSetList& DisplayNameLayer::getDisplayPointAttributeSets() const
{
    return m_displayPointAttributeSets_.value();
}

void DisplayNameLayer::setDisplayPointAttributeSets(const ::nds::name::instantiations::NameDisplayPointAttributeSetList& displayPointAttributeSets_)
{
    m_displayPointAttributeSets_ = displayPointAttributeSets_;
}

void DisplayNameLayer::setDisplayPointAttributeSets(::nds::name::instantiations::NameDisplayPointAttributeSetList&& displayPointAttributeSets_)
{
    m_displayPointAttributeSets_ = ::std::move(displayPointAttributeSets_);
}

bool DisplayNameLayer::isDisplayPointAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS);
}

bool DisplayNameLayer::isDisplayPointAttributeSetsSet() const
{
    return m_displayPointAttributeSets_.hasValue();
}

void DisplayNameLayer::resetDisplayPointAttributeSets()
{
    m_displayPointAttributeSets_.reset();
}

::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& DisplayNameLayer::getAdminHierarchyElementDefinitions()
{
    return m_adminHierarchyElementDefinitions_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& DisplayNameLayer::getAdminHierarchyElementDefinitions() const
{
    return m_adminHierarchyElementDefinitions_.value().getRawArray();
}

void DisplayNameLayer::setAdminHierarchyElementDefinitions(const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& adminHierarchyElementDefinitions_)
{
    m_adminHierarchyElementDefinitions_ = ZserioArrayType_adminHierarchyElementDefinitions(adminHierarchyElementDefinitions_);
}

void DisplayNameLayer::setAdminHierarchyElementDefinitions(::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>&& adminHierarchyElementDefinitions_)
{
    m_adminHierarchyElementDefinitions_ = ZserioArrayType_adminHierarchyElementDefinitions(std::move(adminHierarchyElementDefinitions_));
}

bool DisplayNameLayer::isAdminHierarchyElementDefinitionsUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY);
}

bool DisplayNameLayer::isAdminHierarchyElementDefinitionsSet() const
{
    return m_adminHierarchyElementDefinitions_.hasValue();
}

void DisplayNameLayer::resetAdminHierarchyElementDefinitions()
{
    m_adminHierarchyElementDefinitions_.reset();
}

::zserio::vector<::nds::name::types::AddressFormat>& DisplayNameLayer::getAddressFormats()
{
    return m_addressFormats_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AddressFormat>& DisplayNameLayer::getAddressFormats() const
{
    return m_addressFormats_.value().getRawArray();
}

void DisplayNameLayer::setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(addressFormats_);
}

void DisplayNameLayer::setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(std::move(addressFormats_));
}

bool DisplayNameLayer::isAddressFormatsUsed() const
{
    return ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT);
}

bool DisplayNameLayer::isAddressFormatsSet() const
{
    return m_addressFormats_.hasValue();
}

void DisplayNameLayer::resetAddressFormats()
{
    m_addressFormats_.reset();
}

::nds::system::types::LayerType DisplayNameLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void DisplayNameLayer::initPackingContext(DisplayNameLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        m_displayLineRangeAttributeMaps_.value().initPackingContext(context.getDisplayLineRangeAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        m_displayAreaAttributeMaps_.value().initPackingContext(context.getDisplayAreaAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        m_displayPointAttributeMaps_.value().initPackingContext(context.getDisplayPointAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeSets_.value().initPackingContext(context.getDisplayLineRangeAttributeSets());
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        m_displayAreaAttributeSets_.value().initPackingContext(context.getDisplayAreaAttributeSets());
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        m_displayPointAttributeSets_.value().initPackingContext(context.getDisplayPointAttributeSets());
    }
}

size_t DisplayNameLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition += m_displayLineRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition += m_displayAreaAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        endBitPosition += m_displayPointAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition += m_displayAreaAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition += m_displayPointAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition += m_adminHierarchyElementDefinitions_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition += m_addressFormats_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayNameLayer::bitSizeOf(DisplayNameLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition += m_displayLineRangeAttributeMaps_.value().bitSizeOf(context.getDisplayLineRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition += m_displayAreaAttributeMaps_.value().bitSizeOf(context.getDisplayAreaAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        endBitPosition += m_displayPointAttributeMaps_.value().bitSizeOf(context.getDisplayPointAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeSets_.value().bitSizeOf(context.getDisplayLineRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition += m_displayAreaAttributeSets_.value().bitSizeOf(context.getDisplayAreaAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition += m_displayPointAttributeSets_.value().bitSizeOf(context.getDisplayPointAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition += m_adminHierarchyElementDefinitions_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition += m_addressFormats_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayNameLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition = m_displayLineRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition = m_displayAreaAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        endBitPosition = m_displayPointAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition = m_displayAreaAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition = m_displayPointAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition = m_adminHierarchyElementDefinitions_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition = m_addressFormats_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t DisplayNameLayer::initializeOffsets(DisplayNameLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition = m_displayLineRangeAttributeMaps_.value().initializeOffsets(context.getDisplayLineRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition = m_displayAreaAttributeMaps_.value().initializeOffsets(context.getDisplayAreaAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        endBitPosition = m_displayPointAttributeMaps_.value().initializeOffsets(context.getDisplayPointAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeSets_.value().initializeOffsets(context.getDisplayLineRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition = m_displayAreaAttributeSets_.value().initializeOffsets(context.getDisplayAreaAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition = m_displayPointAttributeSets_.value().initializeOffsets(context.getDisplayPointAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition = m_adminHierarchyElementDefinitions_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition = m_addressFormats_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool DisplayNameLayer::operator==(const DisplayNameLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isDisplayLineRangeAttributeMapsUsed() ? !other.isDisplayLineRangeAttributeMapsUsed() : (m_displayLineRangeAttributeMaps_ == other.m_displayLineRangeAttributeMaps_)) &&
                (!isDisplayAreaAttributeMapsUsed() ? !other.isDisplayAreaAttributeMapsUsed() : (m_displayAreaAttributeMaps_ == other.m_displayAreaAttributeMaps_)) &&
                (!isDisplayPointAttributeMapsUsed() ? !other.isDisplayPointAttributeMapsUsed() : (m_displayPointAttributeMaps_ == other.m_displayPointAttributeMaps_)) &&
                (!isDisplayLineRangeAttributeSetsUsed() ? !other.isDisplayLineRangeAttributeSetsUsed() : (m_displayLineRangeAttributeSets_ == other.m_displayLineRangeAttributeSets_)) &&
                (!isDisplayAreaAttributeSetsUsed() ? !other.isDisplayAreaAttributeSetsUsed() : (m_displayAreaAttributeSets_ == other.m_displayAreaAttributeSets_)) &&
                (!isDisplayPointAttributeSetsUsed() ? !other.isDisplayPointAttributeSetsUsed() : (m_displayPointAttributeSets_ == other.m_displayPointAttributeSets_)) &&
                (!isAdminHierarchyElementDefinitionsUsed() ? !other.isAdminHierarchyElementDefinitionsUsed() : (m_adminHierarchyElementDefinitions_ == other.m_adminHierarchyElementDefinitions_)) &&
                (!isAddressFormatsUsed() ? !other.isAddressFormatsUsed() : (m_addressFormats_ == other.m_addressFormats_));
    }

    return true;
}

uint32_t DisplayNameLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isDisplayLineRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeMaps_);
    if (isDisplayAreaAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayAreaAttributeMaps_);
    if (isDisplayPointAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayPointAttributeMaps_);
    if (isDisplayLineRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeSets_);
    if (isDisplayAreaAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayAreaAttributeSets_);
    if (isDisplayPointAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayPointAttributeSets_);
    if (isAdminHierarchyElementDefinitionsUsed())
        result = ::zserio::calcHashCode(result, m_adminHierarchyElementDefinitions_);
    if (isAddressFormatsUsed())
        result = ::zserio::calcHashCode(result, m_addressFormats_);

    return result;
}

void DisplayNameLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        // check parameters
        if (m_displayLineRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayLineRangeAttributeMaps: ") <<
                    m_displayLineRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        // check parameters
        if (m_displayAreaAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayAreaAttributeMaps: ") <<
                    m_displayAreaAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayAreaAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        // check parameters
        if (m_displayPointAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayPointAttributeMaps: ") <<
                    m_displayPointAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayPointAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        // check parameters
        if (m_displayLineRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayLineRangeAttributeSets: ") <<
                    m_displayLineRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        // check parameters
        if (m_displayAreaAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayAreaAttributeSets: ") <<
                    m_displayAreaAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayAreaAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        // check parameters
        if (m_displayPointAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayPointAttributeSets: ") <<
                    m_displayPointAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayPointAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        m_adminHierarchyElementDefinitions_.value().write(*this, out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT)
    {
        m_addressFormats_.value().write(*this, out);
    }
}

void DisplayNameLayer::write(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        // check parameters
        if (m_displayLineRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayLineRangeAttributeMaps: ") <<
                    m_displayLineRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeMaps_.value().write(context.getDisplayLineRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        // check parameters
        if (m_displayAreaAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayAreaAttributeMaps: ") <<
                    m_displayAreaAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayAreaAttributeMaps_.value().write(context.getDisplayAreaAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        // check parameters
        if (m_displayPointAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayPointAttributeMaps: ") <<
                    m_displayPointAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayPointAttributeMaps_.value().write(context.getDisplayPointAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        // check parameters
        if (m_displayLineRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayLineRangeAttributeSets: ") <<
                    m_displayLineRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeSets_.value().write(context.getDisplayLineRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        // check parameters
        if (m_displayAreaAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayAreaAttributeSets: ") <<
                    m_displayAreaAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayAreaAttributeSets_.value().write(context.getDisplayAreaAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        // check parameters
        if (m_displayPointAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayNameLayer.displayPointAttributeSets: ") <<
                    m_displayPointAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayPointAttributeSets_.value().write(context.getDisplayPointAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        m_adminHierarchyElementDefinitions_.value().writePacked(*this, out);
    }

    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT)
    {
        m_addressFormats_.value().writePacked(*this, out);
    }
}

void DisplayNameLayer::ZserioElementFactory_adminHierarchyElementDefinitions::create(DisplayNameLayer&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void DisplayNameLayer::ZserioElementFactory_adminHierarchyElementDefinitions::create(DisplayNameLayer&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::nds::name::types::AdministrativeHierarchyElement::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void DisplayNameLayer::ZserioElementFactory_addressFormats::create(DisplayNameLayer&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void DisplayNameLayer::ZserioElementFactory_addressFormats::create(DisplayNameLayer&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::nds::name::types::AddressFormat::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::name::metadata::DisplayNameLayerContent DisplayNameLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::DisplayNameLayerContent(in);
}

::nds::name::metadata::DisplayNameLayerContent DisplayNameLayer::readContent(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::DisplayNameLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift DisplayNameLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift DisplayNameLayer::readShift(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMapList> DisplayNameLayer::readDisplayLineRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMapList>(::nds::name::instantiations::NameDisplayLineRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMapList> DisplayNameLayer::readDisplayLineRangeAttributeMaps(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMapList>(::nds::name::instantiations::NameDisplayLineRangeAttributeMapList(context.getDisplayLineRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMapList> DisplayNameLayer::readDisplayAreaAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMapList>(::nds::name::instantiations::NameDisplayAreaAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMapList> DisplayNameLayer::readDisplayAreaAttributeMaps(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMapList>(::nds::name::instantiations::NameDisplayAreaAttributeMapList(context.getDisplayAreaAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMapList> DisplayNameLayer::readDisplayPointAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMapList>(::nds::name::instantiations::NameDisplayPointAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMapList> DisplayNameLayer::readDisplayPointAttributeMaps(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMapList>(::nds::name::instantiations::NameDisplayPointAttributeMapList(context.getDisplayPointAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeSetList> DisplayNameLayer::readDisplayLineRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeSetList>(::nds::name::instantiations::NameDisplayLineRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeSetList> DisplayNameLayer::readDisplayLineRangeAttributeSets(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeSetList>(::nds::name::instantiations::NameDisplayLineRangeAttributeSetList(context.getDisplayLineRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayLineRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeSetList> DisplayNameLayer::readDisplayAreaAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeSetList>(::nds::name::instantiations::NameDisplayAreaAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeSetList> DisplayNameLayer::readDisplayAreaAttributeSets(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeSetList>(::nds::name::instantiations::NameDisplayAreaAttributeSetList(context.getDisplayAreaAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayAreaAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeSetList> DisplayNameLayer::readDisplayPointAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeSetList>(::nds::name::instantiations::NameDisplayPointAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeSetList> DisplayNameLayer::readDisplayPointAttributeSets(DisplayNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::name::metadata::DisplayNameLayerContent::Values::DISPLAY_POINT_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeSetList>(::nds::name::instantiations::NameDisplayPointAttributeSetList(context.getDisplayPointAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameDisplayPointAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<DisplayNameLayer::ZserioArrayType_adminHierarchyElementDefinitions> DisplayNameLayer::readAdminHierarchyElementDefinitions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        ZserioArrayType_adminHierarchyElementDefinitions readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<DisplayNameLayer::ZserioArrayType_adminHierarchyElementDefinitions> DisplayNameLayer::readAdminHierarchyElementDefinitions(DisplayNameLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        ZserioArrayType_adminHierarchyElementDefinitions readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<DisplayNameLayer::ZserioArrayType_addressFormats> DisplayNameLayer::readAddressFormats(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT)
    {
        ZserioArrayType_addressFormats readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<DisplayNameLayer::ZserioArrayType_addressFormats> DisplayNameLayer::readAddressFormats(DisplayNameLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::DisplayNameLayerContent::Values::ADDRESS_FORMAT)
    {
        ZserioArrayType_addressFormats readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::zserio::NullOpt);
}

} // namespace layer
} // namespace name
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/name/layer/PoiNameLayer.h>
#include <nds/name/metadata/PoiNameLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace name
{
namespace layer
{

PoiNameLayer::PoiNameLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::name::metadata::PoiNameLayerContent()),
        m_poiAttributeMaps_(::zserio::NullOpt),
        m_poiAttributeSets_(::zserio::NullOpt),
        m_addressFormats_(::zserio::NullOpt),
        m_adminHierarchyElementDefinitions_(::zserio::NullOpt)
{
}

PoiNameLayer::PoiNameLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_poiAttributeMaps_(readPoiAttributeMaps(in, allocator)),
        m_poiAttributeSets_(readPoiAttributeSets(in, allocator)),
        m_addressFormats_(readAddressFormats(in, allocator)),
        m_adminHierarchyElementDefinitions_(readAdminHierarchyElementDefinitions(in, allocator))
{
}

PoiNameLayer::PoiNameLayer(PoiNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_poiAttributeMaps_(readPoiAttributeMaps(context, in, allocator)),
        m_poiAttributeSets_(readPoiAttributeSets(context, in, allocator)),
        m_addressFormats_(readAddressFormats(context, in, allocator)),
        m_adminHierarchyElementDefinitions_(readAdminHierarchyElementDefinitions(context, in, allocator))
{
}

PoiNameLayer::PoiNameLayer(const PoiNameLayer& other) :
        m_content_(other.m_content_),
        m_poiAttributeMaps_(other.m_poiAttributeMaps_),
        m_poiAttributeSets_(other.m_poiAttributeSets_),
        m_addressFormats_(other.m_addressFormats_),
        m_adminHierarchyElementDefinitions_(other.m_adminHierarchyElementDefinitions_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

PoiNameLayer& PoiNameLayer::operator=(const PoiNameLayer& other)
{
    m_content_ = other.m_content_;
    m_poiAttributeMaps_ = other.m_poiAttributeMaps_;
    m_poiAttributeSets_ = other.m_poiAttributeSets_;
    m_addressFormats_ = other.m_addressFormats_;
    m_adminHierarchyElementDefinitions_ = other.m_adminHierarchyElementDefinitions_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

PoiNameLayer::PoiNameLayer(PoiNameLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_poiAttributeMaps_(::std::move(other.m_poiAttributeMaps_)),
        m_poiAttributeSets_(::std::move(other.m_poiAttributeSets_)),
        m_addressFormats_(::std::move(other.m_addressFormats_)),
        m_adminHierarchyElementDefinitions_(::std::move(other.m_adminHierarchyElementDefinitions_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

PoiNameLayer& PoiNameLayer::operator=(PoiNameLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_poiAttributeMaps_ = ::std::move(other.m_poiAttributeMaps_);
    m_poiAttributeSets_ = ::std::move(other.m_poiAttributeSets_);
    m_addressFormats_ = ::std::move(other.m_addressFormats_);
    m_adminHierarchyElementDefinitions_ = ::std::move(other.m_adminHierarchyElementDefinitions_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

PoiNameLayer::PoiNameLayer(::zserio::PropagateAllocatorT,
        const PoiNameLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_poiAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_poiAttributeMaps_, allocator)),
        m_poiAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_poiAttributeSets_, allocator)),
        m_addressFormats_(::zserio::allocatorPropagatingCopy(other.m_addressFormats_, allocator)),
        m_adminHierarchyElementDefinitions_(::zserio::allocatorPropagatingCopy(other.m_adminHierarchyElementDefinitions_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void PoiNameLayer::initializeChildren()
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
        m_poiAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
        m_poiAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::name::metadata::PoiNameLayerContent PoiNameLayer::getContent() const
{
    return m_content_;
}

void PoiNameLayer::setContent(::nds::name::metadata::PoiNameLayerContent content_)
{
    m_content_ = content_;
}

::nds::name::instantiations::NamePoiAttributeMapList& PoiNameLayer::getPoiAttributeMaps()
{
    return m_poiAttributeMaps_.value();
}

const ::nds::name::instantiations::NamePoiAttributeMapList& PoiNameLayer::getPoiAttributeMaps() const
{
    return m_poiAttributeMaps_.value();
}

void PoiNameLayer::setPoiAttributeMaps(const ::nds::name::instantiations::NamePoiAttributeMapList& poiAttributeMaps_)
{
    m_poiAttributeMaps_ = poiAttributeMaps_;
}

void PoiNameLayer::setPoiAttributeMaps(::nds::name::instantiations::NamePoiAttributeMapList&& poiAttributeMaps_)
{
    m_poiAttributeMaps_ = ::std::move(poiAttributeMaps_);
}

bool PoiNameLayer::isPoiAttributeMapsUsed() const
{
    return ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS);
}

bool PoiNameLayer::isPoiAttributeMapsSet() const
{
    return m_poiAttributeMaps_.hasValue();
}

void PoiNameLayer::resetPoiAttributeMaps()
{
    m_poiAttributeMaps_.reset();
}

::nds::name::instantiations::NamePoiAttributeSetList& PoiNameLayer::getPoiAttributeSets()
{
    return m_poiAttributeSets_.value();
}

const ::nds::name::instantiations::NamePoiAttributeSetList& PoiNameLayer::getPoiAttributeSets() const
{
    return m_poiAttributeSets_.value();
}

void PoiNameLayer::setPoiAttributeSets(const ::nds::name::instantiations::NamePoiAttributeSetList& poiAttributeSets_)
{
    m_poiAttributeSets_ = poiAttributeSets_;
}

void PoiNameLayer::setPoiAttributeSets(::nds::name::instantiations::NamePoiAttributeSetList&& poiAttributeSets_)
{
    m_poiAttributeSets_ = ::std::move(poiAttributeSets_);
}

bool PoiNameLayer::isPoiAttributeSetsUsed() const
{
    return ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS);
}

bool PoiNameLayer::isPoiAttributeSetsSet() const
{
    return m_poiAttributeSets_.hasValue();
}

void PoiNameLayer::resetPoiAttributeSets()
{
    m_poiAttributeSets_.reset();
}

::zserio::vector<::nds::name::types::AddressFormat>& PoiNameLayer::getAddressFormats()
{
    return m_addressFormats_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AddressFormat>& PoiNameLayer::getAddressFormats() const
{
    return m_addressFormats_.value().getRawArray();
}

void PoiNameLayer::setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(addressFormats_);
}

void PoiNameLayer::setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_)
{
    m_addressFormats_ = ZserioArrayType_addressFormats(std::move(addressFormats_));
}

bool PoiNameLayer::isAddressFormatsUsed() const
{
    return ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT);
}

bool PoiNameLayer::isAddressFormatsSet() const
{
    return m_addressFormats_.hasValue();
}

void PoiNameLayer::resetAddressFormats()
{
    m_addressFormats_.reset();
}

::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& PoiNameLayer::getAdminHierarchyElementDefinitions()
{
    return m_adminHierarchyElementDefinitions_.value().getRawArray();
}

const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& PoiNameLayer::getAdminHierarchyElementDefinitions() const
{
    return m_adminHierarchyElementDefinitions_.value().getRawArray();
}

void PoiNameLayer::setAdminHierarchyElementDefinitions(const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& adminHierarchyElementDefinitions_)
{
    m_adminHierarchyElementDefinitions_ = ZserioArrayType_adminHierarchyElementDefinitions(adminHierarchyElementDefinitions_);
}

void PoiNameLayer::setAdminHierarchyElementDefinitions(::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>&& adminHierarchyElementDefinitions_)
{
    m_adminHierarchyElementDefinitions_ = ZserioArrayType_adminHierarchyElementDefinitions(std::move(adminHierarchyElementDefinitions_));
}

bool PoiNameLayer::isAdminHierarchyElementDefinitionsUsed() const
{
    return ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY);
}

bool PoiNameLayer::isAdminHierarchyElementDefinitionsSet() const
{
    return m_adminHierarchyElementDefinitions_.hasValue();
}

void PoiNameLayer::resetAdminHierarchyElementDefinitions()
{
    m_adminHierarchyElementDefinitions_.reset();
}

::nds::system::types::LayerType PoiNameLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void PoiNameLayer::initPackingContext(PoiNameLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        m_poiAttributeMaps_.value().initPackingContext(context.getPoiAttributeMaps());
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        m_poiAttributeSets_.value().initPackingContext(context.getPoiAttributeSets());
    }
}

size_t PoiNameLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        endBitPosition += m_poiAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        endBitPosition += m_poiAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition += m_addressFormats_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition += m_adminHierarchyElementDefinitions_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiNameLayer::bitSizeOf(PoiNameLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        endBitPosition += m_poiAttributeMaps_.value().bitSizeOf(context.getPoiAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        endBitPosition += m_poiAttributeSets_.value().bitSizeOf(context.getPoiAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition += m_addressFormats_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition += m_adminHierarchyElementDefinitions_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiNameLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        endBitPosition = m_poiAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        endBitPosition = m_poiAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition = m_addressFormats_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition = m_adminHierarchyElementDefinitions_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t PoiNameLayer::initializeOffsets(PoiNameLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        endBitPosition = m_poiAttributeMaps_.value().initializeOffsets(context.getPoiAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        endBitPosition = m_poiAttributeSets_.value().initializeOffsets(context.getPoiAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT)
    {
        endBitPosition = m_addressFormats_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        endBitPosition = m_adminHierarchyElementDefinitions_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool PoiNameLayer::operator==(const PoiNameLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isPoiAttributeMapsUsed() ? !other.isPoiAttributeMapsUsed() : (m_poiAttributeMaps_ == other.m_poiAttributeMaps_)) &&
                (!isPoiAttributeSetsUsed() ? !other.isPoiAttributeSetsUsed() : (m_poiAttributeSets_ == other.m_poiAttributeSets_)) &&
                (!isAddressFormatsUsed() ? !other.isAddressFormatsUsed() : (m_addressFormats_ == other.m_addressFormats_)) &&
                (!isAdminHierarchyElementDefinitionsUsed() ? !other.isAdminHierarchyElementDefinitionsUsed() : (m_adminHierarchyElementDefinitions_ == other.m_adminHierarchyElementDefinitions_));
    }

    return true;
}

uint32_t PoiNameLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isPoiAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_poiAttributeMaps_);
    if (isPoiAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_poiAttributeSets_);
    if (isAddressFormatsUsed())
        result = ::zserio::calcHashCode(result, m_addressFormats_);
    if (isAdminHierarchyElementDefinitionsUsed())
        result = ::zserio::calcHashCode(result, m_adminHierarchyElementDefinitions_);

    return result;
}

void PoiNameLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        // check parameters
        if (m_poiAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field PoiNameLayer.poiAttributeMaps: ") <<
                    m_poiAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_poiAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        // check parameters
        if (m_poiAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field PoiNameLayer.poiAttributeSets: ") <<
                    m_poiAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_poiAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT)
    {
        m_addressFormats_.value().write(*this, out);
    }

    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        m_adminHierarchyElementDefinitions_.value().write(*this, out);
    }
}

void PoiNameLayer::write(PoiNameLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        // check parameters
        if (m_poiAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field PoiNameLayer.poiAttributeMaps: ") <<
                    m_poiAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_poiAttributeMaps_.value().write(context.getPoiAttributeMaps(), out);
    }

    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        // check parameters
        if (m_poiAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field PoiNameLayer.poiAttributeSets: ") <<
                    m_poiAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_poiAttributeSets_.value().write(context.getPoiAttributeSets(), out);
    }

    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT)
    {
        m_addressFormats_.value().writePacked(*this, out);
    }

    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        m_adminHierarchyElementDefinitions_.value().writePacked(*this, out);
    }
}

void PoiNameLayer::ZserioElementFactory_addressFormats::create(PoiNameLayer&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PoiNameLayer::ZserioElementFactory_addressFormats::create(PoiNameLayer&        ,
        ::zserio::vector<::nds::name::types::AddressFormat>& array,
        ::nds::name::types::AddressFormat::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void PoiNameLayer::ZserioElementFactory_adminHierarchyElementDefinitions::create(PoiNameLayer&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PoiNameLayer::ZserioElementFactory_adminHierarchyElementDefinitions::create(PoiNameLayer&        ,
        ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
        ::nds::name::types::AdministrativeHierarchyElement::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::name::metadata::PoiNameLayerContent PoiNameLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::PoiNameLayerContent(in);
}

::nds::name::metadata::PoiNameLayerContent PoiNameLayer::readContent(PoiNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::name::metadata::PoiNameLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList> PoiNameLayer::readPoiAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList>(::nds::name::instantiations::NamePoiAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList> PoiNameLayer::readPoiAttributeMaps(PoiNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList>(::nds::name::instantiations::NamePoiAttributeMapList(context.getPoiAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList> PoiNameLayer::readPoiAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList>(::nds::name::instantiations::NamePoiAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList> PoiNameLayer::readPoiAttributeSets(PoiNameLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS) == ::nds::name::metadata::PoiNameLayerContent::Values::POI_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList>(::nds::name::instantiations::NamePoiAttributeSetList(context.getPoiAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NamePoiAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<PoiNameLayer::ZserioArrayType_addressFormats> PoiNameLayer::readAddressFormats(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT)
    {
        ZserioArrayType_addressFormats readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiNameLayer::ZserioArrayType_addressFormats> PoiNameLayer::readAddressFormats(PoiNameLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT) == ::nds::name::metadata::PoiNameLayerContent::Values::ADDRESS_FORMAT)
    {
        ZserioArrayType_addressFormats readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<PoiNameLayer::ZserioArrayType_adminHierarchyElementDefinitions> PoiNameLayer::readAdminHierarchyElementDefinitions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        ZserioArrayType_adminHierarchyElementDefinitions readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiNameLayer::ZserioArrayType_adminHierarchyElementDefinitions> PoiNameLayer::readAdminHierarchyElementDefinitions(PoiNameLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY) == ::nds::name::metadata::PoiNameLayerContent::Values::ADMIN_HIERARCHY)
    {
        ZserioArrayType_adminHierarchyElementDefinitions readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions>(::zserio::NullOpt);
}

} // namespace layer
} // namespace name
} // namespace nds
