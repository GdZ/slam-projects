/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_LAYER_LANE_NAME_LAYER_H
#define NDS_NAME_LAYER_LANE_NAME_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/name/instantiations/NameLanePositionAttributeMapList.h>
#include <nds/name/instantiations/NameLanePositionAttributeSetList.h>
#include <nds/name/instantiations/NameLaneRangeAttributeMapList.h>
#include <nds/name/instantiations/NameLaneRangeAttributeSetList.h>
#include <nds/name/metadata/LaneNameLayerContent.h>
#include <nds/name/types/AddressFormat.h>
#include <nds/name/types/AdministrativeHierarchyElement.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace name
{
namespace layer
{

class LaneNameLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::name::instantiations::NameLaneRangeAttributeMapList::ZserioPackingContext& getLaneRangeAttributeMaps()
        {
            return m_laneRangeAttributeMaps_;
        }

        ::nds::name::instantiations::NameLanePositionAttributeMapList::ZserioPackingContext& getLanePositionAttributeMaps()
        {
            return m_lanePositionAttributeMaps_;
        }

        ::nds::name::instantiations::NameLaneRangeAttributeSetList::ZserioPackingContext& getLaneRangeAttributeSets()
        {
            return m_laneRangeAttributeSets_;
        }

        ::nds::name::instantiations::NameLanePositionAttributeSetList::ZserioPackingContext& getLanePositionAttributeSets()
        {
            return m_lanePositionAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::name::instantiations::NameLaneRangeAttributeMapList::ZserioPackingContext m_laneRangeAttributeMaps_;
        ::nds::name::instantiations::NameLanePositionAttributeMapList::ZserioPackingContext m_lanePositionAttributeMaps_;
        ::nds::name::instantiations::NameLaneRangeAttributeSetList::ZserioPackingContext m_laneRangeAttributeSets_;
        ::nds::name::instantiations::NameLanePositionAttributeSetList::ZserioPackingContext m_lanePositionAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneNameLayer() noexcept :
            LaneNameLayer(allocator_type())
    {}

    explicit LaneNameLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneRangeAttributeMaps = ::nds::name::instantiations::NameLaneRangeAttributeMapList,
            typename ZSERIO_T_lanePositionAttributeMaps = ::nds::name::instantiations::NameLanePositionAttributeMapList,
            typename ZSERIO_T_laneRangeAttributeSets = ::nds::name::instantiations::NameLaneRangeAttributeSetList,
            typename ZSERIO_T_lanePositionAttributeSets = ::nds::name::instantiations::NameLanePositionAttributeSetList,
            typename ZSERIO_T_adminHierarchyElementDefinitions = ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>,
            typename ZSERIO_T_addressFormats = ::zserio::vector<::nds::name::types::AddressFormat>>
    LaneNameLayer(
            ::nds::name::metadata::LaneNameLayerContent content_,
            ZSERIO_T_laneRangeAttributeMaps&& laneRangeAttributeMaps_,
            ZSERIO_T_lanePositionAttributeMaps&& lanePositionAttributeMaps_,
            ZSERIO_T_laneRangeAttributeSets&& laneRangeAttributeSets_,
            ZSERIO_T_lanePositionAttributeSets&& lanePositionAttributeSets_,
            ZSERIO_T_adminHierarchyElementDefinitions&& adminHierarchyElementDefinitions_,
            ZSERIO_T_addressFormats&& addressFormats_,
            const allocator_type& allocator = allocator_type()) :
            LaneNameLayer(allocator)
    {
        m_content_ = content_;
        m_laneRangeAttributeMaps_ = ::std::forward<ZSERIO_T_laneRangeAttributeMaps>(laneRangeAttributeMaps_);
        m_lanePositionAttributeMaps_ = ::std::forward<ZSERIO_T_lanePositionAttributeMaps>(lanePositionAttributeMaps_);
        m_laneRangeAttributeSets_ = ::std::forward<ZSERIO_T_laneRangeAttributeSets>(laneRangeAttributeSets_);
        m_lanePositionAttributeSets_ = ::std::forward<ZSERIO_T_lanePositionAttributeSets>(lanePositionAttributeSets_);
        m_adminHierarchyElementDefinitions_ = ::zserio::createOptionalArray<ZserioArrayType_adminHierarchyElementDefinitions>(::std::forward<ZSERIO_T_adminHierarchyElementDefinitions>(adminHierarchyElementDefinitions_));
        m_addressFormats_ = ::zserio::createOptionalArray<ZserioArrayType_addressFormats>(::std::forward<ZSERIO_T_addressFormats>(addressFormats_));
    }

    explicit LaneNameLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneNameLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneNameLayer() = default;

    LaneNameLayer(const LaneNameLayer& other);
    LaneNameLayer& operator=(const LaneNameLayer& other);

    LaneNameLayer(LaneNameLayer&& other);
    LaneNameLayer& operator=(LaneNameLayer&& other);

    LaneNameLayer(::zserio::PropagateAllocatorT,
            const LaneNameLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::name::metadata::LaneNameLayerContent getContent() const;
    void setContent(::nds::name::metadata::LaneNameLayerContent content_);

    const ::nds::name::instantiations::NameLaneRangeAttributeMapList& getLaneRangeAttributeMaps() const;
    ::nds::name::instantiations::NameLaneRangeAttributeMapList& getLaneRangeAttributeMaps();
    void setLaneRangeAttributeMaps(const ::nds::name::instantiations::NameLaneRangeAttributeMapList& laneRangeAttributeMaps_);
    void setLaneRangeAttributeMaps(::nds::name::instantiations::NameLaneRangeAttributeMapList&& laneRangeAttributeMaps_);
    bool isLaneRangeAttributeMapsUsed() const;
    bool isLaneRangeAttributeMapsSet() const;
    void resetLaneRangeAttributeMaps();

    const ::nds::name::instantiations::NameLanePositionAttributeMapList& getLanePositionAttributeMaps() const;
    ::nds::name::instantiations::NameLanePositionAttributeMapList& getLanePositionAttributeMaps();
    void setLanePositionAttributeMaps(const ::nds::name::instantiations::NameLanePositionAttributeMapList& lanePositionAttributeMaps_);
    void setLanePositionAttributeMaps(::nds::name::instantiations::NameLanePositionAttributeMapList&& lanePositionAttributeMaps_);
    bool isLanePositionAttributeMapsUsed() const;
    bool isLanePositionAttributeMapsSet() const;
    void resetLanePositionAttributeMaps();

    const ::nds::name::instantiations::NameLaneRangeAttributeSetList& getLaneRangeAttributeSets() const;
    ::nds::name::instantiations::NameLaneRangeAttributeSetList& getLaneRangeAttributeSets();
    void setLaneRangeAttributeSets(const ::nds::name::instantiations::NameLaneRangeAttributeSetList& laneRangeAttributeSets_);
    void setLaneRangeAttributeSets(::nds::name::instantiations::NameLaneRangeAttributeSetList&& laneRangeAttributeSets_);
    bool isLaneRangeAttributeSetsUsed() const;
    bool isLaneRangeAttributeSetsSet() const;
    void resetLaneRangeAttributeSets();

    const ::nds::name::instantiations::NameLanePositionAttributeSetList& getLanePositionAttributeSets() const;
    ::nds::name::instantiations::NameLanePositionAttributeSetList& getLanePositionAttributeSets();
    void setLanePositionAttributeSets(const ::nds::name::instantiations::NameLanePositionAttributeSetList& lanePositionAttributeSets_);
    void setLanePositionAttributeSets(::nds::name::instantiations::NameLanePositionAttributeSetList&& lanePositionAttributeSets_);
    bool isLanePositionAttributeSetsUsed() const;
    bool isLanePositionAttributeSetsSet() const;
    void resetLanePositionAttributeSets();

    const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& getAdminHierarchyElementDefinitions() const;
    ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& getAdminHierarchyElementDefinitions();
    void setAdminHierarchyElementDefinitions(const ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& adminHierarchyElementDefinitions_);
    void setAdminHierarchyElementDefinitions(::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>&& adminHierarchyElementDefinitions_);
    bool isAdminHierarchyElementDefinitionsUsed() const;
    bool isAdminHierarchyElementDefinitionsSet() const;
    void resetAdminHierarchyElementDefinitions();

    const ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats() const;
    ::zserio::vector<::nds::name::types::AddressFormat>& getAddressFormats();
    void setAddressFormats(const ::zserio::vector<::nds::name::types::AddressFormat>& addressFormats_);
    void setAddressFormats(::zserio::vector<::nds::name::types::AddressFormat>&& addressFormats_);
    bool isAddressFormatsUsed() const;
    bool isAddressFormatsSet() const;
    void resetAddressFormats();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneNameLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_adminHierarchyElementDefinitions
    {
    public:
        using OwnerType = LaneNameLayer;

        static void create(LaneNameLayer& owner,
                ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneNameLayer& owner,
                ::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>& array,
                ::nds::name::types::AdministrativeHierarchyElement::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_addressFormats
    {
    public:
        using OwnerType = LaneNameLayer;

        static void create(LaneNameLayer& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneNameLayer& owner,
                ::zserio::vector<::nds::name::types::AddressFormat>& array,
                ::nds::name::types::AddressFormat::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_adminHierarchyElementDefinitions = ::zserio::Array<::zserio::vector<::nds::name::types::AdministrativeHierarchyElement>, ::zserio::ObjectArrayTraits<::nds::name::types::AdministrativeHierarchyElement, ZserioElementFactory_adminHierarchyElementDefinitions>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_addressFormats = ::zserio::Array<::zserio::vector<::nds::name::types::AddressFormat>, ::zserio::ObjectArrayTraits<::nds::name::types::AddressFormat, ZserioElementFactory_addressFormats>, ::zserio::ArrayType::AUTO>;

    ::nds::name::metadata::LaneNameLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::name::metadata::LaneNameLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList> readLaneRangeAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList> readLaneRangeAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList> readLanePositionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList> readLanePositionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList> readLaneRangeAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList> readLaneRangeAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList> readLanePositionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList> readLanePositionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> readAdminHierarchyElementDefinitions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> readAdminHierarchyElementDefinitions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> readAddressFormats(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> readAddressFormats(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::name::metadata::LaneNameLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeMapList> m_laneRangeAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeMapList> m_lanePositionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLaneRangeAttributeSetList> m_laneRangeAttributeSets_;
    ::zserio::InplaceOptionalHolder<::nds::name::instantiations::NameLanePositionAttributeSetList> m_lanePositionAttributeSets_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_adminHierarchyElementDefinitions> m_adminHierarchyElementDefinitions_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_addressFormats> m_addressFormats_;
};

} // namespace layer
} // namespace name
} // namespace nds

#endif // NDS_NAME_LAYER_LANE_NAME_LAYER_H
