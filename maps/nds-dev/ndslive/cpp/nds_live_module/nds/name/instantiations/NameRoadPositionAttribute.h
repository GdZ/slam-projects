/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_INSTANTIATIONS_NAME_ROAD_POSITION_ATTRIBUTE_H
#define NDS_NAME_INSTANTIATIONS_NAME_ROAD_POSITION_ATTRIBUTE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/name/attributes/NameRoadPositionAttributeType.h>
#include <nds/name/attributes/NameRoadPositionAttributeValue.h>

namespace nds
{
namespace name
{
namespace instantiations
{

class NameRoadPositionAttribute
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    NameRoadPositionAttribute() noexcept :
            NameRoadPositionAttribute(allocator_type())
    {}

    explicit NameRoadPositionAttribute(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_attributeValue = ::nds::name::attributes::NameRoadPositionAttributeValue,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_attributeValue, NameRoadPositionAttribute, allocator_type> = 0>
    explicit NameRoadPositionAttribute(
            ZSERIO_T_attributeValue&& attributeValue_,
            const allocator_type& allocator = allocator_type()) :
            NameRoadPositionAttribute(allocator)
    {
        m_attributeValue_ = ::std::forward<ZSERIO_T_attributeValue>(attributeValue_);
    }

    explicit NameRoadPositionAttribute(::zserio::BitStreamReader& in,
            ::nds::name::attributes::NameRoadPositionAttributeType attributeTypeCode_, const allocator_type& allocator = allocator_type());

    ~NameRoadPositionAttribute() = default;

    NameRoadPositionAttribute(const NameRoadPositionAttribute& other);
    NameRoadPositionAttribute& operator=(const NameRoadPositionAttribute& other);

    NameRoadPositionAttribute(NameRoadPositionAttribute&& other);
    NameRoadPositionAttribute& operator=(NameRoadPositionAttribute&& other);

    NameRoadPositionAttribute(::zserio::PropagateAllocatorT,
            const NameRoadPositionAttribute& other, const allocator_type& allocator);

    void initialize(
            ::nds::name::attributes::NameRoadPositionAttributeType attributeTypeCode_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::name::attributes::NameRoadPositionAttributeType getAttributeTypeCode() const;

    const ::nds::name::attributes::NameRoadPositionAttributeValue& getAttributeValue() const;
    ::nds::name::attributes::NameRoadPositionAttributeValue& getAttributeValue();
    void setAttributeValue(const ::nds::name::attributes::NameRoadPositionAttributeValue& attributeValue_);
    void setAttributeValue(::nds::name::attributes::NameRoadPositionAttributeValue&& attributeValue_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const NameRoadPositionAttribute& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    ::nds::name::attributes::NameRoadPositionAttributeValue readAttributeValue(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::name::attributes::NameRoadPositionAttributeType m_attributeTypeCode_;
    bool m_isInitialized;
    ::nds::name::attributes::NameRoadPositionAttributeValue m_attributeValue_;
};

} // namespace instantiations
} // namespace name
} // namespace nds

#endif // NDS_NAME_INSTANTIATIONS_NAME_ROAD_POSITION_ATTRIBUTE_H
