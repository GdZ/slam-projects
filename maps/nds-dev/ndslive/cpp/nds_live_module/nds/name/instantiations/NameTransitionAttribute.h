/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_INSTANTIATIONS_NAME_TRANSITION_ATTRIBUTE_H
#define NDS_NAME_INSTANTIATIONS_NAME_TRANSITION_ATTRIBUTE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/name/attributes/NameTransitionAttributeType.h>
#include <nds/name/attributes/NameTransitionAttributeValue.h>

namespace nds
{
namespace name
{
namespace instantiations
{

class NameTransitionAttribute
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    NameTransitionAttribute() noexcept :
            NameTransitionAttribute(allocator_type())
    {}

    explicit NameTransitionAttribute(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_attributeValue = ::nds::name::attributes::NameTransitionAttributeValue,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_attributeValue, NameTransitionAttribute, allocator_type> = 0>
    explicit NameTransitionAttribute(
            ZSERIO_T_attributeValue&& attributeValue_,
            const allocator_type& allocator = allocator_type()) :
            NameTransitionAttribute(allocator)
    {
        m_attributeValue_ = ::std::forward<ZSERIO_T_attributeValue>(attributeValue_);
    }

    explicit NameTransitionAttribute(::zserio::BitStreamReader& in,
            ::nds::name::attributes::NameTransitionAttributeType attributeTypeCode_, const allocator_type& allocator = allocator_type());

    ~NameTransitionAttribute() = default;

    NameTransitionAttribute(const NameTransitionAttribute& other);
    NameTransitionAttribute& operator=(const NameTransitionAttribute& other);

    NameTransitionAttribute(NameTransitionAttribute&& other);
    NameTransitionAttribute& operator=(NameTransitionAttribute&& other);

    NameTransitionAttribute(::zserio::PropagateAllocatorT,
            const NameTransitionAttribute& other, const allocator_type& allocator);

    void initialize(
            ::nds::name::attributes::NameTransitionAttributeType attributeTypeCode_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::name::attributes::NameTransitionAttributeType getAttributeTypeCode() const;

    const ::nds::name::attributes::NameTransitionAttributeValue& getAttributeValue() const;
    ::nds::name::attributes::NameTransitionAttributeValue& getAttributeValue();
    void setAttributeValue(const ::nds::name::attributes::NameTransitionAttributeValue& attributeValue_);
    void setAttributeValue(::nds::name::attributes::NameTransitionAttributeValue&& attributeValue_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const NameTransitionAttribute& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    ::nds::name::attributes::NameTransitionAttributeValue readAttributeValue(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::name::attributes::NameTransitionAttributeType m_attributeTypeCode_;
    bool m_isInitialized;
    ::nds::name::attributes::NameTransitionAttributeValue m_attributeValue_;
};

} // namespace instantiations
} // namespace name
} // namespace nds

#endif // NDS_NAME_INSTANTIATIONS_NAME_TRANSITION_ATTRIBUTE_H
