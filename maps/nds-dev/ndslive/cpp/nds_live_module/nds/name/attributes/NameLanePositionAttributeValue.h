/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_ATTRIBUTES_NAME_LANE_POSITION_ATTRIBUTE_VALUE_H
#define NDS_NAME_ATTRIBUTES_NAME_LANE_POSITION_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/name/attributes/NameLanePositionAttributeType.h>
#include <nds/name/types/HouseNumber.h>
#include <nds/name/types/TollStationName.h>

namespace nds
{
namespace name
{
namespace attributes
{

class NameLanePositionAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_houseNumber = 0,
        CHOICE_tollStationName = 1,
        UNDEFINED_CHOICE = -1
    };

    NameLanePositionAttributeValue() noexcept :
            NameLanePositionAttributeValue(allocator_type())
    {}

    explicit NameLanePositionAttributeValue(const allocator_type& allocator) noexcept;

    explicit NameLanePositionAttributeValue(::zserio::BitStreamReader& in,
            ::nds::name::attributes::NameLanePositionAttributeType type_, const allocator_type& allocator = allocator_type());

    ~NameLanePositionAttributeValue() = default;

    NameLanePositionAttributeValue(const NameLanePositionAttributeValue& other);
    NameLanePositionAttributeValue& operator=(const NameLanePositionAttributeValue& other);

    NameLanePositionAttributeValue(NameLanePositionAttributeValue&& other);
    NameLanePositionAttributeValue& operator=(NameLanePositionAttributeValue&& other);

    NameLanePositionAttributeValue(::zserio::PropagateAllocatorT,
            const NameLanePositionAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::name::attributes::NameLanePositionAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::name::attributes::NameLanePositionAttributeType getType() const;

    const ::nds::name::types::HouseNumber& getHouseNumber() const;
    ::nds::name::types::HouseNumber& getHouseNumber();
    void setHouseNumber(const ::nds::name::types::HouseNumber& houseNumber_);
    void setHouseNumber(::nds::name::types::HouseNumber&& houseNumber_);

    const ::nds::name::types::TollStationName& getTollStationName() const;
    ::nds::name::types::TollStationName& getTollStationName();
    void setTollStationName(const ::nds::name::types::TollStationName& tollStationName_);
    void setTollStationName(::nds::name::types::TollStationName&& tollStationName_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const NameLanePositionAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::name::attributes::NameLanePositionAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace name
} // namespace nds

#endif // NDS_NAME_ATTRIBUTES_NAME_LANE_POSITION_ATTRIBUTE_VALUE_H
