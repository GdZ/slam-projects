/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_NAME_ATTRIBUTES_NAME_DISPLAY_LINE_RANGE_ATTRIBUTE_TYPE_H
#define NDS_NAME_ATTRIBUTES_NAME_DISPLAY_LINE_RANGE_ATTRIBUTE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace name
{
namespace attributes
{

enum class NameDisplayLineRangeAttributeType : uint16_t
{
    ROAD_NAME = UINT16_C(0),
    BRIDGE_NAME = UINT16_C(1),
    TUNNEL_NAME = UINT16_C(2),
    ROUTE_NAME = UINT16_C(3),
    ROAD_NUMBER = UINT16_C(4),
    ADMINISTRATIVE_HIERARCHY = UINT16_C(5),
    LINE_LABEL_NAME = UINT16_C(6),
    WATER_NAME = UINT16_C(7),
    PUBLIC_TRANSPORT_NAME = UINT16_C(8),
    BORDER_NAME = UINT16_C(9),
    SERVICE_AREA_NAME = UINT16_C(10),
    INTERSECTION_NAME = UINT16_C(11)
};

} // namespace attributes
} // namespace name
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for NameDisplayLineRangeAttributeType enumeration.
template <>
struct EnumTraits<::nds::name::attributes::NameDisplayLineRangeAttributeType>
{
    static constexpr ::std::array<const char*, 12> names =
    {{
        "ROAD_NAME",
        "BRIDGE_NAME",
        "TUNNEL_NAME",
        "ROUTE_NAME",
        "ROAD_NUMBER",
        "ADMINISTRATIVE_HIERARCHY",
        "LINE_LABEL_NAME",
        "WATER_NAME",
        "PUBLIC_TRANSPORT_NAME",
        "BORDER_NAME",
        "SERVICE_AREA_NAME",
        "INTERSECTION_NAME"
    }};

    static constexpr ::std::array<::nds::name::attributes::NameDisplayLineRangeAttributeType, 12> values =
    {{
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::ROAD_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::BRIDGE_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::TUNNEL_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::ROUTE_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::ROAD_NUMBER,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::ADMINISTRATIVE_HIERARCHY,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::LINE_LABEL_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::WATER_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::PUBLIC_TRANSPORT_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::BORDER_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::SERVICE_AREA_NAME,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType::INTERSECTION_NAME
    }};

    static constexpr const char* enumName = "NameDisplayLineRangeAttributeType";
};

template <>
size_t enumToOrdinal<::nds::name::attributes::NameDisplayLineRangeAttributeType>(::nds::name::attributes::NameDisplayLineRangeAttributeType value);

template <>
::nds::name::attributes::NameDisplayLineRangeAttributeType valueToEnum<::nds::name::attributes::NameDisplayLineRangeAttributeType>(
        typename ::std::underlying_type<::nds::name::attributes::NameDisplayLineRangeAttributeType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::name::attributes::NameDisplayLineRangeAttributeType>(::nds::name::attributes::NameDisplayLineRangeAttributeType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::name::attributes::NameDisplayLineRangeAttributeType>(::zserio::DeltaContext& context, ::nds::name::attributes::NameDisplayLineRangeAttributeType value);

template <>
size_t bitSizeOf<::nds::name::attributes::NameDisplayLineRangeAttributeType>(::nds::name::attributes::NameDisplayLineRangeAttributeType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::name::attributes::NameDisplayLineRangeAttributeType>(::zserio::DeltaContext& context, ::nds::name::attributes::NameDisplayLineRangeAttributeType value);

template <>
size_t initializeOffsets<::nds::name::attributes::NameDisplayLineRangeAttributeType>(size_t bitPosition, ::nds::name::attributes::NameDisplayLineRangeAttributeType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::name::attributes::NameDisplayLineRangeAttributeType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType value);

template <>
::nds::name::attributes::NameDisplayLineRangeAttributeType read<::nds::name::attributes::NameDisplayLineRangeAttributeType>(::zserio::BitStreamReader& in);

template <>
::nds::name::attributes::NameDisplayLineRangeAttributeType read<::nds::name::attributes::NameDisplayLineRangeAttributeType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::name::attributes::NameDisplayLineRangeAttributeType>(::zserio::BitStreamWriter& out, ::nds::name::attributes::NameDisplayLineRangeAttributeType value);

template <>
void write<::zserio::DeltaContext, ::nds::name::attributes::NameDisplayLineRangeAttributeType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::name::attributes::NameDisplayLineRangeAttributeType value);

} // namespace zserio

#endif // NDS_NAME_ATTRIBUTES_NAME_DISPLAY_LINE_RANGE_ATTRIBUTE_TYPE_H
