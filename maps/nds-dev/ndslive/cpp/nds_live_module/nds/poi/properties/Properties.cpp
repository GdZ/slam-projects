/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/properties/PropertyType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PropertyType enumeration.
constexpr ::std::array<const char*, 2> EnumTraits<::nds::poi::properties::PropertyType>::names;
constexpr ::std::array<::nds::poi::properties::PropertyType, 2> EnumTraits<::nds::poi::properties::PropertyType>::values;
constexpr const char* EnumTraits<::nds::poi::properties::PropertyType>::enumName;

template <>
size_t enumToOrdinal(::nds::poi::properties::PropertyType value)
{
    switch (value)
    {
    case ::nds::poi::properties::PropertyType::CORE:
        return 0;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        return 1;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PropertyType: ") <<
                static_cast<typename ::std::underlying_type<::nds::poi::properties::PropertyType>::type>(value) << "!";
    }
}

template <>
::nds::poi::properties::PropertyType valueToEnum(
        typename ::std::underlying_type<::nds::poi::properties::PropertyType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
        return static_cast<::nds::poi::properties::PropertyType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PropertyType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::poi::properties::PropertyType>(::nds::poi::properties::PropertyType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::poi::properties::PropertyType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::poi::properties::PropertyType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::poi::properties::PropertyType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::poi::properties::PropertyType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::poi::properties::PropertyType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::poi::properties::PropertyType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::poi::properties::PropertyType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::poi::properties::PropertyType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::properties::PropertyType>(
            static_cast<typename ::std::underlying_type<::nds::poi::properties::PropertyType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::poi::properties::PropertyType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::properties::PropertyType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::poi::properties::PropertyType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::poi::properties::PropertyType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::poi::properties::PropertyType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::poi::properties::PropertyType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/poi/properties/PoiPropertyType.h>
#include <nds/poi/properties/PropertyType.h>

namespace nds
{
namespace poi
{
namespace properties
{

PoiPropertyType::PoiPropertyType(const allocator_type&) noexcept :
        m_type_(::nds::poi::properties::PropertyType()),
        m_coreType_(::zserio::NullOpt)
{
}

PoiPropertyType::PoiPropertyType(::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(in)),
        m_coreType_(readCoreType(in))
{
}

PoiPropertyType::PoiPropertyType(PoiPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(context, in)),
        m_coreType_(readCoreType(context, in))
{
}

PoiPropertyType::PoiPropertyType(::zserio::PropagateAllocatorT,
        const PoiPropertyType& other, const allocator_type& allocator) :
        m_type_(::zserio::allocatorPropagatingCopy(other.m_type_, allocator)),
        m_coreType_(::zserio::allocatorPropagatingCopy(other.m_coreType_, allocator))
{
}

::nds::poi::properties::PropertyType PoiPropertyType::getType() const
{
    return m_type_;
}

void PoiPropertyType::setType(::nds::poi::properties::PropertyType type_)
{
    m_type_ = type_;
}

::nds::core::properties::CorePropertyType PoiPropertyType::getCoreType() const
{
    return m_coreType_.value();
}

void PoiPropertyType::setCoreType(::nds::core::properties::CorePropertyType coreType_)
{
    m_coreType_ = coreType_;
}

bool PoiPropertyType::isCoreTypeUsed() const
{
    return (getType() == ::nds::poi::properties::PropertyType::CORE);
}

bool PoiPropertyType::isCoreTypeSet() const
{
    return m_coreType_.hasValue();
}

void PoiPropertyType::resetCoreType()
{
    m_coreType_.reset();
}

void PoiPropertyType::initPackingContext(PoiPropertyType::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getType(), m_type_);
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        ::zserio::initPackingContext(context.getCoreType(), m_coreType_.value());
    }
}

size_t PoiPropertyType::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_type_);
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition += ::zserio::bitSizeOf(m_coreType_.value());
    }

    return endBitPosition - bitPosition;
}

size_t PoiPropertyType::bitSizeOf(PoiPropertyType::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getType(), m_type_);
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition += ::zserio::bitSizeOf(context.getCoreType(), m_coreType_.value());
    }

    return endBitPosition - bitPosition;
}

size_t PoiPropertyType::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_type_);
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_coreType_.value());
    }

    return endBitPosition;
}

size_t PoiPropertyType::initializeOffsets(PoiPropertyType::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getType(), endBitPosition,
        m_type_);
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition = ::zserio::initializeOffsets(context.getCoreType(), endBitPosition,
        m_coreType_.value());
    }

    return endBitPosition;
}

bool PoiPropertyType::operator==(const PoiPropertyType& other) const
{
    if (this != &other)
    {
        return
                (m_type_ == other.m_type_) &&
                (!isCoreTypeUsed() ? !other.isCoreTypeUsed() : (m_coreType_ == other.m_coreType_));
    }

    return true;
}

uint32_t PoiPropertyType::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_type_);
    if (isCoreTypeUsed())
        result = ::zserio::calcHashCode(result, m_coreType_);

    return result;
}

void PoiPropertyType::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_type_);
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        ::zserio::write(out, m_coreType_.value());
    }
}

void PoiPropertyType::write(PoiPropertyType::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getType(), out, m_type_);
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        ::zserio::write(context.getCoreType(), out, m_coreType_.value());
    }
}

::nds::poi::properties::PropertyType PoiPropertyType::readType(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::poi::properties::PropertyType>(in);
}

::nds::poi::properties::PropertyType PoiPropertyType::readType(PoiPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::poi::properties::PropertyType>(context.getType(), in);
}
::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> PoiPropertyType::readCoreType(::zserio::BitStreamReader& in)
{
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::read<::nds::core::properties::CorePropertyType>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> PoiPropertyType::readCoreType(PoiPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::read<::nds::core::properties::CorePropertyType>(context.getCoreType(), in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::NullOpt);
}

} // namespace properties
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/poi/properties/PoiPropertyValue.h>
#include <nds/poi/properties/PropertyType.h>

namespace nds
{
namespace poi
{
namespace properties
{

PoiPropertyValue::PoiPropertyValue(const allocator_type&) noexcept :
        m_isInitialized(false),
        m_value_(::zserio::NullOpt),
        m_coreValue_(::zserio::NullOpt)
{
}

PoiPropertyValue::PoiPropertyValue(::zserio::BitStreamReader& in,
        ::nds::poi::properties::PoiPropertyType& type_, const allocator_type& allocator) :
        m_type_(&type_),
        m_isInitialized(true),
        m_value_(readValue(in, allocator)),
        m_coreValue_(readCoreValue(in, allocator))
{
}

PoiPropertyValue::PoiPropertyValue(PoiPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::poi::properties::PoiPropertyType& type_, const allocator_type& allocator) :
        m_type_(&type_),
        m_isInitialized(true),
        m_value_(readValue(context, in, allocator)),
        m_coreValue_(readCoreValue(context, in, allocator))
{
}

PoiPropertyValue::PoiPropertyValue(const PoiPropertyValue& other) :
        m_value_(other.m_value_),
        m_coreValue_(other.m_coreValue_)
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

PoiPropertyValue& PoiPropertyValue::operator=(const PoiPropertyValue& other)
{
    m_value_ = other.m_value_;
    m_coreValue_ = other.m_coreValue_;
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;

    return *this;
}

PoiPropertyValue::PoiPropertyValue(PoiPropertyValue&& other) :
        m_value_(::std::move(other.m_value_)),
        m_coreValue_(::std::move(other.m_coreValue_))
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

PoiPropertyValue& PoiPropertyValue::operator=(PoiPropertyValue&& other)
{
    m_value_ = ::std::move(other.m_value_);
    m_coreValue_ = ::std::move(other.m_coreValue_);
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;

    return *this;
}

PoiPropertyValue::PoiPropertyValue(::zserio::PropagateAllocatorT,
        const PoiPropertyValue& other, const allocator_type& allocator) :
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator)),
        m_coreValue_(::zserio::allocatorPropagatingCopy(other.m_coreValue_, allocator))
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

void PoiPropertyValue::initialize(
        ::nds::poi::properties::PoiPropertyType& type_)
{
    m_type_ = &type_;
    m_isInitialized = true;

    initializeChildren();
}

bool PoiPropertyValue::isInitialized() const
{
    return m_isInitialized;
}

void PoiPropertyValue::initializeChildren()
{
    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
        m_value_.value().initialize(static_cast<::nds::poi::properties::PropertyType>(getType().getType()));
    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
        m_coreValue_.value().initialize(static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()));
}

::nds::poi::properties::PoiPropertyType& PoiPropertyValue::getType()
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PoiPropertyValue' is not initialized!");

    return *m_type_;
}

const ::nds::poi::properties::PoiPropertyType& PoiPropertyValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PoiPropertyValue' is not initialized!");

    return *m_type_;
}

::nds::poi::properties::PropertyValue& PoiPropertyValue::getValue()
{
    return m_value_.value();
}

const ::nds::poi::properties::PropertyValue& PoiPropertyValue::getValue() const
{
    return m_value_.value();
}

void PoiPropertyValue::setValue(const ::nds::poi::properties::PropertyValue& value_)
{
    m_value_ = value_;
}

void PoiPropertyValue::setValue(::nds::poi::properties::PropertyValue&& value_)
{
    m_value_ = ::std::move(value_);
}

bool PoiPropertyValue::isValueUsed() const
{
    return (getType().getType() != ::nds::poi::properties::PropertyType::CORE);
}

bool PoiPropertyValue::isValueSet() const
{
    return m_value_.hasValue();
}

void PoiPropertyValue::resetValue()
{
    m_value_.reset();
}

::nds::core::properties::CorePropertyValue& PoiPropertyValue::getCoreValue()
{
    return m_coreValue_.value();
}

const ::nds::core::properties::CorePropertyValue& PoiPropertyValue::getCoreValue() const
{
    return m_coreValue_.value();
}

void PoiPropertyValue::setCoreValue(const ::nds::core::properties::CorePropertyValue& coreValue_)
{
    m_coreValue_ = coreValue_;
}

void PoiPropertyValue::setCoreValue(::nds::core::properties::CorePropertyValue&& coreValue_)
{
    m_coreValue_ = ::std::move(coreValue_);
}

bool PoiPropertyValue::isCoreValueUsed() const
{
    return (getType().getType() == ::nds::poi::properties::PropertyType::CORE);
}

bool PoiPropertyValue::isCoreValueSet() const
{
    return m_coreValue_.hasValue();
}

void PoiPropertyValue::resetCoreValue()
{
    m_coreValue_.reset();
}

void PoiPropertyValue::initPackingContext(PoiPropertyValue::ZserioPackingContext& context) const
{
    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        m_value_.value().initPackingContext(context.getValue());
    }
    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        m_coreValue_.value().initPackingContext(context.getCoreValue());
    }
}

size_t PoiPropertyValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition += m_value_.value().bitSizeOf(endBitPosition);
    }
    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition += m_coreValue_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiPropertyValue::bitSizeOf(PoiPropertyValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition += m_value_.value().bitSizeOf(context.getValue(), endBitPosition);
    }
    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition += m_coreValue_.value().bitSizeOf(context.getCoreValue(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiPropertyValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition = m_value_.value().initializeOffsets(endBitPosition);
    }
    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition = m_coreValue_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t PoiPropertyValue::initializeOffsets(PoiPropertyValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition = m_value_.value().initializeOffsets(context.getValue(), endBitPosition);
    }
    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        endBitPosition = m_coreValue_.value().initializeOffsets(context.getCoreValue(), endBitPosition);
    }

    return endBitPosition;
}

bool PoiPropertyValue::operator==(const PoiPropertyValue& other) const
{
    if (this != &other)
    {
        return
                (getType() == other.getType()) &&
                (!isValueUsed() ? !other.isValueUsed() : (m_value_ == other.m_value_)) &&
                (!isCoreValueUsed() ? !other.isCoreValueUsed() : (m_coreValue_ == other.m_coreValue_));
    }

    return true;
}

uint32_t PoiPropertyValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (isValueUsed())
        result = ::zserio::calcHashCode(result, m_value_);
    if (isCoreValueUsed())
        result = ::zserio::calcHashCode(result, m_coreValue_);

    return result;
}

void PoiPropertyValue::write(::zserio::BitStreamWriter& out) const
{
    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_value_.value().getType() != static_cast<::nds::poi::properties::PropertyType>(getType().getType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field PoiPropertyValue.value: ") <<
                    m_value_.value().getType() << " != " << static_cast<::nds::poi::properties::PropertyType>(getType().getType()) << "!";
        }
        m_value_.value().write(out);
    }

    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_coreValue_.value().getType() != static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field PoiPropertyValue.coreValue: ") <<
                    m_coreValue_.value().getType() << " != " << static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()) << "!";
        }
        m_coreValue_.value().write(out);
    }
}

void PoiPropertyValue::write(PoiPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_value_.value().getType() != static_cast<::nds::poi::properties::PropertyType>(getType().getType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field PoiPropertyValue.value: ") <<
                    m_value_.value().getType() << " != " << static_cast<::nds::poi::properties::PropertyType>(getType().getType()) << "!";
        }
        m_value_.value().write(context.getValue(), out);
    }

    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_coreValue_.value().getType() != static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field PoiPropertyValue.coreValue: ") <<
                    m_coreValue_.value().getType() << " != " << static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()) << "!";
        }
        m_coreValue_.value().write(context.getCoreValue(), out);
    }
}

::zserio::InplaceOptionalHolder<::nds::poi::properties::PropertyValue> PoiPropertyValue::readValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::properties::PropertyValue>(::nds::poi::properties::PropertyValue(in, static_cast<::nds::poi::properties::PropertyType>(getType().getType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::properties::PropertyValue>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::poi::properties::PropertyValue> PoiPropertyValue::readValue(PoiPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getType().getType() != ::nds::poi::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::properties::PropertyValue>(::nds::poi::properties::PropertyValue(context.getValue(), in, static_cast<::nds::poi::properties::PropertyType>(getType().getType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::properties::PropertyValue>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> PoiPropertyValue::readCoreValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::nds::core::properties::CorePropertyValue(in, static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> PoiPropertyValue::readCoreValue(PoiPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getType().getType() == ::nds::poi::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::nds::core::properties::CorePropertyValue(context.getCoreValue(), in, static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::zserio::NullOpt);
}

} // namespace properties
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/properties/PropertyValue.h>

namespace nds
{
namespace poi
{
namespace properties
{

PropertyValue::PropertyValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

PropertyValue::PropertyValue(::zserio::BitStreamReader& in,
        ::nds::poi::properties::PropertyType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

PropertyValue::PropertyValue(PropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::poi::properties::PropertyType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

PropertyValue::PropertyValue(const PropertyValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PropertyValue& PropertyValue::operator=(const PropertyValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PropertyValue::PropertyValue(PropertyValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PropertyValue& PropertyValue::operator=(PropertyValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PropertyValue::PropertyValue(::zserio::PropagateAllocatorT,
        const PropertyValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void PropertyValue::initialize(
        ::nds::poi::properties::PropertyType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool PropertyValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::poi::properties::PropertyType PropertyValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PropertyValue' is not initialized!");

    return m_type_;
}

::nds::core::types::LanguageCode PropertyValue::getLanguageCode() const
{
    return m_objectChoice.get<::nds::core::types::LanguageCode>();
}

void PropertyValue::setLanguageCode(::nds::core::types::LanguageCode languageCode_)
{
    m_objectChoice = languageCode_;
}

PropertyValue::ChoiceTag PropertyValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        return UNDEFINED_CHOICE;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        return CHOICE_languageCode;
    default:
        return UNDEFINED_CHOICE;
    }
}

void PropertyValue::initPackingContext(PropertyValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        context.getLanguageCode().init<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

size_t PropertyValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PropertyValue::bitSizeOf(PropertyValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += context.getLanguageCode().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PropertyValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition;
}

size_t PropertyValue::initializeOffsets(PropertyValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        endBitPosition += context.getLanguageCode().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition;
}

bool PropertyValue::operator==(const PropertyValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        return true; // empty
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::LanguageCode>() == other.m_objectChoice.get<::nds::core::types::LanguageCode>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

uint32_t PropertyValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::poi::properties::PropertyType::CORE:
            // empty
            break;
        case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::LanguageCode>());
            break;
        default:
            break;
        }
    }

    return result;
}

void PropertyValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        out.writeVarUInt16(m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

void PropertyValue::write(PropertyValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        // empty
        break;
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        context.getLanguageCode().write<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(out, m_objectChoice.get<::nds::core::types::LanguageCode>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::LanguageCode>(in.readVarUInt16()), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::readObject(PropertyValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::AnyHolder<>(context.getLanguageCode().read<::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::poi::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    case ::nds::poi::properties::PropertyType::LANGUAGE_CODE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::LanguageCode>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

} // namespace properties
} // namespace poi
} // namespace nds
