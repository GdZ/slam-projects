/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_POI_POI_H
#define NDS_POI_POI_POI_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Position2D.h>
#include <nds/poi/reference/types/PoiCategoryId.h>
#include <nds/poi/reference/types/PoiId.h>
#include <nds/poi/types/BrandIconSetReference.h>
#include <nds/poi/types/PoiIconSetReference.h>
#include <nds/poi/types/PoiRelation.h>

namespace nds
{
namespace poi
{
namespace poi
{

class Poi
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getPoiId()
        {
            return m_poiId_;
        }

        ::nds::core::geometry::Position2D::ZserioPackingContext& getPosition()
        {
            return m_position_;
        }

        ::zserio::DeltaContext& getPoiIconSetReference()
        {
            return m_poiIconSetReference_;
        }

        ::zserio::DeltaContext& getBrandIconSetReference()
        {
            return m_brandIconSetReference_;
        }

    private:
        ::zserio::DeltaContext m_poiId_;
        ::nds::core::geometry::Position2D::ZserioPackingContext m_position_;
        ::zserio::DeltaContext m_poiIconSetReference_;
        ::zserio::DeltaContext m_brandIconSetReference_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Poi() noexcept :
            Poi(allocator_type())
    {}

    explicit Poi(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_position = ::nds::core::geometry::Position2D,
            typename ZSERIO_T_categoryIdList = ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>,
            typename ZSERIO_T_poiIconSetReference = ::nds::poi::types::PoiIconSetReference,
            typename ZSERIO_T_brandIconSetReference = ::nds::poi::types::BrandIconSetReference,
            typename ZSERIO_T_relatedChildren = ::zserio::vector<::nds::poi::types::PoiRelation>,
            typename ZSERIO_T_relatedParents = ::zserio::vector<::nds::poi::types::PoiRelation>>
    Poi(
            ::nds::poi::reference::types::PoiId poiId_,
            ZSERIO_T_position&& position_,
            ZSERIO_T_categoryIdList&& categoryIdList_,
            ZSERIO_T_poiIconSetReference&& poiIconSetReference_,
            ZSERIO_T_brandIconSetReference&& brandIconSetReference_,
            ZSERIO_T_relatedChildren&& relatedChildren_,
            ZSERIO_T_relatedParents&& relatedParents_,
            const allocator_type& allocator = allocator_type()) :
            Poi(allocator)
    {
        m_poiId_ = poiId_;
        m_position_ = ::std::forward<ZSERIO_T_position>(position_);
        m_categoryIdList_ = ZserioArrayType_categoryIdList(::std::forward<ZSERIO_T_categoryIdList>(categoryIdList_));
        m_poiIconSetReference_ = ::std::forward<ZSERIO_T_poiIconSetReference>(poiIconSetReference_);
        m_brandIconSetReference_ = ::std::forward<ZSERIO_T_brandIconSetReference>(brandIconSetReference_);
        m_relatedChildren_ = ::zserio::createOptionalArray<ZserioArrayType_relatedChildren>(::std::forward<ZSERIO_T_relatedChildren>(relatedChildren_));
        m_relatedParents_ = ::zserio::createOptionalArray<ZserioArrayType_relatedParents>(::std::forward<ZSERIO_T_relatedParents>(relatedParents_));
    }

    explicit Poi(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Poi(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Poi() = default;

    Poi(const Poi& other);
    Poi& operator=(const Poi& other);

    Poi(Poi&& other);
    Poi& operator=(Poi&& other);

    Poi(::zserio::PropagateAllocatorT,
            const Poi& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::poi::reference::types::PoiId getPoiId() const;
    void setPoiId(::nds::poi::reference::types::PoiId poiId_);

    const ::nds::core::geometry::Position2D& getPosition() const;
    ::nds::core::geometry::Position2D& getPosition();
    void setPosition(const ::nds::core::geometry::Position2D& position_);
    void setPosition(::nds::core::geometry::Position2D&& position_);

    const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& getCategoryIdList() const;
    ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& getCategoryIdList();
    void setCategoryIdList(const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& categoryIdList_);
    void setCategoryIdList(::zserio::vector<::nds::poi::reference::types::PoiCategoryId>&& categoryIdList_);

    ::nds::poi::types::PoiIconSetReference getPoiIconSetReference() const;
    void setPoiIconSetReference(::nds::poi::types::PoiIconSetReference poiIconSetReference_);
    bool isPoiIconSetReferenceUsed() const;
    bool isPoiIconSetReferenceSet() const;
    void resetPoiIconSetReference();

    ::nds::poi::types::BrandIconSetReference getBrandIconSetReference() const;
    void setBrandIconSetReference(::nds::poi::types::BrandIconSetReference brandIconSetReference_);
    bool isBrandIconSetReferenceUsed() const;
    bool isBrandIconSetReferenceSet() const;
    void resetBrandIconSetReference();

    const ::zserio::vector<::nds::poi::types::PoiRelation>& getRelatedChildren() const;
    ::zserio::vector<::nds::poi::types::PoiRelation>& getRelatedChildren();
    void setRelatedChildren(const ::zserio::vector<::nds::poi::types::PoiRelation>& relatedChildren_);
    void setRelatedChildren(::zserio::vector<::nds::poi::types::PoiRelation>&& relatedChildren_);
    bool isRelatedChildrenUsed() const;
    bool isRelatedChildrenSet() const;
    void resetRelatedChildren();

    const ::zserio::vector<::nds::poi::types::PoiRelation>& getRelatedParents() const;
    ::zserio::vector<::nds::poi::types::PoiRelation>& getRelatedParents();
    void setRelatedParents(const ::zserio::vector<::nds::poi::types::PoiRelation>& relatedParents_);
    void setRelatedParents(::zserio::vector<::nds::poi::types::PoiRelation>&& relatedParents_);
    bool isRelatedParentsUsed() const;
    bool isRelatedParentsSet() const;
    void resetRelatedParents();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Poi& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_relatedChildren
    {
    public:
        using OwnerType = Poi;

        static void initializeElement(Poi& owner,
                ::nds::poi::types::PoiRelation& element, size_t index);
    };

    class ZserioElementFactory_relatedChildren
    {
    public:
        using OwnerType = Poi;

        static void create(Poi& owner,
                ::zserio::vector<::nds::poi::types::PoiRelation>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Poi& owner,
                ::zserio::vector<::nds::poi::types::PoiRelation>& array,
                ::nds::poi::types::PoiRelation::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_relatedParents
    {
    public:
        using OwnerType = Poi;

        static void initializeElement(Poi& owner,
                ::nds::poi::types::PoiRelation& element, size_t index);
    };

    class ZserioElementFactory_relatedParents
    {
    public:
        using OwnerType = Poi;

        static void create(Poi& owner,
                ::zserio::vector<::nds::poi::types::PoiRelation>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Poi& owner,
                ::zserio::vector<::nds::poi::types::PoiRelation>& array,
                ::nds::poi::types::PoiRelation::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_categoryIdList = ::zserio::Array<::zserio::vector<::nds::poi::reference::types::PoiCategoryId>, ::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_relatedChildren = ::zserio::Array<::zserio::vector<::nds::poi::types::PoiRelation>, ::zserio::ObjectArrayTraits<::nds::poi::types::PoiRelation, ZserioElementFactory_relatedChildren>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_relatedChildren>;
    using ZserioArrayType_relatedParents = ::zserio::Array<::zserio::vector<::nds::poi::types::PoiRelation>, ::zserio::ObjectArrayTraits<::nds::poi::types::PoiRelation, ZserioElementFactory_relatedParents>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_relatedParents>;

    ::nds::poi::reference::types::PoiId readPoiId(::zserio::BitStreamReader& in);
    ::nds::poi::reference::types::PoiId readPoiId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::Position2D readPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Position2D readPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_categoryIdList readCategoryIdList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_categoryIdList readCategoryIdList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference> readPoiIconSetReference(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference> readPoiIconSetReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference> readBrandIconSetReference(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference> readBrandIconSetReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedChildren> readRelatedChildren(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedChildren> readRelatedChildren(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedParents> readRelatedParents(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedParents> readRelatedParents(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::poi::reference::types::PoiId m_poiId_;
    ::nds::core::geometry::Position2D m_position_;
    ZserioArrayType_categoryIdList m_categoryIdList_;
    ::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference> m_poiIconSetReference_;
    ::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference> m_brandIconSetReference_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedChildren> m_relatedChildren_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedParents> m_relatedParents_;
};

} // namespace poi
} // namespace poi
} // namespace nds

#endif // NDS_POI_POI_POI_H
