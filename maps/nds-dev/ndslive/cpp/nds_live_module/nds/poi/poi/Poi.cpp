/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/poi/PoiRoadPositionRelationType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PoiRoadPositionRelationType enumeration.
constexpr ::std::array<const char*, 3> EnumTraits<::nds::poi::poi::PoiRoadPositionRelationType>::names;
constexpr ::std::array<::nds::poi::poi::PoiRoadPositionRelationType, 3> EnumTraits<::nds::poi::poi::PoiRoadPositionRelationType>::values;
constexpr const char* EnumTraits<::nds::poi::poi::PoiRoadPositionRelationType>::enumName;

template <>
size_t enumToOrdinal(::nds::poi::poi::PoiRoadPositionRelationType value)
{
    switch (value)
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        return 0;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        return 1;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        return 2;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiRoadPositionRelationType: ") <<
                static_cast<typename ::std::underlying_type<::nds::poi::poi::PoiRoadPositionRelationType>::type>(value) << "!";
    }
}

template <>
::nds::poi::poi::PoiRoadPositionRelationType valueToEnum(
        typename ::std::underlying_type<::nds::poi::poi::PoiRoadPositionRelationType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
        return static_cast<::nds::poi::poi::PoiRoadPositionRelationType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiRoadPositionRelationType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::poi::poi::PoiRoadPositionRelationType>(::nds::poi::poi::PoiRoadPositionRelationType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::poi::poi::PoiRoadPositionRelationType value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiRoadPositionRelationType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::poi::poi::PoiRoadPositionRelationType)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::poi::poi::PoiRoadPositionRelationType value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiRoadPositionRelationType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::poi::poi::PoiRoadPositionRelationType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::poi::poi::PoiRoadPositionRelationType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::poi::poi::PoiRoadPositionRelationType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::poi::PoiRoadPositionRelationType>(
            static_cast<typename ::std::underlying_type<::nds::poi::poi::PoiRoadPositionRelationType>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::poi::poi::PoiRoadPositionRelationType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::poi::PoiRoadPositionRelationType>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiRoadPositionRelationType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::poi::poi::PoiRoadPositionRelationType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::poi::poi::PoiRoadPositionRelationType value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiRoadPositionRelationType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/poi/PoiLanePositionRelationType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PoiLanePositionRelationType enumeration.
constexpr ::std::array<const char*, 3> EnumTraits<::nds::poi::poi::PoiLanePositionRelationType>::names;
constexpr ::std::array<::nds::poi::poi::PoiLanePositionRelationType, 3> EnumTraits<::nds::poi::poi::PoiLanePositionRelationType>::values;
constexpr const char* EnumTraits<::nds::poi::poi::PoiLanePositionRelationType>::enumName;

template <>
size_t enumToOrdinal(::nds::poi::poi::PoiLanePositionRelationType value)
{
    switch (value)
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        return 0;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        return 1;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        return 2;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiLanePositionRelationType: ") <<
                static_cast<typename ::std::underlying_type<::nds::poi::poi::PoiLanePositionRelationType>::type>(value) << "!";
    }
}

template <>
::nds::poi::poi::PoiLanePositionRelationType valueToEnum(
        typename ::std::underlying_type<::nds::poi::poi::PoiLanePositionRelationType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
        return static_cast<::nds::poi::poi::PoiLanePositionRelationType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiLanePositionRelationType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::poi::poi::PoiLanePositionRelationType>(::nds::poi::poi::PoiLanePositionRelationType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::poi::poi::PoiLanePositionRelationType value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiLanePositionRelationType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::poi::poi::PoiLanePositionRelationType)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::poi::poi::PoiLanePositionRelationType value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiLanePositionRelationType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::poi::poi::PoiLanePositionRelationType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::poi::poi::PoiLanePositionRelationType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::poi::poi::PoiLanePositionRelationType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::poi::PoiLanePositionRelationType>(
            static_cast<typename ::std::underlying_type<::nds::poi::poi::PoiLanePositionRelationType>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::poi::poi::PoiLanePositionRelationType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::poi::PoiLanePositionRelationType>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiLanePositionRelationType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::poi::poi::PoiLanePositionRelationType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::poi::poi::PoiLanePositionRelationType value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiLanePositionRelationType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/poi/PoiDisplayAreaRelationType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PoiDisplayAreaRelationType enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::poi::poi::PoiDisplayAreaRelationType>::names;
constexpr ::std::array<::nds::poi::poi::PoiDisplayAreaRelationType, 4> EnumTraits<::nds::poi::poi::PoiDisplayAreaRelationType>::values;
constexpr const char* EnumTraits<::nds::poi::poi::PoiDisplayAreaRelationType>::enumName;

template <>
size_t enumToOrdinal(::nds::poi::poi::PoiDisplayAreaRelationType value)
{
    switch (value)
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        return 0;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        return 1;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        return 2;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiDisplayAreaRelationType: ") <<
                static_cast<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayAreaRelationType>::type>(value) << "!";
    }
}

template <>
::nds::poi::poi::PoiDisplayAreaRelationType valueToEnum(
        typename ::std::underlying_type<::nds::poi::poi::PoiDisplayAreaRelationType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
        return static_cast<::nds::poi::poi::PoiDisplayAreaRelationType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiDisplayAreaRelationType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::poi::poi::PoiDisplayAreaRelationType>(::nds::poi::poi::PoiDisplayAreaRelationType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::poi::poi::PoiDisplayAreaRelationType value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayAreaRelationType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::poi::poi::PoiDisplayAreaRelationType)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::poi::poi::PoiDisplayAreaRelationType value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayAreaRelationType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::poi::poi::PoiDisplayAreaRelationType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::poi::poi::PoiDisplayAreaRelationType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::poi::poi::PoiDisplayAreaRelationType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::poi::PoiDisplayAreaRelationType>(
            static_cast<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayAreaRelationType>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::poi::poi::PoiDisplayAreaRelationType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::poi::PoiDisplayAreaRelationType>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayAreaRelationType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::poi::poi::PoiDisplayAreaRelationType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::poi::poi::PoiDisplayAreaRelationType value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayAreaRelationType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/poi/PoiDisplayMesh3DRelationType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PoiDisplayMesh3DRelationType enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::poi::poi::PoiDisplayMesh3DRelationType>::names;
constexpr ::std::array<::nds::poi::poi::PoiDisplayMesh3DRelationType, 4> EnumTraits<::nds::poi::poi::PoiDisplayMesh3DRelationType>::values;
constexpr const char* EnumTraits<::nds::poi::poi::PoiDisplayMesh3DRelationType>::enumName;

template <>
size_t enumToOrdinal(::nds::poi::poi::PoiDisplayMesh3DRelationType value)
{
    switch (value)
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        return 0;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        return 1;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        return 2;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiDisplayMesh3DRelationType: ") <<
                static_cast<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayMesh3DRelationType>::type>(value) << "!";
    }
}

template <>
::nds::poi::poi::PoiDisplayMesh3DRelationType valueToEnum(
        typename ::std::underlying_type<::nds::poi::poi::PoiDisplayMesh3DRelationType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
        return static_cast<::nds::poi::poi::PoiDisplayMesh3DRelationType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiDisplayMesh3DRelationType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::poi::poi::PoiDisplayMesh3DRelationType>(::nds::poi::poi::PoiDisplayMesh3DRelationType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::poi::poi::PoiDisplayMesh3DRelationType value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayMesh3DRelationType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::poi::poi::PoiDisplayMesh3DRelationType)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::poi::poi::PoiDisplayMesh3DRelationType value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayMesh3DRelationType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::poi::poi::PoiDisplayMesh3DRelationType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::poi::poi::PoiDisplayMesh3DRelationType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::poi::poi::PoiDisplayMesh3DRelationType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::poi::PoiDisplayMesh3DRelationType>(
            static_cast<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayMesh3DRelationType>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::poi::poi::PoiDisplayMesh3DRelationType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::poi::PoiDisplayMesh3DRelationType>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayMesh3DRelationType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::poi::poi::PoiDisplayMesh3DRelationType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::poi::poi::PoiDisplayMesh3DRelationType value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::poi::poi::PoiDisplayMesh3DRelationType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/poi/Poi.h>

namespace nds
{
namespace poi
{
namespace poi
{

Poi::Poi(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_poiId_(::nds::poi::reference::types::PoiId()),
        m_position_(allocator),
        m_categoryIdList_(allocator),
        m_poiIconSetReference_(::zserio::NullOpt),
        m_brandIconSetReference_(::zserio::NullOpt),
        m_relatedChildren_(::zserio::NullOpt),
        m_relatedParents_(::zserio::NullOpt)
{
}

Poi::Poi(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_poiId_(readPoiId(in)),
        m_position_(readPosition(in, allocator)),
        m_categoryIdList_(readCategoryIdList(in, allocator)),
        m_poiIconSetReference_(readPoiIconSetReference(in)),
        m_brandIconSetReference_(readBrandIconSetReference(in)),
        m_relatedChildren_(readRelatedChildren(in, allocator)),
        m_relatedParents_(readRelatedParents(in, allocator))
{
}

Poi::Poi(Poi::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_poiId_(readPoiId(context, in)),
        m_position_(readPosition(context, in, allocator)),
        m_categoryIdList_(readCategoryIdList(context, in, allocator)),
        m_poiIconSetReference_(readPoiIconSetReference(context, in)),
        m_brandIconSetReference_(readBrandIconSetReference(context, in)),
        m_relatedChildren_(readRelatedChildren(context, in, allocator)),
        m_relatedParents_(readRelatedParents(context, in, allocator))
{
}

Poi::Poi(const Poi& other) :
        m_poiId_(other.m_poiId_),
        m_position_(other.m_position_),
        m_categoryIdList_(other.m_categoryIdList_),
        m_poiIconSetReference_(other.m_poiIconSetReference_),
        m_brandIconSetReference_(other.m_brandIconSetReference_),
        m_relatedChildren_(other.m_relatedChildren_),
        m_relatedParents_(other.m_relatedParents_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Poi& Poi::operator=(const Poi& other)
{
    m_poiId_ = other.m_poiId_;
    m_position_ = other.m_position_;
    m_categoryIdList_ = other.m_categoryIdList_;
    m_poiIconSetReference_ = other.m_poiIconSetReference_;
    m_brandIconSetReference_ = other.m_brandIconSetReference_;
    m_relatedChildren_ = other.m_relatedChildren_;
    m_relatedParents_ = other.m_relatedParents_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Poi::Poi(Poi&& other) :
        m_poiId_(::std::move(other.m_poiId_)),
        m_position_(::std::move(other.m_position_)),
        m_categoryIdList_(::std::move(other.m_categoryIdList_)),
        m_poiIconSetReference_(::std::move(other.m_poiIconSetReference_)),
        m_brandIconSetReference_(::std::move(other.m_brandIconSetReference_)),
        m_relatedChildren_(::std::move(other.m_relatedChildren_)),
        m_relatedParents_(::std::move(other.m_relatedParents_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Poi& Poi::operator=(Poi&& other)
{
    m_poiId_ = ::std::move(other.m_poiId_);
    m_position_ = ::std::move(other.m_position_);
    m_categoryIdList_ = ::std::move(other.m_categoryIdList_);
    m_poiIconSetReference_ = ::std::move(other.m_poiIconSetReference_);
    m_brandIconSetReference_ = ::std::move(other.m_brandIconSetReference_);
    m_relatedChildren_ = ::std::move(other.m_relatedChildren_);
    m_relatedParents_ = ::std::move(other.m_relatedParents_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Poi::Poi(::zserio::PropagateAllocatorT,
        const Poi& other, const allocator_type& allocator) :
        m_poiId_(::zserio::allocatorPropagatingCopy(other.m_poiId_, allocator)),
        m_position_(::zserio::allocatorPropagatingCopy(other.m_position_, allocator)),
        m_categoryIdList_(::zserio::allocatorPropagatingCopy(other.m_categoryIdList_, allocator)),
        m_poiIconSetReference_(::zserio::allocatorPropagatingCopy(other.m_poiIconSetReference_, allocator)),
        m_brandIconSetReference_(::zserio::allocatorPropagatingCopy(other.m_brandIconSetReference_, allocator)),
        m_relatedChildren_(::zserio::allocatorPropagatingCopy(other.m_relatedChildren_, allocator)),
        m_relatedParents_(::zserio::allocatorPropagatingCopy(other.m_relatedParents_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void Poi::initializeChildren()
{
    m_position_.initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if (isRelatedChildrenSet())
        m_relatedChildren_.value().initializeElements(*this);
    if (isRelatedParentsSet())
        m_relatedParents_.value().initializeElements(*this);

    m_areChildrenInitialized = true;
}

::nds::poi::reference::types::PoiId Poi::getPoiId() const
{
    return m_poiId_;
}

void Poi::setPoiId(::nds::poi::reference::types::PoiId poiId_)
{
    m_poiId_ = poiId_;
}

::nds::core::geometry::Position2D& Poi::getPosition()
{
    return m_position_;
}

const ::nds::core::geometry::Position2D& Poi::getPosition() const
{
    return m_position_;
}

void Poi::setPosition(const ::nds::core::geometry::Position2D& position_)
{
    m_position_ = position_;
}

void Poi::setPosition(::nds::core::geometry::Position2D&& position_)
{
    m_position_ = ::std::move(position_);
}

::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& Poi::getCategoryIdList()
{
    return m_categoryIdList_.getRawArray();
}

const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& Poi::getCategoryIdList() const
{
    return m_categoryIdList_.getRawArray();
}

void Poi::setCategoryIdList(const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& categoryIdList_)
{
    m_categoryIdList_ = ZserioArrayType_categoryIdList(categoryIdList_);
}

void Poi::setCategoryIdList(::zserio::vector<::nds::poi::reference::types::PoiCategoryId>&& categoryIdList_)
{
    m_categoryIdList_ = ZserioArrayType_categoryIdList(std::move(categoryIdList_));
}

::nds::poi::types::PoiIconSetReference Poi::getPoiIconSetReference() const
{
    return m_poiIconSetReference_.value();
}

void Poi::setPoiIconSetReference(::nds::poi::types::PoiIconSetReference poiIconSetReference_)
{
    m_poiIconSetReference_ = poiIconSetReference_;
}

bool Poi::isPoiIconSetReferenceUsed() const
{
    return (isPoiIconSetReferenceSet());
}

bool Poi::isPoiIconSetReferenceSet() const
{
    return m_poiIconSetReference_.hasValue();
}

void Poi::resetPoiIconSetReference()
{
    m_poiIconSetReference_.reset();
}

::nds::poi::types::BrandIconSetReference Poi::getBrandIconSetReference() const
{
    return m_brandIconSetReference_.value();
}

void Poi::setBrandIconSetReference(::nds::poi::types::BrandIconSetReference brandIconSetReference_)
{
    m_brandIconSetReference_ = brandIconSetReference_;
}

bool Poi::isBrandIconSetReferenceUsed() const
{
    return (isBrandIconSetReferenceSet());
}

bool Poi::isBrandIconSetReferenceSet() const
{
    return m_brandIconSetReference_.hasValue();
}

void Poi::resetBrandIconSetReference()
{
    m_brandIconSetReference_.reset();
}

::zserio::vector<::nds::poi::types::PoiRelation>& Poi::getRelatedChildren()
{
    return m_relatedChildren_.value().getRawArray();
}

const ::zserio::vector<::nds::poi::types::PoiRelation>& Poi::getRelatedChildren() const
{
    return m_relatedChildren_.value().getRawArray();
}

void Poi::setRelatedChildren(const ::zserio::vector<::nds::poi::types::PoiRelation>& relatedChildren_)
{
    m_relatedChildren_ = ZserioArrayType_relatedChildren(relatedChildren_);
}

void Poi::setRelatedChildren(::zserio::vector<::nds::poi::types::PoiRelation>&& relatedChildren_)
{
    m_relatedChildren_ = ZserioArrayType_relatedChildren(std::move(relatedChildren_));
}

bool Poi::isRelatedChildrenUsed() const
{
    return (isRelatedChildrenSet());
}

bool Poi::isRelatedChildrenSet() const
{
    return m_relatedChildren_.hasValue();
}

void Poi::resetRelatedChildren()
{
    m_relatedChildren_.reset();
}

::zserio::vector<::nds::poi::types::PoiRelation>& Poi::getRelatedParents()
{
    return m_relatedParents_.value().getRawArray();
}

const ::zserio::vector<::nds::poi::types::PoiRelation>& Poi::getRelatedParents() const
{
    return m_relatedParents_.value().getRawArray();
}

void Poi::setRelatedParents(const ::zserio::vector<::nds::poi::types::PoiRelation>& relatedParents_)
{
    m_relatedParents_ = ZserioArrayType_relatedParents(relatedParents_);
}

void Poi::setRelatedParents(::zserio::vector<::nds::poi::types::PoiRelation>&& relatedParents_)
{
    m_relatedParents_ = ZserioArrayType_relatedParents(std::move(relatedParents_));
}

bool Poi::isRelatedParentsUsed() const
{
    return (isRelatedParentsSet());
}

bool Poi::isRelatedParentsSet() const
{
    return m_relatedParents_.hasValue();
}

void Poi::resetRelatedParents()
{
    m_relatedParents_.reset();
}

void Poi::initPackingContext(Poi::ZserioPackingContext& context) const
{
    context.getPoiId().init<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiId>>(m_poiId_);
    m_position_.initPackingContext(context.getPosition());
    if (isPoiIconSetReferenceSet())
    {
        context.getPoiIconSetReference().init<::zserio::VarIntArrayTraits<::nds::poi::types::PoiIconSetReference>>(m_poiIconSetReference_.value());
    }
    if (isBrandIconSetReferenceSet())
    {
        context.getBrandIconSetReference().init<::zserio::VarIntArrayTraits<::nds::poi::types::BrandIconSetReference>>(m_brandIconSetReference_.value());
    }
}

size_t Poi::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_poiId_);
    endBitPosition += m_position_.bitSizeOf(endBitPosition);
    endBitPosition += m_categoryIdList_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isPoiIconSetReferenceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_poiIconSetReference_.value());
    }
    endBitPosition += 1;
    if (isBrandIconSetReferenceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_brandIconSetReference_.value());
    }
    endBitPosition += 1;
    if (isRelatedChildrenSet())
    {
        endBitPosition += m_relatedChildren_.value().bitSizeOf(*this, endBitPosition);
    }
    endBitPosition += 1;
    if (isRelatedParentsSet())
    {
        endBitPosition += m_relatedParents_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Poi::bitSizeOf(Poi::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getPoiId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiId>>(m_poiId_);
    endBitPosition += m_position_.bitSizeOf(context.getPosition(), endBitPosition);
    endBitPosition += m_categoryIdList_.bitSizeOfPacked(endBitPosition);
    endBitPosition += 1;
    if (isPoiIconSetReferenceSet())
    {
        endBitPosition += context.getPoiIconSetReference().bitSizeOf<::zserio::VarIntArrayTraits<::nds::poi::types::PoiIconSetReference>>(m_poiIconSetReference_.value());
    }
    endBitPosition += 1;
    if (isBrandIconSetReferenceSet())
    {
        endBitPosition += context.getBrandIconSetReference().bitSizeOf<::zserio::VarIntArrayTraits<::nds::poi::types::BrandIconSetReference>>(m_brandIconSetReference_.value());
    }
    endBitPosition += 1;
    if (isRelatedChildrenSet())
    {
        endBitPosition += m_relatedChildren_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    endBitPosition += 1;
    if (isRelatedParentsSet())
    {
        endBitPosition += m_relatedParents_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Poi::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_poiId_);
    endBitPosition = m_position_.initializeOffsets(endBitPosition);
    endBitPosition = m_categoryIdList_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isPoiIconSetReferenceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_poiIconSetReference_.value());
    }
    endBitPosition += 1;
    if (isBrandIconSetReferenceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_brandIconSetReference_.value());
    }
    endBitPosition += 1;
    if (isRelatedChildrenSet())
    {
        endBitPosition = m_relatedChildren_.value().initializeOffsets(*this, endBitPosition);
    }
    endBitPosition += 1;
    if (isRelatedParentsSet())
    {
        endBitPosition = m_relatedParents_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t Poi::initializeOffsets(Poi::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getPoiId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiId>>(m_poiId_);
    endBitPosition = m_position_.initializeOffsets(context.getPosition(), endBitPosition);
    endBitPosition = m_categoryIdList_.initializeOffsetsPacked(endBitPosition);
    endBitPosition += 1;
    if (isPoiIconSetReferenceSet())
    {
        endBitPosition += context.getPoiIconSetReference().bitSizeOf<::zserio::VarIntArrayTraits<::nds::poi::types::PoiIconSetReference>>(m_poiIconSetReference_.value());
    }
    endBitPosition += 1;
    if (isBrandIconSetReferenceSet())
    {
        endBitPosition += context.getBrandIconSetReference().bitSizeOf<::zserio::VarIntArrayTraits<::nds::poi::types::BrandIconSetReference>>(m_brandIconSetReference_.value());
    }
    endBitPosition += 1;
    if (isRelatedChildrenSet())
    {
        endBitPosition = m_relatedChildren_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    endBitPosition += 1;
    if (isRelatedParentsSet())
    {
        endBitPosition = m_relatedParents_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool Poi::operator==(const Poi& other) const
{
    if (this != &other)
    {
        return
                (m_poiId_ == other.m_poiId_) &&
                (m_position_ == other.m_position_) &&
                (m_categoryIdList_ == other.m_categoryIdList_) &&
                (!isPoiIconSetReferenceUsed() ? !other.isPoiIconSetReferenceUsed() : (m_poiIconSetReference_ == other.m_poiIconSetReference_)) &&
                (!isBrandIconSetReferenceUsed() ? !other.isBrandIconSetReferenceUsed() : (m_brandIconSetReference_ == other.m_brandIconSetReference_)) &&
                (!isRelatedChildrenUsed() ? !other.isRelatedChildrenUsed() : (m_relatedChildren_ == other.m_relatedChildren_)) &&
                (!isRelatedParentsUsed() ? !other.isRelatedParentsUsed() : (m_relatedParents_ == other.m_relatedParents_));
    }

    return true;
}

uint32_t Poi::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_poiId_);
    result = ::zserio::calcHashCode(result, m_position_);
    result = ::zserio::calcHashCode(result, m_categoryIdList_);
    if (isPoiIconSetReferenceUsed())
        result = ::zserio::calcHashCode(result, m_poiIconSetReference_);
    if (isBrandIconSetReferenceUsed())
        result = ::zserio::calcHashCode(result, m_brandIconSetReference_);
    if (isRelatedChildrenUsed())
        result = ::zserio::calcHashCode(result, m_relatedChildren_);
    if (isRelatedParentsUsed())
        result = ::zserio::calcHashCode(result, m_relatedParents_);

    return result;
}

void Poi::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_poiId_);

    // check parameters
    if (m_position_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field Poi.position: ") <<
                m_position_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_position_.write(out);

    m_categoryIdList_.write(out);

    if (isPoiIconSetReferenceSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_poiIconSetReference_.value());
    }
    else
    {
        out.writeBool(false);
    }

    if (isBrandIconSetReferenceSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_brandIconSetReference_.value());
    }
    else
    {
        out.writeBool(false);
    }

    if (isRelatedChildrenSet())
    {
        out.writeBool(true);
        m_relatedChildren_.value().write(*this, out);
    }
    else
    {
        out.writeBool(false);
    }

    if (isRelatedParentsSet())
    {
        out.writeBool(true);
        m_relatedParents_.value().write(*this, out);
    }
    else
    {
        out.writeBool(false);
    }
}

void Poi::write(Poi::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getPoiId().write<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiId>>(out, m_poiId_);

    // check parameters
    if (m_position_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field Poi.position: ") <<
                m_position_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_position_.write(context.getPosition(), out);

    m_categoryIdList_.writePacked(out);

    if (isPoiIconSetReferenceSet())
    {
        out.writeBool(true);
        context.getPoiIconSetReference().write<::zserio::VarIntArrayTraits<::nds::poi::types::PoiIconSetReference>>(out, m_poiIconSetReference_.value());
    }
    else
    {
        out.writeBool(false);
    }

    if (isBrandIconSetReferenceSet())
    {
        out.writeBool(true);
        context.getBrandIconSetReference().write<::zserio::VarIntArrayTraits<::nds::poi::types::BrandIconSetReference>>(out, m_brandIconSetReference_.value());
    }
    else
    {
        out.writeBool(false);
    }

    if (isRelatedChildrenSet())
    {
        out.writeBool(true);
        m_relatedChildren_.value().writePacked(*this, out);
    }
    else
    {
        out.writeBool(false);
    }

    if (isRelatedParentsSet())
    {
        out.writeBool(true);
        m_relatedParents_.value().writePacked(*this, out);
    }
    else
    {
        out.writeBool(false);
    }
}

void Poi::ZserioArrayExpressions_relatedChildren::initializeElement(Poi&,
        ::nds::poi::types::PoiRelation& element, size_t)
{
    element.initializeChildren();
}

void Poi::ZserioElementFactory_relatedChildren::create(Poi&        ,
        ::zserio::vector<::nds::poi::types::PoiRelation>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Poi::ZserioElementFactory_relatedChildren::create(Poi&        ,
        ::zserio::vector<::nds::poi::types::PoiRelation>& array,
        ::nds::poi::types::PoiRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void Poi::ZserioArrayExpressions_relatedParents::initializeElement(Poi&,
        ::nds::poi::types::PoiRelation& element, size_t)
{
    element.initializeChildren();
}

void Poi::ZserioElementFactory_relatedParents::create(Poi&        ,
        ::zserio::vector<::nds::poi::types::PoiRelation>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Poi::ZserioElementFactory_relatedParents::create(Poi&        ,
        ::zserio::vector<::nds::poi::types::PoiRelation>& array,
        ::nds::poi::types::PoiRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::poi::reference::types::PoiId Poi::readPoiId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::poi::reference::types::PoiId>(in.readVarUInt32());
}

::nds::poi::reference::types::PoiId Poi::readPoiId(Poi::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPoiId().read<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiId>>(in);
}
::nds::core::geometry::Position2D Poi::readPosition(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}

::nds::core::geometry::Position2D Poi::readPosition(Poi::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(context.getPosition(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}
Poi::ZserioArrayType_categoryIdList Poi::readCategoryIdList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_categoryIdList readField(allocator);
    readField.read(in);

    return readField;
}

Poi::ZserioArrayType_categoryIdList Poi::readCategoryIdList(Poi::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_categoryIdList readField(allocator);
    readField.readPacked(in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference> Poi::readPoiIconSetReference(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference>(static_cast<::nds::poi::types::PoiIconSetReference>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference> Poi::readPoiIconSetReference(Poi::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference>(context.getPoiIconSetReference().read<::zserio::VarIntArrayTraits<::nds::poi::types::PoiIconSetReference>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::types::PoiIconSetReference>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference> Poi::readBrandIconSetReference(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference>(static_cast<::nds::poi::types::BrandIconSetReference>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference> Poi::readBrandIconSetReference(Poi::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference>(context.getBrandIconSetReference().read<::zserio::VarIntArrayTraits<::nds::poi::types::BrandIconSetReference>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::types::BrandIconSetReference>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Poi::ZserioArrayType_relatedChildren> Poi::readRelatedChildren(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_relatedChildren readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedChildren>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedChildren>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Poi::ZserioArrayType_relatedChildren> Poi::readRelatedChildren(Poi::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_relatedChildren readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedChildren>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedChildren>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Poi::ZserioArrayType_relatedParents> Poi::readRelatedParents(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_relatedParents readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedParents>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedParents>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Poi::ZserioArrayType_relatedParents> Poi::readRelatedParents(Poi::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_relatedParents readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedParents>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_relatedParents>(::zserio::NullOpt);
}

} // namespace poi
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/poi/PoiRoadPositionRelationValue.h>

namespace nds
{
namespace poi
{
namespace poi
{

PoiRoadPositionRelationValue::PoiRoadPositionRelationValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

PoiRoadPositionRelationValue::PoiRoadPositionRelationValue(::zserio::BitStreamReader& in,
        ::nds::poi::poi::PoiRoadPositionRelationType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

PoiRoadPositionRelationValue::PoiRoadPositionRelationValue(PoiRoadPositionRelationValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::poi::poi::PoiRoadPositionRelationType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

PoiRoadPositionRelationValue::PoiRoadPositionRelationValue(const PoiRoadPositionRelationValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PoiRoadPositionRelationValue& PoiRoadPositionRelationValue::operator=(const PoiRoadPositionRelationValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PoiRoadPositionRelationValue::PoiRoadPositionRelationValue(PoiRoadPositionRelationValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PoiRoadPositionRelationValue& PoiRoadPositionRelationValue::operator=(PoiRoadPositionRelationValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PoiRoadPositionRelationValue::PoiRoadPositionRelationValue(::zserio::PropagateAllocatorT,
        const PoiRoadPositionRelationValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void PoiRoadPositionRelationValue::initialize(
        ::nds::poi::poi::PoiRoadPositionRelationType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool PoiRoadPositionRelationValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::poi::poi::PoiRoadPositionRelationType PoiRoadPositionRelationValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PoiRoadPositionRelationValue' is not initialized!");

    return m_type_;
}

::nds::poi::poi::PoiEntranceReference PoiRoadPositionRelationValue::getPoiEntrance() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>();
}

void PoiRoadPositionRelationValue::setPoiEntrance(::nds::poi::poi::PoiEntranceReference poiEntrance_)
{
    m_objectChoice = poiEntrance_;
}

::nds::poi::poi::PoiExitReference PoiRoadPositionRelationValue::getPoiExit() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiExitReference>();
}

void PoiRoadPositionRelationValue::setPoiExit(::nds::poi::poi::PoiExitReference poiExit_)
{
    m_objectChoice = poiExit_;
}

::nds::poi::poi::PoiEntranceAndExitReference PoiRoadPositionRelationValue::getPoiEntranceAndExit() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>();
}

void PoiRoadPositionRelationValue::setPoiEntranceAndExit(::nds::poi::poi::PoiEntranceAndExitReference poiEntranceAndExit_)
{
    m_objectChoice = poiEntranceAndExit_;
}

PoiRoadPositionRelationValue::ChoiceTag PoiRoadPositionRelationValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        return CHOICE_poiEntrance;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        return CHOICE_poiExit;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        return CHOICE_poiEntranceAndExit;
    default:
        return UNDEFINED_CHOICE;
    }
}

void PoiRoadPositionRelationValue::initPackingContext(PoiRoadPositionRelationValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        context.getPoiEntrance().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        context.getPoiExit().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        context.getPoiEntranceAndExit().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }
}

size_t PoiRoadPositionRelationValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PoiRoadPositionRelationValue::bitSizeOf(PoiRoadPositionRelationValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        endBitPosition += context.getPoiEntrance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        endBitPosition += context.getPoiExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        endBitPosition += context.getPoiEntranceAndExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PoiRoadPositionRelationValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }

    return endBitPosition;
}

size_t PoiRoadPositionRelationValue::initializeOffsets(PoiRoadPositionRelationValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        endBitPosition += context.getPoiEntrance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        endBitPosition += context.getPoiExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        endBitPosition += context.getPoiEntranceAndExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }

    return endBitPosition;
}

bool PoiRoadPositionRelationValue::operator==(const PoiRoadPositionRelationValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiExitReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }
}

uint32_t PoiRoadPositionRelationValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
            break;
        case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
            break;
        case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
            break;
        default:
            break;
        }
    }

    return result;
}

void PoiRoadPositionRelationValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }
}

void PoiRoadPositionRelationValue::write(PoiRoadPositionRelationValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        context.getPoiEntrance().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        context.getPoiExit().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        context.getPoiEntranceAndExit().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }
}

::zserio::AnyHolder<> PoiRoadPositionRelationValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiEntranceReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiExitReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiEntranceAndExitReference>(in.readVarUInt32()), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }
}

::zserio::AnyHolder<> PoiRoadPositionRelationValue::readObject(PoiRoadPositionRelationValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        return ::zserio::AnyHolder<>(context.getPoiEntrance().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(in), allocator);
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        return ::zserio::AnyHolder<>(context.getPoiExit().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(in), allocator);
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        return ::zserio::AnyHolder<>(context.getPoiEntranceAndExit().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }
}

::zserio::AnyHolder<> PoiRoadPositionRelationValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiEntranceReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiRoadPositionRelationType::EXIT:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiExitReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiRoadPositionRelationType::ENTRY_AND_EXIT:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiEntranceAndExitReference>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiRoadPositionRelationValue!");
    }
}

} // namespace poi
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/poi/PoiLanePositionRelationValue.h>

namespace nds
{
namespace poi
{
namespace poi
{

PoiLanePositionRelationValue::PoiLanePositionRelationValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

PoiLanePositionRelationValue::PoiLanePositionRelationValue(::zserio::BitStreamReader& in,
        ::nds::poi::poi::PoiLanePositionRelationType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

PoiLanePositionRelationValue::PoiLanePositionRelationValue(PoiLanePositionRelationValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::poi::poi::PoiLanePositionRelationType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

PoiLanePositionRelationValue::PoiLanePositionRelationValue(const PoiLanePositionRelationValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PoiLanePositionRelationValue& PoiLanePositionRelationValue::operator=(const PoiLanePositionRelationValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PoiLanePositionRelationValue::PoiLanePositionRelationValue(PoiLanePositionRelationValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PoiLanePositionRelationValue& PoiLanePositionRelationValue::operator=(PoiLanePositionRelationValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PoiLanePositionRelationValue::PoiLanePositionRelationValue(::zserio::PropagateAllocatorT,
        const PoiLanePositionRelationValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void PoiLanePositionRelationValue::initialize(
        ::nds::poi::poi::PoiLanePositionRelationType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool PoiLanePositionRelationValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::poi::poi::PoiLanePositionRelationType PoiLanePositionRelationValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PoiLanePositionRelationValue' is not initialized!");

    return m_type_;
}

::nds::poi::poi::PoiEntranceReference PoiLanePositionRelationValue::getPoiEntrance() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>();
}

void PoiLanePositionRelationValue::setPoiEntrance(::nds::poi::poi::PoiEntranceReference poiEntrance_)
{
    m_objectChoice = poiEntrance_;
}

::nds::poi::poi::PoiExitReference PoiLanePositionRelationValue::getPoiExit() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiExitReference>();
}

void PoiLanePositionRelationValue::setPoiExit(::nds::poi::poi::PoiExitReference poiExit_)
{
    m_objectChoice = poiExit_;
}

::nds::poi::poi::PoiEntranceAndExitReference PoiLanePositionRelationValue::getPoiEntranceAndExit() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>();
}

void PoiLanePositionRelationValue::setPoiEntranceAndExit(::nds::poi::poi::PoiEntranceAndExitReference poiEntranceAndExit_)
{
    m_objectChoice = poiEntranceAndExit_;
}

PoiLanePositionRelationValue::ChoiceTag PoiLanePositionRelationValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        return CHOICE_poiEntrance;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        return CHOICE_poiExit;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        return CHOICE_poiEntranceAndExit;
    default:
        return UNDEFINED_CHOICE;
    }
}

void PoiLanePositionRelationValue::initPackingContext(PoiLanePositionRelationValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        context.getPoiEntrance().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        context.getPoiExit().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        context.getPoiEntranceAndExit().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }
}

size_t PoiLanePositionRelationValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PoiLanePositionRelationValue::bitSizeOf(PoiLanePositionRelationValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        endBitPosition += context.getPoiEntrance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        endBitPosition += context.getPoiExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        endBitPosition += context.getPoiEntranceAndExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PoiLanePositionRelationValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }

    return endBitPosition;
}

size_t PoiLanePositionRelationValue::initializeOffsets(PoiLanePositionRelationValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        endBitPosition += context.getPoiEntrance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        endBitPosition += context.getPoiExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        endBitPosition += context.getPoiEntranceAndExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }

    return endBitPosition;
}

bool PoiLanePositionRelationValue::operator==(const PoiLanePositionRelationValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiExitReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }
}

uint32_t PoiLanePositionRelationValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
            break;
        case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
            break;
        case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
            break;
        default:
            break;
        }
    }

    return result;
}

void PoiLanePositionRelationValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }
}

void PoiLanePositionRelationValue::write(PoiLanePositionRelationValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        context.getPoiEntrance().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        context.getPoiExit().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        context.getPoiEntranceAndExit().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }
}

::zserio::AnyHolder<> PoiLanePositionRelationValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiEntranceReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiExitReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiEntranceAndExitReference>(in.readVarUInt32()), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }
}

::zserio::AnyHolder<> PoiLanePositionRelationValue::readObject(PoiLanePositionRelationValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        return ::zserio::AnyHolder<>(context.getPoiEntrance().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(in), allocator);
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        return ::zserio::AnyHolder<>(context.getPoiExit().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(in), allocator);
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        return ::zserio::AnyHolder<>(context.getPoiEntranceAndExit().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }
}

::zserio::AnyHolder<> PoiLanePositionRelationValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiEntranceReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiLanePositionRelationType::EXIT:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiExitReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiLanePositionRelationType::ENTRY_AND_EXIT:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiEntranceAndExitReference>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiLanePositionRelationValue!");
    }
}

} // namespace poi
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/poi/PoiDisplayAreaRelationValue.h>

namespace nds
{
namespace poi
{
namespace poi
{

PoiDisplayAreaRelationValue::PoiDisplayAreaRelationValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

PoiDisplayAreaRelationValue::PoiDisplayAreaRelationValue(::zserio::BitStreamReader& in,
        ::nds::poi::poi::PoiDisplayAreaRelationType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

PoiDisplayAreaRelationValue::PoiDisplayAreaRelationValue(PoiDisplayAreaRelationValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::poi::poi::PoiDisplayAreaRelationType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

PoiDisplayAreaRelationValue::PoiDisplayAreaRelationValue(const PoiDisplayAreaRelationValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PoiDisplayAreaRelationValue& PoiDisplayAreaRelationValue::operator=(const PoiDisplayAreaRelationValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PoiDisplayAreaRelationValue::PoiDisplayAreaRelationValue(PoiDisplayAreaRelationValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PoiDisplayAreaRelationValue& PoiDisplayAreaRelationValue::operator=(PoiDisplayAreaRelationValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PoiDisplayAreaRelationValue::PoiDisplayAreaRelationValue(::zserio::PropagateAllocatorT,
        const PoiDisplayAreaRelationValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void PoiDisplayAreaRelationValue::initialize(
        ::nds::poi::poi::PoiDisplayAreaRelationType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool PoiDisplayAreaRelationValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::poi::poi::PoiDisplayAreaRelationType PoiDisplayAreaRelationValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PoiDisplayAreaRelationValue' is not initialized!");

    return m_type_;
}

::nds::poi::reference::types::PoiReference PoiDisplayAreaRelationValue::getPoiComplete() const
{
    return m_objectChoice.get<::nds::poi::reference::types::PoiReference>();
}

void PoiDisplayAreaRelationValue::setPoiComplete(::nds::poi::reference::types::PoiReference poiComplete_)
{
    m_objectChoice = poiComplete_;
}

::nds::poi::poi::PoiEntranceReference PoiDisplayAreaRelationValue::getPoiEntrance() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>();
}

void PoiDisplayAreaRelationValue::setPoiEntrance(::nds::poi::poi::PoiEntranceReference poiEntrance_)
{
    m_objectChoice = poiEntrance_;
}

::nds::poi::poi::PoiExitReference PoiDisplayAreaRelationValue::getPoiExit() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiExitReference>();
}

void PoiDisplayAreaRelationValue::setPoiExit(::nds::poi::poi::PoiExitReference poiExit_)
{
    m_objectChoice = poiExit_;
}

::nds::poi::poi::PoiEntranceAndExitReference PoiDisplayAreaRelationValue::getPoiEntranceAndExit() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>();
}

void PoiDisplayAreaRelationValue::setPoiEntranceAndExit(::nds::poi::poi::PoiEntranceAndExitReference poiEntranceAndExit_)
{
    m_objectChoice = poiEntranceAndExit_;
}

PoiDisplayAreaRelationValue::ChoiceTag PoiDisplayAreaRelationValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        return CHOICE_poiComplete;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        return CHOICE_poiEntrance;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        return CHOICE_poiExit;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        return CHOICE_poiEntranceAndExit;
    default:
        return UNDEFINED_CHOICE;
    }
}

void PoiDisplayAreaRelationValue::initPackingContext(PoiDisplayAreaRelationValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        context.getPoiComplete().init<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        context.getPoiEntrance().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        context.getPoiExit().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        context.getPoiEntranceAndExit().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }
}

size_t PoiDisplayAreaRelationValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PoiDisplayAreaRelationValue::bitSizeOf(PoiDisplayAreaRelationValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        endBitPosition += context.getPoiComplete().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        endBitPosition += context.getPoiEntrance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        endBitPosition += context.getPoiExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        endBitPosition += context.getPoiEntranceAndExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PoiDisplayAreaRelationValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }

    return endBitPosition;
}

size_t PoiDisplayAreaRelationValue::initializeOffsets(PoiDisplayAreaRelationValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        endBitPosition += context.getPoiComplete().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        endBitPosition += context.getPoiEntrance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        endBitPosition += context.getPoiExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        endBitPosition += context.getPoiEntranceAndExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }

    return endBitPosition;
}

bool PoiDisplayAreaRelationValue::operator==(const PoiDisplayAreaRelationValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::reference::types::PoiReference>() == other.m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiExitReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }
}

uint32_t PoiDisplayAreaRelationValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
            break;
        case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
            break;
        case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
            break;
        case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
            break;
        default:
            break;
        }
    }

    return result;
}

void PoiDisplayAreaRelationValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }
}

void PoiDisplayAreaRelationValue::write(PoiDisplayAreaRelationValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        context.getPoiComplete().write<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(out, m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        context.getPoiEntrance().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        context.getPoiExit().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        context.getPoiEntranceAndExit().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }
}

::zserio::AnyHolder<> PoiDisplayAreaRelationValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::reference::types::PoiReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiEntranceReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiExitReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiEntranceAndExitReference>(in.readVarUInt32()), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }
}

::zserio::AnyHolder<> PoiDisplayAreaRelationValue::readObject(PoiDisplayAreaRelationValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        return ::zserio::AnyHolder<>(context.getPoiComplete().read<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(in), allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        return ::zserio::AnyHolder<>(context.getPoiEntrance().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(in), allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        return ::zserio::AnyHolder<>(context.getPoiExit().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(in), allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        return ::zserio::AnyHolder<>(context.getPoiEntranceAndExit().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }
}

::zserio::AnyHolder<> PoiDisplayAreaRelationValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayAreaRelationType::COMPLETE:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::reference::types::PoiReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiEntranceReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::EXIT:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiExitReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiDisplayAreaRelationType::ENTRY_AND_EXIT:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiEntranceAndExitReference>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayAreaRelationValue!");
    }
}

} // namespace poi
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/poi/PoiDisplayMesh3DRelationValue.h>

namespace nds
{
namespace poi
{
namespace poi
{

PoiDisplayMesh3DRelationValue::PoiDisplayMesh3DRelationValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

PoiDisplayMesh3DRelationValue::PoiDisplayMesh3DRelationValue(::zserio::BitStreamReader& in,
        ::nds::poi::poi::PoiDisplayMesh3DRelationType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

PoiDisplayMesh3DRelationValue::PoiDisplayMesh3DRelationValue(PoiDisplayMesh3DRelationValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::poi::poi::PoiDisplayMesh3DRelationType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

PoiDisplayMesh3DRelationValue::PoiDisplayMesh3DRelationValue(const PoiDisplayMesh3DRelationValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PoiDisplayMesh3DRelationValue& PoiDisplayMesh3DRelationValue::operator=(const PoiDisplayMesh3DRelationValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PoiDisplayMesh3DRelationValue::PoiDisplayMesh3DRelationValue(PoiDisplayMesh3DRelationValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PoiDisplayMesh3DRelationValue& PoiDisplayMesh3DRelationValue::operator=(PoiDisplayMesh3DRelationValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PoiDisplayMesh3DRelationValue::PoiDisplayMesh3DRelationValue(::zserio::PropagateAllocatorT,
        const PoiDisplayMesh3DRelationValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void PoiDisplayMesh3DRelationValue::initialize(
        ::nds::poi::poi::PoiDisplayMesh3DRelationType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool PoiDisplayMesh3DRelationValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::poi::poi::PoiDisplayMesh3DRelationType PoiDisplayMesh3DRelationValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PoiDisplayMesh3DRelationValue' is not initialized!");

    return m_type_;
}

::nds::poi::reference::types::PoiReference PoiDisplayMesh3DRelationValue::getPoiComplete() const
{
    return m_objectChoice.get<::nds::poi::reference::types::PoiReference>();
}

void PoiDisplayMesh3DRelationValue::setPoiComplete(::nds::poi::reference::types::PoiReference poiComplete_)
{
    m_objectChoice = poiComplete_;
}

::nds::poi::poi::PoiEntranceReference PoiDisplayMesh3DRelationValue::getPoiEntrance() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>();
}

void PoiDisplayMesh3DRelationValue::setPoiEntrance(::nds::poi::poi::PoiEntranceReference poiEntrance_)
{
    m_objectChoice = poiEntrance_;
}

::nds::poi::poi::PoiExitReference PoiDisplayMesh3DRelationValue::getPoiExit() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiExitReference>();
}

void PoiDisplayMesh3DRelationValue::setPoiExit(::nds::poi::poi::PoiExitReference poiExit_)
{
    m_objectChoice = poiExit_;
}

::nds::poi::poi::PoiEntranceAndExitReference PoiDisplayMesh3DRelationValue::getPoiEntranceAndExit() const
{
    return m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>();
}

void PoiDisplayMesh3DRelationValue::setPoiEntranceAndExit(::nds::poi::poi::PoiEntranceAndExitReference poiEntranceAndExit_)
{
    m_objectChoice = poiEntranceAndExit_;
}

PoiDisplayMesh3DRelationValue::ChoiceTag PoiDisplayMesh3DRelationValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        return CHOICE_poiComplete;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        return CHOICE_poiEntrance;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        return CHOICE_poiExit;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        return CHOICE_poiEntranceAndExit;
    default:
        return UNDEFINED_CHOICE;
    }
}

void PoiDisplayMesh3DRelationValue::initPackingContext(PoiDisplayMesh3DRelationValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        context.getPoiComplete().init<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        context.getPoiEntrance().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        context.getPoiExit().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        context.getPoiEntranceAndExit().init<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }
}

size_t PoiDisplayMesh3DRelationValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PoiDisplayMesh3DRelationValue::bitSizeOf(PoiDisplayMesh3DRelationValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        endBitPosition += context.getPoiComplete().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        endBitPosition += context.getPoiEntrance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        endBitPosition += context.getPoiExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        endBitPosition += context.getPoiEntranceAndExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PoiDisplayMesh3DRelationValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }

    return endBitPosition;
}

size_t PoiDisplayMesh3DRelationValue::initializeOffsets(PoiDisplayMesh3DRelationValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        endBitPosition += context.getPoiComplete().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        endBitPosition += context.getPoiEntrance().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        endBitPosition += context.getPoiExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        endBitPosition += context.getPoiEntranceAndExit().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }

    return endBitPosition;
}

bool PoiDisplayMesh3DRelationValue::operator==(const PoiDisplayMesh3DRelationValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::reference::types::PoiReference>() == other.m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiExitReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>() == other.m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }
}

uint32_t PoiDisplayMesh3DRelationValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
            break;
        case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
            break;
        case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
            break;
        case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
            break;
        default:
            break;
        }
    }

    return result;
}

void PoiDisplayMesh3DRelationValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        out.writeVarUInt32(m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }
}

void PoiDisplayMesh3DRelationValue::write(PoiDisplayMesh3DRelationValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        context.getPoiComplete().write<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(out, m_objectChoice.get<::nds::poi::reference::types::PoiReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        context.getPoiEntrance().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiEntranceReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        context.getPoiExit().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiExitReference>());
        break;
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        context.getPoiEntranceAndExit().write<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(out, m_objectChoice.get<::nds::poi::poi::PoiEntranceAndExitReference>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }
}

::zserio::AnyHolder<> PoiDisplayMesh3DRelationValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::reference::types::PoiReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiEntranceReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiExitReference>(in.readVarUInt32()), allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        return ::zserio::AnyHolder<>(static_cast<::nds::poi::poi::PoiEntranceAndExitReference>(in.readVarUInt32()), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }
}

::zserio::AnyHolder<> PoiDisplayMesh3DRelationValue::readObject(PoiDisplayMesh3DRelationValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        return ::zserio::AnyHolder<>(context.getPoiComplete().read<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiReference>>(in), allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        return ::zserio::AnyHolder<>(context.getPoiEntrance().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceReference>>(in), allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        return ::zserio::AnyHolder<>(context.getPoiExit().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiExitReference>>(in), allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        return ::zserio::AnyHolder<>(context.getPoiEntranceAndExit().read<::zserio::VarIntNNArrayTraits<::nds::poi::poi::PoiEntranceAndExitReference>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }
}

::zserio::AnyHolder<> PoiDisplayMesh3DRelationValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::COMPLETE:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::reference::types::PoiReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiEntranceReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::EXIT:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiExitReference>(m_objectChoice, allocator);
    case ::nds::poi::poi::PoiDisplayMesh3DRelationType::ENTRY_AND_EXIT:
        return ::zserio::allocatorPropagatingCopy<::nds::poi::poi::PoiEntranceAndExitReference>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PoiDisplayMesh3DRelationValue!");
    }
}

} // namespace poi
} // namespace poi
} // namespace nds
