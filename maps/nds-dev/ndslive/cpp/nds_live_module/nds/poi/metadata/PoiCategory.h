/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_METADATA_POI_CATEGORY_H
#define NDS_POI_METADATA_POI_CATEGORY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/types/ScaleRangeId.h>
#include <nds/poi/reference/types/PoiCategoryId.h>
#include <nds/poi/reference/types/PoiStandardCategory.h>
#include <nds/poi/types/CategoryIconSetReference.h>
#include <nds/poi/types/NameStringCollection.h>

namespace nds
{
namespace poi
{
namespace metadata
{

class PoiCategory
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getCategoryId()
        {
            return m_categoryId_;
        }

        ::zserio::DeltaContext& getStandardCategory()
        {
            return m_standardCategory_;
        }

        ::nds::poi::types::NameStringCollection::ZserioPackingContext& getCategoryNameStringCollection()
        {
            return m_categoryNameStringCollection_;
        }

        ::zserio::DeltaContext& getIconSetReference()
        {
            return m_iconSetReference_;
        }

        ::zserio::DeltaContext& getActivationRadius()
        {
            return m_activationRadius_;
        }

    private:
        ::zserio::DeltaContext m_categoryId_;
        ::zserio::DeltaContext m_standardCategory_;
        ::nds::poi::types::NameStringCollection::ZserioPackingContext m_categoryNameStringCollection_;
        ::zserio::DeltaContext m_iconSetReference_;
        ::zserio::DeltaContext m_activationRadius_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PoiCategory() noexcept :
            PoiCategory(allocator_type())
    {}

    explicit PoiCategory(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_categoryNameStringCollection = ::nds::poi::types::NameStringCollection,
            typename ZSERIO_T_iconSetReference = ::nds::poi::types::CategoryIconSetReference,
            typename ZSERIO_T_scaleRangeIds = ::zserio::vector<::nds::core::types::ScaleRangeId>,
            typename ZSERIO_T_activationRadius = uint16_t,
            typename ZSERIO_T_parents = ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>,
            typename ZSERIO_T_children = ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>>
    PoiCategory(
            ::nds::poi::reference::types::PoiCategoryId categoryId_,
            ::nds::poi::reference::types::PoiStandardCategory standardCategory_,
            ZSERIO_T_categoryNameStringCollection&& categoryNameStringCollection_,
            bool selectionEntry_,
            bool showInSearchTree_,
            bool isBrand_,
            bool isCollective_,
            ZSERIO_T_iconSetReference&& iconSetReference_,
            ZSERIO_T_scaleRangeIds&& scaleRangeIds_,
            ZSERIO_T_activationRadius&& activationRadius_,
            ZSERIO_T_parents&& parents_,
            ZSERIO_T_children&& children_,
            const allocator_type& allocator = allocator_type()) :
            PoiCategory(allocator)
    {
        m_categoryId_ = categoryId_;
        m_standardCategory_ = standardCategory_;
        m_categoryNameStringCollection_ = ::std::forward<ZSERIO_T_categoryNameStringCollection>(categoryNameStringCollection_);
        m_selectionEntry_ = selectionEntry_;
        m_showInSearchTree_ = showInSearchTree_;
        m_isBrand_ = isBrand_;
        m_isCollective_ = isCollective_;
        m_iconSetReference_ = ::std::forward<ZSERIO_T_iconSetReference>(iconSetReference_);
        m_scaleRangeIds_ = ::zserio::createOptionalArray<ZserioArrayType_scaleRangeIds>(::std::forward<ZSERIO_T_scaleRangeIds>(scaleRangeIds_));
        m_activationRadius_ = ::std::forward<ZSERIO_T_activationRadius>(activationRadius_);
        m_parents_ = ::zserio::createOptionalArray<ZserioArrayType_parents>(::std::forward<ZSERIO_T_parents>(parents_));
        m_children_ = ::zserio::createOptionalArray<ZserioArrayType_children>(::std::forward<ZSERIO_T_children>(children_));
    }

    explicit PoiCategory(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PoiCategory(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PoiCategory() = default;

    PoiCategory(const PoiCategory&) = default;
    PoiCategory& operator=(const PoiCategory&) = default;

    PoiCategory(PoiCategory&&) = default;
    PoiCategory& operator=(PoiCategory&&) = default;

    PoiCategory(::zserio::PropagateAllocatorT,
            const PoiCategory& other, const allocator_type& allocator);

    ::nds::poi::reference::types::PoiCategoryId getCategoryId() const;
    void setCategoryId(::nds::poi::reference::types::PoiCategoryId categoryId_);

    ::nds::poi::reference::types::PoiStandardCategory getStandardCategory() const;
    void setStandardCategory(::nds::poi::reference::types::PoiStandardCategory standardCategory_);

    const ::nds::poi::types::NameStringCollection& getCategoryNameStringCollection() const;
    ::nds::poi::types::NameStringCollection& getCategoryNameStringCollection();
    void setCategoryNameStringCollection(const ::nds::poi::types::NameStringCollection& categoryNameStringCollection_);
    void setCategoryNameStringCollection(::nds::poi::types::NameStringCollection&& categoryNameStringCollection_);

    bool getSelectionEntry() const;
    void setSelectionEntry(bool selectionEntry_);

    bool getShowInSearchTree() const;
    void setShowInSearchTree(bool showInSearchTree_);

    bool getIsBrand() const;
    void setIsBrand(bool isBrand_);

    bool getIsCollective() const;
    void setIsCollective(bool isCollective_);

    ::nds::poi::types::CategoryIconSetReference getIconSetReference() const;
    void setIconSetReference(::nds::poi::types::CategoryIconSetReference iconSetReference_);
    bool isIconSetReferenceUsed() const;
    bool isIconSetReferenceSet() const;
    void resetIconSetReference();

    const ::zserio::vector<::nds::core::types::ScaleRangeId>& getScaleRangeIds() const;
    ::zserio::vector<::nds::core::types::ScaleRangeId>& getScaleRangeIds();
    void setScaleRangeIds(const ::zserio::vector<::nds::core::types::ScaleRangeId>& scaleRangeIds_);
    void setScaleRangeIds(::zserio::vector<::nds::core::types::ScaleRangeId>&& scaleRangeIds_);
    bool isScaleRangeIdsUsed() const;
    bool isScaleRangeIdsSet() const;
    void resetScaleRangeIds();

    uint16_t getActivationRadius() const;
    void setActivationRadius(uint16_t activationRadius_);
    bool isActivationRadiusUsed() const;
    bool isActivationRadiusSet() const;
    void resetActivationRadius();

    const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& getParents() const;
    ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& getParents();
    void setParents(const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& parents_);
    void setParents(::zserio::vector<::nds::poi::reference::types::PoiCategoryId>&& parents_);
    bool isParentsUsed() const;
    bool isParentsSet() const;
    void resetParents();

    const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& getChildren() const;
    ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& getChildren();
    void setChildren(const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& children_);
    void setChildren(::zserio::vector<::nds::poi::reference::types::PoiCategoryId>&& children_);
    bool isChildrenUsed() const;
    bool isChildrenSet() const;
    void resetChildren();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PoiCategory& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_scaleRangeIds = ::zserio::Array<::zserio::vector<::nds::core::types::ScaleRangeId>, ::zserio::VarIntNNArrayTraits<::nds::core::types::ScaleRangeId>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_parents = ::zserio::Array<::zserio::vector<::nds::poi::reference::types::PoiCategoryId>, ::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_children = ::zserio::Array<::zserio::vector<::nds::poi::reference::types::PoiCategoryId>, ::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>, ::zserio::ArrayType::AUTO>;

    ::nds::poi::reference::types::PoiCategoryId readCategoryId(::zserio::BitStreamReader& in);
    ::nds::poi::reference::types::PoiCategoryId readCategoryId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::poi::reference::types::PoiStandardCategory readStandardCategory(::zserio::BitStreamReader& in);
    ::nds::poi::reference::types::PoiStandardCategory readStandardCategory(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::poi::types::NameStringCollection readCategoryNameStringCollection(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::poi::types::NameStringCollection readCategoryNameStringCollection(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readSelectionEntry(::zserio::BitStreamReader& in);
    bool readShowInSearchTree(::zserio::BitStreamReader& in);
    bool readIsBrand(::zserio::BitStreamReader& in);
    bool readIsCollective(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference> readIconSetReference(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference> readIconSetReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleRangeIds> readScaleRangeIds(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleRangeIds> readScaleRangeIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<uint16_t> readActivationRadius(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint16_t> readActivationRadius(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_parents> readParents(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_parents> readParents(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_children> readChildren(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_children> readChildren(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::poi::reference::types::PoiCategoryId m_categoryId_;
    ::nds::poi::reference::types::PoiStandardCategory m_standardCategory_;
    ::nds::poi::types::NameStringCollection m_categoryNameStringCollection_;
    bool m_selectionEntry_;
    bool m_showInSearchTree_;
    bool m_isBrand_;
    bool m_isCollective_;
    ::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference> m_iconSetReference_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleRangeIds> m_scaleRangeIds_;
    ::zserio::InplaceOptionalHolder<uint16_t> m_activationRadius_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_parents> m_parents_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_children> m_children_;
};

} // namespace metadata
} // namespace poi
} // namespace nds

#endif // NDS_POI_METADATA_POI_CATEGORY_H
