/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_METADATA_POI_SEARCH_METADATA_H
#define NDS_POI_METADATA_POI_SEARCH_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/language/AvailableLanguages.h>
#include <nds/poi/instantiations/PoiAttributeMetadata.h>
#include <nds/poi/metadata/PoiCategory.h>
#include <nds/poi/metadata/PoiSearchFilterOptions.h>

namespace nds
{
namespace poi
{
namespace metadata
{

class PoiSearchMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getSupportedFilter()
        {
            return m_supportedFilter_;
        }

        ::nds::poi::instantiations::PoiAttributeMetadata::ZserioPackingContext& getAvailableAttributes()
        {
            return m_availableAttributes_;
        }

        ::nds::core::language::AvailableLanguages::ZserioPackingContext& getAvailableLanguages()
        {
            return m_availableLanguages_;
        }

        ::nds::poi::instantiations::PoiAttributeMetadata::ZserioPackingContext& getFilterAttributes()
        {
            return m_filterAttributes_;
        }

    private:
        ::zserio::DeltaContext m_supportedFilter_;
        ::nds::poi::instantiations::PoiAttributeMetadata::ZserioPackingContext m_availableAttributes_;
        ::nds::core::language::AvailableLanguages::ZserioPackingContext m_availableLanguages_;
        ::nds::poi::instantiations::PoiAttributeMetadata::ZserioPackingContext m_filterAttributes_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PoiSearchMetadata() noexcept :
            PoiSearchMetadata(allocator_type())
    {}

    explicit PoiSearchMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_availableCategories = ::zserio::vector<::nds::poi::metadata::PoiCategory>,
            typename ZSERIO_T_availableAttributes = ::nds::poi::instantiations::PoiAttributeMetadata,
            typename ZSERIO_T_availableLanguages = ::nds::core::language::AvailableLanguages,
            typename ZSERIO_T_filterCategories = ::zserio::vector<::nds::poi::metadata::PoiCategory>,
            typename ZSERIO_T_filterAttributes = ::nds::poi::instantiations::PoiAttributeMetadata>
    PoiSearchMetadata(
            ::nds::poi::metadata::PoiSearchFilterOptions supportedFilter_,
            ZSERIO_T_availableCategories&& availableCategories_,
            ZSERIO_T_availableAttributes&& availableAttributes_,
            ZSERIO_T_availableLanguages&& availableLanguages_,
            ZSERIO_T_filterCategories&& filterCategories_,
            ZSERIO_T_filterAttributes&& filterAttributes_,
            const allocator_type& allocator = allocator_type()) :
            PoiSearchMetadata(allocator)
    {
        m_supportedFilter_ = supportedFilter_;
        m_availableCategories_ = ZserioArrayType_availableCategories(::std::forward<ZSERIO_T_availableCategories>(availableCategories_));
        m_availableAttributes_ = ::std::forward<ZSERIO_T_availableAttributes>(availableAttributes_);
        m_availableLanguages_ = ::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_);
        m_filterCategories_ = ::zserio::createOptionalArray<ZserioArrayType_filterCategories>(::std::forward<ZSERIO_T_filterCategories>(filterCategories_));
        m_filterAttributes_ = ::std::forward<ZSERIO_T_filterAttributes>(filterAttributes_);
    }

    explicit PoiSearchMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PoiSearchMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PoiSearchMetadata() = default;

    PoiSearchMetadata(const PoiSearchMetadata&) = default;
    PoiSearchMetadata& operator=(const PoiSearchMetadata&) = default;

    PoiSearchMetadata(PoiSearchMetadata&&) = default;
    PoiSearchMetadata& operator=(PoiSearchMetadata&&) = default;

    PoiSearchMetadata(::zserio::PropagateAllocatorT,
            const PoiSearchMetadata& other, const allocator_type& allocator);

    ::nds::poi::metadata::PoiSearchFilterOptions getSupportedFilter() const;
    void setSupportedFilter(::nds::poi::metadata::PoiSearchFilterOptions supportedFilter_);

    const ::zserio::vector<::nds::poi::metadata::PoiCategory>& getAvailableCategories() const;
    ::zserio::vector<::nds::poi::metadata::PoiCategory>& getAvailableCategories();
    void setAvailableCategories(const ::zserio::vector<::nds::poi::metadata::PoiCategory>& availableCategories_);
    void setAvailableCategories(::zserio::vector<::nds::poi::metadata::PoiCategory>&& availableCategories_);

    const ::nds::poi::instantiations::PoiAttributeMetadata& getAvailableAttributes() const;
    ::nds::poi::instantiations::PoiAttributeMetadata& getAvailableAttributes();
    void setAvailableAttributes(const ::nds::poi::instantiations::PoiAttributeMetadata& availableAttributes_);
    void setAvailableAttributes(::nds::poi::instantiations::PoiAttributeMetadata&& availableAttributes_);

    const ::nds::core::language::AvailableLanguages& getAvailableLanguages() const;
    ::nds::core::language::AvailableLanguages& getAvailableLanguages();
    void setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_);
    void setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_);

    const ::zserio::vector<::nds::poi::metadata::PoiCategory>& getFilterCategories() const;
    ::zserio::vector<::nds::poi::metadata::PoiCategory>& getFilterCategories();
    void setFilterCategories(const ::zserio::vector<::nds::poi::metadata::PoiCategory>& filterCategories_);
    void setFilterCategories(::zserio::vector<::nds::poi::metadata::PoiCategory>&& filterCategories_);
    bool isFilterCategoriesUsed() const;
    bool isFilterCategoriesSet() const;
    void resetFilterCategories();

    const ::nds::poi::instantiations::PoiAttributeMetadata& getFilterAttributes() const;
    ::nds::poi::instantiations::PoiAttributeMetadata& getFilterAttributes();
    void setFilterAttributes(const ::nds::poi::instantiations::PoiAttributeMetadata& filterAttributes_);
    void setFilterAttributes(::nds::poi::instantiations::PoiAttributeMetadata&& filterAttributes_);
    bool isFilterAttributesUsed() const;
    bool isFilterAttributesSet() const;
    void resetFilterAttributes();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PoiSearchMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_availableCategories
    {
    public:
        using OwnerType = PoiSearchMetadata;

        static void create(PoiSearchMetadata& owner,
                ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(PoiSearchMetadata& owner,
                ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
                ::nds::poi::metadata::PoiCategory::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_filterCategories
    {
    public:
        using OwnerType = PoiSearchMetadata;

        static void create(PoiSearchMetadata& owner,
                ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(PoiSearchMetadata& owner,
                ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
                ::nds::poi::metadata::PoiCategory::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_availableCategories = ::zserio::Array<::zserio::vector<::nds::poi::metadata::PoiCategory>, ::zserio::ObjectArrayTraits<::nds::poi::metadata::PoiCategory, ZserioElementFactory_availableCategories>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_filterCategories = ::zserio::Array<::zserio::vector<::nds::poi::metadata::PoiCategory>, ::zserio::ObjectArrayTraits<::nds::poi::metadata::PoiCategory, ZserioElementFactory_filterCategories>, ::zserio::ArrayType::AUTO>;

    ::nds::poi::metadata::PoiSearchFilterOptions readSupportedFilter(::zserio::BitStreamReader& in);
    ::nds::poi::metadata::PoiSearchFilterOptions readSupportedFilter(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_availableCategories readAvailableCategories(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_availableCategories readAvailableCategories(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::poi::instantiations::PoiAttributeMetadata readAvailableAttributes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::poi::instantiations::PoiAttributeMetadata readAvailableAttributes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories> readFilterCategories(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories> readFilterCategories(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata> readFilterAttributes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata> readFilterAttributes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::poi::metadata::PoiSearchFilterOptions m_supportedFilter_;
    ZserioArrayType_availableCategories m_availableCategories_;
    ::nds::poi::instantiations::PoiAttributeMetadata m_availableAttributes_;
    ::nds::core::language::AvailableLanguages m_availableLanguages_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories> m_filterCategories_;
    ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata> m_filterAttributes_;
};

} // namespace metadata
} // namespace poi
} // namespace nds

#endif // NDS_POI_METADATA_POI_SEARCH_METADATA_H
