/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/metadata/PoiAttributeLayerContent.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiAttributeLayerContent::PoiAttributeLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

PoiAttributeLayerContent::PoiAttributeLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

PoiAttributeLayerContent::PoiAttributeLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'PoiAttributeLayerContent' out of bounds: ") << value << "!";
}

void PoiAttributeLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiAttributeLayerContent::underlying_type>>(m_value);
}

size_t PoiAttributeLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t PoiAttributeLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiAttributeLayerContent::underlying_type>>(m_value);
}

size_t PoiAttributeLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t PoiAttributeLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t PoiAttributeLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void PoiAttributeLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void PoiAttributeLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiAttributeLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> PoiAttributeLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & PoiAttributeLayerContent::Values::POI_ATTRIBUTE_MAPS) == PoiAttributeLayerContent::Values::POI_ATTRIBUTE_MAPS)
        result += result.empty() ? "POI_ATTRIBUTE_MAPS" : " | POI_ATTRIBUTE_MAPS";
    if ((*this & PoiAttributeLayerContent::Values::POI_ATTRIBUTE_SETS) == PoiAttributeLayerContent::Values::POI_ATTRIBUTE_SETS)
        result += result.empty() ? "POI_ATTRIBUTE_SETS" : " | POI_ATTRIBUTE_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

PoiAttributeLayerContent::underlying_type PoiAttributeLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

PoiAttributeLayerContent::underlying_type PoiAttributeLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiAttributeLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/metadata/PoiSearchFilterOptions.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiSearchFilterOptions::PoiSearchFilterOptions(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

PoiSearchFilterOptions::PoiSearchFilterOptions(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

PoiSearchFilterOptions::PoiSearchFilterOptions(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'PoiSearchFilterOptions' out of bounds: ") << value << "!";
}

void PoiSearchFilterOptions::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiSearchFilterOptions::underlying_type>>(m_value);
}

size_t PoiSearchFilterOptions::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t PoiSearchFilterOptions::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiSearchFilterOptions::underlying_type>>(m_value);
}

size_t PoiSearchFilterOptions::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t PoiSearchFilterOptions::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t PoiSearchFilterOptions::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void PoiSearchFilterOptions::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void PoiSearchFilterOptions::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiSearchFilterOptions::underlying_type>>(out, m_value);
}

::zserio::string<> PoiSearchFilterOptions::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & PoiSearchFilterOptions::Values::CATEGORY_FILTER) == PoiSearchFilterOptions::Values::CATEGORY_FILTER)
        result += result.empty() ? "CATEGORY_FILTER" : " | CATEGORY_FILTER";
    if ((*this & PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
        result += result.empty() ? "ATTRIBUTE_FILTER" : " | ATTRIBUTE_FILTER";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

PoiSearchFilterOptions::underlying_type PoiSearchFilterOptions::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

PoiSearchFilterOptions::underlying_type PoiSearchFilterOptions::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiSearchFilterOptions::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/metadata/PoiRelationLayerContent.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiRelationLayerContent::PoiRelationLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

PoiRelationLayerContent::PoiRelationLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

PoiRelationLayerContent::PoiRelationLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'PoiRelationLayerContent' out of bounds: ") << value << "!";
}

void PoiRelationLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiRelationLayerContent::underlying_type>>(m_value);
}

size_t PoiRelationLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t PoiRelationLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiRelationLayerContent::underlying_type>>(m_value);
}

size_t PoiRelationLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t PoiRelationLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t PoiRelationLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void PoiRelationLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void PoiRelationLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiRelationLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> PoiRelationLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == PoiRelationLayerContent::Values::LANE_POSITION_MAPS)
        result += result.empty() ? "LANE_POSITION_MAPS" : " | LANE_POSITION_MAPS";
    if ((*this & PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
        result += result.empty() ? "LANE_INDIRECT_POSITION_MAPS" : " | LANE_INDIRECT_POSITION_MAPS";
    if ((*this & PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == PoiRelationLayerContent::Values::ROAD_POSITION_MAPS)
        result += result.empty() ? "ROAD_POSITION_MAPS" : " | ROAD_POSITION_MAPS";
    if ((*this & PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS)
        result += result.empty() ? "ROAD_INDIRECT_POSITION_MAPS" : " | ROAD_INDIRECT_POSITION_MAPS";
    if ((*this & PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
        result += result.empty() ? "DISPLAY_AREA_MAPS" : " | DISPLAY_AREA_MAPS";
    if ((*this & PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
        result += result.empty() ? "ROAD_LOCATION_POSITION_MAPS" : " | ROAD_LOCATION_POSITION_MAPS";
    if ((*this & PoiRelationLayerContent::Values::DISPLAY_MESH_MAPS) == PoiRelationLayerContent::Values::DISPLAY_MESH_MAPS)
        result += result.empty() ? "DISPLAY_MESH_MAPS" : " | DISPLAY_MESH_MAPS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

PoiRelationLayerContent::underlying_type PoiRelationLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

PoiRelationLayerContent::underlying_type PoiRelationLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::poi::metadata::PoiRelationLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/metadata/PoiLayerMetadata.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiLayerMetadata::PoiLayerMetadata(const allocator_type& allocator) noexcept :
        m_categories_(allocator),
        m_scales_(allocator),
        m_availableLanguages_(allocator),
        m_globalIconSetReferences_(bool())
{
}

PoiLayerMetadata::PoiLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_categories_(readCategories(in, allocator)),
        m_scales_(readScales(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator)),
        m_globalIconSetReferences_(readGlobalIconSetReferences(in))
{
}

PoiLayerMetadata::PoiLayerMetadata(PoiLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_categories_(readCategories(context, in, allocator)),
        m_scales_(readScales(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator)),
        m_globalIconSetReferences_(readGlobalIconSetReferences(in))
{
}

PoiLayerMetadata::PoiLayerMetadata(::zserio::PropagateAllocatorT,
        const PoiLayerMetadata& other, const allocator_type& allocator) :
        m_categories_(::zserio::allocatorPropagatingCopy(other.m_categories_, allocator)),
        m_scales_(::zserio::allocatorPropagatingCopy(other.m_scales_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator)),
        m_globalIconSetReferences_(::zserio::allocatorPropagatingCopy(other.m_globalIconSetReferences_, allocator))
{
}

::zserio::vector<::nds::poi::metadata::PoiCategory>& PoiLayerMetadata::getCategories()
{
    return m_categories_.getRawArray();
}

const ::zserio::vector<::nds::poi::metadata::PoiCategory>& PoiLayerMetadata::getCategories() const
{
    return m_categories_.getRawArray();
}

void PoiLayerMetadata::setCategories(const ::zserio::vector<::nds::poi::metadata::PoiCategory>& categories_)
{
    m_categories_ = ZserioArrayType_categories(categories_);
}

void PoiLayerMetadata::setCategories(::zserio::vector<::nds::poi::metadata::PoiCategory>&& categories_)
{
    m_categories_ = ZserioArrayType_categories(std::move(categories_));
}

::nds::core::types::ScaleRangeList& PoiLayerMetadata::getScales()
{
    return m_scales_;
}

const ::nds::core::types::ScaleRangeList& PoiLayerMetadata::getScales() const
{
    return m_scales_;
}

void PoiLayerMetadata::setScales(const ::nds::core::types::ScaleRangeList& scales_)
{
    m_scales_ = scales_;
}

void PoiLayerMetadata::setScales(::nds::core::types::ScaleRangeList&& scales_)
{
    m_scales_ = ::std::move(scales_);
}

::nds::core::language::AvailableLanguages& PoiLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& PoiLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void PoiLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void PoiLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

bool PoiLayerMetadata::getGlobalIconSetReferences() const
{
    return m_globalIconSetReferences_;
}

void PoiLayerMetadata::setGlobalIconSetReferences(bool globalIconSetReferences_)
{
    m_globalIconSetReferences_ = globalIconSetReferences_;
}

void PoiLayerMetadata::initPackingContext(PoiLayerMetadata::ZserioPackingContext& context) const
{
    m_scales_.initPackingContext(context.getScales());
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
}

size_t PoiLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_categories_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_scales_.bitSizeOf(endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t PoiLayerMetadata::bitSizeOf(PoiLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_categories_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_scales_.bitSizeOf(context.getScales(), endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t PoiLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_categories_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_scales_.initializeOffsets(endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t PoiLayerMetadata::initializeOffsets(PoiLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_categories_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_scales_.initializeOffsets(context.getScales(), endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool PoiLayerMetadata::operator==(const PoiLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_categories_ == other.m_categories_) &&
                (m_scales_ == other.m_scales_) &&
                (m_availableLanguages_ == other.m_availableLanguages_) &&
                (m_globalIconSetReferences_ == other.m_globalIconSetReferences_);
    }

    return true;
}

uint32_t PoiLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_categories_);
    result = ::zserio::calcHashCode(result, m_scales_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);
    result = ::zserio::calcHashCode(result, m_globalIconSetReferences_);

    return result;
}

void PoiLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_categories_.write(*this, out);
    m_scales_.write(out);
    m_availableLanguages_.write(out);
    out.writeBool(m_globalIconSetReferences_);
}

void PoiLayerMetadata::write(PoiLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_categories_.writePacked(*this, out);
    m_scales_.write(context.getScales(), out);
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
    out.writeBool(m_globalIconSetReferences_);
}

void PoiLayerMetadata::ZserioElementFactory_categories::create(PoiLayerMetadata&        ,
        ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PoiLayerMetadata::ZserioElementFactory_categories::create(PoiLayerMetadata&        ,
        ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
        ::nds::poi::metadata::PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

PoiLayerMetadata::ZserioArrayType_categories PoiLayerMetadata::readCategories(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_categories readField(allocator);
    readField.read(*this, in);

    return readField;
}

PoiLayerMetadata::ZserioArrayType_categories PoiLayerMetadata::readCategories(PoiLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_categories readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::nds::core::types::ScaleRangeList PoiLayerMetadata::readScales(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::types::ScaleRangeList(in, allocator);
}

::nds::core::types::ScaleRangeList PoiLayerMetadata::readScales(PoiLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::types::ScaleRangeList(context.getScales(), in, allocator);
}
::nds::core::language::AvailableLanguages PoiLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages PoiLayerMetadata::readAvailableLanguages(PoiLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}
bool PoiLayerMetadata::readGlobalIconSetReferences(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/metadata/PoiCategory.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiCategory::PoiCategory(const allocator_type& allocator) noexcept :
        m_categoryId_(::nds::poi::reference::types::PoiCategoryId()),
        m_standardCategory_(::nds::poi::reference::types::PoiStandardCategory()),
        m_categoryNameStringCollection_(allocator),
        m_selectionEntry_(bool()),
        m_showInSearchTree_(bool()),
        m_isBrand_(bool()),
        m_isCollective_(bool()),
        m_iconSetReference_(::zserio::NullOpt),
        m_scaleRangeIds_(::zserio::NullOpt),
        m_activationRadius_(::zserio::NullOpt),
        m_parents_(::zserio::NullOpt),
        m_children_(::zserio::NullOpt)
{
}

PoiCategory::PoiCategory(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_categoryId_(readCategoryId(in)),
        m_standardCategory_(readStandardCategory(in)),
        m_categoryNameStringCollection_(readCategoryNameStringCollection(in, allocator)),
        m_selectionEntry_(readSelectionEntry(in)),
        m_showInSearchTree_(readShowInSearchTree(in)),
        m_isBrand_(readIsBrand(in)),
        m_isCollective_(readIsCollective(in)),
        m_iconSetReference_(readIconSetReference(in)),
        m_scaleRangeIds_(readScaleRangeIds(in, allocator)),
        m_activationRadius_(readActivationRadius(in)),
        m_parents_(readParents(in, allocator)),
        m_children_(readChildren(in, allocator))
{
}

PoiCategory::PoiCategory(PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_categoryId_(readCategoryId(context, in)),
        m_standardCategory_(readStandardCategory(context, in)),
        m_categoryNameStringCollection_(readCategoryNameStringCollection(context, in, allocator)),
        m_selectionEntry_(readSelectionEntry(in)),
        m_showInSearchTree_(readShowInSearchTree(in)),
        m_isBrand_(readIsBrand(in)),
        m_isCollective_(readIsCollective(in)),
        m_iconSetReference_(readIconSetReference(context, in)),
        m_scaleRangeIds_(readScaleRangeIds(context, in, allocator)),
        m_activationRadius_(readActivationRadius(context, in)),
        m_parents_(readParents(context, in, allocator)),
        m_children_(readChildren(context, in, allocator))
{
}

PoiCategory::PoiCategory(::zserio::PropagateAllocatorT,
        const PoiCategory& other, const allocator_type& allocator) :
        m_categoryId_(::zserio::allocatorPropagatingCopy(other.m_categoryId_, allocator)),
        m_standardCategory_(::zserio::allocatorPropagatingCopy(other.m_standardCategory_, allocator)),
        m_categoryNameStringCollection_(::zserio::allocatorPropagatingCopy(other.m_categoryNameStringCollection_, allocator)),
        m_selectionEntry_(::zserio::allocatorPropagatingCopy(other.m_selectionEntry_, allocator)),
        m_showInSearchTree_(::zserio::allocatorPropagatingCopy(other.m_showInSearchTree_, allocator)),
        m_isBrand_(::zserio::allocatorPropagatingCopy(other.m_isBrand_, allocator)),
        m_isCollective_(::zserio::allocatorPropagatingCopy(other.m_isCollective_, allocator)),
        m_iconSetReference_(::zserio::allocatorPropagatingCopy(other.m_iconSetReference_, allocator)),
        m_scaleRangeIds_(::zserio::allocatorPropagatingCopy(other.m_scaleRangeIds_, allocator)),
        m_activationRadius_(::zserio::allocatorPropagatingCopy(other.m_activationRadius_, allocator)),
        m_parents_(::zserio::allocatorPropagatingCopy(other.m_parents_, allocator)),
        m_children_(::zserio::allocatorPropagatingCopy(other.m_children_, allocator))
{
}

::nds::poi::reference::types::PoiCategoryId PoiCategory::getCategoryId() const
{
    return m_categoryId_;
}

void PoiCategory::setCategoryId(::nds::poi::reference::types::PoiCategoryId categoryId_)
{
    m_categoryId_ = categoryId_;
}

::nds::poi::reference::types::PoiStandardCategory PoiCategory::getStandardCategory() const
{
    return m_standardCategory_;
}

void PoiCategory::setStandardCategory(::nds::poi::reference::types::PoiStandardCategory standardCategory_)
{
    m_standardCategory_ = standardCategory_;
}

::nds::poi::types::NameStringCollection& PoiCategory::getCategoryNameStringCollection()
{
    return m_categoryNameStringCollection_;
}

const ::nds::poi::types::NameStringCollection& PoiCategory::getCategoryNameStringCollection() const
{
    return m_categoryNameStringCollection_;
}

void PoiCategory::setCategoryNameStringCollection(const ::nds::poi::types::NameStringCollection& categoryNameStringCollection_)
{
    m_categoryNameStringCollection_ = categoryNameStringCollection_;
}

void PoiCategory::setCategoryNameStringCollection(::nds::poi::types::NameStringCollection&& categoryNameStringCollection_)
{
    m_categoryNameStringCollection_ = ::std::move(categoryNameStringCollection_);
}

bool PoiCategory::getSelectionEntry() const
{
    return m_selectionEntry_;
}

void PoiCategory::setSelectionEntry(bool selectionEntry_)
{
    m_selectionEntry_ = selectionEntry_;
}

bool PoiCategory::getShowInSearchTree() const
{
    return m_showInSearchTree_;
}

void PoiCategory::setShowInSearchTree(bool showInSearchTree_)
{
    m_showInSearchTree_ = showInSearchTree_;
}

bool PoiCategory::getIsBrand() const
{
    return m_isBrand_;
}

void PoiCategory::setIsBrand(bool isBrand_)
{
    m_isBrand_ = isBrand_;
}

bool PoiCategory::getIsCollective() const
{
    return m_isCollective_;
}

void PoiCategory::setIsCollective(bool isCollective_)
{
    m_isCollective_ = isCollective_;
}

::nds::poi::types::CategoryIconSetReference PoiCategory::getIconSetReference() const
{
    return m_iconSetReference_.value();
}

void PoiCategory::setIconSetReference(::nds::poi::types::CategoryIconSetReference iconSetReference_)
{
    m_iconSetReference_ = iconSetReference_;
}

bool PoiCategory::isIconSetReferenceUsed() const
{
    return (isIconSetReferenceSet());
}

bool PoiCategory::isIconSetReferenceSet() const
{
    return m_iconSetReference_.hasValue();
}

void PoiCategory::resetIconSetReference()
{
    m_iconSetReference_.reset();
}

::zserio::vector<::nds::core::types::ScaleRangeId>& PoiCategory::getScaleRangeIds()
{
    return m_scaleRangeIds_.value().getRawArray();
}

const ::zserio::vector<::nds::core::types::ScaleRangeId>& PoiCategory::getScaleRangeIds() const
{
    return m_scaleRangeIds_.value().getRawArray();
}

void PoiCategory::setScaleRangeIds(const ::zserio::vector<::nds::core::types::ScaleRangeId>& scaleRangeIds_)
{
    m_scaleRangeIds_ = ZserioArrayType_scaleRangeIds(scaleRangeIds_);
}

void PoiCategory::setScaleRangeIds(::zserio::vector<::nds::core::types::ScaleRangeId>&& scaleRangeIds_)
{
    m_scaleRangeIds_ = ZserioArrayType_scaleRangeIds(std::move(scaleRangeIds_));
}

bool PoiCategory::isScaleRangeIdsUsed() const
{
    return (isScaleRangeIdsSet());
}

bool PoiCategory::isScaleRangeIdsSet() const
{
    return m_scaleRangeIds_.hasValue();
}

void PoiCategory::resetScaleRangeIds()
{
    m_scaleRangeIds_.reset();
}

uint16_t PoiCategory::getActivationRadius() const
{
    return m_activationRadius_.value();
}

void PoiCategory::setActivationRadius(uint16_t activationRadius_)
{
    m_activationRadius_ = activationRadius_;
}

bool PoiCategory::isActivationRadiusUsed() const
{
    return (isActivationRadiusSet());
}

bool PoiCategory::isActivationRadiusSet() const
{
    return m_activationRadius_.hasValue();
}

void PoiCategory::resetActivationRadius()
{
    m_activationRadius_.reset();
}

::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& PoiCategory::getParents()
{
    return m_parents_.value().getRawArray();
}

const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& PoiCategory::getParents() const
{
    return m_parents_.value().getRawArray();
}

void PoiCategory::setParents(const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& parents_)
{
    m_parents_ = ZserioArrayType_parents(parents_);
}

void PoiCategory::setParents(::zserio::vector<::nds::poi::reference::types::PoiCategoryId>&& parents_)
{
    m_parents_ = ZserioArrayType_parents(std::move(parents_));
}

bool PoiCategory::isParentsUsed() const
{
    return (isParentsSet());
}

bool PoiCategory::isParentsSet() const
{
    return m_parents_.hasValue();
}

void PoiCategory::resetParents()
{
    m_parents_.reset();
}

::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& PoiCategory::getChildren()
{
    return m_children_.value().getRawArray();
}

const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& PoiCategory::getChildren() const
{
    return m_children_.value().getRawArray();
}

void PoiCategory::setChildren(const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& children_)
{
    m_children_ = ZserioArrayType_children(children_);
}

void PoiCategory::setChildren(::zserio::vector<::nds::poi::reference::types::PoiCategoryId>&& children_)
{
    m_children_ = ZserioArrayType_children(std::move(children_));
}

bool PoiCategory::isChildrenUsed() const
{
    return (isChildrenSet());
}

bool PoiCategory::isChildrenSet() const
{
    return m_children_.hasValue();
}

void PoiCategory::resetChildren()
{
    m_children_.reset();
}

void PoiCategory::initPackingContext(PoiCategory::ZserioPackingContext& context) const
{
    context.getCategoryId().init<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(m_categoryId_);
    ::zserio::initPackingContext(context.getStandardCategory(), m_standardCategory_);
    m_categoryNameStringCollection_.initPackingContext(context.getCategoryNameStringCollection());
    if (isIconSetReferenceSet())
    {
        context.getIconSetReference().init<::zserio::VarIntArrayTraits<::nds::poi::types::CategoryIconSetReference>>(m_iconSetReference_.value());
    }
    if (isActivationRadiusSet())
    {
        context.getActivationRadius().init<::zserio::StdIntArrayTraits<uint16_t>>(m_activationRadius_.value());
    }
}

size_t PoiCategory::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_categoryId_);
    endBitPosition += ::zserio::bitSizeOf(m_standardCategory_);
    endBitPosition += m_categoryNameStringCollection_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += 1;
    if (isIconSetReferenceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_iconSetReference_.value());
    }
    endBitPosition += 1;
    if (isScaleRangeIdsSet())
    {
        endBitPosition += m_scaleRangeIds_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += 1;
    if (isActivationRadiusSet())
    {
        endBitPosition += UINT8_C(16);
    }
    endBitPosition += 1;
    if (isParentsSet())
    {
        endBitPosition += m_parents_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += 1;
    if (isChildrenSet())
    {
        endBitPosition += m_children_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiCategory::bitSizeOf(PoiCategory::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCategoryId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(m_categoryId_);
    endBitPosition += ::zserio::bitSizeOf(context.getStandardCategory(), m_standardCategory_);
    endBitPosition += m_categoryNameStringCollection_.bitSizeOf(context.getCategoryNameStringCollection(), endBitPosition);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += 1;
    if (isIconSetReferenceSet())
    {
        endBitPosition += context.getIconSetReference().bitSizeOf<::zserio::VarIntArrayTraits<::nds::poi::types::CategoryIconSetReference>>(m_iconSetReference_.value());
    }
    endBitPosition += 1;
    if (isScaleRangeIdsSet())
    {
        endBitPosition += m_scaleRangeIds_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition += 1;
    if (isActivationRadiusSet())
    {
        endBitPosition += context.getActivationRadius().bitSizeOf<::zserio::StdIntArrayTraits<uint16_t>>(m_activationRadius_.value());
    }
    endBitPosition += 1;
    if (isParentsSet())
    {
        endBitPosition += m_parents_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition += 1;
    if (isChildrenSet())
    {
        endBitPosition += m_children_.value().bitSizeOfPacked(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiCategory::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_categoryId_);
    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_standardCategory_);
    endBitPosition = m_categoryNameStringCollection_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += 1;
    if (isIconSetReferenceSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt(m_iconSetReference_.value());
    }
    endBitPosition += 1;
    if (isScaleRangeIdsSet())
    {
        endBitPosition = m_scaleRangeIds_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition += 1;
    if (isActivationRadiusSet())
    {
        endBitPosition += UINT8_C(16);
    }
    endBitPosition += 1;
    if (isParentsSet())
    {
        endBitPosition = m_parents_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition += 1;
    if (isChildrenSet())
    {
        endBitPosition = m_children_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t PoiCategory::initializeOffsets(PoiCategory::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCategoryId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(m_categoryId_);
    endBitPosition = ::zserio::initializeOffsets(context.getStandardCategory(), endBitPosition,
        m_standardCategory_);
    endBitPosition = m_categoryNameStringCollection_.initializeOffsets(context.getCategoryNameStringCollection(), endBitPosition);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += 1;
    if (isIconSetReferenceSet())
    {
        endBitPosition += context.getIconSetReference().bitSizeOf<::zserio::VarIntArrayTraits<::nds::poi::types::CategoryIconSetReference>>(m_iconSetReference_.value());
    }
    endBitPosition += 1;
    if (isScaleRangeIdsSet())
    {
        endBitPosition = m_scaleRangeIds_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition += 1;
    if (isActivationRadiusSet())
    {
        endBitPosition += context.getActivationRadius().bitSizeOf<::zserio::StdIntArrayTraits<uint16_t>>(m_activationRadius_.value());
    }
    endBitPosition += 1;
    if (isParentsSet())
    {
        endBitPosition = m_parents_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition += 1;
    if (isChildrenSet())
    {
        endBitPosition = m_children_.value().initializeOffsetsPacked(endBitPosition);
    }

    return endBitPosition;
}

bool PoiCategory::operator==(const PoiCategory& other) const
{
    if (this != &other)
    {
        return
                (m_categoryId_ == other.m_categoryId_) &&
                (m_standardCategory_ == other.m_standardCategory_) &&
                (m_categoryNameStringCollection_ == other.m_categoryNameStringCollection_) &&
                (m_selectionEntry_ == other.m_selectionEntry_) &&
                (m_showInSearchTree_ == other.m_showInSearchTree_) &&
                (m_isBrand_ == other.m_isBrand_) &&
                (m_isCollective_ == other.m_isCollective_) &&
                (!isIconSetReferenceUsed() ? !other.isIconSetReferenceUsed() : (m_iconSetReference_ == other.m_iconSetReference_)) &&
                (!isScaleRangeIdsUsed() ? !other.isScaleRangeIdsUsed() : (m_scaleRangeIds_ == other.m_scaleRangeIds_)) &&
                (!isActivationRadiusUsed() ? !other.isActivationRadiusUsed() : (m_activationRadius_ == other.m_activationRadius_)) &&
                (!isParentsUsed() ? !other.isParentsUsed() : (m_parents_ == other.m_parents_)) &&
                (!isChildrenUsed() ? !other.isChildrenUsed() : (m_children_ == other.m_children_));
    }

    return true;
}

uint32_t PoiCategory::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_categoryId_);
    result = ::zserio::calcHashCode(result, m_standardCategory_);
    result = ::zserio::calcHashCode(result, m_categoryNameStringCollection_);
    result = ::zserio::calcHashCode(result, m_selectionEntry_);
    result = ::zserio::calcHashCode(result, m_showInSearchTree_);
    result = ::zserio::calcHashCode(result, m_isBrand_);
    result = ::zserio::calcHashCode(result, m_isCollective_);
    if (isIconSetReferenceUsed())
        result = ::zserio::calcHashCode(result, m_iconSetReference_);
    if (isScaleRangeIdsUsed())
        result = ::zserio::calcHashCode(result, m_scaleRangeIds_);
    if (isActivationRadiusUsed())
        result = ::zserio::calcHashCode(result, m_activationRadius_);
    if (isParentsUsed())
        result = ::zserio::calcHashCode(result, m_parents_);
    if (isChildrenUsed())
        result = ::zserio::calcHashCode(result, m_children_);

    return result;
}

void PoiCategory::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_categoryId_);
    ::zserio::write(out, m_standardCategory_);
    m_categoryNameStringCollection_.write(out);
    out.writeBool(m_selectionEntry_);
    out.writeBool(m_showInSearchTree_);
    out.writeBool(m_isBrand_);
    out.writeBool(m_isCollective_);
    if (isIconSetReferenceSet())
    {
        out.writeBool(true);
        out.writeVarUInt(m_iconSetReference_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isScaleRangeIdsSet())
    {
        out.writeBool(true);
        m_scaleRangeIds_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
    if (isActivationRadiusSet())
    {
        out.writeBool(true);
        out.writeBits(m_activationRadius_.value(), UINT8_C(16));
    }
    else
    {
        out.writeBool(false);
    }
    if (isParentsSet())
    {
        out.writeBool(true);
        m_parents_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
    if (isChildrenSet())
    {
        out.writeBool(true);
        m_children_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
}

void PoiCategory::write(PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getCategoryId().write<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(out, m_categoryId_);
    ::zserio::write(context.getStandardCategory(), out, m_standardCategory_);
    m_categoryNameStringCollection_.write(context.getCategoryNameStringCollection(), out);
    out.writeBool(m_selectionEntry_);
    out.writeBool(m_showInSearchTree_);
    out.writeBool(m_isBrand_);
    out.writeBool(m_isCollective_);
    if (isIconSetReferenceSet())
    {
        out.writeBool(true);
        context.getIconSetReference().write<::zserio::VarIntArrayTraits<::nds::poi::types::CategoryIconSetReference>>(out, m_iconSetReference_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isScaleRangeIdsSet())
    {
        out.writeBool(true);
        m_scaleRangeIds_.value().writePacked(out);
    }
    else
    {
        out.writeBool(false);
    }
    if (isActivationRadiusSet())
    {
        out.writeBool(true);
        context.getActivationRadius().write<::zserio::StdIntArrayTraits<uint16_t>>(out, m_activationRadius_.value());
    }
    else
    {
        out.writeBool(false);
    }
    if (isParentsSet())
    {
        out.writeBool(true);
        m_parents_.value().writePacked(out);
    }
    else
    {
        out.writeBool(false);
    }
    if (isChildrenSet())
    {
        out.writeBool(true);
        m_children_.value().writePacked(out);
    }
    else
    {
        out.writeBool(false);
    }
}

::nds::poi::reference::types::PoiCategoryId PoiCategory::readCategoryId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::poi::reference::types::PoiCategoryId>(in.readVarUInt32());
}

::nds::poi::reference::types::PoiCategoryId PoiCategory::readCategoryId(PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCategoryId().read<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(in);
}
::nds::poi::reference::types::PoiStandardCategory PoiCategory::readStandardCategory(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::poi::reference::types::PoiStandardCategory>(in);
}

::nds::poi::reference::types::PoiStandardCategory PoiCategory::readStandardCategory(PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::poi::reference::types::PoiStandardCategory>(context.getStandardCategory(), in);
}
::nds::poi::types::NameStringCollection PoiCategory::readCategoryNameStringCollection(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::poi::types::NameStringCollection(in, allocator);
}

::nds::poi::types::NameStringCollection PoiCategory::readCategoryNameStringCollection(PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::poi::types::NameStringCollection(context.getCategoryNameStringCollection(), in, allocator);
}
bool PoiCategory::readSelectionEntry(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool PoiCategory::readShowInSearchTree(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool PoiCategory::readIsBrand(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool PoiCategory::readIsCollective(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference> PoiCategory::readIconSetReference(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference>(static_cast<::nds::poi::types::CategoryIconSetReference>(in.readVarUInt()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference> PoiCategory::readIconSetReference(PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference>(context.getIconSetReference().read<::zserio::VarIntArrayTraits<::nds::poi::types::CategoryIconSetReference>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::types::CategoryIconSetReference>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<PoiCategory::ZserioArrayType_scaleRangeIds> PoiCategory::readScaleRangeIds(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_scaleRangeIds readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleRangeIds>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleRangeIds>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiCategory::ZserioArrayType_scaleRangeIds> PoiCategory::readScaleRangeIds(PoiCategory::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_scaleRangeIds readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleRangeIds>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleRangeIds>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<uint16_t> PoiCategory::readActivationRadius(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint16_t>(static_cast<uint16_t>(in.readBits(UINT8_C(16))));
    }

    return ::zserio::InplaceOptionalHolder<uint16_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint16_t> PoiCategory::readActivationRadius(PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<uint16_t>(context.getActivationRadius().read<::zserio::StdIntArrayTraits<uint16_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint16_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<PoiCategory::ZserioArrayType_parents> PoiCategory::readParents(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_parents readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_parents>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_parents>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiCategory::ZserioArrayType_parents> PoiCategory::readParents(PoiCategory::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_parents readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_parents>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_parents>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<PoiCategory::ZserioArrayType_children> PoiCategory::readChildren(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_children readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_children>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_children>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiCategory::ZserioArrayType_children> PoiCategory::readChildren(PoiCategory::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_children readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_children>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_children>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/metadata/PoiAttributeLayerMetadata.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiAttributeLayerMetadata::PoiAttributeLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::poi::metadata::PoiAttributeLayerContent()),
        m_attributeValueIconMap_(allocator),
        m_poiAttributeMetadata_(allocator),
        m_availableLanguages_(allocator),
        m_globalIconSetReferences_(bool())
{
}

PoiAttributeLayerMetadata::PoiAttributeLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_attributeValueIconMap_(readAttributeValueIconMap(in, allocator)),
        m_poiAttributeMetadata_(readPoiAttributeMetadata(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator)),
        m_globalIconSetReferences_(readGlobalIconSetReferences(in))
{
}

PoiAttributeLayerMetadata::PoiAttributeLayerMetadata(PoiAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_attributeValueIconMap_(readAttributeValueIconMap(context, in, allocator)),
        m_poiAttributeMetadata_(readPoiAttributeMetadata(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator)),
        m_globalIconSetReferences_(readGlobalIconSetReferences(in))
{
}

PoiAttributeLayerMetadata::PoiAttributeLayerMetadata(::zserio::PropagateAllocatorT,
        const PoiAttributeLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_attributeValueIconMap_(::zserio::allocatorPropagatingCopy(other.m_attributeValueIconMap_, allocator)),
        m_poiAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_poiAttributeMetadata_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator)),
        m_globalIconSetReferences_(::zserio::allocatorPropagatingCopy(other.m_globalIconSetReferences_, allocator))
{
}

::nds::poi::metadata::PoiAttributeLayerContent PoiAttributeLayerMetadata::getContent() const
{
    return m_content_;
}

void PoiAttributeLayerMetadata::setContent(::nds::poi::metadata::PoiAttributeLayerContent content_)
{
    m_content_ = content_;
}

::nds::poi::metadata::AttributeValueIconMap& PoiAttributeLayerMetadata::getAttributeValueIconMap()
{
    return m_attributeValueIconMap_;
}

const ::nds::poi::metadata::AttributeValueIconMap& PoiAttributeLayerMetadata::getAttributeValueIconMap() const
{
    return m_attributeValueIconMap_;
}

void PoiAttributeLayerMetadata::setAttributeValueIconMap(const ::nds::poi::metadata::AttributeValueIconMap& attributeValueIconMap_)
{
    m_attributeValueIconMap_ = attributeValueIconMap_;
}

void PoiAttributeLayerMetadata::setAttributeValueIconMap(::nds::poi::metadata::AttributeValueIconMap&& attributeValueIconMap_)
{
    m_attributeValueIconMap_ = ::std::move(attributeValueIconMap_);
}

::nds::poi::instantiations::PoiAttributeMetadata& PoiAttributeLayerMetadata::getPoiAttributeMetadata()
{
    return m_poiAttributeMetadata_;
}

const ::nds::poi::instantiations::PoiAttributeMetadata& PoiAttributeLayerMetadata::getPoiAttributeMetadata() const
{
    return m_poiAttributeMetadata_;
}

void PoiAttributeLayerMetadata::setPoiAttributeMetadata(const ::nds::poi::instantiations::PoiAttributeMetadata& poiAttributeMetadata_)
{
    m_poiAttributeMetadata_ = poiAttributeMetadata_;
}

void PoiAttributeLayerMetadata::setPoiAttributeMetadata(::nds::poi::instantiations::PoiAttributeMetadata&& poiAttributeMetadata_)
{
    m_poiAttributeMetadata_ = ::std::move(poiAttributeMetadata_);
}

::nds::core::language::AvailableLanguages& PoiAttributeLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& PoiAttributeLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void PoiAttributeLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void PoiAttributeLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

bool PoiAttributeLayerMetadata::getGlobalIconSetReferences() const
{
    return m_globalIconSetReferences_;
}

void PoiAttributeLayerMetadata::setGlobalIconSetReferences(bool globalIconSetReferences_)
{
    m_globalIconSetReferences_ = globalIconSetReferences_;
}

void PoiAttributeLayerMetadata::initPackingContext(PoiAttributeLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    m_attributeValueIconMap_.initPackingContext(context.getAttributeValueIconMap());
    m_poiAttributeMetadata_.initPackingContext(context.getPoiAttributeMetadata());
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
}

size_t PoiAttributeLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += m_attributeValueIconMap_.bitSizeOf(endBitPosition);
    endBitPosition += m_poiAttributeMetadata_.bitSizeOf(endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t PoiAttributeLayerMetadata::bitSizeOf(PoiAttributeLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += m_attributeValueIconMap_.bitSizeOf(context.getAttributeValueIconMap(), endBitPosition);
    endBitPosition += m_poiAttributeMetadata_.bitSizeOf(context.getPoiAttributeMetadata(), endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t PoiAttributeLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition = m_attributeValueIconMap_.initializeOffsets(endBitPosition);
    endBitPosition = m_poiAttributeMetadata_.initializeOffsets(endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

size_t PoiAttributeLayerMetadata::initializeOffsets(PoiAttributeLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition = m_attributeValueIconMap_.initializeOffsets(context.getAttributeValueIconMap(), endBitPosition);
    endBitPosition = m_poiAttributeMetadata_.initializeOffsets(context.getPoiAttributeMetadata(), endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool PoiAttributeLayerMetadata::operator==(const PoiAttributeLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_attributeValueIconMap_ == other.m_attributeValueIconMap_) &&
                (m_poiAttributeMetadata_ == other.m_poiAttributeMetadata_) &&
                (m_availableLanguages_ == other.m_availableLanguages_) &&
                (m_globalIconSetReferences_ == other.m_globalIconSetReferences_);
    }

    return true;
}

uint32_t PoiAttributeLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_attributeValueIconMap_);
    result = ::zserio::calcHashCode(result, m_poiAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);
    result = ::zserio::calcHashCode(result, m_globalIconSetReferences_);

    return result;
}

void PoiAttributeLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    m_attributeValueIconMap_.write(out);
    m_poiAttributeMetadata_.write(out);
    m_availableLanguages_.write(out);
    out.writeBool(m_globalIconSetReferences_);
}

void PoiAttributeLayerMetadata::write(PoiAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    m_attributeValueIconMap_.write(context.getAttributeValueIconMap(), out);
    m_poiAttributeMetadata_.write(context.getPoiAttributeMetadata(), out);
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
    out.writeBool(m_globalIconSetReferences_);
}

::nds::poi::metadata::PoiAttributeLayerContent PoiAttributeLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::poi::metadata::PoiAttributeLayerContent(in);
}

::nds::poi::metadata::PoiAttributeLayerContent PoiAttributeLayerMetadata::readContent(PoiAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::poi::metadata::PoiAttributeLayerContent(context.getContent(), in);
}
::nds::poi::metadata::AttributeValueIconMap PoiAttributeLayerMetadata::readAttributeValueIconMap(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::poi::metadata::AttributeValueIconMap(in, allocator);
}

::nds::poi::metadata::AttributeValueIconMap PoiAttributeLayerMetadata::readAttributeValueIconMap(PoiAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::poi::metadata::AttributeValueIconMap(context.getAttributeValueIconMap(), in, allocator);
}
::nds::poi::instantiations::PoiAttributeMetadata PoiAttributeLayerMetadata::readPoiAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::poi::instantiations::PoiAttributeMetadata(in, allocator);
}

::nds::poi::instantiations::PoiAttributeMetadata PoiAttributeLayerMetadata::readPoiAttributeMetadata(PoiAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::poi::instantiations::PoiAttributeMetadata(context.getPoiAttributeMetadata(), in, allocator);
}
::nds::core::language::AvailableLanguages PoiAttributeLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages PoiAttributeLayerMetadata::readAvailableLanguages(PoiAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}
bool PoiAttributeLayerMetadata::readGlobalIconSetReferences(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/metadata/AttributeValueIconMap.h>

namespace nds
{
namespace poi
{
namespace metadata
{

AttributeValueIconMap::AttributeValueIconMap(const allocator_type& allocator) noexcept :
        m_numEntries_(uint32_t()),
        m_type_(allocator),
        m_enumValue_(allocator),
        m_iconSetReference_(allocator)
{
}

AttributeValueIconMap::AttributeValueIconMap(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numEntries_(readNumEntries(in)),
        m_type_(readType(in, allocator)),
        m_enumValue_(readEnumValue(in, allocator)),
        m_iconSetReference_(readIconSetReference(in, allocator))
{
}

AttributeValueIconMap::AttributeValueIconMap(AttributeValueIconMap::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numEntries_(readNumEntries(context, in)),
        m_type_(readType(context, in, allocator)),
        m_enumValue_(readEnumValue(context, in, allocator)),
        m_iconSetReference_(readIconSetReference(context, in, allocator))
{
}

AttributeValueIconMap::AttributeValueIconMap(::zserio::PropagateAllocatorT,
        const AttributeValueIconMap& other, const allocator_type& allocator) :
        m_numEntries_(::zserio::allocatorPropagatingCopy(other.m_numEntries_, allocator)),
        m_type_(::zserio::allocatorPropagatingCopy(other.m_type_, allocator)),
        m_enumValue_(::zserio::allocatorPropagatingCopy(other.m_enumValue_, allocator)),
        m_iconSetReference_(::zserio::allocatorPropagatingCopy(other.m_iconSetReference_, allocator))
{
}

uint32_t AttributeValueIconMap::getNumEntries() const
{
    return m_numEntries_;
}

void AttributeValueIconMap::setNumEntries(uint32_t numEntries_)
{
    m_numEntries_ = numEntries_;
}

::zserio::vector<::nds::poi::attributes::PoiAttributeType>& AttributeValueIconMap::getType()
{
    return m_type_.getRawArray();
}

const ::zserio::vector<::nds::poi::attributes::PoiAttributeType>& AttributeValueIconMap::getType() const
{
    return m_type_.getRawArray();
}

void AttributeValueIconMap::setType(const ::zserio::vector<::nds::poi::attributes::PoiAttributeType>& type_)
{
    m_type_ = ZserioArrayType_type(type_);
}

void AttributeValueIconMap::setType(::zserio::vector<::nds::poi::attributes::PoiAttributeType>&& type_)
{
    m_type_ = ZserioArrayType_type(std::move(type_));
}

::zserio::vector<uint32_t>& AttributeValueIconMap::getEnumValue()
{
    return m_enumValue_.getRawArray();
}

const ::zserio::vector<uint32_t>& AttributeValueIconMap::getEnumValue() const
{
    return m_enumValue_.getRawArray();
}

void AttributeValueIconMap::setEnumValue(const ::zserio::vector<uint32_t>& enumValue_)
{
    m_enumValue_ = ZserioArrayType_enumValue(enumValue_);
}

void AttributeValueIconMap::setEnumValue(::zserio::vector<uint32_t>&& enumValue_)
{
    m_enumValue_ = ZserioArrayType_enumValue(std::move(enumValue_));
}

::zserio::vector<::nds::poi::types::PoiAttributeIconSetReference>& AttributeValueIconMap::getIconSetReference()
{
    return m_iconSetReference_.getRawArray();
}

const ::zserio::vector<::nds::poi::types::PoiAttributeIconSetReference>& AttributeValueIconMap::getIconSetReference() const
{
    return m_iconSetReference_.getRawArray();
}

void AttributeValueIconMap::setIconSetReference(const ::zserio::vector<::nds::poi::types::PoiAttributeIconSetReference>& iconSetReference_)
{
    m_iconSetReference_ = ZserioArrayType_iconSetReference(iconSetReference_);
}

void AttributeValueIconMap::setIconSetReference(::zserio::vector<::nds::poi::types::PoiAttributeIconSetReference>&& iconSetReference_)
{
    m_iconSetReference_ = ZserioArrayType_iconSetReference(std::move(iconSetReference_));
}

void AttributeValueIconMap::initPackingContext(AttributeValueIconMap::ZserioPackingContext& context) const
{
    context.getNumEntries().init<::zserio::VarSizeArrayTraits>(m_numEntries_);
}

size_t AttributeValueIconMap::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numEntries_);
    endBitPosition += m_type_.bitSizeOf(endBitPosition);
    endBitPosition += m_enumValue_.bitSizeOf(endBitPosition);
    endBitPosition += m_iconSetReference_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AttributeValueIconMap::bitSizeOf(AttributeValueIconMap::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumEntries().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numEntries_);
    endBitPosition += m_type_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_enumValue_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_iconSetReference_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AttributeValueIconMap::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numEntries_);
    endBitPosition = m_type_.initializeOffsets(endBitPosition);
    endBitPosition = m_enumValue_.initializeOffsets(endBitPosition);
    endBitPosition = m_iconSetReference_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t AttributeValueIconMap::initializeOffsets(AttributeValueIconMap::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumEntries().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numEntries_);
    endBitPosition = m_type_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_enumValue_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_iconSetReference_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool AttributeValueIconMap::operator==(const AttributeValueIconMap& other) const
{
    if (this != &other)
    {
        return
                (m_numEntries_ == other.m_numEntries_) &&
                (m_type_ == other.m_type_) &&
                (m_enumValue_ == other.m_enumValue_) &&
                (m_iconSetReference_ == other.m_iconSetReference_);
    }

    return true;
}

uint32_t AttributeValueIconMap::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numEntries_);
    result = ::zserio::calcHashCode(result, m_type_);
    result = ::zserio::calcHashCode(result, m_enumValue_);
    result = ::zserio::calcHashCode(result, m_iconSetReference_);

    return result;
}

void AttributeValueIconMap::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarSize(m_numEntries_);

    // check array length
    if (m_type_.getRawArray().size() != static_cast<size_t>(getNumEntries()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field AttributeValueIconMap.type: ") <<
                m_type_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumEntries()) << "!";
    }
    m_type_.write(out);

    // check array length
    if (m_enumValue_.getRawArray().size() != static_cast<size_t>(getNumEntries()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field AttributeValueIconMap.enumValue: ") <<
                m_enumValue_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumEntries()) << "!";
    }
    m_enumValue_.write(out);

    // check array length
    if (m_iconSetReference_.getRawArray().size() != static_cast<size_t>(getNumEntries()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field AttributeValueIconMap.iconSetReference: ") <<
                m_iconSetReference_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumEntries()) << "!";
    }
    m_iconSetReference_.write(out);
}

void AttributeValueIconMap::write(AttributeValueIconMap::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumEntries().write<::zserio::VarSizeArrayTraits>(out, m_numEntries_);

    // check array length
    if (m_type_.getRawArray().size() != static_cast<size_t>(getNumEntries()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field AttributeValueIconMap.type: ") <<
                m_type_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumEntries()) << "!";
    }
    m_type_.writePacked(out);

    // check array length
    if (m_enumValue_.getRawArray().size() != static_cast<size_t>(getNumEntries()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field AttributeValueIconMap.enumValue: ") <<
                m_enumValue_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumEntries()) << "!";
    }
    m_enumValue_.writePacked(out);

    // check array length
    if (m_iconSetReference_.getRawArray().size() != static_cast<size_t>(getNumEntries()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field AttributeValueIconMap.iconSetReference: ") <<
                m_iconSetReference_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumEntries()) << "!";
    }
    m_iconSetReference_.writePacked(out);
}

uint32_t AttributeValueIconMap::readNumEntries(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t AttributeValueIconMap::readNumEntries(AttributeValueIconMap::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumEntries().read<::zserio::VarSizeArrayTraits>(in);
}
AttributeValueIconMap::ZserioArrayType_type AttributeValueIconMap::readType(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_type readField(allocator);
    readField.read(in, static_cast<size_t>(getNumEntries()));

    return readField;
}

AttributeValueIconMap::ZserioArrayType_type AttributeValueIconMap::readType(AttributeValueIconMap::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_type readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumEntries()));

    return readField;
}
AttributeValueIconMap::ZserioArrayType_enumValue AttributeValueIconMap::readEnumValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_enumValue readField(allocator);
    readField.read(in, static_cast<size_t>(getNumEntries()));

    return readField;
}

AttributeValueIconMap::ZserioArrayType_enumValue AttributeValueIconMap::readEnumValue(AttributeValueIconMap::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_enumValue readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumEntries()));

    return readField;
}
AttributeValueIconMap::ZserioArrayType_iconSetReference AttributeValueIconMap::readIconSetReference(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_iconSetReference readField(allocator);
    readField.read(in, static_cast<size_t>(getNumEntries()));

    return readField;
}

AttributeValueIconMap::ZserioArrayType_iconSetReference AttributeValueIconMap::readIconSetReference(AttributeValueIconMap::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_iconSetReference readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumEntries()));

    return readField;
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/poi/metadata/PoiSearchMetadata.h>
#include <nds/poi/metadata/PoiSearchFilterOptions.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiSearchMetadata::PoiSearchMetadata(const allocator_type& allocator) noexcept :
        m_supportedFilter_(::nds::poi::metadata::PoiSearchFilterOptions()),
        m_availableCategories_(allocator),
        m_availableAttributes_(allocator),
        m_availableLanguages_(allocator),
        m_filterCategories_(::zserio::NullOpt),
        m_filterAttributes_(::zserio::NullOpt)
{
}

PoiSearchMetadata::PoiSearchMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_supportedFilter_(readSupportedFilter(in)),
        m_availableCategories_(readAvailableCategories(in, allocator)),
        m_availableAttributes_(readAvailableAttributes(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator)),
        m_filterCategories_(readFilterCategories(in, allocator)),
        m_filterAttributes_(readFilterAttributes(in, allocator))
{
}

PoiSearchMetadata::PoiSearchMetadata(PoiSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_supportedFilter_(readSupportedFilter(context, in)),
        m_availableCategories_(readAvailableCategories(context, in, allocator)),
        m_availableAttributes_(readAvailableAttributes(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator)),
        m_filterCategories_(readFilterCategories(context, in, allocator)),
        m_filterAttributes_(readFilterAttributes(context, in, allocator))
{
}

PoiSearchMetadata::PoiSearchMetadata(::zserio::PropagateAllocatorT,
        const PoiSearchMetadata& other, const allocator_type& allocator) :
        m_supportedFilter_(::zserio::allocatorPropagatingCopy(other.m_supportedFilter_, allocator)),
        m_availableCategories_(::zserio::allocatorPropagatingCopy(other.m_availableCategories_, allocator)),
        m_availableAttributes_(::zserio::allocatorPropagatingCopy(other.m_availableAttributes_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator)),
        m_filterCategories_(::zserio::allocatorPropagatingCopy(other.m_filterCategories_, allocator)),
        m_filterAttributes_(::zserio::allocatorPropagatingCopy(other.m_filterAttributes_, allocator))
{
}

::nds::poi::metadata::PoiSearchFilterOptions PoiSearchMetadata::getSupportedFilter() const
{
    return m_supportedFilter_;
}

void PoiSearchMetadata::setSupportedFilter(::nds::poi::metadata::PoiSearchFilterOptions supportedFilter_)
{
    m_supportedFilter_ = supportedFilter_;
}

::zserio::vector<::nds::poi::metadata::PoiCategory>& PoiSearchMetadata::getAvailableCategories()
{
    return m_availableCategories_.getRawArray();
}

const ::zserio::vector<::nds::poi::metadata::PoiCategory>& PoiSearchMetadata::getAvailableCategories() const
{
    return m_availableCategories_.getRawArray();
}

void PoiSearchMetadata::setAvailableCategories(const ::zserio::vector<::nds::poi::metadata::PoiCategory>& availableCategories_)
{
    m_availableCategories_ = ZserioArrayType_availableCategories(availableCategories_);
}

void PoiSearchMetadata::setAvailableCategories(::zserio::vector<::nds::poi::metadata::PoiCategory>&& availableCategories_)
{
    m_availableCategories_ = ZserioArrayType_availableCategories(std::move(availableCategories_));
}

::nds::poi::instantiations::PoiAttributeMetadata& PoiSearchMetadata::getAvailableAttributes()
{
    return m_availableAttributes_;
}

const ::nds::poi::instantiations::PoiAttributeMetadata& PoiSearchMetadata::getAvailableAttributes() const
{
    return m_availableAttributes_;
}

void PoiSearchMetadata::setAvailableAttributes(const ::nds::poi::instantiations::PoiAttributeMetadata& availableAttributes_)
{
    m_availableAttributes_ = availableAttributes_;
}

void PoiSearchMetadata::setAvailableAttributes(::nds::poi::instantiations::PoiAttributeMetadata&& availableAttributes_)
{
    m_availableAttributes_ = ::std::move(availableAttributes_);
}

::nds::core::language::AvailableLanguages& PoiSearchMetadata::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& PoiSearchMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void PoiSearchMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void PoiSearchMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

::zserio::vector<::nds::poi::metadata::PoiCategory>& PoiSearchMetadata::getFilterCategories()
{
    return m_filterCategories_.value().getRawArray();
}

const ::zserio::vector<::nds::poi::metadata::PoiCategory>& PoiSearchMetadata::getFilterCategories() const
{
    return m_filterCategories_.value().getRawArray();
}

void PoiSearchMetadata::setFilterCategories(const ::zserio::vector<::nds::poi::metadata::PoiCategory>& filterCategories_)
{
    m_filterCategories_ = ZserioArrayType_filterCategories(filterCategories_);
}

void PoiSearchMetadata::setFilterCategories(::zserio::vector<::nds::poi::metadata::PoiCategory>&& filterCategories_)
{
    m_filterCategories_ = ZserioArrayType_filterCategories(std::move(filterCategories_));
}

bool PoiSearchMetadata::isFilterCategoriesUsed() const
{
    return ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER);
}

bool PoiSearchMetadata::isFilterCategoriesSet() const
{
    return m_filterCategories_.hasValue();
}

void PoiSearchMetadata::resetFilterCategories()
{
    m_filterCategories_.reset();
}

::nds::poi::instantiations::PoiAttributeMetadata& PoiSearchMetadata::getFilterAttributes()
{
    return m_filterAttributes_.value();
}

const ::nds::poi::instantiations::PoiAttributeMetadata& PoiSearchMetadata::getFilterAttributes() const
{
    return m_filterAttributes_.value();
}

void PoiSearchMetadata::setFilterAttributes(const ::nds::poi::instantiations::PoiAttributeMetadata& filterAttributes_)
{
    m_filterAttributes_ = filterAttributes_;
}

void PoiSearchMetadata::setFilterAttributes(::nds::poi::instantiations::PoiAttributeMetadata&& filterAttributes_)
{
    m_filterAttributes_ = ::std::move(filterAttributes_);
}

bool PoiSearchMetadata::isFilterAttributesUsed() const
{
    return ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER);
}

bool PoiSearchMetadata::isFilterAttributesSet() const
{
    return m_filterAttributes_.hasValue();
}

void PoiSearchMetadata::resetFilterAttributes()
{
    m_filterAttributes_.reset();
}

void PoiSearchMetadata::initPackingContext(PoiSearchMetadata::ZserioPackingContext& context) const
{
    m_supportedFilter_.initPackingContext(context.getSupportedFilter());
    m_availableAttributes_.initPackingContext(context.getAvailableAttributes());
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        m_filterAttributes_.value().initPackingContext(context.getFilterAttributes());
    }
}

size_t PoiSearchMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_supportedFilter_.bitSizeOf(endBitPosition);
    endBitPosition += m_availableCategories_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_availableAttributes_.bitSizeOf(endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        endBitPosition += m_filterCategories_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        endBitPosition += m_filterAttributes_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiSearchMetadata::bitSizeOf(PoiSearchMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_supportedFilter_.bitSizeOf(context.getSupportedFilter(), endBitPosition);
    endBitPosition += m_availableCategories_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_availableAttributes_.bitSizeOf(context.getAvailableAttributes(), endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        endBitPosition += m_filterCategories_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        endBitPosition += m_filterAttributes_.value().bitSizeOf(context.getFilterAttributes(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiSearchMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_supportedFilter_.initializeOffsets(endBitPosition);
    endBitPosition = m_availableCategories_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_availableAttributes_.initializeOffsets(endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        endBitPosition = m_filterCategories_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        endBitPosition = m_filterAttributes_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t PoiSearchMetadata::initializeOffsets(PoiSearchMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_supportedFilter_.initializeOffsets(context.getSupportedFilter(), endBitPosition);
    endBitPosition = m_availableCategories_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_availableAttributes_.initializeOffsets(context.getAvailableAttributes(), endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        endBitPosition = m_filterCategories_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        endBitPosition = m_filterAttributes_.value().initializeOffsets(context.getFilterAttributes(), endBitPosition);
    }

    return endBitPosition;
}

bool PoiSearchMetadata::operator==(const PoiSearchMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_supportedFilter_ == other.m_supportedFilter_) &&
                (m_availableCategories_ == other.m_availableCategories_) &&
                (m_availableAttributes_ == other.m_availableAttributes_) &&
                (m_availableLanguages_ == other.m_availableLanguages_) &&
                (!isFilterCategoriesUsed() ? !other.isFilterCategoriesUsed() : (m_filterCategories_ == other.m_filterCategories_)) &&
                (!isFilterAttributesUsed() ? !other.isFilterAttributesUsed() : (m_filterAttributes_ == other.m_filterAttributes_));
    }

    return true;
}

uint32_t PoiSearchMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_supportedFilter_);
    result = ::zserio::calcHashCode(result, m_availableCategories_);
    result = ::zserio::calcHashCode(result, m_availableAttributes_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);
    if (isFilterCategoriesUsed())
        result = ::zserio::calcHashCode(result, m_filterCategories_);
    if (isFilterAttributesUsed())
        result = ::zserio::calcHashCode(result, m_filterAttributes_);

    return result;
}

void PoiSearchMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_supportedFilter_.write(out);
    m_availableCategories_.write(*this, out);
    m_availableAttributes_.write(out);
    m_availableLanguages_.write(out);
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        m_filterCategories_.value().write(*this, out);
    }
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        m_filterAttributes_.value().write(out);
    }
}

void PoiSearchMetadata::write(PoiSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_supportedFilter_.write(context.getSupportedFilter(), out);
    m_availableCategories_.writePacked(*this, out);
    m_availableAttributes_.write(context.getAvailableAttributes(), out);
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        m_filterCategories_.value().writePacked(*this, out);
    }
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        m_filterAttributes_.value().write(context.getFilterAttributes(), out);
    }
}

void PoiSearchMetadata::ZserioElementFactory_availableCategories::create(PoiSearchMetadata&        ,
        ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PoiSearchMetadata::ZserioElementFactory_availableCategories::create(PoiSearchMetadata&        ,
        ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
        ::nds::poi::metadata::PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void PoiSearchMetadata::ZserioElementFactory_filterCategories::create(PoiSearchMetadata&        ,
        ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PoiSearchMetadata::ZserioElementFactory_filterCategories::create(PoiSearchMetadata&        ,
        ::zserio::vector<::nds::poi::metadata::PoiCategory>& array,
        ::nds::poi::metadata::PoiCategory::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::poi::metadata::PoiSearchFilterOptions PoiSearchMetadata::readSupportedFilter(::zserio::BitStreamReader& in)
{
    return ::nds::poi::metadata::PoiSearchFilterOptions(in);
}

::nds::poi::metadata::PoiSearchFilterOptions PoiSearchMetadata::readSupportedFilter(PoiSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::poi::metadata::PoiSearchFilterOptions(context.getSupportedFilter(), in);
}
PoiSearchMetadata::ZserioArrayType_availableCategories PoiSearchMetadata::readAvailableCategories(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_availableCategories readField(allocator);
    readField.read(*this, in);

    return readField;
}

PoiSearchMetadata::ZserioArrayType_availableCategories PoiSearchMetadata::readAvailableCategories(PoiSearchMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_availableCategories readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::nds::poi::instantiations::PoiAttributeMetadata PoiSearchMetadata::readAvailableAttributes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::poi::instantiations::PoiAttributeMetadata(in, allocator);
}

::nds::poi::instantiations::PoiAttributeMetadata PoiSearchMetadata::readAvailableAttributes(PoiSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::poi::instantiations::PoiAttributeMetadata(context.getAvailableAttributes(), in, allocator);
}
::nds::core::language::AvailableLanguages PoiSearchMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages PoiSearchMetadata::readAvailableLanguages(PoiSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}
::zserio::InplaceOptionalHolder<PoiSearchMetadata::ZserioArrayType_filterCategories> PoiSearchMetadata::readFilterCategories(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        ZserioArrayType_filterCategories readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiSearchMetadata::ZserioArrayType_filterCategories> PoiSearchMetadata::readFilterCategories(PoiSearchMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        ZserioArrayType_filterCategories readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata> PoiSearchMetadata::readFilterAttributes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata>(::nds::poi::instantiations::PoiAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata> PoiSearchMetadata::readFilterAttributes(PoiSearchMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getSupportedFilter() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata>(::nds::poi::instantiations::PoiAttributeMetadata(context.getFilterAttributes(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiAttributeMetadata>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/metadata/PoiSearchResultDetails.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiSearchResultDetails::PoiSearchResultDetails(const allocator_type&) noexcept :
        m_categoryId_(::nds::poi::reference::types::PoiCategoryId()),
        m_attributes_(::zserio::NullOpt)
{
}

PoiSearchResultDetails::PoiSearchResultDetails(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_categoryId_(readCategoryId(in)),
        m_attributes_(readAttributes(in, allocator))
{
}

PoiSearchResultDetails::PoiSearchResultDetails(PoiSearchResultDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_categoryId_(readCategoryId(context, in)),
        m_attributes_(readAttributes(context, in, allocator))
{
}

PoiSearchResultDetails::PoiSearchResultDetails(::zserio::PropagateAllocatorT,
        const PoiSearchResultDetails& other, const allocator_type& allocator) :
        m_categoryId_(::zserio::allocatorPropagatingCopy(other.m_categoryId_, allocator)),
        m_attributes_(::zserio::allocatorPropagatingCopy(other.m_attributes_, allocator))
{
}

void PoiSearchResultDetails::initializeChildren()
{
    if (isAttributesSet())
        m_attributes_.value().initializeElements(*this);
}

::nds::poi::reference::types::PoiCategoryId PoiSearchResultDetails::getCategoryId() const
{
    return m_categoryId_;
}

void PoiSearchResultDetails::setCategoryId(::nds::poi::reference::types::PoiCategoryId categoryId_)
{
    m_categoryId_ = categoryId_;
}

::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& PoiSearchResultDetails::getAttributes()
{
    return m_attributes_.value().getRawArray();
}

const ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& PoiSearchResultDetails::getAttributes() const
{
    return m_attributes_.value().getRawArray();
}

void PoiSearchResultDetails::setAttributes(const ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& attributes_)
{
    m_attributes_ = ZserioArrayType_attributes(attributes_);
}

void PoiSearchResultDetails::setAttributes(::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>&& attributes_)
{
    m_attributes_ = ZserioArrayType_attributes(std::move(attributes_));
}

bool PoiSearchResultDetails::isAttributesUsed() const
{
    return (isAttributesSet());
}

bool PoiSearchResultDetails::isAttributesSet() const
{
    return m_attributes_.hasValue();
}

void PoiSearchResultDetails::resetAttributes()
{
    m_attributes_.reset();
}

void PoiSearchResultDetails::initPackingContext(PoiSearchResultDetails::ZserioPackingContext& context) const
{
    context.getCategoryId().init<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(m_categoryId_);
}

size_t PoiSearchResultDetails::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_categoryId_);
    endBitPosition += 1;
    if (isAttributesSet())
    {
        endBitPosition += m_attributes_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiSearchResultDetails::bitSizeOf(PoiSearchResultDetails::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCategoryId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(m_categoryId_);
    endBitPosition += 1;
    if (isAttributesSet())
    {
        endBitPosition += m_attributes_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiSearchResultDetails::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_categoryId_);
    endBitPosition += 1;
    if (isAttributesSet())
    {
        endBitPosition = m_attributes_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t PoiSearchResultDetails::initializeOffsets(PoiSearchResultDetails::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCategoryId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(m_categoryId_);
    endBitPosition += 1;
    if (isAttributesSet())
    {
        endBitPosition = m_attributes_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool PoiSearchResultDetails::operator==(const PoiSearchResultDetails& other) const
{
    if (this != &other)
    {
        return
                (m_categoryId_ == other.m_categoryId_) &&
                (!isAttributesUsed() ? !other.isAttributesUsed() : (m_attributes_ == other.m_attributes_));
    }

    return true;
}

uint32_t PoiSearchResultDetails::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_categoryId_);
    if (isAttributesUsed())
        result = ::zserio::calcHashCode(result, m_attributes_);

    return result;
}

void PoiSearchResultDetails::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_categoryId_);
    if (isAttributesSet())
    {
        out.writeBool(true);
        m_attributes_.value().write(*this, out);
    }
    else
    {
        out.writeBool(false);
    }
}

void PoiSearchResultDetails::write(PoiSearchResultDetails::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getCategoryId().write<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(out, m_categoryId_);
    if (isAttributesSet())
    {
        out.writeBool(true);
        m_attributes_.value().writePacked(*this, out);
    }
    else
    {
        out.writeBool(false);
    }
}

void PoiSearchResultDetails::ZserioArrayExpressions_attributes::initializeElement(PoiSearchResultDetails&,
        ::nds::poi::instantiations::PoiFullAttribute& element, size_t)
{
    element.initializeChildren();
}

void PoiSearchResultDetails::ZserioElementFactory_attributes::create(PoiSearchResultDetails&        ,
        ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PoiSearchResultDetails::ZserioElementFactory_attributes::create(PoiSearchResultDetails&        ,
        ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& array,
        ::nds::poi::instantiations::PoiFullAttribute::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::poi::reference::types::PoiCategoryId PoiSearchResultDetails::readCategoryId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::poi::reference::types::PoiCategoryId>(in.readVarUInt32());
}

::nds::poi::reference::types::PoiCategoryId PoiSearchResultDetails::readCategoryId(PoiSearchResultDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCategoryId().read<::zserio::VarIntNNArrayTraits<::nds::poi::reference::types::PoiCategoryId>>(in);
}
::zserio::InplaceOptionalHolder<PoiSearchResultDetails::ZserioArrayType_attributes> PoiSearchResultDetails::readAttributes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_attributes readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiSearchResultDetails::ZserioArrayType_attributes> PoiSearchResultDetails::readAttributes(PoiSearchResultDetails::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        ZserioArrayType_attributes readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/poi/metadata/PoiSearchFilter.h>
#include <nds/poi/metadata/PoiSearchFilterOptions.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiSearchFilter::PoiSearchFilter(const allocator_type&) noexcept :
        m_filterOptions_(::nds::poi::metadata::PoiSearchFilterOptions()),
        m_filterCategories_(::zserio::NullOpt),
        m_filterAttributes_(::zserio::NullOpt)
{
}

PoiSearchFilter::PoiSearchFilter(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_filterOptions_(readFilterOptions(in)),
        m_filterCategories_(readFilterCategories(in, allocator)),
        m_filterAttributes_(readFilterAttributes(in, allocator))
{
}

PoiSearchFilter::PoiSearchFilter(PoiSearchFilter::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_filterOptions_(readFilterOptions(context, in)),
        m_filterCategories_(readFilterCategories(context, in, allocator)),
        m_filterAttributes_(readFilterAttributes(context, in, allocator))
{
}

PoiSearchFilter::PoiSearchFilter(::zserio::PropagateAllocatorT,
        const PoiSearchFilter& other, const allocator_type& allocator) :
        m_filterOptions_(::zserio::allocatorPropagatingCopy(other.m_filterOptions_, allocator)),
        m_filterCategories_(::zserio::allocatorPropagatingCopy(other.m_filterCategories_, allocator)),
        m_filterAttributes_(::zserio::allocatorPropagatingCopy(other.m_filterAttributes_, allocator))
{
}

void PoiSearchFilter::initializeChildren()
{
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
        m_filterAttributes_.value().initializeElements(*this);
}

::nds::poi::metadata::PoiSearchFilterOptions PoiSearchFilter::getFilterOptions() const
{
    return m_filterOptions_;
}

void PoiSearchFilter::setFilterOptions(::nds::poi::metadata::PoiSearchFilterOptions filterOptions_)
{
    m_filterOptions_ = filterOptions_;
}

::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& PoiSearchFilter::getFilterCategories()
{
    return m_filterCategories_.value().getRawArray();
}

const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& PoiSearchFilter::getFilterCategories() const
{
    return m_filterCategories_.value().getRawArray();
}

void PoiSearchFilter::setFilterCategories(const ::zserio::vector<::nds::poi::reference::types::PoiCategoryId>& filterCategories_)
{
    m_filterCategories_ = ZserioArrayType_filterCategories(filterCategories_);
}

void PoiSearchFilter::setFilterCategories(::zserio::vector<::nds::poi::reference::types::PoiCategoryId>&& filterCategories_)
{
    m_filterCategories_ = ZserioArrayType_filterCategories(std::move(filterCategories_));
}

bool PoiSearchFilter::isFilterCategoriesUsed() const
{
    return ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER);
}

bool PoiSearchFilter::isFilterCategoriesSet() const
{
    return m_filterCategories_.hasValue();
}

void PoiSearchFilter::resetFilterCategories()
{
    m_filterCategories_.reset();
}

::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& PoiSearchFilter::getFilterAttributes()
{
    return m_filterAttributes_.value().getRawArray();
}

const ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& PoiSearchFilter::getFilterAttributes() const
{
    return m_filterAttributes_.value().getRawArray();
}

void PoiSearchFilter::setFilterAttributes(const ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& filterAttributes_)
{
    m_filterAttributes_ = ZserioArrayType_filterAttributes(filterAttributes_);
}

void PoiSearchFilter::setFilterAttributes(::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>&& filterAttributes_)
{
    m_filterAttributes_ = ZserioArrayType_filterAttributes(std::move(filterAttributes_));
}

bool PoiSearchFilter::isFilterAttributesUsed() const
{
    return ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER);
}

bool PoiSearchFilter::isFilterAttributesSet() const
{
    return m_filterAttributes_.hasValue();
}

void PoiSearchFilter::resetFilterAttributes()
{
    m_filterAttributes_.reset();
}

void PoiSearchFilter::initPackingContext(PoiSearchFilter::ZserioPackingContext& context) const
{
    m_filterOptions_.initPackingContext(context.getFilterOptions());
}

size_t PoiSearchFilter::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_filterOptions_.bitSizeOf(endBitPosition);
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        endBitPosition += m_filterCategories_.value().bitSizeOf(endBitPosition);
    }
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        endBitPosition += m_filterAttributes_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiSearchFilter::bitSizeOf(PoiSearchFilter::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_filterOptions_.bitSizeOf(context.getFilterOptions(), endBitPosition);
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        endBitPosition += m_filterCategories_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        endBitPosition += m_filterAttributes_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiSearchFilter::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_filterOptions_.initializeOffsets(endBitPosition);
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        endBitPosition = m_filterCategories_.value().initializeOffsets(endBitPosition);
    }
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        endBitPosition = m_filterAttributes_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t PoiSearchFilter::initializeOffsets(PoiSearchFilter::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_filterOptions_.initializeOffsets(context.getFilterOptions(), endBitPosition);
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        endBitPosition = m_filterCategories_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        endBitPosition = m_filterAttributes_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool PoiSearchFilter::operator==(const PoiSearchFilter& other) const
{
    if (this != &other)
    {
        return
                (m_filterOptions_ == other.m_filterOptions_) &&
                (!isFilterCategoriesUsed() ? !other.isFilterCategoriesUsed() : (m_filterCategories_ == other.m_filterCategories_)) &&
                (!isFilterAttributesUsed() ? !other.isFilterAttributesUsed() : (m_filterAttributes_ == other.m_filterAttributes_));
    }

    return true;
}

uint32_t PoiSearchFilter::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_filterOptions_);
    if (isFilterCategoriesUsed())
        result = ::zserio::calcHashCode(result, m_filterCategories_);
    if (isFilterAttributesUsed())
        result = ::zserio::calcHashCode(result, m_filterAttributes_);

    return result;
}

void PoiSearchFilter::write(::zserio::BitStreamWriter& out) const
{
    m_filterOptions_.write(out);
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        m_filterCategories_.value().write(out);
    }
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        m_filterAttributes_.value().write(*this, out);
    }
}

void PoiSearchFilter::write(PoiSearchFilter::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_filterOptions_.write(context.getFilterOptions(), out);
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        m_filterCategories_.value().writePacked(out);
    }
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        m_filterAttributes_.value().writePacked(*this, out);
    }
}

void PoiSearchFilter::ZserioArrayExpressions_filterAttributes::initializeElement(PoiSearchFilter&,
        ::nds::poi::instantiations::PoiFullAttribute& element, size_t)
{
    element.initializeChildren();
}

void PoiSearchFilter::ZserioElementFactory_filterAttributes::create(PoiSearchFilter&        ,
        ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PoiSearchFilter::ZserioElementFactory_filterAttributes::create(PoiSearchFilter&        ,
        ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& array,
        ::nds::poi::instantiations::PoiFullAttribute::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::poi::metadata::PoiSearchFilterOptions PoiSearchFilter::readFilterOptions(::zserio::BitStreamReader& in)
{
    return ::nds::poi::metadata::PoiSearchFilterOptions(in);
}

::nds::poi::metadata::PoiSearchFilterOptions PoiSearchFilter::readFilterOptions(PoiSearchFilter::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::poi::metadata::PoiSearchFilterOptions(context.getFilterOptions(), in);
}
::zserio::InplaceOptionalHolder<PoiSearchFilter::ZserioArrayType_filterCategories> PoiSearchFilter::readFilterCategories(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        ZserioArrayType_filterCategories readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiSearchFilter::ZserioArrayType_filterCategories> PoiSearchFilter::readFilterCategories(PoiSearchFilter::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::CATEGORY_FILTER)
    {
        ZserioArrayType_filterCategories readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterCategories>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<PoiSearchFilter::ZserioArrayType_filterAttributes> PoiSearchFilter::readFilterAttributes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        ZserioArrayType_filterAttributes readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterAttributes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterAttributes>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PoiSearchFilter::ZserioArrayType_filterAttributes> PoiSearchFilter::readFilterAttributes(PoiSearchFilter::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getFilterOptions() & ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER) == ::nds::poi::metadata::PoiSearchFilterOptions::Values::ATTRIBUTE_FILTER)
    {
        ZserioArrayType_filterAttributes readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterAttributes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_filterAttributes>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace poi
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/poi/metadata/PoiRelationLayerMetadata.h>
#include <nds/poi/metadata/PoiRelationLayerContent.h>

namespace nds
{
namespace poi
{
namespace metadata
{

PoiRelationLayerMetadata::PoiRelationLayerMetadata(const allocator_type&) noexcept :
        m_content_(::nds::poi::metadata::PoiRelationLayerContent()),
        m_poiRoadPositionRelationMetadata_(::zserio::NullOpt),
        m_poiLanePositionRelationMetadata_(::zserio::NullOpt),
        m_poiDisplayAreaRelationMetadata_(::zserio::NullOpt)
{
}

PoiRelationLayerMetadata::PoiRelationLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_poiRoadPositionRelationMetadata_(readPoiRoadPositionRelationMetadata(in, allocator)),
        m_poiLanePositionRelationMetadata_(readPoiLanePositionRelationMetadata(in, allocator)),
        m_poiDisplayAreaRelationMetadata_(readPoiDisplayAreaRelationMetadata(in, allocator))
{
}

PoiRelationLayerMetadata::PoiRelationLayerMetadata(PoiRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_poiRoadPositionRelationMetadata_(readPoiRoadPositionRelationMetadata(context, in, allocator)),
        m_poiLanePositionRelationMetadata_(readPoiLanePositionRelationMetadata(context, in, allocator)),
        m_poiDisplayAreaRelationMetadata_(readPoiDisplayAreaRelationMetadata(context, in, allocator))
{
}

PoiRelationLayerMetadata::PoiRelationLayerMetadata(::zserio::PropagateAllocatorT,
        const PoiRelationLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_poiRoadPositionRelationMetadata_(::zserio::allocatorPropagatingCopy(other.m_poiRoadPositionRelationMetadata_, allocator)),
        m_poiLanePositionRelationMetadata_(::zserio::allocatorPropagatingCopy(other.m_poiLanePositionRelationMetadata_, allocator)),
        m_poiDisplayAreaRelationMetadata_(::zserio::allocatorPropagatingCopy(other.m_poiDisplayAreaRelationMetadata_, allocator))
{
}

::nds::poi::metadata::PoiRelationLayerContent PoiRelationLayerMetadata::getContent() const
{
    return m_content_;
}

void PoiRelationLayerMetadata::setContent(::nds::poi::metadata::PoiRelationLayerContent content_)
{
    m_content_ = content_;
}

::nds::poi::instantiations::PoiRoadPositionRelationMetadata& PoiRelationLayerMetadata::getPoiRoadPositionRelationMetadata()
{
    return m_poiRoadPositionRelationMetadata_.value();
}

const ::nds::poi::instantiations::PoiRoadPositionRelationMetadata& PoiRelationLayerMetadata::getPoiRoadPositionRelationMetadata() const
{
    return m_poiRoadPositionRelationMetadata_.value();
}

void PoiRelationLayerMetadata::setPoiRoadPositionRelationMetadata(const ::nds::poi::instantiations::PoiRoadPositionRelationMetadata& poiRoadPositionRelationMetadata_)
{
    m_poiRoadPositionRelationMetadata_ = poiRoadPositionRelationMetadata_;
}

void PoiRelationLayerMetadata::setPoiRoadPositionRelationMetadata(::nds::poi::instantiations::PoiRoadPositionRelationMetadata&& poiRoadPositionRelationMetadata_)
{
    m_poiRoadPositionRelationMetadata_ = ::std::move(poiRoadPositionRelationMetadata_);
}

bool PoiRelationLayerMetadata::isPoiRoadPositionRelationMetadataUsed() const
{
    return ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS);
}

bool PoiRelationLayerMetadata::isPoiRoadPositionRelationMetadataSet() const
{
    return m_poiRoadPositionRelationMetadata_.hasValue();
}

void PoiRelationLayerMetadata::resetPoiRoadPositionRelationMetadata()
{
    m_poiRoadPositionRelationMetadata_.reset();
}

::nds::poi::instantiations::PoiLanePositionRelationMetadata& PoiRelationLayerMetadata::getPoiLanePositionRelationMetadata()
{
    return m_poiLanePositionRelationMetadata_.value();
}

const ::nds::poi::instantiations::PoiLanePositionRelationMetadata& PoiRelationLayerMetadata::getPoiLanePositionRelationMetadata() const
{
    return m_poiLanePositionRelationMetadata_.value();
}

void PoiRelationLayerMetadata::setPoiLanePositionRelationMetadata(const ::nds::poi::instantiations::PoiLanePositionRelationMetadata& poiLanePositionRelationMetadata_)
{
    m_poiLanePositionRelationMetadata_ = poiLanePositionRelationMetadata_;
}

void PoiRelationLayerMetadata::setPoiLanePositionRelationMetadata(::nds::poi::instantiations::PoiLanePositionRelationMetadata&& poiLanePositionRelationMetadata_)
{
    m_poiLanePositionRelationMetadata_ = ::std::move(poiLanePositionRelationMetadata_);
}

bool PoiRelationLayerMetadata::isPoiLanePositionRelationMetadataUsed() const
{
    return ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS);
}

bool PoiRelationLayerMetadata::isPoiLanePositionRelationMetadataSet() const
{
    return m_poiLanePositionRelationMetadata_.hasValue();
}

void PoiRelationLayerMetadata::resetPoiLanePositionRelationMetadata()
{
    m_poiLanePositionRelationMetadata_.reset();
}

::nds::poi::instantiations::PoiDisplayAreaRelationMetadata& PoiRelationLayerMetadata::getPoiDisplayAreaRelationMetadata()
{
    return m_poiDisplayAreaRelationMetadata_.value();
}

const ::nds::poi::instantiations::PoiDisplayAreaRelationMetadata& PoiRelationLayerMetadata::getPoiDisplayAreaRelationMetadata() const
{
    return m_poiDisplayAreaRelationMetadata_.value();
}

void PoiRelationLayerMetadata::setPoiDisplayAreaRelationMetadata(const ::nds::poi::instantiations::PoiDisplayAreaRelationMetadata& poiDisplayAreaRelationMetadata_)
{
    m_poiDisplayAreaRelationMetadata_ = poiDisplayAreaRelationMetadata_;
}

void PoiRelationLayerMetadata::setPoiDisplayAreaRelationMetadata(::nds::poi::instantiations::PoiDisplayAreaRelationMetadata&& poiDisplayAreaRelationMetadata_)
{
    m_poiDisplayAreaRelationMetadata_ = ::std::move(poiDisplayAreaRelationMetadata_);
}

bool PoiRelationLayerMetadata::isPoiDisplayAreaRelationMetadataUsed() const
{
    return ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS);
}

bool PoiRelationLayerMetadata::isPoiDisplayAreaRelationMetadataSet() const
{
    return m_poiDisplayAreaRelationMetadata_.hasValue();
}

void PoiRelationLayerMetadata::resetPoiDisplayAreaRelationMetadata()
{
    m_poiDisplayAreaRelationMetadata_.reset();
}

void PoiRelationLayerMetadata::initPackingContext(PoiRelationLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        m_poiRoadPositionRelationMetadata_.value().initPackingContext(context.getPoiRoadPositionRelationMetadata());
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        m_poiLanePositionRelationMetadata_.value().initPackingContext(context.getPoiLanePositionRelationMetadata());
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        m_poiDisplayAreaRelationMetadata_.value().initPackingContext(context.getPoiDisplayAreaRelationMetadata());
    }
}

size_t PoiRelationLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        endBitPosition += m_poiRoadPositionRelationMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        endBitPosition += m_poiLanePositionRelationMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition += m_poiDisplayAreaRelationMetadata_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiRelationLayerMetadata::bitSizeOf(PoiRelationLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        endBitPosition += m_poiRoadPositionRelationMetadata_.value().bitSizeOf(context.getPoiRoadPositionRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        endBitPosition += m_poiLanePositionRelationMetadata_.value().bitSizeOf(context.getPoiLanePositionRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition += m_poiDisplayAreaRelationMetadata_.value().bitSizeOf(context.getPoiDisplayAreaRelationMetadata(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t PoiRelationLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        endBitPosition = m_poiRoadPositionRelationMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        endBitPosition = m_poiLanePositionRelationMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition = m_poiDisplayAreaRelationMetadata_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t PoiRelationLayerMetadata::initializeOffsets(PoiRelationLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        endBitPosition = m_poiRoadPositionRelationMetadata_.value().initializeOffsets(context.getPoiRoadPositionRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        endBitPosition = m_poiLanePositionRelationMetadata_.value().initializeOffsets(context.getPoiLanePositionRelationMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition = m_poiDisplayAreaRelationMetadata_.value().initializeOffsets(context.getPoiDisplayAreaRelationMetadata(), endBitPosition);
    }

    return endBitPosition;
}

bool PoiRelationLayerMetadata::operator==(const PoiRelationLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isPoiRoadPositionRelationMetadataUsed() ? !other.isPoiRoadPositionRelationMetadataUsed() : (m_poiRoadPositionRelationMetadata_ == other.m_poiRoadPositionRelationMetadata_)) &&
                (!isPoiLanePositionRelationMetadataUsed() ? !other.isPoiLanePositionRelationMetadataUsed() : (m_poiLanePositionRelationMetadata_ == other.m_poiLanePositionRelationMetadata_)) &&
                (!isPoiDisplayAreaRelationMetadataUsed() ? !other.isPoiDisplayAreaRelationMetadataUsed() : (m_poiDisplayAreaRelationMetadata_ == other.m_poiDisplayAreaRelationMetadata_));
    }

    return true;
}

uint32_t PoiRelationLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isPoiRoadPositionRelationMetadataUsed())
        result = ::zserio::calcHashCode(result, m_poiRoadPositionRelationMetadata_);
    if (isPoiLanePositionRelationMetadataUsed())
        result = ::zserio::calcHashCode(result, m_poiLanePositionRelationMetadata_);
    if (isPoiDisplayAreaRelationMetadataUsed())
        result = ::zserio::calcHashCode(result, m_poiDisplayAreaRelationMetadata_);

    return result;
}

void PoiRelationLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        m_poiRoadPositionRelationMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        m_poiLanePositionRelationMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        m_poiDisplayAreaRelationMetadata_.value().write(out);
    }
}

void PoiRelationLayerMetadata::write(PoiRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        m_poiRoadPositionRelationMetadata_.value().write(context.getPoiRoadPositionRelationMetadata(), out);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        m_poiLanePositionRelationMetadata_.value().write(context.getPoiLanePositionRelationMetadata(), out);
    }
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        m_poiDisplayAreaRelationMetadata_.value().write(context.getPoiDisplayAreaRelationMetadata(), out);
    }
}

::nds::poi::metadata::PoiRelationLayerContent PoiRelationLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::poi::metadata::PoiRelationLayerContent(in);
}

::nds::poi::metadata::PoiRelationLayerContent PoiRelationLayerMetadata::readContent(PoiRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::poi::metadata::PoiRelationLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiRoadPositionRelationMetadata> PoiRelationLayerMetadata::readPoiRoadPositionRelationMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiRoadPositionRelationMetadata>(::nds::poi::instantiations::PoiRoadPositionRelationMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiRoadPositionRelationMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiRoadPositionRelationMetadata> PoiRelationLayerMetadata::readPoiRoadPositionRelationMetadata(PoiRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_INDIRECT_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::ROAD_LOCATION_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiRoadPositionRelationMetadata>(::nds::poi::instantiations::PoiRoadPositionRelationMetadata(context.getPoiRoadPositionRelationMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiRoadPositionRelationMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiLanePositionRelationMetadata> PoiRelationLayerMetadata::readPoiLanePositionRelationMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiLanePositionRelationMetadata>(::nds::poi::instantiations::PoiLanePositionRelationMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiLanePositionRelationMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiLanePositionRelationMetadata> PoiRelationLayerMetadata::readPoiLanePositionRelationMetadata(PoiRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::LANE_INDIRECT_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiLanePositionRelationMetadata>(::nds::poi::instantiations::PoiLanePositionRelationMetadata(context.getPoiLanePositionRelationMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiLanePositionRelationMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiDisplayAreaRelationMetadata> PoiRelationLayerMetadata::readPoiDisplayAreaRelationMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiDisplayAreaRelationMetadata>(::nds::poi::instantiations::PoiDisplayAreaRelationMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiDisplayAreaRelationMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiDisplayAreaRelationMetadata> PoiRelationLayerMetadata::readPoiDisplayAreaRelationMetadata(PoiRelationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::poi::metadata::PoiRelationLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiDisplayAreaRelationMetadata>(::nds::poi::instantiations::PoiDisplayAreaRelationMetadata(context.getPoiDisplayAreaRelationMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::poi::instantiations::PoiDisplayAreaRelationMetadata>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace poi
} // namespace nds
