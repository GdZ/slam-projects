/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_METADATA_POI_SEARCH_RESULT_DETAILS_H
#define NDS_POI_METADATA_POI_SEARCH_RESULT_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/poi/instantiations/PoiFullAttribute.h>
#include <nds/poi/reference/types/PoiCategoryId.h>

namespace nds
{
namespace poi
{
namespace metadata
{

class PoiSearchResultDetails
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getCategoryId()
        {
            return m_categoryId_;
        }

    private:
        ::zserio::DeltaContext m_categoryId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PoiSearchResultDetails() noexcept :
            PoiSearchResultDetails(allocator_type())
    {}

    explicit PoiSearchResultDetails(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_attributes = ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>>
    PoiSearchResultDetails(
            ::nds::poi::reference::types::PoiCategoryId categoryId_,
            ZSERIO_T_attributes&& attributes_,
            const allocator_type& allocator = allocator_type()) :
            PoiSearchResultDetails(allocator)
    {
        m_categoryId_ = categoryId_;
        m_attributes_ = ::zserio::createOptionalArray<ZserioArrayType_attributes>(::std::forward<ZSERIO_T_attributes>(attributes_));
    }

    explicit PoiSearchResultDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PoiSearchResultDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PoiSearchResultDetails() = default;

    PoiSearchResultDetails(const PoiSearchResultDetails&) = default;
    PoiSearchResultDetails& operator=(const PoiSearchResultDetails&) = default;

    PoiSearchResultDetails(PoiSearchResultDetails&&) = default;
    PoiSearchResultDetails& operator=(PoiSearchResultDetails&&) = default;

    PoiSearchResultDetails(::zserio::PropagateAllocatorT,
            const PoiSearchResultDetails& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::poi::reference::types::PoiCategoryId getCategoryId() const;
    void setCategoryId(::nds::poi::reference::types::PoiCategoryId categoryId_);

    const ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& getAttributes() const;
    ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& getAttributes();
    void setAttributes(const ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& attributes_);
    void setAttributes(::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>&& attributes_);
    bool isAttributesUsed() const;
    bool isAttributesSet() const;
    void resetAttributes();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PoiSearchResultDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_attributes
    {
    public:
        using OwnerType = PoiSearchResultDetails;

        static void initializeElement(PoiSearchResultDetails& owner,
                ::nds::poi::instantiations::PoiFullAttribute& element, size_t index);
    };

    class ZserioElementFactory_attributes
    {
    public:
        using OwnerType = PoiSearchResultDetails;

        static void create(PoiSearchResultDetails& owner,
                ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(PoiSearchResultDetails& owner,
                ::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>& array,
                ::nds::poi::instantiations::PoiFullAttribute::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_attributes = ::zserio::Array<::zserio::vector<::nds::poi::instantiations::PoiFullAttribute>, ::zserio::ObjectArrayTraits<::nds::poi::instantiations::PoiFullAttribute, ZserioElementFactory_attributes>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_attributes>;

    ::nds::poi::reference::types::PoiCategoryId readCategoryId(::zserio::BitStreamReader& in);
    ::nds::poi::reference::types::PoiCategoryId readCategoryId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes> readAttributes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes> readAttributes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::poi::reference::types::PoiCategoryId m_categoryId_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes> m_attributes_;
};

} // namespace metadata
} // namespace poi
} // namespace nds

#endif // NDS_POI_METADATA_POI_SEARCH_RESULT_DETAILS_H
