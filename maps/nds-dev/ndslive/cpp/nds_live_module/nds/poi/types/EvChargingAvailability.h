/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_TYPES_EV_CHARGING_AVAILABILITY_H
#define NDS_POI_TYPES_EV_CHARGING_AVAILABILITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/poi/types/EvConnectorType.h>

namespace nds
{
namespace poi
{
namespace types
{

class EvChargingAvailability
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumConnectors()
        {
            return m_numConnectors_;
        }

    private:
        ::zserio::DeltaContext m_numConnectors_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    EvChargingAvailability() noexcept :
            EvChargingAvailability(allocator_type())
    {}

    explicit EvChargingAvailability(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_connectorType = ::zserio::vector<::nds::poi::types::EvConnectorType>,
            typename ZSERIO_T_chargersAvailable = ::zserio::vector<uint16_t>,
            typename ZSERIO_T_chargersOccupied = ::zserio::vector<uint16_t>,
            typename ZSERIO_T_chargersReserved = ::zserio::vector<uint16_t>,
            typename ZSERIO_T_chargersOutOfService = ::zserio::vector<uint16_t>>
    EvChargingAvailability(
            uint32_t numConnectors_,
            ZSERIO_T_connectorType&& connectorType_,
            ZSERIO_T_chargersAvailable&& chargersAvailable_,
            ZSERIO_T_chargersOccupied&& chargersOccupied_,
            ZSERIO_T_chargersReserved&& chargersReserved_,
            ZSERIO_T_chargersOutOfService&& chargersOutOfService_,
            const allocator_type& allocator = allocator_type()) :
            EvChargingAvailability(allocator)
    {
        m_numConnectors_ = numConnectors_;
        m_connectorType_ = ZserioArrayType_connectorType(::std::forward<ZSERIO_T_connectorType>(connectorType_));
        m_chargersAvailable_ = ZserioArrayType_chargersAvailable(::std::forward<ZSERIO_T_chargersAvailable>(chargersAvailable_));
        m_chargersOccupied_ = ZserioArrayType_chargersOccupied(::std::forward<ZSERIO_T_chargersOccupied>(chargersOccupied_));
        m_chargersReserved_ = ZserioArrayType_chargersReserved(::std::forward<ZSERIO_T_chargersReserved>(chargersReserved_));
        m_chargersOutOfService_ = ZserioArrayType_chargersOutOfService(::std::forward<ZSERIO_T_chargersOutOfService>(chargersOutOfService_));
    }

    explicit EvChargingAvailability(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit EvChargingAvailability(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~EvChargingAvailability() = default;

    EvChargingAvailability(const EvChargingAvailability&) = default;
    EvChargingAvailability& operator=(const EvChargingAvailability&) = default;

    EvChargingAvailability(EvChargingAvailability&&) = default;
    EvChargingAvailability& operator=(EvChargingAvailability&&) = default;

    EvChargingAvailability(::zserio::PropagateAllocatorT,
            const EvChargingAvailability& other, const allocator_type& allocator);

    uint32_t getNumConnectors() const;
    void setNumConnectors(uint32_t numConnectors_);

    const ::zserio::vector<::nds::poi::types::EvConnectorType>& getConnectorType() const;
    ::zserio::vector<::nds::poi::types::EvConnectorType>& getConnectorType();
    void setConnectorType(const ::zserio::vector<::nds::poi::types::EvConnectorType>& connectorType_);
    void setConnectorType(::zserio::vector<::nds::poi::types::EvConnectorType>&& connectorType_);

    const ::zserio::vector<uint16_t>& getChargersAvailable() const;
    ::zserio::vector<uint16_t>& getChargersAvailable();
    void setChargersAvailable(const ::zserio::vector<uint16_t>& chargersAvailable_);
    void setChargersAvailable(::zserio::vector<uint16_t>&& chargersAvailable_);

    const ::zserio::vector<uint16_t>& getChargersOccupied() const;
    ::zserio::vector<uint16_t>& getChargersOccupied();
    void setChargersOccupied(const ::zserio::vector<uint16_t>& chargersOccupied_);
    void setChargersOccupied(::zserio::vector<uint16_t>&& chargersOccupied_);

    const ::zserio::vector<uint16_t>& getChargersReserved() const;
    ::zserio::vector<uint16_t>& getChargersReserved();
    void setChargersReserved(const ::zserio::vector<uint16_t>& chargersReserved_);
    void setChargersReserved(::zserio::vector<uint16_t>&& chargersReserved_);

    const ::zserio::vector<uint16_t>& getChargersOutOfService() const;
    ::zserio::vector<uint16_t>& getChargersOutOfService();
    void setChargersOutOfService(const ::zserio::vector<uint16_t>& chargersOutOfService_);
    void setChargersOutOfService(::zserio::vector<uint16_t>&& chargersOutOfService_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const EvChargingAvailability& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_connectorType = ::zserio::Array<::zserio::vector<::nds::poi::types::EvConnectorType>, ::zserio::EnumArrayTraits<::nds::poi::types::EvConnectorType>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_chargersAvailable = ::zserio::Array<::zserio::vector<uint16_t>, ::zserio::VarIntNNArrayTraits<uint16_t>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_chargersOccupied = ::zserio::Array<::zserio::vector<uint16_t>, ::zserio::VarIntNNArrayTraits<uint16_t>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_chargersReserved = ::zserio::Array<::zserio::vector<uint16_t>, ::zserio::VarIntNNArrayTraits<uint16_t>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_chargersOutOfService = ::zserio::Array<::zserio::vector<uint16_t>, ::zserio::VarIntNNArrayTraits<uint16_t>, ::zserio::ArrayType::NORMAL>;

    uint32_t readNumConnectors(::zserio::BitStreamReader& in);
    uint32_t readNumConnectors(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_connectorType readConnectorType(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_connectorType readConnectorType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_chargersAvailable readChargersAvailable(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_chargersAvailable readChargersAvailable(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_chargersOccupied readChargersOccupied(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_chargersOccupied readChargersOccupied(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_chargersReserved readChargersReserved(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_chargersReserved readChargersReserved(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_chargersOutOfService readChargersOutOfService(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_chargersOutOfService readChargersOutOfService(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint32_t m_numConnectors_;
    ZserioArrayType_connectorType m_connectorType_;
    ZserioArrayType_chargersAvailable m_chargersAvailable_;
    ZserioArrayType_chargersOccupied m_chargersOccupied_;
    ZserioArrayType_chargersReserved m_chargersReserved_;
    ZserioArrayType_chargersOutOfService m_chargersOutOfService_;
};

} // namespace types
} // namespace poi
} // namespace nds

#endif // NDS_POI_TYPES_EV_CHARGING_AVAILABILITY_H
