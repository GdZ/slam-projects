/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_TYPES_MULTIMEDIA_RESOURCE_REFERENCE_H
#define NDS_POI_TYPES_MULTIMEDIA_RESOURCE_REFERENCE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

namespace nds
{
namespace poi
{
namespace types
{

class MultimediaResourceReference
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    MultimediaResourceReference() noexcept :
            MultimediaResourceReference(allocator_type())
    {}

    explicit MultimediaResourceReference(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_mimeType = ::zserio::string<>,
            typename ZSERIO_T_uri = ::zserio::string<>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_mimeType, MultimediaResourceReference, allocator_type> = 0>
    MultimediaResourceReference(
            ZSERIO_T_mimeType&& mimeType_,
            ZSERIO_T_uri&& uri_,
            const allocator_type& allocator = allocator_type()) :
            MultimediaResourceReference(allocator)
    {
        m_mimeType_ = ::std::forward<ZSERIO_T_mimeType>(mimeType_);
        m_uri_ = ::std::forward<ZSERIO_T_uri>(uri_);
    }

    explicit MultimediaResourceReference(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~MultimediaResourceReference() = default;

    MultimediaResourceReference(const MultimediaResourceReference&) = default;
    MultimediaResourceReference& operator=(const MultimediaResourceReference&) = default;

    MultimediaResourceReference(MultimediaResourceReference&&) = default;
    MultimediaResourceReference& operator=(MultimediaResourceReference&&) = default;

    MultimediaResourceReference(::zserio::PropagateAllocatorT,
            const MultimediaResourceReference& other, const allocator_type& allocator);

    const ::zserio::string<>& getMimeType() const;
    ::zserio::string<>& getMimeType();
    void setMimeType(const ::zserio::string<>& mimeType_);
    void setMimeType(::zserio::string<>&& mimeType_);

    const ::zserio::string<>& getUri() const;
    ::zserio::string<>& getUri();
    void setUri(const ::zserio::string<>& uri_);
    void setUri(::zserio::string<>&& uri_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const MultimediaResourceReference& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readMimeType(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readUri(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::zserio::string<> m_mimeType_;
    ::zserio::string<> m_uri_;
};

} // namespace types
} // namespace poi
} // namespace nds

#endif // NDS_POI_TYPES_MULTIMEDIA_RESOURCE_REFERENCE_H
