/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_TYPES_ACCESS_POINT_DETAILS_H
#define NDS_POI_TYPES_ACCESS_POINT_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/poi/types/AccessPointLevel.h>
#include <nds/poi/types/AccessPointMethod.h>

namespace nds
{
namespace poi
{
namespace types
{

class AccessPointDetails
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getAccessPointMethod()
        {
            return m_accessPointMethod_;
        }

        ::zserio::DeltaContext& getAccessPointLevel()
        {
            return m_accessPointLevel_;
        }

    private:
        ::zserio::DeltaContext m_accessPointMethod_;
        ::zserio::DeltaContext m_accessPointLevel_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AccessPointDetails() noexcept :
            AccessPointDetails(allocator_type())
    {}

    explicit AccessPointDetails(const allocator_type& allocator) noexcept;

    AccessPointDetails(
            ::nds::poi::types::AccessPointMethod accessPointMethod_,
            ::nds::poi::types::AccessPointLevel accessPointLevel_,
            const allocator_type& allocator = allocator_type()) :
            AccessPointDetails(allocator)
    {
        m_accessPointMethod_ = accessPointMethod_;
        m_accessPointLevel_ = accessPointLevel_;
    }

    explicit AccessPointDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AccessPointDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AccessPointDetails() = default;

    AccessPointDetails(const AccessPointDetails&) = default;
    AccessPointDetails& operator=(const AccessPointDetails&) = default;

    AccessPointDetails(AccessPointDetails&&) = default;
    AccessPointDetails& operator=(AccessPointDetails&&) = default;

    AccessPointDetails(::zserio::PropagateAllocatorT,
            const AccessPointDetails& other, const allocator_type& allocator);

    ::nds::poi::types::AccessPointMethod getAccessPointMethod() const;
    void setAccessPointMethod(::nds::poi::types::AccessPointMethod accessPointMethod_);

    ::nds::poi::types::AccessPointLevel getAccessPointLevel() const;
    void setAccessPointLevel(::nds::poi::types::AccessPointLevel accessPointLevel_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AccessPointDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::poi::types::AccessPointMethod readAccessPointMethod(::zserio::BitStreamReader& in);
    ::nds::poi::types::AccessPointMethod readAccessPointMethod(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::poi::types::AccessPointLevel readAccessPointLevel(::zserio::BitStreamReader& in);
    ::nds::poi::types::AccessPointLevel readAccessPointLevel(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::poi::types::AccessPointMethod m_accessPointMethod_;
    ::nds::poi::types::AccessPointLevel m_accessPointLevel_;
};

} // namespace types
} // namespace poi
} // namespace nds

#endif // NDS_POI_TYPES_ACCESS_POINT_DETAILS_H
