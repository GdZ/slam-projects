/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_TYPES_EV_CONNECTOR_H
#define NDS_POI_TYPES_EV_CONNECTOR_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/ElectricCurrent.h>
#include <nds/core/vehicle/Ampere.h>
#include <nds/core/vehicle/Voltage.h>
#include <nds/core/vehicle/Watt.h>
#include <nds/poi/types/EvCommunicationStandard.h>
#include <nds/poi/types/EvConnectorType.h>

namespace nds
{
namespace poi
{
namespace types
{

class EvConnector
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getCurrent()
        {
            return m_current_;
        }

        ::zserio::DeltaContext& getMaxPower()
        {
            return m_maxPower_;
        }

        ::zserio::DeltaContext& getVoltage()
        {
            return m_voltage_;
        }

        ::zserio::DeltaContext& getAmpere()
        {
            return m_ampere_;
        }

        ::zserio::DeltaContext& getCommStandard()
        {
            return m_commStandard_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_current_;
        ::zserio::DeltaContext m_maxPower_;
        ::zserio::DeltaContext m_voltage_;
        ::zserio::DeltaContext m_ampere_;
        ::zserio::DeltaContext m_commStandard_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    EvConnector() noexcept :
            EvConnector(allocator_type())
    {}

    explicit EvConnector(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_voltage = ::nds::core::vehicle::Voltage,
            typename ZSERIO_T_ampere = ::nds::core::vehicle::Ampere,
            typename ZSERIO_T_commStandard = ::nds::poi::types::EvCommunicationStandard>
    EvConnector(
            ::nds::poi::types::EvConnectorType type_,
            ::nds::core::types::ElectricCurrent current_,
            ::nds::core::vehicle::Watt maxPower_,
            ZSERIO_T_voltage&& voltage_,
            ZSERIO_T_ampere&& ampere_,
            ZSERIO_T_commStandard&& commStandard_,
            const allocator_type& allocator = allocator_type()) :
            EvConnector(allocator)
    {
        m_type_ = type_;
        m_current_ = current_;
        m_maxPower_ = maxPower_;
        m_voltage_ = ::std::forward<ZSERIO_T_voltage>(voltage_);
        m_ampere_ = ::std::forward<ZSERIO_T_ampere>(ampere_);
        m_commStandard_ = ::std::forward<ZSERIO_T_commStandard>(commStandard_);
    }

    explicit EvConnector(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit EvConnector(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~EvConnector() = default;

    EvConnector(const EvConnector&) = default;
    EvConnector& operator=(const EvConnector&) = default;

    EvConnector(EvConnector&&) = default;
    EvConnector& operator=(EvConnector&&) = default;

    EvConnector(::zserio::PropagateAllocatorT,
            const EvConnector& other, const allocator_type& allocator);

    ::nds::poi::types::EvConnectorType getType() const;
    void setType(::nds::poi::types::EvConnectorType type_);

    ::nds::core::types::ElectricCurrent getCurrent() const;
    void setCurrent(::nds::core::types::ElectricCurrent current_);

    ::nds::core::vehicle::Watt getMaxPower() const;
    void setMaxPower(::nds::core::vehicle::Watt maxPower_);

    ::nds::core::vehicle::Voltage getVoltage() const;
    void setVoltage(::nds::core::vehicle::Voltage voltage_);
    bool isVoltageUsed() const;
    bool isVoltageSet() const;
    void resetVoltage();

    ::nds::core::vehicle::Ampere getAmpere() const;
    void setAmpere(::nds::core::vehicle::Ampere ampere_);
    bool isAmpereUsed() const;
    bool isAmpereSet() const;
    void resetAmpere();

    ::nds::poi::types::EvCommunicationStandard getCommStandard() const;
    void setCommStandard(::nds::poi::types::EvCommunicationStandard commStandard_);
    bool isCommStandardUsed() const;
    bool isCommStandardSet() const;
    void resetCommStandard();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const EvConnector& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::poi::types::EvConnectorType readType(::zserio::BitStreamReader& in);
    ::nds::poi::types::EvConnectorType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::ElectricCurrent readCurrent(::zserio::BitStreamReader& in);
    ::nds::core::types::ElectricCurrent readCurrent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::Watt readMaxPower(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::Watt readMaxPower(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Voltage> readVoltage(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Voltage> readVoltage(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Ampere> readAmpere(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Ampere> readAmpere(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::poi::types::EvCommunicationStandard> readCommStandard(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::poi::types::EvCommunicationStandard> readCommStandard(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::poi::types::EvConnectorType m_type_;
    ::nds::core::types::ElectricCurrent m_current_;
    ::nds::core::vehicle::Watt m_maxPower_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Voltage> m_voltage_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Ampere> m_ampere_;
    ::zserio::InplaceOptionalHolder<::nds::poi::types::EvCommunicationStandard> m_commStandard_;
};

} // namespace types
} // namespace poi
} // namespace nds

#endif // NDS_POI_TYPES_EV_CONNECTOR_H
