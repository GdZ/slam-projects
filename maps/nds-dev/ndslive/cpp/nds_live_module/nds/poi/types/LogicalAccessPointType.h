/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_TYPES_LOGICAL_ACCESS_POINT_TYPE_H
#define NDS_POI_TYPES_LOGICAL_ACCESS_POINT_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace poi
{
namespace types
{

enum class LogicalAccessPointType : uint8_t
{
    SERVICE = UINT8_C(0),
    CONTROLLED_ACCESS_EXIT = UINT8_C(1),
    SERVICE_AREA = UINT8_C(2),
    PARKING_AREA = UINT8_C(3),
    SMART_IC = UINT8_C(4)
};

} // namespace types
} // namespace poi
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for LogicalAccessPointType enumeration.
template <>
struct EnumTraits<::nds::poi::types::LogicalAccessPointType>
{
    static constexpr ::std::array<const char*, 5> names =
    {{
        "SERVICE",
        "CONTROLLED_ACCESS_EXIT",
        "SERVICE_AREA",
        "PARKING_AREA",
        "SMART_IC"
    }};

    static constexpr ::std::array<::nds::poi::types::LogicalAccessPointType, 5> values =
    {{
        ::nds::poi::types::LogicalAccessPointType::SERVICE,
        ::nds::poi::types::LogicalAccessPointType::CONTROLLED_ACCESS_EXIT,
        ::nds::poi::types::LogicalAccessPointType::SERVICE_AREA,
        ::nds::poi::types::LogicalAccessPointType::PARKING_AREA,
        ::nds::poi::types::LogicalAccessPointType::SMART_IC
    }};

    static constexpr const char* enumName = "LogicalAccessPointType";
};

template <>
size_t enumToOrdinal<::nds::poi::types::LogicalAccessPointType>(::nds::poi::types::LogicalAccessPointType value);

template <>
::nds::poi::types::LogicalAccessPointType valueToEnum<::nds::poi::types::LogicalAccessPointType>(
        typename ::std::underlying_type<::nds::poi::types::LogicalAccessPointType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::poi::types::LogicalAccessPointType>(::nds::poi::types::LogicalAccessPointType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::poi::types::LogicalAccessPointType>(::zserio::DeltaContext& context, ::nds::poi::types::LogicalAccessPointType value);

template <>
size_t bitSizeOf<::nds::poi::types::LogicalAccessPointType>(::nds::poi::types::LogicalAccessPointType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::poi::types::LogicalAccessPointType>(::zserio::DeltaContext& context, ::nds::poi::types::LogicalAccessPointType value);

template <>
size_t initializeOffsets<::nds::poi::types::LogicalAccessPointType>(size_t bitPosition, ::nds::poi::types::LogicalAccessPointType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::poi::types::LogicalAccessPointType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::poi::types::LogicalAccessPointType value);

template <>
::nds::poi::types::LogicalAccessPointType read<::nds::poi::types::LogicalAccessPointType>(::zserio::BitStreamReader& in);

template <>
::nds::poi::types::LogicalAccessPointType read<::nds::poi::types::LogicalAccessPointType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::poi::types::LogicalAccessPointType>(::zserio::BitStreamWriter& out, ::nds::poi::types::LogicalAccessPointType value);

template <>
void write<::zserio::DeltaContext, ::nds::poi::types::LogicalAccessPointType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::poi::types::LogicalAccessPointType value);

} // namespace zserio

#endif // NDS_POI_TYPES_LOGICAL_ACCESS_POINT_TYPE_H
