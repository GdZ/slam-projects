/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_TYPES_PAYMENT_METHOD_H
#define NDS_POI_TYPES_PAYMENT_METHOD_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/core/icons/IconSetReference.h>

namespace nds
{
namespace poi
{
namespace types
{

class PaymentMethod
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getIconSetReference()
        {
            return m_iconSetReference_;
        }

    private:
        ::zserio::DeltaContext m_iconSetReference_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PaymentMethod() noexcept :
            PaymentMethod(allocator_type())
    {}

    explicit PaymentMethod(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_name = ::zserio::string<>,
            typename ZSERIO_T_iconSetReference = ::nds::core::icons::IconSetReference,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_name, PaymentMethod, allocator_type> = 0>
    PaymentMethod(
            ZSERIO_T_name&& name_,
            ZSERIO_T_iconSetReference&& iconSetReference_,
            const allocator_type& allocator = allocator_type()) :
            PaymentMethod(allocator)
    {
        m_name_ = ::std::forward<ZSERIO_T_name>(name_);
        m_iconSetReference_ = ::std::forward<ZSERIO_T_iconSetReference>(iconSetReference_);
    }

    explicit PaymentMethod(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PaymentMethod(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PaymentMethod() = default;

    PaymentMethod(const PaymentMethod&) = default;
    PaymentMethod& operator=(const PaymentMethod&) = default;

    PaymentMethod(PaymentMethod&&) = default;
    PaymentMethod& operator=(PaymentMethod&&) = default;

    PaymentMethod(::zserio::PropagateAllocatorT,
            const PaymentMethod& other, const allocator_type& allocator);

    const ::zserio::string<>& getName() const;
    ::zserio::string<>& getName();
    void setName(const ::zserio::string<>& name_);
    void setName(::zserio::string<>&& name_);

    ::nds::core::icons::IconSetReference getIconSetReference() const;
    void setIconSetReference(::nds::core::icons::IconSetReference iconSetReference_);
    bool isIconSetReferenceUsed() const;
    bool isIconSetReferenceSet() const;
    void resetIconSetReference();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PaymentMethod& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::icons::IconSetReference> readIconSetReference(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::icons::IconSetReference> readIconSetReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::zserio::string<> m_name_;
    ::zserio::InplaceOptionalHolder<::nds::core::icons::IconSetReference> m_iconSetReference_;
};

} // namespace types
} // namespace poi
} // namespace nds

#endif // NDS_POI_TYPES_PAYMENT_METHOD_H
