/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_POI_TYPES_AVAILABLE_SPORTIVE_ACTIVITIES_H
#define NDS_POI_TYPES_AVAILABLE_SPORTIVE_ACTIVITIES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

namespace nds
{
namespace poi
{
namespace types
{

class AvailableSportiveActivities
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumSports()
        {
            return m_numSports_;
        }

    private:
        ::zserio::DeltaContext m_numSports_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AvailableSportiveActivities() noexcept :
            AvailableSportiveActivities(allocator_type())
    {}

    explicit AvailableSportiveActivities(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_sports = ::zserio::vector<::zserio::string<>>>
    AvailableSportiveActivities(
            uint8_t numSports_,
            ZSERIO_T_sports&& sports_,
            const allocator_type& allocator = allocator_type()) :
            AvailableSportiveActivities(allocator)
    {
        m_numSports_ = numSports_;
        m_sports_ = ZserioArrayType_sports(::std::forward<ZSERIO_T_sports>(sports_));
    }

    explicit AvailableSportiveActivities(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AvailableSportiveActivities(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AvailableSportiveActivities() = default;

    AvailableSportiveActivities(const AvailableSportiveActivities&) = default;
    AvailableSportiveActivities& operator=(const AvailableSportiveActivities&) = default;

    AvailableSportiveActivities(AvailableSportiveActivities&&) = default;
    AvailableSportiveActivities& operator=(AvailableSportiveActivities&&) = default;

    AvailableSportiveActivities(::zserio::PropagateAllocatorT,
            const AvailableSportiveActivities& other, const allocator_type& allocator);

    uint8_t getNumSports() const;
    void setNumSports(uint8_t numSports_);

    const ::zserio::vector<::zserio::string<>>& getSports() const;
    ::zserio::vector<::zserio::string<>>& getSports();
    void setSports(const ::zserio::vector<::zserio::string<>>& sports_);
    void setSports(::zserio::vector<::zserio::string<>>&& sports_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AvailableSportiveActivities& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_sports = ::zserio::Array<::zserio::vector<::zserio::string<>>, ::zserio::StringArrayTraits, ::zserio::ArrayType::NORMAL>;

    uint8_t readNumSports(::zserio::BitStreamReader& in);
    uint8_t readNumSports(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_sports readSports(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    uint8_t m_numSports_;
    ZserioArrayType_sports m_sports_;
};

} // namespace types
} // namespace poi
} // namespace nds

#endif // NDS_POI_TYPES_AVAILABLE_SPORTIVE_ACTIVITIES_H
