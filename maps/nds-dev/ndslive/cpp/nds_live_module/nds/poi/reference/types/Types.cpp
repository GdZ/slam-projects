/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/poi/reference/types/PoiStandardCategory.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PoiStandardCategory enumeration.
constexpr ::std::array<const char*, 98> EnumTraits<::nds::poi::reference::types::PoiStandardCategory>::names;
constexpr ::std::array<::nds::poi::reference::types::PoiStandardCategory, 98> EnumTraits<::nds::poi::reference::types::PoiStandardCategory>::values;
constexpr const char* EnumTraits<::nds::poi::reference::types::PoiStandardCategory>::enumName;

template <>
size_t enumToOrdinal(::nds::poi::reference::types::PoiStandardCategory value)
{
    switch (value)
    {
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_ACCESS_POINT:
        return 0;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_ACTIVATION_POINT:
        return 1;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_LOGICAL_ACCESS_POINT:
        return 2;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_GUIDANCE_POINT:
        return 3;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_NDSGENERAL:
        return 4;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_VEHICLE_REPAIR:
        return 5;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_FILLING_STATION:
        return 6;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_RENT_A_CAR:
        return 7;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CAR_WASH:
        return 8;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CAR_DEALERSHIP:
        return 9;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_MOTORCYCLE_DEALERSHIP:
        return 10;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_TRUCK_DEALERSHIP:
        return 11;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PARKING_GARAGE:
        return 12;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PARKING_ROW:
        return 13;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PARKING_SPOT:
        return 14;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_OPEN_PARKING:
        return 15;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_REST_AREA:
        return 16;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_ROAD_ASSISTANCE:
        return 17;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CAMPING:
        return 18;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CARAVAN_SITE:
        return 19;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_BUS_AND_TRUCK_PARKING:
        return 20;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_MOTORING_ORG_OFFICE:
        return 21;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CAR_SHIPPING_TERMINAL:
        return 22;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_HOTEL_MOTEL:
        return 23;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_RESTAURANT:
        return 24;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_FAST_FOOD:
        return 25;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_COFFEE_SHOP:
        return 26;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_BAR_OR_PUB:
        return 27;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CINEMA:
        return 28;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_MUSEUM:
        return 29;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_THEATER:
        return 30;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_LIBRARY:
        return 31;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_HOSPITAL:
        return 32;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PHYSICIAN:
        return 33;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_DENTIST:
        return 34;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PHARMACY:
        return 35;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_VETERINARIAN_SERVICE:
        return 36;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_POLICE_STATION:
        return 37;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_POST_OFFICE:
        return 38;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CITY_HALL:
        return 39;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_EMBASSY:
        return 40;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_COURT_HOUSE:
        return 41;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_GOVERNMENT_OFFICE:
        return 42;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_COMMUNITY_CENTER:
        return 43;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_SHOPPING_CENTER:
        return 44;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_STORE:
        return 45;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_BANK:
        return 46;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_ATM:
        return 47;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CURRENCY_EXCHANGE:
        return 48;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_TOURIST_OFFICE:
        return 49;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_TRAVEL_AGENCY:
        return 50;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_TOURIST_ATTRACTION:
        return 51;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_HISTORICAL_MONUMENT:
        return 52;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_NATIONAL_PARK:
        return 53;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CITY_CENTER:
        return 54;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_HAMLET:
        return 55;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_ZOO:
        return 56;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_AMUSEMENT_PARK:
        return 57;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_GOINGOUT:
        return 58;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_STADIUM:
        return 59;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_SPORTS_CENTER:
        return 60;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_RECREATION:
        return 61;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_SKI_RESORT:
        return 62;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_SWIMMING_POOL:
        return 63;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_GOLF_COURSE:
        return 64;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_FERRY_TERMINAL:
        return 65;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_MARINA:
        return 66;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_HARBOR:
        return 67;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_BUSINESS_FACILITY:
        return 68;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_EXHIBITION_CONFERENCE_CENTER:
        return 69;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_RAILWAY_STATION:
        return 70;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PUBLIC_TRANSIT_STOP:
        return 71;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PARK_AND_RIDE:
        return 72;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_AIRPORT:
        return 73;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_AIRLINE_ACCESS:
        return 74;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_TAXI_STAND:
        return 75;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_EMERGENCY_CALL_STATION:
        return 76;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_EMERGENCY_MEDICAL_SERVICE:
        return 77;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_FIRST_AID_POST:
        return 78;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_FIRE_DEPARTMENT:
        return 79;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PLACE_OF_WORSHIP:
        return 80;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_EDUCATION:
        return 81;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CUSTOMS:
        return 82;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_FRONTIER_CROSSING:
        return 83;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_TOLL_LOCATION:
        return 84;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PUBLIC_RESTROOM:
        return 85;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PUBLIC_PHONE:
        return 86;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_KINDERGARTEN:
        return 87;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_MOUNTAIN_PASS_SUMMIT:
        return 88;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_EV_CHARGING_STATION:
        return 89;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CONTROLLED_ACCESS_INTERSECTION:
        return 90;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CONTROLLED_ACCESS_SMART_IC:
        return 91;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CONTROLLED_ACCESS_ENTRY:
        return 92;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_CONTROLLED_ACCESS_EXIT:
        return 93;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_MOTORWAY_ENTRY:
        return 94;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_MOTORWAY_EXIT:
        return 95;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PARKING_SECTION:
        return 96;
    case ::nds::poi::reference::types::PoiStandardCategory::POICAT_PARKING_VENUE_SECTION:
        return 97;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiStandardCategory: ") <<
                static_cast<typename ::std::underlying_type<::nds::poi::reference::types::PoiStandardCategory>::type>(value) << "!";
    }
}

template <>
::nds::poi::reference::types::PoiStandardCategory valueToEnum(
        typename ::std::underlying_type<::nds::poi::reference::types::PoiStandardCategory>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
    case UINT16_C(18):
    case UINT16_C(19):
    case UINT16_C(20):
    case UINT16_C(21):
    case UINT16_C(22):
    case UINT16_C(23):
    case UINT16_C(24):
    case UINT16_C(25):
    case UINT16_C(26):
    case UINT16_C(27):
    case UINT16_C(28):
    case UINT16_C(29):
    case UINT16_C(30):
    case UINT16_C(31):
    case UINT16_C(32):
    case UINT16_C(33):
    case UINT16_C(34):
    case UINT16_C(35):
    case UINT16_C(36):
    case UINT16_C(37):
    case UINT16_C(38):
    case UINT16_C(39):
    case UINT16_C(40):
    case UINT16_C(41):
    case UINT16_C(42):
    case UINT16_C(43):
    case UINT16_C(44):
    case UINT16_C(45):
    case UINT16_C(46):
    case UINT16_C(47):
    case UINT16_C(48):
    case UINT16_C(49):
    case UINT16_C(50):
    case UINT16_C(51):
    case UINT16_C(52):
    case UINT16_C(53):
    case UINT16_C(54):
    case UINT16_C(55):
    case UINT16_C(56):
    case UINT16_C(57):
    case UINT16_C(58):
    case UINT16_C(59):
    case UINT16_C(60):
    case UINT16_C(61):
    case UINT16_C(62):
    case UINT16_C(63):
    case UINT16_C(64):
    case UINT16_C(65):
    case UINT16_C(66):
    case UINT16_C(67):
    case UINT16_C(68):
    case UINT16_C(69):
    case UINT16_C(70):
    case UINT16_C(71):
    case UINT16_C(72):
    case UINT16_C(73):
    case UINT16_C(74):
    case UINT16_C(75):
    case UINT16_C(76):
    case UINT16_C(77):
    case UINT16_C(78):
    case UINT16_C(79):
    case UINT16_C(80):
    case UINT16_C(81):
    case UINT16_C(82):
    case UINT16_C(83):
    case UINT16_C(84):
    case UINT16_C(85):
    case UINT16_C(86):
    case UINT16_C(87):
    case UINT16_C(88):
    case UINT16_C(89):
    case UINT16_C(90):
    case UINT16_C(91):
    case UINT16_C(92):
    case UINT16_C(93):
    case UINT16_C(94):
    case UINT16_C(95):
    case UINT16_C(96):
    case UINT16_C(97):
        return static_cast<::nds::poi::reference::types::PoiStandardCategory>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PoiStandardCategory: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::poi::reference::types::PoiStandardCategory>(::nds::poi::reference::types::PoiStandardCategory value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::poi::reference::types::PoiStandardCategory value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::poi::reference::types::PoiStandardCategory>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::poi::reference::types::PoiStandardCategory value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::poi::reference::types::PoiStandardCategory value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::poi::reference::types::PoiStandardCategory>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::poi::reference::types::PoiStandardCategory value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::poi::reference::types::PoiStandardCategory value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::poi::reference::types::PoiStandardCategory read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::reference::types::PoiStandardCategory>(
            static_cast<typename ::std::underlying_type<::nds::poi::reference::types::PoiStandardCategory>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::poi::reference::types::PoiStandardCategory read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::poi::reference::types::PoiStandardCategory>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::poi::reference::types::PoiStandardCategory>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::poi::reference::types::PoiStandardCategory value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::poi::reference::types::PoiStandardCategory value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::poi::reference::types::PoiStandardCategory>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/poi/reference/types/PoiReferenceIndirect.h>

namespace nds
{
namespace poi
{
namespace reference
{
namespace types
{

PoiReferenceIndirect::PoiReferenceIndirect(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_standardCategory_(::nds::poi::reference::types::PoiStandardCategory()),
        m_position_(allocator),
        m_roadLocationPath_(::zserio::NullOpt),
        m_name_(::zserio::NullOpt)
{
}

PoiReferenceIndirect::PoiReferenceIndirect(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_standardCategory_(readStandardCategory(in)),
        m_position_(readPosition(in, allocator)),
        m_roadLocationPath_(readRoadLocationPath(in, allocator)),
        m_name_(readName(in, allocator))
{
}

PoiReferenceIndirect::PoiReferenceIndirect(PoiReferenceIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_standardCategory_(readStandardCategory(context, in)),
        m_position_(readPosition(context, in, allocator)),
        m_roadLocationPath_(readRoadLocationPath(context, in, allocator)),
        m_name_(readName(in, allocator))
{
}

PoiReferenceIndirect::PoiReferenceIndirect(const PoiReferenceIndirect& other) :
        m_standardCategory_(other.m_standardCategory_),
        m_position_(other.m_position_),
        m_roadLocationPath_(other.m_roadLocationPath_),
        m_name_(other.m_name_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

PoiReferenceIndirect& PoiReferenceIndirect::operator=(const PoiReferenceIndirect& other)
{
    m_standardCategory_ = other.m_standardCategory_;
    m_position_ = other.m_position_;
    m_roadLocationPath_ = other.m_roadLocationPath_;
    m_name_ = other.m_name_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

PoiReferenceIndirect::PoiReferenceIndirect(PoiReferenceIndirect&& other) :
        m_standardCategory_(::std::move(other.m_standardCategory_)),
        m_position_(::std::move(other.m_position_)),
        m_roadLocationPath_(::std::move(other.m_roadLocationPath_)),
        m_name_(::std::move(other.m_name_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

PoiReferenceIndirect& PoiReferenceIndirect::operator=(PoiReferenceIndirect&& other)
{
    m_standardCategory_ = ::std::move(other.m_standardCategory_);
    m_position_ = ::std::move(other.m_position_);
    m_roadLocationPath_ = ::std::move(other.m_roadLocationPath_);
    m_name_ = ::std::move(other.m_name_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

PoiReferenceIndirect::PoiReferenceIndirect(::zserio::PropagateAllocatorT,
        const PoiReferenceIndirect& other, const allocator_type& allocator) :
        m_standardCategory_(::zserio::allocatorPropagatingCopy(other.m_standardCategory_, allocator)),
        m_position_(::zserio::allocatorPropagatingCopy(other.m_position_, allocator)),
        m_roadLocationPath_(::zserio::allocatorPropagatingCopy(other.m_roadLocationPath_, allocator)),
        m_name_(::zserio::allocatorPropagatingCopy(other.m_name_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void PoiReferenceIndirect::initializeChildren()
{
    m_position_.initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if (isRoadLocationPathSet())
        m_roadLocationPath_.value().initializeChildren();

    m_areChildrenInitialized = true;
}

::nds::poi::reference::types::PoiStandardCategory PoiReferenceIndirect::getStandardCategory() const
{
    return m_standardCategory_;
}

void PoiReferenceIndirect::setStandardCategory(::nds::poi::reference::types::PoiStandardCategory standardCategory_)
{
    m_standardCategory_ = standardCategory_;
}

::nds::core::geometry::Position2D& PoiReferenceIndirect::getPosition()
{
    return m_position_;
}

const ::nds::core::geometry::Position2D& PoiReferenceIndirect::getPosition() const
{
    return m_position_;
}

void PoiReferenceIndirect::setPosition(const ::nds::core::geometry::Position2D& position_)
{
    m_position_ = position_;
}

void PoiReferenceIndirect::setPosition(::nds::core::geometry::Position2D&& position_)
{
    m_position_ = ::std::move(position_);
}

::nds::core::location::RoadLocationPath& PoiReferenceIndirect::getRoadLocationPath()
{
    return m_roadLocationPath_.value();
}

const ::nds::core::location::RoadLocationPath& PoiReferenceIndirect::getRoadLocationPath() const
{
    return m_roadLocationPath_.value();
}

void PoiReferenceIndirect::setRoadLocationPath(const ::nds::core::location::RoadLocationPath& roadLocationPath_)
{
    m_roadLocationPath_ = roadLocationPath_;
}

void PoiReferenceIndirect::setRoadLocationPath(::nds::core::location::RoadLocationPath&& roadLocationPath_)
{
    m_roadLocationPath_ = ::std::move(roadLocationPath_);
}

bool PoiReferenceIndirect::isRoadLocationPathUsed() const
{
    return (isRoadLocationPathSet());
}

bool PoiReferenceIndirect::isRoadLocationPathSet() const
{
    return m_roadLocationPath_.hasValue();
}

void PoiReferenceIndirect::resetRoadLocationPath()
{
    m_roadLocationPath_.reset();
}

::zserio::string<>& PoiReferenceIndirect::getName()
{
    return m_name_.value();
}

const ::zserio::string<>& PoiReferenceIndirect::getName() const
{
    return m_name_.value();
}

void PoiReferenceIndirect::setName(const ::zserio::string<>& name_)
{
    m_name_ = name_;
}

void PoiReferenceIndirect::setName(::zserio::string<>&& name_)
{
    m_name_ = ::std::move(name_);
}

bool PoiReferenceIndirect::isNameUsed() const
{
    return (isNameSet());
}

bool PoiReferenceIndirect::isNameSet() const
{
    return m_name_.hasValue();
}

void PoiReferenceIndirect::resetName()
{
    m_name_.reset();
}

void PoiReferenceIndirect::initPackingContext(PoiReferenceIndirect::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getStandardCategory(), m_standardCategory_);
    m_position_.initPackingContext(context.getPosition());
    if (isRoadLocationPathSet())
    {
        m_roadLocationPath_.value().initPackingContext(context.getRoadLocationPath());
    }
}

size_t PoiReferenceIndirect::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_standardCategory_);
    endBitPosition += m_position_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationPathSet())
    {
        endBitPosition += m_roadLocationPath_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += 1;
    if (isNameSet())
    {
        endBitPosition += ::zserio::bitSizeOfString(m_name_.value());
    }

    return endBitPosition - bitPosition;
}

size_t PoiReferenceIndirect::bitSizeOf(PoiReferenceIndirect::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getStandardCategory(), m_standardCategory_);
    endBitPosition += m_position_.bitSizeOf(context.getPosition(), endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationPathSet())
    {
        endBitPosition += m_roadLocationPath_.value().bitSizeOf(context.getRoadLocationPath(), endBitPosition);
    }
    endBitPosition += 1;
    if (isNameSet())
    {
        endBitPosition += ::zserio::bitSizeOfString(m_name_.value());
    }

    return endBitPosition - bitPosition;
}

size_t PoiReferenceIndirect::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_standardCategory_);
    endBitPosition = m_position_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationPathSet())
    {
        endBitPosition = m_roadLocationPath_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition += 1;
    if (isNameSet())
    {
        endBitPosition += ::zserio::bitSizeOfString(m_name_.value());
    }

    return endBitPosition;
}

size_t PoiReferenceIndirect::initializeOffsets(PoiReferenceIndirect::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getStandardCategory(), endBitPosition,
        m_standardCategory_);
    endBitPosition = m_position_.initializeOffsets(context.getPosition(), endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationPathSet())
    {
        endBitPosition = m_roadLocationPath_.value().initializeOffsets(context.getRoadLocationPath(), endBitPosition);
    }
    endBitPosition += 1;
    if (isNameSet())
    {
        endBitPosition += ::zserio::bitSizeOfString(m_name_.value());
    }

    return endBitPosition;
}

bool PoiReferenceIndirect::operator==(const PoiReferenceIndirect& other) const
{
    if (this != &other)
    {
        return
                (m_standardCategory_ == other.m_standardCategory_) &&
                (m_position_ == other.m_position_) &&
                (!isRoadLocationPathUsed() ? !other.isRoadLocationPathUsed() : (m_roadLocationPath_ == other.m_roadLocationPath_)) &&
                (!isNameUsed() ? !other.isNameUsed() : (m_name_ == other.m_name_));
    }

    return true;
}

uint32_t PoiReferenceIndirect::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_standardCategory_);
    result = ::zserio::calcHashCode(result, m_position_);
    if (isRoadLocationPathUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationPath_);
    if (isNameUsed())
        result = ::zserio::calcHashCode(result, m_name_);

    return result;
}

void PoiReferenceIndirect::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_standardCategory_);

    // check parameters
    if (m_position_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field PoiReferenceIndirect.position: ") <<
                m_position_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_position_.write(out);

    if (isRoadLocationPathSet())
    {
        out.writeBool(true);
        m_roadLocationPath_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }

    if (isNameSet())
    {
        out.writeBool(true);
        out.writeString(m_name_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

void PoiReferenceIndirect::write(PoiReferenceIndirect::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getStandardCategory(), out, m_standardCategory_);

    // check parameters
    if (m_position_.getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field PoiReferenceIndirect.position: ") <<
                m_position_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
    }
    m_position_.write(context.getPosition(), out);

    if (isRoadLocationPathSet())
    {
        out.writeBool(true);
        m_roadLocationPath_.value().write(context.getRoadLocationPath(), out);
    }
    else
    {
        out.writeBool(false);
    }

    if (isNameSet())
    {
        out.writeBool(true);
        out.writeString(m_name_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

::nds::poi::reference::types::PoiStandardCategory PoiReferenceIndirect::readStandardCategory(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::poi::reference::types::PoiStandardCategory>(in);
}

::nds::poi::reference::types::PoiStandardCategory PoiReferenceIndirect::readStandardCategory(PoiReferenceIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::poi::reference::types::PoiStandardCategory>(context.getStandardCategory(), in);
}
::nds::core::geometry::Position2D PoiReferenceIndirect::readPosition(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}

::nds::core::geometry::Position2D PoiReferenceIndirect::readPosition(PoiReferenceIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(context.getPosition(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator);
}
::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath> PoiReferenceIndirect::readRoadLocationPath(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath>(::nds::core::location::RoadLocationPath(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath> PoiReferenceIndirect::readRoadLocationPath(PoiReferenceIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath>(::nds::core::location::RoadLocationPath(context.getRoadLocationPath(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::location::RoadLocationPath>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::zserio::string<>> PoiReferenceIndirect::readName(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::zserio::string<>>(static_cast<::zserio::string<>>(in.readString(allocator)));
    }

    return ::zserio::InplaceOptionalHolder<::zserio::string<>>(::zserio::NullOpt);
}

} // namespace types
} // namespace reference
} // namespace poi
} // namespace nds
