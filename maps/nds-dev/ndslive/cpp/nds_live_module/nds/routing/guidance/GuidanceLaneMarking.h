/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_GUIDANCE_GUIDANCE_LANE_MARKING_H
#define NDS_ROUTING_GUIDANCE_GUIDANCE_LANE_MARKING_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace routing
{
namespace guidance
{

class GuidanceLaneMarking
{
public:
    using underlying_type = uint64_t;

    enum class Values : underlying_type
    {
        NONE = UINT64_C(0),
        ARROW_STRAIGHT = UINT64_C(2),
        ARROW_LEFT = UINT64_C(4),
        ARROW_RIGHT = UINT64_C(8),
        ARROW_SLIGHT_LEFT = UINT64_C(16),
        ARROW_SLIGHT_RIGHT = UINT64_C(32),
        ARROW_SHARP_RIGHT = UINT64_C(64),
        ARROW_SHARP_LEFT = UINT64_C(128),
        ARROW_U_TURN_LEFT = UINT64_C(256),
        ARROW_U_TURN_RIGHT = UINT64_C(512)
    };

    constexpr GuidanceLaneMarking() noexcept :
            m_value(0)
    {}

    explicit GuidanceLaneMarking(::zserio::BitStreamReader& in);
    GuidanceLaneMarking(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);
    constexpr GuidanceLaneMarking(Values value) noexcept :
            m_value(static_cast<underlying_type>(value))
    {}

    explicit GuidanceLaneMarking(underlying_type value);

    ~GuidanceLaneMarking() = default;

    GuidanceLaneMarking(const GuidanceLaneMarking&) = default;
    GuidanceLaneMarking& operator=(const GuidanceLaneMarking&) = default;

    GuidanceLaneMarking(GuidanceLaneMarking&&) = default;
    GuidanceLaneMarking& operator=(GuidanceLaneMarking&&) = default;

    constexpr explicit operator underlying_type() const
    {
        return m_value;
    }

    constexpr underlying_type getValue() const
    {
        return m_value;
    }

    void initPackingContext(::zserio::DeltaContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::DeltaContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0) const;
    size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const;

    ::zserio::string<> toString(const ::zserio::string<>::allocator_type& allocator =
            ::zserio::string<>::allocator_type()) const;

private:
    static underlying_type readValue(::zserio::BitStreamReader& in);
    static underlying_type readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

    underlying_type m_value;
};

inline bool operator==(const GuidanceLaneMarking& lhs, const GuidanceLaneMarking& rhs)
{
    return lhs.getValue() == rhs.getValue();
}

inline bool operator!=(const GuidanceLaneMarking& lhs, const GuidanceLaneMarking& rhs)
{
    return lhs.getValue() != rhs.getValue();
}

inline GuidanceLaneMarking operator|(GuidanceLaneMarking::Values lhs, GuidanceLaneMarking::Values rhs)
{
    return GuidanceLaneMarking(static_cast<GuidanceLaneMarking::underlying_type>(lhs) | static_cast<GuidanceLaneMarking::underlying_type>(rhs));
}

inline GuidanceLaneMarking operator|(const GuidanceLaneMarking& lhs, const GuidanceLaneMarking& rhs)
{
    return GuidanceLaneMarking(lhs.getValue() | rhs.getValue());
}

inline GuidanceLaneMarking operator&(GuidanceLaneMarking::Values lhs, GuidanceLaneMarking::Values rhs)
{
    return GuidanceLaneMarking(static_cast<GuidanceLaneMarking::underlying_type>(lhs) & static_cast<GuidanceLaneMarking::underlying_type>(rhs));
}

inline GuidanceLaneMarking operator&(const GuidanceLaneMarking& lhs, const GuidanceLaneMarking& rhs)
{
    return GuidanceLaneMarking(lhs.getValue() & rhs.getValue());
}

inline GuidanceLaneMarking operator^(GuidanceLaneMarking::Values lhs, GuidanceLaneMarking::Values rhs)
{
    return GuidanceLaneMarking(static_cast<GuidanceLaneMarking::underlying_type>(lhs) ^ static_cast<GuidanceLaneMarking::underlying_type>(rhs));
}

inline GuidanceLaneMarking operator^(const GuidanceLaneMarking& lhs, const GuidanceLaneMarking& rhs)
{
    return GuidanceLaneMarking(lhs.getValue() ^ rhs.getValue());
}

inline GuidanceLaneMarking operator~(GuidanceLaneMarking::Values lhs)
{
    return GuidanceLaneMarking(~static_cast<GuidanceLaneMarking::underlying_type>(lhs) & UINT64_C(144115188075855871));
}

inline GuidanceLaneMarking operator~(const GuidanceLaneMarking& lhs)
{
    return GuidanceLaneMarking(~lhs.getValue() & UINT64_C(144115188075855871));
}

inline GuidanceLaneMarking operator|=(GuidanceLaneMarking& lhs, const GuidanceLaneMarking& rhs)
{
    lhs = GuidanceLaneMarking(lhs.getValue() | rhs.getValue());
    return lhs;
}

inline GuidanceLaneMarking operator&=(GuidanceLaneMarking& lhs, const GuidanceLaneMarking& rhs)
{
    lhs = GuidanceLaneMarking(lhs.getValue() & rhs.getValue());
    return lhs;
}

inline GuidanceLaneMarking operator^=(GuidanceLaneMarking& lhs, const GuidanceLaneMarking& rhs)
{
    lhs = GuidanceLaneMarking(lhs.getValue() ^ rhs.getValue());
    return lhs;
}

} // namespace guidance
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_GUIDANCE_GUIDANCE_LANE_MARKING_H
