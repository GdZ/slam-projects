/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_GUIDANCE_GUIDANCE_NAME_STRING_RELATION_LIST_H
#define NDS_ROUTING_GUIDANCE_GUIDANCE_NAME_STRING_RELATION_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/routing/guidance/GuidanceNameStringRelation.h>

namespace nds
{
namespace routing
{
namespace guidance
{

class GuidanceNameStringRelationList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumRelations()
        {
            return m_numRelations_;
        }

    private:
        ::zserio::DeltaContext m_numRelations_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    GuidanceNameStringRelationList() noexcept :
            GuidanceNameStringRelationList(allocator_type())
    {}

    explicit GuidanceNameStringRelationList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_relations = ::zserio::vector<::nds::routing::guidance::GuidanceNameStringRelation>>
    GuidanceNameStringRelationList(
            uint8_t numRelations_,
            ZSERIO_T_relations&& relations_,
            const allocator_type& allocator = allocator_type()) :
            GuidanceNameStringRelationList(allocator)
    {
        m_numRelations_ = numRelations_;
        m_relations_ = ZserioArrayType_relations(::std::forward<ZSERIO_T_relations>(relations_));
    }

    explicit GuidanceNameStringRelationList(::zserio::BitStreamReader& in,
            uint8_t numNames_, const allocator_type& allocator = allocator_type());
    explicit GuidanceNameStringRelationList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            uint8_t numNames_, const allocator_type& allocator = allocator_type());

    ~GuidanceNameStringRelationList() = default;

    GuidanceNameStringRelationList(const GuidanceNameStringRelationList& other);
    GuidanceNameStringRelationList& operator=(const GuidanceNameStringRelationList& other);

    GuidanceNameStringRelationList(GuidanceNameStringRelationList&& other);
    GuidanceNameStringRelationList& operator=(GuidanceNameStringRelationList&& other);

    GuidanceNameStringRelationList(::zserio::PropagateAllocatorT,
            const GuidanceNameStringRelationList& other, const allocator_type& allocator);

    void initialize(
            uint8_t numNames_);
    bool isInitialized() const;
    void initializeChildren();

    uint8_t getNumNames() const;

    uint8_t getNumRelations() const;
    void setNumRelations(uint8_t numRelations_);

    const ::zserio::vector<::nds::routing::guidance::GuidanceNameStringRelation>& getRelations() const;
    ::zserio::vector<::nds::routing::guidance::GuidanceNameStringRelation>& getRelations();
    void setRelations(const ::zserio::vector<::nds::routing::guidance::GuidanceNameStringRelation>& relations_);
    void setRelations(::zserio::vector<::nds::routing::guidance::GuidanceNameStringRelation>&& relations_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const GuidanceNameStringRelationList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_relations
    {
    public:
        using OwnerType = GuidanceNameStringRelationList;

        static void initializeElement(GuidanceNameStringRelationList& owner,
                ::nds::routing::guidance::GuidanceNameStringRelation& element, size_t index);
    };

    class ZserioElementFactory_relations
    {
    public:
        using OwnerType = GuidanceNameStringRelationList;

        static void create(GuidanceNameStringRelationList& owner,
                ::zserio::vector<::nds::routing::guidance::GuidanceNameStringRelation>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(GuidanceNameStringRelationList& owner,
                ::zserio::vector<::nds::routing::guidance::GuidanceNameStringRelation>& array,
                ::nds::routing::guidance::GuidanceNameStringRelation::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_relations = ::zserio::Array<::zserio::vector<::nds::routing::guidance::GuidanceNameStringRelation>, ::zserio::ObjectArrayTraits<::nds::routing::guidance::GuidanceNameStringRelation, ZserioElementFactory_relations>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_relations>;

    uint8_t readNumRelations(::zserio::BitStreamReader& in);
    uint8_t readNumRelations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_relations readRelations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_relations readRelations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint8_t m_numNames_;
    bool m_isInitialized;
    uint8_t m_numRelations_;
    ZserioArrayType_relations m_relations_;
};

} // namespace guidance
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_GUIDANCE_GUIDANCE_NAME_STRING_RELATION_LIST_H
