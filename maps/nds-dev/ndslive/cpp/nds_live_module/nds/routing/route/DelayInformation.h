/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_ROUTE_DELAY_INFORMATION_H
#define NDS_ROUTING_ROUTE_DELAY_INFORMATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/core/types/Seconds.h>
#include <nds/routing/route/DelayReasonType.h>

namespace nds
{
namespace routing
{
namespace route
{

class DelayInformation
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getDelay()
        {
            return m_delay_;
        }

        ::zserio::DeltaContext& getReasonType()
        {
            return m_reasonType_;
        }

    private:
        ::zserio::DeltaContext m_delay_;
        ::zserio::DeltaContext m_reasonType_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DelayInformation() noexcept :
            DelayInformation(allocator_type())
    {}

    explicit DelayInformation(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_reason = ::zserio::string<>>
    DelayInformation(
            ::nds::core::types::Seconds delay_,
            ::nds::routing::route::DelayReasonType reasonType_,
            ZSERIO_T_reason&& reason_,
            const allocator_type& allocator = allocator_type()) :
            DelayInformation(allocator)
    {
        m_delay_ = delay_;
        m_reasonType_ = reasonType_;
        m_reason_ = ::std::forward<ZSERIO_T_reason>(reason_);
    }

    explicit DelayInformation(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DelayInformation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DelayInformation() = default;

    DelayInformation(const DelayInformation&) = default;
    DelayInformation& operator=(const DelayInformation&) = default;

    DelayInformation(DelayInformation&&) = default;
    DelayInformation& operator=(DelayInformation&&) = default;

    DelayInformation(::zserio::PropagateAllocatorT,
            const DelayInformation& other, const allocator_type& allocator);

    ::nds::core::types::Seconds getDelay() const;
    void setDelay(::nds::core::types::Seconds delay_);

    ::nds::routing::route::DelayReasonType getReasonType() const;
    void setReasonType(::nds::routing::route::DelayReasonType reasonType_);

    const ::zserio::string<>& getReason() const;
    ::zserio::string<>& getReason();
    void setReason(const ::zserio::string<>& reason_);
    void setReason(::zserio::string<>&& reason_);
    bool isReasonUsed() const;
    bool isReasonSet() const;
    void resetReason();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DelayInformation& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::Seconds readDelay(::zserio::BitStreamReader& in);
    ::nds::core::types::Seconds readDelay(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::routing::route::DelayReasonType readReasonType(::zserio::BitStreamReader& in);
    ::nds::routing::route::DelayReasonType readReasonType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readReason(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::core::types::Seconds m_delay_;
    ::nds::routing::route::DelayReasonType m_reasonType_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_reason_;
};

} // namespace route
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_ROUTE_DELAY_INFORMATION_H
