/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_ROUTE_ROUTE_SEGMENT_H
#define NDS_ROUTING_ROUTE_ROUTE_SEGMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/LinePosition.h>
#include <nds/core/geometry/LinePositionOffset2D.h>
#include <nds/core/types/LengthCentimeters.h>
#include <nds/core/types/Seconds.h>
#include <nds/routing/route/RouteSegmentDetails.h>
#include <nds/routing/types/RouteSegmentType.h>

namespace nds
{
namespace routing
{
namespace route
{

class RouteSegment
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getStartPosition()
        {
            return m_startPosition_;
        }

        ::nds::core::geometry::LinePositionOffset2D::ZserioPackingContext& getStartPositionWithOffset()
        {
            return m_startPositionWithOffset_;
        }

        ::zserio::DeltaContext& getEndPosition()
        {
            return m_endPosition_;
        }

        ::nds::core::geometry::LinePositionOffset2D::ZserioPackingContext& getEndPositionWithOffset()
        {
            return m_endPositionWithOffset_;
        }

        ::zserio::DeltaContext& getLength()
        {
            return m_length_;
        }

        ::zserio::DeltaContext& getTravelTime()
        {
            return m_travelTime_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::nds::routing::route::RouteSegmentDetails::ZserioPackingContext& getSegmentDetails()
        {
            return m_segmentDetails_;
        }

    private:
        ::zserio::DeltaContext m_startPosition_;
        ::nds::core::geometry::LinePositionOffset2D::ZserioPackingContext m_startPositionWithOffset_;
        ::zserio::DeltaContext m_endPosition_;
        ::nds::core::geometry::LinePositionOffset2D::ZserioPackingContext m_endPositionWithOffset_;
        ::zserio::DeltaContext m_length_;
        ::zserio::DeltaContext m_travelTime_;
        ::zserio::DeltaContext m_type_;
        ::nds::routing::route::RouteSegmentDetails::ZserioPackingContext m_segmentDetails_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RouteSegment() noexcept :
            RouteSegment(allocator_type())
    {}

    explicit RouteSegment(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_startPosition = ::nds::core::geometry::LinePosition,
            typename ZSERIO_T_startPositionWithOffset = ::nds::core::geometry::LinePositionOffset2D,
            typename ZSERIO_T_endPosition = ::nds::core::geometry::LinePosition,
            typename ZSERIO_T_endPositionWithOffset = ::nds::core::geometry::LinePositionOffset2D,
            typename ZSERIO_T_segmentDetails = ::nds::routing::route::RouteSegmentDetails>
    RouteSegment(
            bool hasStartOffset_,
            bool hasEndOffset_,
            ZSERIO_T_startPosition&& startPosition_,
            ZSERIO_T_startPositionWithOffset&& startPositionWithOffset_,
            ZSERIO_T_endPosition&& endPosition_,
            ZSERIO_T_endPositionWithOffset&& endPositionWithOffset_,
            ::nds::core::types::LengthCentimeters length_,
            ::nds::core::types::Seconds travelTime_,
            ::nds::routing::types::RouteSegmentType type_,
            ZSERIO_T_segmentDetails&& segmentDetails_,
            const allocator_type& allocator = allocator_type()) :
            RouteSegment(allocator)
    {
        m_hasStartOffset_ = hasStartOffset_;
        m_hasEndOffset_ = hasEndOffset_;
        m_startPosition_ = ::std::forward<ZSERIO_T_startPosition>(startPosition_);
        m_startPositionWithOffset_ = ::std::forward<ZSERIO_T_startPositionWithOffset>(startPositionWithOffset_);
        m_endPosition_ = ::std::forward<ZSERIO_T_endPosition>(endPosition_);
        m_endPositionWithOffset_ = ::std::forward<ZSERIO_T_endPositionWithOffset>(endPositionWithOffset_);
        m_length_ = length_;
        m_travelTime_ = travelTime_;
        m_type_ = type_;
        m_segmentDetails_ = ::std::forward<ZSERIO_T_segmentDetails>(segmentDetails_);
    }

    explicit RouteSegment(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RouteSegment(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RouteSegment() = default;

    RouteSegment(const RouteSegment& other);
    RouteSegment& operator=(const RouteSegment& other);

    RouteSegment(RouteSegment&& other);
    RouteSegment& operator=(RouteSegment&& other);

    RouteSegment(::zserio::PropagateAllocatorT,
            const RouteSegment& other, const allocator_type& allocator);

    void initializeChildren();

    bool getHasStartOffset() const;
    void setHasStartOffset(bool hasStartOffset_);

    bool getHasEndOffset() const;
    void setHasEndOffset(bool hasEndOffset_);

    ::nds::core::geometry::LinePosition getStartPosition() const;
    void setStartPosition(::nds::core::geometry::LinePosition startPosition_);
    bool isStartPositionUsed() const;
    bool isStartPositionSet() const;
    void resetStartPosition();

    const ::nds::core::geometry::LinePositionOffset2D& getStartPositionWithOffset() const;
    ::nds::core::geometry::LinePositionOffset2D& getStartPositionWithOffset();
    void setStartPositionWithOffset(const ::nds::core::geometry::LinePositionOffset2D& startPositionWithOffset_);
    void setStartPositionWithOffset(::nds::core::geometry::LinePositionOffset2D&& startPositionWithOffset_);
    bool isStartPositionWithOffsetUsed() const;
    bool isStartPositionWithOffsetSet() const;
    void resetStartPositionWithOffset();

    ::nds::core::geometry::LinePosition getEndPosition() const;
    void setEndPosition(::nds::core::geometry::LinePosition endPosition_);
    bool isEndPositionUsed() const;
    bool isEndPositionSet() const;
    void resetEndPosition();

    const ::nds::core::geometry::LinePositionOffset2D& getEndPositionWithOffset() const;
    ::nds::core::geometry::LinePositionOffset2D& getEndPositionWithOffset();
    void setEndPositionWithOffset(const ::nds::core::geometry::LinePositionOffset2D& endPositionWithOffset_);
    void setEndPositionWithOffset(::nds::core::geometry::LinePositionOffset2D&& endPositionWithOffset_);
    bool isEndPositionWithOffsetUsed() const;
    bool isEndPositionWithOffsetSet() const;
    void resetEndPositionWithOffset();

    ::nds::core::types::LengthCentimeters getLength() const;
    void setLength(::nds::core::types::LengthCentimeters length_);

    ::nds::core::types::Seconds getTravelTime() const;
    void setTravelTime(::nds::core::types::Seconds travelTime_);

    ::nds::routing::types::RouteSegmentType getType() const;
    void setType(::nds::routing::types::RouteSegmentType type_);

    const ::nds::routing::route::RouteSegmentDetails& getSegmentDetails() const;
    ::nds::routing::route::RouteSegmentDetails& getSegmentDetails();
    void setSegmentDetails(const ::nds::routing::route::RouteSegmentDetails& segmentDetails_);
    void setSegmentDetails(::nds::routing::route::RouteSegmentDetails&& segmentDetails_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RouteSegment& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    bool readHasStartOffset(::zserio::BitStreamReader& in);
    bool readHasEndOffset(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePosition> readStartPosition(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePosition> readStartPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePositionOffset2D> readStartPositionWithOffset(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePositionOffset2D> readStartPositionWithOffset(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePosition> readEndPosition(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePosition> readEndPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePositionOffset2D> readEndPositionWithOffset(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePositionOffset2D> readEndPositionWithOffset(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::types::LengthCentimeters readLength(::zserio::BitStreamReader& in);
    ::nds::core::types::LengthCentimeters readLength(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::Seconds readTravelTime(::zserio::BitStreamReader& in);
    ::nds::core::types::Seconds readTravelTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::routing::types::RouteSegmentType readType(::zserio::BitStreamReader& in);
    ::nds::routing::types::RouteSegmentType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::routing::route::RouteSegmentDetails readSegmentDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::routing::route::RouteSegmentDetails readSegmentDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    bool m_hasStartOffset_;
    bool m_hasEndOffset_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePosition> m_startPosition_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePositionOffset2D> m_startPositionWithOffset_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePosition> m_endPosition_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::LinePositionOffset2D> m_endPositionWithOffset_;
    ::nds::core::types::LengthCentimeters m_length_;
    ::nds::core::types::Seconds m_travelTime_;
    ::nds::routing::types::RouteSegmentType m_type_;
    ::nds::routing::route::RouteSegmentDetails m_segmentDetails_;
};

} // namespace route
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_ROUTE_ROUTE_SEGMENT_H
