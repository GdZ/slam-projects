/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_ROUTE_ROUTE_SEGMENT_DETAILS_H
#define NDS_ROUTING_ROUTE_ROUTE_SEGMENT_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/TollCost.h>
#include <nds/core/types/TrafficEnforcementCameraType.h>
#include <nds/core/types/TrafficEnforcementZoneType.h>
#include <nds/routing/route/DelayInformation.h>
#include <nds/routing/types/Pollution.h>
#include <nds/routing/types/RouteSegmentType.h>

namespace nds
{
namespace routing
{
namespace route
{

class RouteSegmentDetails
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_delay = 0,
        CHOICE_pollution = 1,
        CHOICE_tollCost = 2,
        CHOICE_trafficEnforcementCameraType = 3,
        CHOICE_trafficEnforcementZoneType = 4,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::routing::route::DelayInformation::ZserioPackingContext& getDelay()
        {
            return m_delay_;
        }

        ::nds::routing::types::Pollution::ZserioPackingContext& getPollution()
        {
            return m_pollution_;
        }

        ::nds::core::types::TollCost::ZserioPackingContext& getTollCost()
        {
            return m_tollCost_;
        }

        ::zserio::DeltaContext& getTrafficEnforcementCameraType()
        {
            return m_trafficEnforcementCameraType_;
        }

        ::zserio::DeltaContext& getTrafficEnforcementZoneType()
        {
            return m_trafficEnforcementZoneType_;
        }

    private:
        ::nds::routing::route::DelayInformation::ZserioPackingContext m_delay_;
        ::nds::routing::types::Pollution::ZserioPackingContext m_pollution_;
        ::nds::core::types::TollCost::ZserioPackingContext m_tollCost_;
        ::zserio::DeltaContext m_trafficEnforcementCameraType_;
        ::zserio::DeltaContext m_trafficEnforcementZoneType_;
    };

    RouteSegmentDetails() noexcept :
            RouteSegmentDetails(allocator_type())
    {}

    explicit RouteSegmentDetails(const allocator_type& allocator) noexcept;

    explicit RouteSegmentDetails(::zserio::BitStreamReader& in,
            ::nds::routing::types::RouteSegmentType type_, const allocator_type& allocator = allocator_type());
    explicit RouteSegmentDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::routing::types::RouteSegmentType type_, const allocator_type& allocator = allocator_type());

    ~RouteSegmentDetails() = default;

    RouteSegmentDetails(const RouteSegmentDetails& other);
    RouteSegmentDetails& operator=(const RouteSegmentDetails& other);

    RouteSegmentDetails(RouteSegmentDetails&& other);
    RouteSegmentDetails& operator=(RouteSegmentDetails&& other);

    RouteSegmentDetails(::zserio::PropagateAllocatorT,
            const RouteSegmentDetails& other, const allocator_type& allocator);

    void initialize(
            ::nds::routing::types::RouteSegmentType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::routing::types::RouteSegmentType getType() const;

    const ::nds::routing::route::DelayInformation& getDelay() const;
    ::nds::routing::route::DelayInformation& getDelay();
    void setDelay(const ::nds::routing::route::DelayInformation& delay_);
    void setDelay(::nds::routing::route::DelayInformation&& delay_);

    const ::nds::routing::types::Pollution& getPollution() const;
    ::nds::routing::types::Pollution& getPollution();
    void setPollution(const ::nds::routing::types::Pollution& pollution_);
    void setPollution(::nds::routing::types::Pollution&& pollution_);

    const ::nds::core::types::TollCost& getTollCost() const;
    ::nds::core::types::TollCost& getTollCost();
    void setTollCost(const ::nds::core::types::TollCost& tollCost_);
    void setTollCost(::nds::core::types::TollCost&& tollCost_);

    ::nds::core::types::TrafficEnforcementCameraType getTrafficEnforcementCameraType() const;
    void setTrafficEnforcementCameraType(::nds::core::types::TrafficEnforcementCameraType trafficEnforcementCameraType_);

    ::nds::core::types::TrafficEnforcementZoneType getTrafficEnforcementZoneType() const;
    void setTrafficEnforcementZoneType(::nds::core::types::TrafficEnforcementZoneType trafficEnforcementZoneType_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RouteSegmentDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::routing::types::RouteSegmentType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace route
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_ROUTE_ROUTE_SEGMENT_DETAILS_H
