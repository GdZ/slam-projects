/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_ROUTE_ROUTE_POINT_H
#define NDS_ROUTING_ROUTE_ROUTE_POINT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/TimeWithZone.h>
#include <nds/routing/types/RoutePointType.h>
#include <nds/routing/types/WaypointType.h>

namespace nds
{
namespace routing
{
namespace route
{

class RoutePoint
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getWaypointType()
        {
            return m_waypointType_;
        }

        ::nds::core::types::TimeWithZone::ZserioPackingContext& getDepartureTime()
        {
            return m_departureTime_;
        }

        ::nds::core::types::TimeWithZone::ZserioPackingContext& getArrivalTime()
        {
            return m_arrivalTime_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_waypointType_;
        ::nds::core::types::TimeWithZone::ZserioPackingContext m_departureTime_;
        ::nds::core::types::TimeWithZone::ZserioPackingContext m_arrivalTime_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoutePoint() noexcept :
            RoutePoint(allocator_type())
    {}

    explicit RoutePoint(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_waypointType = ::nds::routing::types::WaypointType,
            typename ZSERIO_T_departureTime = ::nds::core::types::TimeWithZone,
            typename ZSERIO_T_arrivalTime = ::nds::core::types::TimeWithZone>
    RoutePoint(
            ::nds::routing::types::RoutePointType type_,
            ZSERIO_T_waypointType&& waypointType_,
            ZSERIO_T_departureTime&& departureTime_,
            ZSERIO_T_arrivalTime&& arrivalTime_,
            const allocator_type& allocator = allocator_type()) :
            RoutePoint(allocator)
    {
        m_type_ = type_;
        m_waypointType_ = ::std::forward<ZSERIO_T_waypointType>(waypointType_);
        m_departureTime_ = ::std::forward<ZSERIO_T_departureTime>(departureTime_);
        m_arrivalTime_ = ::std::forward<ZSERIO_T_arrivalTime>(arrivalTime_);
    }

    explicit RoutePoint(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoutePoint(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoutePoint() = default;

    RoutePoint(const RoutePoint&) = default;
    RoutePoint& operator=(const RoutePoint&) = default;

    RoutePoint(RoutePoint&&) = default;
    RoutePoint& operator=(RoutePoint&&) = default;

    RoutePoint(::zserio::PropagateAllocatorT,
            const RoutePoint& other, const allocator_type& allocator);

    ::nds::routing::types::RoutePointType getType() const;
    void setType(::nds::routing::types::RoutePointType type_);

    ::nds::routing::types::WaypointType getWaypointType() const;
    void setWaypointType(::nds::routing::types::WaypointType waypointType_);
    bool isWaypointTypeUsed() const;
    bool isWaypointTypeSet() const;
    void resetWaypointType();

    const ::nds::core::types::TimeWithZone& getDepartureTime() const;
    ::nds::core::types::TimeWithZone& getDepartureTime();
    void setDepartureTime(const ::nds::core::types::TimeWithZone& departureTime_);
    void setDepartureTime(::nds::core::types::TimeWithZone&& departureTime_);
    bool isDepartureTimeUsed() const;
    bool isDepartureTimeSet() const;
    void resetDepartureTime();

    const ::nds::core::types::TimeWithZone& getArrivalTime() const;
    ::nds::core::types::TimeWithZone& getArrivalTime();
    void setArrivalTime(const ::nds::core::types::TimeWithZone& arrivalTime_);
    void setArrivalTime(::nds::core::types::TimeWithZone&& arrivalTime_);
    bool isArrivalTimeUsed() const;
    bool isArrivalTimeSet() const;
    void resetArrivalTime();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoutePoint& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::routing::types::RoutePointType readType(::zserio::BitStreamReader& in);
    ::nds::routing::types::RoutePointType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routing::types::WaypointType> readWaypointType(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::routing::types::WaypointType> readWaypointType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::TimeWithZone> readDepartureTime(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::TimeWithZone> readDepartureTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::TimeWithZone> readArrivalTime(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::TimeWithZone> readArrivalTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::routing::types::RoutePointType m_type_;
    ::zserio::InplaceOptionalHolder<::nds::routing::types::WaypointType> m_waypointType_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::TimeWithZone> m_departureTime_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::TimeWithZone> m_arrivalTime_;
};

} // namespace route
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_ROUTE_ROUTE_POINT_H
