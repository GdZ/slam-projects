/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_ROUTE_ROUTE_H
#define NDS_ROUTING_ROUTE_ROUTE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/location/RoadLocationPath.h>
#include <nds/core/types/LengthCentimeters.h>
#include <nds/core/types/Seconds.h>
#include <nds/routing/guidance/GuidanceInstructions.h>
#include <nds/routing/route/RouteGeometry.h>
#include <nds/routing/route/RoutePoint.h>
#include <nds/routing/route/RouteSegment.h>
#include <nds/routing/types/RouteSegmentConsumption.h>

namespace nds
{
namespace routing
{
namespace route
{

class Route
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLength()
        {
            return m_length_;
        }

        ::zserio::DeltaContext& getTravelTime()
        {
            return m_travelTime_;
        }

        ::nds::core::location::RoadLocationPath::ZserioPackingContext& getRoutePath()
        {
            return m_routePath_;
        }

        ::zserio::DeltaContext& getNumRouteSegments()
        {
            return m_numRouteSegments_;
        }

        ::nds::routing::guidance::GuidanceInstructions::ZserioPackingContext& getGuidance()
        {
            return m_guidance_;
        }

    private:
        ::zserio::DeltaContext m_length_;
        ::zserio::DeltaContext m_travelTime_;
        ::nds::core::location::RoadLocationPath::ZserioPackingContext m_routePath_;
        ::zserio::DeltaContext m_numRouteSegments_;
        ::nds::routing::guidance::GuidanceInstructions::ZserioPackingContext m_guidance_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Route() noexcept :
            Route(allocator_type())
    {}

    explicit Route(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_routePath = ::nds::core::location::RoadLocationPath,
            typename ZSERIO_T_routePointTypes = ::zserio::vector<::nds::routing::route::RoutePoint>,
            typename ZSERIO_T_segments = ::zserio::vector<::nds::routing::route::RouteSegment>,
            typename ZSERIO_T_vehicleConsumption = ::zserio::vector<::nds::routing::types::RouteSegmentConsumption>,
            typename ZSERIO_T_guidance = ::nds::routing::guidance::GuidanceInstructions,
            typename ZSERIO_T_geometries = ::zserio::vector<::nds::routing::route::RouteGeometry>>
    Route(
            ::nds::core::types::LengthCentimeters length_,
            ::nds::core::types::Seconds travelTime_,
            ZSERIO_T_routePath&& routePath_,
            ZSERIO_T_routePointTypes&& routePointTypes_,
            uint32_t numRouteSegments_,
            ZSERIO_T_segments&& segments_,
            ZSERIO_T_vehicleConsumption&& vehicleConsumption_,
            ZSERIO_T_guidance&& guidance_,
            ZSERIO_T_geometries&& geometries_,
            const allocator_type& allocator = allocator_type()) :
            Route(allocator)
    {
        m_length_ = length_;
        m_travelTime_ = travelTime_;
        m_routePath_ = ::std::forward<ZSERIO_T_routePath>(routePath_);
        m_routePointTypes_ = ZserioArrayType_routePointTypes(::std::forward<ZSERIO_T_routePointTypes>(routePointTypes_));
        m_numRouteSegments_ = numRouteSegments_;
        m_segments_ = ZserioArrayType_segments(::std::forward<ZSERIO_T_segments>(segments_));
        m_vehicleConsumption_ = ::zserio::createOptionalArray<ZserioArrayType_vehicleConsumption>(::std::forward<ZSERIO_T_vehicleConsumption>(vehicleConsumption_));
        m_guidance_ = ::std::forward<ZSERIO_T_guidance>(guidance_);
        m_geometries_ = ::zserio::createOptionalArray<ZserioArrayType_geometries>(::std::forward<ZSERIO_T_geometries>(geometries_));
    }

    explicit Route(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Route(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Route() = default;

    Route(const Route&) = default;
    Route& operator=(const Route&) = default;

    Route(Route&&) = default;
    Route& operator=(Route&&) = default;

    Route(::zserio::PropagateAllocatorT,
            const Route& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::core::types::LengthCentimeters getLength() const;
    void setLength(::nds::core::types::LengthCentimeters length_);

    ::nds::core::types::Seconds getTravelTime() const;
    void setTravelTime(::nds::core::types::Seconds travelTime_);

    const ::nds::core::location::RoadLocationPath& getRoutePath() const;
    ::nds::core::location::RoadLocationPath& getRoutePath();
    void setRoutePath(const ::nds::core::location::RoadLocationPath& routePath_);
    void setRoutePath(::nds::core::location::RoadLocationPath&& routePath_);

    const ::zserio::vector<::nds::routing::route::RoutePoint>& getRoutePointTypes() const;
    ::zserio::vector<::nds::routing::route::RoutePoint>& getRoutePointTypes();
    void setRoutePointTypes(const ::zserio::vector<::nds::routing::route::RoutePoint>& routePointTypes_);
    void setRoutePointTypes(::zserio::vector<::nds::routing::route::RoutePoint>&& routePointTypes_);

    uint32_t getNumRouteSegments() const;
    void setNumRouteSegments(uint32_t numRouteSegments_);

    const ::zserio::vector<::nds::routing::route::RouteSegment>& getSegments() const;
    ::zserio::vector<::nds::routing::route::RouteSegment>& getSegments();
    void setSegments(const ::zserio::vector<::nds::routing::route::RouteSegment>& segments_);
    void setSegments(::zserio::vector<::nds::routing::route::RouteSegment>&& segments_);

    const ::zserio::vector<::nds::routing::types::RouteSegmentConsumption>& getVehicleConsumption() const;
    ::zserio::vector<::nds::routing::types::RouteSegmentConsumption>& getVehicleConsumption();
    void setVehicleConsumption(const ::zserio::vector<::nds::routing::types::RouteSegmentConsumption>& vehicleConsumption_);
    void setVehicleConsumption(::zserio::vector<::nds::routing::types::RouteSegmentConsumption>&& vehicleConsumption_);
    bool isVehicleConsumptionUsed() const;
    bool isVehicleConsumptionSet() const;
    void resetVehicleConsumption();

    const ::nds::routing::guidance::GuidanceInstructions& getGuidance() const;
    ::nds::routing::guidance::GuidanceInstructions& getGuidance();
    void setGuidance(const ::nds::routing::guidance::GuidanceInstructions& guidance_);
    void setGuidance(::nds::routing::guidance::GuidanceInstructions&& guidance_);
    bool isGuidanceUsed() const;
    bool isGuidanceSet() const;
    void resetGuidance();

    const ::zserio::vector<::nds::routing::route::RouteGeometry>& getGeometries() const;
    ::zserio::vector<::nds::routing::route::RouteGeometry>& getGeometries();
    void setGeometries(const ::zserio::vector<::nds::routing::route::RouteGeometry>& geometries_);
    void setGeometries(::zserio::vector<::nds::routing::route::RouteGeometry>&& geometries_);
    bool isGeometriesUsed() const;
    bool isGeometriesSet() const;
    void resetGeometries();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Route& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_routePointTypes
    {
    public:
        using OwnerType = Route;

        static void create(Route& owner,
                ::zserio::vector<::nds::routing::route::RoutePoint>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Route& owner,
                ::zserio::vector<::nds::routing::route::RoutePoint>& array,
                ::nds::routing::route::RoutePoint::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_segments
    {
    public:
        using OwnerType = Route;

        static void initializeElement(Route& owner,
                ::nds::routing::route::RouteSegment& element, size_t index);
    };

    class ZserioElementFactory_segments
    {
    public:
        using OwnerType = Route;

        static void create(Route& owner,
                ::zserio::vector<::nds::routing::route::RouteSegment>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Route& owner,
                ::zserio::vector<::nds::routing::route::RouteSegment>& array,
                ::nds::routing::route::RouteSegment::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_vehicleConsumption
    {
    public:
        using OwnerType = Route;

        static void create(Route& owner,
                ::zserio::vector<::nds::routing::types::RouteSegmentConsumption>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Route& owner,
                ::zserio::vector<::nds::routing::types::RouteSegmentConsumption>& array,
                ::nds::routing::types::RouteSegmentConsumption::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_geometries
    {
    public:
        using OwnerType = Route;

        static void initializeElement(Route& owner,
                ::nds::routing::route::RouteGeometry& element, size_t index);
    };

    class ZserioElementFactory_geometries
    {
    public:
        using OwnerType = Route;

        static void create(Route& owner,
                ::zserio::vector<::nds::routing::route::RouteGeometry>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Route& owner,
                ::zserio::vector<::nds::routing::route::RouteGeometry>& array,
                ::nds::routing::route::RouteGeometry::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_routePointTypes = ::zserio::Array<::zserio::vector<::nds::routing::route::RoutePoint>, ::zserio::ObjectArrayTraits<::nds::routing::route::RoutePoint, ZserioElementFactory_routePointTypes>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_segments = ::zserio::Array<::zserio::vector<::nds::routing::route::RouteSegment>, ::zserio::ObjectArrayTraits<::nds::routing::route::RouteSegment, ZserioElementFactory_segments>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_segments>;
    using ZserioArrayType_vehicleConsumption = ::zserio::Array<::zserio::vector<::nds::routing::types::RouteSegmentConsumption>, ::zserio::ObjectArrayTraits<::nds::routing::types::RouteSegmentConsumption, ZserioElementFactory_vehicleConsumption>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_geometries = ::zserio::Array<::zserio::vector<::nds::routing::route::RouteGeometry>, ::zserio::ObjectArrayTraits<::nds::routing::route::RouteGeometry, ZserioElementFactory_geometries>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_geometries>;

    ::nds::core::types::LengthCentimeters readLength(::zserio::BitStreamReader& in);
    ::nds::core::types::LengthCentimeters readLength(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::Seconds readTravelTime(::zserio::BitStreamReader& in);
    ::nds::core::types::Seconds readTravelTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::location::RoadLocationPath readRoutePath(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::location::RoadLocationPath readRoutePath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_routePointTypes readRoutePointTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_routePointTypes readRoutePointTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    uint32_t readNumRouteSegments(::zserio::BitStreamReader& in);
    uint32_t readNumRouteSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_segments readSegments(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_segments readSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_vehicleConsumption> readVehicleConsumption(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_vehicleConsumption> readVehicleConsumption(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routing::guidance::GuidanceInstructions> readGuidance(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routing::guidance::GuidanceInstructions> readGuidance(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_geometries> readGeometries(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_geometries> readGeometries(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::types::LengthCentimeters m_length_;
    ::nds::core::types::Seconds m_travelTime_;
    ::nds::core::location::RoadLocationPath m_routePath_;
    ZserioArrayType_routePointTypes m_routePointTypes_;
    uint32_t m_numRouteSegments_;
    ZserioArrayType_segments m_segments_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_vehicleConsumption> m_vehicleConsumption_;
    ::zserio::InplaceOptionalHolder<::nds::routing::guidance::GuidanceInstructions> m_guidance_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_geometries> m_geometries_;
};

} // namespace route
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_ROUTE_ROUTE_H
