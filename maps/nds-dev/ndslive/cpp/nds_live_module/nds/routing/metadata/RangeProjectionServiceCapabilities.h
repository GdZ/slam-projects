/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_METADATA_RANGE_PROJECTION_SERVICE_CAPABILITIES_H
#define NDS_ROUTING_METADATA_RANGE_PROJECTION_SERVICE_CAPABILITIES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/routing/metadata/RangeProjectionServiceMethods.h>
#include <nds/routing/types/RangeProjectionType.h>

namespace nds
{
namespace routing
{
namespace metadata
{

class RangeProjectionServiceCapabilities
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getImplementedMethods()
        {
            return m_implementedMethods_;
        }

    private:
        ::zserio::DeltaContext m_implementedMethods_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RangeProjectionServiceCapabilities() noexcept :
            RangeProjectionServiceCapabilities(allocator_type())
    {}

    explicit RangeProjectionServiceCapabilities(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_supportedRangeProjectionTypes = ::zserio::vector<::nds::routing::types::RangeProjectionType>>
    RangeProjectionServiceCapabilities(
            ::nds::routing::metadata::RangeProjectionServiceMethods implementedMethods_,
            ZSERIO_T_supportedRangeProjectionTypes&& supportedRangeProjectionTypes_,
            const allocator_type& allocator = allocator_type()) :
            RangeProjectionServiceCapabilities(allocator)
    {
        m_implementedMethods_ = implementedMethods_;
        m_supportedRangeProjectionTypes_ = ZserioArrayType_supportedRangeProjectionTypes(::std::forward<ZSERIO_T_supportedRangeProjectionTypes>(supportedRangeProjectionTypes_));
    }

    explicit RangeProjectionServiceCapabilities(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RangeProjectionServiceCapabilities(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RangeProjectionServiceCapabilities() = default;

    RangeProjectionServiceCapabilities(const RangeProjectionServiceCapabilities&) = default;
    RangeProjectionServiceCapabilities& operator=(const RangeProjectionServiceCapabilities&) = default;

    RangeProjectionServiceCapabilities(RangeProjectionServiceCapabilities&&) = default;
    RangeProjectionServiceCapabilities& operator=(RangeProjectionServiceCapabilities&&) = default;

    RangeProjectionServiceCapabilities(::zserio::PropagateAllocatorT,
            const RangeProjectionServiceCapabilities& other, const allocator_type& allocator);

    ::nds::routing::metadata::RangeProjectionServiceMethods getImplementedMethods() const;
    void setImplementedMethods(::nds::routing::metadata::RangeProjectionServiceMethods implementedMethods_);

    const ::zserio::vector<::nds::routing::types::RangeProjectionType>& getSupportedRangeProjectionTypes() const;
    ::zserio::vector<::nds::routing::types::RangeProjectionType>& getSupportedRangeProjectionTypes();
    void setSupportedRangeProjectionTypes(const ::zserio::vector<::nds::routing::types::RangeProjectionType>& supportedRangeProjectionTypes_);
    void setSupportedRangeProjectionTypes(::zserio::vector<::nds::routing::types::RangeProjectionType>&& supportedRangeProjectionTypes_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RangeProjectionServiceCapabilities& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_supportedRangeProjectionTypes = ::zserio::Array<::zserio::vector<::nds::routing::types::RangeProjectionType>, ::zserio::BitmaskArrayTraits<::nds::routing::types::RangeProjectionType>, ::zserio::ArrayType::AUTO>;

    ::nds::routing::metadata::RangeProjectionServiceMethods readImplementedMethods(::zserio::BitStreamReader& in);
    ::nds::routing::metadata::RangeProjectionServiceMethods readImplementedMethods(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_supportedRangeProjectionTypes readSupportedRangeProjectionTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_supportedRangeProjectionTypes readSupportedRangeProjectionTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::routing::metadata::RangeProjectionServiceMethods m_implementedMethods_;
    ZserioArrayType_supportedRangeProjectionTypes m_supportedRangeProjectionTypes_;
};

} // namespace metadata
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_METADATA_RANGE_PROJECTION_SERVICE_CAPABILITIES_H
