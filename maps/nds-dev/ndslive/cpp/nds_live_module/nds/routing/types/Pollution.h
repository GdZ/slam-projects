/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_TYPES_POLLUTION_H
#define NDS_ROUTING_TYPES_POLLUTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace routing
{
namespace types
{

class Pollution
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getCarbonDioxide()
        {
            return m_carbonDioxide_;
        }

    private:
        ::zserio::DeltaContext m_carbonDioxide_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Pollution() noexcept :
            Pollution(allocator_type())
    {}

    explicit Pollution(const allocator_type& allocator) noexcept;

    explicit Pollution(
            uint64_t carbonDioxide_,
            const allocator_type& allocator = allocator_type()) :
            Pollution(allocator)
    {
        m_carbonDioxide_ = carbonDioxide_;
    }

    explicit Pollution(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Pollution(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Pollution() = default;

    Pollution(const Pollution&) = default;
    Pollution& operator=(const Pollution&) = default;

    Pollution(Pollution&&) = default;
    Pollution& operator=(Pollution&&) = default;

    Pollution(::zserio::PropagateAllocatorT,
            const Pollution& other, const allocator_type& allocator);

    uint64_t getCarbonDioxide() const;
    void setCarbonDioxide(uint64_t carbonDioxide_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Pollution& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    uint64_t readCarbonDioxide(::zserio::BitStreamReader& in);
    uint64_t readCarbonDioxide(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    uint64_t m_carbonDioxide_;
};

} // namespace types
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_TYPES_POLLUTION_H
