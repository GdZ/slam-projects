/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_TYPES_ROUTE_SEGMENT_TYPE_H
#define NDS_ROUTING_TYPES_ROUTE_SEGMENT_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace routing
{
namespace types
{

enum class RouteSegmentType : uint8_t
{
    DELAY = UINT8_C(0),
    POLLUTION = UINT8_C(1),
    TUNNEL = UINT8_C(2),
    BRIDGE = UINT8_C(3),
    FERRY = UINT8_C(4),
    CAR_TRAIN = UINT8_C(5),
    PUBLIC_TRANSPORT = UINT8_C(6),
    MOTORWAY = UINT8_C(7),
    UNPAVED = UINT8_C(8),
    AUTOMATED_DRIVING_L3 = UINT8_C(9),
    AUTOMATED_DRIVING_L4 = UINT8_C(10),
    AUTOMATED_DRIVING_L5 = UINT8_C(11),
    LIMITED_MOBILE_DATA_COVERAGE = UINT8_C(12),
    TRAFFIC_ENFORCEMENT_CAMERA = UINT8_C(13),
    TRAFFIC_ENFORCEMENT_ZONE = UINT8_C(14),
    TOLL = UINT8_C(15),
    VIGNETTE = UINT8_C(16),
    PEDESTRIAN = UINT8_C(17),
    BIKE = UINT8_C(18),
    SCOOTER = UINT8_C(19),
    ENVIRONMENT_ZONE = UINT8_C(20),
    USER_RESTRICTED_ACCESS = UINT8_C(21),
    PHYSICAL_RESTRICTED_ACCESS = UINT8_C(22),
    LEGAL_RESTRICTED_ACCESS = UINT8_C(23)
};

} // namespace types
} // namespace routing
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for RouteSegmentType enumeration.
template <>
struct EnumTraits<::nds::routing::types::RouteSegmentType>
{
    static constexpr ::std::array<const char*, 24> names =
    {{
        "DELAY",
        "POLLUTION",
        "TUNNEL",
        "BRIDGE",
        "FERRY",
        "CAR_TRAIN",
        "PUBLIC_TRANSPORT",
        "MOTORWAY",
        "UNPAVED",
        "AUTOMATED_DRIVING_L3",
        "AUTOMATED_DRIVING_L4",
        "AUTOMATED_DRIVING_L5",
        "LIMITED_MOBILE_DATA_COVERAGE",
        "TRAFFIC_ENFORCEMENT_CAMERA",
        "TRAFFIC_ENFORCEMENT_ZONE",
        "TOLL",
        "VIGNETTE",
        "PEDESTRIAN",
        "BIKE",
        "SCOOTER",
        "ENVIRONMENT_ZONE",
        "USER_RESTRICTED_ACCESS",
        "PHYSICAL_RESTRICTED_ACCESS",
        "LEGAL_RESTRICTED_ACCESS"
    }};

    static constexpr ::std::array<::nds::routing::types::RouteSegmentType, 24> values =
    {{
        ::nds::routing::types::RouteSegmentType::DELAY,
        ::nds::routing::types::RouteSegmentType::POLLUTION,
        ::nds::routing::types::RouteSegmentType::TUNNEL,
        ::nds::routing::types::RouteSegmentType::BRIDGE,
        ::nds::routing::types::RouteSegmentType::FERRY,
        ::nds::routing::types::RouteSegmentType::CAR_TRAIN,
        ::nds::routing::types::RouteSegmentType::PUBLIC_TRANSPORT,
        ::nds::routing::types::RouteSegmentType::MOTORWAY,
        ::nds::routing::types::RouteSegmentType::UNPAVED,
        ::nds::routing::types::RouteSegmentType::AUTOMATED_DRIVING_L3,
        ::nds::routing::types::RouteSegmentType::AUTOMATED_DRIVING_L4,
        ::nds::routing::types::RouteSegmentType::AUTOMATED_DRIVING_L5,
        ::nds::routing::types::RouteSegmentType::LIMITED_MOBILE_DATA_COVERAGE,
        ::nds::routing::types::RouteSegmentType::TRAFFIC_ENFORCEMENT_CAMERA,
        ::nds::routing::types::RouteSegmentType::TRAFFIC_ENFORCEMENT_ZONE,
        ::nds::routing::types::RouteSegmentType::TOLL,
        ::nds::routing::types::RouteSegmentType::VIGNETTE,
        ::nds::routing::types::RouteSegmentType::PEDESTRIAN,
        ::nds::routing::types::RouteSegmentType::BIKE,
        ::nds::routing::types::RouteSegmentType::SCOOTER,
        ::nds::routing::types::RouteSegmentType::ENVIRONMENT_ZONE,
        ::nds::routing::types::RouteSegmentType::USER_RESTRICTED_ACCESS,
        ::nds::routing::types::RouteSegmentType::PHYSICAL_RESTRICTED_ACCESS,
        ::nds::routing::types::RouteSegmentType::LEGAL_RESTRICTED_ACCESS
    }};

    static constexpr const char* enumName = "RouteSegmentType";
};

template <>
size_t enumToOrdinal<::nds::routing::types::RouteSegmentType>(::nds::routing::types::RouteSegmentType value);

template <>
::nds::routing::types::RouteSegmentType valueToEnum<::nds::routing::types::RouteSegmentType>(
        typename ::std::underlying_type<::nds::routing::types::RouteSegmentType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::routing::types::RouteSegmentType>(::nds::routing::types::RouteSegmentType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::routing::types::RouteSegmentType>(::zserio::DeltaContext& context, ::nds::routing::types::RouteSegmentType value);

template <>
size_t bitSizeOf<::nds::routing::types::RouteSegmentType>(::nds::routing::types::RouteSegmentType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::routing::types::RouteSegmentType>(::zserio::DeltaContext& context, ::nds::routing::types::RouteSegmentType value);

template <>
size_t initializeOffsets<::nds::routing::types::RouteSegmentType>(size_t bitPosition, ::nds::routing::types::RouteSegmentType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::routing::types::RouteSegmentType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::routing::types::RouteSegmentType value);

template <>
::nds::routing::types::RouteSegmentType read<::nds::routing::types::RouteSegmentType>(::zserio::BitStreamReader& in);

template <>
::nds::routing::types::RouteSegmentType read<::nds::routing::types::RouteSegmentType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::routing::types::RouteSegmentType>(::zserio::BitStreamWriter& out, ::nds::routing::types::RouteSegmentType value);

template <>
void write<::zserio::DeltaContext, ::nds::routing::types::RouteSegmentType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::routing::types::RouteSegmentType value);

} // namespace zserio

#endif // NDS_ROUTING_TYPES_ROUTE_SEGMENT_TYPE_H
