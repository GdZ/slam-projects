/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_SERVICES_RANGE_PROJECTION_REQUEST_H
#define NDS_ROUTING_SERVICES_RANGE_PROJECTION_REQUEST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/types/DistanceMeters.h>
#include <nds/core/types/Seconds.h>
#include <nds/core/vehicle/VehicleDetails.h>
#include <nds/core/vehicle/VehiclePose.h>
#include <nds/routing/route/Waypoint.h>
#include <nds/routing/types/DriverProfile.h>
#include <nds/routing/types/RangeProjectionType.h>

namespace nds
{
namespace routing
{
namespace services
{

class RangeProjectionRequest
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::nds::routing::route::Waypoint::ZserioPackingContext& getOrigin()
        {
            return m_origin_;
        }

        ::zserio::DeltaContext& getTimeBudget()
        {
            return m_timeBudget_;
        }

        ::zserio::DeltaContext& getDistanceMeters()
        {
            return m_distanceMeters_;
        }

        ::nds::core::vehicle::VehicleDetails::ZserioPackingContext& getVehicleDetails()
        {
            return m_vehicleDetails_;
        }

        ::nds::core::vehicle::VehiclePose::ZserioPackingContext& getVehiclePose()
        {
            return m_vehiclePose_;
        }

        ::nds::routing::types::DriverProfile::ZserioPackingContext& getDriverProfile()
        {
            return m_driverProfile_;
        }

        ::zserio::DeltaContext& getMaxPolyCount()
        {
            return m_maxPolyCount_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::nds::routing::route::Waypoint::ZserioPackingContext m_origin_;
        ::zserio::DeltaContext m_timeBudget_;
        ::zserio::DeltaContext m_distanceMeters_;
        ::nds::core::vehicle::VehicleDetails::ZserioPackingContext m_vehicleDetails_;
        ::nds::core::vehicle::VehiclePose::ZserioPackingContext m_vehiclePose_;
        ::nds::routing::types::DriverProfile::ZserioPackingContext m_driverProfile_;
        ::zserio::DeltaContext m_maxPolyCount_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RangeProjectionRequest() noexcept :
            RangeProjectionRequest(allocator_type())
    {}

    explicit RangeProjectionRequest(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_origin = ::nds::routing::route::Waypoint,
            typename ZSERIO_T_timeBudget = ::nds::core::types::Seconds,
            typename ZSERIO_T_distanceMeters = ::nds::core::types::DistanceMeters,
            typename ZSERIO_T_vehicleDetails = ::nds::core::vehicle::VehicleDetails,
            typename ZSERIO_T_vehiclePose = ::nds::core::vehicle::VehiclePose,
            typename ZSERIO_T_driverProfile = ::nds::routing::types::DriverProfile,
            typename ZSERIO_T_maxPolyCount = uint32_t>
    RangeProjectionRequest(
            ::nds::routing::types::RangeProjectionType type_,
            ZSERIO_T_origin&& origin_,
            ZSERIO_T_timeBudget&& timeBudget_,
            ZSERIO_T_distanceMeters&& distanceMeters_,
            ZSERIO_T_vehicleDetails&& vehicleDetails_,
            ZSERIO_T_vehiclePose&& vehiclePose_,
            ZSERIO_T_driverProfile&& driverProfile_,
            ZSERIO_T_maxPolyCount&& maxPolyCount_,
            const allocator_type& allocator = allocator_type()) :
            RangeProjectionRequest(allocator)
    {
        m_type_ = type_;
        m_origin_ = ::std::forward<ZSERIO_T_origin>(origin_);
        m_timeBudget_ = ::std::forward<ZSERIO_T_timeBudget>(timeBudget_);
        m_distanceMeters_ = ::std::forward<ZSERIO_T_distanceMeters>(distanceMeters_);
        m_vehicleDetails_ = ::std::forward<ZSERIO_T_vehicleDetails>(vehicleDetails_);
        m_vehiclePose_ = ::std::forward<ZSERIO_T_vehiclePose>(vehiclePose_);
        m_driverProfile_ = ::std::forward<ZSERIO_T_driverProfile>(driverProfile_);
        m_maxPolyCount_ = ::std::forward<ZSERIO_T_maxPolyCount>(maxPolyCount_);
    }

    explicit RangeProjectionRequest(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RangeProjectionRequest(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RangeProjectionRequest() = default;

    RangeProjectionRequest(const RangeProjectionRequest&) = default;
    RangeProjectionRequest& operator=(const RangeProjectionRequest&) = default;

    RangeProjectionRequest(RangeProjectionRequest&&) = default;
    RangeProjectionRequest& operator=(RangeProjectionRequest&&) = default;

    RangeProjectionRequest(::zserio::PropagateAllocatorT,
            const RangeProjectionRequest& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::routing::types::RangeProjectionType getType() const;
    void setType(::nds::routing::types::RangeProjectionType type_);

    const ::nds::routing::route::Waypoint& getOrigin() const;
    ::nds::routing::route::Waypoint& getOrigin();
    void setOrigin(const ::nds::routing::route::Waypoint& origin_);
    void setOrigin(::nds::routing::route::Waypoint&& origin_);

    ::nds::core::types::Seconds getTimeBudget() const;
    void setTimeBudget(::nds::core::types::Seconds timeBudget_);
    bool isTimeBudgetUsed() const;
    bool isTimeBudgetSet() const;
    void resetTimeBudget();

    ::nds::core::types::DistanceMeters getDistanceMeters() const;
    void setDistanceMeters(::nds::core::types::DistanceMeters distanceMeters_);
    bool isDistanceMetersUsed() const;
    bool isDistanceMetersSet() const;
    void resetDistanceMeters();

    const ::nds::core::vehicle::VehicleDetails& getVehicleDetails() const;
    ::nds::core::vehicle::VehicleDetails& getVehicleDetails();
    void setVehicleDetails(const ::nds::core::vehicle::VehicleDetails& vehicleDetails_);
    void setVehicleDetails(::nds::core::vehicle::VehicleDetails&& vehicleDetails_);

    const ::nds::core::vehicle::VehiclePose& getVehiclePose() const;
    ::nds::core::vehicle::VehiclePose& getVehiclePose();
    void setVehiclePose(const ::nds::core::vehicle::VehiclePose& vehiclePose_);
    void setVehiclePose(::nds::core::vehicle::VehiclePose&& vehiclePose_);
    bool isVehiclePoseUsed() const;
    bool isVehiclePoseSet() const;
    void resetVehiclePose();

    const ::nds::routing::types::DriverProfile& getDriverProfile() const;
    ::nds::routing::types::DriverProfile& getDriverProfile();
    void setDriverProfile(const ::nds::routing::types::DriverProfile& driverProfile_);
    void setDriverProfile(::nds::routing::types::DriverProfile&& driverProfile_);
    bool isDriverProfileUsed() const;
    bool isDriverProfileSet() const;
    void resetDriverProfile();

    uint32_t getMaxPolyCount() const;
    void setMaxPolyCount(uint32_t maxPolyCount_);
    bool isMaxPolyCountUsed() const;
    bool isMaxPolyCountSet() const;
    void resetMaxPolyCount();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RangeProjectionRequest& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::routing::types::RangeProjectionType readType(::zserio::BitStreamReader& in);
    ::nds::routing::types::RangeProjectionType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::routing::route::Waypoint readOrigin(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::routing::route::Waypoint readOrigin(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::Seconds> readTimeBudget(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::Seconds> readTimeBudget(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> readDistanceMeters(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> readDistanceMeters(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::VehicleDetails readVehicleDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::VehicleDetails readVehicleDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::VehiclePose> readVehiclePose(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::VehiclePose> readVehiclePose(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routing::types::DriverProfile> readDriverProfile(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::routing::types::DriverProfile> readDriverProfile(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<uint32_t> readMaxPolyCount(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readMaxPolyCount(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::routing::types::RangeProjectionType m_type_;
    ::nds::routing::route::Waypoint m_origin_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::Seconds> m_timeBudget_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::DistanceMeters> m_distanceMeters_;
    ::nds::core::vehicle::VehicleDetails m_vehicleDetails_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::VehiclePose> m_vehiclePose_;
    ::zserio::InplaceOptionalHolder<::nds::routing::types::DriverProfile> m_driverProfile_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_maxPolyCount_;
};

} // namespace services
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_SERVICES_RANGE_PROJECTION_REQUEST_H
