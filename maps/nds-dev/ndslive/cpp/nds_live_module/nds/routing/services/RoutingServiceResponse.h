/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROUTING_SERVICES_ROUTING_SERVICE_RESPONSE_H
#define NDS_ROUTING_SERVICES_ROUTING_SERVICE_RESPONSE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>
#include <zserio/Vector.h>

#include <nds/core/types/VersionId.h>
#include <nds/routing/route/Route.h>
#include <nds/system/types/NdsSystemToken.h>

namespace nds
{
namespace routing
{
namespace services
{

class RoutingServiceResponse
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::routing::route::Route::ZserioPackingContext& getRoute()
        {
            return m_route_;
        }

        ::nds::system::types::NdsSystemToken::ZserioPackingContext& getMapId()
        {
            return m_mapId_;
        }

        ::zserio::DeltaContext& getVersionId()
        {
            return m_versionId_;
        }

    private:
        ::nds::routing::route::Route::ZserioPackingContext m_route_;
        ::nds::system::types::NdsSystemToken::ZserioPackingContext m_mapId_;
        ::zserio::DeltaContext m_versionId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoutingServiceResponse() noexcept :
            RoutingServiceResponse(allocator_type())
    {}

    explicit RoutingServiceResponse(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_route = ::nds::routing::route::Route,
            typename ZSERIO_T_alternativeRoutes = ::zserio::vector<::nds::routing::route::Route>,
            typename ZSERIO_T_mapId = ::nds::system::types::NdsSystemToken,
            typename ZSERIO_T_versionId = ::nds::core::types::VersionId,
            typename ZSERIO_T_customResponseData = ::zserio::BitBuffer,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_route, RoutingServiceResponse, allocator_type> = 0>
    RoutingServiceResponse(
            ZSERIO_T_route&& route_,
            ZSERIO_T_alternativeRoutes&& alternativeRoutes_,
            ZSERIO_T_mapId&& mapId_,
            ZSERIO_T_versionId&& versionId_,
            ZSERIO_T_customResponseData&& customResponseData_,
            const allocator_type& allocator = allocator_type()) :
            RoutingServiceResponse(allocator)
    {
        m_route_ = ::std::forward<ZSERIO_T_route>(route_);
        m_alternativeRoutes_ = ::zserio::createOptionalArray<ZserioArrayType_alternativeRoutes>(::std::forward<ZSERIO_T_alternativeRoutes>(alternativeRoutes_));
        m_mapId_ = ::std::forward<ZSERIO_T_mapId>(mapId_);
        m_versionId_ = ::std::forward<ZSERIO_T_versionId>(versionId_);
        m_customResponseData_ = ::std::forward<ZSERIO_T_customResponseData>(customResponseData_);
    }

    explicit RoutingServiceResponse(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoutingServiceResponse(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoutingServiceResponse() = default;

    RoutingServiceResponse(const RoutingServiceResponse&) = default;
    RoutingServiceResponse& operator=(const RoutingServiceResponse&) = default;

    RoutingServiceResponse(RoutingServiceResponse&&) = default;
    RoutingServiceResponse& operator=(RoutingServiceResponse&&) = default;

    RoutingServiceResponse(::zserio::PropagateAllocatorT,
            const RoutingServiceResponse& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::routing::route::Route& getRoute() const;
    ::nds::routing::route::Route& getRoute();
    void setRoute(const ::nds::routing::route::Route& route_);
    void setRoute(::nds::routing::route::Route&& route_);

    const ::zserio::vector<::nds::routing::route::Route>& getAlternativeRoutes() const;
    ::zserio::vector<::nds::routing::route::Route>& getAlternativeRoutes();
    void setAlternativeRoutes(const ::zserio::vector<::nds::routing::route::Route>& alternativeRoutes_);
    void setAlternativeRoutes(::zserio::vector<::nds::routing::route::Route>&& alternativeRoutes_);
    bool isAlternativeRoutesUsed() const;
    bool isAlternativeRoutesSet() const;
    void resetAlternativeRoutes();

    const ::nds::system::types::NdsSystemToken& getMapId() const;
    ::nds::system::types::NdsSystemToken& getMapId();
    void setMapId(const ::nds::system::types::NdsSystemToken& mapId_);
    void setMapId(::nds::system::types::NdsSystemToken&& mapId_);
    bool isMapIdUsed() const;
    bool isMapIdSet() const;
    void resetMapId();

    ::nds::core::types::VersionId getVersionId() const;
    void setVersionId(::nds::core::types::VersionId versionId_);
    bool isVersionIdUsed() const;
    bool isVersionIdSet() const;
    void resetVersionId();

    const ::zserio::BitBuffer& getCustomResponseData() const;
    ::zserio::BitBuffer& getCustomResponseData();
    void setCustomResponseData(const ::zserio::BitBuffer& customResponseData_);
    void setCustomResponseData(::zserio::BitBuffer&& customResponseData_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoutingServiceResponse& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_alternativeRoutes
    {
    public:
        using OwnerType = RoutingServiceResponse;

        static void initializeElement(RoutingServiceResponse& owner,
                ::nds::routing::route::Route& element, size_t index);
    };

    class ZserioElementFactory_alternativeRoutes
    {
    public:
        using OwnerType = RoutingServiceResponse;

        static void create(RoutingServiceResponse& owner,
                ::zserio::vector<::nds::routing::route::Route>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoutingServiceResponse& owner,
                ::zserio::vector<::nds::routing::route::Route>& array,
                ::nds::routing::route::Route::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_alternativeRoutes = ::zserio::Array<::zserio::vector<::nds::routing::route::Route>, ::zserio::ObjectArrayTraits<::nds::routing::route::Route, ZserioElementFactory_alternativeRoutes>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_alternativeRoutes>;

    ::nds::routing::route::Route readRoute(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::routing::route::Route readRoute(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_alternativeRoutes> readAlternativeRoutes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_alternativeRoutes> readAlternativeRoutes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::system::types::NdsSystemToken> readMapId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::system::types::NdsSystemToken> readMapId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::VersionId> readVersionId(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::VersionId> readVersionId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::BitBuffer readCustomResponseData(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::routing::route::Route m_route_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_alternativeRoutes> m_alternativeRoutes_;
    ::zserio::InplaceOptionalHolder<::nds::system::types::NdsSystemToken> m_mapId_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::VersionId> m_versionId_;
    ::zserio::BitBuffer m_customResponseData_;
};

} // namespace services
} // namespace routing
} // namespace nds

#endif // NDS_ROUTING_SERVICES_ROUTING_SERVICE_RESPONSE_H
