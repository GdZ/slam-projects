/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_TYPES_CLOTHOID_H
#define NDS_ADAS_TYPES_CLOTHOID_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/adas/types/ClothoidData.h>

namespace nds
{
namespace adas
{
namespace types
{

class Clothoid
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumOfValues()
        {
            return m_numOfValues_;
        }

    private:
        ::zserio::DeltaContext m_numOfValues_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Clothoid() noexcept :
            Clothoid(allocator_type())
    {}

    explicit Clothoid(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_clothoidData = ::zserio::vector<::nds::adas::types::ClothoidData>>
    Clothoid(
            uint16_t numOfValues_,
            ZSERIO_T_clothoidData&& clothoidData_,
            const allocator_type& allocator = allocator_type()) :
            Clothoid(allocator)
    {
        m_numOfValues_ = numOfValues_;
        m_clothoidData_ = ZserioArrayType_clothoidData(::std::forward<ZSERIO_T_clothoidData>(clothoidData_));
    }

    explicit Clothoid(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Clothoid(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Clothoid() = default;

    Clothoid(const Clothoid&) = default;
    Clothoid& operator=(const Clothoid&) = default;

    Clothoid(Clothoid&&) = default;
    Clothoid& operator=(Clothoid&&) = default;

    Clothoid(::zserio::PropagateAllocatorT,
            const Clothoid& other, const allocator_type& allocator);

    uint16_t getNumOfValues() const;
    void setNumOfValues(uint16_t numOfValues_);

    const ::zserio::vector<::nds::adas::types::ClothoidData>& getClothoidData() const;
    ::zserio::vector<::nds::adas::types::ClothoidData>& getClothoidData();
    void setClothoidData(const ::zserio::vector<::nds::adas::types::ClothoidData>& clothoidData_);
    void setClothoidData(::zserio::vector<::nds::adas::types::ClothoidData>&& clothoidData_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Clothoid& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_clothoidData
    {
    public:
        using OwnerType = Clothoid;

        static void create(Clothoid& owner,
                ::zserio::vector<::nds::adas::types::ClothoidData>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Clothoid& owner,
                ::zserio::vector<::nds::adas::types::ClothoidData>& array,
                ::nds::adas::types::ClothoidData::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_clothoidData = ::zserio::Array<::zserio::vector<::nds::adas::types::ClothoidData>, ::zserio::ObjectArrayTraits<::nds::adas::types::ClothoidData, ZserioElementFactory_clothoidData>, ::zserio::ArrayType::NORMAL>;

    uint16_t readNumOfValues(::zserio::BitStreamReader& in);
    uint16_t readNumOfValues(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_clothoidData readClothoidData(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_clothoidData readClothoidData(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint16_t m_numOfValues_;
    ZserioArrayType_clothoidData m_clothoidData_;
};

} // namespace types
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_TYPES_CLOTHOID_H
