/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_TYPES_CURVATURE_PATH_H
#define NDS_ADAS_TYPES_CURVATURE_PATH_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/adas/types/CurvaturePathRoad.h>
#include <nds/adas/types/CurvaturePointList.h>

namespace nds
{
namespace adas
{
namespace types
{

class CurvaturePath
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumOfRoads()
        {
            return m_numOfRoads_;
        }

        ::nds::adas::types::CurvaturePointList::ZserioPackingContext& getCurvaturePoints()
        {
            return m_curvaturePoints_;
        }

    private:
        ::zserio::DeltaContext m_numOfRoads_;
        ::nds::adas::types::CurvaturePointList::ZserioPackingContext m_curvaturePoints_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    CurvaturePath() noexcept :
            CurvaturePath(allocator_type())
    {}

    explicit CurvaturePath(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_curvaturePoints = ::nds::adas::types::CurvaturePointList,
            typename ZSERIO_T_road = ::zserio::vector<::nds::adas::types::CurvaturePathRoad>>
    CurvaturePath(
            uint8_t numOfRoads_,
            ZSERIO_T_curvaturePoints&& curvaturePoints_,
            ZSERIO_T_road&& road_,
            const allocator_type& allocator = allocator_type()) :
            CurvaturePath(allocator)
    {
        m_numOfRoads_ = numOfRoads_;
        m_curvaturePoints_ = ::std::forward<ZSERIO_T_curvaturePoints>(curvaturePoints_);
        m_road_ = ZserioArrayType_road(::std::forward<ZSERIO_T_road>(road_));
    }

    explicit CurvaturePath(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit CurvaturePath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~CurvaturePath() = default;

    CurvaturePath(const CurvaturePath&) = default;
    CurvaturePath& operator=(const CurvaturePath&) = default;

    CurvaturePath(CurvaturePath&&) = default;
    CurvaturePath& operator=(CurvaturePath&&) = default;

    CurvaturePath(::zserio::PropagateAllocatorT,
            const CurvaturePath& other, const allocator_type& allocator);

    uint8_t getNumOfRoads() const;
    void setNumOfRoads(uint8_t numOfRoads_);

    const ::nds::adas::types::CurvaturePointList& getCurvaturePoints() const;
    ::nds::adas::types::CurvaturePointList& getCurvaturePoints();
    void setCurvaturePoints(const ::nds::adas::types::CurvaturePointList& curvaturePoints_);
    void setCurvaturePoints(::nds::adas::types::CurvaturePointList&& curvaturePoints_);

    const ::zserio::vector<::nds::adas::types::CurvaturePathRoad>& getRoad() const;
    ::zserio::vector<::nds::adas::types::CurvaturePathRoad>& getRoad();
    void setRoad(const ::zserio::vector<::nds::adas::types::CurvaturePathRoad>& road_);
    void setRoad(::zserio::vector<::nds::adas::types::CurvaturePathRoad>&& road_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const CurvaturePath& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_road
    {
    public:
        using OwnerType = CurvaturePath;

        static void create(CurvaturePath& owner,
                ::zserio::vector<::nds::adas::types::CurvaturePathRoad>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(CurvaturePath& owner,
                ::zserio::vector<::nds::adas::types::CurvaturePathRoad>& array,
                ::nds::adas::types::CurvaturePathRoad::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_road = ::zserio::Array<::zserio::vector<::nds::adas::types::CurvaturePathRoad>, ::zserio::ObjectArrayTraits<::nds::adas::types::CurvaturePathRoad, ZserioElementFactory_road>, ::zserio::ArrayType::NORMAL>;

    uint8_t readNumOfRoads(::zserio::BitStreamReader& in);
    uint8_t readNumOfRoads(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::adas::types::CurvaturePointList readCurvaturePoints(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::adas::types::CurvaturePointList readCurvaturePoints(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_road readRoad(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_road readRoad(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint8_t m_numOfRoads_;
    ::nds::adas::types::CurvaturePointList m_curvaturePoints_;
    ZserioArrayType_road m_road_;
};

} // namespace types
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_TYPES_CURVATURE_PATH_H
