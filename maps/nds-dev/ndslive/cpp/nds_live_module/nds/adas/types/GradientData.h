/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_TYPES_GRADIENT_DATA_H
#define NDS_ADAS_TYPES_GRADIENT_DATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace adas
{
namespace types
{

class GradientData
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getChainageOffset()
        {
            return m_chainageOffset_;
        }

        ::zserio::DeltaContext& getRelativeGradeLineElevation()
        {
            return m_relativeGradeLineElevation_;
        }

        ::zserio::DeltaContext& getRadiusValue()
        {
            return m_radiusValue_;
        }

    private:
        ::zserio::DeltaContext m_chainageOffset_;
        ::zserio::DeltaContext m_relativeGradeLineElevation_;
        ::zserio::DeltaContext m_radiusValue_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    GradientData() noexcept :
            GradientData(allocator_type())
    {}

    explicit GradientData(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_radiusValue = uint8_t>
    GradientData(
            bool hasRadiusValue_,
            uint32_t chainageOffset_,
            int8_t relativeGradeLineElevation_,
            ZSERIO_T_radiusValue&& radiusValue_,
            const allocator_type& allocator = allocator_type()) :
            GradientData(allocator)
    {
        m_hasRadiusValue_ = hasRadiusValue_;
        m_chainageOffset_ = chainageOffset_;
        m_relativeGradeLineElevation_ = relativeGradeLineElevation_;
        m_radiusValue_ = ::std::forward<ZSERIO_T_radiusValue>(radiusValue_);
    }

    explicit GradientData(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit GradientData(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~GradientData() = default;

    GradientData(const GradientData&) = default;
    GradientData& operator=(const GradientData&) = default;

    GradientData(GradientData&&) = default;
    GradientData& operator=(GradientData&&) = default;

    GradientData(::zserio::PropagateAllocatorT,
            const GradientData& other, const allocator_type& allocator);

    bool getHasRadiusValue() const;
    void setHasRadiusValue(bool hasRadiusValue_);

    uint32_t getChainageOffset() const;
    void setChainageOffset(uint32_t chainageOffset_);

    int8_t getRelativeGradeLineElevation() const;
    void setRelativeGradeLineElevation(int8_t relativeGradeLineElevation_);

    uint8_t getRadiusValue() const;
    void setRadiusValue(uint8_t radiusValue_);
    bool isRadiusValueUsed() const;
    bool isRadiusValueSet() const;
    void resetRadiusValue();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const GradientData& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    bool readHasRadiusValue(::zserio::BitStreamReader& in);
    uint32_t readChainageOffset(::zserio::BitStreamReader& in);
    uint32_t readChainageOffset(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    int8_t readRelativeGradeLineElevation(::zserio::BitStreamReader& in);
    int8_t readRelativeGradeLineElevation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readRadiusValue(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readRadiusValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    bool m_hasRadiusValue_;
    uint32_t m_chainageOffset_;
    int8_t m_relativeGradeLineElevation_;
    ::zserio::InplaceOptionalHolder<uint8_t> m_radiusValue_;
};

} // namespace types
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_TYPES_GRADIENT_DATA_H
