/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_TYPES_ELEVATION_ARRAY_H
#define NDS_ADAS_TYPES_ELEVATION_ARRAY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/adas/types/AdasGeometryPosition.h>
#include <nds/adas/types/Elevation.h>

namespace nds
{
namespace adas
{
namespace types
{

class ElevationArray
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumValues()
        {
            return m_numValues_;
        }

    private:
        ::zserio::DeltaContext m_numValues_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ElevationArray() noexcept :
            ElevationArray(allocator_type())
    {}

    explicit ElevationArray(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_point = ::zserio::vector<::nds::adas::types::AdasGeometryPosition>,
            typename ZSERIO_T_elevation = ::zserio::vector<::nds::adas::types::Elevation>>
    ElevationArray(
            uint16_t numValues_,
            ZSERIO_T_point&& point_,
            ZSERIO_T_elevation&& elevation_,
            const allocator_type& allocator = allocator_type()) :
            ElevationArray(allocator)
    {
        m_numValues_ = numValues_;
        m_point_ = ZserioArrayType_point(::std::forward<ZSERIO_T_point>(point_));
        m_elevation_ = ZserioArrayType_elevation(::std::forward<ZSERIO_T_elevation>(elevation_));
    }

    explicit ElevationArray(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ElevationArray(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ElevationArray() = default;

    ElevationArray(const ElevationArray&) = default;
    ElevationArray& operator=(const ElevationArray&) = default;

    ElevationArray(ElevationArray&&) = default;
    ElevationArray& operator=(ElevationArray&&) = default;

    ElevationArray(::zserio::PropagateAllocatorT,
            const ElevationArray& other, const allocator_type& allocator);

    uint16_t getNumValues() const;
    void setNumValues(uint16_t numValues_);

    const ::zserio::vector<::nds::adas::types::AdasGeometryPosition>& getPoint() const;
    ::zserio::vector<::nds::adas::types::AdasGeometryPosition>& getPoint();
    void setPoint(const ::zserio::vector<::nds::adas::types::AdasGeometryPosition>& point_);
    void setPoint(::zserio::vector<::nds::adas::types::AdasGeometryPosition>&& point_);

    const ::zserio::vector<::nds::adas::types::Elevation>& getElevation() const;
    ::zserio::vector<::nds::adas::types::Elevation>& getElevation();
    void setElevation(const ::zserio::vector<::nds::adas::types::Elevation>& elevation_);
    void setElevation(::zserio::vector<::nds::adas::types::Elevation>&& elevation_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ElevationArray& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_point = ::zserio::Array<::zserio::vector<::nds::adas::types::AdasGeometryPosition>, ::zserio::VarSizeArrayTraits, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_elevation = ::zserio::Array<::zserio::vector<::nds::adas::types::Elevation>, ::zserio::VarIntNNArrayTraits<::nds::adas::types::Elevation>, ::zserio::ArrayType::NORMAL>;

    uint16_t readNumValues(::zserio::BitStreamReader& in);
    uint16_t readNumValues(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_point readPoint(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_point readPoint(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_elevation readElevation(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_elevation readElevation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint16_t m_numValues_;
    ZserioArrayType_point m_point_;
    ZserioArrayType_elevation m_elevation_;
};

} // namespace types
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_TYPES_ELEVATION_ARRAY_H
