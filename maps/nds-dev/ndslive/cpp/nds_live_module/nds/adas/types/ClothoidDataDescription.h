/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_TYPES_CLOTHOID_DATA_DESCRIPTION_H
#define NDS_ADAS_TYPES_CLOTHOID_DATA_DESCRIPTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace adas
{
namespace types
{

class ClothoidDataDescription
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumberOfSteps()
        {
            return m_numberOfSteps_;
        }

        ::zserio::DeltaContext& getNumBits()
        {
            return m_numBits_;
        }

    private:
        ::zserio::DeltaContext m_numberOfSteps_;
        ::zserio::DeltaContext m_numBits_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ClothoidDataDescription() noexcept :
            ClothoidDataDescription(allocator_type())
    {}

    explicit ClothoidDataDescription(const allocator_type& allocator) noexcept;

    ClothoidDataDescription(
            uint16_t numberOfSteps_,
            uint8_t numBits_,
            bool hasCoordDiff_,
            bool hasTStart_,
            bool hasTEnd_,
            bool hasCStart_,
            bool hasCEnd_,
            bool hasChainageDiff_,
            const allocator_type& allocator = allocator_type()) :
            ClothoidDataDescription(allocator)
    {
        m_numberOfSteps_ = numberOfSteps_;
        m_numBits_ = numBits_;
        m_hasCoordDiff_ = hasCoordDiff_;
        m_hasTStart_ = hasTStart_;
        m_hasTEnd_ = hasTEnd_;
        m_hasCStart_ = hasCStart_;
        m_hasCEnd_ = hasCEnd_;
        m_hasChainageDiff_ = hasChainageDiff_;
    }

    explicit ClothoidDataDescription(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ClothoidDataDescription(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ClothoidDataDescription() = default;

    ClothoidDataDescription(const ClothoidDataDescription&) = default;
    ClothoidDataDescription& operator=(const ClothoidDataDescription&) = default;

    ClothoidDataDescription(ClothoidDataDescription&&) = default;
    ClothoidDataDescription& operator=(ClothoidDataDescription&&) = default;

    ClothoidDataDescription(::zserio::PropagateAllocatorT,
            const ClothoidDataDescription& other, const allocator_type& allocator);

    uint16_t getNumberOfSteps() const;
    void setNumberOfSteps(uint16_t numberOfSteps_);

    uint8_t getNumBits() const;
    void setNumBits(uint8_t numBits_);

    bool getHasCoordDiff() const;
    void setHasCoordDiff(bool hasCoordDiff_);

    bool getHasTStart() const;
    void setHasTStart(bool hasTStart_);

    bool getHasTEnd() const;
    void setHasTEnd(bool hasTEnd_);

    bool getHasCStart() const;
    void setHasCStart(bool hasCStart_);

    bool getHasCEnd() const;
    void setHasCEnd(bool hasCEnd_);

    bool getHasChainageDiff() const;
    void setHasChainageDiff(bool hasChainageDiff_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ClothoidDataDescription& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    uint16_t readNumberOfSteps(::zserio::BitStreamReader& in);
    uint16_t readNumberOfSteps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint8_t readNumBits(::zserio::BitStreamReader& in);
    uint8_t readNumBits(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasCoordDiff(::zserio::BitStreamReader& in);
    bool readHasTStart(::zserio::BitStreamReader& in);
    bool readHasTEnd(::zserio::BitStreamReader& in);
    bool readHasCStart(::zserio::BitStreamReader& in);
    bool readHasCEnd(::zserio::BitStreamReader& in);
    bool readHasChainageDiff(::zserio::BitStreamReader& in);

    uint16_t m_numberOfSteps_;
    uint8_t m_numBits_;
    bool m_hasCoordDiff_;
    bool m_hasTStart_;
    bool m_hasTEnd_;
    bool m_hasCStart_;
    bool m_hasCEnd_;
    bool m_hasChainageDiff_;
};

} // namespace types
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_TYPES_CLOTHOID_DATA_DESCRIPTION_H
