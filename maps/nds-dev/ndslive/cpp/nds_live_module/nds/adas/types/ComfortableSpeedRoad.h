/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_TYPES_COMFORTABLE_SPEED_ROAD_H
#define NDS_ADAS_TYPES_COMFORTABLE_SPEED_ROAD_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/adas/types/ComfortableSpeedPointList.h>
#include <nds/road/reference/types/DirectedRoadReference.h>

namespace nds
{
namespace adas
{
namespace types
{

class ComfortableSpeedRoad
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::road::reference::types::DirectedRoadReference::ZserioPackingContext& getFeatureReference()
        {
            return m_featureReference_;
        }

        ::nds::adas::types::ComfortableSpeedPointList::ZserioPackingContext& getSpeedPoints()
        {
            return m_speedPoints_;
        }

    private:
        ::nds::road::reference::types::DirectedRoadReference::ZserioPackingContext m_featureReference_;
        ::nds::adas::types::ComfortableSpeedPointList::ZserioPackingContext m_speedPoints_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ComfortableSpeedRoad() noexcept :
            ComfortableSpeedRoad(allocator_type())
    {}

    explicit ComfortableSpeedRoad(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_featureReference = ::nds::road::reference::types::DirectedRoadReference,
            typename ZSERIO_T_speedPoints = ::nds::adas::types::ComfortableSpeedPointList,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_featureReference, ComfortableSpeedRoad, allocator_type> = 0>
    ComfortableSpeedRoad(
            ZSERIO_T_featureReference&& featureReference_,
            ZSERIO_T_speedPoints&& speedPoints_,
            const allocator_type& allocator = allocator_type()) :
            ComfortableSpeedRoad(allocator)
    {
        m_featureReference_ = ::std::forward<ZSERIO_T_featureReference>(featureReference_);
        m_speedPoints_ = ::std::forward<ZSERIO_T_speedPoints>(speedPoints_);
    }

    explicit ComfortableSpeedRoad(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ComfortableSpeedRoad(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ComfortableSpeedRoad() = default;

    ComfortableSpeedRoad(const ComfortableSpeedRoad&) = default;
    ComfortableSpeedRoad& operator=(const ComfortableSpeedRoad&) = default;

    ComfortableSpeedRoad(ComfortableSpeedRoad&&) = default;
    ComfortableSpeedRoad& operator=(ComfortableSpeedRoad&&) = default;

    ComfortableSpeedRoad(::zserio::PropagateAllocatorT,
            const ComfortableSpeedRoad& other, const allocator_type& allocator);

    const ::nds::road::reference::types::DirectedRoadReference& getFeatureReference() const;
    ::nds::road::reference::types::DirectedRoadReference& getFeatureReference();
    void setFeatureReference(const ::nds::road::reference::types::DirectedRoadReference& featureReference_);
    void setFeatureReference(::nds::road::reference::types::DirectedRoadReference&& featureReference_);

    const ::nds::adas::types::ComfortableSpeedPointList& getSpeedPoints() const;
    ::nds::adas::types::ComfortableSpeedPointList& getSpeedPoints();
    void setSpeedPoints(const ::nds::adas::types::ComfortableSpeedPointList& speedPoints_);
    void setSpeedPoints(::nds::adas::types::ComfortableSpeedPointList&& speedPoints_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ComfortableSpeedRoad& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::road::reference::types::DirectedRoadReference readFeatureReference(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::road::reference::types::DirectedRoadReference readFeatureReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::adas::types::ComfortableSpeedPointList readSpeedPoints(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::adas::types::ComfortableSpeedPointList readSpeedPoints(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::road::reference::types::DirectedRoadReference m_featureReference_;
    ::nds::adas::types::ComfortableSpeedPointList m_speedPoints_;
};

} // namespace types
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_TYPES_COMFORTABLE_SPEED_ROAD_H
