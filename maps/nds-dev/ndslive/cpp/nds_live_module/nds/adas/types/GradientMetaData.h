/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_TYPES_GRADIENT_META_DATA_H
#define NDS_ADAS_TYPES_GRADIENT_META_DATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/adas/types/AdasAccuracy.h>
#include <nds/adas/types/DegreeOfFreedom.h>
#include <nds/adas/types/StandardDeviation.h>

namespace nds
{
namespace adas
{
namespace types
{

class GradientMetaData
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getAdasAccuracy()
        {
            return m_adasAccuracy_;
        }

        ::zserio::DeltaContext& getStandardDeviation()
        {
            return m_standardDeviation_;
        }

        ::zserio::DeltaContext& getDegreeOfFreedom()
        {
            return m_degreeOfFreedom_;
        }

        ::zserio::DeltaContext& getAbsoluteGradeLineElevation()
        {
            return m_absoluteGradeLineElevation_;
        }

        ::zserio::DeltaContext& getDeltaChainageStart()
        {
            return m_deltaChainageStart_;
        }

    private:
        ::zserio::DeltaContext m_adasAccuracy_;
        ::zserio::DeltaContext m_standardDeviation_;
        ::zserio::DeltaContext m_degreeOfFreedom_;
        ::zserio::DeltaContext m_absoluteGradeLineElevation_;
        ::zserio::DeltaContext m_deltaChainageStart_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    GradientMetaData() noexcept :
            GradientMetaData(allocator_type())
    {}

    explicit GradientMetaData(const allocator_type& allocator) noexcept;

    GradientMetaData(
            ::nds::adas::types::AdasAccuracy adasAccuracy_,
            ::nds::adas::types::StandardDeviation standardDeviation_,
            ::nds::adas::types::DegreeOfFreedom degreeOfFreedom_,
            uint16_t absoluteGradeLineElevation_,
            int16_t deltaChainageStart_,
            const allocator_type& allocator = allocator_type()) :
            GradientMetaData(allocator)
    {
        m_adasAccuracy_ = adasAccuracy_;
        m_standardDeviation_ = standardDeviation_;
        m_degreeOfFreedom_ = degreeOfFreedom_;
        m_absoluteGradeLineElevation_ = absoluteGradeLineElevation_;
        m_deltaChainageStart_ = deltaChainageStart_;
    }

    explicit GradientMetaData(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit GradientMetaData(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~GradientMetaData() = default;

    GradientMetaData(const GradientMetaData&) = default;
    GradientMetaData& operator=(const GradientMetaData&) = default;

    GradientMetaData(GradientMetaData&&) = default;
    GradientMetaData& operator=(GradientMetaData&&) = default;

    GradientMetaData(::zserio::PropagateAllocatorT,
            const GradientMetaData& other, const allocator_type& allocator);

    ::nds::adas::types::AdasAccuracy getAdasAccuracy() const;
    void setAdasAccuracy(::nds::adas::types::AdasAccuracy adasAccuracy_);

    ::nds::adas::types::StandardDeviation getStandardDeviation() const;
    void setStandardDeviation(::nds::adas::types::StandardDeviation standardDeviation_);

    ::nds::adas::types::DegreeOfFreedom getDegreeOfFreedom() const;
    void setDegreeOfFreedom(::nds::adas::types::DegreeOfFreedom degreeOfFreedom_);

    uint16_t getAbsoluteGradeLineElevation() const;
    void setAbsoluteGradeLineElevation(uint16_t absoluteGradeLineElevation_);

    int16_t getDeltaChainageStart() const;
    void setDeltaChainageStart(int16_t deltaChainageStart_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const GradientMetaData& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::adas::types::AdasAccuracy readAdasAccuracy(::zserio::BitStreamReader& in);
    ::nds::adas::types::AdasAccuracy readAdasAccuracy(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::adas::types::StandardDeviation readStandardDeviation(::zserio::BitStreamReader& in);
    ::nds::adas::types::StandardDeviation readStandardDeviation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::adas::types::DegreeOfFreedom readDegreeOfFreedom(::zserio::BitStreamReader& in);
    ::nds::adas::types::DegreeOfFreedom readDegreeOfFreedom(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint16_t readAbsoluteGradeLineElevation(::zserio::BitStreamReader& in);
    uint16_t readAbsoluteGradeLineElevation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    int16_t readDeltaChainageStart(::zserio::BitStreamReader& in);
    int16_t readDeltaChainageStart(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::adas::types::AdasAccuracy m_adasAccuracy_;
    ::nds::adas::types::StandardDeviation m_standardDeviation_;
    ::nds::adas::types::DegreeOfFreedom m_degreeOfFreedom_;
    uint16_t m_absoluteGradeLineElevation_;
    int16_t m_deltaChainageStart_;
};

} // namespace types
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_TYPES_GRADIENT_META_DATA_H
