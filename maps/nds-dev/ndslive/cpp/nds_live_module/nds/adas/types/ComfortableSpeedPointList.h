/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_TYPES_COMFORTABLE_SPEED_POINT_LIST_H
#define NDS_ADAS_TYPES_COMFORTABLE_SPEED_POINT_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/adas/types/ComfortableSpeedPoint.h>

namespace nds
{
namespace adas
{
namespace types
{

class ComfortableSpeedPointList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumOfValues()
        {
            return m_numOfValues_;
        }

    private:
        ::zserio::DeltaContext m_numOfValues_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ComfortableSpeedPointList() noexcept :
            ComfortableSpeedPointList(allocator_type())
    {}

    explicit ComfortableSpeedPointList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_speedPoints = ::zserio::vector<::nds::adas::types::ComfortableSpeedPoint>>
    ComfortableSpeedPointList(
            uint16_t numOfValues_,
            ZSERIO_T_speedPoints&& speedPoints_,
            const allocator_type& allocator = allocator_type()) :
            ComfortableSpeedPointList(allocator)
    {
        m_numOfValues_ = numOfValues_;
        m_speedPoints_ = ZserioArrayType_speedPoints(::std::forward<ZSERIO_T_speedPoints>(speedPoints_));
    }

    explicit ComfortableSpeedPointList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ComfortableSpeedPointList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ComfortableSpeedPointList() = default;

    ComfortableSpeedPointList(const ComfortableSpeedPointList&) = default;
    ComfortableSpeedPointList& operator=(const ComfortableSpeedPointList&) = default;

    ComfortableSpeedPointList(ComfortableSpeedPointList&&) = default;
    ComfortableSpeedPointList& operator=(ComfortableSpeedPointList&&) = default;

    ComfortableSpeedPointList(::zserio::PropagateAllocatorT,
            const ComfortableSpeedPointList& other, const allocator_type& allocator);

    uint16_t getNumOfValues() const;
    void setNumOfValues(uint16_t numOfValues_);

    const ::zserio::vector<::nds::adas::types::ComfortableSpeedPoint>& getSpeedPoints() const;
    ::zserio::vector<::nds::adas::types::ComfortableSpeedPoint>& getSpeedPoints();
    void setSpeedPoints(const ::zserio::vector<::nds::adas::types::ComfortableSpeedPoint>& speedPoints_);
    void setSpeedPoints(::zserio::vector<::nds::adas::types::ComfortableSpeedPoint>&& speedPoints_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ComfortableSpeedPointList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_speedPoints
    {
    public:
        using OwnerType = ComfortableSpeedPointList;

        static void create(ComfortableSpeedPointList& owner,
                ::zserio::vector<::nds::adas::types::ComfortableSpeedPoint>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ComfortableSpeedPointList& owner,
                ::zserio::vector<::nds::adas::types::ComfortableSpeedPoint>& array,
                ::nds::adas::types::ComfortableSpeedPoint::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_speedPoints = ::zserio::Array<::zserio::vector<::nds::adas::types::ComfortableSpeedPoint>, ::zserio::ObjectArrayTraits<::nds::adas::types::ComfortableSpeedPoint, ZserioElementFactory_speedPoints>, ::zserio::ArrayType::NORMAL>;

    uint16_t readNumOfValues(::zserio::BitStreamReader& in);
    uint16_t readNumOfValues(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_speedPoints readSpeedPoints(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_speedPoints readSpeedPoints(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint16_t m_numOfValues_;
    ZserioArrayType_speedPoints m_speedPoints_;
};

} // namespace types
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_TYPES_COMFORTABLE_SPEED_POINT_LIST_H
