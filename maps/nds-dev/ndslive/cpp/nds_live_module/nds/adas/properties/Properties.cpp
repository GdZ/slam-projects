/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/adas/properties/PropertyType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for PropertyType enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::adas::properties::PropertyType>::names;
constexpr ::std::array<::nds::adas::properties::PropertyType, 4> EnumTraits<::nds::adas::properties::PropertyType>::values;
constexpr const char* EnumTraits<::nds::adas::properties::PropertyType>::enumName;

template <>
size_t enumToOrdinal(::nds::adas::properties::PropertyType value)
{
    switch (value)
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        return 0;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        return 1;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        return 2;
    case ::nds::adas::properties::PropertyType::CORE:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PropertyType: ") <<
                static_cast<typename ::std::underlying_type<::nds::adas::properties::PropertyType>::type>(value) << "!";
    }
}

template <>
::nds::adas::properties::PropertyType valueToEnum(
        typename ::std::underlying_type<::nds::adas::properties::PropertyType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
        return static_cast<::nds::adas::properties::PropertyType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration PropertyType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::adas::properties::PropertyType>(::nds::adas::properties::PropertyType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::adas::properties::PropertyType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::adas::properties::PropertyType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::adas::properties::PropertyType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::adas::properties::PropertyType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::adas::properties::PropertyType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::adas::properties::PropertyType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::adas::properties::PropertyType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::adas::properties::PropertyType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::adas::properties::PropertyType>(
            static_cast<typename ::std::underlying_type<::nds::adas::properties::PropertyType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::adas::properties::PropertyType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::adas::properties::PropertyType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::adas::properties::PropertyType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::adas::properties::PropertyType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::adas::properties::PropertyType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::adas::properties::PropertyType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/properties/AdasPropertyType.h>
#include <nds/adas/properties/PropertyType.h>

namespace nds
{
namespace adas
{
namespace properties
{

AdasPropertyType::AdasPropertyType(const allocator_type&) noexcept :
        m_type_(::nds::adas::properties::PropertyType()),
        m_coreType_(::zserio::NullOpt)
{
}

AdasPropertyType::AdasPropertyType(::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(in)),
        m_coreType_(readCoreType(in))
{
}

AdasPropertyType::AdasPropertyType(AdasPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_type_(readType(context, in)),
        m_coreType_(readCoreType(context, in))
{
}

AdasPropertyType::AdasPropertyType(::zserio::PropagateAllocatorT,
        const AdasPropertyType& other, const allocator_type& allocator) :
        m_type_(::zserio::allocatorPropagatingCopy(other.m_type_, allocator)),
        m_coreType_(::zserio::allocatorPropagatingCopy(other.m_coreType_, allocator))
{
}

::nds::adas::properties::PropertyType AdasPropertyType::getType() const
{
    return m_type_;
}

void AdasPropertyType::setType(::nds::adas::properties::PropertyType type_)
{
    m_type_ = type_;
}

::nds::core::properties::CorePropertyType AdasPropertyType::getCoreType() const
{
    return m_coreType_.value();
}

void AdasPropertyType::setCoreType(::nds::core::properties::CorePropertyType coreType_)
{
    m_coreType_ = coreType_;
}

bool AdasPropertyType::isCoreTypeUsed() const
{
    return (getType() == ::nds::adas::properties::PropertyType::CORE);
}

bool AdasPropertyType::isCoreTypeSet() const
{
    return m_coreType_.hasValue();
}

void AdasPropertyType::resetCoreType()
{
    m_coreType_.reset();
}

void AdasPropertyType::initPackingContext(AdasPropertyType::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getType(), m_type_);
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        ::zserio::initPackingContext(context.getCoreType(), m_coreType_.value());
    }
}

size_t AdasPropertyType::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_type_);
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition += ::zserio::bitSizeOf(m_coreType_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AdasPropertyType::bitSizeOf(AdasPropertyType::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getType(), m_type_);
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition += ::zserio::bitSizeOf(context.getCoreType(), m_coreType_.value());
    }

    return endBitPosition - bitPosition;
}

size_t AdasPropertyType::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_type_);
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_coreType_.value());
    }

    return endBitPosition;
}

size_t AdasPropertyType::initializeOffsets(AdasPropertyType::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getType(), endBitPosition,
        m_type_);
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition = ::zserio::initializeOffsets(context.getCoreType(), endBitPosition,
        m_coreType_.value());
    }

    return endBitPosition;
}

bool AdasPropertyType::operator==(const AdasPropertyType& other) const
{
    if (this != &other)
    {
        return
                (m_type_ == other.m_type_) &&
                (!isCoreTypeUsed() ? !other.isCoreTypeUsed() : (m_coreType_ == other.m_coreType_));
    }

    return true;
}

uint32_t AdasPropertyType::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_type_);
    if (isCoreTypeUsed())
        result = ::zserio::calcHashCode(result, m_coreType_);

    return result;
}

void AdasPropertyType::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_type_);
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        ::zserio::write(out, m_coreType_.value());
    }
}

void AdasPropertyType::write(AdasPropertyType::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getType(), out, m_type_);
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        ::zserio::write(context.getCoreType(), out, m_coreType_.value());
    }
}

::nds::adas::properties::PropertyType AdasPropertyType::readType(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::adas::properties::PropertyType>(in);
}

::nds::adas::properties::PropertyType AdasPropertyType::readType(AdasPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::adas::properties::PropertyType>(context.getType(), in);
}
::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> AdasPropertyType::readCoreType(::zserio::BitStreamReader& in)
{
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::read<::nds::core::properties::CorePropertyType>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> AdasPropertyType::readCoreType(AdasPropertyType::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::read<::nds::core::properties::CorePropertyType>(context.getCoreType(), in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType>(::zserio::NullOpt);
}

} // namespace properties
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/properties/AdasPropertyValue.h>
#include <nds/adas/properties/PropertyType.h>

namespace nds
{
namespace adas
{
namespace properties
{

AdasPropertyValue::AdasPropertyValue(const allocator_type&) noexcept :
        m_isInitialized(false),
        m_value_(::zserio::NullOpt),
        m_coreValue_(::zserio::NullOpt)
{
}

AdasPropertyValue::AdasPropertyValue(::zserio::BitStreamReader& in,
        ::nds::adas::properties::AdasPropertyType& type_, const allocator_type& allocator) :
        m_type_(&type_),
        m_isInitialized(true),
        m_value_(readValue(in, allocator)),
        m_coreValue_(readCoreValue(in, allocator))
{
}

AdasPropertyValue::AdasPropertyValue(AdasPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::adas::properties::AdasPropertyType& type_, const allocator_type& allocator) :
        m_type_(&type_),
        m_isInitialized(true),
        m_value_(readValue(context, in, allocator)),
        m_coreValue_(readCoreValue(context, in, allocator))
{
}

AdasPropertyValue::AdasPropertyValue(const AdasPropertyValue& other) :
        m_value_(other.m_value_),
        m_coreValue_(other.m_coreValue_)
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

AdasPropertyValue& AdasPropertyValue::operator=(const AdasPropertyValue& other)
{
    m_value_ = other.m_value_;
    m_coreValue_ = other.m_coreValue_;
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;

    return *this;
}

AdasPropertyValue::AdasPropertyValue(AdasPropertyValue&& other) :
        m_value_(::std::move(other.m_value_)),
        m_coreValue_(::std::move(other.m_coreValue_))
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

AdasPropertyValue& AdasPropertyValue::operator=(AdasPropertyValue&& other)
{
    m_value_ = ::std::move(other.m_value_);
    m_coreValue_ = ::std::move(other.m_coreValue_);
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;

    return *this;
}

AdasPropertyValue::AdasPropertyValue(::zserio::PropagateAllocatorT,
        const AdasPropertyValue& other, const allocator_type& allocator) :
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator)),
        m_coreValue_(::zserio::allocatorPropagatingCopy(other.m_coreValue_, allocator))
{
    if (other.m_isInitialized)
        initialize(*(other.m_type_));
    else
        m_isInitialized = false;
}

void AdasPropertyValue::initialize(
        ::nds::adas::properties::AdasPropertyType& type_)
{
    m_type_ = &type_;
    m_isInitialized = true;

    initializeChildren();
}

bool AdasPropertyValue::isInitialized() const
{
    return m_isInitialized;
}

void AdasPropertyValue::initializeChildren()
{
    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
        m_value_.value().initialize(static_cast<::nds::adas::properties::PropertyType>(getType().getType()));
    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
        m_coreValue_.value().initialize(static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()));
}

::nds::adas::properties::AdasPropertyType& AdasPropertyValue::getType()
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'AdasPropertyValue' is not initialized!");

    return *m_type_;
}

const ::nds::adas::properties::AdasPropertyType& AdasPropertyValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'AdasPropertyValue' is not initialized!");

    return *m_type_;
}

::nds::adas::properties::PropertyValue& AdasPropertyValue::getValue()
{
    return m_value_.value();
}

const ::nds::adas::properties::PropertyValue& AdasPropertyValue::getValue() const
{
    return m_value_.value();
}

void AdasPropertyValue::setValue(const ::nds::adas::properties::PropertyValue& value_)
{
    m_value_ = value_;
}

void AdasPropertyValue::setValue(::nds::adas::properties::PropertyValue&& value_)
{
    m_value_ = ::std::move(value_);
}

bool AdasPropertyValue::isValueUsed() const
{
    return (getType().getType() != ::nds::adas::properties::PropertyType::CORE);
}

bool AdasPropertyValue::isValueSet() const
{
    return m_value_.hasValue();
}

void AdasPropertyValue::resetValue()
{
    m_value_.reset();
}

::nds::core::properties::CorePropertyValue& AdasPropertyValue::getCoreValue()
{
    return m_coreValue_.value();
}

const ::nds::core::properties::CorePropertyValue& AdasPropertyValue::getCoreValue() const
{
    return m_coreValue_.value();
}

void AdasPropertyValue::setCoreValue(const ::nds::core::properties::CorePropertyValue& coreValue_)
{
    m_coreValue_ = coreValue_;
}

void AdasPropertyValue::setCoreValue(::nds::core::properties::CorePropertyValue&& coreValue_)
{
    m_coreValue_ = ::std::move(coreValue_);
}

bool AdasPropertyValue::isCoreValueUsed() const
{
    return (getType().getType() == ::nds::adas::properties::PropertyType::CORE);
}

bool AdasPropertyValue::isCoreValueSet() const
{
    return m_coreValue_.hasValue();
}

void AdasPropertyValue::resetCoreValue()
{
    m_coreValue_.reset();
}

void AdasPropertyValue::initPackingContext(AdasPropertyValue::ZserioPackingContext& context) const
{
    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        m_value_.value().initPackingContext(context.getValue());
    }
    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        m_coreValue_.value().initPackingContext(context.getCoreValue());
    }
}

size_t AdasPropertyValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition += m_value_.value().bitSizeOf(endBitPosition);
    }
    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition += m_coreValue_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t AdasPropertyValue::bitSizeOf(AdasPropertyValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition += m_value_.value().bitSizeOf(context.getValue(), endBitPosition);
    }
    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition += m_coreValue_.value().bitSizeOf(context.getCoreValue(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t AdasPropertyValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition = m_value_.value().initializeOffsets(endBitPosition);
    }
    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition = m_coreValue_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t AdasPropertyValue::initializeOffsets(AdasPropertyValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition = m_value_.value().initializeOffsets(context.getValue(), endBitPosition);
    }
    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        endBitPosition = m_coreValue_.value().initializeOffsets(context.getCoreValue(), endBitPosition);
    }

    return endBitPosition;
}

bool AdasPropertyValue::operator==(const AdasPropertyValue& other) const
{
    if (this != &other)
    {
        return
                (getType() == other.getType()) &&
                (!isValueUsed() ? !other.isValueUsed() : (m_value_ == other.m_value_)) &&
                (!isCoreValueUsed() ? !other.isCoreValueUsed() : (m_coreValue_ == other.m_coreValue_));
    }

    return true;
}

uint32_t AdasPropertyValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (isValueUsed())
        result = ::zserio::calcHashCode(result, m_value_);
    if (isCoreValueUsed())
        result = ::zserio::calcHashCode(result, m_coreValue_);

    return result;
}

void AdasPropertyValue::write(::zserio::BitStreamWriter& out) const
{
    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_value_.value().getType() != static_cast<::nds::adas::properties::PropertyType>(getType().getType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field AdasPropertyValue.value: ") <<
                    m_value_.value().getType() << " != " << static_cast<::nds::adas::properties::PropertyType>(getType().getType()) << "!";
        }
        m_value_.value().write(out);
    }

    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_coreValue_.value().getType() != static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field AdasPropertyValue.coreValue: ") <<
                    m_coreValue_.value().getType() << " != " << static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()) << "!";
        }
        m_coreValue_.value().write(out);
    }
}

void AdasPropertyValue::write(AdasPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_value_.value().getType() != static_cast<::nds::adas::properties::PropertyType>(getType().getType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field AdasPropertyValue.value: ") <<
                    m_value_.value().getType() << " != " << static_cast<::nds::adas::properties::PropertyType>(getType().getType()) << "!";
        }
        m_value_.value().write(context.getValue(), out);
    }

    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        // check parameters
        if (m_coreValue_.value().getType() != static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field AdasPropertyValue.coreValue: ") <<
                    m_coreValue_.value().getType() << " != " << static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()) << "!";
        }
        m_coreValue_.value().write(context.getCoreValue(), out);
    }
}

::zserio::InplaceOptionalHolder<::nds::adas::properties::PropertyValue> AdasPropertyValue::readValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::properties::PropertyValue>(::nds::adas::properties::PropertyValue(in, static_cast<::nds::adas::properties::PropertyType>(getType().getType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::properties::PropertyValue>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::properties::PropertyValue> AdasPropertyValue::readValue(AdasPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getType().getType() != ::nds::adas::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::properties::PropertyValue>(::nds::adas::properties::PropertyValue(context.getValue(), in, static_cast<::nds::adas::properties::PropertyType>(getType().getType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::properties::PropertyValue>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> AdasPropertyValue::readCoreValue(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::nds::core::properties::CorePropertyValue(in, static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue> AdasPropertyValue::readCoreValue(AdasPropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getType().getType() == ::nds::adas::properties::PropertyType::CORE)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::nds::core::properties::CorePropertyValue(context.getCoreValue(), in, static_cast<::nds::core::properties::CorePropertyType>(getType().getCoreType()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyValue>(::zserio::NullOpt);
}

} // namespace properties
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/adas/properties/PropertyValue.h>

namespace nds
{
namespace adas
{
namespace properties
{

PropertyValue::PropertyValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

PropertyValue::PropertyValue(::zserio::BitStreamReader& in,
        ::nds::adas::properties::PropertyType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

PropertyValue::PropertyValue(PropertyValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::adas::properties::PropertyType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

PropertyValue::PropertyValue(const PropertyValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PropertyValue& PropertyValue::operator=(const PropertyValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PropertyValue::PropertyValue(PropertyValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

PropertyValue& PropertyValue::operator=(PropertyValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

PropertyValue::PropertyValue(::zserio::PropagateAllocatorT,
        const PropertyValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void PropertyValue::initialize(
        ::nds::adas::properties::PropertyType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool PropertyValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::adas::properties::PropertyType PropertyValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PropertyValue' is not initialized!");

    return m_type_;
}

::nds::adas::types::AdasAccuracy PropertyValue::getAdasAccuracy() const
{
    return m_objectChoice.get<::nds::adas::types::AdasAccuracy>();
}

void PropertyValue::setAdasAccuracy(::nds::adas::types::AdasAccuracy adasAccuracy_)
{
    m_objectChoice = adasAccuracy_;
}

::nds::adas::types::ClothoidMetaData& PropertyValue::getClothoidMetaData()
{
    return m_objectChoice.get<::nds::adas::types::ClothoidMetaData>();
}

const ::nds::adas::types::ClothoidMetaData& PropertyValue::getClothoidMetaData() const
{
    return m_objectChoice.get<::nds::adas::types::ClothoidMetaData>();
}

void PropertyValue::setClothoidMetaData(const ::nds::adas::types::ClothoidMetaData& clothoidMetaData_)
{
    m_objectChoice = clothoidMetaData_;
}

void PropertyValue::setClothoidMetaData(::nds::adas::types::ClothoidMetaData&& clothoidMetaData_)
{
    m_objectChoice = ::std::move(clothoidMetaData_);
}

::nds::adas::types::GradientMetaData& PropertyValue::getGradientMetaData()
{
    return m_objectChoice.get<::nds::adas::types::GradientMetaData>();
}

const ::nds::adas::types::GradientMetaData& PropertyValue::getGradientMetaData() const
{
    return m_objectChoice.get<::nds::adas::types::GradientMetaData>();
}

void PropertyValue::setGradientMetaData(const ::nds::adas::types::GradientMetaData& gradientMetaData_)
{
    m_objectChoice = gradientMetaData_;
}

void PropertyValue::setGradientMetaData(::nds::adas::types::GradientMetaData&& gradientMetaData_)
{
    m_objectChoice = ::std::move(gradientMetaData_);
}

PropertyValue::ChoiceTag PropertyValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        return CHOICE_adasAccuracy;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        return CHOICE_clothoidMetaData;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        return CHOICE_gradientMetaData;
    case ::nds::adas::properties::PropertyType::CORE:
        return UNDEFINED_CHOICE;
    default:
        return UNDEFINED_CHOICE;
    }
}

void PropertyValue::initPackingContext(PropertyValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        ::zserio::initPackingContext(context.getAdasAccuracy(), m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
        break;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        m_objectChoice.get<::nds::adas::types::ClothoidMetaData>().initPackingContext(context.getClothoidMetaData());
        break;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        m_objectChoice.get<::nds::adas::types::GradientMetaData>().initPackingContext(context.getGradientMetaData());
        break;
    case ::nds::adas::properties::PropertyType::CORE:
        // empty
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

size_t PropertyValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
        break;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        endBitPosition += m_objectChoice.get<::nds::adas::types::ClothoidMetaData>().bitSizeOf(endBitPosition);
        break;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        endBitPosition += m_objectChoice.get<::nds::adas::types::GradientMetaData>().bitSizeOf(endBitPosition);
        break;
    case ::nds::adas::properties::PropertyType::CORE:
        // empty
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PropertyValue::bitSizeOf(PropertyValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        endBitPosition += ::zserio::bitSizeOf(context.getAdasAccuracy(), m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
        break;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        endBitPosition += m_objectChoice.get<::nds::adas::types::ClothoidMetaData>().bitSizeOf(context.getClothoidMetaData(), endBitPosition);
        break;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        endBitPosition += m_objectChoice.get<::nds::adas::types::GradientMetaData>().bitSizeOf(context.getGradientMetaData(), endBitPosition);
        break;
    case ::nds::adas::properties::PropertyType::CORE:
        // empty
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition - bitPosition;
}

size_t PropertyValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
        break;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        endBitPosition = m_objectChoice.get<::nds::adas::types::ClothoidMetaData>().initializeOffsets(endBitPosition);
        break;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        endBitPosition = m_objectChoice.get<::nds::adas::types::GradientMetaData>().initializeOffsets(endBitPosition);
        break;
    case ::nds::adas::properties::PropertyType::CORE:
        // empty
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition;
}

size_t PropertyValue::initializeOffsets(PropertyValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        endBitPosition = ::zserio::initializeOffsets(context.getAdasAccuracy(), endBitPosition,
        m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
        break;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        endBitPosition = m_objectChoice.get<::nds::adas::types::ClothoidMetaData>().initializeOffsets(context.getClothoidMetaData(), endBitPosition);
        break;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        endBitPosition = m_objectChoice.get<::nds::adas::types::GradientMetaData>().initializeOffsets(context.getGradientMetaData(), endBitPosition);
        break;
    case ::nds::adas::properties::PropertyType::CORE:
        // empty
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }

    return endBitPosition;
}

bool PropertyValue::operator==(const PropertyValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::adas::types::AdasAccuracy>() == other.m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::adas::types::ClothoidMetaData>() == other.m_objectChoice.get<::nds::adas::types::ClothoidMetaData>());
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::adas::types::GradientMetaData>() == other.m_objectChoice.get<::nds::adas::types::GradientMetaData>());
    case ::nds::adas::properties::PropertyType::CORE:
        return true; // empty
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

uint32_t PropertyValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
            break;
        case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::adas::types::ClothoidMetaData>());
            break;
        case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::adas::types::GradientMetaData>());
            break;
        case ::nds::adas::properties::PropertyType::CORE:
            // empty
            break;
        default:
            break;
        }
    }

    return result;
}

void PropertyValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        ::zserio::write(out, m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
        break;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        m_objectChoice.get<::nds::adas::types::ClothoidMetaData>().write(out);
        break;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        m_objectChoice.get<::nds::adas::types::GradientMetaData>().write(out);
        break;
    case ::nds::adas::properties::PropertyType::CORE:
        // empty
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

void PropertyValue::write(PropertyValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        ::zserio::write(context.getAdasAccuracy(), out, m_objectChoice.get<::nds::adas::types::AdasAccuracy>());
        break;
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        m_objectChoice.get<::nds::adas::types::ClothoidMetaData>().write(context.getClothoidMetaData(), out);
        break;
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        m_objectChoice.get<::nds::adas::types::GradientMetaData>().write(context.getGradientMetaData(), out);
        break;
    case ::nds::adas::properties::PropertyType::CORE:
        // empty
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::adas::types::AdasAccuracy>(in), allocator);
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        return ::zserio::AnyHolder<>(::nds::adas::types::ClothoidMetaData(in, allocator), allocator);
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        return ::zserio::AnyHolder<>(::nds::adas::types::GradientMetaData(in, allocator), allocator);
    case ::nds::adas::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::readObject(PropertyValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::adas::types::AdasAccuracy>(context.getAdasAccuracy(), in), allocator);
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        return ::zserio::AnyHolder<>(::nds::adas::types::ClothoidMetaData(context.getClothoidMetaData(), in, allocator), allocator);
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        return ::zserio::AnyHolder<>(::nds::adas::types::GradientMetaData(context.getGradientMetaData(), in, allocator), allocator);
    case ::nds::adas::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

::zserio::AnyHolder<> PropertyValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::adas::properties::PropertyType::ADAS_ACCURACY:
        return ::zserio::allocatorPropagatingCopy<::nds::adas::types::AdasAccuracy>(m_objectChoice, allocator);
    case ::nds::adas::properties::PropertyType::CLOTHOID_META_DATA:
        return ::zserio::allocatorPropagatingCopy<::nds::adas::types::ClothoidMetaData>(m_objectChoice, allocator);
    case ::nds::adas::properties::PropertyType::GRADIENT_META_DATA:
        return ::zserio::allocatorPropagatingCopy<::nds::adas::types::GradientMetaData>(m_objectChoice, allocator);
    case ::nds::adas::properties::PropertyType::CORE:
        return ::zserio::AnyHolder<>(allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice PropertyValue!");
    }
}

} // namespace properties
} // namespace adas
} // namespace nds
