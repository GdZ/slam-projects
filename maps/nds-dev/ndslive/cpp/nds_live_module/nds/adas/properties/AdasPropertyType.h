/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_PROPERTIES_ADAS_PROPERTY_TYPE_H
#define NDS_ADAS_PROPERTIES_ADAS_PROPERTY_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/properties/PropertyType.h>
#include <nds/core/properties/CorePropertyType.h>

namespace nds
{
namespace adas
{
namespace properties
{

class AdasPropertyType
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getCoreType()
        {
            return m_coreType_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_coreType_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AdasPropertyType() noexcept :
            AdasPropertyType(allocator_type())
    {}

    explicit AdasPropertyType(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_coreType = ::nds::core::properties::CorePropertyType>
    AdasPropertyType(
            ::nds::adas::properties::PropertyType type_,
            ZSERIO_T_coreType&& coreType_,
            const allocator_type& allocator = allocator_type()) :
            AdasPropertyType(allocator)
    {
        m_type_ = type_;
        m_coreType_ = ::std::forward<ZSERIO_T_coreType>(coreType_);
    }

    explicit AdasPropertyType(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AdasPropertyType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AdasPropertyType() = default;

    AdasPropertyType(const AdasPropertyType&) = default;
    AdasPropertyType& operator=(const AdasPropertyType&) = default;

    AdasPropertyType(AdasPropertyType&&) = default;
    AdasPropertyType& operator=(AdasPropertyType&&) = default;

    AdasPropertyType(::zserio::PropagateAllocatorT,
            const AdasPropertyType& other, const allocator_type& allocator);

    ::nds::adas::properties::PropertyType getType() const;
    void setType(::nds::adas::properties::PropertyType type_);

    ::nds::core::properties::CorePropertyType getCoreType() const;
    void setCoreType(::nds::core::properties::CorePropertyType coreType_);
    bool isCoreTypeUsed() const;
    bool isCoreTypeSet() const;
    void resetCoreType();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AdasPropertyType& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::adas::properties::PropertyType readType(::zserio::BitStreamReader& in);
    ::nds::adas::properties::PropertyType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> readCoreType(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> readCoreType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::adas::properties::PropertyType m_type_;
    ::zserio::InplaceOptionalHolder<::nds::core::properties::CorePropertyType> m_coreType_;
};

} // namespace properties
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_PROPERTIES_ADAS_PROPERTY_TYPE_H
