/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_PROPERTIES_PROPERTY_VALUE_H
#define NDS_ADAS_PROPERTIES_PROPERTY_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/adas/properties/PropertyType.h>
#include <nds/adas/types/AdasAccuracy.h>
#include <nds/adas/types/ClothoidMetaData.h>
#include <nds/adas/types/GradientMetaData.h>

namespace nds
{
namespace adas
{
namespace properties
{

class PropertyValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_adasAccuracy = 0,
        CHOICE_clothoidMetaData = 1,
        CHOICE_gradientMetaData = 2,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getAdasAccuracy()
        {
            return m_adasAccuracy_;
        }

        ::nds::adas::types::ClothoidMetaData::ZserioPackingContext& getClothoidMetaData()
        {
            return m_clothoidMetaData_;
        }

        ::nds::adas::types::GradientMetaData::ZserioPackingContext& getGradientMetaData()
        {
            return m_gradientMetaData_;
        }

    private:
        ::zserio::DeltaContext m_adasAccuracy_;
        ::nds::adas::types::ClothoidMetaData::ZserioPackingContext m_clothoidMetaData_;
        ::nds::adas::types::GradientMetaData::ZserioPackingContext m_gradientMetaData_;
    };

    PropertyValue() noexcept :
            PropertyValue(allocator_type())
    {}

    explicit PropertyValue(const allocator_type& allocator) noexcept;

    explicit PropertyValue(::zserio::BitStreamReader& in,
            ::nds::adas::properties::PropertyType type_, const allocator_type& allocator = allocator_type());
    explicit PropertyValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::adas::properties::PropertyType type_, const allocator_type& allocator = allocator_type());

    ~PropertyValue() = default;

    PropertyValue(const PropertyValue& other);
    PropertyValue& operator=(const PropertyValue& other);

    PropertyValue(PropertyValue&& other);
    PropertyValue& operator=(PropertyValue&& other);

    PropertyValue(::zserio::PropagateAllocatorT,
            const PropertyValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::adas::properties::PropertyType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::adas::properties::PropertyType getType() const;

    ::nds::adas::types::AdasAccuracy getAdasAccuracy() const;
    void setAdasAccuracy(::nds::adas::types::AdasAccuracy adasAccuracy_);

    const ::nds::adas::types::ClothoidMetaData& getClothoidMetaData() const;
    ::nds::adas::types::ClothoidMetaData& getClothoidMetaData();
    void setClothoidMetaData(const ::nds::adas::types::ClothoidMetaData& clothoidMetaData_);
    void setClothoidMetaData(::nds::adas::types::ClothoidMetaData&& clothoidMetaData_);

    const ::nds::adas::types::GradientMetaData& getGradientMetaData() const;
    ::nds::adas::types::GradientMetaData& getGradientMetaData();
    void setGradientMetaData(const ::nds::adas::types::GradientMetaData& gradientMetaData_);
    void setGradientMetaData(::nds::adas::types::GradientMetaData&& gradientMetaData_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PropertyValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::adas::properties::PropertyType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace properties
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_PROPERTIES_PROPERTY_VALUE_H
