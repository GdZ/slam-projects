/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_ATTRIBUTES_ADAS_ROAD_ATTRIBUTE_VALUE_H
#define NDS_ADAS_ATTRIBUTES_ADAS_ROAD_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/adas/attributes/AdasRoadAttributeType.h>
#include <nds/adas/types/Clothoid.h>
#include <nds/adas/types/ComfortableSpeedPath.h>
#include <nds/adas/types/ComfortableSpeedPointList.h>
#include <nds/adas/types/CurvaturePath.h>
#include <nds/adas/types/CurvaturePointList.h>
#include <nds/adas/types/ElevationArray.h>
#include <nds/adas/types/EnhancedGeometry.h>
#include <nds/adas/types/Gradient.h>
#include <nds/adas/types/SlopeArray.h>

namespace nds
{
namespace adas
{
namespace attributes
{

class AdasRoadAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_slopeArray = 0,
        CHOICE_clothoid = 1,
        CHOICE_gradient = 2,
        CHOICE_enhancedGeometry = 3,
        CHOICE_curvaturePointList = 4,
        CHOICE_curvaturePath = 5,
        CHOICE_comfortableSpeedCurve = 6,
        CHOICE_comfortableSpeedPath = 7,
        CHOICE_elevationArray = 8,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::adas::types::SlopeArray::ZserioPackingContext& getSlopeArray()
        {
            return m_slopeArray_;
        }

        ::nds::adas::types::Clothoid::ZserioPackingContext& getClothoid()
        {
            return m_clothoid_;
        }

        ::nds::adas::types::Gradient::ZserioPackingContext& getGradient()
        {
            return m_gradient_;
        }

        ::nds::adas::types::CurvaturePointList::ZserioPackingContext& getCurvaturePointList()
        {
            return m_curvaturePointList_;
        }

        ::nds::adas::types::CurvaturePath::ZserioPackingContext& getCurvaturePath()
        {
            return m_curvaturePath_;
        }

        ::nds::adas::types::ComfortableSpeedPointList::ZserioPackingContext& getComfortableSpeedCurve()
        {
            return m_comfortableSpeedCurve_;
        }

        ::nds::adas::types::ComfortableSpeedPath::ZserioPackingContext& getComfortableSpeedPath()
        {
            return m_comfortableSpeedPath_;
        }

        ::nds::adas::types::ElevationArray::ZserioPackingContext& getElevationArray()
        {
            return m_elevationArray_;
        }

    private:
        ::nds::adas::types::SlopeArray::ZserioPackingContext m_slopeArray_;
        ::nds::adas::types::Clothoid::ZserioPackingContext m_clothoid_;
        ::nds::adas::types::Gradient::ZserioPackingContext m_gradient_;
        ::nds::adas::types::CurvaturePointList::ZserioPackingContext m_curvaturePointList_;
        ::nds::adas::types::CurvaturePath::ZserioPackingContext m_curvaturePath_;
        ::nds::adas::types::ComfortableSpeedPointList::ZserioPackingContext m_comfortableSpeedCurve_;
        ::nds::adas::types::ComfortableSpeedPath::ZserioPackingContext m_comfortableSpeedPath_;
        ::nds::adas::types::ElevationArray::ZserioPackingContext m_elevationArray_;
    };

    AdasRoadAttributeValue() noexcept :
            AdasRoadAttributeValue(allocator_type())
    {}

    explicit AdasRoadAttributeValue(const allocator_type& allocator) noexcept;

    explicit AdasRoadAttributeValue(::zserio::BitStreamReader& in,
            ::nds::adas::attributes::AdasRoadAttributeType type_, const allocator_type& allocator = allocator_type());
    explicit AdasRoadAttributeValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::adas::attributes::AdasRoadAttributeType type_, const allocator_type& allocator = allocator_type());

    ~AdasRoadAttributeValue() = default;

    AdasRoadAttributeValue(const AdasRoadAttributeValue& other);
    AdasRoadAttributeValue& operator=(const AdasRoadAttributeValue& other);

    AdasRoadAttributeValue(AdasRoadAttributeValue&& other);
    AdasRoadAttributeValue& operator=(AdasRoadAttributeValue&& other);

    AdasRoadAttributeValue(::zserio::PropagateAllocatorT,
            const AdasRoadAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::adas::attributes::AdasRoadAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::adas::attributes::AdasRoadAttributeType getType() const;

    const ::nds::adas::types::SlopeArray& getSlopeArray() const;
    ::nds::adas::types::SlopeArray& getSlopeArray();
    void setSlopeArray(const ::nds::adas::types::SlopeArray& slopeArray_);
    void setSlopeArray(::nds::adas::types::SlopeArray&& slopeArray_);

    const ::nds::adas::types::Clothoid& getClothoid() const;
    ::nds::adas::types::Clothoid& getClothoid();
    void setClothoid(const ::nds::adas::types::Clothoid& clothoid_);
    void setClothoid(::nds::adas::types::Clothoid&& clothoid_);

    const ::nds::adas::types::Gradient& getGradient() const;
    ::nds::adas::types::Gradient& getGradient();
    void setGradient(const ::nds::adas::types::Gradient& gradient_);
    void setGradient(::nds::adas::types::Gradient&& gradient_);

    const ::nds::adas::types::EnhancedGeometry& getEnhancedGeometry() const;
    ::nds::adas::types::EnhancedGeometry& getEnhancedGeometry();
    void setEnhancedGeometry(const ::nds::adas::types::EnhancedGeometry& enhancedGeometry_);
    void setEnhancedGeometry(::nds::adas::types::EnhancedGeometry&& enhancedGeometry_);

    const ::nds::adas::types::CurvaturePointList& getCurvaturePointList() const;
    ::nds::adas::types::CurvaturePointList& getCurvaturePointList();
    void setCurvaturePointList(const ::nds::adas::types::CurvaturePointList& curvaturePointList_);
    void setCurvaturePointList(::nds::adas::types::CurvaturePointList&& curvaturePointList_);

    const ::nds::adas::types::CurvaturePath& getCurvaturePath() const;
    ::nds::adas::types::CurvaturePath& getCurvaturePath();
    void setCurvaturePath(const ::nds::adas::types::CurvaturePath& curvaturePath_);
    void setCurvaturePath(::nds::adas::types::CurvaturePath&& curvaturePath_);

    const ::nds::adas::types::ComfortableSpeedPointList& getComfortableSpeedCurve() const;
    ::nds::adas::types::ComfortableSpeedPointList& getComfortableSpeedCurve();
    void setComfortableSpeedCurve(const ::nds::adas::types::ComfortableSpeedPointList& comfortableSpeedCurve_);
    void setComfortableSpeedCurve(::nds::adas::types::ComfortableSpeedPointList&& comfortableSpeedCurve_);

    const ::nds::adas::types::ComfortableSpeedPath& getComfortableSpeedPath() const;
    ::nds::adas::types::ComfortableSpeedPath& getComfortableSpeedPath();
    void setComfortableSpeedPath(const ::nds::adas::types::ComfortableSpeedPath& comfortableSpeedPath_);
    void setComfortableSpeedPath(::nds::adas::types::ComfortableSpeedPath&& comfortableSpeedPath_);

    const ::nds::adas::types::ElevationArray& getElevationArray() const;
    ::nds::adas::types::ElevationArray& getElevationArray();
    void setElevationArray(const ::nds::adas::types::ElevationArray& elevationArray_);
    void setElevationArray(::nds::adas::types::ElevationArray&& elevationArray_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AdasRoadAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::adas::attributes::AdasRoadAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_ATTRIBUTES_ADAS_ROAD_ATTRIBUTE_VALUE_H
