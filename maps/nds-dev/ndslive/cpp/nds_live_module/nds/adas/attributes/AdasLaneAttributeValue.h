/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_ATTRIBUTES_ADAS_LANE_ATTRIBUTE_VALUE_H
#define NDS_ADAS_ATTRIBUTES_ADAS_LANE_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/adas/attributes/AdasLaneAttributeType.h>
#include <nds/adas/types/ComfortableSpeedPointList.h>
#include <nds/adas/types/CurvaturePointList.h>
#include <nds/adas/types/SlopeArray.h>

namespace nds
{
namespace adas
{
namespace attributes
{

class AdasLaneAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_slopeArray = 0,
        CHOICE_curvaturePointList = 1,
        CHOICE_comfortableSpeedCurve = 2,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::adas::types::SlopeArray::ZserioPackingContext& getSlopeArray()
        {
            return m_slopeArray_;
        }

        ::nds::adas::types::CurvaturePointList::ZserioPackingContext& getCurvaturePointList()
        {
            return m_curvaturePointList_;
        }

        ::nds::adas::types::ComfortableSpeedPointList::ZserioPackingContext& getComfortableSpeedCurve()
        {
            return m_comfortableSpeedCurve_;
        }

    private:
        ::nds::adas::types::SlopeArray::ZserioPackingContext m_slopeArray_;
        ::nds::adas::types::CurvaturePointList::ZserioPackingContext m_curvaturePointList_;
        ::nds::adas::types::ComfortableSpeedPointList::ZserioPackingContext m_comfortableSpeedCurve_;
    };

    AdasLaneAttributeValue() noexcept :
            AdasLaneAttributeValue(allocator_type())
    {}

    explicit AdasLaneAttributeValue(const allocator_type& allocator) noexcept;

    explicit AdasLaneAttributeValue(::zserio::BitStreamReader& in,
            ::nds::adas::attributes::AdasLaneAttributeType type_, const allocator_type& allocator = allocator_type());
    explicit AdasLaneAttributeValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::adas::attributes::AdasLaneAttributeType type_, const allocator_type& allocator = allocator_type());

    ~AdasLaneAttributeValue() = default;

    AdasLaneAttributeValue(const AdasLaneAttributeValue& other);
    AdasLaneAttributeValue& operator=(const AdasLaneAttributeValue& other);

    AdasLaneAttributeValue(AdasLaneAttributeValue&& other);
    AdasLaneAttributeValue& operator=(AdasLaneAttributeValue&& other);

    AdasLaneAttributeValue(::zserio::PropagateAllocatorT,
            const AdasLaneAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::adas::attributes::AdasLaneAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::adas::attributes::AdasLaneAttributeType getType() const;

    const ::nds::adas::types::SlopeArray& getSlopeArray() const;
    ::nds::adas::types::SlopeArray& getSlopeArray();
    void setSlopeArray(const ::nds::adas::types::SlopeArray& slopeArray_);
    void setSlopeArray(::nds::adas::types::SlopeArray&& slopeArray_);

    const ::nds::adas::types::CurvaturePointList& getCurvaturePointList() const;
    ::nds::adas::types::CurvaturePointList& getCurvaturePointList();
    void setCurvaturePointList(const ::nds::adas::types::CurvaturePointList& curvaturePointList_);
    void setCurvaturePointList(::nds::adas::types::CurvaturePointList&& curvaturePointList_);

    const ::nds::adas::types::ComfortableSpeedPointList& getComfortableSpeedCurve() const;
    ::nds::adas::types::ComfortableSpeedPointList& getComfortableSpeedCurve();
    void setComfortableSpeedCurve(const ::nds::adas::types::ComfortableSpeedPointList& comfortableSpeedCurve_);
    void setComfortableSpeedCurve(::nds::adas::types::ComfortableSpeedPointList&& comfortableSpeedCurve_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AdasLaneAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::adas::attributes::AdasLaneAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_ATTRIBUTES_ADAS_LANE_ATTRIBUTE_VALUE_H
