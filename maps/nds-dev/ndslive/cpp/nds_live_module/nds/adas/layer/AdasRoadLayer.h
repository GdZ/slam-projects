/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_LAYER_ADAS_ROAD_LAYER_H
#define NDS_ADAS_LAYER_ADAS_ROAD_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/instantiations/AdasRoadAttributeMapList.h>
#include <nds/adas/instantiations/AdasRoadAttributeSetList.h>
#include <nds/adas/instantiations/AdasTransitionAttributeMapList.h>
#include <nds/adas/instantiations/AdasTransitionAttributeSetList.h>
#include <nds/adas/metadata/AdasRoadLayerContent.h>
#include <nds/adas/types/AdasGeometryList.h>
#include <nds/core/geometry/CoordShift.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace adas
{
namespace layer
{

class AdasRoadLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::nds::adas::types::AdasGeometryList::ZserioPackingContext& getAdasGeometryList()
        {
            return m_adasGeometryList_;
        }

        ::nds::adas::instantiations::AdasRoadAttributeMapList::ZserioPackingContext& getAdasRoadAttributeMaps()
        {
            return m_adasRoadAttributeMaps_;
        }

        ::nds::adas::instantiations::AdasRoadAttributeSetList::ZserioPackingContext& getAdasRoadAttributeSets()
        {
            return m_adasRoadAttributeSets_;
        }

        ::nds::adas::instantiations::AdasTransitionAttributeMapList::ZserioPackingContext& getAdasTransitionAttributeMaps()
        {
            return m_adasTransitionAttributeMaps_;
        }

        ::nds::adas::instantiations::AdasTransitionAttributeSetList::ZserioPackingContext& getAdasTransitionAttributeSets()
        {
            return m_adasTransitionAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::zserio::DeltaContext m_shift_;
        ::nds::adas::types::AdasGeometryList::ZserioPackingContext m_adasGeometryList_;
        ::nds::adas::instantiations::AdasRoadAttributeMapList::ZserioPackingContext m_adasRoadAttributeMaps_;
        ::nds::adas::instantiations::AdasRoadAttributeSetList::ZserioPackingContext m_adasRoadAttributeSets_;
        ::nds::adas::instantiations::AdasTransitionAttributeMapList::ZserioPackingContext m_adasTransitionAttributeMaps_;
        ::nds::adas::instantiations::AdasTransitionAttributeSetList::ZserioPackingContext m_adasTransitionAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AdasRoadLayer() noexcept :
            AdasRoadLayer(allocator_type())
    {}

    explicit AdasRoadLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_adasGeometryList = ::nds::adas::types::AdasGeometryList,
            typename ZSERIO_T_adasRoadAttributeMaps = ::nds::adas::instantiations::AdasRoadAttributeMapList,
            typename ZSERIO_T_adasRoadAttributeSets = ::nds::adas::instantiations::AdasRoadAttributeSetList,
            typename ZSERIO_T_adasTransitionAttributeMaps = ::nds::adas::instantiations::AdasTransitionAttributeMapList,
            typename ZSERIO_T_adasTransitionAttributeSets = ::nds::adas::instantiations::AdasTransitionAttributeSetList>
    AdasRoadLayer(
            ::nds::adas::metadata::AdasRoadLayerContent content_,
            ::nds::core::geometry::CoordShift shift_,
            ZSERIO_T_adasGeometryList&& adasGeometryList_,
            ZSERIO_T_adasRoadAttributeMaps&& adasRoadAttributeMaps_,
            ZSERIO_T_adasRoadAttributeSets&& adasRoadAttributeSets_,
            ZSERIO_T_adasTransitionAttributeMaps&& adasTransitionAttributeMaps_,
            ZSERIO_T_adasTransitionAttributeSets&& adasTransitionAttributeSets_,
            const allocator_type& allocator = allocator_type()) :
            AdasRoadLayer(allocator)
    {
        m_content_ = content_;
        m_shift_ = shift_;
        m_adasGeometryList_ = ::std::forward<ZSERIO_T_adasGeometryList>(adasGeometryList_);
        m_adasRoadAttributeMaps_ = ::std::forward<ZSERIO_T_adasRoadAttributeMaps>(adasRoadAttributeMaps_);
        m_adasRoadAttributeSets_ = ::std::forward<ZSERIO_T_adasRoadAttributeSets>(adasRoadAttributeSets_);
        m_adasTransitionAttributeMaps_ = ::std::forward<ZSERIO_T_adasTransitionAttributeMaps>(adasTransitionAttributeMaps_);
        m_adasTransitionAttributeSets_ = ::std::forward<ZSERIO_T_adasTransitionAttributeSets>(adasTransitionAttributeSets_);
    }

    explicit AdasRoadLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AdasRoadLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AdasRoadLayer() = default;

    AdasRoadLayer(const AdasRoadLayer& other);
    AdasRoadLayer& operator=(const AdasRoadLayer& other);

    AdasRoadLayer(AdasRoadLayer&& other);
    AdasRoadLayer& operator=(AdasRoadLayer&& other);

    AdasRoadLayer(::zserio::PropagateAllocatorT,
            const AdasRoadLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::adas::metadata::AdasRoadLayerContent getContent() const;
    void setContent(::nds::adas::metadata::AdasRoadLayerContent content_);

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    const ::nds::adas::types::AdasGeometryList& getAdasGeometryList() const;
    ::nds::adas::types::AdasGeometryList& getAdasGeometryList();
    void setAdasGeometryList(const ::nds::adas::types::AdasGeometryList& adasGeometryList_);
    void setAdasGeometryList(::nds::adas::types::AdasGeometryList&& adasGeometryList_);

    const ::nds::adas::instantiations::AdasRoadAttributeMapList& getAdasRoadAttributeMaps() const;
    ::nds::adas::instantiations::AdasRoadAttributeMapList& getAdasRoadAttributeMaps();
    void setAdasRoadAttributeMaps(const ::nds::adas::instantiations::AdasRoadAttributeMapList& adasRoadAttributeMaps_);
    void setAdasRoadAttributeMaps(::nds::adas::instantiations::AdasRoadAttributeMapList&& adasRoadAttributeMaps_);
    bool isAdasRoadAttributeMapsUsed() const;
    bool isAdasRoadAttributeMapsSet() const;
    void resetAdasRoadAttributeMaps();

    const ::nds::adas::instantiations::AdasRoadAttributeSetList& getAdasRoadAttributeSets() const;
    ::nds::adas::instantiations::AdasRoadAttributeSetList& getAdasRoadAttributeSets();
    void setAdasRoadAttributeSets(const ::nds::adas::instantiations::AdasRoadAttributeSetList& adasRoadAttributeSets_);
    void setAdasRoadAttributeSets(::nds::adas::instantiations::AdasRoadAttributeSetList&& adasRoadAttributeSets_);
    bool isAdasRoadAttributeSetsUsed() const;
    bool isAdasRoadAttributeSetsSet() const;
    void resetAdasRoadAttributeSets();

    const ::nds::adas::instantiations::AdasTransitionAttributeMapList& getAdasTransitionAttributeMaps() const;
    ::nds::adas::instantiations::AdasTransitionAttributeMapList& getAdasTransitionAttributeMaps();
    void setAdasTransitionAttributeMaps(const ::nds::adas::instantiations::AdasTransitionAttributeMapList& adasTransitionAttributeMaps_);
    void setAdasTransitionAttributeMaps(::nds::adas::instantiations::AdasTransitionAttributeMapList&& adasTransitionAttributeMaps_);
    bool isAdasTransitionAttributeMapsUsed() const;
    bool isAdasTransitionAttributeMapsSet() const;
    void resetAdasTransitionAttributeMaps();

    const ::nds::adas::instantiations::AdasTransitionAttributeSetList& getAdasTransitionAttributeSets() const;
    ::nds::adas::instantiations::AdasTransitionAttributeSetList& getAdasTransitionAttributeSets();
    void setAdasTransitionAttributeSets(const ::nds::adas::instantiations::AdasTransitionAttributeSetList& adasTransitionAttributeSets_);
    void setAdasTransitionAttributeSets(::nds::adas::instantiations::AdasTransitionAttributeSetList&& adasTransitionAttributeSets_);
    bool isAdasTransitionAttributeSetsUsed() const;
    bool isAdasTransitionAttributeSetsSet() const;
    void resetAdasTransitionAttributeSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AdasRoadLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::adas::metadata::AdasRoadLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::adas::metadata::AdasRoadLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::adas::types::AdasGeometryList readAdasGeometryList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::adas::types::AdasGeometryList readAdasGeometryList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList> readAdasRoadAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList> readAdasRoadAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList> readAdasRoadAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList> readAdasRoadAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList> readAdasTransitionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList> readAdasTransitionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList> readAdasTransitionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList> readAdasTransitionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::adas::metadata::AdasRoadLayerContent m_content_;
    ::nds::core::geometry::CoordShift m_shift_;
    ::nds::adas::types::AdasGeometryList m_adasGeometryList_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList> m_adasRoadAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList> m_adasRoadAttributeSets_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList> m_adasTransitionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList> m_adasTransitionAttributeSets_;
};

} // namespace layer
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_LAYER_ADAS_ROAD_LAYER_H
