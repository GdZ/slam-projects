/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_LAYER_ADAS_ROAD_LOCATION_LAYER_H
#define NDS_ADAS_LAYER_ADAS_ROAD_LOCATION_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/instantiations/AdasRoadLocationAttributeMapList.h>
#include <nds/adas/instantiations/AdasRoadLocationAttributeSetList.h>
#include <nds/adas/instantiations/AdasRoadLocationTransitionAttributeMapList.h>
#include <nds/adas/instantiations/AdasRoadLocationTransitionAttributeSetList.h>
#include <nds/adas/metadata/AdasRoadLocationLayerContent.h>
#include <nds/adas/types/AdasGeometryList.h>
#include <nds/core/geometry/CoordShift.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace adas
{
namespace layer
{

class AdasRoadLocationLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::nds::adas::types::AdasGeometryList::ZserioPackingContext& getAdasGeometryList()
        {
            return m_adasGeometryList_;
        }

        ::nds::adas::instantiations::AdasRoadLocationAttributeMapList::ZserioPackingContext& getAdasRoadLocationAttributeMaps()
        {
            return m_adasRoadLocationAttributeMaps_;
        }

        ::nds::adas::instantiations::AdasRoadLocationAttributeSetList::ZserioPackingContext& getAdasRoadLocationAttributeSets()
        {
            return m_adasRoadLocationAttributeSets_;
        }

        ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList::ZserioPackingContext& getAdasRoadLocationTransitionAttributeMaps()
        {
            return m_adasRoadLocationTransitionAttributeMaps_;
        }

        ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList::ZserioPackingContext& getAdasRoadLocationTransitionAttributeSets()
        {
            return m_adasRoadLocationTransitionAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::zserio::DeltaContext m_shift_;
        ::nds::adas::types::AdasGeometryList::ZserioPackingContext m_adasGeometryList_;
        ::nds::adas::instantiations::AdasRoadLocationAttributeMapList::ZserioPackingContext m_adasRoadLocationAttributeMaps_;
        ::nds::adas::instantiations::AdasRoadLocationAttributeSetList::ZserioPackingContext m_adasRoadLocationAttributeSets_;
        ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList::ZserioPackingContext m_adasRoadLocationTransitionAttributeMaps_;
        ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList::ZserioPackingContext m_adasRoadLocationTransitionAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AdasRoadLocationLayer() noexcept :
            AdasRoadLocationLayer(allocator_type())
    {}

    explicit AdasRoadLocationLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_adasGeometryList = ::nds::adas::types::AdasGeometryList,
            typename ZSERIO_T_adasRoadLocationAttributeMaps = ::nds::adas::instantiations::AdasRoadLocationAttributeMapList,
            typename ZSERIO_T_adasRoadLocationAttributeSets = ::nds::adas::instantiations::AdasRoadLocationAttributeSetList,
            typename ZSERIO_T_adasRoadLocationTransitionAttributeMaps = ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList,
            typename ZSERIO_T_adasRoadLocationTransitionAttributeSets = ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList>
    AdasRoadLocationLayer(
            ::nds::adas::metadata::AdasRoadLocationLayerContent content_,
            ::nds::core::geometry::CoordShift shift_,
            ZSERIO_T_adasGeometryList&& adasGeometryList_,
            ZSERIO_T_adasRoadLocationAttributeMaps&& adasRoadLocationAttributeMaps_,
            ZSERIO_T_adasRoadLocationAttributeSets&& adasRoadLocationAttributeSets_,
            ZSERIO_T_adasRoadLocationTransitionAttributeMaps&& adasRoadLocationTransitionAttributeMaps_,
            ZSERIO_T_adasRoadLocationTransitionAttributeSets&& adasRoadLocationTransitionAttributeSets_,
            const allocator_type& allocator = allocator_type()) :
            AdasRoadLocationLayer(allocator)
    {
        m_content_ = content_;
        m_shift_ = shift_;
        m_adasGeometryList_ = ::std::forward<ZSERIO_T_adasGeometryList>(adasGeometryList_);
        m_adasRoadLocationAttributeMaps_ = ::std::forward<ZSERIO_T_adasRoadLocationAttributeMaps>(adasRoadLocationAttributeMaps_);
        m_adasRoadLocationAttributeSets_ = ::std::forward<ZSERIO_T_adasRoadLocationAttributeSets>(adasRoadLocationAttributeSets_);
        m_adasRoadLocationTransitionAttributeMaps_ = ::std::forward<ZSERIO_T_adasRoadLocationTransitionAttributeMaps>(adasRoadLocationTransitionAttributeMaps_);
        m_adasRoadLocationTransitionAttributeSets_ = ::std::forward<ZSERIO_T_adasRoadLocationTransitionAttributeSets>(adasRoadLocationTransitionAttributeSets_);
    }

    explicit AdasRoadLocationLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AdasRoadLocationLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AdasRoadLocationLayer() = default;

    AdasRoadLocationLayer(const AdasRoadLocationLayer& other);
    AdasRoadLocationLayer& operator=(const AdasRoadLocationLayer& other);

    AdasRoadLocationLayer(AdasRoadLocationLayer&& other);
    AdasRoadLocationLayer& operator=(AdasRoadLocationLayer&& other);

    AdasRoadLocationLayer(::zserio::PropagateAllocatorT,
            const AdasRoadLocationLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::adas::metadata::AdasRoadLocationLayerContent getContent() const;
    void setContent(::nds::adas::metadata::AdasRoadLocationLayerContent content_);

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    const ::nds::adas::types::AdasGeometryList& getAdasGeometryList() const;
    ::nds::adas::types::AdasGeometryList& getAdasGeometryList();
    void setAdasGeometryList(const ::nds::adas::types::AdasGeometryList& adasGeometryList_);
    void setAdasGeometryList(::nds::adas::types::AdasGeometryList&& adasGeometryList_);

    const ::nds::adas::instantiations::AdasRoadLocationAttributeMapList& getAdasRoadLocationAttributeMaps() const;
    ::nds::adas::instantiations::AdasRoadLocationAttributeMapList& getAdasRoadLocationAttributeMaps();
    void setAdasRoadLocationAttributeMaps(const ::nds::adas::instantiations::AdasRoadLocationAttributeMapList& adasRoadLocationAttributeMaps_);
    void setAdasRoadLocationAttributeMaps(::nds::adas::instantiations::AdasRoadLocationAttributeMapList&& adasRoadLocationAttributeMaps_);
    bool isAdasRoadLocationAttributeMapsUsed() const;
    bool isAdasRoadLocationAttributeMapsSet() const;
    void resetAdasRoadLocationAttributeMaps();

    const ::nds::adas::instantiations::AdasRoadLocationAttributeSetList& getAdasRoadLocationAttributeSets() const;
    ::nds::adas::instantiations::AdasRoadLocationAttributeSetList& getAdasRoadLocationAttributeSets();
    void setAdasRoadLocationAttributeSets(const ::nds::adas::instantiations::AdasRoadLocationAttributeSetList& adasRoadLocationAttributeSets_);
    void setAdasRoadLocationAttributeSets(::nds::adas::instantiations::AdasRoadLocationAttributeSetList&& adasRoadLocationAttributeSets_);
    bool isAdasRoadLocationAttributeSetsUsed() const;
    bool isAdasRoadLocationAttributeSetsSet() const;
    void resetAdasRoadLocationAttributeSets();

    const ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList& getAdasRoadLocationTransitionAttributeMaps() const;
    ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList& getAdasRoadLocationTransitionAttributeMaps();
    void setAdasRoadLocationTransitionAttributeMaps(const ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList& adasRoadLocationTransitionAttributeMaps_);
    void setAdasRoadLocationTransitionAttributeMaps(::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList&& adasRoadLocationTransitionAttributeMaps_);
    bool isAdasRoadLocationTransitionAttributeMapsUsed() const;
    bool isAdasRoadLocationTransitionAttributeMapsSet() const;
    void resetAdasRoadLocationTransitionAttributeMaps();

    const ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList& getAdasRoadLocationTransitionAttributeSets() const;
    ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList& getAdasRoadLocationTransitionAttributeSets();
    void setAdasRoadLocationTransitionAttributeSets(const ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList& adasRoadLocationTransitionAttributeSets_);
    void setAdasRoadLocationTransitionAttributeSets(::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList&& adasRoadLocationTransitionAttributeSets_);
    bool isAdasRoadLocationTransitionAttributeSetsUsed() const;
    bool isAdasRoadLocationTransitionAttributeSetsSet() const;
    void resetAdasRoadLocationTransitionAttributeSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AdasRoadLocationLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::adas::metadata::AdasRoadLocationLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::adas::metadata::AdasRoadLocationLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::adas::types::AdasGeometryList readAdasGeometryList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::adas::types::AdasGeometryList readAdasGeometryList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList> readAdasRoadLocationAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList> readAdasRoadLocationAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList> readAdasRoadLocationAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList> readAdasRoadLocationAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList> readAdasRoadLocationTransitionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList> readAdasRoadLocationTransitionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList> readAdasRoadLocationTransitionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList> readAdasRoadLocationTransitionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::adas::metadata::AdasRoadLocationLayerContent m_content_;
    ::nds::core::geometry::CoordShift m_shift_;
    ::nds::adas::types::AdasGeometryList m_adasGeometryList_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList> m_adasRoadLocationAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList> m_adasRoadLocationAttributeSets_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList> m_adasRoadLocationTransitionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList> m_adasRoadLocationTransitionAttributeSets_;
};

} // namespace layer
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_LAYER_ADAS_ROAD_LOCATION_LAYER_H
