/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/layer/AdasRoadLayer.h>
#include <nds/adas/metadata/AdasRoadLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace adas
{
namespace layer
{

AdasRoadLayer::AdasRoadLayer(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::adas::metadata::AdasRoadLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_adasGeometryList_(allocator),
        m_adasRoadAttributeMaps_(::zserio::NullOpt),
        m_adasRoadAttributeSets_(::zserio::NullOpt),
        m_adasTransitionAttributeMaps_(::zserio::NullOpt),
        m_adasTransitionAttributeSets_(::zserio::NullOpt)
{
}

AdasRoadLayer::AdasRoadLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_adasGeometryList_(readAdasGeometryList(in, allocator)),
        m_adasRoadAttributeMaps_(readAdasRoadAttributeMaps(in, allocator)),
        m_adasRoadAttributeSets_(readAdasRoadAttributeSets(in, allocator)),
        m_adasTransitionAttributeMaps_(readAdasTransitionAttributeMaps(in, allocator)),
        m_adasTransitionAttributeSets_(readAdasTransitionAttributeSets(in, allocator))
{
}

AdasRoadLayer::AdasRoadLayer(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_adasGeometryList_(readAdasGeometryList(context, in, allocator)),
        m_adasRoadAttributeMaps_(readAdasRoadAttributeMaps(context, in, allocator)),
        m_adasRoadAttributeSets_(readAdasRoadAttributeSets(context, in, allocator)),
        m_adasTransitionAttributeMaps_(readAdasTransitionAttributeMaps(context, in, allocator)),
        m_adasTransitionAttributeSets_(readAdasTransitionAttributeSets(context, in, allocator))
{
}

AdasRoadLayer::AdasRoadLayer(const AdasRoadLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_adasGeometryList_(other.m_adasGeometryList_),
        m_adasRoadAttributeMaps_(other.m_adasRoadAttributeMaps_),
        m_adasRoadAttributeSets_(other.m_adasRoadAttributeSets_),
        m_adasTransitionAttributeMaps_(other.m_adasTransitionAttributeMaps_),
        m_adasTransitionAttributeSets_(other.m_adasTransitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

AdasRoadLayer& AdasRoadLayer::operator=(const AdasRoadLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_adasGeometryList_ = other.m_adasGeometryList_;
    m_adasRoadAttributeMaps_ = other.m_adasRoadAttributeMaps_;
    m_adasRoadAttributeSets_ = other.m_adasRoadAttributeSets_;
    m_adasTransitionAttributeMaps_ = other.m_adasTransitionAttributeMaps_;
    m_adasTransitionAttributeSets_ = other.m_adasTransitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

AdasRoadLayer::AdasRoadLayer(AdasRoadLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_adasGeometryList_(::std::move(other.m_adasGeometryList_)),
        m_adasRoadAttributeMaps_(::std::move(other.m_adasRoadAttributeMaps_)),
        m_adasRoadAttributeSets_(::std::move(other.m_adasRoadAttributeSets_)),
        m_adasTransitionAttributeMaps_(::std::move(other.m_adasTransitionAttributeMaps_)),
        m_adasTransitionAttributeSets_(::std::move(other.m_adasTransitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

AdasRoadLayer& AdasRoadLayer::operator=(AdasRoadLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_adasGeometryList_ = ::std::move(other.m_adasGeometryList_);
    m_adasRoadAttributeMaps_ = ::std::move(other.m_adasRoadAttributeMaps_);
    m_adasRoadAttributeSets_ = ::std::move(other.m_adasRoadAttributeSets_);
    m_adasTransitionAttributeMaps_ = ::std::move(other.m_adasTransitionAttributeMaps_);
    m_adasTransitionAttributeSets_ = ::std::move(other.m_adasTransitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

AdasRoadLayer::AdasRoadLayer(::zserio::PropagateAllocatorT,
        const AdasRoadLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_adasGeometryList_(::zserio::allocatorPropagatingCopy(other.m_adasGeometryList_, allocator)),
        m_adasRoadAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_adasRoadAttributeMaps_, allocator)),
        m_adasRoadAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_adasRoadAttributeSets_, allocator)),
        m_adasTransitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_adasTransitionAttributeMaps_, allocator)),
        m_adasTransitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_adasTransitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void AdasRoadLayer::initializeChildren()
{
    m_adasGeometryList_.initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
        m_adasRoadAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
        m_adasRoadAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
        m_adasTransitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
        m_adasTransitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::adas::metadata::AdasRoadLayerContent AdasRoadLayer::getContent() const
{
    return m_content_;
}

void AdasRoadLayer::setContent(::nds::adas::metadata::AdasRoadLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift AdasRoadLayer::getShift() const
{
    return m_shift_;
}

void AdasRoadLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::adas::types::AdasGeometryList& AdasRoadLayer::getAdasGeometryList()
{
    return m_adasGeometryList_;
}

const ::nds::adas::types::AdasGeometryList& AdasRoadLayer::getAdasGeometryList() const
{
    return m_adasGeometryList_;
}

void AdasRoadLayer::setAdasGeometryList(const ::nds::adas::types::AdasGeometryList& adasGeometryList_)
{
    m_adasGeometryList_ = adasGeometryList_;
}

void AdasRoadLayer::setAdasGeometryList(::nds::adas::types::AdasGeometryList&& adasGeometryList_)
{
    m_adasGeometryList_ = ::std::move(adasGeometryList_);
}

::nds::adas::instantiations::AdasRoadAttributeMapList& AdasRoadLayer::getAdasRoadAttributeMaps()
{
    return m_adasRoadAttributeMaps_.value();
}

const ::nds::adas::instantiations::AdasRoadAttributeMapList& AdasRoadLayer::getAdasRoadAttributeMaps() const
{
    return m_adasRoadAttributeMaps_.value();
}

void AdasRoadLayer::setAdasRoadAttributeMaps(const ::nds::adas::instantiations::AdasRoadAttributeMapList& adasRoadAttributeMaps_)
{
    m_adasRoadAttributeMaps_ = adasRoadAttributeMaps_;
}

void AdasRoadLayer::setAdasRoadAttributeMaps(::nds::adas::instantiations::AdasRoadAttributeMapList&& adasRoadAttributeMaps_)
{
    m_adasRoadAttributeMaps_ = ::std::move(adasRoadAttributeMaps_);
}

bool AdasRoadLayer::isAdasRoadAttributeMapsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS);
}

bool AdasRoadLayer::isAdasRoadAttributeMapsSet() const
{
    return m_adasRoadAttributeMaps_.hasValue();
}

void AdasRoadLayer::resetAdasRoadAttributeMaps()
{
    m_adasRoadAttributeMaps_.reset();
}

::nds::adas::instantiations::AdasRoadAttributeSetList& AdasRoadLayer::getAdasRoadAttributeSets()
{
    return m_adasRoadAttributeSets_.value();
}

const ::nds::adas::instantiations::AdasRoadAttributeSetList& AdasRoadLayer::getAdasRoadAttributeSets() const
{
    return m_adasRoadAttributeSets_.value();
}

void AdasRoadLayer::setAdasRoadAttributeSets(const ::nds::adas::instantiations::AdasRoadAttributeSetList& adasRoadAttributeSets_)
{
    m_adasRoadAttributeSets_ = adasRoadAttributeSets_;
}

void AdasRoadLayer::setAdasRoadAttributeSets(::nds::adas::instantiations::AdasRoadAttributeSetList&& adasRoadAttributeSets_)
{
    m_adasRoadAttributeSets_ = ::std::move(adasRoadAttributeSets_);
}

bool AdasRoadLayer::isAdasRoadAttributeSetsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS);
}

bool AdasRoadLayer::isAdasRoadAttributeSetsSet() const
{
    return m_adasRoadAttributeSets_.hasValue();
}

void AdasRoadLayer::resetAdasRoadAttributeSets()
{
    m_adasRoadAttributeSets_.reset();
}

::nds::adas::instantiations::AdasTransitionAttributeMapList& AdasRoadLayer::getAdasTransitionAttributeMaps()
{
    return m_adasTransitionAttributeMaps_.value();
}

const ::nds::adas::instantiations::AdasTransitionAttributeMapList& AdasRoadLayer::getAdasTransitionAttributeMaps() const
{
    return m_adasTransitionAttributeMaps_.value();
}

void AdasRoadLayer::setAdasTransitionAttributeMaps(const ::nds::adas::instantiations::AdasTransitionAttributeMapList& adasTransitionAttributeMaps_)
{
    m_adasTransitionAttributeMaps_ = adasTransitionAttributeMaps_;
}

void AdasRoadLayer::setAdasTransitionAttributeMaps(::nds::adas::instantiations::AdasTransitionAttributeMapList&& adasTransitionAttributeMaps_)
{
    m_adasTransitionAttributeMaps_ = ::std::move(adasTransitionAttributeMaps_);
}

bool AdasRoadLayer::isAdasTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS);
}

bool AdasRoadLayer::isAdasTransitionAttributeMapsSet() const
{
    return m_adasTransitionAttributeMaps_.hasValue();
}

void AdasRoadLayer::resetAdasTransitionAttributeMaps()
{
    m_adasTransitionAttributeMaps_.reset();
}

::nds::adas::instantiations::AdasTransitionAttributeSetList& AdasRoadLayer::getAdasTransitionAttributeSets()
{
    return m_adasTransitionAttributeSets_.value();
}

const ::nds::adas::instantiations::AdasTransitionAttributeSetList& AdasRoadLayer::getAdasTransitionAttributeSets() const
{
    return m_adasTransitionAttributeSets_.value();
}

void AdasRoadLayer::setAdasTransitionAttributeSets(const ::nds::adas::instantiations::AdasTransitionAttributeSetList& adasTransitionAttributeSets_)
{
    m_adasTransitionAttributeSets_ = adasTransitionAttributeSets_;
}

void AdasRoadLayer::setAdasTransitionAttributeSets(::nds::adas::instantiations::AdasTransitionAttributeSetList&& adasTransitionAttributeSets_)
{
    m_adasTransitionAttributeSets_ = ::std::move(adasTransitionAttributeSets_);
}

bool AdasRoadLayer::isAdasTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS);
}

bool AdasRoadLayer::isAdasTransitionAttributeSetsSet() const
{
    return m_adasTransitionAttributeSets_.hasValue();
}

void AdasRoadLayer::resetAdasTransitionAttributeSets()
{
    m_adasTransitionAttributeSets_.reset();
}

::nds::system::types::LayerType AdasRoadLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void AdasRoadLayer::initPackingContext(AdasRoadLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    m_adasGeometryList_.initPackingContext(context.getAdasGeometryList());
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        m_adasRoadAttributeMaps_.value().initPackingContext(context.getAdasRoadAttributeMaps());
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        m_adasRoadAttributeSets_.value().initPackingContext(context.getAdasRoadAttributeSets());
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        m_adasTransitionAttributeMaps_.value().initPackingContext(context.getAdasTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        m_adasTransitionAttributeSets_.value().initPackingContext(context.getAdasTransitionAttributeSets());
    }
}

size_t AdasRoadLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    endBitPosition += m_adasGeometryList_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        endBitPosition += m_adasRoadAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        endBitPosition += m_adasRoadAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_adasTransitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_adasTransitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t AdasRoadLayer::bitSizeOf(AdasRoadLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    endBitPosition += m_adasGeometryList_.bitSizeOf(context.getAdasGeometryList(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        endBitPosition += m_adasRoadAttributeMaps_.value().bitSizeOf(context.getAdasRoadAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        endBitPosition += m_adasRoadAttributeSets_.value().bitSizeOf(context.getAdasRoadAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_adasTransitionAttributeMaps_.value().bitSizeOf(context.getAdasTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_adasTransitionAttributeSets_.value().bitSizeOf(context.getAdasTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t AdasRoadLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    endBitPosition = m_adasGeometryList_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        endBitPosition = m_adasRoadAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        endBitPosition = m_adasRoadAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_adasTransitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_adasTransitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t AdasRoadLayer::initializeOffsets(AdasRoadLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    endBitPosition = m_adasGeometryList_.initializeOffsets(context.getAdasGeometryList(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        endBitPosition = m_adasRoadAttributeMaps_.value().initializeOffsets(context.getAdasRoadAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        endBitPosition = m_adasRoadAttributeSets_.value().initializeOffsets(context.getAdasRoadAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_adasTransitionAttributeMaps_.value().initializeOffsets(context.getAdasTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_adasTransitionAttributeSets_.value().initializeOffsets(context.getAdasTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool AdasRoadLayer::operator==(const AdasRoadLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (m_adasGeometryList_ == other.m_adasGeometryList_) &&
                (!isAdasRoadAttributeMapsUsed() ? !other.isAdasRoadAttributeMapsUsed() : (m_adasRoadAttributeMaps_ == other.m_adasRoadAttributeMaps_)) &&
                (!isAdasRoadAttributeSetsUsed() ? !other.isAdasRoadAttributeSetsUsed() : (m_adasRoadAttributeSets_ == other.m_adasRoadAttributeSets_)) &&
                (!isAdasTransitionAttributeMapsUsed() ? !other.isAdasTransitionAttributeMapsUsed() : (m_adasTransitionAttributeMaps_ == other.m_adasTransitionAttributeMaps_)) &&
                (!isAdasTransitionAttributeSetsUsed() ? !other.isAdasTransitionAttributeSetsUsed() : (m_adasTransitionAttributeSets_ == other.m_adasTransitionAttributeSets_));
    }

    return true;
}

uint32_t AdasRoadLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    result = ::zserio::calcHashCode(result, m_adasGeometryList_);
    if (isAdasRoadAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_adasRoadAttributeMaps_);
    if (isAdasRoadAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_adasRoadAttributeSets_);
    if (isAdasTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_adasTransitionAttributeMaps_);
    if (isAdasTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_adasTransitionAttributeSets_);

    return result;
}

void AdasRoadLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    // check parameters
    if (m_adasGeometryList_.getShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field AdasRoadLayer.adasGeometryList: ") <<
                m_adasGeometryList_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
    }
    m_adasGeometryList_.write(out);

    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        // check parameters
        if (m_adasRoadAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLayer.adasRoadAttributeMaps: ") <<
                    m_adasRoadAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        // check parameters
        if (m_adasRoadAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLayer.adasRoadAttributeSets: ") <<
                    m_adasRoadAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_adasTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLayer.adasTransitionAttributeMaps: ") <<
                    m_adasTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasTransitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_adasTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLayer.adasTransitionAttributeSets: ") <<
                    m_adasTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasTransitionAttributeSets_.value().write(out);
    }
}

void AdasRoadLayer::write(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    // check parameters
    if (m_adasGeometryList_.getShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field AdasRoadLayer.adasGeometryList: ") <<
                m_adasGeometryList_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
    }
    m_adasGeometryList_.write(context.getAdasGeometryList(), out);

    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        // check parameters
        if (m_adasRoadAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLayer.adasRoadAttributeMaps: ") <<
                    m_adasRoadAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadAttributeMaps_.value().write(context.getAdasRoadAttributeMaps(), out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        // check parameters
        if (m_adasRoadAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLayer.adasRoadAttributeSets: ") <<
                    m_adasRoadAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadAttributeSets_.value().write(context.getAdasRoadAttributeSets(), out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_adasTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLayer.adasTransitionAttributeMaps: ") <<
                    m_adasTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasTransitionAttributeMaps_.value().write(context.getAdasTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_adasTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLayer.adasTransitionAttributeSets: ") <<
                    m_adasTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasTransitionAttributeSets_.value().write(context.getAdasTransitionAttributeSets(), out);
    }
}

::nds::adas::metadata::AdasRoadLayerContent AdasRoadLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasRoadLayerContent(in);
}

::nds::adas::metadata::AdasRoadLayerContent AdasRoadLayer::readContent(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasRoadLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift AdasRoadLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift AdasRoadLayer::readShift(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::nds::adas::types::AdasGeometryList AdasRoadLayer::readAdasGeometryList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::adas::types::AdasGeometryList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator);
}

::nds::adas::types::AdasGeometryList AdasRoadLayer::readAdasGeometryList(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::adas::types::AdasGeometryList(context.getAdasGeometryList(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList> AdasRoadLayer::readAdasRoadAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList>(::nds::adas::instantiations::AdasRoadAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList> AdasRoadLayer::readAdasRoadAttributeMaps(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList>(::nds::adas::instantiations::AdasRoadAttributeMapList(context.getAdasRoadAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList> AdasRoadLayer::readAdasRoadAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList>(::nds::adas::instantiations::AdasRoadAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList> AdasRoadLayer::readAdasRoadAttributeSets(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList>(::nds::adas::instantiations::AdasRoadAttributeSetList(context.getAdasRoadAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList> AdasRoadLayer::readAdasTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList>(::nds::adas::instantiations::AdasTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList> AdasRoadLayer::readAdasTransitionAttributeMaps(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList>(::nds::adas::instantiations::AdasTransitionAttributeMapList(context.getAdasTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList> AdasRoadLayer::readAdasTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList>(::nds::adas::instantiations::AdasTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList> AdasRoadLayer::readAdasTransitionAttributeSets(AdasRoadLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList>(::nds::adas::instantiations::AdasTransitionAttributeSetList(context.getAdasTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/layer/AdasRoadLocationLayer.h>
#include <nds/adas/metadata/AdasRoadLocationLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace adas
{
namespace layer
{

AdasRoadLocationLayer::AdasRoadLocationLayer(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::adas::metadata::AdasRoadLocationLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_adasGeometryList_(allocator),
        m_adasRoadLocationAttributeMaps_(::zserio::NullOpt),
        m_adasRoadLocationAttributeSets_(::zserio::NullOpt),
        m_adasRoadLocationTransitionAttributeMaps_(::zserio::NullOpt),
        m_adasRoadLocationTransitionAttributeSets_(::zserio::NullOpt)
{
}

AdasRoadLocationLayer::AdasRoadLocationLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_adasGeometryList_(readAdasGeometryList(in, allocator)),
        m_adasRoadLocationAttributeMaps_(readAdasRoadLocationAttributeMaps(in, allocator)),
        m_adasRoadLocationAttributeSets_(readAdasRoadLocationAttributeSets(in, allocator)),
        m_adasRoadLocationTransitionAttributeMaps_(readAdasRoadLocationTransitionAttributeMaps(in, allocator)),
        m_adasRoadLocationTransitionAttributeSets_(readAdasRoadLocationTransitionAttributeSets(in, allocator))
{
}

AdasRoadLocationLayer::AdasRoadLocationLayer(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_adasGeometryList_(readAdasGeometryList(context, in, allocator)),
        m_adasRoadLocationAttributeMaps_(readAdasRoadLocationAttributeMaps(context, in, allocator)),
        m_adasRoadLocationAttributeSets_(readAdasRoadLocationAttributeSets(context, in, allocator)),
        m_adasRoadLocationTransitionAttributeMaps_(readAdasRoadLocationTransitionAttributeMaps(context, in, allocator)),
        m_adasRoadLocationTransitionAttributeSets_(readAdasRoadLocationTransitionAttributeSets(context, in, allocator))
{
}

AdasRoadLocationLayer::AdasRoadLocationLayer(const AdasRoadLocationLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_adasGeometryList_(other.m_adasGeometryList_),
        m_adasRoadLocationAttributeMaps_(other.m_adasRoadLocationAttributeMaps_),
        m_adasRoadLocationAttributeSets_(other.m_adasRoadLocationAttributeSets_),
        m_adasRoadLocationTransitionAttributeMaps_(other.m_adasRoadLocationTransitionAttributeMaps_),
        m_adasRoadLocationTransitionAttributeSets_(other.m_adasRoadLocationTransitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

AdasRoadLocationLayer& AdasRoadLocationLayer::operator=(const AdasRoadLocationLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_adasGeometryList_ = other.m_adasGeometryList_;
    m_adasRoadLocationAttributeMaps_ = other.m_adasRoadLocationAttributeMaps_;
    m_adasRoadLocationAttributeSets_ = other.m_adasRoadLocationAttributeSets_;
    m_adasRoadLocationTransitionAttributeMaps_ = other.m_adasRoadLocationTransitionAttributeMaps_;
    m_adasRoadLocationTransitionAttributeSets_ = other.m_adasRoadLocationTransitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

AdasRoadLocationLayer::AdasRoadLocationLayer(AdasRoadLocationLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_adasGeometryList_(::std::move(other.m_adasGeometryList_)),
        m_adasRoadLocationAttributeMaps_(::std::move(other.m_adasRoadLocationAttributeMaps_)),
        m_adasRoadLocationAttributeSets_(::std::move(other.m_adasRoadLocationAttributeSets_)),
        m_adasRoadLocationTransitionAttributeMaps_(::std::move(other.m_adasRoadLocationTransitionAttributeMaps_)),
        m_adasRoadLocationTransitionAttributeSets_(::std::move(other.m_adasRoadLocationTransitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

AdasRoadLocationLayer& AdasRoadLocationLayer::operator=(AdasRoadLocationLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_adasGeometryList_ = ::std::move(other.m_adasGeometryList_);
    m_adasRoadLocationAttributeMaps_ = ::std::move(other.m_adasRoadLocationAttributeMaps_);
    m_adasRoadLocationAttributeSets_ = ::std::move(other.m_adasRoadLocationAttributeSets_);
    m_adasRoadLocationTransitionAttributeMaps_ = ::std::move(other.m_adasRoadLocationTransitionAttributeMaps_);
    m_adasRoadLocationTransitionAttributeSets_ = ::std::move(other.m_adasRoadLocationTransitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

AdasRoadLocationLayer::AdasRoadLocationLayer(::zserio::PropagateAllocatorT,
        const AdasRoadLocationLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_adasGeometryList_(::zserio::allocatorPropagatingCopy(other.m_adasGeometryList_, allocator)),
        m_adasRoadLocationAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_adasRoadLocationAttributeMaps_, allocator)),
        m_adasRoadLocationAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_adasRoadLocationAttributeSets_, allocator)),
        m_adasRoadLocationTransitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_adasRoadLocationTransitionAttributeMaps_, allocator)),
        m_adasRoadLocationTransitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_adasRoadLocationTransitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void AdasRoadLocationLayer::initializeChildren()
{
    m_adasGeometryList_.initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
        m_adasRoadLocationAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
        m_adasRoadLocationAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
        m_adasRoadLocationTransitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
        m_adasRoadLocationTransitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::adas::metadata::AdasRoadLocationLayerContent AdasRoadLocationLayer::getContent() const
{
    return m_content_;
}

void AdasRoadLocationLayer::setContent(::nds::adas::metadata::AdasRoadLocationLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift AdasRoadLocationLayer::getShift() const
{
    return m_shift_;
}

void AdasRoadLocationLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::adas::types::AdasGeometryList& AdasRoadLocationLayer::getAdasGeometryList()
{
    return m_adasGeometryList_;
}

const ::nds::adas::types::AdasGeometryList& AdasRoadLocationLayer::getAdasGeometryList() const
{
    return m_adasGeometryList_;
}

void AdasRoadLocationLayer::setAdasGeometryList(const ::nds::adas::types::AdasGeometryList& adasGeometryList_)
{
    m_adasGeometryList_ = adasGeometryList_;
}

void AdasRoadLocationLayer::setAdasGeometryList(::nds::adas::types::AdasGeometryList&& adasGeometryList_)
{
    m_adasGeometryList_ = ::std::move(adasGeometryList_);
}

::nds::adas::instantiations::AdasRoadLocationAttributeMapList& AdasRoadLocationLayer::getAdasRoadLocationAttributeMaps()
{
    return m_adasRoadLocationAttributeMaps_.value();
}

const ::nds::adas::instantiations::AdasRoadLocationAttributeMapList& AdasRoadLocationLayer::getAdasRoadLocationAttributeMaps() const
{
    return m_adasRoadLocationAttributeMaps_.value();
}

void AdasRoadLocationLayer::setAdasRoadLocationAttributeMaps(const ::nds::adas::instantiations::AdasRoadLocationAttributeMapList& adasRoadLocationAttributeMaps_)
{
    m_adasRoadLocationAttributeMaps_ = adasRoadLocationAttributeMaps_;
}

void AdasRoadLocationLayer::setAdasRoadLocationAttributeMaps(::nds::adas::instantiations::AdasRoadLocationAttributeMapList&& adasRoadLocationAttributeMaps_)
{
    m_adasRoadLocationAttributeMaps_ = ::std::move(adasRoadLocationAttributeMaps_);
}

bool AdasRoadLocationLayer::isAdasRoadLocationAttributeMapsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS);
}

bool AdasRoadLocationLayer::isAdasRoadLocationAttributeMapsSet() const
{
    return m_adasRoadLocationAttributeMaps_.hasValue();
}

void AdasRoadLocationLayer::resetAdasRoadLocationAttributeMaps()
{
    m_adasRoadLocationAttributeMaps_.reset();
}

::nds::adas::instantiations::AdasRoadLocationAttributeSetList& AdasRoadLocationLayer::getAdasRoadLocationAttributeSets()
{
    return m_adasRoadLocationAttributeSets_.value();
}

const ::nds::adas::instantiations::AdasRoadLocationAttributeSetList& AdasRoadLocationLayer::getAdasRoadLocationAttributeSets() const
{
    return m_adasRoadLocationAttributeSets_.value();
}

void AdasRoadLocationLayer::setAdasRoadLocationAttributeSets(const ::nds::adas::instantiations::AdasRoadLocationAttributeSetList& adasRoadLocationAttributeSets_)
{
    m_adasRoadLocationAttributeSets_ = adasRoadLocationAttributeSets_;
}

void AdasRoadLocationLayer::setAdasRoadLocationAttributeSets(::nds::adas::instantiations::AdasRoadLocationAttributeSetList&& adasRoadLocationAttributeSets_)
{
    m_adasRoadLocationAttributeSets_ = ::std::move(adasRoadLocationAttributeSets_);
}

bool AdasRoadLocationLayer::isAdasRoadLocationAttributeSetsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS);
}

bool AdasRoadLocationLayer::isAdasRoadLocationAttributeSetsSet() const
{
    return m_adasRoadLocationAttributeSets_.hasValue();
}

void AdasRoadLocationLayer::resetAdasRoadLocationAttributeSets()
{
    m_adasRoadLocationAttributeSets_.reset();
}

::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList& AdasRoadLocationLayer::getAdasRoadLocationTransitionAttributeMaps()
{
    return m_adasRoadLocationTransitionAttributeMaps_.value();
}

const ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList& AdasRoadLocationLayer::getAdasRoadLocationTransitionAttributeMaps() const
{
    return m_adasRoadLocationTransitionAttributeMaps_.value();
}

void AdasRoadLocationLayer::setAdasRoadLocationTransitionAttributeMaps(const ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList& adasRoadLocationTransitionAttributeMaps_)
{
    m_adasRoadLocationTransitionAttributeMaps_ = adasRoadLocationTransitionAttributeMaps_;
}

void AdasRoadLocationLayer::setAdasRoadLocationTransitionAttributeMaps(::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList&& adasRoadLocationTransitionAttributeMaps_)
{
    m_adasRoadLocationTransitionAttributeMaps_ = ::std::move(adasRoadLocationTransitionAttributeMaps_);
}

bool AdasRoadLocationLayer::isAdasRoadLocationTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS);
}

bool AdasRoadLocationLayer::isAdasRoadLocationTransitionAttributeMapsSet() const
{
    return m_adasRoadLocationTransitionAttributeMaps_.hasValue();
}

void AdasRoadLocationLayer::resetAdasRoadLocationTransitionAttributeMaps()
{
    m_adasRoadLocationTransitionAttributeMaps_.reset();
}

::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList& AdasRoadLocationLayer::getAdasRoadLocationTransitionAttributeSets()
{
    return m_adasRoadLocationTransitionAttributeSets_.value();
}

const ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList& AdasRoadLocationLayer::getAdasRoadLocationTransitionAttributeSets() const
{
    return m_adasRoadLocationTransitionAttributeSets_.value();
}

void AdasRoadLocationLayer::setAdasRoadLocationTransitionAttributeSets(const ::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList& adasRoadLocationTransitionAttributeSets_)
{
    m_adasRoadLocationTransitionAttributeSets_ = adasRoadLocationTransitionAttributeSets_;
}

void AdasRoadLocationLayer::setAdasRoadLocationTransitionAttributeSets(::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList&& adasRoadLocationTransitionAttributeSets_)
{
    m_adasRoadLocationTransitionAttributeSets_ = ::std::move(adasRoadLocationTransitionAttributeSets_);
}

bool AdasRoadLocationLayer::isAdasRoadLocationTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS);
}

bool AdasRoadLocationLayer::isAdasRoadLocationTransitionAttributeSetsSet() const
{
    return m_adasRoadLocationTransitionAttributeSets_.hasValue();
}

void AdasRoadLocationLayer::resetAdasRoadLocationTransitionAttributeSets()
{
    m_adasRoadLocationTransitionAttributeSets_.reset();
}

::nds::system::types::LayerType AdasRoadLocationLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void AdasRoadLocationLayer::initPackingContext(AdasRoadLocationLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    m_adasGeometryList_.initPackingContext(context.getAdasGeometryList());
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        m_adasRoadLocationAttributeMaps_.value().initPackingContext(context.getAdasRoadLocationAttributeMaps());
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_adasRoadLocationAttributeSets_.value().initPackingContext(context.getAdasRoadLocationAttributeSets());
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        m_adasRoadLocationTransitionAttributeMaps_.value().initPackingContext(context.getAdasRoadLocationTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_adasRoadLocationTransitionAttributeSets_.value().initPackingContext(context.getAdasRoadLocationTransitionAttributeSets());
    }
}

size_t AdasRoadLocationLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    endBitPosition += m_adasGeometryList_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition += m_adasRoadLocationAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_adasRoadLocationAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition += m_adasRoadLocationTransitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_adasRoadLocationTransitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t AdasRoadLocationLayer::bitSizeOf(AdasRoadLocationLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    endBitPosition += m_adasGeometryList_.bitSizeOf(context.getAdasGeometryList(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition += m_adasRoadLocationAttributeMaps_.value().bitSizeOf(context.getAdasRoadLocationAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_adasRoadLocationAttributeSets_.value().bitSizeOf(context.getAdasRoadLocationAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition += m_adasRoadLocationTransitionAttributeMaps_.value().bitSizeOf(context.getAdasRoadLocationTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_adasRoadLocationTransitionAttributeSets_.value().bitSizeOf(context.getAdasRoadLocationTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t AdasRoadLocationLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    endBitPosition = m_adasGeometryList_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition = m_adasRoadLocationAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_adasRoadLocationAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition = m_adasRoadLocationTransitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_adasRoadLocationTransitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t AdasRoadLocationLayer::initializeOffsets(AdasRoadLocationLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    endBitPosition = m_adasGeometryList_.initializeOffsets(context.getAdasGeometryList(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition = m_adasRoadLocationAttributeMaps_.value().initializeOffsets(context.getAdasRoadLocationAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_adasRoadLocationAttributeSets_.value().initializeOffsets(context.getAdasRoadLocationAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition = m_adasRoadLocationTransitionAttributeMaps_.value().initializeOffsets(context.getAdasRoadLocationTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_adasRoadLocationTransitionAttributeSets_.value().initializeOffsets(context.getAdasRoadLocationTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool AdasRoadLocationLayer::operator==(const AdasRoadLocationLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (m_adasGeometryList_ == other.m_adasGeometryList_) &&
                (!isAdasRoadLocationAttributeMapsUsed() ? !other.isAdasRoadLocationAttributeMapsUsed() : (m_adasRoadLocationAttributeMaps_ == other.m_adasRoadLocationAttributeMaps_)) &&
                (!isAdasRoadLocationAttributeSetsUsed() ? !other.isAdasRoadLocationAttributeSetsUsed() : (m_adasRoadLocationAttributeSets_ == other.m_adasRoadLocationAttributeSets_)) &&
                (!isAdasRoadLocationTransitionAttributeMapsUsed() ? !other.isAdasRoadLocationTransitionAttributeMapsUsed() : (m_adasRoadLocationTransitionAttributeMaps_ == other.m_adasRoadLocationTransitionAttributeMaps_)) &&
                (!isAdasRoadLocationTransitionAttributeSetsUsed() ? !other.isAdasRoadLocationTransitionAttributeSetsUsed() : (m_adasRoadLocationTransitionAttributeSets_ == other.m_adasRoadLocationTransitionAttributeSets_));
    }

    return true;
}

uint32_t AdasRoadLocationLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    result = ::zserio::calcHashCode(result, m_adasGeometryList_);
    if (isAdasRoadLocationAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_adasRoadLocationAttributeMaps_);
    if (isAdasRoadLocationAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_adasRoadLocationAttributeSets_);
    if (isAdasRoadLocationTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_adasRoadLocationTransitionAttributeMaps_);
    if (isAdasRoadLocationTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_adasRoadLocationTransitionAttributeSets_);

    return result;
}

void AdasRoadLocationLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    // check parameters
    if (m_adasGeometryList_.getShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field AdasRoadLocationLayer.adasGeometryList: ") <<
                m_adasGeometryList_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
    }
    m_adasGeometryList_.write(out);

    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        // check parameters
        if (m_adasRoadLocationAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLocationLayer.adasRoadLocationAttributeMaps: ") <<
                    m_adasRoadLocationAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadLocationAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        // check parameters
        if (m_adasRoadLocationAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLocationLayer.adasRoadLocationAttributeSets: ") <<
                    m_adasRoadLocationAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadLocationAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        // check parameters
        if (m_adasRoadLocationTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLocationLayer.adasRoadLocationTransitionAttributeMaps: ") <<
                    m_adasRoadLocationTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadLocationTransitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        // check parameters
        if (m_adasRoadLocationTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLocationLayer.adasRoadLocationTransitionAttributeSets: ") <<
                    m_adasRoadLocationTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadLocationTransitionAttributeSets_.value().write(out);
    }
}

void AdasRoadLocationLayer::write(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    // check parameters
    if (m_adasGeometryList_.getShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field AdasRoadLocationLayer.adasGeometryList: ") <<
                m_adasGeometryList_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
    }
    m_adasGeometryList_.write(context.getAdasGeometryList(), out);

    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        // check parameters
        if (m_adasRoadLocationAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLocationLayer.adasRoadLocationAttributeMaps: ") <<
                    m_adasRoadLocationAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadLocationAttributeMaps_.value().write(context.getAdasRoadLocationAttributeMaps(), out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        // check parameters
        if (m_adasRoadLocationAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLocationLayer.adasRoadLocationAttributeSets: ") <<
                    m_adasRoadLocationAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadLocationAttributeSets_.value().write(context.getAdasRoadLocationAttributeSets(), out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        // check parameters
        if (m_adasRoadLocationTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLocationLayer.adasRoadLocationTransitionAttributeMaps: ") <<
                    m_adasRoadLocationTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadLocationTransitionAttributeMaps_.value().write(context.getAdasRoadLocationTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        // check parameters
        if (m_adasRoadLocationTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasRoadLocationLayer.adasRoadLocationTransitionAttributeSets: ") <<
                    m_adasRoadLocationTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_adasRoadLocationTransitionAttributeSets_.value().write(context.getAdasRoadLocationTransitionAttributeSets(), out);
    }
}

::nds::adas::metadata::AdasRoadLocationLayerContent AdasRoadLocationLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasRoadLocationLayerContent(in);
}

::nds::adas::metadata::AdasRoadLocationLayerContent AdasRoadLocationLayer::readContent(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasRoadLocationLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift AdasRoadLocationLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift AdasRoadLocationLayer::readShift(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::nds::adas::types::AdasGeometryList AdasRoadLocationLayer::readAdasGeometryList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::adas::types::AdasGeometryList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator);
}

::nds::adas::types::AdasGeometryList AdasRoadLocationLayer::readAdasGeometryList(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::adas::types::AdasGeometryList(context.getAdasGeometryList(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList> AdasRoadLocationLayer::readAdasRoadLocationAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList>(::nds::adas::instantiations::AdasRoadLocationAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList> AdasRoadLocationLayer::readAdasRoadLocationAttributeMaps(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList>(::nds::adas::instantiations::AdasRoadLocationAttributeMapList(context.getAdasRoadLocationAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList> AdasRoadLocationLayer::readAdasRoadLocationAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList>(::nds::adas::instantiations::AdasRoadLocationAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList> AdasRoadLocationLayer::readAdasRoadLocationAttributeSets(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList>(::nds::adas::instantiations::AdasRoadLocationAttributeSetList(context.getAdasRoadLocationAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList> AdasRoadLocationLayer::readAdasRoadLocationTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList>(::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList> AdasRoadLocationLayer::readAdasRoadLocationTransitionAttributeMaps(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList>(::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList(context.getAdasRoadLocationTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList> AdasRoadLocationLayer::readAdasRoadLocationTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList>(::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList> AdasRoadLocationLayer::readAdasRoadLocationTransitionAttributeSets(AdasRoadLocationLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList>(::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList(context.getAdasRoadLocationTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadLocationTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/layer/AdasLaneLayer.h>
#include <nds/adas/metadata/AdasLaneLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace adas
{
namespace layer
{

AdasLaneLayer::AdasLaneLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::adas::metadata::AdasLaneLayerContent()),
        m_adasLaneAttributeMaps_(::zserio::NullOpt),
        m_adasLaneAttributeSets_(::zserio::NullOpt)
{
}

AdasLaneLayer::AdasLaneLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_adasLaneAttributeMaps_(readAdasLaneAttributeMaps(in, allocator)),
        m_adasLaneAttributeSets_(readAdasLaneAttributeSets(in, allocator))
{
}

AdasLaneLayer::AdasLaneLayer(AdasLaneLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_adasLaneAttributeMaps_(readAdasLaneAttributeMaps(context, in, allocator)),
        m_adasLaneAttributeSets_(readAdasLaneAttributeSets(context, in, allocator))
{
}

AdasLaneLayer::AdasLaneLayer(const AdasLaneLayer& other) :
        m_content_(other.m_content_),
        m_adasLaneAttributeMaps_(other.m_adasLaneAttributeMaps_),
        m_adasLaneAttributeSets_(other.m_adasLaneAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

AdasLaneLayer& AdasLaneLayer::operator=(const AdasLaneLayer& other)
{
    m_content_ = other.m_content_;
    m_adasLaneAttributeMaps_ = other.m_adasLaneAttributeMaps_;
    m_adasLaneAttributeSets_ = other.m_adasLaneAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

AdasLaneLayer::AdasLaneLayer(AdasLaneLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_adasLaneAttributeMaps_(::std::move(other.m_adasLaneAttributeMaps_)),
        m_adasLaneAttributeSets_(::std::move(other.m_adasLaneAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

AdasLaneLayer& AdasLaneLayer::operator=(AdasLaneLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_adasLaneAttributeMaps_ = ::std::move(other.m_adasLaneAttributeMaps_);
    m_adasLaneAttributeSets_ = ::std::move(other.m_adasLaneAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

AdasLaneLayer::AdasLaneLayer(::zserio::PropagateAllocatorT,
        const AdasLaneLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_adasLaneAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_adasLaneAttributeMaps_, allocator)),
        m_adasLaneAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_adasLaneAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void AdasLaneLayer::initializeChildren()
{
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
        m_adasLaneAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
        m_adasLaneAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::adas::metadata::AdasLaneLayerContent AdasLaneLayer::getContent() const
{
    return m_content_;
}

void AdasLaneLayer::setContent(::nds::adas::metadata::AdasLaneLayerContent content_)
{
    m_content_ = content_;
}

::nds::adas::instantiations::AdasLaneAttributeMapList& AdasLaneLayer::getAdasLaneAttributeMaps()
{
    return m_adasLaneAttributeMaps_.value();
}

const ::nds::adas::instantiations::AdasLaneAttributeMapList& AdasLaneLayer::getAdasLaneAttributeMaps() const
{
    return m_adasLaneAttributeMaps_.value();
}

void AdasLaneLayer::setAdasLaneAttributeMaps(const ::nds::adas::instantiations::AdasLaneAttributeMapList& adasLaneAttributeMaps_)
{
    m_adasLaneAttributeMaps_ = adasLaneAttributeMaps_;
}

void AdasLaneLayer::setAdasLaneAttributeMaps(::nds::adas::instantiations::AdasLaneAttributeMapList&& adasLaneAttributeMaps_)
{
    m_adasLaneAttributeMaps_ = ::std::move(adasLaneAttributeMaps_);
}

bool AdasLaneLayer::isAdasLaneAttributeMapsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS);
}

bool AdasLaneLayer::isAdasLaneAttributeMapsSet() const
{
    return m_adasLaneAttributeMaps_.hasValue();
}

void AdasLaneLayer::resetAdasLaneAttributeMaps()
{
    m_adasLaneAttributeMaps_.reset();
}

::nds::adas::instantiations::AdasLaneAttributeSetList& AdasLaneLayer::getAdasLaneAttributeSets()
{
    return m_adasLaneAttributeSets_.value();
}

const ::nds::adas::instantiations::AdasLaneAttributeSetList& AdasLaneLayer::getAdasLaneAttributeSets() const
{
    return m_adasLaneAttributeSets_.value();
}

void AdasLaneLayer::setAdasLaneAttributeSets(const ::nds::adas::instantiations::AdasLaneAttributeSetList& adasLaneAttributeSets_)
{
    m_adasLaneAttributeSets_ = adasLaneAttributeSets_;
}

void AdasLaneLayer::setAdasLaneAttributeSets(::nds::adas::instantiations::AdasLaneAttributeSetList&& adasLaneAttributeSets_)
{
    m_adasLaneAttributeSets_ = ::std::move(adasLaneAttributeSets_);
}

bool AdasLaneLayer::isAdasLaneAttributeSetsUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS);
}

bool AdasLaneLayer::isAdasLaneAttributeSetsSet() const
{
    return m_adasLaneAttributeSets_.hasValue();
}

void AdasLaneLayer::resetAdasLaneAttributeSets()
{
    m_adasLaneAttributeSets_.reset();
}

::nds::system::types::LayerType AdasLaneLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void AdasLaneLayer::initPackingContext(AdasLaneLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        m_adasLaneAttributeMaps_.value().initPackingContext(context.getAdasLaneAttributeMaps());
    }
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        m_adasLaneAttributeSets_.value().initPackingContext(context.getAdasLaneAttributeSets());
    }
}

size_t AdasLaneLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        endBitPosition += m_adasLaneAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        endBitPosition += m_adasLaneAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t AdasLaneLayer::bitSizeOf(AdasLaneLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        endBitPosition += m_adasLaneAttributeMaps_.value().bitSizeOf(context.getAdasLaneAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        endBitPosition += m_adasLaneAttributeSets_.value().bitSizeOf(context.getAdasLaneAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t AdasLaneLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        endBitPosition = m_adasLaneAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        endBitPosition = m_adasLaneAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t AdasLaneLayer::initializeOffsets(AdasLaneLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        endBitPosition = m_adasLaneAttributeMaps_.value().initializeOffsets(context.getAdasLaneAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        endBitPosition = m_adasLaneAttributeSets_.value().initializeOffsets(context.getAdasLaneAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool AdasLaneLayer::operator==(const AdasLaneLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isAdasLaneAttributeMapsUsed() ? !other.isAdasLaneAttributeMapsUsed() : (m_adasLaneAttributeMaps_ == other.m_adasLaneAttributeMaps_)) &&
                (!isAdasLaneAttributeSetsUsed() ? !other.isAdasLaneAttributeSetsUsed() : (m_adasLaneAttributeSets_ == other.m_adasLaneAttributeSets_));
    }

    return true;
}

uint32_t AdasLaneLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isAdasLaneAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_adasLaneAttributeMaps_);
    if (isAdasLaneAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_adasLaneAttributeSets_);

    return result;
}

void AdasLaneLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        // check parameters
        if (m_adasLaneAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasLaneLayer.adasLaneAttributeMaps: ") <<
                    m_adasLaneAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_adasLaneAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        // check parameters
        if (m_adasLaneAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasLaneLayer.adasLaneAttributeSets: ") <<
                    m_adasLaneAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_adasLaneAttributeSets_.value().write(out);
    }
}

void AdasLaneLayer::write(AdasLaneLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        // check parameters
        if (m_adasLaneAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasLaneLayer.adasLaneAttributeMaps: ") <<
                    m_adasLaneAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_adasLaneAttributeMaps_.value().write(context.getAdasLaneAttributeMaps(), out);
    }

    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        // check parameters
        if (m_adasLaneAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field AdasLaneLayer.adasLaneAttributeSets: ") <<
                    m_adasLaneAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_adasLaneAttributeSets_.value().write(context.getAdasLaneAttributeSets(), out);
    }
}

::nds::adas::metadata::AdasLaneLayerContent AdasLaneLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasLaneLayerContent(in);
}

::nds::adas::metadata::AdasLaneLayerContent AdasLaneLayer::readContent(AdasLaneLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasLaneLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeMapList> AdasLaneLayer::readAdasLaneAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeMapList>(::nds::adas::instantiations::AdasLaneAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeMapList> AdasLaneLayer::readAdasLaneAttributeMaps(AdasLaneLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeMapList>(::nds::adas::instantiations::AdasLaneAttributeMapList(context.getAdasLaneAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeSetList> AdasLaneLayer::readAdasLaneAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeSetList>(::nds::adas::instantiations::AdasLaneAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeSetList> AdasLaneLayer::readAdasLaneAttributeSets(AdasLaneLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS) == ::nds::adas::metadata::AdasLaneLayerContent::Values::LANE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeSetList>(::nds::adas::instantiations::AdasLaneAttributeSetList(context.getAdasLaneAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasLaneAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace adas
} // namespace nds
