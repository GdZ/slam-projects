/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/adas/metadata/AdasRoadLayerContent.h>

namespace nds
{
namespace adas
{
namespace metadata
{

AdasRoadLayerContent::AdasRoadLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

AdasRoadLayerContent::AdasRoadLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

AdasRoadLayerContent::AdasRoadLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'AdasRoadLayerContent' out of bounds: ") << value << "!";
}

void AdasRoadLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasRoadLayerContent::underlying_type>>(m_value);
}

size_t AdasRoadLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t AdasRoadLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasRoadLayerContent::underlying_type>>(m_value);
}

size_t AdasRoadLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t AdasRoadLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t AdasRoadLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void AdasRoadLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void AdasRoadLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasRoadLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> AdasRoadLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & AdasRoadLayerContent::Values::ROAD_MAPS) == AdasRoadLayerContent::Values::ROAD_MAPS)
        result += result.empty() ? "ROAD_MAPS" : " | ROAD_MAPS";
    if ((*this & AdasRoadLayerContent::Values::ROAD_SETS) == AdasRoadLayerContent::Values::ROAD_SETS)
        result += result.empty() ? "ROAD_SETS" : " | ROAD_SETS";
    if ((*this & AdasRoadLayerContent::Values::TRANSITION_MAPS) == AdasRoadLayerContent::Values::TRANSITION_MAPS)
        result += result.empty() ? "TRANSITION_MAPS" : " | TRANSITION_MAPS";
    if ((*this & AdasRoadLayerContent::Values::TRANSITION_SETS) == AdasRoadLayerContent::Values::TRANSITION_SETS)
        result += result.empty() ? "TRANSITION_SETS" : " | TRANSITION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

AdasRoadLayerContent::underlying_type AdasRoadLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

AdasRoadLayerContent::underlying_type AdasRoadLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasRoadLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/adas/metadata/AdasRoadLocationLayerContent.h>

namespace nds
{
namespace adas
{
namespace metadata
{

AdasRoadLocationLayerContent::AdasRoadLocationLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

AdasRoadLocationLayerContent::AdasRoadLocationLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

AdasRoadLocationLayerContent::AdasRoadLocationLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'AdasRoadLocationLayerContent' out of bounds: ") << value << "!";
}

void AdasRoadLocationLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasRoadLocationLayerContent::underlying_type>>(m_value);
}

size_t AdasRoadLocationLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t AdasRoadLocationLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasRoadLocationLayerContent::underlying_type>>(m_value);
}

size_t AdasRoadLocationLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t AdasRoadLocationLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t AdasRoadLocationLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void AdasRoadLocationLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void AdasRoadLocationLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasRoadLocationLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> AdasRoadLocationLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS)
        result += result.empty() ? "ROAD_LOCATION_MAPS" : " | ROAD_LOCATION_MAPS";
    if ((*this & AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
        result += result.empty() ? "ROAD_LOCATION_SETS" : " | ROAD_LOCATION_SETS";
    if ((*this & AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
        result += result.empty() ? "ROAD_LOCATION_TRANSITION_MAPS" : " | ROAD_LOCATION_TRANSITION_MAPS";
    if ((*this & AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
        result += result.empty() ? "ROAD_LOCATION_TRANSITION_SETS" : " | ROAD_LOCATION_TRANSITION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

AdasRoadLocationLayerContent::underlying_type AdasRoadLocationLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

AdasRoadLocationLayerContent::underlying_type AdasRoadLocationLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasRoadLocationLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/adas/metadata/AdasLaneLayerContent.h>

namespace nds
{
namespace adas
{
namespace metadata
{

AdasLaneLayerContent::AdasLaneLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

AdasLaneLayerContent::AdasLaneLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

AdasLaneLayerContent::AdasLaneLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'AdasLaneLayerContent' out of bounds: ") << value << "!";
}

void AdasLaneLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasLaneLayerContent::underlying_type>>(m_value);
}

size_t AdasLaneLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t AdasLaneLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasLaneLayerContent::underlying_type>>(m_value);
}

size_t AdasLaneLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t AdasLaneLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t AdasLaneLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void AdasLaneLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void AdasLaneLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasLaneLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> AdasLaneLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & AdasLaneLayerContent::Values::LANE_MAPS) == AdasLaneLayerContent::Values::LANE_MAPS)
        result += result.empty() ? "LANE_MAPS" : " | LANE_MAPS";
    if ((*this & AdasLaneLayerContent::Values::LANE_SETS) == AdasLaneLayerContent::Values::LANE_SETS)
        result += result.empty() ? "LANE_SETS" : " | LANE_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

AdasLaneLayerContent::underlying_type AdasLaneLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

AdasLaneLayerContent::underlying_type AdasLaneLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::adas::metadata::AdasLaneLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/metadata/AdasRoadLayerMetadata.h>
#include <nds/adas/metadata/AdasRoadLayerContent.h>

namespace nds
{
namespace adas
{
namespace metadata
{

AdasRoadLayerMetadata::AdasRoadLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::adas::metadata::AdasRoadLayerContent()),
        m_roadAttributeMetadata_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator)
{
}

AdasRoadLayerMetadata::AdasRoadLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadAttributeMetadata_(readRoadAttributeMetadata(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator))
{
}

AdasRoadLayerMetadata::AdasRoadLayerMetadata(AdasRoadLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadAttributeMetadata_(readRoadAttributeMetadata(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator))
{
}

AdasRoadLayerMetadata::AdasRoadLayerMetadata(::zserio::PropagateAllocatorT,
        const AdasRoadLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadAttributeMetadata_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator))
{
}

::nds::adas::metadata::AdasRoadLayerContent AdasRoadLayerMetadata::getContent() const
{
    return m_content_;
}

void AdasRoadLayerMetadata::setContent(::nds::adas::metadata::AdasRoadLayerContent content_)
{
    m_content_ = content_;
}

::nds::adas::instantiations::AdasRoadAttributeMetadata& AdasRoadLayerMetadata::getRoadAttributeMetadata()
{
    return m_roadAttributeMetadata_.value();
}

const ::nds::adas::instantiations::AdasRoadAttributeMetadata& AdasRoadLayerMetadata::getRoadAttributeMetadata() const
{
    return m_roadAttributeMetadata_.value();
}

void AdasRoadLayerMetadata::setRoadAttributeMetadata(const ::nds::adas::instantiations::AdasRoadAttributeMetadata& roadAttributeMetadata_)
{
    m_roadAttributeMetadata_ = roadAttributeMetadata_;
}

void AdasRoadLayerMetadata::setRoadAttributeMetadata(::nds::adas::instantiations::AdasRoadAttributeMetadata&& roadAttributeMetadata_)
{
    m_roadAttributeMetadata_ = ::std::move(roadAttributeMetadata_);
}

bool AdasRoadLayerMetadata::isRoadAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS);
}

bool AdasRoadLayerMetadata::isRoadAttributeMetadataSet() const
{
    return m_roadAttributeMetadata_.hasValue();
}

void AdasRoadLayerMetadata::resetRoadAttributeMetadata()
{
    m_roadAttributeMetadata_.reset();
}

::nds::adas::instantiations::AdasTransitionAttributeMetadata& AdasRoadLayerMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::adas::instantiations::AdasTransitionAttributeMetadata& AdasRoadLayerMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void AdasRoadLayerMetadata::setTransitionAttributeMetadata(const ::nds::adas::instantiations::AdasTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void AdasRoadLayerMetadata::setTransitionAttributeMetadata(::nds::adas::instantiations::AdasTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool AdasRoadLayerMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS);
}

bool AdasRoadLayerMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void AdasRoadLayerMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& AdasRoadLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& AdasRoadLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void AdasRoadLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void AdasRoadLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

void AdasRoadLayerMetadata::initPackingContext(AdasRoadLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        m_roadAttributeMetadata_.value().initPackingContext(context.getRoadAttributeMetadata());
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
}

size_t AdasRoadLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        endBitPosition += m_roadAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AdasRoadLayerMetadata::bitSizeOf(AdasRoadLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        endBitPosition += m_roadAttributeMetadata_.value().bitSizeOf(context.getRoadAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AdasRoadLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        endBitPosition = m_roadAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t AdasRoadLayerMetadata::initializeOffsets(AdasRoadLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        endBitPosition = m_roadAttributeMetadata_.value().initializeOffsets(context.getRoadAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool AdasRoadLayerMetadata::operator==(const AdasRoadLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadAttributeMetadataUsed() ? !other.isRoadAttributeMetadataUsed() : (m_roadAttributeMetadata_ == other.m_roadAttributeMetadata_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_);
    }

    return true;
}

uint32_t AdasRoadLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadAttributeMetadata_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);

    return result;
}

void AdasRoadLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        m_roadAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
}

void AdasRoadLayerMetadata::write(AdasRoadLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        m_roadAttributeMetadata_.value().write(context.getRoadAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
}

void AdasRoadLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(AdasRoadLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void AdasRoadLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(AdasRoadLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::adas::metadata::AdasRoadLayerContent AdasRoadLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasRoadLayerContent(in);
}

::nds::adas::metadata::AdasRoadLayerContent AdasRoadLayerMetadata::readContent(AdasRoadLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasRoadLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata> AdasRoadLayerMetadata::readRoadAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata>(::nds::adas::instantiations::AdasRoadAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata> AdasRoadLayerMetadata::readRoadAttributeMetadata(AdasRoadLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::ROAD_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata>(::nds::adas::instantiations::AdasRoadAttributeMetadata(context.getRoadAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata> AdasRoadLayerMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata>(::nds::adas::instantiations::AdasTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata> AdasRoadLayerMetadata::readTransitionAttributeMetadata(AdasRoadLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata>(::nds::adas::instantiations::AdasTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata>(::zserio::NullOpt);
}
AdasRoadLayerMetadata::ZserioArrayType_coveredRoadTypes AdasRoadLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

AdasRoadLayerMetadata::ZserioArrayType_coveredRoadTypes AdasRoadLayerMetadata::readCoveredRoadTypes(AdasRoadLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/adas/metadata/AdasRoadLocationLayerMetadata.h>
#include <nds/adas/metadata/AdasRoadLocationLayerContent.h>

namespace nds
{
namespace adas
{
namespace metadata
{

AdasRoadLocationLayerMetadata::AdasRoadLocationLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::adas::metadata::AdasRoadLocationLayerContent()),
        m_roadLocationAttributeMetadata_(::zserio::NullOpt),
        m_roadLocationTransitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator)
{
}

AdasRoadLocationLayerMetadata::AdasRoadLocationLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadLocationAttributeMetadata_(readRoadLocationAttributeMetadata(in, allocator)),
        m_roadLocationTransitionAttributeMetadata_(readRoadLocationTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator))
{
}

AdasRoadLocationLayerMetadata::AdasRoadLocationLayerMetadata(AdasRoadLocationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadLocationAttributeMetadata_(readRoadLocationAttributeMetadata(context, in, allocator)),
        m_roadLocationTransitionAttributeMetadata_(readRoadLocationTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator))
{
}

AdasRoadLocationLayerMetadata::AdasRoadLocationLayerMetadata(::zserio::PropagateAllocatorT,
        const AdasRoadLocationLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadLocationAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadLocationAttributeMetadata_, allocator)),
        m_roadLocationTransitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadLocationTransitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator))
{
}

::nds::adas::metadata::AdasRoadLocationLayerContent AdasRoadLocationLayerMetadata::getContent() const
{
    return m_content_;
}

void AdasRoadLocationLayerMetadata::setContent(::nds::adas::metadata::AdasRoadLocationLayerContent content_)
{
    m_content_ = content_;
}

::nds::adas::instantiations::AdasRoadAttributeMetadata& AdasRoadLocationLayerMetadata::getRoadLocationAttributeMetadata()
{
    return m_roadLocationAttributeMetadata_.value();
}

const ::nds::adas::instantiations::AdasRoadAttributeMetadata& AdasRoadLocationLayerMetadata::getRoadLocationAttributeMetadata() const
{
    return m_roadLocationAttributeMetadata_.value();
}

void AdasRoadLocationLayerMetadata::setRoadLocationAttributeMetadata(const ::nds::adas::instantiations::AdasRoadAttributeMetadata& roadLocationAttributeMetadata_)
{
    m_roadLocationAttributeMetadata_ = roadLocationAttributeMetadata_;
}

void AdasRoadLocationLayerMetadata::setRoadLocationAttributeMetadata(::nds::adas::instantiations::AdasRoadAttributeMetadata&& roadLocationAttributeMetadata_)
{
    m_roadLocationAttributeMetadata_ = ::std::move(roadLocationAttributeMetadata_);
}

bool AdasRoadLocationLayerMetadata::isRoadLocationAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS);
}

bool AdasRoadLocationLayerMetadata::isRoadLocationAttributeMetadataSet() const
{
    return m_roadLocationAttributeMetadata_.hasValue();
}

void AdasRoadLocationLayerMetadata::resetRoadLocationAttributeMetadata()
{
    m_roadLocationAttributeMetadata_.reset();
}

::nds::adas::instantiations::AdasTransitionAttributeMetadata& AdasRoadLocationLayerMetadata::getRoadLocationTransitionAttributeMetadata()
{
    return m_roadLocationTransitionAttributeMetadata_.value();
}

const ::nds::adas::instantiations::AdasTransitionAttributeMetadata& AdasRoadLocationLayerMetadata::getRoadLocationTransitionAttributeMetadata() const
{
    return m_roadLocationTransitionAttributeMetadata_.value();
}

void AdasRoadLocationLayerMetadata::setRoadLocationTransitionAttributeMetadata(const ::nds::adas::instantiations::AdasTransitionAttributeMetadata& roadLocationTransitionAttributeMetadata_)
{
    m_roadLocationTransitionAttributeMetadata_ = roadLocationTransitionAttributeMetadata_;
}

void AdasRoadLocationLayerMetadata::setRoadLocationTransitionAttributeMetadata(::nds::adas::instantiations::AdasTransitionAttributeMetadata&& roadLocationTransitionAttributeMetadata_)
{
    m_roadLocationTransitionAttributeMetadata_ = ::std::move(roadLocationTransitionAttributeMetadata_);
}

bool AdasRoadLocationLayerMetadata::isRoadLocationTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS);
}

bool AdasRoadLocationLayerMetadata::isRoadLocationTransitionAttributeMetadataSet() const
{
    return m_roadLocationTransitionAttributeMetadata_.hasValue();
}

void AdasRoadLocationLayerMetadata::resetRoadLocationTransitionAttributeMetadata()
{
    m_roadLocationTransitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& AdasRoadLocationLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& AdasRoadLocationLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void AdasRoadLocationLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void AdasRoadLocationLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

void AdasRoadLocationLayerMetadata::initPackingContext(AdasRoadLocationLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadLocationAttributeMetadata_.value().initPackingContext(context.getRoadLocationAttributeMetadata());
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_roadLocationTransitionAttributeMetadata_.value().initPackingContext(context.getRoadLocationTransitionAttributeMetadata());
    }
}

size_t AdasRoadLocationLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadLocationAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_roadLocationTransitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AdasRoadLocationLayerMetadata::bitSizeOf(AdasRoadLocationLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadLocationAttributeMetadata_.value().bitSizeOf(context.getRoadLocationAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_roadLocationTransitionAttributeMetadata_.value().bitSizeOf(context.getRoadLocationTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AdasRoadLocationLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadLocationAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_roadLocationTransitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t AdasRoadLocationLayerMetadata::initializeOffsets(AdasRoadLocationLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadLocationAttributeMetadata_.value().initializeOffsets(context.getRoadLocationAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_roadLocationTransitionAttributeMetadata_.value().initializeOffsets(context.getRoadLocationTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool AdasRoadLocationLayerMetadata::operator==(const AdasRoadLocationLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadLocationAttributeMetadataUsed() ? !other.isRoadLocationAttributeMetadataUsed() : (m_roadLocationAttributeMetadata_ == other.m_roadLocationAttributeMetadata_)) &&
                (!isRoadLocationTransitionAttributeMetadataUsed() ? !other.isRoadLocationTransitionAttributeMetadataUsed() : (m_roadLocationTransitionAttributeMetadata_ == other.m_roadLocationTransitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_);
    }

    return true;
}

uint32_t AdasRoadLocationLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadLocationAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationAttributeMetadata_);
    if (isRoadLocationTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationTransitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);

    return result;
}

void AdasRoadLocationLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadLocationAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_roadLocationTransitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
}

void AdasRoadLocationLayerMetadata::write(AdasRoadLocationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadLocationAttributeMetadata_.value().write(context.getRoadLocationAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_roadLocationTransitionAttributeMetadata_.value().write(context.getRoadLocationTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
}

void AdasRoadLocationLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(AdasRoadLocationLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void AdasRoadLocationLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(AdasRoadLocationLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::adas::metadata::AdasRoadLocationLayerContent AdasRoadLocationLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasRoadLocationLayerContent(in);
}

::nds::adas::metadata::AdasRoadLocationLayerContent AdasRoadLocationLayerMetadata::readContent(AdasRoadLocationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasRoadLocationLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata> AdasRoadLocationLayerMetadata::readRoadLocationAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata>(::nds::adas::instantiations::AdasRoadAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata> AdasRoadLocationLayerMetadata::readRoadLocationAttributeMetadata(AdasRoadLocationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata>(::nds::adas::instantiations::AdasRoadAttributeMetadata(context.getRoadLocationAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata> AdasRoadLocationLayerMetadata::readRoadLocationTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata>(::nds::adas::instantiations::AdasTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata> AdasRoadLocationLayerMetadata::readRoadLocationTransitionAttributeMetadata(AdasRoadLocationLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::adas::metadata::AdasRoadLocationLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata>(::nds::adas::instantiations::AdasTransitionAttributeMetadata(context.getRoadLocationTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata>(::zserio::NullOpt);
}
AdasRoadLocationLayerMetadata::ZserioArrayType_coveredRoadTypes AdasRoadLocationLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

AdasRoadLocationLayerMetadata::ZserioArrayType_coveredRoadTypes AdasRoadLocationLayerMetadata::readCoveredRoadTypes(AdasRoadLocationLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace adas
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/adas/metadata/AdasLaneLayerMetadata.h>

namespace nds
{
namespace adas
{
namespace metadata
{

AdasLaneLayerMetadata::AdasLaneLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::adas::metadata::AdasLaneLayerContent()),
        m_laneAttributeMetadata_(allocator),
        m_coveredLaneTypes_(allocator)
{
}

AdasLaneLayerMetadata::AdasLaneLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_laneAttributeMetadata_(readLaneAttributeMetadata(in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(in, allocator))
{
}

AdasLaneLayerMetadata::AdasLaneLayerMetadata(AdasLaneLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_laneAttributeMetadata_(readLaneAttributeMetadata(context, in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(context, in, allocator))
{
}

AdasLaneLayerMetadata::AdasLaneLayerMetadata(::zserio::PropagateAllocatorT,
        const AdasLaneLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneAttributeMetadata_, allocator)),
        m_coveredLaneTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredLaneTypes_, allocator))
{
}

::nds::adas::metadata::AdasLaneLayerContent AdasLaneLayerMetadata::getContent() const
{
    return m_content_;
}

void AdasLaneLayerMetadata::setContent(::nds::adas::metadata::AdasLaneLayerContent content_)
{
    m_content_ = content_;
}

::nds::adas::instantiations::AdasLaneAttributeMetadata& AdasLaneLayerMetadata::getLaneAttributeMetadata()
{
    return m_laneAttributeMetadata_;
}

const ::nds::adas::instantiations::AdasLaneAttributeMetadata& AdasLaneLayerMetadata::getLaneAttributeMetadata() const
{
    return m_laneAttributeMetadata_;
}

void AdasLaneLayerMetadata::setLaneAttributeMetadata(const ::nds::adas::instantiations::AdasLaneAttributeMetadata& laneAttributeMetadata_)
{
    m_laneAttributeMetadata_ = laneAttributeMetadata_;
}

void AdasLaneLayerMetadata::setLaneAttributeMetadata(::nds::adas::instantiations::AdasLaneAttributeMetadata&& laneAttributeMetadata_)
{
    m_laneAttributeMetadata_ = ::std::move(laneAttributeMetadata_);
}

::zserio::vector<::nds::core::types::LaneType>& AdasLaneLayerMetadata::getCoveredLaneTypes()
{
    return m_coveredLaneTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::LaneType>& AdasLaneLayerMetadata::getCoveredLaneTypes() const
{
    return m_coveredLaneTypes_.getRawArray();
}

void AdasLaneLayerMetadata::setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(coveredLaneTypes_);
}

void AdasLaneLayerMetadata::setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(std::move(coveredLaneTypes_));
}

void AdasLaneLayerMetadata::initPackingContext(AdasLaneLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    m_laneAttributeMetadata_.initPackingContext(context.getLaneAttributeMetadata());
}

size_t AdasLaneLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += m_laneAttributeMetadata_.bitSizeOf(endBitPosition);
    endBitPosition += m_coveredLaneTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AdasLaneLayerMetadata::bitSizeOf(AdasLaneLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += m_laneAttributeMetadata_.bitSizeOf(context.getLaneAttributeMetadata(), endBitPosition);
    endBitPosition += m_coveredLaneTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AdasLaneLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition = m_laneAttributeMetadata_.initializeOffsets(endBitPosition);
    endBitPosition = m_coveredLaneTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t AdasLaneLayerMetadata::initializeOffsets(AdasLaneLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition = m_laneAttributeMetadata_.initializeOffsets(context.getLaneAttributeMetadata(), endBitPosition);
    endBitPosition = m_coveredLaneTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool AdasLaneLayerMetadata::operator==(const AdasLaneLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_laneAttributeMetadata_ == other.m_laneAttributeMetadata_) &&
                (m_coveredLaneTypes_ == other.m_coveredLaneTypes_);
    }

    return true;
}

uint32_t AdasLaneLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_laneAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredLaneTypes_);

    return result;
}

void AdasLaneLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    m_laneAttributeMetadata_.write(out);
    m_coveredLaneTypes_.write(*this, out);
}

void AdasLaneLayerMetadata::write(AdasLaneLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    m_laneAttributeMetadata_.write(context.getLaneAttributeMetadata(), out);
    m_coveredLaneTypes_.writePacked(*this, out);
}

void AdasLaneLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(AdasLaneLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void AdasLaneLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(AdasLaneLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::nds::core::types::LaneType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::adas::metadata::AdasLaneLayerContent AdasLaneLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasLaneLayerContent(in);
}

::nds::adas::metadata::AdasLaneLayerContent AdasLaneLayerMetadata::readContent(AdasLaneLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::adas::metadata::AdasLaneLayerContent(context.getContent(), in);
}
::nds::adas::instantiations::AdasLaneAttributeMetadata AdasLaneLayerMetadata::readLaneAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::adas::instantiations::AdasLaneAttributeMetadata(in, allocator);
}

::nds::adas::instantiations::AdasLaneAttributeMetadata AdasLaneLayerMetadata::readLaneAttributeMetadata(AdasLaneLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::adas::instantiations::AdasLaneAttributeMetadata(context.getLaneAttributeMetadata(), in, allocator);
}
AdasLaneLayerMetadata::ZserioArrayType_coveredLaneTypes AdasLaneLayerMetadata::readCoveredLaneTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

AdasLaneLayerMetadata::ZserioArrayType_coveredLaneTypes AdasLaneLayerMetadata::readCoveredLaneTypes(AdasLaneLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace adas
} // namespace nds
