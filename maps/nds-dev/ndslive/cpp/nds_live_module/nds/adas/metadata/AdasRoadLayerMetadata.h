/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ADAS_METADATA_ADAS_ROAD_LAYER_METADATA_H
#define NDS_ADAS_METADATA_ADAS_ROAD_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/adas/instantiations/AdasRoadAttributeMetadata.h>
#include <nds/adas/instantiations/AdasTransitionAttributeMetadata.h>
#include <nds/adas/metadata/AdasRoadLayerContent.h>
#include <nds/core/types/RoadType.h>

namespace nds
{
namespace adas
{
namespace metadata
{

class AdasRoadLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::adas::instantiations::AdasRoadAttributeMetadata::ZserioPackingContext& getRoadAttributeMetadata()
        {
            return m_roadAttributeMetadata_;
        }

        ::nds::adas::instantiations::AdasTransitionAttributeMetadata::ZserioPackingContext& getTransitionAttributeMetadata()
        {
            return m_transitionAttributeMetadata_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::adas::instantiations::AdasRoadAttributeMetadata::ZserioPackingContext m_roadAttributeMetadata_;
        ::nds::adas::instantiations::AdasTransitionAttributeMetadata::ZserioPackingContext m_transitionAttributeMetadata_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AdasRoadLayerMetadata() noexcept :
            AdasRoadLayerMetadata(allocator_type())
    {}

    explicit AdasRoadLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadAttributeMetadata = ::nds::adas::instantiations::AdasRoadAttributeMetadata,
            typename ZSERIO_T_transitionAttributeMetadata = ::nds::adas::instantiations::AdasTransitionAttributeMetadata,
            typename ZSERIO_T_coveredRoadTypes = ::zserio::vector<::nds::core::types::RoadType>>
    AdasRoadLayerMetadata(
            ::nds::adas::metadata::AdasRoadLayerContent content_,
            ZSERIO_T_roadAttributeMetadata&& roadAttributeMetadata_,
            ZSERIO_T_transitionAttributeMetadata&& transitionAttributeMetadata_,
            ZSERIO_T_coveredRoadTypes&& coveredRoadTypes_,
            const allocator_type& allocator = allocator_type()) :
            AdasRoadLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_roadAttributeMetadata_ = ::std::forward<ZSERIO_T_roadAttributeMetadata>(roadAttributeMetadata_);
        m_transitionAttributeMetadata_ = ::std::forward<ZSERIO_T_transitionAttributeMetadata>(transitionAttributeMetadata_);
        m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(::std::forward<ZSERIO_T_coveredRoadTypes>(coveredRoadTypes_));
    }

    explicit AdasRoadLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AdasRoadLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AdasRoadLayerMetadata() = default;

    AdasRoadLayerMetadata(const AdasRoadLayerMetadata&) = default;
    AdasRoadLayerMetadata& operator=(const AdasRoadLayerMetadata&) = default;

    AdasRoadLayerMetadata(AdasRoadLayerMetadata&&) = default;
    AdasRoadLayerMetadata& operator=(AdasRoadLayerMetadata&&) = default;

    AdasRoadLayerMetadata(::zserio::PropagateAllocatorT,
            const AdasRoadLayerMetadata& other, const allocator_type& allocator);

    ::nds::adas::metadata::AdasRoadLayerContent getContent() const;
    void setContent(::nds::adas::metadata::AdasRoadLayerContent content_);

    const ::nds::adas::instantiations::AdasRoadAttributeMetadata& getRoadAttributeMetadata() const;
    ::nds::adas::instantiations::AdasRoadAttributeMetadata& getRoadAttributeMetadata();
    void setRoadAttributeMetadata(const ::nds::adas::instantiations::AdasRoadAttributeMetadata& roadAttributeMetadata_);
    void setRoadAttributeMetadata(::nds::adas::instantiations::AdasRoadAttributeMetadata&& roadAttributeMetadata_);
    bool isRoadAttributeMetadataUsed() const;
    bool isRoadAttributeMetadataSet() const;
    void resetRoadAttributeMetadata();

    const ::nds::adas::instantiations::AdasTransitionAttributeMetadata& getTransitionAttributeMetadata() const;
    ::nds::adas::instantiations::AdasTransitionAttributeMetadata& getTransitionAttributeMetadata();
    void setTransitionAttributeMetadata(const ::nds::adas::instantiations::AdasTransitionAttributeMetadata& transitionAttributeMetadata_);
    void setTransitionAttributeMetadata(::nds::adas::instantiations::AdasTransitionAttributeMetadata&& transitionAttributeMetadata_);
    bool isTransitionAttributeMetadataUsed() const;
    bool isTransitionAttributeMetadataSet() const;
    void resetTransitionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes() const;
    ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes();
    void setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_);
    void setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AdasRoadLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredRoadTypes
    {
    public:
        using OwnerType = AdasRoadLayerMetadata;

        static void create(AdasRoadLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(AdasRoadLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::nds::core::types::RoadType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredRoadTypes = ::zserio::Array<::zserio::vector<::nds::core::types::RoadType>, ::zserio::ObjectArrayTraits<::nds::core::types::RoadType, ZserioElementFactory_coveredRoadTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::adas::metadata::AdasRoadLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::adas::metadata::AdasRoadLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata> readRoadAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata> readRoadAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata> readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata> readTransitionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::adas::metadata::AdasRoadLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasRoadAttributeMetadata> m_roadAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::adas::instantiations::AdasTransitionAttributeMetadata> m_transitionAttributeMetadata_;
    ZserioArrayType_coveredRoadTypes m_coveredRoadTypes_;
};

} // namespace metadata
} // namespace adas
} // namespace nds

#endif // NDS_ADAS_METADATA_ADAS_ROAD_LAYER_METADATA_H
