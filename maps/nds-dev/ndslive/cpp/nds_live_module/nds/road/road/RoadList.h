/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_ROAD_ROAD_LIST_H
#define NDS_ROAD_ROAD_ROAD_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/road/road/Road.h>

namespace nds
{
namespace road
{
namespace road
{

class RoadList
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadList() noexcept :
            RoadList(allocator_type())
    {}

    explicit RoadList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roads = ::zserio::vector<::nds::road::road::Road>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_roads, RoadList, allocator_type> = 0>
    explicit RoadList(
            ZSERIO_T_roads&& roads_,
            const allocator_type& allocator = allocator_type()) :
            RoadList(allocator)
    {
        m_roads_ = ZserioArrayType_roads(::std::forward<ZSERIO_T_roads>(roads_));
    }

    explicit RoadList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadList() = default;

    RoadList(const RoadList&) = default;
    RoadList& operator=(const RoadList&) = default;

    RoadList(RoadList&&) = default;
    RoadList& operator=(RoadList&&) = default;

    RoadList(::zserio::PropagateAllocatorT,
            const RoadList& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::road::road::Road>& getRoads() const;
    ::zserio::vector<::nds::road::road::Road>& getRoads();
    void setRoads(const ::zserio::vector<::nds::road::road::Road>& roads_);
    void setRoads(::zserio::vector<::nds::road::road::Road>&& roads_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_roads
    {
    public:
        using OwnerType = RoadList;

        static void create(RoadList& owner,
                ::zserio::vector<::nds::road::road::Road>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadList& owner,
                ::zserio::vector<::nds::road::road::Road>& array,
                ::nds::road::road::Road::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_roads = ::zserio::Array<::zserio::vector<::nds::road::road::Road>, ::zserio::ObjectArrayTraits<::nds::road::road::Road, ZserioElementFactory_roads>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_roads readRoads(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_roads readRoads(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_roads m_roads_;
};

} // namespace road
} // namespace road
} // namespace nds

#endif // NDS_ROAD_ROAD_ROAD_LIST_H
