/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_ROAD_ROAD_H
#define NDS_ROAD_ROAD_ROAD_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/road/reference/types/RoadId.h>
#include <nds/road/reference/types/RoadLength.h>

namespace nds
{
namespace road
{
namespace road
{

class Road
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::road::reference::types::RoadId::ZserioPackingContext& getId()
        {
            return m_id_;
        }

        ::zserio::DeltaContext& getLength()
        {
            return m_length_;
        }

    private:
        ::nds::road::reference::types::RoadId::ZserioPackingContext m_id_;
        ::zserio::DeltaContext m_length_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Road() noexcept :
            Road(allocator_type())
    {}

    explicit Road(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_id = ::nds::road::reference::types::RoadId,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, Road, allocator_type> = 0>
    Road(
            ZSERIO_T_id&& id_,
            ::nds::road::reference::types::RoadLength length_,
            const allocator_type& allocator = allocator_type()) :
            Road(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
        m_length_ = length_;
    }

    explicit Road(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Road(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Road() = default;

    Road(const Road&) = default;
    Road& operator=(const Road&) = default;

    Road(Road&&) = default;
    Road& operator=(Road&&) = default;

    Road(::zserio::PropagateAllocatorT,
            const Road& other, const allocator_type& allocator);

    const ::nds::road::reference::types::RoadId& getId() const;
    ::nds::road::reference::types::RoadId& getId();
    void setId(const ::nds::road::reference::types::RoadId& id_);
    void setId(::nds::road::reference::types::RoadId&& id_);

    ::nds::road::reference::types::RoadLength getLength() const;
    void setLength(::nds::road::reference::types::RoadLength length_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Road& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::road::reference::types::RoadId readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::road::reference::types::RoadId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::road::reference::types::RoadLength readLength(::zserio::BitStreamReader& in);
    ::nds::road::reference::types::RoadLength readLength(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::road::reference::types::RoadId m_id_;
    ::nds::road::reference::types::RoadLength m_length_;
};

} // namespace road
} // namespace road
} // namespace nds

#endif // NDS_ROAD_ROAD_ROAD_H
