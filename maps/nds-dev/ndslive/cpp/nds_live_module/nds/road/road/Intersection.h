/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_ROAD_INTERSECTION_H
#define NDS_ROAD_ROAD_INTERSECTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Position2D.h>
#include <nds/road/reference/types/IntersectionId.h>
#include <nds/road/reference/types/IntersectionRoadReference.h>
#include <nds/road/reference/types/IntersectionZLevel.h>

namespace nds
{
namespace road
{
namespace road
{

class Intersection
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

        ::zserio::DeltaContext& getZLevel()
        {
            return m_zLevel_;
        }

        ::zserio::DeltaContext& getNumRoads()
        {
            return m_numRoads_;
        }

        ::nds::core::geometry::Position2D::ZserioPackingContext& getPosition()
        {
            return m_position_;
        }

    private:
        ::zserio::DeltaContext m_id_;
        ::zserio::DeltaContext m_zLevel_;
        ::zserio::DeltaContext m_numRoads_;
        ::nds::core::geometry::Position2D::ZserioPackingContext m_position_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Intersection() noexcept :
            Intersection(allocator_type())
    {}

    explicit Intersection(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_position = ::nds::core::geometry::Position2D,
            typename ZSERIO_T_connectedRoads = ::zserio::vector<::nds::road::reference::types::IntersectionRoadReference>>
    Intersection(
            ::nds::road::reference::types::IntersectionId id_,
            bool isArtificial_,
            ::nds::road::reference::types::IntersectionZLevel zLevel_,
            uint8_t numRoads_,
            ZSERIO_T_position&& position_,
            ZSERIO_T_connectedRoads&& connectedRoads_,
            const allocator_type& allocator = allocator_type()) :
            Intersection(allocator)
    {
        m_id_ = id_;
        m_isArtificial_ = isArtificial_;
        m_zLevel_ = zLevel_;
        m_numRoads_ = numRoads_;
        m_position_ = ::std::forward<ZSERIO_T_position>(position_);
        m_connectedRoads_ = ZserioArrayType_connectedRoads(::std::forward<ZSERIO_T_connectedRoads>(connectedRoads_));
    }

    explicit Intersection(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift coordShift_, const allocator_type& allocator = allocator_type());
    explicit Intersection(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift coordShift_, const allocator_type& allocator = allocator_type());

    ~Intersection() = default;

    Intersection(const Intersection& other);
    Intersection& operator=(const Intersection& other);

    Intersection(Intersection&& other);
    Intersection& operator=(Intersection&& other);

    Intersection(::zserio::PropagateAllocatorT,
            const Intersection& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift coordShift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getCoordShift() const;

    ::nds::road::reference::types::IntersectionId getId() const;
    void setId(::nds::road::reference::types::IntersectionId id_);

    bool getIsArtificial() const;
    void setIsArtificial(bool isArtificial_);

    ::nds::road::reference::types::IntersectionZLevel getZLevel() const;
    void setZLevel(::nds::road::reference::types::IntersectionZLevel zLevel_);

    uint8_t getNumRoads() const;
    void setNumRoads(uint8_t numRoads_);

    const ::nds::core::geometry::Position2D& getPosition() const;
    ::nds::core::geometry::Position2D& getPosition();
    void setPosition(const ::nds::core::geometry::Position2D& position_);
    void setPosition(::nds::core::geometry::Position2D&& position_);

    const ::zserio::vector<::nds::road::reference::types::IntersectionRoadReference>& getConnectedRoads() const;
    ::zserio::vector<::nds::road::reference::types::IntersectionRoadReference>& getConnectedRoads();
    void setConnectedRoads(const ::zserio::vector<::nds::road::reference::types::IntersectionRoadReference>& connectedRoads_);
    void setConnectedRoads(::zserio::vector<::nds::road::reference::types::IntersectionRoadReference>&& connectedRoads_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Intersection& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_connectedRoads
    {
    public:
        using OwnerType = Intersection;

        static void initializeElement(Intersection& owner,
                ::nds::road::reference::types::IntersectionRoadReference& element, size_t index);
    };

    class ZserioElementFactory_connectedRoads
    {
    public:
        using OwnerType = Intersection;

        static void create(Intersection& owner,
                ::zserio::vector<::nds::road::reference::types::IntersectionRoadReference>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Intersection& owner,
                ::zserio::vector<::nds::road::reference::types::IntersectionRoadReference>& array,
                ::nds::road::reference::types::IntersectionRoadReference::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_connectedRoads = ::zserio::Array<::zserio::vector<::nds::road::reference::types::IntersectionRoadReference>, ::zserio::ObjectArrayTraits<::nds::road::reference::types::IntersectionRoadReference, ZserioElementFactory_connectedRoads>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_connectedRoads>;

    ::nds::road::reference::types::IntersectionId readId(::zserio::BitStreamReader& in);
    ::nds::road::reference::types::IntersectionId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readIsArtificial(::zserio::BitStreamReader& in);
    ::nds::road::reference::types::IntersectionZLevel readZLevel(::zserio::BitStreamReader& in);
    ::nds::road::reference::types::IntersectionZLevel readZLevel(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint8_t readNumRoads(::zserio::BitStreamReader& in);
    uint8_t readNumRoads(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::Position2D readPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Position2D readPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_connectedRoads readConnectedRoads(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_connectedRoads readConnectedRoads(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_coordShift_;
    bool m_isInitialized;
    ::nds::road::reference::types::IntersectionId m_id_;
    bool m_isArtificial_;
    ::nds::road::reference::types::IntersectionZLevel m_zLevel_;
    uint8_t m_numRoads_;
    ::nds::core::geometry::Position2D m_position_;
    ZserioArrayType_connectedRoads m_connectedRoads_;
};

} // namespace road
} // namespace road
} // namespace nds

#endif // NDS_ROAD_ROAD_INTERSECTION_H
