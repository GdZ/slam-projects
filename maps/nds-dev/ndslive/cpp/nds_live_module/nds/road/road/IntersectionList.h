/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_ROAD_INTERSECTION_LIST_H
#define NDS_ROAD_ROAD_INTERSECTION_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/road/road/Intersection.h>

namespace nds
{
namespace road
{
namespace road
{

class IntersectionList
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    IntersectionList() noexcept :
            IntersectionList(allocator_type())
    {}

    explicit IntersectionList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_intersections = ::zserio::vector<::nds::road::road::Intersection>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_intersections, IntersectionList, allocator_type> = 0>
    explicit IntersectionList(
            ZSERIO_T_intersections&& intersections_,
            const allocator_type& allocator = allocator_type()) :
            IntersectionList(allocator)
    {
        m_intersections_ = ZserioArrayType_intersections(::std::forward<ZSERIO_T_intersections>(intersections_));
    }

    explicit IntersectionList(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit IntersectionList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~IntersectionList() = default;

    IntersectionList(const IntersectionList& other);
    IntersectionList& operator=(const IntersectionList& other);

    IntersectionList(IntersectionList&& other);
    IntersectionList& operator=(IntersectionList&& other);

    IntersectionList(::zserio::PropagateAllocatorT,
            const IntersectionList& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    const ::zserio::vector<::nds::road::road::Intersection>& getIntersections() const;
    ::zserio::vector<::nds::road::road::Intersection>& getIntersections();
    void setIntersections(const ::zserio::vector<::nds::road::road::Intersection>& intersections_);
    void setIntersections(::zserio::vector<::nds::road::road::Intersection>&& intersections_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const IntersectionList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_intersections
    {
    public:
        using OwnerType = IntersectionList;

        static void initializeElement(IntersectionList& owner,
                ::nds::road::road::Intersection& element, size_t index);
    };

    class ZserioElementFactory_intersections
    {
    public:
        using OwnerType = IntersectionList;

        static void create(IntersectionList& owner,
                ::zserio::vector<::nds::road::road::Intersection>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(IntersectionList& owner,
                ::zserio::vector<::nds::road::road::Intersection>& array,
                ::nds::road::road::Intersection::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_intersections = ::zserio::Array<::zserio::vector<::nds::road::road::Intersection>, ::zserio::ObjectArrayTraits<::nds::road::road::Intersection, ZserioElementFactory_intersections>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_intersections>;

    ZserioArrayType_intersections readIntersections(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_intersections readIntersections(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ZserioArrayType_intersections m_intersections_;
};

} // namespace road
} // namespace road
} // namespace nds

#endif // NDS_ROAD_ROAD_INTERSECTION_LIST_H
