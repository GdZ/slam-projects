/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_ROAD_POSITION_CHOICE_H
#define NDS_ROAD_REFERENCE_TYPES_ROAD_POSITION_CHOICE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/road/reference/types/RoadGeometryOffsetPosition.h>
#include <nds/road/reference/types/RoadGeometryPosition.h>
#include <nds/road/reference/types/RoadLengthPosition.h>
#include <nds/road/reference/types/RoadPercentagePosition.h>
#include <nds/road/reference/types/RoadValidityPosition.h>
#include <nds/road/reference/types/RoadValidityType.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class RoadPositionChoice
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_validityPosition = 0,
        CHOICE_lengthPosition = 1,
        CHOICE_geometryPosition = 2,
        CHOICE_geometryOffsetPosition = 3,
        CHOICE_percentagePosition = 4,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::road::reference::types::RoadValidityPosition::ZserioPackingContext& getValidityPosition()
        {
            return m_validityPosition_;
        }

        ::nds::road::reference::types::RoadLengthPosition::ZserioPackingContext& getLengthPosition()
        {
            return m_lengthPosition_;
        }

        ::zserio::DeltaContext& getGeometryPosition()
        {
            return m_geometryPosition_;
        }

        ::nds::road::reference::types::RoadGeometryOffsetPosition::ZserioPackingContext& getGeometryOffsetPosition()
        {
            return m_geometryOffsetPosition_;
        }

        ::nds::road::reference::types::RoadPercentagePosition::ZserioPackingContext& getPercentagePosition()
        {
            return m_percentagePosition_;
        }

    private:
        ::nds::road::reference::types::RoadValidityPosition::ZserioPackingContext m_validityPosition_;
        ::nds::road::reference::types::RoadLengthPosition::ZserioPackingContext m_lengthPosition_;
        ::zserio::DeltaContext m_geometryPosition_;
        ::nds::road::reference::types::RoadGeometryOffsetPosition::ZserioPackingContext m_geometryOffsetPosition_;
        ::nds::road::reference::types::RoadPercentagePosition::ZserioPackingContext m_percentagePosition_;
    };

    RoadPositionChoice() noexcept :
            RoadPositionChoice(allocator_type())
    {}

    explicit RoadPositionChoice(const allocator_type& allocator) noexcept;

    explicit RoadPositionChoice(::zserio::BitStreamReader& in,
            ::nds::road::reference::types::RoadValidityType type_,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit RoadPositionChoice(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::road::reference::types::RoadValidityType type_,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~RoadPositionChoice() = default;

    RoadPositionChoice(const RoadPositionChoice& other);
    RoadPositionChoice& operator=(const RoadPositionChoice& other);

    RoadPositionChoice(RoadPositionChoice&& other);
    RoadPositionChoice& operator=(RoadPositionChoice&& other);

    RoadPositionChoice(::zserio::PropagateAllocatorT,
            const RoadPositionChoice& other, const allocator_type& allocator);

    void initialize(
            ::nds::road::reference::types::RoadValidityType type_,
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ChoiceTag choiceTag() const;

    ::nds::road::reference::types::RoadValidityType getType() const;

    ::nds::core::geometry::CoordShift getShift() const;

    const ::nds::road::reference::types::RoadValidityPosition& getValidityPosition() const;
    ::nds::road::reference::types::RoadValidityPosition& getValidityPosition();
    void setValidityPosition(const ::nds::road::reference::types::RoadValidityPosition& validityPosition_);
    void setValidityPosition(::nds::road::reference::types::RoadValidityPosition&& validityPosition_);

    const ::nds::road::reference::types::RoadLengthPosition& getLengthPosition() const;
    ::nds::road::reference::types::RoadLengthPosition& getLengthPosition();
    void setLengthPosition(const ::nds::road::reference::types::RoadLengthPosition& lengthPosition_);
    void setLengthPosition(::nds::road::reference::types::RoadLengthPosition&& lengthPosition_);

    ::nds::road::reference::types::RoadGeometryPosition getGeometryPosition() const;
    void setGeometryPosition(::nds::road::reference::types::RoadGeometryPosition geometryPosition_);

    const ::nds::road::reference::types::RoadGeometryOffsetPosition& getGeometryOffsetPosition() const;
    ::nds::road::reference::types::RoadGeometryOffsetPosition& getGeometryOffsetPosition();
    void setGeometryOffsetPosition(const ::nds::road::reference::types::RoadGeometryOffsetPosition& geometryOffsetPosition_);
    void setGeometryOffsetPosition(::nds::road::reference::types::RoadGeometryOffsetPosition&& geometryOffsetPosition_);

    const ::nds::road::reference::types::RoadPercentagePosition& getPercentagePosition() const;
    ::nds::road::reference::types::RoadPercentagePosition& getPercentagePosition();
    void setPercentagePosition(const ::nds::road::reference::types::RoadPercentagePosition& percentagePosition_);
    void setPercentagePosition(::nds::road::reference::types::RoadPercentagePosition&& percentagePosition_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadPositionChoice& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::road::reference::types::RoadValidityType m_type_;
    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_ROAD_POSITION_CHOICE_H
