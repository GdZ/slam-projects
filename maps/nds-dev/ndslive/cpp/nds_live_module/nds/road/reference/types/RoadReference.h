/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_ROAD_REFERENCE_H
#define NDS_ROAD_REFERENCE_TYPES_ROAD_REFERENCE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/road/reference/types/DirectedRoadReference.h>
#include <nds/road/reference/types/RoadId.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class RoadReference
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::road::reference::types::DirectedRoadReference::ZserioPackingContext& getDirectedRoadReference()
        {
            return m_directedRoadReference_;
        }

        ::nds::road::reference::types::RoadId::ZserioPackingContext& getRoadId()
        {
            return m_roadId_;
        }

    private:
        ::nds::road::reference::types::DirectedRoadReference::ZserioPackingContext m_directedRoadReference_;
        ::nds::road::reference::types::RoadId::ZserioPackingContext m_roadId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadReference() noexcept :
            RoadReference(allocator_type())
    {}

    explicit RoadReference(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_directedRoadReference = ::nds::road::reference::types::DirectedRoadReference,
            typename ZSERIO_T_roadId = ::nds::road::reference::types::RoadId>
    RoadReference(
            bool isDirected_,
            ZSERIO_T_directedRoadReference&& directedRoadReference_,
            ZSERIO_T_roadId&& roadId_,
            const allocator_type& allocator = allocator_type()) :
            RoadReference(allocator)
    {
        m_isDirected_ = isDirected_;
        m_directedRoadReference_ = ::std::forward<ZSERIO_T_directedRoadReference>(directedRoadReference_);
        m_roadId_ = ::std::forward<ZSERIO_T_roadId>(roadId_);
    }

    explicit RoadReference(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadReference() = default;

    RoadReference(const RoadReference&) = default;
    RoadReference& operator=(const RoadReference&) = default;

    RoadReference(RoadReference&&) = default;
    RoadReference& operator=(RoadReference&&) = default;

    RoadReference(::zserio::PropagateAllocatorT,
            const RoadReference& other, const allocator_type& allocator);

    bool getIsDirected() const;
    void setIsDirected(bool isDirected_);

    const ::nds::road::reference::types::DirectedRoadReference& getDirectedRoadReference() const;
    ::nds::road::reference::types::DirectedRoadReference& getDirectedRoadReference();
    void setDirectedRoadReference(const ::nds::road::reference::types::DirectedRoadReference& directedRoadReference_);
    void setDirectedRoadReference(::nds::road::reference::types::DirectedRoadReference&& directedRoadReference_);
    bool isDirectedRoadReferenceUsed() const;
    bool isDirectedRoadReferenceSet() const;
    void resetDirectedRoadReference();

    const ::nds::road::reference::types::RoadId& getRoadId() const;
    ::nds::road::reference::types::RoadId& getRoadId();
    void setRoadId(const ::nds::road::reference::types::RoadId& roadId_);
    void setRoadId(::nds::road::reference::types::RoadId&& roadId_);
    bool isRoadIdUsed() const;
    bool isRoadIdSet() const;
    void resetRoadId();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadReference& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    bool readIsDirected(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::DirectedRoadReference> readDirectedRoadReference(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::DirectedRoadReference> readDirectedRoadReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadId> readRoadId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadId> readRoadId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_isDirected_;
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::DirectedRoadReference> m_directedRoadReference_;
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadId> m_roadId_;
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_ROAD_REFERENCE_H
