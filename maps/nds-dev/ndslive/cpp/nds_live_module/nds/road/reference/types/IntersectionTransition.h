/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_INTERSECTION_TRANSITION_H
#define NDS_ROAD_REFERENCE_TYPES_INTERSECTION_TRANSITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/road/reference/types/IntersectionId.h>
#include <nds/road/reference/types/TransitionNumber.h>
#include <nds/road/reference/types/TransitionReferenceType.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class IntersectionTransition
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getIntersectionId()
        {
            return m_intersectionId_;
        }

        ::zserio::DeltaContext& getNumTransitions()
        {
            return m_numTransitions_;
        }

    private:
        ::zserio::DeltaContext m_intersectionId_;
        ::zserio::DeltaContext m_numTransitions_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    IntersectionTransition() noexcept :
            IntersectionTransition(allocator_type())
    {}

    explicit IntersectionTransition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_numTransitions = uint32_t,
            typename ZSERIO_T_transitionNumber = ::zserio::vector<::nds::road::reference::types::TransitionNumber>>
    IntersectionTransition(
            ::nds::road::reference::types::IntersectionId intersectionId_,
            ZSERIO_T_numTransitions&& numTransitions_,
            ZSERIO_T_transitionNumber&& transitionNumber_,
            const allocator_type& allocator = allocator_type()) :
            IntersectionTransition(allocator)
    {
        m_intersectionId_ = intersectionId_;
        m_numTransitions_ = ::std::forward<ZSERIO_T_numTransitions>(numTransitions_);
        m_transitionNumber_ = ::zserio::createOptionalArray<ZserioArrayType_transitionNumber>(::std::forward<ZSERIO_T_transitionNumber>(transitionNumber_));
    }

    explicit IntersectionTransition(::zserio::BitStreamReader& in,
            ::nds::road::reference::types::TransitionReferenceType type_, const allocator_type& allocator = allocator_type());
    explicit IntersectionTransition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::road::reference::types::TransitionReferenceType type_, const allocator_type& allocator = allocator_type());

    ~IntersectionTransition() = default;

    IntersectionTransition(const IntersectionTransition& other);
    IntersectionTransition& operator=(const IntersectionTransition& other);

    IntersectionTransition(IntersectionTransition&& other);
    IntersectionTransition& operator=(IntersectionTransition&& other);

    IntersectionTransition(::zserio::PropagateAllocatorT,
            const IntersectionTransition& other, const allocator_type& allocator);

    void initialize(
            ::nds::road::reference::types::TransitionReferenceType type_);
    bool isInitialized() const;

    ::nds::road::reference::types::TransitionReferenceType getType() const;

    ::nds::road::reference::types::IntersectionId getIntersectionId() const;
    void setIntersectionId(::nds::road::reference::types::IntersectionId intersectionId_);

    uint32_t getNumTransitions() const;
    void setNumTransitions(uint32_t numTransitions_);
    bool isNumTransitionsUsed() const;
    bool isNumTransitionsSet() const;
    void resetNumTransitions();

    const ::zserio::vector<::nds::road::reference::types::TransitionNumber>& getTransitionNumber() const;
    ::zserio::vector<::nds::road::reference::types::TransitionNumber>& getTransitionNumber();
    void setTransitionNumber(const ::zserio::vector<::nds::road::reference::types::TransitionNumber>& transitionNumber_);
    void setTransitionNumber(::zserio::vector<::nds::road::reference::types::TransitionNumber>&& transitionNumber_);
    bool isTransitionNumberUsed() const;
    bool isTransitionNumberSet() const;
    void resetTransitionNumber();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const IntersectionTransition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_transitionNumber = ::zserio::Array<::zserio::vector<::nds::road::reference::types::TransitionNumber>, ::zserio::VarIntNNArrayTraits<::nds::road::reference::types::TransitionNumber>, ::zserio::ArrayType::NORMAL>;

    ::nds::road::reference::types::IntersectionId readIntersectionId(::zserio::BitStreamReader& in);
    ::nds::road::reference::types::IntersectionId readIntersectionId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumTransitions(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumTransitions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_transitionNumber> readTransitionNumber(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_transitionNumber> readTransitionNumber(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::road::reference::types::TransitionReferenceType m_type_;
    bool m_isInitialized;
    ::nds::road::reference::types::IntersectionId m_intersectionId_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_numTransitions_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_transitionNumber> m_transitionNumber_;
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_INTERSECTION_TRANSITION_H
