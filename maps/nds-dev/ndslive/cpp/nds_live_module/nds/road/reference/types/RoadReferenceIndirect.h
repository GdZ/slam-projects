/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_ROAD_REFERENCE_INDIRECT_H
#define NDS_ROAD_REFERENCE_TYPES_ROAD_REFERENCE_INDIRECT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/location/LocationGeometry.h>
#include <nds/core/location/LocationSegment.h>
#include <nds/road/reference/types/ReferenceGeometryIntersectionZLevel.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class RoadReferenceIndirect
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::location::LocationGeometry::ZserioPackingContext& getReferenceGeometry()
        {
            return m_referenceGeometry_;
        }

    private:
        ::nds::core::location::LocationGeometry::ZserioPackingContext m_referenceGeometry_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadReferenceIndirect() noexcept :
            RoadReferenceIndirect(allocator_type())
    {}

    explicit RoadReferenceIndirect(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_referenceGeometry = ::nds::core::location::LocationGeometry,
            typename ZSERIO_T_referenceSegments = ::zserio::vector<::nds::core::location::LocationSegment>,
            typename ZSERIO_T_intersectionZLevel = ::zserio::vector<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel>>
    RoadReferenceIndirect(
            bool isDirected_,
            ZSERIO_T_referenceGeometry&& referenceGeometry_,
            ZSERIO_T_referenceSegments&& referenceSegments_,
            ZSERIO_T_intersectionZLevel&& intersectionZLevel_,
            const allocator_type& allocator = allocator_type()) :
            RoadReferenceIndirect(allocator)
    {
        m_isDirected_ = isDirected_;
        m_referenceGeometry_ = ::std::forward<ZSERIO_T_referenceGeometry>(referenceGeometry_);
        m_referenceSegments_ = ZserioArrayType_referenceSegments(::std::forward<ZSERIO_T_referenceSegments>(referenceSegments_));
        m_intersectionZLevel_ = ::zserio::createOptionalArray<ZserioArrayType_intersectionZLevel>(::std::forward<ZSERIO_T_intersectionZLevel>(intersectionZLevel_));
    }

    explicit RoadReferenceIndirect(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadReferenceIndirect(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadReferenceIndirect() = default;

    RoadReferenceIndirect(const RoadReferenceIndirect& other);
    RoadReferenceIndirect& operator=(const RoadReferenceIndirect& other);

    RoadReferenceIndirect(RoadReferenceIndirect&& other);
    RoadReferenceIndirect& operator=(RoadReferenceIndirect&& other);

    RoadReferenceIndirect(::zserio::PropagateAllocatorT,
            const RoadReferenceIndirect& other, const allocator_type& allocator);

    void initializeChildren();

    bool getIsDirected() const;
    void setIsDirected(bool isDirected_);

    const ::nds::core::location::LocationGeometry& getReferenceGeometry() const;
    ::nds::core::location::LocationGeometry& getReferenceGeometry();
    void setReferenceGeometry(const ::nds::core::location::LocationGeometry& referenceGeometry_);
    void setReferenceGeometry(::nds::core::location::LocationGeometry&& referenceGeometry_);

    const ::zserio::vector<::nds::core::location::LocationSegment>& getReferenceSegments() const;
    ::zserio::vector<::nds::core::location::LocationSegment>& getReferenceSegments();
    void setReferenceSegments(const ::zserio::vector<::nds::core::location::LocationSegment>& referenceSegments_);
    void setReferenceSegments(::zserio::vector<::nds::core::location::LocationSegment>&& referenceSegments_);

    const ::zserio::vector<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel>& getIntersectionZLevel() const;
    ::zserio::vector<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel>& getIntersectionZLevel();
    void setIntersectionZLevel(const ::zserio::vector<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel>& intersectionZLevel_);
    void setIntersectionZLevel(::zserio::vector<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel>&& intersectionZLevel_);
    bool isIntersectionZLevelUsed() const;
    bool isIntersectionZLevelSet() const;
    void resetIntersectionZLevel();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadReferenceIndirect& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_referenceSegments
    {
    public:
        using OwnerType = RoadReferenceIndirect;

        static void initializeElement(RoadReferenceIndirect& owner,
                ::nds::core::location::LocationSegment& element, size_t index);
    };

    class ZserioElementFactory_referenceSegments
    {
    public:
        using OwnerType = RoadReferenceIndirect;

        static void create(RoadReferenceIndirect& owner,
                ::zserio::vector<::nds::core::location::LocationSegment>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadReferenceIndirect& owner,
                ::zserio::vector<::nds::core::location::LocationSegment>& array,
                ::nds::core::location::LocationSegment::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_intersectionZLevel
    {
    public:
        using OwnerType = RoadReferenceIndirect;

        static void create(RoadReferenceIndirect& owner,
                ::zserio::vector<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadReferenceIndirect& owner,
                ::zserio::vector<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel>& array,
                ::nds::road::reference::types::ReferenceGeometryIntersectionZLevel::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_referenceSegments = ::zserio::Array<::zserio::vector<::nds::core::location::LocationSegment>, ::zserio::ObjectArrayTraits<::nds::core::location::LocationSegment, ZserioElementFactory_referenceSegments>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_referenceSegments>;
    using ZserioArrayType_intersectionZLevel = ::zserio::Array<::zserio::vector<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel>, ::zserio::ObjectArrayTraits<::nds::road::reference::types::ReferenceGeometryIntersectionZLevel, ZserioElementFactory_intersectionZLevel>, ::zserio::ArrayType::NORMAL>;

    bool readIsDirected(::zserio::BitStreamReader& in);
    ::nds::core::location::LocationGeometry readReferenceGeometry(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::location::LocationGeometry readReferenceGeometry(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_referenceSegments readReferenceSegments(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_referenceSegments readReferenceSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_intersectionZLevel> readIntersectionZLevel(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_intersectionZLevel> readIntersectionZLevel(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    bool m_isDirected_;
    ::nds::core::location::LocationGeometry m_referenceGeometry_;
    ZserioArrayType_referenceSegments m_referenceSegments_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_intersectionZLevel> m_intersectionZLevel_;
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_ROAD_REFERENCE_INDIRECT_H
