/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_POSITION_VALIDITY_H
#define NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_POSITION_VALIDITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/location/RoadLocationIdPosition.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace location
{

class RoadLocationPositionValidity
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumPositions()
        {
            return m_numPositions_;
        }

    private:
        ::zserio::DeltaContext m_numPositions_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadLocationPositionValidity() noexcept :
            RoadLocationPositionValidity(allocator_type())
    {}

    explicit RoadLocationPositionValidity(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_positions = ::zserio::vector<::nds::core::location::RoadLocationIdPosition>>
    RoadLocationPositionValidity(
            uint32_t numPositions_,
            ZSERIO_T_positions&& positions_,
            const allocator_type& allocator = allocator_type()) :
            RoadLocationPositionValidity(allocator)
    {
        m_numPositions_ = numPositions_;
        m_positions_ = ZserioArrayType_positions(::std::forward<ZSERIO_T_positions>(positions_));
    }

    explicit RoadLocationPositionValidity(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit RoadLocationPositionValidity(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~RoadLocationPositionValidity() = default;

    RoadLocationPositionValidity(const RoadLocationPositionValidity& other);
    RoadLocationPositionValidity& operator=(const RoadLocationPositionValidity& other);

    RoadLocationPositionValidity(RoadLocationPositionValidity&& other);
    RoadLocationPositionValidity& operator=(RoadLocationPositionValidity&& other);

    RoadLocationPositionValidity(::zserio::PropagateAllocatorT,
            const RoadLocationPositionValidity& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;

    ::nds::core::geometry::CoordShift getShift() const;

    uint32_t getNumPositions() const;
    void setNumPositions(uint32_t numPositions_);

    const ::zserio::vector<::nds::core::location::RoadLocationIdPosition>& getPositions() const;
    ::zserio::vector<::nds::core::location::RoadLocationIdPosition>& getPositions();
    void setPositions(const ::zserio::vector<::nds::core::location::RoadLocationIdPosition>& positions_);
    void setPositions(::zserio::vector<::nds::core::location::RoadLocationIdPosition>&& positions_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadLocationPositionValidity& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_positions = ::zserio::Array<::zserio::vector<::nds::core::location::RoadLocationIdPosition>, ::zserio::VarIntNNArrayTraits<::nds::core::location::RoadLocationIdPosition>, ::zserio::ArrayType::NORMAL>;

    uint32_t readNumPositions(::zserio::BitStreamReader& in);
    uint32_t readNumPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_positions readPositions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_positions readPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    uint32_t m_numPositions_;
    ZserioArrayType_positions m_positions_;
};

} // namespace location
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_POSITION_VALIDITY_H
