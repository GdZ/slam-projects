/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_RANGE_VALIDITY_H
#define NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_RANGE_VALIDITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/road/reference/location/RoadLocationRangeChoice.h>
#include <nds/road/reference/location/RoadLocationRangeValidityType.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace location
{

class RoadLocationRangeValidity
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getNumRanges()
        {
            return m_numRanges_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_numRanges_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadLocationRangeValidity() noexcept :
            RoadLocationRangeValidity(allocator_type())
    {}

    explicit RoadLocationRangeValidity(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_numRanges = uint32_t,
            typename ZSERIO_T_ranges = ::zserio::vector<::nds::road::reference::location::RoadLocationRangeChoice>>
    RoadLocationRangeValidity(
            ::nds::road::reference::location::RoadLocationRangeValidityType type_,
            ZSERIO_T_numRanges&& numRanges_,
            ZSERIO_T_ranges&& ranges_,
            const allocator_type& allocator = allocator_type()) :
            RoadLocationRangeValidity(allocator)
    {
        m_type_ = type_;
        m_numRanges_ = ::std::forward<ZSERIO_T_numRanges>(numRanges_);
        m_ranges_ = ::zserio::createOptionalArray<ZserioArrayType_ranges>(::std::forward<ZSERIO_T_ranges>(ranges_));
    }

    explicit RoadLocationRangeValidity(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit RoadLocationRangeValidity(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~RoadLocationRangeValidity() = default;

    RoadLocationRangeValidity(const RoadLocationRangeValidity& other);
    RoadLocationRangeValidity& operator=(const RoadLocationRangeValidity& other);

    RoadLocationRangeValidity(RoadLocationRangeValidity&& other);
    RoadLocationRangeValidity& operator=(RoadLocationRangeValidity&& other);

    RoadLocationRangeValidity(::zserio::PropagateAllocatorT,
            const RoadLocationRangeValidity& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    ::nds::road::reference::location::RoadLocationRangeValidityType getType() const;
    void setType(::nds::road::reference::location::RoadLocationRangeValidityType type_);

    uint32_t getNumRanges() const;
    void setNumRanges(uint32_t numRanges_);
    bool isNumRangesUsed() const;
    bool isNumRangesSet() const;
    void resetNumRanges();

    const ::zserio::vector<::nds::road::reference::location::RoadLocationRangeChoice>& getRanges() const;
    ::zserio::vector<::nds::road::reference::location::RoadLocationRangeChoice>& getRanges();
    void setRanges(const ::zserio::vector<::nds::road::reference::location::RoadLocationRangeChoice>& ranges_);
    void setRanges(::zserio::vector<::nds::road::reference::location::RoadLocationRangeChoice>&& ranges_);
    bool isRangesUsed() const;
    bool isRangesSet() const;
    void resetRanges();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadLocationRangeValidity& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_ranges
    {
    public:
        using OwnerType = RoadLocationRangeValidity;

        static void initializeElement(RoadLocationRangeValidity& owner,
                ::nds::road::reference::location::RoadLocationRangeChoice& element, size_t index);
    };

    class ZserioElementFactory_ranges
    {
    public:
        using OwnerType = RoadLocationRangeValidity;

        static void create(RoadLocationRangeValidity& owner,
                ::zserio::vector<::nds::road::reference::location::RoadLocationRangeChoice>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadLocationRangeValidity& owner,
                ::zserio::vector<::nds::road::reference::location::RoadLocationRangeChoice>& array,
                ::nds::road::reference::location::RoadLocationRangeChoice::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_ranges = ::zserio::Array<::zserio::vector<::nds::road::reference::location::RoadLocationRangeChoice>, ::zserio::ObjectArrayTraits<::nds::road::reference::location::RoadLocationRangeChoice, ZserioElementFactory_ranges>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_ranges>;

    ::nds::road::reference::location::RoadLocationRangeValidityType readType(::zserio::BitStreamReader& in);
    ::nds::road::reference::location::RoadLocationRangeValidityType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumRanges(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumRanges(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_ranges> readRanges(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_ranges> readRanges(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::nds::road::reference::location::RoadLocationRangeValidityType m_type_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_numRanges_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_ranges> m_ranges_;
};

} // namespace location
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_RANGE_VALIDITY_H
