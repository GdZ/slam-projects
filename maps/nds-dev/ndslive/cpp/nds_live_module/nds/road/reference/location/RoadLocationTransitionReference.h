/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_TRANSITION_REFERENCE_H
#define NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_TRANSITION_REFERENCE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/location/RoadLocationId.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace location
{

class RoadLocationTransitionReference
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::location::RoadLocationId::ZserioPackingContext& getStartLocation()
        {
            return m_startLocation_;
        }

        ::nds::core::location::RoadLocationId::ZserioPackingContext& getEndLocation()
        {
            return m_endLocation_;
        }

    private:
        ::nds::core::location::RoadLocationId::ZserioPackingContext m_startLocation_;
        ::nds::core::location::RoadLocationId::ZserioPackingContext m_endLocation_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadLocationTransitionReference() noexcept :
            RoadLocationTransitionReference(allocator_type())
    {}

    explicit RoadLocationTransitionReference(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_startLocation = ::nds::core::location::RoadLocationId,
            typename ZSERIO_T_endLocation = ::nds::core::location::RoadLocationId,
            typename ZSERIO_T_intermediateLocations = ::zserio::vector<::nds::core::location::RoadLocationId>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_startLocation, RoadLocationTransitionReference, allocator_type> = 0>
    RoadLocationTransitionReference(
            ZSERIO_T_startLocation&& startLocation_,
            ZSERIO_T_endLocation&& endLocation_,
            ZSERIO_T_intermediateLocations&& intermediateLocations_,
            const allocator_type& allocator = allocator_type()) :
            RoadLocationTransitionReference(allocator)
    {
        m_startLocation_ = ::std::forward<ZSERIO_T_startLocation>(startLocation_);
        m_endLocation_ = ::std::forward<ZSERIO_T_endLocation>(endLocation_);
        m_intermediateLocations_ = ::zserio::createOptionalArray<ZserioArrayType_intermediateLocations>(::std::forward<ZSERIO_T_intermediateLocations>(intermediateLocations_));
    }

    explicit RoadLocationTransitionReference(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadLocationTransitionReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadLocationTransitionReference() = default;

    RoadLocationTransitionReference(const RoadLocationTransitionReference&) = default;
    RoadLocationTransitionReference& operator=(const RoadLocationTransitionReference&) = default;

    RoadLocationTransitionReference(RoadLocationTransitionReference&&) = default;
    RoadLocationTransitionReference& operator=(RoadLocationTransitionReference&&) = default;

    RoadLocationTransitionReference(::zserio::PropagateAllocatorT,
            const RoadLocationTransitionReference& other, const allocator_type& allocator);

    const ::nds::core::location::RoadLocationId& getStartLocation() const;
    ::nds::core::location::RoadLocationId& getStartLocation();
    void setStartLocation(const ::nds::core::location::RoadLocationId& startLocation_);
    void setStartLocation(::nds::core::location::RoadLocationId&& startLocation_);

    const ::nds::core::location::RoadLocationId& getEndLocation() const;
    ::nds::core::location::RoadLocationId& getEndLocation();
    void setEndLocation(const ::nds::core::location::RoadLocationId& endLocation_);
    void setEndLocation(::nds::core::location::RoadLocationId&& endLocation_);

    const ::zserio::vector<::nds::core::location::RoadLocationId>& getIntermediateLocations() const;
    ::zserio::vector<::nds::core::location::RoadLocationId>& getIntermediateLocations();
    void setIntermediateLocations(const ::zserio::vector<::nds::core::location::RoadLocationId>& intermediateLocations_);
    void setIntermediateLocations(::zserio::vector<::nds::core::location::RoadLocationId>&& intermediateLocations_);
    bool isIntermediateLocationsUsed() const;
    bool isIntermediateLocationsSet() const;
    void resetIntermediateLocations();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadLocationTransitionReference& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_intermediateLocations
    {
    public:
        using OwnerType = RoadLocationTransitionReference;

        static void create(RoadLocationTransitionReference& owner,
                ::zserio::vector<::nds::core::location::RoadLocationId>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadLocationTransitionReference& owner,
                ::zserio::vector<::nds::core::location::RoadLocationId>& array,
                ::nds::core::location::RoadLocationId::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_intermediateLocations = ::zserio::Array<::zserio::vector<::nds::core::location::RoadLocationId>, ::zserio::ObjectArrayTraits<::nds::core::location::RoadLocationId, ZserioElementFactory_intermediateLocations>, ::zserio::ArrayType::AUTO>;

    ::nds::core::location::RoadLocationId readStartLocation(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::location::RoadLocationId readStartLocation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::location::RoadLocationId readEndLocation(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::location::RoadLocationId readEndLocation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_intermediateLocations> readIntermediateLocations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_intermediateLocations> readIntermediateLocations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::location::RoadLocationId m_startLocation_;
    ::nds::core::location::RoadLocationId m_endLocation_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_intermediateLocations> m_intermediateLocations_;
};

} // namespace location
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_LOCATION_ROAD_LOCATION_TRANSITION_REFERENCE_H
