/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_TRANSITION_GEO_PATH_REFERENCE_H
#define NDS_ROAD_REFERENCE_TYPES_TRANSITION_GEO_PATH_REFERENCE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Line2D.h>
#include <nds/road/reference/types/DirectedRoadReference.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class TransitionGeoPathReference
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::road::reference::types::DirectedRoadReference::ZserioPackingContext& getStartRoad()
        {
            return m_startRoad_;
        }

        ::nds::core::geometry::Line2D::ZserioPackingContext& getPath()
        {
            return m_path_;
        }

    private:
        ::nds::road::reference::types::DirectedRoadReference::ZserioPackingContext m_startRoad_;
        ::nds::core::geometry::Line2D::ZserioPackingContext m_path_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TransitionGeoPathReference() noexcept :
            TransitionGeoPathReference(allocator_type())
    {}

    explicit TransitionGeoPathReference(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_startRoad = ::nds::road::reference::types::DirectedRoadReference,
            typename ZSERIO_T_path = ::nds::core::geometry::Line2D,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_startRoad, TransitionGeoPathReference, allocator_type> = 0>
    TransitionGeoPathReference(
            ZSERIO_T_startRoad&& startRoad_,
            ZSERIO_T_path&& path_,
            const allocator_type& allocator = allocator_type()) :
            TransitionGeoPathReference(allocator)
    {
        m_startRoad_ = ::std::forward<ZSERIO_T_startRoad>(startRoad_);
        m_path_ = ::std::forward<ZSERIO_T_path>(path_);
    }

    explicit TransitionGeoPathReference(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TransitionGeoPathReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TransitionGeoPathReference() = default;

    TransitionGeoPathReference(const TransitionGeoPathReference& other);
    TransitionGeoPathReference& operator=(const TransitionGeoPathReference& other);

    TransitionGeoPathReference(TransitionGeoPathReference&& other);
    TransitionGeoPathReference& operator=(TransitionGeoPathReference&& other);

    TransitionGeoPathReference(::zserio::PropagateAllocatorT,
            const TransitionGeoPathReference& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::road::reference::types::DirectedRoadReference& getStartRoad() const;
    ::nds::road::reference::types::DirectedRoadReference& getStartRoad();
    void setStartRoad(const ::nds::road::reference::types::DirectedRoadReference& startRoad_);
    void setStartRoad(::nds::road::reference::types::DirectedRoadReference&& startRoad_);

    const ::nds::core::geometry::Line2D& getPath() const;
    ::nds::core::geometry::Line2D& getPath();
    void setPath(const ::nds::core::geometry::Line2D& path_);
    void setPath(::nds::core::geometry::Line2D&& path_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TransitionGeoPathReference& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::road::reference::types::DirectedRoadReference readStartRoad(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::road::reference::types::DirectedRoadReference readStartRoad(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::geometry::Line2D readPath(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Line2D readPath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::road::reference::types::DirectedRoadReference m_startRoad_;
    ::nds::core::geometry::Line2D m_path_;
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_TRANSITION_GEO_PATH_REFERENCE_H
