/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_TRANSITION_VALIDITY_H
#define NDS_ROAD_REFERENCE_TYPES_TRANSITION_VALIDITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class TransitionValidity
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    TransitionValidity() noexcept :
            TransitionValidity(allocator_type())
    {}

    explicit TransitionValidity(const allocator_type& allocator) noexcept;

    explicit TransitionValidity(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TransitionValidity() = default;

    TransitionValidity(const TransitionValidity&) = default;
    TransitionValidity& operator=(const TransitionValidity&) = default;

    TransitionValidity(TransitionValidity&&) = default;
    TransitionValidity& operator=(TransitionValidity&&) = default;

    TransitionValidity(::zserio::PropagateAllocatorT,
            const TransitionValidity& other, const allocator_type& allocator);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const TransitionValidity& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_TRANSITION_VALIDITY_H
