/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_REFERENCE_GEOMETRY_INTERSECTION_ZLEVEL_H
#define NDS_ROAD_REFERENCE_TYPES_REFERENCE_GEOMETRY_INTERSECTION_ZLEVEL_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/road/reference/types/IntersectionZLevel.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class ReferenceGeometryIntersectionZLevel
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getValue()
        {
            return m_value_;
        }

    private:
        ::zserio::DeltaContext m_value_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ReferenceGeometryIntersectionZLevel() noexcept :
            ReferenceGeometryIntersectionZLevel(allocator_type())
    {}

    explicit ReferenceGeometryIntersectionZLevel(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_value = ::nds::road::reference::types::IntersectionZLevel>
    ReferenceGeometryIntersectionZLevel(
            bool hasValue_,
            ZSERIO_T_value&& value_,
            const allocator_type& allocator = allocator_type()) :
            ReferenceGeometryIntersectionZLevel(allocator)
    {
        m_hasValue_ = hasValue_;
        m_value_ = ::std::forward<ZSERIO_T_value>(value_);
    }

    explicit ReferenceGeometryIntersectionZLevel(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ReferenceGeometryIntersectionZLevel(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ReferenceGeometryIntersectionZLevel() = default;

    ReferenceGeometryIntersectionZLevel(const ReferenceGeometryIntersectionZLevel&) = default;
    ReferenceGeometryIntersectionZLevel& operator=(const ReferenceGeometryIntersectionZLevel&) = default;

    ReferenceGeometryIntersectionZLevel(ReferenceGeometryIntersectionZLevel&&) = default;
    ReferenceGeometryIntersectionZLevel& operator=(ReferenceGeometryIntersectionZLevel&&) = default;

    ReferenceGeometryIntersectionZLevel(::zserio::PropagateAllocatorT,
            const ReferenceGeometryIntersectionZLevel& other, const allocator_type& allocator);

    bool getHasValue() const;
    void setHasValue(bool hasValue_);

    ::nds::road::reference::types::IntersectionZLevel getValue() const;
    void setValue(::nds::road::reference::types::IntersectionZLevel value_);
    bool isValueUsed() const;
    bool isValueSet() const;
    void resetValue();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ReferenceGeometryIntersectionZLevel& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    bool readHasValue(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::IntersectionZLevel> readValue(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::IntersectionZLevel> readValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    bool m_hasValue_;
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::IntersectionZLevel> m_value_;
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_REFERENCE_GEOMETRY_INTERSECTION_ZLEVEL_H
