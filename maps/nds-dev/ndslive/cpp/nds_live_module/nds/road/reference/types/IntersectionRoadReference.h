/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_INTERSECTION_ROAD_REFERENCE_H
#define NDS_ROAD_REFERENCE_TYPES_INTERSECTION_ROAD_REFERENCE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/IntersectionSector.h>
#include <nds/road/reference/types/DirectedRoadReference.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class IntersectionRoadReference
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::road::reference::types::DirectedRoadReference::ZserioPackingContext& getRoad()
        {
            return m_road_;
        }

        ::zserio::DeltaContext& getAngle()
        {
            return m_angle_;
        }

    private:
        ::nds::road::reference::types::DirectedRoadReference::ZserioPackingContext m_road_;
        ::zserio::DeltaContext m_angle_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    IntersectionRoadReference() noexcept :
            IntersectionRoadReference(allocator_type())
    {}

    explicit IntersectionRoadReference(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_road = ::nds::road::reference::types::DirectedRoadReference,
            typename ZSERIO_T_angle = ::nds::core::types::IntersectionSector,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_road, IntersectionRoadReference, allocator_type> = 0>
    IntersectionRoadReference(
            ZSERIO_T_road&& road_,
            ZSERIO_T_angle&& angle_,
            const allocator_type& allocator = allocator_type()) :
            IntersectionRoadReference(allocator)
    {
        m_road_ = ::std::forward<ZSERIO_T_road>(road_);
        m_angle_ = ::std::forward<ZSERIO_T_angle>(angle_);
    }

    explicit IntersectionRoadReference(::zserio::BitStreamReader& in,
            bool isArtificial_, const allocator_type& allocator = allocator_type());
    explicit IntersectionRoadReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            bool isArtificial_, const allocator_type& allocator = allocator_type());

    ~IntersectionRoadReference() = default;

    IntersectionRoadReference(const IntersectionRoadReference& other);
    IntersectionRoadReference& operator=(const IntersectionRoadReference& other);

    IntersectionRoadReference(IntersectionRoadReference&& other);
    IntersectionRoadReference& operator=(IntersectionRoadReference&& other);

    IntersectionRoadReference(::zserio::PropagateAllocatorT,
            const IntersectionRoadReference& other, const allocator_type& allocator);

    void initialize(
            bool isArtificial_);
    bool isInitialized() const;

    bool getIsArtificial() const;

    const ::nds::road::reference::types::DirectedRoadReference& getRoad() const;
    ::nds::road::reference::types::DirectedRoadReference& getRoad();
    void setRoad(const ::nds::road::reference::types::DirectedRoadReference& road_);
    void setRoad(::nds::road::reference::types::DirectedRoadReference&& road_);

    ::nds::core::types::IntersectionSector getAngle() const;
    void setAngle(::nds::core::types::IntersectionSector angle_);
    bool isAngleUsed() const;
    bool isAngleSet() const;
    void resetAngle();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const IntersectionRoadReference& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::road::reference::types::DirectedRoadReference readRoad(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::road::reference::types::DirectedRoadReference readRoad(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::IntersectionSector> readAngle(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::IntersectionSector> readAngle(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    bool m_isArtificial_;
    bool m_isInitialized;
    ::nds::road::reference::types::DirectedRoadReference m_road_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::IntersectionSector> m_angle_;
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_INTERSECTION_ROAD_REFERENCE_H
