/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_REFERENCE_TYPES_ROAD_VALIDITY_RANGE_H
#define NDS_ROAD_REFERENCE_TYPES_ROAD_VALIDITY_RANGE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/road/reference/types/RoadValidityPosition.h>

namespace nds
{
namespace road
{
namespace reference
{
namespace types
{

class RoadValidityRange
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::road::reference::types::RoadValidityPosition::ZserioPackingContext& getStart()
        {
            return m_start_;
        }

        ::nds::road::reference::types::RoadValidityPosition::ZserioPackingContext& getEnd()
        {
            return m_end_;
        }

    private:
        ::nds::road::reference::types::RoadValidityPosition::ZserioPackingContext m_start_;
        ::nds::road::reference::types::RoadValidityPosition::ZserioPackingContext m_end_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadValidityRange() noexcept :
            RoadValidityRange(allocator_type())
    {}

    explicit RoadValidityRange(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_start = ::nds::road::reference::types::RoadValidityPosition,
            typename ZSERIO_T_end = ::nds::road::reference::types::RoadValidityPosition,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_start, RoadValidityRange, allocator_type> = 0>
    RoadValidityRange(
            ZSERIO_T_start&& start_,
            ZSERIO_T_end&& end_,
            const allocator_type& allocator = allocator_type()) :
            RoadValidityRange(allocator)
    {
        m_start_ = ::std::forward<ZSERIO_T_start>(start_);
        m_end_ = ::std::forward<ZSERIO_T_end>(end_);
    }

    explicit RoadValidityRange(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit RoadValidityRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~RoadValidityRange() = default;

    RoadValidityRange(const RoadValidityRange& other);
    RoadValidityRange& operator=(const RoadValidityRange& other);

    RoadValidityRange(RoadValidityRange&& other);
    RoadValidityRange& operator=(RoadValidityRange&& other);

    RoadValidityRange(::zserio::PropagateAllocatorT,
            const RoadValidityRange& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    const ::nds::road::reference::types::RoadValidityPosition& getStart() const;
    ::nds::road::reference::types::RoadValidityPosition& getStart();
    void setStart(const ::nds::road::reference::types::RoadValidityPosition& start_);
    void setStart(::nds::road::reference::types::RoadValidityPosition&& start_);

    const ::nds::road::reference::types::RoadValidityPosition& getEnd() const;
    ::nds::road::reference::types::RoadValidityPosition& getEnd();
    void setEnd(const ::nds::road::reference::types::RoadValidityPosition& end_);
    void setEnd(::nds::road::reference::types::RoadValidityPosition&& end_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadValidityRange& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::road::reference::types::RoadValidityPosition readStart(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::road::reference::types::RoadValidityPosition readStart(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::road::reference::types::RoadValidityPosition readEnd(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::road::reference::types::RoadValidityPosition readEnd(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::nds::road::reference::types::RoadValidityPosition m_start_;
    ::nds::road::reference::types::RoadValidityPosition m_end_;
};

} // namespace types
} // namespace reference
} // namespace road
} // namespace nds

#endif // NDS_ROAD_REFERENCE_TYPES_ROAD_VALIDITY_RANGE_H
