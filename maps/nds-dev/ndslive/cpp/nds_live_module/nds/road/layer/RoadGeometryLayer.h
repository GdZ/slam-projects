/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_LAYER_ROAD_GEOMETRY_LAYER_H
#define NDS_ROAD_LAYER_ROAD_GEOMETRY_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/GeometryLayerType.h>
#include <nds/road/instantiations/RoadShapesLayer.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace road
{
namespace layer
{

class RoadGeometryLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::road::instantiations::RoadShapesLayer::ZserioPackingContext& getRoadShapes()
        {
            return m_roadShapes_;
        }

    private:
        ::nds::road::instantiations::RoadShapesLayer::ZserioPackingContext m_roadShapes_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadGeometryLayer() noexcept :
            RoadGeometryLayer(allocator_type())
    {}

    explicit RoadGeometryLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadShapes = ::nds::road::instantiations::RoadShapesLayer,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_roadShapes, RoadGeometryLayer, allocator_type> = 0>
    explicit RoadGeometryLayer(
            ZSERIO_T_roadShapes&& roadShapes_,
            const allocator_type& allocator = allocator_type()) :
            RoadGeometryLayer(allocator)
    {
        m_roadShapes_ = ::std::forward<ZSERIO_T_roadShapes>(roadShapes_);
    }

    explicit RoadGeometryLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadGeometryLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadGeometryLayer() = default;

    RoadGeometryLayer(const RoadGeometryLayer& other);
    RoadGeometryLayer& operator=(const RoadGeometryLayer& other);

    RoadGeometryLayer(RoadGeometryLayer&& other);
    RoadGeometryLayer& operator=(RoadGeometryLayer&& other);

    RoadGeometryLayer(::zserio::PropagateAllocatorT,
            const RoadGeometryLayer& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::road::instantiations::RoadShapesLayer& getRoadShapes() const;
    ::nds::road::instantiations::RoadShapesLayer& getRoadShapes();
    void setRoadShapes(const ::nds::road::instantiations::RoadShapesLayer& roadShapes_);
    void setRoadShapes(::nds::road::instantiations::RoadShapesLayer&& roadShapes_);

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadGeometryLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::road::instantiations::RoadShapesLayer readRoadShapes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::road::instantiations::RoadShapesLayer readRoadShapes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::road::instantiations::RoadShapesLayer m_roadShapes_;
};

} // namespace layer
} // namespace road
} // namespace nds

#endif // NDS_ROAD_LAYER_ROAD_GEOMETRY_LAYER_H
