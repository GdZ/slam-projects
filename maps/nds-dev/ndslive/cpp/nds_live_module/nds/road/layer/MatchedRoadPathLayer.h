/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_ROAD_LAYER_MATCHED_ROAD_PATH_LAYER_H
#define NDS_ROAD_LAYER_MATCHED_ROAD_PATH_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/road/road/MatchedRoadSegment.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace road
{
namespace layer
{

class MatchedRoadPathLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumSegments()
        {
            return m_numSegments_;
        }

    private:
        ::zserio::DeltaContext m_numSegments_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    MatchedRoadPathLayer() noexcept :
            MatchedRoadPathLayer(allocator_type())
    {}

    explicit MatchedRoadPathLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_segments = ::zserio::vector<::nds::road::road::MatchedRoadSegment>>
    MatchedRoadPathLayer(
            uint16_t numSegments_,
            ZSERIO_T_segments&& segments_,
            bool pathEnds_,
            const allocator_type& allocator = allocator_type()) :
            MatchedRoadPathLayer(allocator)
    {
        m_numSegments_ = numSegments_;
        m_segments_ = ZserioArrayType_segments(::std::forward<ZSERIO_T_segments>(segments_));
        m_pathEnds_ = pathEnds_;
    }

    explicit MatchedRoadPathLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit MatchedRoadPathLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~MatchedRoadPathLayer() = default;

    MatchedRoadPathLayer(const MatchedRoadPathLayer&) = default;
    MatchedRoadPathLayer& operator=(const MatchedRoadPathLayer&) = default;

    MatchedRoadPathLayer(MatchedRoadPathLayer&&) = default;
    MatchedRoadPathLayer& operator=(MatchedRoadPathLayer&&) = default;

    MatchedRoadPathLayer(::zserio::PropagateAllocatorT,
            const MatchedRoadPathLayer& other, const allocator_type& allocator);

    uint16_t getNumSegments() const;
    void setNumSegments(uint16_t numSegments_);

    const ::zserio::vector<::nds::road::road::MatchedRoadSegment>& getSegments() const;
    ::zserio::vector<::nds::road::road::MatchedRoadSegment>& getSegments();
    void setSegments(const ::zserio::vector<::nds::road::road::MatchedRoadSegment>& segments_);
    void setSegments(::zserio::vector<::nds::road::road::MatchedRoadSegment>&& segments_);

    bool getPathEnds() const;
    void setPathEnds(bool pathEnds_);

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const MatchedRoadPathLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_segments
    {
    public:
        using OwnerType = MatchedRoadPathLayer;

        static void create(MatchedRoadPathLayer& owner,
                ::zserio::vector<::nds::road::road::MatchedRoadSegment>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(MatchedRoadPathLayer& owner,
                ::zserio::vector<::nds::road::road::MatchedRoadSegment>& array,
                ::nds::road::road::MatchedRoadSegment::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_segments = ::zserio::Array<::zserio::vector<::nds::road::road::MatchedRoadSegment>, ::zserio::ObjectArrayTraits<::nds::road::road::MatchedRoadSegment, ZserioElementFactory_segments>, ::zserio::ArrayType::NORMAL>;

    uint16_t readNumSegments(::zserio::BitStreamReader& in);
    uint16_t readNumSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_segments readSegments(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_segments readSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readPathEnds(::zserio::BitStreamReader& in);

    uint16_t m_numSegments_;
    ZserioArrayType_segments m_segments_;
    bool m_pathEnds_;
};

} // namespace layer
} // namespace road
} // namespace nds

#endif // NDS_ROAD_LAYER_MATCHED_ROAD_PATH_LAYER_H
