/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/instantiations/AreaDisplayGeometryLayer.h>

namespace nds
{
namespace display
{
namespace instantiations
{

AreaDisplayGeometryLayer::AreaDisplayGeometryLayer(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_coordShiftXY_(::nds::core::geometry::CoordShift()),
        m_coordShiftZ_(::nds::core::geometry::CoordShift()),
        m_numElements_(uint32_t()),
        m_identifier_(::zserio::NullOpt),
        m_types_(::zserio::NullOpt),
        m_buffers_(allocator)
{
}

AreaDisplayGeometryLayer::AreaDisplayGeometryLayer(::zserio::BitStreamReader& in,
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_type_(type_),
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(in)),
        m_coordShiftZ_(readCoordShiftZ(in)),
        m_numElements_(readNumElements(in)),
        m_identifier_(readIdentifier(in, allocator)),
        m_types_(readTypes(in, allocator)),
        m_buffers_(readBuffers(in, allocator))
{
}

AreaDisplayGeometryLayer::AreaDisplayGeometryLayer(AreaDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_type_(type_),
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(context, in)),
        m_coordShiftZ_(readCoordShiftZ(context, in)),
        m_numElements_(readNumElements(context, in)),
        m_identifier_(readIdentifier(context, in, allocator)),
        m_types_(readTypes(context, in, allocator)),
        m_buffers_(readBuffers(context, in, allocator))
{
}

AreaDisplayGeometryLayer::AreaDisplayGeometryLayer(const AreaDisplayGeometryLayer& other) :
        m_coordShiftXY_(other.m_coordShiftXY_),
        m_coordShiftZ_(other.m_coordShiftZ_),
        m_numElements_(other.m_numElements_),
        m_identifier_(other.m_identifier_),
        m_types_(other.m_types_),
        m_buffers_(other.m_buffers_)
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

AreaDisplayGeometryLayer& AreaDisplayGeometryLayer::operator=(const AreaDisplayGeometryLayer& other)
{
    m_coordShiftXY_ = other.m_coordShiftXY_;
    m_coordShiftZ_ = other.m_coordShiftZ_;
    m_numElements_ = other.m_numElements_;
    m_identifier_ = other.m_identifier_;
    m_types_ = other.m_types_;
    m_buffers_ = other.m_buffers_;
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

AreaDisplayGeometryLayer::AreaDisplayGeometryLayer(AreaDisplayGeometryLayer&& other) :
        m_coordShiftXY_(::std::move(other.m_coordShiftXY_)),
        m_coordShiftZ_(::std::move(other.m_coordShiftZ_)),
        m_numElements_(::std::move(other.m_numElements_)),
        m_identifier_(::std::move(other.m_identifier_)),
        m_types_(::std::move(other.m_types_)),
        m_buffers_(::std::move(other.m_buffers_))
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

AreaDisplayGeometryLayer& AreaDisplayGeometryLayer::operator=(AreaDisplayGeometryLayer&& other)
{
    m_coordShiftXY_ = ::std::move(other.m_coordShiftXY_);
    m_coordShiftZ_ = ::std::move(other.m_coordShiftZ_);
    m_numElements_ = ::std::move(other.m_numElements_);
    m_identifier_ = ::std::move(other.m_identifier_);
    m_types_ = ::std::move(other.m_types_);
    m_buffers_ = ::std::move(other.m_buffers_);
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

AreaDisplayGeometryLayer::AreaDisplayGeometryLayer(::zserio::PropagateAllocatorT,
        const AreaDisplayGeometryLayer& other, const allocator_type& allocator) :
        m_coordShiftXY_(::zserio::allocatorPropagatingCopy(other.m_coordShiftXY_, allocator)),
        m_coordShiftZ_(::zserio::allocatorPropagatingCopy(other.m_coordShiftZ_, allocator)),
        m_numElements_(::zserio::allocatorPropagatingCopy(other.m_numElements_, allocator)),
        m_identifier_(::zserio::allocatorPropagatingCopy(other.m_identifier_, allocator)),
        m_types_(::zserio::allocatorPropagatingCopy(other.m_types_, allocator)),
        m_buffers_(::zserio::allocatorPropagatingCopy(other.m_buffers_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

void AreaDisplayGeometryLayer::initialize(
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_)
{
    m_type_ = type_;
    m_hasIds_ = hasIds_;
    m_hasTypes_ = hasTypes_;
    m_isInitialized = true;

    initializeChildren();
}

bool AreaDisplayGeometryLayer::isInitialized() const
{
    return m_isInitialized;
}

void AreaDisplayGeometryLayer::initializeChildren()
{
    m_buffers_.initialize(static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()));
}

::nds::core::geometry::GeometryLayerType AreaDisplayGeometryLayer::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'AreaDisplayGeometryLayer' is not initialized!");

    return m_type_;
}

bool AreaDisplayGeometryLayer::getHasIds() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasIds' of compound 'AreaDisplayGeometryLayer' is not initialized!");

    return m_hasIds_;
}

bool AreaDisplayGeometryLayer::getHasTypes() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasTypes' of compound 'AreaDisplayGeometryLayer' is not initialized!");

    return m_hasTypes_;
}

::nds::core::geometry::CoordShift AreaDisplayGeometryLayer::getCoordShiftXY() const
{
    return m_coordShiftXY_;
}

void AreaDisplayGeometryLayer::setCoordShiftXY(::nds::core::geometry::CoordShift coordShiftXY_)
{
    m_coordShiftXY_ = coordShiftXY_;
}

::nds::core::geometry::CoordShift AreaDisplayGeometryLayer::getCoordShiftZ() const
{
    return m_coordShiftZ_;
}

void AreaDisplayGeometryLayer::setCoordShiftZ(::nds::core::geometry::CoordShift coordShiftZ_)
{
    m_coordShiftZ_ = coordShiftZ_;
}

uint32_t AreaDisplayGeometryLayer::getNumElements() const
{
    return m_numElements_;
}

void AreaDisplayGeometryLayer::setNumElements(uint32_t numElements_)
{
    m_numElements_ = numElements_;
}

::zserio::vector<::nds::display::reference::types::DisplayAreaId>& AreaDisplayGeometryLayer::getIdentifier()
{
    return m_identifier_.value().getRawArray();
}

const ::zserio::vector<::nds::display::reference::types::DisplayAreaId>& AreaDisplayGeometryLayer::getIdentifier() const
{
    return m_identifier_.value().getRawArray();
}

void AreaDisplayGeometryLayer::setIdentifier(const ::zserio::vector<::nds::display::reference::types::DisplayAreaId>& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(identifier_);
}

void AreaDisplayGeometryLayer::setIdentifier(::zserio::vector<::nds::display::reference::types::DisplayAreaId>&& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(std::move(identifier_));
}

bool AreaDisplayGeometryLayer::isIdentifierUsed() const
{
    return (getHasIds());
}

bool AreaDisplayGeometryLayer::isIdentifierSet() const
{
    return m_identifier_.hasValue();
}

void AreaDisplayGeometryLayer::resetIdentifier()
{
    m_identifier_.reset();
}

::zserio::vector<::nds::display::types::DisplayAreaType>& AreaDisplayGeometryLayer::getTypes()
{
    return m_types_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayAreaType>& AreaDisplayGeometryLayer::getTypes() const
{
    return m_types_.value().getRawArray();
}

void AreaDisplayGeometryLayer::setTypes(const ::zserio::vector<::nds::display::types::DisplayAreaType>& types_)
{
    m_types_ = ZserioArrayType_types(types_);
}

void AreaDisplayGeometryLayer::setTypes(::zserio::vector<::nds::display::types::DisplayAreaType>&& types_)
{
    m_types_ = ZserioArrayType_types(std::move(types_));
}

bool AreaDisplayGeometryLayer::isTypesUsed() const
{
    return (getHasTypes());
}

bool AreaDisplayGeometryLayer::isTypesSet() const
{
    return m_types_.hasValue();
}

void AreaDisplayGeometryLayer::resetTypes()
{
    m_types_.reset();
}

::nds::core::geometry::Buffers& AreaDisplayGeometryLayer::getBuffers()
{
    return m_buffers_;
}

const ::nds::core::geometry::Buffers& AreaDisplayGeometryLayer::getBuffers() const
{
    return m_buffers_;
}

void AreaDisplayGeometryLayer::setBuffers(const ::nds::core::geometry::Buffers& buffers_)
{
    m_buffers_ = buffers_;
}

void AreaDisplayGeometryLayer::setBuffers(::nds::core::geometry::Buffers&& buffers_)
{
    m_buffers_ = ::std::move(buffers_);
}

void AreaDisplayGeometryLayer::initPackingContext(AreaDisplayGeometryLayer::ZserioPackingContext& context) const
{
    context.getCoordShiftXY().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    context.getCoordShiftZ().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    context.getNumElements().init<::zserio::VarSizeArrayTraits>(m_numElements_);
    m_buffers_.initPackingContext(context.getBuffers());
}

size_t AreaDisplayGeometryLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(5);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_buffers_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AreaDisplayGeometryLayer::bitSizeOf(AreaDisplayGeometryLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCoordShiftZ().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_buffers_.bitSizeOf(context.getBuffers(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t AreaDisplayGeometryLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(5);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_buffers_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t AreaDisplayGeometryLayer::initializeOffsets(AreaDisplayGeometryLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCoordShiftZ().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_buffers_.initializeOffsets(context.getBuffers(), endBitPosition);

    return endBitPosition;
}

bool AreaDisplayGeometryLayer::operator==(const AreaDisplayGeometryLayer& other) const
{
    if (this != &other)
    {
        return
                (getType() == other.getType()) &&
                (getHasIds() == other.getHasIds()) &&
                (getHasTypes() == other.getHasTypes()) &&
                (m_coordShiftXY_ == other.m_coordShiftXY_) &&
                (m_coordShiftZ_ == other.m_coordShiftZ_) &&
                (m_numElements_ == other.m_numElements_) &&
                (!isIdentifierUsed() ? !other.isIdentifierUsed() : (m_identifier_ == other.m_identifier_)) &&
                (!isTypesUsed() ? !other.isTypesUsed() : (m_types_ == other.m_types_)) &&
                (m_buffers_ == other.m_buffers_);
    }

    return true;
}

uint32_t AreaDisplayGeometryLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    result = ::zserio::calcHashCode(result, getHasIds());
    result = ::zserio::calcHashCode(result, getHasTypes());
    result = ::zserio::calcHashCode(result, m_coordShiftXY_);
    result = ::zserio::calcHashCode(result, m_coordShiftZ_);
    result = ::zserio::calcHashCode(result, m_numElements_);
    if (isIdentifierUsed())
        result = ::zserio::calcHashCode(result, m_identifier_);
    if (isTypesUsed())
        result = ::zserio::calcHashCode(result, m_types_);
    result = ::zserio::calcHashCode(result, m_buffers_);

    return result;
}

void AreaDisplayGeometryLayer::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_coordShiftXY_, UINT8_C(5));

    out.writeBits(m_coordShiftZ_, UINT8_C(5));

    out.alignTo(8);
    out.writeVarSize(m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field AreaDisplayGeometryLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(*this, out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field AreaDisplayGeometryLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().writePacked(out);
    }

    out.alignTo(8);
    // check parameters
    if (m_buffers_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(getType()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field AreaDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(getType()) << "!";
    }
    if (m_buffers_.getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field AreaDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()) << "!";
    }
    if (m_buffers_.getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field AreaDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()) << "!";
    }
    if (m_buffers_.getNumElements() != static_cast<uint32_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numElements for field AreaDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getNumElements() << " != " << static_cast<uint32_t>(getNumElements()) << "!";
    }
    m_buffers_.write(out);
}

void AreaDisplayGeometryLayer::write(AreaDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getCoordShiftXY().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftXY_);

    context.getCoordShiftZ().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftZ_);

    out.alignTo(8);
    context.getNumElements().write<::zserio::VarSizeArrayTraits>(out, m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field AreaDisplayGeometryLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(*this, out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field AreaDisplayGeometryLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().writePacked(out);
    }

    out.alignTo(8);
    // check parameters
    if (m_buffers_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(getType()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field AreaDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(getType()) << "!";
    }
    if (m_buffers_.getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field AreaDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()) << "!";
    }
    if (m_buffers_.getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field AreaDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()) << "!";
    }
    if (m_buffers_.getNumElements() != static_cast<uint32_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numElements for field AreaDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getNumElements() << " != " << static_cast<uint32_t>(getNumElements()) << "!";
    }
    m_buffers_.write(context.getBuffers(), out);
}

void AreaDisplayGeometryLayer::ZserioElementFactory_identifier::create(AreaDisplayGeometryLayer&        ,
        ::zserio::vector<::nds::display::reference::types::DisplayAreaId>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void AreaDisplayGeometryLayer::ZserioElementFactory_identifier::create(AreaDisplayGeometryLayer&        ,
        ::zserio::vector<::nds::display::reference::types::DisplayAreaId>& array,
        ::nds::display::reference::types::DisplayAreaId::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::geometry::CoordShift AreaDisplayGeometryLayer::readCoordShiftXY(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift AreaDisplayGeometryLayer::readCoordShiftXY(AreaDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftXY().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::nds::core::geometry::CoordShift AreaDisplayGeometryLayer::readCoordShiftZ(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift AreaDisplayGeometryLayer::readCoordShiftZ(AreaDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftZ().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
uint32_t AreaDisplayGeometryLayer::readNumElements(::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t AreaDisplayGeometryLayer::readNumElements(AreaDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return context.getNumElements().read<::zserio::VarSizeArrayTraits>(in);
}
::zserio::InplaceOptionalHolder<AreaDisplayGeometryLayer::ZserioArrayType_identifier> AreaDisplayGeometryLayer::readIdentifier(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<AreaDisplayGeometryLayer::ZserioArrayType_identifier> AreaDisplayGeometryLayer::readIdentifier(AreaDisplayGeometryLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<AreaDisplayGeometryLayer::ZserioArrayType_types> AreaDisplayGeometryLayer::readTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<AreaDisplayGeometryLayer::ZserioArrayType_types> AreaDisplayGeometryLayer::readTypes(AreaDisplayGeometryLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}
::nds::core::geometry::Buffers AreaDisplayGeometryLayer::readBuffers(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    in.alignTo(8);
    return ::nds::core::geometry::Buffers(in, static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()), allocator);
}

::nds::core::geometry::Buffers AreaDisplayGeometryLayer::readBuffers(AreaDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    in.alignTo(8);
    return ::nds::core::geometry::Buffers(context.getBuffers(), in, static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()), allocator);
}

} // namespace instantiations
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/instantiations/LineDisplayGeometryLayer.h>

namespace nds
{
namespace display
{
namespace instantiations
{

LineDisplayGeometryLayer::LineDisplayGeometryLayer(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_coordShiftXY_(::nds::core::geometry::CoordShift()),
        m_coordShiftZ_(::nds::core::geometry::CoordShift()),
        m_numElements_(uint32_t()),
        m_identifier_(::zserio::NullOpt),
        m_types_(::zserio::NullOpt),
        m_buffers_(allocator)
{
}

LineDisplayGeometryLayer::LineDisplayGeometryLayer(::zserio::BitStreamReader& in,
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_type_(type_),
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(in)),
        m_coordShiftZ_(readCoordShiftZ(in)),
        m_numElements_(readNumElements(in)),
        m_identifier_(readIdentifier(in, allocator)),
        m_types_(readTypes(in, allocator)),
        m_buffers_(readBuffers(in, allocator))
{
}

LineDisplayGeometryLayer::LineDisplayGeometryLayer(LineDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_type_(type_),
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(context, in)),
        m_coordShiftZ_(readCoordShiftZ(context, in)),
        m_numElements_(readNumElements(context, in)),
        m_identifier_(readIdentifier(context, in, allocator)),
        m_types_(readTypes(context, in, allocator)),
        m_buffers_(readBuffers(context, in, allocator))
{
}

LineDisplayGeometryLayer::LineDisplayGeometryLayer(const LineDisplayGeometryLayer& other) :
        m_coordShiftXY_(other.m_coordShiftXY_),
        m_coordShiftZ_(other.m_coordShiftZ_),
        m_numElements_(other.m_numElements_),
        m_identifier_(other.m_identifier_),
        m_types_(other.m_types_),
        m_buffers_(other.m_buffers_)
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

LineDisplayGeometryLayer& LineDisplayGeometryLayer::operator=(const LineDisplayGeometryLayer& other)
{
    m_coordShiftXY_ = other.m_coordShiftXY_;
    m_coordShiftZ_ = other.m_coordShiftZ_;
    m_numElements_ = other.m_numElements_;
    m_identifier_ = other.m_identifier_;
    m_types_ = other.m_types_;
    m_buffers_ = other.m_buffers_;
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

LineDisplayGeometryLayer::LineDisplayGeometryLayer(LineDisplayGeometryLayer&& other) :
        m_coordShiftXY_(::std::move(other.m_coordShiftXY_)),
        m_coordShiftZ_(::std::move(other.m_coordShiftZ_)),
        m_numElements_(::std::move(other.m_numElements_)),
        m_identifier_(::std::move(other.m_identifier_)),
        m_types_(::std::move(other.m_types_)),
        m_buffers_(::std::move(other.m_buffers_))
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

LineDisplayGeometryLayer& LineDisplayGeometryLayer::operator=(LineDisplayGeometryLayer&& other)
{
    m_coordShiftXY_ = ::std::move(other.m_coordShiftXY_);
    m_coordShiftZ_ = ::std::move(other.m_coordShiftZ_);
    m_numElements_ = ::std::move(other.m_numElements_);
    m_identifier_ = ::std::move(other.m_identifier_);
    m_types_ = ::std::move(other.m_types_);
    m_buffers_ = ::std::move(other.m_buffers_);
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

LineDisplayGeometryLayer::LineDisplayGeometryLayer(::zserio::PropagateAllocatorT,
        const LineDisplayGeometryLayer& other, const allocator_type& allocator) :
        m_coordShiftXY_(::zserio::allocatorPropagatingCopy(other.m_coordShiftXY_, allocator)),
        m_coordShiftZ_(::zserio::allocatorPropagatingCopy(other.m_coordShiftZ_, allocator)),
        m_numElements_(::zserio::allocatorPropagatingCopy(other.m_numElements_, allocator)),
        m_identifier_(::zserio::allocatorPropagatingCopy(other.m_identifier_, allocator)),
        m_types_(::zserio::allocatorPropagatingCopy(other.m_types_, allocator)),
        m_buffers_(::zserio::allocatorPropagatingCopy(other.m_buffers_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

void LineDisplayGeometryLayer::initialize(
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_)
{
    m_type_ = type_;
    m_hasIds_ = hasIds_;
    m_hasTypes_ = hasTypes_;
    m_isInitialized = true;

    initializeChildren();
}

bool LineDisplayGeometryLayer::isInitialized() const
{
    return m_isInitialized;
}

void LineDisplayGeometryLayer::initializeChildren()
{
    m_buffers_.initialize(static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()));
}

::nds::core::geometry::GeometryLayerType LineDisplayGeometryLayer::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'LineDisplayGeometryLayer' is not initialized!");

    return m_type_;
}

bool LineDisplayGeometryLayer::getHasIds() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasIds' of compound 'LineDisplayGeometryLayer' is not initialized!");

    return m_hasIds_;
}

bool LineDisplayGeometryLayer::getHasTypes() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasTypes' of compound 'LineDisplayGeometryLayer' is not initialized!");

    return m_hasTypes_;
}

::nds::core::geometry::CoordShift LineDisplayGeometryLayer::getCoordShiftXY() const
{
    return m_coordShiftXY_;
}

void LineDisplayGeometryLayer::setCoordShiftXY(::nds::core::geometry::CoordShift coordShiftXY_)
{
    m_coordShiftXY_ = coordShiftXY_;
}

::nds::core::geometry::CoordShift LineDisplayGeometryLayer::getCoordShiftZ() const
{
    return m_coordShiftZ_;
}

void LineDisplayGeometryLayer::setCoordShiftZ(::nds::core::geometry::CoordShift coordShiftZ_)
{
    m_coordShiftZ_ = coordShiftZ_;
}

uint32_t LineDisplayGeometryLayer::getNumElements() const
{
    return m_numElements_;
}

void LineDisplayGeometryLayer::setNumElements(uint32_t numElements_)
{
    m_numElements_ = numElements_;
}

::zserio::vector<::nds::display::reference::types::DisplayLineId>& LineDisplayGeometryLayer::getIdentifier()
{
    return m_identifier_.value().getRawArray();
}

const ::zserio::vector<::nds::display::reference::types::DisplayLineId>& LineDisplayGeometryLayer::getIdentifier() const
{
    return m_identifier_.value().getRawArray();
}

void LineDisplayGeometryLayer::setIdentifier(const ::zserio::vector<::nds::display::reference::types::DisplayLineId>& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(identifier_);
}

void LineDisplayGeometryLayer::setIdentifier(::zserio::vector<::nds::display::reference::types::DisplayLineId>&& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(std::move(identifier_));
}

bool LineDisplayGeometryLayer::isIdentifierUsed() const
{
    return (getHasIds());
}

bool LineDisplayGeometryLayer::isIdentifierSet() const
{
    return m_identifier_.hasValue();
}

void LineDisplayGeometryLayer::resetIdentifier()
{
    m_identifier_.reset();
}

::zserio::vector<::nds::display::types::DisplayLineType>& LineDisplayGeometryLayer::getTypes()
{
    return m_types_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayLineType>& LineDisplayGeometryLayer::getTypes() const
{
    return m_types_.value().getRawArray();
}

void LineDisplayGeometryLayer::setTypes(const ::zserio::vector<::nds::display::types::DisplayLineType>& types_)
{
    m_types_ = ZserioArrayType_types(types_);
}

void LineDisplayGeometryLayer::setTypes(::zserio::vector<::nds::display::types::DisplayLineType>&& types_)
{
    m_types_ = ZserioArrayType_types(std::move(types_));
}

bool LineDisplayGeometryLayer::isTypesUsed() const
{
    return (getHasTypes());
}

bool LineDisplayGeometryLayer::isTypesSet() const
{
    return m_types_.hasValue();
}

void LineDisplayGeometryLayer::resetTypes()
{
    m_types_.reset();
}

::nds::core::geometry::Buffers& LineDisplayGeometryLayer::getBuffers()
{
    return m_buffers_;
}

const ::nds::core::geometry::Buffers& LineDisplayGeometryLayer::getBuffers() const
{
    return m_buffers_;
}

void LineDisplayGeometryLayer::setBuffers(const ::nds::core::geometry::Buffers& buffers_)
{
    m_buffers_ = buffers_;
}

void LineDisplayGeometryLayer::setBuffers(::nds::core::geometry::Buffers&& buffers_)
{
    m_buffers_ = ::std::move(buffers_);
}

void LineDisplayGeometryLayer::initPackingContext(LineDisplayGeometryLayer::ZserioPackingContext& context) const
{
    context.getCoordShiftXY().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    context.getCoordShiftZ().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    context.getNumElements().init<::zserio::VarSizeArrayTraits>(m_numElements_);
    m_buffers_.initPackingContext(context.getBuffers());
}

size_t LineDisplayGeometryLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(5);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_buffers_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LineDisplayGeometryLayer::bitSizeOf(LineDisplayGeometryLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCoordShiftZ().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_buffers_.bitSizeOf(context.getBuffers(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t LineDisplayGeometryLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(5);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_buffers_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t LineDisplayGeometryLayer::initializeOffsets(LineDisplayGeometryLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCoordShiftZ().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_buffers_.initializeOffsets(context.getBuffers(), endBitPosition);

    return endBitPosition;
}

bool LineDisplayGeometryLayer::operator==(const LineDisplayGeometryLayer& other) const
{
    if (this != &other)
    {
        return
                (getType() == other.getType()) &&
                (getHasIds() == other.getHasIds()) &&
                (getHasTypes() == other.getHasTypes()) &&
                (m_coordShiftXY_ == other.m_coordShiftXY_) &&
                (m_coordShiftZ_ == other.m_coordShiftZ_) &&
                (m_numElements_ == other.m_numElements_) &&
                (!isIdentifierUsed() ? !other.isIdentifierUsed() : (m_identifier_ == other.m_identifier_)) &&
                (!isTypesUsed() ? !other.isTypesUsed() : (m_types_ == other.m_types_)) &&
                (m_buffers_ == other.m_buffers_);
    }

    return true;
}

uint32_t LineDisplayGeometryLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    result = ::zserio::calcHashCode(result, getHasIds());
    result = ::zserio::calcHashCode(result, getHasTypes());
    result = ::zserio::calcHashCode(result, m_coordShiftXY_);
    result = ::zserio::calcHashCode(result, m_coordShiftZ_);
    result = ::zserio::calcHashCode(result, m_numElements_);
    if (isIdentifierUsed())
        result = ::zserio::calcHashCode(result, m_identifier_);
    if (isTypesUsed())
        result = ::zserio::calcHashCode(result, m_types_);
    result = ::zserio::calcHashCode(result, m_buffers_);

    return result;
}

void LineDisplayGeometryLayer::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_coordShiftXY_, UINT8_C(5));

    out.writeBits(m_coordShiftZ_, UINT8_C(5));

    out.alignTo(8);
    out.writeVarSize(m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field LineDisplayGeometryLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(*this, out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field LineDisplayGeometryLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().writePacked(out);
    }

    out.alignTo(8);
    // check parameters
    if (m_buffers_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(getType()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field LineDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(getType()) << "!";
    }
    if (m_buffers_.getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field LineDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()) << "!";
    }
    if (m_buffers_.getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field LineDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()) << "!";
    }
    if (m_buffers_.getNumElements() != static_cast<uint32_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numElements for field LineDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getNumElements() << " != " << static_cast<uint32_t>(getNumElements()) << "!";
    }
    m_buffers_.write(out);
}

void LineDisplayGeometryLayer::write(LineDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getCoordShiftXY().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftXY_);

    context.getCoordShiftZ().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftZ_);

    out.alignTo(8);
    context.getNumElements().write<::zserio::VarSizeArrayTraits>(out, m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field LineDisplayGeometryLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(*this, out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field LineDisplayGeometryLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().writePacked(out);
    }

    out.alignTo(8);
    // check parameters
    if (m_buffers_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(getType()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field LineDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(getType()) << "!";
    }
    if (m_buffers_.getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field LineDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()) << "!";
    }
    if (m_buffers_.getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field LineDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()) << "!";
    }
    if (m_buffers_.getNumElements() != static_cast<uint32_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numElements for field LineDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getNumElements() << " != " << static_cast<uint32_t>(getNumElements()) << "!";
    }
    m_buffers_.write(context.getBuffers(), out);
}

void LineDisplayGeometryLayer::ZserioElementFactory_identifier::create(LineDisplayGeometryLayer&        ,
        ::zserio::vector<::nds::display::reference::types::DisplayLineId>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LineDisplayGeometryLayer::ZserioElementFactory_identifier::create(LineDisplayGeometryLayer&        ,
        ::zserio::vector<::nds::display::reference::types::DisplayLineId>& array,
        ::nds::display::reference::types::DisplayLineId::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::geometry::CoordShift LineDisplayGeometryLayer::readCoordShiftXY(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift LineDisplayGeometryLayer::readCoordShiftXY(LineDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftXY().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::nds::core::geometry::CoordShift LineDisplayGeometryLayer::readCoordShiftZ(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift LineDisplayGeometryLayer::readCoordShiftZ(LineDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftZ().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
uint32_t LineDisplayGeometryLayer::readNumElements(::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t LineDisplayGeometryLayer::readNumElements(LineDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return context.getNumElements().read<::zserio::VarSizeArrayTraits>(in);
}
::zserio::InplaceOptionalHolder<LineDisplayGeometryLayer::ZserioArrayType_identifier> LineDisplayGeometryLayer::readIdentifier(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<LineDisplayGeometryLayer::ZserioArrayType_identifier> LineDisplayGeometryLayer::readIdentifier(LineDisplayGeometryLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<LineDisplayGeometryLayer::ZserioArrayType_types> LineDisplayGeometryLayer::readTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<LineDisplayGeometryLayer::ZserioArrayType_types> LineDisplayGeometryLayer::readTypes(LineDisplayGeometryLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}
::nds::core::geometry::Buffers LineDisplayGeometryLayer::readBuffers(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    in.alignTo(8);
    return ::nds::core::geometry::Buffers(in, static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()), allocator);
}

::nds::core::geometry::Buffers LineDisplayGeometryLayer::readBuffers(LineDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    in.alignTo(8);
    return ::nds::core::geometry::Buffers(context.getBuffers(), in, static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()), allocator);
}

} // namespace instantiations
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/instantiations/PointDisplayGeometryLayer.h>

namespace nds
{
namespace display
{
namespace instantiations
{

PointDisplayGeometryLayer::PointDisplayGeometryLayer(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_coordShiftXY_(::nds::core::geometry::CoordShift()),
        m_coordShiftZ_(::nds::core::geometry::CoordShift()),
        m_numElements_(uint32_t()),
        m_identifier_(::zserio::NullOpt),
        m_types_(::zserio::NullOpt),
        m_buffers_(allocator)
{
}

PointDisplayGeometryLayer::PointDisplayGeometryLayer(::zserio::BitStreamReader& in,
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_type_(type_),
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(in)),
        m_coordShiftZ_(readCoordShiftZ(in)),
        m_numElements_(readNumElements(in)),
        m_identifier_(readIdentifier(in, allocator)),
        m_types_(readTypes(in, allocator)),
        m_buffers_(readBuffers(in, allocator))
{
}

PointDisplayGeometryLayer::PointDisplayGeometryLayer(PointDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_type_(type_),
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(context, in)),
        m_coordShiftZ_(readCoordShiftZ(context, in)),
        m_numElements_(readNumElements(context, in)),
        m_identifier_(readIdentifier(context, in, allocator)),
        m_types_(readTypes(context, in, allocator)),
        m_buffers_(readBuffers(context, in, allocator))
{
}

PointDisplayGeometryLayer::PointDisplayGeometryLayer(const PointDisplayGeometryLayer& other) :
        m_coordShiftXY_(other.m_coordShiftXY_),
        m_coordShiftZ_(other.m_coordShiftZ_),
        m_numElements_(other.m_numElements_),
        m_identifier_(other.m_identifier_),
        m_types_(other.m_types_),
        m_buffers_(other.m_buffers_)
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

PointDisplayGeometryLayer& PointDisplayGeometryLayer::operator=(const PointDisplayGeometryLayer& other)
{
    m_coordShiftXY_ = other.m_coordShiftXY_;
    m_coordShiftZ_ = other.m_coordShiftZ_;
    m_numElements_ = other.m_numElements_;
    m_identifier_ = other.m_identifier_;
    m_types_ = other.m_types_;
    m_buffers_ = other.m_buffers_;
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

PointDisplayGeometryLayer::PointDisplayGeometryLayer(PointDisplayGeometryLayer&& other) :
        m_coordShiftXY_(::std::move(other.m_coordShiftXY_)),
        m_coordShiftZ_(::std::move(other.m_coordShiftZ_)),
        m_numElements_(::std::move(other.m_numElements_)),
        m_identifier_(::std::move(other.m_identifier_)),
        m_types_(::std::move(other.m_types_)),
        m_buffers_(::std::move(other.m_buffers_))
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

PointDisplayGeometryLayer& PointDisplayGeometryLayer::operator=(PointDisplayGeometryLayer&& other)
{
    m_coordShiftXY_ = ::std::move(other.m_coordShiftXY_);
    m_coordShiftZ_ = ::std::move(other.m_coordShiftZ_);
    m_numElements_ = ::std::move(other.m_numElements_);
    m_identifier_ = ::std::move(other.m_identifier_);
    m_types_ = ::std::move(other.m_types_);
    m_buffers_ = ::std::move(other.m_buffers_);
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

PointDisplayGeometryLayer::PointDisplayGeometryLayer(::zserio::PropagateAllocatorT,
        const PointDisplayGeometryLayer& other, const allocator_type& allocator) :
        m_coordShiftXY_(::zserio::allocatorPropagatingCopy(other.m_coordShiftXY_, allocator)),
        m_coordShiftZ_(::zserio::allocatorPropagatingCopy(other.m_coordShiftZ_, allocator)),
        m_numElements_(::zserio::allocatorPropagatingCopy(other.m_numElements_, allocator)),
        m_identifier_(::zserio::allocatorPropagatingCopy(other.m_identifier_, allocator)),
        m_types_(::zserio::allocatorPropagatingCopy(other.m_types_, allocator)),
        m_buffers_(::zserio::allocatorPropagatingCopy(other.m_buffers_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

void PointDisplayGeometryLayer::initialize(
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_)
{
    m_type_ = type_;
    m_hasIds_ = hasIds_;
    m_hasTypes_ = hasTypes_;
    m_isInitialized = true;

    initializeChildren();
}

bool PointDisplayGeometryLayer::isInitialized() const
{
    return m_isInitialized;
}

void PointDisplayGeometryLayer::initializeChildren()
{
    m_buffers_.initialize(static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()));
}

::nds::core::geometry::GeometryLayerType PointDisplayGeometryLayer::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'PointDisplayGeometryLayer' is not initialized!");

    return m_type_;
}

bool PointDisplayGeometryLayer::getHasIds() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasIds' of compound 'PointDisplayGeometryLayer' is not initialized!");

    return m_hasIds_;
}

bool PointDisplayGeometryLayer::getHasTypes() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasTypes' of compound 'PointDisplayGeometryLayer' is not initialized!");

    return m_hasTypes_;
}

::nds::core::geometry::CoordShift PointDisplayGeometryLayer::getCoordShiftXY() const
{
    return m_coordShiftXY_;
}

void PointDisplayGeometryLayer::setCoordShiftXY(::nds::core::geometry::CoordShift coordShiftXY_)
{
    m_coordShiftXY_ = coordShiftXY_;
}

::nds::core::geometry::CoordShift PointDisplayGeometryLayer::getCoordShiftZ() const
{
    return m_coordShiftZ_;
}

void PointDisplayGeometryLayer::setCoordShiftZ(::nds::core::geometry::CoordShift coordShiftZ_)
{
    m_coordShiftZ_ = coordShiftZ_;
}

uint32_t PointDisplayGeometryLayer::getNumElements() const
{
    return m_numElements_;
}

void PointDisplayGeometryLayer::setNumElements(uint32_t numElements_)
{
    m_numElements_ = numElements_;
}

::zserio::vector<::nds::display::reference::types::DisplayPointId>& PointDisplayGeometryLayer::getIdentifier()
{
    return m_identifier_.value().getRawArray();
}

const ::zserio::vector<::nds::display::reference::types::DisplayPointId>& PointDisplayGeometryLayer::getIdentifier() const
{
    return m_identifier_.value().getRawArray();
}

void PointDisplayGeometryLayer::setIdentifier(const ::zserio::vector<::nds::display::reference::types::DisplayPointId>& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(identifier_);
}

void PointDisplayGeometryLayer::setIdentifier(::zserio::vector<::nds::display::reference::types::DisplayPointId>&& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(std::move(identifier_));
}

bool PointDisplayGeometryLayer::isIdentifierUsed() const
{
    return (getHasIds());
}

bool PointDisplayGeometryLayer::isIdentifierSet() const
{
    return m_identifier_.hasValue();
}

void PointDisplayGeometryLayer::resetIdentifier()
{
    m_identifier_.reset();
}

::zserio::vector<::nds::display::types::DisplayPointType>& PointDisplayGeometryLayer::getTypes()
{
    return m_types_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayPointType>& PointDisplayGeometryLayer::getTypes() const
{
    return m_types_.value().getRawArray();
}

void PointDisplayGeometryLayer::setTypes(const ::zserio::vector<::nds::display::types::DisplayPointType>& types_)
{
    m_types_ = ZserioArrayType_types(types_);
}

void PointDisplayGeometryLayer::setTypes(::zserio::vector<::nds::display::types::DisplayPointType>&& types_)
{
    m_types_ = ZserioArrayType_types(std::move(types_));
}

bool PointDisplayGeometryLayer::isTypesUsed() const
{
    return (getHasTypes());
}

bool PointDisplayGeometryLayer::isTypesSet() const
{
    return m_types_.hasValue();
}

void PointDisplayGeometryLayer::resetTypes()
{
    m_types_.reset();
}

::nds::core::geometry::Buffers& PointDisplayGeometryLayer::getBuffers()
{
    return m_buffers_;
}

const ::nds::core::geometry::Buffers& PointDisplayGeometryLayer::getBuffers() const
{
    return m_buffers_;
}

void PointDisplayGeometryLayer::setBuffers(const ::nds::core::geometry::Buffers& buffers_)
{
    m_buffers_ = buffers_;
}

void PointDisplayGeometryLayer::setBuffers(::nds::core::geometry::Buffers&& buffers_)
{
    m_buffers_ = ::std::move(buffers_);
}

void PointDisplayGeometryLayer::initPackingContext(PointDisplayGeometryLayer::ZserioPackingContext& context) const
{
    context.getCoordShiftXY().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    context.getCoordShiftZ().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    context.getNumElements().init<::zserio::VarSizeArrayTraits>(m_numElements_);
    m_buffers_.initPackingContext(context.getBuffers());
}

size_t PointDisplayGeometryLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(5);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_buffers_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t PointDisplayGeometryLayer::bitSizeOf(PointDisplayGeometryLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCoordShiftZ().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_buffers_.bitSizeOf(context.getBuffers(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t PointDisplayGeometryLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(5);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_buffers_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t PointDisplayGeometryLayer::initializeOffsets(PointDisplayGeometryLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCoordShiftZ().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_buffers_.initializeOffsets(context.getBuffers(), endBitPosition);

    return endBitPosition;
}

bool PointDisplayGeometryLayer::operator==(const PointDisplayGeometryLayer& other) const
{
    if (this != &other)
    {
        return
                (getType() == other.getType()) &&
                (getHasIds() == other.getHasIds()) &&
                (getHasTypes() == other.getHasTypes()) &&
                (m_coordShiftXY_ == other.m_coordShiftXY_) &&
                (m_coordShiftZ_ == other.m_coordShiftZ_) &&
                (m_numElements_ == other.m_numElements_) &&
                (!isIdentifierUsed() ? !other.isIdentifierUsed() : (m_identifier_ == other.m_identifier_)) &&
                (!isTypesUsed() ? !other.isTypesUsed() : (m_types_ == other.m_types_)) &&
                (m_buffers_ == other.m_buffers_);
    }

    return true;
}

uint32_t PointDisplayGeometryLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    result = ::zserio::calcHashCode(result, getHasIds());
    result = ::zserio::calcHashCode(result, getHasTypes());
    result = ::zserio::calcHashCode(result, m_coordShiftXY_);
    result = ::zserio::calcHashCode(result, m_coordShiftZ_);
    result = ::zserio::calcHashCode(result, m_numElements_);
    if (isIdentifierUsed())
        result = ::zserio::calcHashCode(result, m_identifier_);
    if (isTypesUsed())
        result = ::zserio::calcHashCode(result, m_types_);
    result = ::zserio::calcHashCode(result, m_buffers_);

    return result;
}

void PointDisplayGeometryLayer::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_coordShiftXY_, UINT8_C(5));

    out.writeBits(m_coordShiftZ_, UINT8_C(5));

    out.alignTo(8);
    out.writeVarSize(m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field PointDisplayGeometryLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(*this, out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field PointDisplayGeometryLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().writePacked(out);
    }

    out.alignTo(8);
    // check parameters
    if (m_buffers_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(getType()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field PointDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(getType()) << "!";
    }
    if (m_buffers_.getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field PointDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()) << "!";
    }
    if (m_buffers_.getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field PointDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()) << "!";
    }
    if (m_buffers_.getNumElements() != static_cast<uint32_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numElements for field PointDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getNumElements() << " != " << static_cast<uint32_t>(getNumElements()) << "!";
    }
    m_buffers_.write(out);
}

void PointDisplayGeometryLayer::write(PointDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getCoordShiftXY().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftXY_);

    context.getCoordShiftZ().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftZ_);

    out.alignTo(8);
    context.getNumElements().write<::zserio::VarSizeArrayTraits>(out, m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field PointDisplayGeometryLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(*this, out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field PointDisplayGeometryLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().writePacked(out);
    }

    out.alignTo(8);
    // check parameters
    if (m_buffers_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(getType()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field PointDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(getType()) << "!";
    }
    if (m_buffers_.getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field PointDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()) << "!";
    }
    if (m_buffers_.getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field PointDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()) << "!";
    }
    if (m_buffers_.getNumElements() != static_cast<uint32_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numElements for field PointDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getNumElements() << " != " << static_cast<uint32_t>(getNumElements()) << "!";
    }
    m_buffers_.write(context.getBuffers(), out);
}

void PointDisplayGeometryLayer::ZserioElementFactory_identifier::create(PointDisplayGeometryLayer&        ,
        ::zserio::vector<::nds::display::reference::types::DisplayPointId>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void PointDisplayGeometryLayer::ZserioElementFactory_identifier::create(PointDisplayGeometryLayer&        ,
        ::zserio::vector<::nds::display::reference::types::DisplayPointId>& array,
        ::nds::display::reference::types::DisplayPointId::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::geometry::CoordShift PointDisplayGeometryLayer::readCoordShiftXY(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift PointDisplayGeometryLayer::readCoordShiftXY(PointDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftXY().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::nds::core::geometry::CoordShift PointDisplayGeometryLayer::readCoordShiftZ(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift PointDisplayGeometryLayer::readCoordShiftZ(PointDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftZ().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
uint32_t PointDisplayGeometryLayer::readNumElements(::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t PointDisplayGeometryLayer::readNumElements(PointDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return context.getNumElements().read<::zserio::VarSizeArrayTraits>(in);
}
::zserio::InplaceOptionalHolder<PointDisplayGeometryLayer::ZserioArrayType_identifier> PointDisplayGeometryLayer::readIdentifier(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PointDisplayGeometryLayer::ZserioArrayType_identifier> PointDisplayGeometryLayer::readIdentifier(PointDisplayGeometryLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<PointDisplayGeometryLayer::ZserioArrayType_types> PointDisplayGeometryLayer::readTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<PointDisplayGeometryLayer::ZserioArrayType_types> PointDisplayGeometryLayer::readTypes(PointDisplayGeometryLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}
::nds::core::geometry::Buffers PointDisplayGeometryLayer::readBuffers(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    in.alignTo(8);
    return ::nds::core::geometry::Buffers(in, static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()), allocator);
}

::nds::core::geometry::Buffers PointDisplayGeometryLayer::readBuffers(PointDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    in.alignTo(8);
    return ::nds::core::geometry::Buffers(context.getBuffers(), in, static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()), allocator);
}

} // namespace instantiations
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/instantiations/Mesh3dDisplayGeometryLayer.h>

namespace nds
{
namespace display
{
namespace instantiations
{

Mesh3dDisplayGeometryLayer::Mesh3dDisplayGeometryLayer(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_coordShiftXY_(::nds::core::geometry::CoordShift()),
        m_coordShiftZ_(::nds::core::geometry::CoordShift()),
        m_numElements_(uint32_t()),
        m_identifier_(::zserio::NullOpt),
        m_types_(::zserio::NullOpt),
        m_buffers_(allocator)
{
}

Mesh3dDisplayGeometryLayer::Mesh3dDisplayGeometryLayer(::zserio::BitStreamReader& in,
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_type_(type_),
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(in)),
        m_coordShiftZ_(readCoordShiftZ(in)),
        m_numElements_(readNumElements(in)),
        m_identifier_(readIdentifier(in, allocator)),
        m_types_(readTypes(in, allocator)),
        m_buffers_(readBuffers(in, allocator))
{
}

Mesh3dDisplayGeometryLayer::Mesh3dDisplayGeometryLayer(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_type_(type_),
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(context, in)),
        m_coordShiftZ_(readCoordShiftZ(context, in)),
        m_numElements_(readNumElements(context, in)),
        m_identifier_(readIdentifier(context, in, allocator)),
        m_types_(readTypes(context, in, allocator)),
        m_buffers_(readBuffers(context, in, allocator))
{
}

Mesh3dDisplayGeometryLayer::Mesh3dDisplayGeometryLayer(const Mesh3dDisplayGeometryLayer& other) :
        m_coordShiftXY_(other.m_coordShiftXY_),
        m_coordShiftZ_(other.m_coordShiftZ_),
        m_numElements_(other.m_numElements_),
        m_identifier_(other.m_identifier_),
        m_types_(other.m_types_),
        m_buffers_(other.m_buffers_)
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

Mesh3dDisplayGeometryLayer& Mesh3dDisplayGeometryLayer::operator=(const Mesh3dDisplayGeometryLayer& other)
{
    m_coordShiftXY_ = other.m_coordShiftXY_;
    m_coordShiftZ_ = other.m_coordShiftZ_;
    m_numElements_ = other.m_numElements_;
    m_identifier_ = other.m_identifier_;
    m_types_ = other.m_types_;
    m_buffers_ = other.m_buffers_;
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

Mesh3dDisplayGeometryLayer::Mesh3dDisplayGeometryLayer(Mesh3dDisplayGeometryLayer&& other) :
        m_coordShiftXY_(::std::move(other.m_coordShiftXY_)),
        m_coordShiftZ_(::std::move(other.m_coordShiftZ_)),
        m_numElements_(::std::move(other.m_numElements_)),
        m_identifier_(::std::move(other.m_identifier_)),
        m_types_(::std::move(other.m_types_)),
        m_buffers_(::std::move(other.m_buffers_))
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

Mesh3dDisplayGeometryLayer& Mesh3dDisplayGeometryLayer::operator=(Mesh3dDisplayGeometryLayer&& other)
{
    m_coordShiftXY_ = ::std::move(other.m_coordShiftXY_);
    m_coordShiftZ_ = ::std::move(other.m_coordShiftZ_);
    m_numElements_ = ::std::move(other.m_numElements_);
    m_identifier_ = ::std::move(other.m_identifier_);
    m_types_ = ::std::move(other.m_types_);
    m_buffers_ = ::std::move(other.m_buffers_);
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

Mesh3dDisplayGeometryLayer::Mesh3dDisplayGeometryLayer(::zserio::PropagateAllocatorT,
        const Mesh3dDisplayGeometryLayer& other, const allocator_type& allocator) :
        m_coordShiftXY_(::zserio::allocatorPropagatingCopy(other.m_coordShiftXY_, allocator)),
        m_coordShiftZ_(::zserio::allocatorPropagatingCopy(other.m_coordShiftZ_, allocator)),
        m_numElements_(::zserio::allocatorPropagatingCopy(other.m_numElements_, allocator)),
        m_identifier_(::zserio::allocatorPropagatingCopy(other.m_identifier_, allocator)),
        m_types_(::zserio::allocatorPropagatingCopy(other.m_types_, allocator)),
        m_buffers_(::zserio::allocatorPropagatingCopy(other.m_buffers_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_, other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

void Mesh3dDisplayGeometryLayer::initialize(
        ::nds::core::geometry::GeometryLayerType type_,
        bool hasIds_,
        bool hasTypes_)
{
    m_type_ = type_;
    m_hasIds_ = hasIds_;
    m_hasTypes_ = hasTypes_;
    m_isInitialized = true;

    initializeChildren();
}

bool Mesh3dDisplayGeometryLayer::isInitialized() const
{
    return m_isInitialized;
}

void Mesh3dDisplayGeometryLayer::initializeChildren()
{
    m_buffers_.initialize(static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()));
}

::nds::core::geometry::GeometryLayerType Mesh3dDisplayGeometryLayer::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'Mesh3dDisplayGeometryLayer' is not initialized!");

    return m_type_;
}

bool Mesh3dDisplayGeometryLayer::getHasIds() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasIds' of compound 'Mesh3dDisplayGeometryLayer' is not initialized!");

    return m_hasIds_;
}

bool Mesh3dDisplayGeometryLayer::getHasTypes() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasTypes' of compound 'Mesh3dDisplayGeometryLayer' is not initialized!");

    return m_hasTypes_;
}

::nds::core::geometry::CoordShift Mesh3dDisplayGeometryLayer::getCoordShiftXY() const
{
    return m_coordShiftXY_;
}

void Mesh3dDisplayGeometryLayer::setCoordShiftXY(::nds::core::geometry::CoordShift coordShiftXY_)
{
    m_coordShiftXY_ = coordShiftXY_;
}

::nds::core::geometry::CoordShift Mesh3dDisplayGeometryLayer::getCoordShiftZ() const
{
    return m_coordShiftZ_;
}

void Mesh3dDisplayGeometryLayer::setCoordShiftZ(::nds::core::geometry::CoordShift coordShiftZ_)
{
    m_coordShiftZ_ = coordShiftZ_;
}

uint32_t Mesh3dDisplayGeometryLayer::getNumElements() const
{
    return m_numElements_;
}

void Mesh3dDisplayGeometryLayer::setNumElements(uint32_t numElements_)
{
    m_numElements_ = numElements_;
}

::zserio::vector<::nds::display::reference::types::DisplayMesh3dId>& Mesh3dDisplayGeometryLayer::getIdentifier()
{
    return m_identifier_.value().getRawArray();
}

const ::zserio::vector<::nds::display::reference::types::DisplayMesh3dId>& Mesh3dDisplayGeometryLayer::getIdentifier() const
{
    return m_identifier_.value().getRawArray();
}

void Mesh3dDisplayGeometryLayer::setIdentifier(const ::zserio::vector<::nds::display::reference::types::DisplayMesh3dId>& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(identifier_);
}

void Mesh3dDisplayGeometryLayer::setIdentifier(::zserio::vector<::nds::display::reference::types::DisplayMesh3dId>&& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(std::move(identifier_));
}

bool Mesh3dDisplayGeometryLayer::isIdentifierUsed() const
{
    return (getHasIds());
}

bool Mesh3dDisplayGeometryLayer::isIdentifierSet() const
{
    return m_identifier_.hasValue();
}

void Mesh3dDisplayGeometryLayer::resetIdentifier()
{
    m_identifier_.reset();
}

::zserio::vector<::nds::display::types::DisplayMesh3dType>& Mesh3dDisplayGeometryLayer::getTypes()
{
    return m_types_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayMesh3dType>& Mesh3dDisplayGeometryLayer::getTypes() const
{
    return m_types_.value().getRawArray();
}

void Mesh3dDisplayGeometryLayer::setTypes(const ::zserio::vector<::nds::display::types::DisplayMesh3dType>& types_)
{
    m_types_ = ZserioArrayType_types(types_);
}

void Mesh3dDisplayGeometryLayer::setTypes(::zserio::vector<::nds::display::types::DisplayMesh3dType>&& types_)
{
    m_types_ = ZserioArrayType_types(std::move(types_));
}

bool Mesh3dDisplayGeometryLayer::isTypesUsed() const
{
    return (getHasTypes());
}

bool Mesh3dDisplayGeometryLayer::isTypesSet() const
{
    return m_types_.hasValue();
}

void Mesh3dDisplayGeometryLayer::resetTypes()
{
    m_types_.reset();
}

::nds::core::geometry::Buffers& Mesh3dDisplayGeometryLayer::getBuffers()
{
    return m_buffers_;
}

const ::nds::core::geometry::Buffers& Mesh3dDisplayGeometryLayer::getBuffers() const
{
    return m_buffers_;
}

void Mesh3dDisplayGeometryLayer::setBuffers(const ::nds::core::geometry::Buffers& buffers_)
{
    m_buffers_ = buffers_;
}

void Mesh3dDisplayGeometryLayer::setBuffers(::nds::core::geometry::Buffers&& buffers_)
{
    m_buffers_ = ::std::move(buffers_);
}

void Mesh3dDisplayGeometryLayer::initPackingContext(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context) const
{
    context.getCoordShiftXY().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    context.getCoordShiftZ().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    context.getNumElements().init<::zserio::VarSizeArrayTraits>(m_numElements_);
    m_buffers_.initPackingContext(context.getBuffers());
}

size_t Mesh3dDisplayGeometryLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(5);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_buffers_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Mesh3dDisplayGeometryLayer::bitSizeOf(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCoordShiftZ().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_buffers_.bitSizeOf(context.getBuffers(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Mesh3dDisplayGeometryLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += UINT8_C(5);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_buffers_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t Mesh3dDisplayGeometryLayer::initializeOffsets(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCoordShiftZ().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftZ_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_buffers_.initializeOffsets(context.getBuffers(), endBitPosition);

    return endBitPosition;
}

bool Mesh3dDisplayGeometryLayer::operator==(const Mesh3dDisplayGeometryLayer& other) const
{
    if (this != &other)
    {
        return
                (getType() == other.getType()) &&
                (getHasIds() == other.getHasIds()) &&
                (getHasTypes() == other.getHasTypes()) &&
                (m_coordShiftXY_ == other.m_coordShiftXY_) &&
                (m_coordShiftZ_ == other.m_coordShiftZ_) &&
                (m_numElements_ == other.m_numElements_) &&
                (!isIdentifierUsed() ? !other.isIdentifierUsed() : (m_identifier_ == other.m_identifier_)) &&
                (!isTypesUsed() ? !other.isTypesUsed() : (m_types_ == other.m_types_)) &&
                (m_buffers_ == other.m_buffers_);
    }

    return true;
}

uint32_t Mesh3dDisplayGeometryLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    result = ::zserio::calcHashCode(result, getHasIds());
    result = ::zserio::calcHashCode(result, getHasTypes());
    result = ::zserio::calcHashCode(result, m_coordShiftXY_);
    result = ::zserio::calcHashCode(result, m_coordShiftZ_);
    result = ::zserio::calcHashCode(result, m_numElements_);
    if (isIdentifierUsed())
        result = ::zserio::calcHashCode(result, m_identifier_);
    if (isTypesUsed())
        result = ::zserio::calcHashCode(result, m_types_);
    result = ::zserio::calcHashCode(result, m_buffers_);

    return result;
}

void Mesh3dDisplayGeometryLayer::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_coordShiftXY_, UINT8_C(5));

    out.writeBits(m_coordShiftZ_, UINT8_C(5));

    out.alignTo(8);
    out.writeVarSize(m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3dDisplayGeometryLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(*this, out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3dDisplayGeometryLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().writePacked(out);
    }

    out.alignTo(8);
    // check parameters
    if (m_buffers_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(getType()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Mesh3dDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(getType()) << "!";
    }
    if (m_buffers_.getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field Mesh3dDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()) << "!";
    }
    if (m_buffers_.getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field Mesh3dDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()) << "!";
    }
    if (m_buffers_.getNumElements() != static_cast<uint32_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numElements for field Mesh3dDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getNumElements() << " != " << static_cast<uint32_t>(getNumElements()) << "!";
    }
    m_buffers_.write(out);
}

void Mesh3dDisplayGeometryLayer::write(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getCoordShiftXY().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftXY_);

    context.getCoordShiftZ().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftZ_);

    out.alignTo(8);
    context.getNumElements().write<::zserio::VarSizeArrayTraits>(out, m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3dDisplayGeometryLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(*this, out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3dDisplayGeometryLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().writePacked(out);
    }

    out.alignTo(8);
    // check parameters
    if (m_buffers_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(getType()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Mesh3dDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(getType()) << "!";
    }
    if (m_buffers_.getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field Mesh3dDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()) << "!";
    }
    if (m_buffers_.getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field Mesh3dDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()) << "!";
    }
    if (m_buffers_.getNumElements() != static_cast<uint32_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numElements for field Mesh3dDisplayGeometryLayer.buffers: ") <<
                m_buffers_.getNumElements() << " != " << static_cast<uint32_t>(getNumElements()) << "!";
    }
    m_buffers_.write(context.getBuffers(), out);
}

void Mesh3dDisplayGeometryLayer::ZserioElementFactory_identifier::create(Mesh3dDisplayGeometryLayer&        ,
        ::zserio::vector<::nds::display::reference::types::DisplayMesh3dId>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Mesh3dDisplayGeometryLayer::ZserioElementFactory_identifier::create(Mesh3dDisplayGeometryLayer&        ,
        ::zserio::vector<::nds::display::reference::types::DisplayMesh3dId>& array,
        ::nds::display::reference::types::DisplayMesh3dId::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::geometry::CoordShift Mesh3dDisplayGeometryLayer::readCoordShiftXY(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift Mesh3dDisplayGeometryLayer::readCoordShiftXY(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftXY().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::nds::core::geometry::CoordShift Mesh3dDisplayGeometryLayer::readCoordShiftZ(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift Mesh3dDisplayGeometryLayer::readCoordShiftZ(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftZ().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
uint32_t Mesh3dDisplayGeometryLayer::readNumElements(::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t Mesh3dDisplayGeometryLayer::readNumElements(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return context.getNumElements().read<::zserio::VarSizeArrayTraits>(in);
}
::zserio::InplaceOptionalHolder<Mesh3dDisplayGeometryLayer::ZserioArrayType_identifier> Mesh3dDisplayGeometryLayer::readIdentifier(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Mesh3dDisplayGeometryLayer::ZserioArrayType_identifier> Mesh3dDisplayGeometryLayer::readIdentifier(Mesh3dDisplayGeometryLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Mesh3dDisplayGeometryLayer::ZserioArrayType_types> Mesh3dDisplayGeometryLayer::readTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Mesh3dDisplayGeometryLayer::ZserioArrayType_types> Mesh3dDisplayGeometryLayer::readTypes(Mesh3dDisplayGeometryLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}
::nds::core::geometry::Buffers Mesh3dDisplayGeometryLayer::readBuffers(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    in.alignTo(8);
    return ::nds::core::geometry::Buffers(in, static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()), allocator);
}

::nds::core::geometry::Buffers Mesh3dDisplayGeometryLayer::readBuffers(Mesh3dDisplayGeometryLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    in.alignTo(8);
    return ::nds::core::geometry::Buffers(context.getBuffers(), in, static_cast<::nds::core::geometry::GeometryLayerType>(getType()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftXY()), static_cast<::nds::core::geometry::CoordShift>(getCoordShiftZ()), static_cast<uint32_t>(getNumElements()), allocator);
}

} // namespace instantiations
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/instantiations/HeightMapGridLayer.h>

namespace nds
{
namespace display
{
namespace instantiations
{

HeightMapGridLayer::HeightMapGridLayer(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_coordShiftXY_(::nds::core::geometry::CoordShift()),
        m_cellSize_(::nds::core::grid::GridCellSize()),
        m_numElements_(uint32_t()),
        m_identifier_(::zserio::NullOpt),
        m_types_(::zserio::NullOpt),
        m_grids_(allocator)
{
}

HeightMapGridLayer::HeightMapGridLayer(::zserio::BitStreamReader& in,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(in)),
        m_cellSize_(readCellSize(in)),
        m_numElements_(readNumElements(in)),
        m_identifier_(readIdentifier(in, allocator)),
        m_types_(readTypes(in, allocator)),
        m_grids_(readGrids(in, allocator))
{
}

HeightMapGridLayer::HeightMapGridLayer(HeightMapGridLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        bool hasIds_,
        bool hasTypes_, const allocator_type& allocator) :
        m_hasIds_(hasIds_),
        m_hasTypes_(hasTypes_),
        m_isInitialized(true),
        m_coordShiftXY_(readCoordShiftXY(context, in)),
        m_cellSize_(readCellSize(context, in)),
        m_numElements_(readNumElements(context, in)),
        m_identifier_(readIdentifier(context, in, allocator)),
        m_types_(readTypes(in, allocator)),
        m_grids_(readGrids(context, in, allocator))
{
}

HeightMapGridLayer::HeightMapGridLayer(const HeightMapGridLayer& other) :
        m_coordShiftXY_(other.m_coordShiftXY_),
        m_cellSize_(other.m_cellSize_),
        m_numElements_(other.m_numElements_),
        m_identifier_(other.m_identifier_),
        m_types_(other.m_types_),
        m_grids_(other.m_grids_)
{
    if (other.m_isInitialized)
        initialize(other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

HeightMapGridLayer& HeightMapGridLayer::operator=(const HeightMapGridLayer& other)
{
    m_coordShiftXY_ = other.m_coordShiftXY_;
    m_cellSize_ = other.m_cellSize_;
    m_numElements_ = other.m_numElements_;
    m_identifier_ = other.m_identifier_;
    m_types_ = other.m_types_;
    m_grids_ = other.m_grids_;
    if (other.m_isInitialized)
        initialize(other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

HeightMapGridLayer::HeightMapGridLayer(HeightMapGridLayer&& other) :
        m_coordShiftXY_(::std::move(other.m_coordShiftXY_)),
        m_cellSize_(::std::move(other.m_cellSize_)),
        m_numElements_(::std::move(other.m_numElements_)),
        m_identifier_(::std::move(other.m_identifier_)),
        m_types_(::std::move(other.m_types_)),
        m_grids_(::std::move(other.m_grids_))
{
    if (other.m_isInitialized)
        initialize(other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

HeightMapGridLayer& HeightMapGridLayer::operator=(HeightMapGridLayer&& other)
{
    m_coordShiftXY_ = ::std::move(other.m_coordShiftXY_);
    m_cellSize_ = ::std::move(other.m_cellSize_);
    m_numElements_ = ::std::move(other.m_numElements_);
    m_identifier_ = ::std::move(other.m_identifier_);
    m_types_ = ::std::move(other.m_types_);
    m_grids_ = ::std::move(other.m_grids_);
    if (other.m_isInitialized)
        initialize(other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;

    return *this;
}

HeightMapGridLayer::HeightMapGridLayer(::zserio::PropagateAllocatorT,
        const HeightMapGridLayer& other, const allocator_type& allocator) :
        m_coordShiftXY_(::zserio::allocatorPropagatingCopy(other.m_coordShiftXY_, allocator)),
        m_cellSize_(::zserio::allocatorPropagatingCopy(other.m_cellSize_, allocator)),
        m_numElements_(::zserio::allocatorPropagatingCopy(other.m_numElements_, allocator)),
        m_identifier_(::zserio::allocatorPropagatingCopy(other.m_identifier_, allocator)),
        m_types_(::zserio::allocatorPropagatingCopy(other.m_types_, allocator)),
        m_grids_(::zserio::allocatorPropagatingCopy(other.m_grids_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_hasIds_, other.m_hasTypes_);
    else
        m_isInitialized = false;
}

void HeightMapGridLayer::initialize(
        bool hasIds_,
        bool hasTypes_)
{
    m_hasIds_ = hasIds_;
    m_hasTypes_ = hasTypes_;
    m_isInitialized = true;

    initializeChildren();
}

bool HeightMapGridLayer::isInitialized() const
{
    return m_isInitialized;
}

void HeightMapGridLayer::initializeChildren()
{
    m_grids_.initializeElements(*this);
}

bool HeightMapGridLayer::getHasIds() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasIds' of compound 'HeightMapGridLayer' is not initialized!");

    return m_hasIds_;
}

bool HeightMapGridLayer::getHasTypes() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'hasTypes' of compound 'HeightMapGridLayer' is not initialized!");

    return m_hasTypes_;
}

::nds::core::geometry::CoordShift HeightMapGridLayer::getCoordShiftXY() const
{
    return m_coordShiftXY_;
}

void HeightMapGridLayer::setCoordShiftXY(::nds::core::geometry::CoordShift coordShiftXY_)
{
    m_coordShiftXY_ = coordShiftXY_;
}

::nds::core::grid::GridCellSize HeightMapGridLayer::getCellSize() const
{
    return m_cellSize_;
}

void HeightMapGridLayer::setCellSize(::nds::core::grid::GridCellSize cellSize_)
{
    m_cellSize_ = cellSize_;
}

uint32_t HeightMapGridLayer::getNumElements() const
{
    return m_numElements_;
}

void HeightMapGridLayer::setNumElements(uint32_t numElements_)
{
    m_numElements_ = numElements_;
}

::zserio::vector<::nds::display::types::HeightmapGridId>& HeightMapGridLayer::getIdentifier()
{
    return m_identifier_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::HeightmapGridId>& HeightMapGridLayer::getIdentifier() const
{
    return m_identifier_.value().getRawArray();
}

void HeightMapGridLayer::setIdentifier(const ::zserio::vector<::nds::display::types::HeightmapGridId>& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(identifier_);
}

void HeightMapGridLayer::setIdentifier(::zserio::vector<::nds::display::types::HeightmapGridId>&& identifier_)
{
    m_identifier_ = ZserioArrayType_identifier(std::move(identifier_));
}

bool HeightMapGridLayer::isIdentifierUsed() const
{
    return (getHasIds());
}

bool HeightMapGridLayer::isIdentifierSet() const
{
    return m_identifier_.hasValue();
}

void HeightMapGridLayer::resetIdentifier()
{
    m_identifier_.reset();
}

::zserio::vector<::nds::core::grid::GridType>& HeightMapGridLayer::getTypes()
{
    return m_types_.value().getRawArray();
}

const ::zserio::vector<::nds::core::grid::GridType>& HeightMapGridLayer::getTypes() const
{
    return m_types_.value().getRawArray();
}

void HeightMapGridLayer::setTypes(const ::zserio::vector<::nds::core::grid::GridType>& types_)
{
    m_types_ = ZserioArrayType_types(types_);
}

void HeightMapGridLayer::setTypes(::zserio::vector<::nds::core::grid::GridType>&& types_)
{
    m_types_ = ZserioArrayType_types(std::move(types_));
}

bool HeightMapGridLayer::isTypesUsed() const
{
    return (getHasTypes());
}

bool HeightMapGridLayer::isTypesSet() const
{
    return m_types_.hasValue();
}

void HeightMapGridLayer::resetTypes()
{
    m_types_.reset();
}

::zserio::vector<::nds::core::grid::Grid_varint32>& HeightMapGridLayer::getGrids()
{
    return m_grids_.getRawArray();
}

const ::zserio::vector<::nds::core::grid::Grid_varint32>& HeightMapGridLayer::getGrids() const
{
    return m_grids_.getRawArray();
}

void HeightMapGridLayer::setGrids(const ::zserio::vector<::nds::core::grid::Grid_varint32>& grids_)
{
    m_grids_ = ZserioArrayType_grids(grids_);
}

void HeightMapGridLayer::setGrids(::zserio::vector<::nds::core::grid::Grid_varint32>&& grids_)
{
    m_grids_ = ZserioArrayType_grids(std::move(grids_));
}

void HeightMapGridLayer::initPackingContext(HeightMapGridLayer::ZserioPackingContext& context) const
{
    context.getCoordShiftXY().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    context.getCellSize().init<::zserio::VarSizeArrayTraits>(m_cellSize_);
    context.getNumElements().init<::zserio::VarSizeArrayTraits>(m_numElements_);
}

size_t HeightMapGridLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_cellSize_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOf(*this, endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_grids_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t HeightMapGridLayer::bitSizeOf(HeightMapGridLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCellSize().bitSizeOf<::zserio::VarSizeArrayTraits>(m_cellSize_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition += m_identifier_.value().bitSizeOfPacked(endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition += m_types_.value().bitSizeOf(*this, endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += m_grids_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t HeightMapGridLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_cellSize_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsets(*this, endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_grids_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

size_t HeightMapGridLayer::initializeOffsets(HeightMapGridLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getCoordShiftXY().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_coordShiftXY_);
    endBitPosition += context.getCellSize().bitSizeOf<::zserio::VarSizeArrayTraits>(m_cellSize_);
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition += context.getNumElements().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numElements_);
    if (getHasIds())
    {
        endBitPosition = m_identifier_.value().initializeOffsetsPacked(endBitPosition);
    }
    if (getHasTypes())
    {
        endBitPosition = ::zserio::alignTo(8, endBitPosition);
        endBitPosition = m_types_.value().initializeOffsets(*this, endBitPosition);
    }
    endBitPosition = ::zserio::alignTo(8, endBitPosition);
    endBitPosition = m_grids_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool HeightMapGridLayer::operator==(const HeightMapGridLayer& other) const
{
    if (this != &other)
    {
        return
                (getHasIds() == other.getHasIds()) &&
                (getHasTypes() == other.getHasTypes()) &&
                (m_coordShiftXY_ == other.m_coordShiftXY_) &&
                (m_cellSize_ == other.m_cellSize_) &&
                (m_numElements_ == other.m_numElements_) &&
                (!isIdentifierUsed() ? !other.isIdentifierUsed() : (m_identifier_ == other.m_identifier_)) &&
                (!isTypesUsed() ? !other.isTypesUsed() : (m_types_ == other.m_types_)) &&
                (m_grids_ == other.m_grids_);
    }

    return true;
}

uint32_t HeightMapGridLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getHasIds());
    result = ::zserio::calcHashCode(result, getHasTypes());
    result = ::zserio::calcHashCode(result, m_coordShiftXY_);
    result = ::zserio::calcHashCode(result, m_cellSize_);
    result = ::zserio::calcHashCode(result, m_numElements_);
    if (isIdentifierUsed())
        result = ::zserio::calcHashCode(result, m_identifier_);
    if (isTypesUsed())
        result = ::zserio::calcHashCode(result, m_types_);
    result = ::zserio::calcHashCode(result, m_grids_);

    return result;
}

void HeightMapGridLayer::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_coordShiftXY_, UINT8_C(5));

    out.writeVarSize(m_cellSize_);

    out.alignTo(8);
    out.writeVarSize(m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field HeightMapGridLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field HeightMapGridLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().write(*this, out);
    }

    out.alignTo(8);
    // check array length
    if (m_grids_.getRawArray().size() != static_cast<size_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field HeightMapGridLayer.grids: ") <<
                m_grids_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumElements()) << "!";
    }
    m_grids_.writePacked(*this, out);
}

void HeightMapGridLayer::write(HeightMapGridLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getCoordShiftXY().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_coordShiftXY_);

    context.getCellSize().write<::zserio::VarSizeArrayTraits>(out, m_cellSize_);

    out.alignTo(8);
    context.getNumElements().write<::zserio::VarSizeArrayTraits>(out, m_numElements_);

    if (getHasIds())
    {
        // check array length
        if (m_identifier_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field HeightMapGridLayer.identifier: ") <<
                    m_identifier_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_identifier_.value().writePacked(out);
    }

    if (getHasTypes())
    {
        out.alignTo(8);
        // check array length
        if (m_types_.value().getRawArray().size() != static_cast<size_t>(getNumElements()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field HeightMapGridLayer.types: ") <<
                    m_types_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumElements()) << "!";
        }
        m_types_.value().write(*this, out);
    }

    out.alignTo(8);
    // check array length
    if (m_grids_.getRawArray().size() != static_cast<size_t>(getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field HeightMapGridLayer.grids: ") <<
                m_grids_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumElements()) << "!";
    }
    m_grids_.writePacked(*this, out);
}

void HeightMapGridLayer::ZserioElementFactory_types::create(HeightMapGridLayer&        ,
        ::zserio::vector<::nds::core::grid::GridType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void HeightMapGridLayer::ZserioArrayExpressions_grids::initializeElement(HeightMapGridLayer& owner,
        ::nds::core::grid::Grid_varint32& element, size_t)
{
    element.initialize(static_cast<::nds::core::grid::GridCellSize>(owner.getCellSize()), static_cast<::nds::core::geometry::CoordShift>(owner.getCoordShiftXY()));
}

void HeightMapGridLayer::ZserioElementFactory_grids::create(HeightMapGridLayer&         owner,
        ::zserio::vector<::nds::core::grid::Grid_varint32>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, static_cast<::nds::core::grid::GridCellSize>(owner.getCellSize()), static_cast<::nds::core::geometry::CoordShift>(owner.getCoordShiftXY()), array.get_allocator());
}

void HeightMapGridLayer::ZserioElementFactory_grids::create(HeightMapGridLayer&         owner,
        ::zserio::vector<::nds::core::grid::Grid_varint32>& array,
        ::nds::core::grid::Grid_varint32::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, static_cast<::nds::core::grid::GridCellSize>(owner.getCellSize()), static_cast<::nds::core::geometry::CoordShift>(owner.getCoordShiftXY()), array.get_allocator());
}

::nds::core::geometry::CoordShift HeightMapGridLayer::readCoordShiftXY(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift HeightMapGridLayer::readCoordShiftXY(HeightMapGridLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCoordShiftXY().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::nds::core::grid::GridCellSize HeightMapGridLayer::readCellSize(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::grid::GridCellSize>(in.readVarSize());
}

::nds::core::grid::GridCellSize HeightMapGridLayer::readCellSize(HeightMapGridLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getCellSize().read<::zserio::VarSizeArrayTraits>(in);
}
uint32_t HeightMapGridLayer::readNumElements(::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t HeightMapGridLayer::readNumElements(HeightMapGridLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    in.alignTo(8);
    return context.getNumElements().read<::zserio::VarSizeArrayTraits>(in);
}
::zserio::InplaceOptionalHolder<HeightMapGridLayer::ZserioArrayType_identifier> HeightMapGridLayer::readIdentifier(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<HeightMapGridLayer::ZserioArrayType_identifier> HeightMapGridLayer::readIdentifier(HeightMapGridLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasIds())
    {
        ZserioArrayType_identifier readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_identifier>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<HeightMapGridLayer::ZserioArrayType_types> HeightMapGridLayer::readTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasTypes())
    {
        in.alignTo(8);
        ZserioArrayType_types readField(allocator);
        readField.read(*this, in, static_cast<size_t>(getNumElements()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_types>(::zserio::NullOpt);
}
HeightMapGridLayer::ZserioArrayType_grids HeightMapGridLayer::readGrids(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    in.alignTo(8);
    ZserioArrayType_grids readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

    return readField;
}

HeightMapGridLayer::ZserioArrayType_grids HeightMapGridLayer::readGrids(HeightMapGridLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    in.alignTo(8);
    ZserioArrayType_grids readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumElements()));

    return readField;
}

} // namespace instantiations
} // namespace display
} // namespace nds
