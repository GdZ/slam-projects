/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_LAYER_GLTF_LAYER_H
#define NDS_DISPLAY_LAYER_GLTF_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>

#include <nds/display/layer/GltfLayerHeader.h>

namespace nds
{
namespace display
{
namespace layer
{

class GltfLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::display::layer::GltfLayerHeader::ZserioPackingContext& getHeader()
        {
            return m_header_;
        }

    private:
        ::nds::display::layer::GltfLayerHeader::ZserioPackingContext m_header_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    GltfLayer() noexcept :
            GltfLayer(allocator_type())
    {}

    explicit GltfLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_header = ::nds::display::layer::GltfLayerHeader,
            typename ZSERIO_T_gltfData = ::zserio::BitBuffer,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_header, GltfLayer, allocator_type> = 0>
    GltfLayer(
            ZSERIO_T_header&& header_,
            ZSERIO_T_gltfData&& gltfData_,
            const allocator_type& allocator = allocator_type()) :
            GltfLayer(allocator)
    {
        m_header_ = ::std::forward<ZSERIO_T_header>(header_);
        m_gltfData_ = ::std::forward<ZSERIO_T_gltfData>(gltfData_);
    }

    explicit GltfLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit GltfLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~GltfLayer() = default;

    GltfLayer(const GltfLayer&) = default;
    GltfLayer& operator=(const GltfLayer&) = default;

    GltfLayer(GltfLayer&&) = default;
    GltfLayer& operator=(GltfLayer&&) = default;

    GltfLayer(::zserio::PropagateAllocatorT,
            const GltfLayer& other, const allocator_type& allocator);

    const ::nds::display::layer::GltfLayerHeader& getHeader() const;
    ::nds::display::layer::GltfLayerHeader& getHeader();
    void setHeader(const ::nds::display::layer::GltfLayerHeader& header_);
    void setHeader(::nds::display::layer::GltfLayerHeader&& header_);

    const ::zserio::BitBuffer& getGltfData() const;
    ::zserio::BitBuffer& getGltfData();
    void setGltfData(const ::zserio::BitBuffer& gltfData_);
    void setGltfData(::zserio::BitBuffer&& gltfData_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const GltfLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::display::layer::GltfLayerHeader readHeader(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::layer::GltfLayerHeader readHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::BitBuffer readGltfData(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::display::layer::GltfLayerHeader m_header_;
    ::zserio::BitBuffer m_gltfData_;
};

} // namespace layer
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_LAYER_GLTF_LAYER_H
