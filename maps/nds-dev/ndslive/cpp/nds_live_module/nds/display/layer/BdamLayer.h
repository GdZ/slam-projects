/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_LAYER_BDAM_LAYER_H
#define NDS_DISPLAY_LAYER_BDAM_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/display/types/BdamLayerHeader.h>
#include <nds/display/types/BdamSurfaceGrid.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

class BdamLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::display::types::BdamLayerHeader::ZserioPackingContext& getHeader()
        {
            return m_header_;
        }

    private:
        ::nds::display::types::BdamLayerHeader::ZserioPackingContext m_header_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    BdamLayer() noexcept :
            BdamLayer(allocator_type())
    {}

    explicit BdamLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_header = ::nds::display::types::BdamLayerHeader,
            typename ZSERIO_T_surfaceGrids = ::zserio::vector<::nds::display::types::BdamSurfaceGrid>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_header, BdamLayer, allocator_type> = 0>
    BdamLayer(
            ZSERIO_T_header&& header_,
            ZSERIO_T_surfaceGrids&& surfaceGrids_,
            const allocator_type& allocator = allocator_type()) :
            BdamLayer(allocator)
    {
        m_header_ = ::std::forward<ZSERIO_T_header>(header_);
        m_surfaceGrids_ = ZserioArrayType_surfaceGrids(::std::forward<ZSERIO_T_surfaceGrids>(surfaceGrids_));
    }

    explicit BdamLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit BdamLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~BdamLayer() = default;

    BdamLayer(const BdamLayer& other);
    BdamLayer& operator=(const BdamLayer& other);

    BdamLayer(BdamLayer&& other);
    BdamLayer& operator=(BdamLayer&& other);

    BdamLayer(::zserio::PropagateAllocatorT,
            const BdamLayer& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::display::types::BdamLayerHeader& getHeader() const;
    ::nds::display::types::BdamLayerHeader& getHeader();
    void setHeader(const ::nds::display::types::BdamLayerHeader& header_);
    void setHeader(::nds::display::types::BdamLayerHeader&& header_);

    const ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& getSurfaceGrids() const;
    ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& getSurfaceGrids();
    void setSurfaceGrids(const ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& surfaceGrids_);
    void setSurfaceGrids(::zserio::vector<::nds::display::types::BdamSurfaceGrid>&& surfaceGrids_);

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const BdamLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_surfaceGrids
    {
    public:
        using OwnerType = BdamLayer;

        static void initializeElement(BdamLayer& owner,
                ::nds::display::types::BdamSurfaceGrid& element, size_t index);
    };

    class ZserioElementFactory_surfaceGrids
    {
    public:
        using OwnerType = BdamLayer;

        static void create(BdamLayer& owner,
                ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(BdamLayer& owner,
                ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& array,
                ::nds::display::types::BdamSurfaceGrid::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_surfaceGrids = ::zserio::Array<::zserio::vector<::nds::display::types::BdamSurfaceGrid>, ::zserio::ObjectArrayTraits<::nds::display::types::BdamSurfaceGrid, ZserioElementFactory_surfaceGrids>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_surfaceGrids>;

    ::nds::display::types::BdamLayerHeader readHeader(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::types::BdamLayerHeader readHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_surfaceGrids readSurfaceGrids(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_surfaceGrids readSurfaceGrids(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::display::types::BdamLayerHeader m_header_;
    ZserioArrayType_surfaceGrids m_surfaceGrids_;
};

} // namespace layer
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_LAYER_BDAM_LAYER_H
