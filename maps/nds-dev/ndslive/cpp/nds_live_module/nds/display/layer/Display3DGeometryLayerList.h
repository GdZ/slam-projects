/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_LAYER_DISPLAY3_DGEOMETRY_LAYER_LIST_H
#define NDS_DISPLAY_LAYER_DISPLAY3_DGEOMETRY_LAYER_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/Mesh3DRenderLayerData.h>
#include <nds/display/metadata/Display3DContent.h>

namespace nds
{
namespace display
{
namespace layer
{

class Display3DGeometryLayerList
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::display::layer::Mesh3DRenderLayerData::ZserioPackingContext& getMesh3DRenderLayer()
        {
            return m_mesh3DRenderLayer_;
        }

    private:
        ::nds::display::layer::Mesh3DRenderLayerData::ZserioPackingContext m_mesh3DRenderLayer_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Display3DGeometryLayerList() noexcept :
            Display3DGeometryLayerList(allocator_type())
    {}

    explicit Display3DGeometryLayerList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_mesh3DRenderLayer = ::nds::display::layer::Mesh3DRenderLayerData,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_mesh3DRenderLayer, Display3DGeometryLayerList, allocator_type> = 0>
    explicit Display3DGeometryLayerList(
            ZSERIO_T_mesh3DRenderLayer&& mesh3DRenderLayer_,
            const allocator_type& allocator = allocator_type()) :
            Display3DGeometryLayerList(allocator)
    {
        m_mesh3DRenderLayer_ = ::std::forward<ZSERIO_T_mesh3DRenderLayer>(mesh3DRenderLayer_);
    }

    explicit Display3DGeometryLayerList(::zserio::BitStreamReader& in,
            ::nds::display::metadata::Display3DContent content_, const allocator_type& allocator = allocator_type());
    explicit Display3DGeometryLayerList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::display::metadata::Display3DContent content_, const allocator_type& allocator = allocator_type());

    ~Display3DGeometryLayerList() = default;

    Display3DGeometryLayerList(const Display3DGeometryLayerList& other);
    Display3DGeometryLayerList& operator=(const Display3DGeometryLayerList& other);

    Display3DGeometryLayerList(Display3DGeometryLayerList&& other);
    Display3DGeometryLayerList& operator=(Display3DGeometryLayerList&& other);

    Display3DGeometryLayerList(::zserio::PropagateAllocatorT,
            const Display3DGeometryLayerList& other, const allocator_type& allocator);

    void initialize(
            ::nds::display::metadata::Display3DContent content_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::display::metadata::Display3DContent getContent() const;

    const ::nds::display::layer::Mesh3DRenderLayerData& getMesh3DRenderLayer() const;
    ::nds::display::layer::Mesh3DRenderLayerData& getMesh3DRenderLayer();
    void setMesh3DRenderLayer(const ::nds::display::layer::Mesh3DRenderLayerData& mesh3DRenderLayer_);
    void setMesh3DRenderLayer(::nds::display::layer::Mesh3DRenderLayerData&& mesh3DRenderLayer_);
    bool isMesh3DRenderLayerUsed() const;
    bool isMesh3DRenderLayerSet() const;
    void resetMesh3DRenderLayer();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Display3DGeometryLayerList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData> readMesh3DRenderLayer(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData> readMesh3DRenderLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::metadata::Display3DContent m_content_;
    bool m_isInitialized;
    ::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData> m_mesh3DRenderLayer_;
};

} // namespace layer
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_LAYER_DISPLAY3_DGEOMETRY_LAYER_LIST_H
