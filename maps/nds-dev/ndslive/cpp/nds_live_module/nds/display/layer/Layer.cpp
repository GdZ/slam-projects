/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/Display2DLayer.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

Display2DLayer::Display2DLayer(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_header_(allocator),
        m_geometryLayers_(::zserio::NullOpt),
        m_scaleSublevelLayers_(::zserio::NullOpt),
        m_clippingEdgeList_(::zserio::NullOpt)
{
}

Display2DLayer::Display2DLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_header_(readHeader(in, allocator)),
        m_geometryLayers_(readGeometryLayers(in, allocator)),
        m_scaleSublevelLayers_(readScaleSublevelLayers(in, allocator)),
        m_clippingEdgeList_(readClippingEdgeList(in, allocator))
{
}

Display2DLayer::Display2DLayer(Display2DLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_header_(readHeader(context, in, allocator)),
        m_geometryLayers_(readGeometryLayers(context, in, allocator)),
        m_scaleSublevelLayers_(readScaleSublevelLayers(context, in, allocator)),
        m_clippingEdgeList_(readClippingEdgeList(context, in, allocator))
{
}

Display2DLayer::Display2DLayer(const Display2DLayer& other) :
        m_header_(other.m_header_),
        m_geometryLayers_(other.m_geometryLayers_),
        m_scaleSublevelLayers_(other.m_scaleSublevelLayers_),
        m_clippingEdgeList_(other.m_clippingEdgeList_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Display2DLayer& Display2DLayer::operator=(const Display2DLayer& other)
{
    m_header_ = other.m_header_;
    m_geometryLayers_ = other.m_geometryLayers_;
    m_scaleSublevelLayers_ = other.m_scaleSublevelLayers_;
    m_clippingEdgeList_ = other.m_clippingEdgeList_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Display2DLayer::Display2DLayer(Display2DLayer&& other) :
        m_header_(::std::move(other.m_header_)),
        m_geometryLayers_(::std::move(other.m_geometryLayers_)),
        m_scaleSublevelLayers_(::std::move(other.m_scaleSublevelLayers_)),
        m_clippingEdgeList_(::std::move(other.m_clippingEdgeList_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Display2DLayer& Display2DLayer::operator=(Display2DLayer&& other)
{
    m_header_ = ::std::move(other.m_header_);
    m_geometryLayers_ = ::std::move(other.m_geometryLayers_);
    m_scaleSublevelLayers_ = ::std::move(other.m_scaleSublevelLayers_);
    m_clippingEdgeList_ = ::std::move(other.m_clippingEdgeList_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Display2DLayer::Display2DLayer(::zserio::PropagateAllocatorT,
        const Display2DLayer& other, const allocator_type& allocator) :
        m_header_(::zserio::allocatorPropagatingCopy(other.m_header_, allocator)),
        m_geometryLayers_(::zserio::allocatorPropagatingCopy(other.m_geometryLayers_, allocator)),
        m_scaleSublevelLayers_(::zserio::allocatorPropagatingCopy(other.m_scaleSublevelLayers_, allocator)),
        m_clippingEdgeList_(::zserio::allocatorPropagatingCopy(other.m_clippingEdgeList_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void Display2DLayer::initializeChildren()
{
    if (!getHeader().getHasScaleSublevels())
        m_geometryLayers_.value().initialize(static_cast<::nds::display::metadata::Display2DContent>(getHeader().getContent()));
    if (getHeader().getHasScaleSublevels())
        m_scaleSublevelLayers_.value().initializeElements(*this);
    if (getHeader().getHasClippingEdgeList())
        m_clippingEdgeList_.value().initializeChildren();

    m_areChildrenInitialized = true;
}

::nds::display::layer::Display2DLayerHeader& Display2DLayer::getHeader()
{
    return m_header_;
}

const ::nds::display::layer::Display2DLayerHeader& Display2DLayer::getHeader() const
{
    return m_header_;
}

void Display2DLayer::setHeader(const ::nds::display::layer::Display2DLayerHeader& header_)
{
    m_header_ = header_;
}

void Display2DLayer::setHeader(::nds::display::layer::Display2DLayerHeader&& header_)
{
    m_header_ = ::std::move(header_);
}

::nds::display::layer::Display2DGeometryLayerList& Display2DLayer::getGeometryLayers()
{
    return m_geometryLayers_.value();
}

const ::nds::display::layer::Display2DGeometryLayerList& Display2DLayer::getGeometryLayers() const
{
    return m_geometryLayers_.value();
}

void Display2DLayer::setGeometryLayers(const ::nds::display::layer::Display2DGeometryLayerList& geometryLayers_)
{
    m_geometryLayers_ = geometryLayers_;
}

void Display2DLayer::setGeometryLayers(::nds::display::layer::Display2DGeometryLayerList&& geometryLayers_)
{
    m_geometryLayers_ = ::std::move(geometryLayers_);
}

bool Display2DLayer::isGeometryLayersUsed() const
{
    return (!getHeader().getHasScaleSublevels());
}

bool Display2DLayer::isGeometryLayersSet() const
{
    return m_geometryLayers_.hasValue();
}

void Display2DLayer::resetGeometryLayers()
{
    m_geometryLayers_.reset();
}

::zserio::vector<::nds::display::layer::Display2DGeometryLayerList>& Display2DLayer::getScaleSublevelLayers()
{
    return m_scaleSublevelLayers_.value().getRawArray();
}

const ::zserio::vector<::nds::display::layer::Display2DGeometryLayerList>& Display2DLayer::getScaleSublevelLayers() const
{
    return m_scaleSublevelLayers_.value().getRawArray();
}

void Display2DLayer::setScaleSublevelLayers(const ::zserio::vector<::nds::display::layer::Display2DGeometryLayerList>& scaleSublevelLayers_)
{
    m_scaleSublevelLayers_ = ZserioArrayType_scaleSublevelLayers(scaleSublevelLayers_);
}

void Display2DLayer::setScaleSublevelLayers(::zserio::vector<::nds::display::layer::Display2DGeometryLayerList>&& scaleSublevelLayers_)
{
    m_scaleSublevelLayers_ = ZserioArrayType_scaleSublevelLayers(std::move(scaleSublevelLayers_));
}

bool Display2DLayer::isScaleSublevelLayersUsed() const
{
    return (getHeader().getHasScaleSublevels());
}

bool Display2DLayer::isScaleSublevelLayersSet() const
{
    return m_scaleSublevelLayers_.hasValue();
}

void Display2DLayer::resetScaleSublevelLayers()
{
    m_scaleSublevelLayers_.reset();
}

::nds::display::types::ClippingEdgeList& Display2DLayer::getClippingEdgeList()
{
    return m_clippingEdgeList_.value();
}

const ::nds::display::types::ClippingEdgeList& Display2DLayer::getClippingEdgeList() const
{
    return m_clippingEdgeList_.value();
}

void Display2DLayer::setClippingEdgeList(const ::nds::display::types::ClippingEdgeList& clippingEdgeList_)
{
    m_clippingEdgeList_ = clippingEdgeList_;
}

void Display2DLayer::setClippingEdgeList(::nds::display::types::ClippingEdgeList&& clippingEdgeList_)
{
    m_clippingEdgeList_ = ::std::move(clippingEdgeList_);
}

bool Display2DLayer::isClippingEdgeListUsed() const
{
    return (getHeader().getHasClippingEdgeList());
}

bool Display2DLayer::isClippingEdgeListSet() const
{
    return m_clippingEdgeList_.hasValue();
}

void Display2DLayer::resetClippingEdgeList()
{
    m_clippingEdgeList_.reset();
}

::nds::system::types::LayerType Display2DLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::FEATURE);
}

void Display2DLayer::initPackingContext(Display2DLayer::ZserioPackingContext& context) const
{
    m_header_.initPackingContext(context.getHeader());
    if (!getHeader().getHasScaleSublevels())
    {
        m_geometryLayers_.value().initPackingContext(context.getGeometryLayers());
    }
    if (getHeader().getHasClippingEdgeList())
    {
        m_clippingEdgeList_.value().initPackingContext(context.getClippingEdgeList());
    }
}

size_t Display2DLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(endBitPosition);
    if (!getHeader().getHasScaleSublevels())
    {
        endBitPosition += m_geometryLayers_.value().bitSizeOf(endBitPosition);
    }
    if (getHeader().getHasScaleSublevels())
    {
        endBitPosition += m_scaleSublevelLayers_.value().bitSizeOf(*this, endBitPosition);
    }
    if (getHeader().getHasClippingEdgeList())
    {
        endBitPosition += m_clippingEdgeList_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display2DLayer::bitSizeOf(Display2DLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(context.getHeader(), endBitPosition);
    if (!getHeader().getHasScaleSublevels())
    {
        endBitPosition += m_geometryLayers_.value().bitSizeOf(context.getGeometryLayers(), endBitPosition);
    }
    if (getHeader().getHasScaleSublevels())
    {
        endBitPosition += m_scaleSublevelLayers_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getHeader().getHasClippingEdgeList())
    {
        endBitPosition += m_clippingEdgeList_.value().bitSizeOf(context.getClippingEdgeList(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display2DLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(endBitPosition);
    if (!getHeader().getHasScaleSublevels())
    {
        endBitPosition = m_geometryLayers_.value().initializeOffsets(endBitPosition);
    }
    if (getHeader().getHasScaleSublevels())
    {
        endBitPosition = m_scaleSublevelLayers_.value().initializeOffsets(*this, endBitPosition);
    }
    if (getHeader().getHasClippingEdgeList())
    {
        endBitPosition = m_clippingEdgeList_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t Display2DLayer::initializeOffsets(Display2DLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(context.getHeader(), endBitPosition);
    if (!getHeader().getHasScaleSublevels())
    {
        endBitPosition = m_geometryLayers_.value().initializeOffsets(context.getGeometryLayers(), endBitPosition);
    }
    if (getHeader().getHasScaleSublevels())
    {
        endBitPosition = m_scaleSublevelLayers_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getHeader().getHasClippingEdgeList())
    {
        endBitPosition = m_clippingEdgeList_.value().initializeOffsets(context.getClippingEdgeList(), endBitPosition);
    }

    return endBitPosition;
}

bool Display2DLayer::operator==(const Display2DLayer& other) const
{
    if (this != &other)
    {
        return
                (m_header_ == other.m_header_) &&
                (!isGeometryLayersUsed() ? !other.isGeometryLayersUsed() : (m_geometryLayers_ == other.m_geometryLayers_)) &&
                (!isScaleSublevelLayersUsed() ? !other.isScaleSublevelLayersUsed() : (m_scaleSublevelLayers_ == other.m_scaleSublevelLayers_)) &&
                (!isClippingEdgeListUsed() ? !other.isClippingEdgeListUsed() : (m_clippingEdgeList_ == other.m_clippingEdgeList_));
    }

    return true;
}

uint32_t Display2DLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_header_);
    if (isGeometryLayersUsed())
        result = ::zserio::calcHashCode(result, m_geometryLayers_);
    if (isScaleSublevelLayersUsed())
        result = ::zserio::calcHashCode(result, m_scaleSublevelLayers_);
    if (isClippingEdgeListUsed())
        result = ::zserio::calcHashCode(result, m_clippingEdgeList_);

    return result;
}

void Display2DLayer::write(::zserio::BitStreamWriter& out) const
{
    m_header_.write(out);

    if (!getHeader().getHasScaleSublevels())
    {
        // check parameters
        if (m_geometryLayers_.value().getContent() != static_cast<::nds::display::metadata::Display2DContent>(getHeader().getContent()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter content for field Display2DLayer.geometryLayers: ") <<
                    m_geometryLayers_.value().getContent() << " != " << static_cast<::nds::display::metadata::Display2DContent>(getHeader().getContent()) << "!";
        }
        m_geometryLayers_.value().write(out);
    }

    if (getHeader().getHasScaleSublevels())
    {
        // check array length
        if (m_scaleSublevelLayers_.value().getRawArray().size() != static_cast<size_t>(getHeader().getNumSublevels()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Display2DLayer.scaleSublevelLayers: ") <<
                    m_scaleSublevelLayers_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().getNumSublevels()) << "!";
        }
        m_scaleSublevelLayers_.value().write(*this, out);
    }

    if (getHeader().getHasClippingEdgeList())
    {
        m_clippingEdgeList_.value().write(out);
    }
}

void Display2DLayer::write(Display2DLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_header_.write(context.getHeader(), out);

    if (!getHeader().getHasScaleSublevels())
    {
        // check parameters
        if (m_geometryLayers_.value().getContent() != static_cast<::nds::display::metadata::Display2DContent>(getHeader().getContent()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter content for field Display2DLayer.geometryLayers: ") <<
                    m_geometryLayers_.value().getContent() << " != " << static_cast<::nds::display::metadata::Display2DContent>(getHeader().getContent()) << "!";
        }
        m_geometryLayers_.value().write(context.getGeometryLayers(), out);
    }

    if (getHeader().getHasScaleSublevels())
    {
        // check array length
        if (m_scaleSublevelLayers_.value().getRawArray().size() != static_cast<size_t>(getHeader().getNumSublevels()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Display2DLayer.scaleSublevelLayers: ") <<
                    m_scaleSublevelLayers_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().getNumSublevels()) << "!";
        }
        m_scaleSublevelLayers_.value().writePacked(*this, out);
    }

    if (getHeader().getHasClippingEdgeList())
    {
        m_clippingEdgeList_.value().write(context.getClippingEdgeList(), out);
    }
}

void Display2DLayer::ZserioArrayExpressions_scaleSublevelLayers::initializeElement(Display2DLayer& owner,
        ::nds::display::layer::Display2DGeometryLayerList& element, size_t)
{
    element.initialize(static_cast<::nds::display::metadata::Display2DContent>(owner.getHeader().getContent()));
}

void Display2DLayer::ZserioElementFactory_scaleSublevelLayers::create(Display2DLayer&         owner,
        ::zserio::vector<::nds::display::layer::Display2DGeometryLayerList>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, static_cast<::nds::display::metadata::Display2DContent>(owner.getHeader().getContent()), array.get_allocator());
}

void Display2DLayer::ZserioElementFactory_scaleSublevelLayers::create(Display2DLayer&         owner,
        ::zserio::vector<::nds::display::layer::Display2DGeometryLayerList>& array,
        ::nds::display::layer::Display2DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, static_cast<::nds::display::metadata::Display2DContent>(owner.getHeader().getContent()), array.get_allocator());
}

::nds::display::layer::Display2DLayerHeader Display2DLayer::readHeader(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::layer::Display2DLayerHeader(in, allocator);
}

::nds::display::layer::Display2DLayerHeader Display2DLayer::readHeader(Display2DLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::layer::Display2DLayerHeader(context.getHeader(), in, allocator);
}
::zserio::InplaceOptionalHolder<::nds::display::layer::Display2DGeometryLayerList> Display2DLayer::readGeometryLayers(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (!getHeader().getHasScaleSublevels())
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::layer::Display2DGeometryLayerList>(::nds::display::layer::Display2DGeometryLayerList(in, static_cast<::nds::display::metadata::Display2DContent>(getHeader().getContent()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::layer::Display2DGeometryLayerList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::layer::Display2DGeometryLayerList> Display2DLayer::readGeometryLayers(Display2DLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (!getHeader().getHasScaleSublevels())
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::layer::Display2DGeometryLayerList>(::nds::display::layer::Display2DGeometryLayerList(context.getGeometryLayers(), in, static_cast<::nds::display::metadata::Display2DContent>(getHeader().getContent()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::layer::Display2DGeometryLayerList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Display2DLayer::ZserioArrayType_scaleSublevelLayers> Display2DLayer::readScaleSublevelLayers(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHeader().getHasScaleSublevels())
    {
        ZserioArrayType_scaleSublevelLayers readField(allocator);
        readField.read(*this, in, static_cast<size_t>(getHeader().getNumSublevels()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleSublevelLayers>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleSublevelLayers>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display2DLayer::ZserioArrayType_scaleSublevelLayers> Display2DLayer::readScaleSublevelLayers(Display2DLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHeader().getHasScaleSublevels())
    {
        ZserioArrayType_scaleSublevelLayers readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getHeader().getNumSublevels()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleSublevelLayers>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_scaleSublevelLayers>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::types::ClippingEdgeList> Display2DLayer::readClippingEdgeList(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHeader().getHasClippingEdgeList())
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::types::ClippingEdgeList>(::nds::display::types::ClippingEdgeList(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::types::ClippingEdgeList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::types::ClippingEdgeList> Display2DLayer::readClippingEdgeList(Display2DLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHeader().getHasClippingEdgeList())
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::types::ClippingEdgeList>(::nds::display::types::ClippingEdgeList(context.getClippingEdgeList(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::types::ClippingEdgeList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/layer/Display2DLayerHeader.h>

namespace nds
{
namespace display
{
namespace layer
{

Display2DLayerHeader::Display2DLayerHeader(const allocator_type&) noexcept :
        m_content_(::nds::display::metadata::Display2DContent()),
        m_hasClippingEdgeList_(bool()),
        m_hasScaleSublevels_(bool()),
        m_minScaleDenominator_(::nds::core::types::ScaleDenominator()),
        m_maxScaleDenominator_(::nds::core::types::ScaleDenominator()),
        m_numSublevels_(::zserio::NullOpt),
        m_subscales_(::zserio::NullOpt)
{
}

Display2DLayerHeader::Display2DLayerHeader(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_hasClippingEdgeList_(readHasClippingEdgeList(in)),
        m_hasScaleSublevels_(readHasScaleSublevels(in)),
        m_minScaleDenominator_(readMinScaleDenominator(in)),
        m_maxScaleDenominator_(readMaxScaleDenominator(in)),
        m_numSublevels_(readNumSublevels(in)),
        m_subscales_(readSubscales(in, allocator))
{
}

Display2DLayerHeader::Display2DLayerHeader(Display2DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_hasClippingEdgeList_(readHasClippingEdgeList(in)),
        m_hasScaleSublevels_(readHasScaleSublevels(in)),
        m_minScaleDenominator_(readMinScaleDenominator(context, in)),
        m_maxScaleDenominator_(readMaxScaleDenominator(context, in)),
        m_numSublevels_(readNumSublevels(context, in)),
        m_subscales_(readSubscales(context, in, allocator))
{
}

Display2DLayerHeader::Display2DLayerHeader(::zserio::PropagateAllocatorT,
        const Display2DLayerHeader& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_hasClippingEdgeList_(::zserio::allocatorPropagatingCopy(other.m_hasClippingEdgeList_, allocator)),
        m_hasScaleSublevels_(::zserio::allocatorPropagatingCopy(other.m_hasScaleSublevels_, allocator)),
        m_minScaleDenominator_(::zserio::allocatorPropagatingCopy(other.m_minScaleDenominator_, allocator)),
        m_maxScaleDenominator_(::zserio::allocatorPropagatingCopy(other.m_maxScaleDenominator_, allocator)),
        m_numSublevels_(::zserio::allocatorPropagatingCopy(other.m_numSublevels_, allocator)),
        m_subscales_(::zserio::allocatorPropagatingCopy(other.m_subscales_, allocator))
{
}

::nds::display::metadata::Display2DContent Display2DLayerHeader::getContent() const
{
    return m_content_;
}

void Display2DLayerHeader::setContent(::nds::display::metadata::Display2DContent content_)
{
    m_content_ = content_;
}

bool Display2DLayerHeader::getHasClippingEdgeList() const
{
    return m_hasClippingEdgeList_;
}

void Display2DLayerHeader::setHasClippingEdgeList(bool hasClippingEdgeList_)
{
    m_hasClippingEdgeList_ = hasClippingEdgeList_;
}

bool Display2DLayerHeader::getHasScaleSublevels() const
{
    return m_hasScaleSublevels_;
}

void Display2DLayerHeader::setHasScaleSublevels(bool hasScaleSublevels_)
{
    m_hasScaleSublevels_ = hasScaleSublevels_;
}

::nds::core::types::ScaleDenominator Display2DLayerHeader::getMinScaleDenominator() const
{
    return m_minScaleDenominator_;
}

void Display2DLayerHeader::setMinScaleDenominator(::nds::core::types::ScaleDenominator minScaleDenominator_)
{
    m_minScaleDenominator_ = minScaleDenominator_;
}

::nds::core::types::ScaleDenominator Display2DLayerHeader::getMaxScaleDenominator() const
{
    return m_maxScaleDenominator_;
}

void Display2DLayerHeader::setMaxScaleDenominator(::nds::core::types::ScaleDenominator maxScaleDenominator_)
{
    m_maxScaleDenominator_ = maxScaleDenominator_;
}

uint8_t Display2DLayerHeader::getNumSublevels() const
{
    return m_numSublevels_.value();
}

void Display2DLayerHeader::setNumSublevels(uint8_t numSublevels_)
{
    m_numSublevels_ = numSublevels_;
}

bool Display2DLayerHeader::isNumSublevelsUsed() const
{
    return (getHasScaleSublevels());
}

bool Display2DLayerHeader::isNumSublevelsSet() const
{
    return m_numSublevels_.hasValue();
}

void Display2DLayerHeader::resetNumSublevels()
{
    m_numSublevels_.reset();
}

::zserio::vector<::nds::display::types::SublevelScaleDenominator>& Display2DLayerHeader::getSubscales()
{
    return m_subscales_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::SublevelScaleDenominator>& Display2DLayerHeader::getSubscales() const
{
    return m_subscales_.value().getRawArray();
}

void Display2DLayerHeader::setSubscales(const ::zserio::vector<::nds::display::types::SublevelScaleDenominator>& subscales_)
{
    m_subscales_ = ZserioArrayType_subscales(subscales_);
}

void Display2DLayerHeader::setSubscales(::zserio::vector<::nds::display::types::SublevelScaleDenominator>&& subscales_)
{
    m_subscales_ = ZserioArrayType_subscales(std::move(subscales_));
}

bool Display2DLayerHeader::isSubscalesUsed() const
{
    return (getHasScaleSublevels());
}

bool Display2DLayerHeader::isSubscalesSet() const
{
    return m_subscales_.hasValue();
}

void Display2DLayerHeader::resetSubscales()
{
    m_subscales_.reset();
}

void Display2DLayerHeader::initPackingContext(Display2DLayerHeader::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getMinScaleDenominator().init<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    context.getMaxScaleDenominator().init<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);
    if (getHasScaleSublevels())
    {
        context.getNumSublevels().init<::zserio::StdIntArrayTraits<uint8_t>>(m_numSublevels_.value());
    }
}

size_t Display2DLayerHeader::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(32);
    endBitPosition += UINT8_C(32);
    if (getHasScaleSublevels())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getHasScaleSublevels())
    {
        endBitPosition += m_subscales_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display2DLayerHeader::bitSizeOf(Display2DLayerHeader::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += context.getMinScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    endBitPosition += context.getMaxScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);
    if (getHasScaleSublevels())
    {
        endBitPosition += context.getNumSublevels().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_numSublevels_.value());
    }
    if (getHasScaleSublevels())
    {
        endBitPosition += m_subscales_.value().bitSizeOfPacked(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display2DLayerHeader::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(32);
    endBitPosition += UINT8_C(32);
    if (getHasScaleSublevels())
    {
        endBitPosition += UINT8_C(8);
    }
    if (getHasScaleSublevels())
    {
        endBitPosition = m_subscales_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t Display2DLayerHeader::initializeOffsets(Display2DLayerHeader::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += context.getMinScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    endBitPosition += context.getMaxScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);
    if (getHasScaleSublevels())
    {
        endBitPosition += context.getNumSublevels().bitSizeOf<::zserio::StdIntArrayTraits<uint8_t>>(m_numSublevels_.value());
    }
    if (getHasScaleSublevels())
    {
        endBitPosition = m_subscales_.value().initializeOffsetsPacked(endBitPosition);
    }

    return endBitPosition;
}

bool Display2DLayerHeader::operator==(const Display2DLayerHeader& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_hasClippingEdgeList_ == other.m_hasClippingEdgeList_) &&
                (m_hasScaleSublevels_ == other.m_hasScaleSublevels_) &&
                (m_minScaleDenominator_ == other.m_minScaleDenominator_) &&
                (m_maxScaleDenominator_ == other.m_maxScaleDenominator_) &&
                (!isNumSublevelsUsed() ? !other.isNumSublevelsUsed() : (m_numSublevels_ == other.m_numSublevels_)) &&
                (!isSubscalesUsed() ? !other.isSubscalesUsed() : (m_subscales_ == other.m_subscales_));
    }

    return true;
}

uint32_t Display2DLayerHeader::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_hasClippingEdgeList_);
    result = ::zserio::calcHashCode(result, m_hasScaleSublevels_);
    result = ::zserio::calcHashCode(result, m_minScaleDenominator_);
    result = ::zserio::calcHashCode(result, m_maxScaleDenominator_);
    if (isNumSublevelsUsed())
        result = ::zserio::calcHashCode(result, m_numSublevels_);
    if (isSubscalesUsed())
        result = ::zserio::calcHashCode(result, m_subscales_);

    return result;
}

void Display2DLayerHeader::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBool(m_hasClippingEdgeList_);

    out.writeBool(m_hasScaleSublevels_);

    out.writeBits(m_minScaleDenominator_, UINT8_C(32));

    out.writeBits(m_maxScaleDenominator_, UINT8_C(32));

    if (getHasScaleSublevels())
    {
        out.writeBits(m_numSublevels_.value(), UINT8_C(8));
    }

    if (getHasScaleSublevels())
    {
        // check array length
        if (m_subscales_.value().getRawArray().size() != static_cast<size_t>(getNumSublevels()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Display2DLayerHeader.subscales: ") <<
                    m_subscales_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumSublevels()) << "!";
        }
        m_subscales_.value().write(out);
    }
}

void Display2DLayerHeader::write(Display2DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    out.writeBool(m_hasClippingEdgeList_);

    out.writeBool(m_hasScaleSublevels_);

    context.getMinScaleDenominator().write<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(out, m_minScaleDenominator_);

    context.getMaxScaleDenominator().write<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(out, m_maxScaleDenominator_);

    if (getHasScaleSublevels())
    {
        context.getNumSublevels().write<::zserio::StdIntArrayTraits<uint8_t>>(out, m_numSublevels_.value());
    }

    if (getHasScaleSublevels())
    {
        // check array length
        if (m_subscales_.value().getRawArray().size() != static_cast<size_t>(getNumSublevels()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Display2DLayerHeader.subscales: ") <<
                    m_subscales_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumSublevels()) << "!";
        }
        m_subscales_.value().writePacked(out);
    }
}

::nds::display::metadata::Display2DContent Display2DLayerHeader::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::Display2DContent(in);
}

::nds::display::metadata::Display2DContent Display2DLayerHeader::readContent(Display2DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::Display2DContent(context.getContent(), in);
}
bool Display2DLayerHeader::readHasClippingEdgeList(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool Display2DLayerHeader::readHasScaleSublevels(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
::nds::core::types::ScaleDenominator Display2DLayerHeader::readMinScaleDenominator(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::ScaleDenominator>(in.readBits(UINT8_C(32)));
}

::nds::core::types::ScaleDenominator Display2DLayerHeader::readMinScaleDenominator(Display2DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMinScaleDenominator().read<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(in);
}
::nds::core::types::ScaleDenominator Display2DLayerHeader::readMaxScaleDenominator(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::ScaleDenominator>(in.readBits(UINT8_C(32)));
}

::nds::core::types::ScaleDenominator Display2DLayerHeader::readMaxScaleDenominator(Display2DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMaxScaleDenominator().read<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(in);
}
::zserio::InplaceOptionalHolder<uint8_t> Display2DLayerHeader::readNumSublevels(::zserio::BitStreamReader& in)
{
    if (getHasScaleSublevels())
    {
        return ::zserio::InplaceOptionalHolder<uint8_t>(static_cast<uint8_t>(in.readBits(UINT8_C(8))));
    }

    return ::zserio::InplaceOptionalHolder<uint8_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<uint8_t> Display2DLayerHeader::readNumSublevels(Display2DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getHasScaleSublevels())
    {
        return ::zserio::InplaceOptionalHolder<uint8_t>(context.getNumSublevels().read<::zserio::StdIntArrayTraits<uint8_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<uint8_t>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Display2DLayerHeader::ZserioArrayType_subscales> Display2DLayerHeader::readSubscales(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getHasScaleSublevels())
    {
        ZserioArrayType_subscales readField(allocator);
        readField.read(in, static_cast<size_t>(getNumSublevels()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_subscales>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_subscales>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display2DLayerHeader::ZserioArrayType_subscales> Display2DLayerHeader::readSubscales(Display2DLayerHeader::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getHasScaleSublevels())
    {
        ZserioArrayType_subscales readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getNumSublevels()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_subscales>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_subscales>(::zserio::NullOpt);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/Display2DGeometryLayerList.h>
#include <nds/core/geometry/GeometryLayerType.h>
#include <nds/display/metadata/Display2DContent.h>

namespace nds
{
namespace display
{
namespace layer
{

Display2DGeometryLayerList::Display2DGeometryLayerList(const allocator_type&) noexcept :
        m_isInitialized(false),
        m_areaDisplayGeometryLayer_(::zserio::NullOpt),
        m_lineDisplayGeometryLayer_(::zserio::NullOpt),
        m_pointDisplayGeometryLayer_(::zserio::NullOpt),
        m_simpleAreaDisplayGeometryLayer_(::zserio::NullOpt),
        m_simpleAreaSetDisplayGeometryLayer_(::zserio::NullOpt)
{
}

Display2DGeometryLayerList::Display2DGeometryLayerList(::zserio::BitStreamReader& in,
        ::nds::display::metadata::Display2DContent content_, const allocator_type& allocator) :
        m_content_(content_),
        m_isInitialized(true),
        m_areaDisplayGeometryLayer_(readAreaDisplayGeometryLayer(in, allocator)),
        m_lineDisplayGeometryLayer_(readLineDisplayGeometryLayer(in, allocator)),
        m_pointDisplayGeometryLayer_(readPointDisplayGeometryLayer(in, allocator)),
        m_simpleAreaDisplayGeometryLayer_(readSimpleAreaDisplayGeometryLayer(in, allocator)),
        m_simpleAreaSetDisplayGeometryLayer_(readSimpleAreaSetDisplayGeometryLayer(in, allocator))
{
}

Display2DGeometryLayerList::Display2DGeometryLayerList(Display2DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::display::metadata::Display2DContent content_, const allocator_type& allocator) :
        m_content_(content_),
        m_isInitialized(true),
        m_areaDisplayGeometryLayer_(readAreaDisplayGeometryLayer(context, in, allocator)),
        m_lineDisplayGeometryLayer_(readLineDisplayGeometryLayer(context, in, allocator)),
        m_pointDisplayGeometryLayer_(readPointDisplayGeometryLayer(context, in, allocator)),
        m_simpleAreaDisplayGeometryLayer_(readSimpleAreaDisplayGeometryLayer(context, in, allocator)),
        m_simpleAreaSetDisplayGeometryLayer_(readSimpleAreaSetDisplayGeometryLayer(context, in, allocator))
{
}

Display2DGeometryLayerList::Display2DGeometryLayerList(const Display2DGeometryLayerList& other) :
        m_areaDisplayGeometryLayer_(other.m_areaDisplayGeometryLayer_),
        m_lineDisplayGeometryLayer_(other.m_lineDisplayGeometryLayer_),
        m_pointDisplayGeometryLayer_(other.m_pointDisplayGeometryLayer_),
        m_simpleAreaDisplayGeometryLayer_(other.m_simpleAreaDisplayGeometryLayer_),
        m_simpleAreaSetDisplayGeometryLayer_(other.m_simpleAreaSetDisplayGeometryLayer_)
{
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;
}

Display2DGeometryLayerList& Display2DGeometryLayerList::operator=(const Display2DGeometryLayerList& other)
{
    m_areaDisplayGeometryLayer_ = other.m_areaDisplayGeometryLayer_;
    m_lineDisplayGeometryLayer_ = other.m_lineDisplayGeometryLayer_;
    m_pointDisplayGeometryLayer_ = other.m_pointDisplayGeometryLayer_;
    m_simpleAreaDisplayGeometryLayer_ = other.m_simpleAreaDisplayGeometryLayer_;
    m_simpleAreaSetDisplayGeometryLayer_ = other.m_simpleAreaSetDisplayGeometryLayer_;
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;

    return *this;
}

Display2DGeometryLayerList::Display2DGeometryLayerList(Display2DGeometryLayerList&& other) :
        m_areaDisplayGeometryLayer_(::std::move(other.m_areaDisplayGeometryLayer_)),
        m_lineDisplayGeometryLayer_(::std::move(other.m_lineDisplayGeometryLayer_)),
        m_pointDisplayGeometryLayer_(::std::move(other.m_pointDisplayGeometryLayer_)),
        m_simpleAreaDisplayGeometryLayer_(::std::move(other.m_simpleAreaDisplayGeometryLayer_)),
        m_simpleAreaSetDisplayGeometryLayer_(::std::move(other.m_simpleAreaSetDisplayGeometryLayer_))
{
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;
}

Display2DGeometryLayerList& Display2DGeometryLayerList::operator=(Display2DGeometryLayerList&& other)
{
    m_areaDisplayGeometryLayer_ = ::std::move(other.m_areaDisplayGeometryLayer_);
    m_lineDisplayGeometryLayer_ = ::std::move(other.m_lineDisplayGeometryLayer_);
    m_pointDisplayGeometryLayer_ = ::std::move(other.m_pointDisplayGeometryLayer_);
    m_simpleAreaDisplayGeometryLayer_ = ::std::move(other.m_simpleAreaDisplayGeometryLayer_);
    m_simpleAreaSetDisplayGeometryLayer_ = ::std::move(other.m_simpleAreaSetDisplayGeometryLayer_);
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;

    return *this;
}

Display2DGeometryLayerList::Display2DGeometryLayerList(::zserio::PropagateAllocatorT,
        const Display2DGeometryLayerList& other, const allocator_type& allocator) :
        m_areaDisplayGeometryLayer_(::zserio::allocatorPropagatingCopy(other.m_areaDisplayGeometryLayer_, allocator)),
        m_lineDisplayGeometryLayer_(::zserio::allocatorPropagatingCopy(other.m_lineDisplayGeometryLayer_, allocator)),
        m_pointDisplayGeometryLayer_(::zserio::allocatorPropagatingCopy(other.m_pointDisplayGeometryLayer_, allocator)),
        m_simpleAreaDisplayGeometryLayer_(::zserio::allocatorPropagatingCopy(other.m_simpleAreaDisplayGeometryLayer_, allocator)),
        m_simpleAreaSetDisplayGeometryLayer_(::zserio::allocatorPropagatingCopy(other.m_simpleAreaSetDisplayGeometryLayer_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;
}

void Display2DGeometryLayerList::initialize(
        ::nds::display::metadata::Display2DContent content_)
{
    m_content_ = content_;
    m_isInitialized = true;

    initializeChildren();
}

bool Display2DGeometryLayerList::isInitialized() const
{
    return m_isInitialized;
}

void Display2DGeometryLayerList::initializeChildren()
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
        m_areaDisplayGeometryLayer_.value().initialize(static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POLYGON_2D), static_cast<bool>(true), static_cast<bool>(true));
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
        m_lineDisplayGeometryLayer_.value().initialize(static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_2D), static_cast<bool>(true), static_cast<bool>(true));
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
        m_pointDisplayGeometryLayer_.value().initialize(static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POSITION_2D), static_cast<bool>(true), static_cast<bool>(true));
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
        m_simpleAreaDisplayGeometryLayer_.value().initialize(static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_2D), static_cast<bool>(true), static_cast<bool>(true));
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
        m_simpleAreaSetDisplayGeometryLayer_.value().initialize(static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_SET_2D), static_cast<bool>(true), static_cast<bool>(true));
}

::nds::display::metadata::Display2DContent Display2DGeometryLayerList::getContent() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'content' of compound 'Display2DGeometryLayerList' is not initialized!");

    return m_content_;
}

::nds::display::instantiations::AreaDisplayGeometryLayer& Display2DGeometryLayerList::getAreaDisplayGeometryLayer()
{
    return m_areaDisplayGeometryLayer_.value();
}

const ::nds::display::instantiations::AreaDisplayGeometryLayer& Display2DGeometryLayerList::getAreaDisplayGeometryLayer() const
{
    return m_areaDisplayGeometryLayer_.value();
}

void Display2DGeometryLayerList::setAreaDisplayGeometryLayer(const ::nds::display::instantiations::AreaDisplayGeometryLayer& areaDisplayGeometryLayer_)
{
    m_areaDisplayGeometryLayer_ = areaDisplayGeometryLayer_;
}

void Display2DGeometryLayerList::setAreaDisplayGeometryLayer(::nds::display::instantiations::AreaDisplayGeometryLayer&& areaDisplayGeometryLayer_)
{
    m_areaDisplayGeometryLayer_ = ::std::move(areaDisplayGeometryLayer_);
}

bool Display2DGeometryLayerList::isAreaDisplayGeometryLayerUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS);
}

bool Display2DGeometryLayerList::isAreaDisplayGeometryLayerSet() const
{
    return m_areaDisplayGeometryLayer_.hasValue();
}

void Display2DGeometryLayerList::resetAreaDisplayGeometryLayer()
{
    m_areaDisplayGeometryLayer_.reset();
}

::nds::display::instantiations::LineDisplayGeometryLayer& Display2DGeometryLayerList::getLineDisplayGeometryLayer()
{
    return m_lineDisplayGeometryLayer_.value();
}

const ::nds::display::instantiations::LineDisplayGeometryLayer& Display2DGeometryLayerList::getLineDisplayGeometryLayer() const
{
    return m_lineDisplayGeometryLayer_.value();
}

void Display2DGeometryLayerList::setLineDisplayGeometryLayer(const ::nds::display::instantiations::LineDisplayGeometryLayer& lineDisplayGeometryLayer_)
{
    m_lineDisplayGeometryLayer_ = lineDisplayGeometryLayer_;
}

void Display2DGeometryLayerList::setLineDisplayGeometryLayer(::nds::display::instantiations::LineDisplayGeometryLayer&& lineDisplayGeometryLayer_)
{
    m_lineDisplayGeometryLayer_ = ::std::move(lineDisplayGeometryLayer_);
}

bool Display2DGeometryLayerList::isLineDisplayGeometryLayerUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES);
}

bool Display2DGeometryLayerList::isLineDisplayGeometryLayerSet() const
{
    return m_lineDisplayGeometryLayer_.hasValue();
}

void Display2DGeometryLayerList::resetLineDisplayGeometryLayer()
{
    m_lineDisplayGeometryLayer_.reset();
}

::nds::display::instantiations::PointDisplayGeometryLayer& Display2DGeometryLayerList::getPointDisplayGeometryLayer()
{
    return m_pointDisplayGeometryLayer_.value();
}

const ::nds::display::instantiations::PointDisplayGeometryLayer& Display2DGeometryLayerList::getPointDisplayGeometryLayer() const
{
    return m_pointDisplayGeometryLayer_.value();
}

void Display2DGeometryLayerList::setPointDisplayGeometryLayer(const ::nds::display::instantiations::PointDisplayGeometryLayer& pointDisplayGeometryLayer_)
{
    m_pointDisplayGeometryLayer_ = pointDisplayGeometryLayer_;
}

void Display2DGeometryLayerList::setPointDisplayGeometryLayer(::nds::display::instantiations::PointDisplayGeometryLayer&& pointDisplayGeometryLayer_)
{
    m_pointDisplayGeometryLayer_ = ::std::move(pointDisplayGeometryLayer_);
}

bool Display2DGeometryLayerList::isPointDisplayGeometryLayerUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS);
}

bool Display2DGeometryLayerList::isPointDisplayGeometryLayerSet() const
{
    return m_pointDisplayGeometryLayer_.hasValue();
}

void Display2DGeometryLayerList::resetPointDisplayGeometryLayer()
{
    m_pointDisplayGeometryLayer_.reset();
}

::nds::display::instantiations::AreaDisplayGeometryLayer& Display2DGeometryLayerList::getSimpleAreaDisplayGeometryLayer()
{
    return m_simpleAreaDisplayGeometryLayer_.value();
}

const ::nds::display::instantiations::AreaDisplayGeometryLayer& Display2DGeometryLayerList::getSimpleAreaDisplayGeometryLayer() const
{
    return m_simpleAreaDisplayGeometryLayer_.value();
}

void Display2DGeometryLayerList::setSimpleAreaDisplayGeometryLayer(const ::nds::display::instantiations::AreaDisplayGeometryLayer& simpleAreaDisplayGeometryLayer_)
{
    m_simpleAreaDisplayGeometryLayer_ = simpleAreaDisplayGeometryLayer_;
}

void Display2DGeometryLayerList::setSimpleAreaDisplayGeometryLayer(::nds::display::instantiations::AreaDisplayGeometryLayer&& simpleAreaDisplayGeometryLayer_)
{
    m_simpleAreaDisplayGeometryLayer_ = ::std::move(simpleAreaDisplayGeometryLayer_);
}

bool Display2DGeometryLayerList::isSimpleAreaDisplayGeometryLayerUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS);
}

bool Display2DGeometryLayerList::isSimpleAreaDisplayGeometryLayerSet() const
{
    return m_simpleAreaDisplayGeometryLayer_.hasValue();
}

void Display2DGeometryLayerList::resetSimpleAreaDisplayGeometryLayer()
{
    m_simpleAreaDisplayGeometryLayer_.reset();
}

::nds::display::instantiations::AreaDisplayGeometryLayer& Display2DGeometryLayerList::getSimpleAreaSetDisplayGeometryLayer()
{
    return m_simpleAreaSetDisplayGeometryLayer_.value();
}

const ::nds::display::instantiations::AreaDisplayGeometryLayer& Display2DGeometryLayerList::getSimpleAreaSetDisplayGeometryLayer() const
{
    return m_simpleAreaSetDisplayGeometryLayer_.value();
}

void Display2DGeometryLayerList::setSimpleAreaSetDisplayGeometryLayer(const ::nds::display::instantiations::AreaDisplayGeometryLayer& simpleAreaSetDisplayGeometryLayer_)
{
    m_simpleAreaSetDisplayGeometryLayer_ = simpleAreaSetDisplayGeometryLayer_;
}

void Display2DGeometryLayerList::setSimpleAreaSetDisplayGeometryLayer(::nds::display::instantiations::AreaDisplayGeometryLayer&& simpleAreaSetDisplayGeometryLayer_)
{
    m_simpleAreaSetDisplayGeometryLayer_ = ::std::move(simpleAreaSetDisplayGeometryLayer_);
}

bool Display2DGeometryLayerList::isSimpleAreaSetDisplayGeometryLayerUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS);
}

bool Display2DGeometryLayerList::isSimpleAreaSetDisplayGeometryLayerSet() const
{
    return m_simpleAreaSetDisplayGeometryLayer_.hasValue();
}

void Display2DGeometryLayerList::resetSimpleAreaSetDisplayGeometryLayer()
{
    m_simpleAreaSetDisplayGeometryLayer_.reset();
}

void Display2DGeometryLayerList::initPackingContext(Display2DGeometryLayerList::ZserioPackingContext& context) const
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        m_areaDisplayGeometryLayer_.value().initPackingContext(context.getAreaDisplayGeometryLayer());
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        m_lineDisplayGeometryLayer_.value().initPackingContext(context.getLineDisplayGeometryLayer());
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        m_pointDisplayGeometryLayer_.value().initPackingContext(context.getPointDisplayGeometryLayer());
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        m_simpleAreaDisplayGeometryLayer_.value().initPackingContext(context.getSimpleAreaDisplayGeometryLayer());
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        m_simpleAreaSetDisplayGeometryLayer_.value().initPackingContext(context.getSimpleAreaSetDisplayGeometryLayer());
    }
}

size_t Display2DGeometryLayerList::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        endBitPosition += m_areaDisplayGeometryLayer_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        endBitPosition += m_lineDisplayGeometryLayer_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        endBitPosition += m_pointDisplayGeometryLayer_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        endBitPosition += m_simpleAreaDisplayGeometryLayer_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        endBitPosition += m_simpleAreaSetDisplayGeometryLayer_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display2DGeometryLayerList::bitSizeOf(Display2DGeometryLayerList::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        endBitPosition += m_areaDisplayGeometryLayer_.value().bitSizeOf(context.getAreaDisplayGeometryLayer(), endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        endBitPosition += m_lineDisplayGeometryLayer_.value().bitSizeOf(context.getLineDisplayGeometryLayer(), endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        endBitPosition += m_pointDisplayGeometryLayer_.value().bitSizeOf(context.getPointDisplayGeometryLayer(), endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        endBitPosition += m_simpleAreaDisplayGeometryLayer_.value().bitSizeOf(context.getSimpleAreaDisplayGeometryLayer(), endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        endBitPosition += m_simpleAreaSetDisplayGeometryLayer_.value().bitSizeOf(context.getSimpleAreaSetDisplayGeometryLayer(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display2DGeometryLayerList::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        endBitPosition = m_areaDisplayGeometryLayer_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        endBitPosition = m_lineDisplayGeometryLayer_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        endBitPosition = m_pointDisplayGeometryLayer_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        endBitPosition = m_simpleAreaDisplayGeometryLayer_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        endBitPosition = m_simpleAreaSetDisplayGeometryLayer_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t Display2DGeometryLayerList::initializeOffsets(Display2DGeometryLayerList::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        endBitPosition = m_areaDisplayGeometryLayer_.value().initializeOffsets(context.getAreaDisplayGeometryLayer(), endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        endBitPosition = m_lineDisplayGeometryLayer_.value().initializeOffsets(context.getLineDisplayGeometryLayer(), endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        endBitPosition = m_pointDisplayGeometryLayer_.value().initializeOffsets(context.getPointDisplayGeometryLayer(), endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        endBitPosition = m_simpleAreaDisplayGeometryLayer_.value().initializeOffsets(context.getSimpleAreaDisplayGeometryLayer(), endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        endBitPosition = m_simpleAreaSetDisplayGeometryLayer_.value().initializeOffsets(context.getSimpleAreaSetDisplayGeometryLayer(), endBitPosition);
    }

    return endBitPosition;
}

bool Display2DGeometryLayerList::operator==(const Display2DGeometryLayerList& other) const
{
    if (this != &other)
    {
        return
                (getContent() == other.getContent()) &&
                (!isAreaDisplayGeometryLayerUsed() ? !other.isAreaDisplayGeometryLayerUsed() : (m_areaDisplayGeometryLayer_ == other.m_areaDisplayGeometryLayer_)) &&
                (!isLineDisplayGeometryLayerUsed() ? !other.isLineDisplayGeometryLayerUsed() : (m_lineDisplayGeometryLayer_ == other.m_lineDisplayGeometryLayer_)) &&
                (!isPointDisplayGeometryLayerUsed() ? !other.isPointDisplayGeometryLayerUsed() : (m_pointDisplayGeometryLayer_ == other.m_pointDisplayGeometryLayer_)) &&
                (!isSimpleAreaDisplayGeometryLayerUsed() ? !other.isSimpleAreaDisplayGeometryLayerUsed() : (m_simpleAreaDisplayGeometryLayer_ == other.m_simpleAreaDisplayGeometryLayer_)) &&
                (!isSimpleAreaSetDisplayGeometryLayerUsed() ? !other.isSimpleAreaSetDisplayGeometryLayerUsed() : (m_simpleAreaSetDisplayGeometryLayer_ == other.m_simpleAreaSetDisplayGeometryLayer_));
    }

    return true;
}

uint32_t Display2DGeometryLayerList::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getContent());
    if (isAreaDisplayGeometryLayerUsed())
        result = ::zserio::calcHashCode(result, m_areaDisplayGeometryLayer_);
    if (isLineDisplayGeometryLayerUsed())
        result = ::zserio::calcHashCode(result, m_lineDisplayGeometryLayer_);
    if (isPointDisplayGeometryLayerUsed())
        result = ::zserio::calcHashCode(result, m_pointDisplayGeometryLayer_);
    if (isSimpleAreaDisplayGeometryLayerUsed())
        result = ::zserio::calcHashCode(result, m_simpleAreaDisplayGeometryLayer_);
    if (isSimpleAreaSetDisplayGeometryLayerUsed())
        result = ::zserio::calcHashCode(result, m_simpleAreaSetDisplayGeometryLayer_);

    return result;
}

void Display2DGeometryLayerList::write(::zserio::BitStreamWriter& out) const
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        // check parameters
        if (m_areaDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POLYGON_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.areaDisplayGeometryLayer: ") <<
                    m_areaDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POLYGON_2D) << "!";
        }
        if (m_areaDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.areaDisplayGeometryLayer: ") <<
                    m_areaDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_areaDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.areaDisplayGeometryLayer: ") <<
                    m_areaDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_areaDisplayGeometryLayer_.value().write(out);
    }

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        // check parameters
        if (m_lineDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.lineDisplayGeometryLayer: ") <<
                    m_lineDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_2D) << "!";
        }
        if (m_lineDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.lineDisplayGeometryLayer: ") <<
                    m_lineDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_lineDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.lineDisplayGeometryLayer: ") <<
                    m_lineDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_lineDisplayGeometryLayer_.value().write(out);
    }

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        // check parameters
        if (m_pointDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POSITION_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.pointDisplayGeometryLayer: ") <<
                    m_pointDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POSITION_2D) << "!";
        }
        if (m_pointDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.pointDisplayGeometryLayer: ") <<
                    m_pointDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_pointDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.pointDisplayGeometryLayer: ") <<
                    m_pointDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_pointDisplayGeometryLayer_.value().write(out);
    }

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        // check parameters
        if (m_simpleAreaDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: ") <<
                    m_simpleAreaDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_2D) << "!";
        }
        if (m_simpleAreaDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: ") <<
                    m_simpleAreaDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_simpleAreaDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: ") <<
                    m_simpleAreaDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_simpleAreaDisplayGeometryLayer_.value().write(out);
    }

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        // check parameters
        if (m_simpleAreaSetDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_SET_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: ") <<
                    m_simpleAreaSetDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_SET_2D) << "!";
        }
        if (m_simpleAreaSetDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: ") <<
                    m_simpleAreaSetDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_simpleAreaSetDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: ") <<
                    m_simpleAreaSetDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_simpleAreaSetDisplayGeometryLayer_.value().write(out);
    }
}

void Display2DGeometryLayerList::write(Display2DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        // check parameters
        if (m_areaDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POLYGON_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.areaDisplayGeometryLayer: ") <<
                    m_areaDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POLYGON_2D) << "!";
        }
        if (m_areaDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.areaDisplayGeometryLayer: ") <<
                    m_areaDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_areaDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.areaDisplayGeometryLayer: ") <<
                    m_areaDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_areaDisplayGeometryLayer_.value().write(context.getAreaDisplayGeometryLayer(), out);
    }

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        // check parameters
        if (m_lineDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.lineDisplayGeometryLayer: ") <<
                    m_lineDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_2D) << "!";
        }
        if (m_lineDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.lineDisplayGeometryLayer: ") <<
                    m_lineDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_lineDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.lineDisplayGeometryLayer: ") <<
                    m_lineDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_lineDisplayGeometryLayer_.value().write(context.getLineDisplayGeometryLayer(), out);
    }

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        // check parameters
        if (m_pointDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POSITION_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.pointDisplayGeometryLayer: ") <<
                    m_pointDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POSITION_2D) << "!";
        }
        if (m_pointDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.pointDisplayGeometryLayer: ") <<
                    m_pointDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_pointDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.pointDisplayGeometryLayer: ") <<
                    m_pointDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_pointDisplayGeometryLayer_.value().write(context.getPointDisplayGeometryLayer(), out);
    }

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        // check parameters
        if (m_simpleAreaDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: ") <<
                    m_simpleAreaDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_2D) << "!";
        }
        if (m_simpleAreaDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: ") <<
                    m_simpleAreaDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_simpleAreaDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: ") <<
                    m_simpleAreaDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_simpleAreaDisplayGeometryLayer_.value().write(context.getSimpleAreaDisplayGeometryLayer(), out);
    }

    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        // check parameters
        if (m_simpleAreaSetDisplayGeometryLayer_.value().getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_SET_2D))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: ") <<
                    m_simpleAreaSetDisplayGeometryLayer_.value().getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_SET_2D) << "!";
        }
        if (m_simpleAreaSetDisplayGeometryLayer_.value().getHasIds() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: ") <<
                    m_simpleAreaSetDisplayGeometryLayer_.value().getHasIds() << " != " << static_cast<bool>(true) << "!";
        }
        if (m_simpleAreaSetDisplayGeometryLayer_.value().getHasTypes() != static_cast<bool>(true))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: ") <<
                    m_simpleAreaSetDisplayGeometryLayer_.value().getHasTypes() << " != " << static_cast<bool>(true) << "!";
        }
        m_simpleAreaSetDisplayGeometryLayer_.value().write(context.getSimpleAreaSetDisplayGeometryLayer(), out);
    }
}

::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer> Display2DGeometryLayerList::readAreaDisplayGeometryLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::nds::display::instantiations::AreaDisplayGeometryLayer(in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POLYGON_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer> Display2DGeometryLayerList::readAreaDisplayGeometryLayer(Display2DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::nds::display::instantiations::AreaDisplayGeometryLayer(context.getAreaDisplayGeometryLayer(), in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POLYGON_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::instantiations::LineDisplayGeometryLayer> Display2DGeometryLayerList::readLineDisplayGeometryLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::LineDisplayGeometryLayer>(::nds::display::instantiations::LineDisplayGeometryLayer(in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::LineDisplayGeometryLayer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::instantiations::LineDisplayGeometryLayer> Display2DGeometryLayerList::readLineDisplayGeometryLayer(Display2DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::LineDisplayGeometryLayer>(::nds::display::instantiations::LineDisplayGeometryLayer(context.getLineDisplayGeometryLayer(), in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::LINE_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::LineDisplayGeometryLayer>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::instantiations::PointDisplayGeometryLayer> Display2DGeometryLayerList::readPointDisplayGeometryLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::PointDisplayGeometryLayer>(::nds::display::instantiations::PointDisplayGeometryLayer(in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POSITION_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::PointDisplayGeometryLayer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::instantiations::PointDisplayGeometryLayer> Display2DGeometryLayerList::readPointDisplayGeometryLayer(Display2DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::PointDisplayGeometryLayer>(::nds::display::instantiations::PointDisplayGeometryLayer(context.getPointDisplayGeometryLayer(), in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::POSITION_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::PointDisplayGeometryLayer>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer> Display2DGeometryLayerList::readSimpleAreaDisplayGeometryLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::nds::display::instantiations::AreaDisplayGeometryLayer(in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer> Display2DGeometryLayerList::readSimpleAreaDisplayGeometryLayer(Display2DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::nds::display::instantiations::AreaDisplayGeometryLayer(context.getSimpleAreaDisplayGeometryLayer(), in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer> Display2DGeometryLayerList::readSimpleAreaSetDisplayGeometryLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::nds::display::instantiations::AreaDisplayGeometryLayer(in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_SET_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer> Display2DGeometryLayerList::readSimpleAreaSetDisplayGeometryLayer(Display2DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::nds::display::instantiations::AreaDisplayGeometryLayer(context.getSimpleAreaSetDisplayGeometryLayer(), in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::SIMPLE_POLYGON_SET_2D), static_cast<bool>(true), static_cast<bool>(true), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::instantiations::AreaDisplayGeometryLayer>(::zserio::NullOpt);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/IconLayer.h>
#include <nds/display/metadata/IconLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

IconLayer::IconLayer(const allocator_type& allocator) noexcept :
        m_content_(::nds::display::metadata::IconLayerContent()),
        m_icons_(allocator),
        m_genericIconSets_(::zserio::NullOpt),
        m_genericIconSetMap_(::zserio::NullOpt),
        m_referencedIconSets_(::zserio::NullOpt),
        m_iconTemplateSets_(::zserio::NullOpt)
{
}

IconLayer::IconLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_icons_(readIcons(in, allocator)),
        m_genericIconSets_(readGenericIconSets(in, allocator)),
        m_genericIconSetMap_(readGenericIconSetMap(in, allocator)),
        m_referencedIconSets_(readReferencedIconSets(in, allocator)),
        m_iconTemplateSets_(readIconTemplateSets(in, allocator))
{
}

IconLayer::IconLayer(IconLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_icons_(readIcons(context, in, allocator)),
        m_genericIconSets_(readGenericIconSets(context, in, allocator)),
        m_genericIconSetMap_(readGenericIconSetMap(context, in, allocator)),
        m_referencedIconSets_(readReferencedIconSets(context, in, allocator)),
        m_iconTemplateSets_(readIconTemplateSets(context, in, allocator))
{
}

IconLayer::IconLayer(::zserio::PropagateAllocatorT,
        const IconLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_icons_(::zserio::allocatorPropagatingCopy(other.m_icons_, allocator)),
        m_genericIconSets_(::zserio::allocatorPropagatingCopy(other.m_genericIconSets_, allocator)),
        m_genericIconSetMap_(::zserio::allocatorPropagatingCopy(other.m_genericIconSetMap_, allocator)),
        m_referencedIconSets_(::zserio::allocatorPropagatingCopy(other.m_referencedIconSets_, allocator)),
        m_iconTemplateSets_(::zserio::allocatorPropagatingCopy(other.m_iconTemplateSets_, allocator))
{
}

::nds::display::metadata::IconLayerContent IconLayer::getContent() const
{
    return m_content_;
}

void IconLayer::setContent(::nds::display::metadata::IconLayerContent content_)
{
    m_content_ = content_;
}

::zserio::vector<::nds::core::icons::IconImage>& IconLayer::getIcons()
{
    return m_icons_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconImage>& IconLayer::getIcons() const
{
    return m_icons_.getRawArray();
}

void IconLayer::setIcons(const ::zserio::vector<::nds::core::icons::IconImage>& icons_)
{
    m_icons_ = ZserioArrayType_icons(icons_);
}

void IconLayer::setIcons(::zserio::vector<::nds::core::icons::IconImage>&& icons_)
{
    m_icons_ = ZserioArrayType_icons(std::move(icons_));
}

::zserio::vector<::nds::core::icons::IconSet>& IconLayer::getGenericIconSets()
{
    return m_genericIconSets_.value().getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconSet>& IconLayer::getGenericIconSets() const
{
    return m_genericIconSets_.value().getRawArray();
}

void IconLayer::setGenericIconSets(const ::zserio::vector<::nds::core::icons::IconSet>& genericIconSets_)
{
    m_genericIconSets_ = ZserioArrayType_genericIconSets(genericIconSets_);
}

void IconLayer::setGenericIconSets(::zserio::vector<::nds::core::icons::IconSet>&& genericIconSets_)
{
    m_genericIconSets_ = ZserioArrayType_genericIconSets(std::move(genericIconSets_));
}

bool IconLayer::isGenericIconSetsUsed() const
{
    return ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS);
}

bool IconLayer::isGenericIconSetsSet() const
{
    return m_genericIconSets_.hasValue();
}

void IconLayer::resetGenericIconSets()
{
    m_genericIconSets_.reset();
}

::zserio::vector<::nds::display::types::GenericIconSetMap>& IconLayer::getGenericIconSetMap()
{
    return m_genericIconSetMap_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::GenericIconSetMap>& IconLayer::getGenericIconSetMap() const
{
    return m_genericIconSetMap_.value().getRawArray();
}

void IconLayer::setGenericIconSetMap(const ::zserio::vector<::nds::display::types::GenericIconSetMap>& genericIconSetMap_)
{
    m_genericIconSetMap_ = ZserioArrayType_genericIconSetMap(genericIconSetMap_);
}

void IconLayer::setGenericIconSetMap(::zserio::vector<::nds::display::types::GenericIconSetMap>&& genericIconSetMap_)
{
    m_genericIconSetMap_ = ZserioArrayType_genericIconSetMap(std::move(genericIconSetMap_));
}

bool IconLayer::isGenericIconSetMapUsed() const
{
    return ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS);
}

bool IconLayer::isGenericIconSetMapSet() const
{
    return m_genericIconSetMap_.hasValue();
}

void IconLayer::resetGenericIconSetMap()
{
    m_genericIconSetMap_.reset();
}

::zserio::vector<::nds::core::icons::IconSet>& IconLayer::getReferencedIconSets()
{
    return m_referencedIconSets_.value().getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconSet>& IconLayer::getReferencedIconSets() const
{
    return m_referencedIconSets_.value().getRawArray();
}

void IconLayer::setReferencedIconSets(const ::zserio::vector<::nds::core::icons::IconSet>& referencedIconSets_)
{
    m_referencedIconSets_ = ZserioArrayType_referencedIconSets(referencedIconSets_);
}

void IconLayer::setReferencedIconSets(::zserio::vector<::nds::core::icons::IconSet>&& referencedIconSets_)
{
    m_referencedIconSets_ = ZserioArrayType_referencedIconSets(std::move(referencedIconSets_));
}

bool IconLayer::isReferencedIconSetsUsed() const
{
    return ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS);
}

bool IconLayer::isReferencedIconSetsSet() const
{
    return m_referencedIconSets_.hasValue();
}

void IconLayer::resetReferencedIconSets()
{
    m_referencedIconSets_.reset();
}

::zserio::vector<::nds::core::icons::IconTemplateSet>& IconLayer::getIconTemplateSets()
{
    return m_iconTemplateSets_.value().getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconTemplateSet>& IconLayer::getIconTemplateSets() const
{
    return m_iconTemplateSets_.value().getRawArray();
}

void IconLayer::setIconTemplateSets(const ::zserio::vector<::nds::core::icons::IconTemplateSet>& iconTemplateSets_)
{
    m_iconTemplateSets_ = ZserioArrayType_iconTemplateSets(iconTemplateSets_);
}

void IconLayer::setIconTemplateSets(::zserio::vector<::nds::core::icons::IconTemplateSet>&& iconTemplateSets_)
{
    m_iconTemplateSets_ = ZserioArrayType_iconTemplateSets(std::move(iconTemplateSets_));
}

bool IconLayer::isIconTemplateSetsUsed() const
{
    return ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS);
}

bool IconLayer::isIconTemplateSetsSet() const
{
    return m_iconTemplateSets_.hasValue();
}

void IconLayer::resetIconTemplateSets()
{
    m_iconTemplateSets_.reset();
}

::nds::system::types::LayerType IconLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::GEOMETRY);
}

void IconLayer::initPackingContext(IconLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
}

size_t IconLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += m_icons_.bitSizeOfPacked(*this, endBitPosition);
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        endBitPosition += m_genericIconSets_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        endBitPosition += m_genericIconSetMap_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS)
    {
        endBitPosition += m_referencedIconSets_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS)
    {
        endBitPosition += m_iconTemplateSets_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t IconLayer::bitSizeOf(IconLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += m_icons_.bitSizeOfPacked(*this, endBitPosition);
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        endBitPosition += m_genericIconSets_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        endBitPosition += m_genericIconSetMap_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS)
    {
        endBitPosition += m_referencedIconSets_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS)
    {
        endBitPosition += m_iconTemplateSets_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t IconLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition = m_icons_.initializeOffsetsPacked(*this, endBitPosition);
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        endBitPosition = m_genericIconSets_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        endBitPosition = m_genericIconSetMap_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS)
    {
        endBitPosition = m_referencedIconSets_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS)
    {
        endBitPosition = m_iconTemplateSets_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t IconLayer::initializeOffsets(IconLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition = m_icons_.initializeOffsetsPacked(*this, endBitPosition);
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        endBitPosition = m_genericIconSets_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        endBitPosition = m_genericIconSetMap_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS)
    {
        endBitPosition = m_referencedIconSets_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS)
    {
        endBitPosition = m_iconTemplateSets_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool IconLayer::operator==(const IconLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_icons_ == other.m_icons_) &&
                (!isGenericIconSetsUsed() ? !other.isGenericIconSetsUsed() : (m_genericIconSets_ == other.m_genericIconSets_)) &&
                (!isGenericIconSetMapUsed() ? !other.isGenericIconSetMapUsed() : (m_genericIconSetMap_ == other.m_genericIconSetMap_)) &&
                (!isReferencedIconSetsUsed() ? !other.isReferencedIconSetsUsed() : (m_referencedIconSets_ == other.m_referencedIconSets_)) &&
                (!isIconTemplateSetsUsed() ? !other.isIconTemplateSetsUsed() : (m_iconTemplateSets_ == other.m_iconTemplateSets_));
    }

    return true;
}

uint32_t IconLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_icons_);
    if (isGenericIconSetsUsed())
        result = ::zserio::calcHashCode(result, m_genericIconSets_);
    if (isGenericIconSetMapUsed())
        result = ::zserio::calcHashCode(result, m_genericIconSetMap_);
    if (isReferencedIconSetsUsed())
        result = ::zserio::calcHashCode(result, m_referencedIconSets_);
    if (isIconTemplateSetsUsed())
        result = ::zserio::calcHashCode(result, m_iconTemplateSets_);

    return result;
}

void IconLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    m_icons_.writePacked(*this, out);
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        m_genericIconSets_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        m_genericIconSetMap_.value().write(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS)
    {
        m_referencedIconSets_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS)
    {
        m_iconTemplateSets_.value().writePacked(*this, out);
    }
}

void IconLayer::write(IconLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    m_icons_.writePacked(*this, out);
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        m_genericIconSets_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        m_genericIconSetMap_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS)
    {
        m_referencedIconSets_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS)
    {
        m_iconTemplateSets_.value().writePacked(*this, out);
    }
}

void IconLayer::ZserioElementFactory_icons::create(IconLayer&        ,
        ::zserio::vector<::nds::core::icons::IconImage>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_icons::create(IconLayer&        ,
        ::zserio::vector<::nds::core::icons::IconImage>& array,
        ::nds::core::icons::IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_genericIconSets::create(IconLayer&        ,
        ::zserio::vector<::nds::core::icons::IconSet>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_genericIconSets::create(IconLayer&        ,
        ::zserio::vector<::nds::core::icons::IconSet>& array,
        ::nds::core::icons::IconSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_genericIconSetMap::create(IconLayer&        ,
        ::zserio::vector<::nds::display::types::GenericIconSetMap>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_genericIconSetMap::create(IconLayer&        ,
        ::zserio::vector<::nds::display::types::GenericIconSetMap>& array,
        ::nds::display::types::GenericIconSetMap::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_referencedIconSets::create(IconLayer&        ,
        ::zserio::vector<::nds::core::icons::IconSet>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_referencedIconSets::create(IconLayer&        ,
        ::zserio::vector<::nds::core::icons::IconSet>& array,
        ::nds::core::icons::IconSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_iconTemplateSets::create(IconLayer&        ,
        ::zserio::vector<::nds::core::icons::IconTemplateSet>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void IconLayer::ZserioElementFactory_iconTemplateSets::create(IconLayer&        ,
        ::zserio::vector<::nds::core::icons::IconTemplateSet>& array,
        ::nds::core::icons::IconTemplateSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::display::metadata::IconLayerContent IconLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::IconLayerContent(in);
}

::nds::display::metadata::IconLayerContent IconLayer::readContent(IconLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::IconLayerContent(context.getContent(), in);
}
IconLayer::ZserioArrayType_icons IconLayer::readIcons(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_icons readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

IconLayer::ZserioArrayType_icons IconLayer::readIcons(IconLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_icons readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<IconLayer::ZserioArrayType_genericIconSets> IconLayer::readGenericIconSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        ZserioArrayType_genericIconSets readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSets>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSets>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<IconLayer::ZserioArrayType_genericIconSets> IconLayer::readGenericIconSets(IconLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        ZserioArrayType_genericIconSets readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSets>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSets>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<IconLayer::ZserioArrayType_genericIconSetMap> IconLayer::readGenericIconSetMap(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        ZserioArrayType_genericIconSetMap readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSetMap>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSetMap>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<IconLayer::ZserioArrayType_genericIconSetMap> IconLayer::readGenericIconSetMap(IconLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::GENERIC_ICON_SETS)
    {
        ZserioArrayType_genericIconSetMap readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSetMap>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSetMap>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<IconLayer::ZserioArrayType_referencedIconSets> IconLayer::readReferencedIconSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS)
    {
        ZserioArrayType_referencedIconSets readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_referencedIconSets>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_referencedIconSets>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<IconLayer::ZserioArrayType_referencedIconSets> IconLayer::readReferencedIconSets(IconLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::REFERENCED_ICON_SETS)
    {
        ZserioArrayType_referencedIconSets readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_referencedIconSets>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_referencedIconSets>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<IconLayer::ZserioArrayType_iconTemplateSets> IconLayer::readIconTemplateSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS)
    {
        ZserioArrayType_iconTemplateSets readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_iconTemplateSets>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_iconTemplateSets>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<IconLayer::ZserioArrayType_iconTemplateSets> IconLayer::readIconTemplateSets(IconLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS) == ::nds::display::metadata::IconLayerContent::Values::TEMPLATE_ICON_SETS)
    {
        ZserioArrayType_iconTemplateSets readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_iconTemplateSets>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_iconTemplateSets>(::zserio::NullOpt);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/Display3DLayer.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

Display3DLayer::Display3DLayer(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_header_(allocator),
        m_geometryLayers_(allocator)
{
}

Display3DLayer::Display3DLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_header_(readHeader(in, allocator)),
        m_geometryLayers_(readGeometryLayers(in, allocator))
{
}

Display3DLayer::Display3DLayer(Display3DLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_header_(readHeader(context, in, allocator)),
        m_geometryLayers_(readGeometryLayers(context, in, allocator))
{
}

Display3DLayer::Display3DLayer(const Display3DLayer& other) :
        m_header_(other.m_header_),
        m_geometryLayers_(other.m_geometryLayers_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Display3DLayer& Display3DLayer::operator=(const Display3DLayer& other)
{
    m_header_ = other.m_header_;
    m_geometryLayers_ = other.m_geometryLayers_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Display3DLayer::Display3DLayer(Display3DLayer&& other) :
        m_header_(::std::move(other.m_header_)),
        m_geometryLayers_(::std::move(other.m_geometryLayers_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Display3DLayer& Display3DLayer::operator=(Display3DLayer&& other)
{
    m_header_ = ::std::move(other.m_header_);
    m_geometryLayers_ = ::std::move(other.m_geometryLayers_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Display3DLayer::Display3DLayer(::zserio::PropagateAllocatorT,
        const Display3DLayer& other, const allocator_type& allocator) :
        m_header_(::zserio::allocatorPropagatingCopy(other.m_header_, allocator)),
        m_geometryLayers_(::zserio::allocatorPropagatingCopy(other.m_geometryLayers_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void Display3DLayer::initializeChildren()
{
    m_geometryLayers_.initialize(static_cast<::nds::display::metadata::Display3DContent>(getHeader().getContent()));

    m_areChildrenInitialized = true;
}

::nds::display::layer::Display3DLayerHeader& Display3DLayer::getHeader()
{
    return m_header_;
}

const ::nds::display::layer::Display3DLayerHeader& Display3DLayer::getHeader() const
{
    return m_header_;
}

void Display3DLayer::setHeader(const ::nds::display::layer::Display3DLayerHeader& header_)
{
    m_header_ = header_;
}

void Display3DLayer::setHeader(::nds::display::layer::Display3DLayerHeader&& header_)
{
    m_header_ = ::std::move(header_);
}

::nds::display::layer::Display3DGeometryLayerList& Display3DLayer::getGeometryLayers()
{
    return m_geometryLayers_;
}

const ::nds::display::layer::Display3DGeometryLayerList& Display3DLayer::getGeometryLayers() const
{
    return m_geometryLayers_;
}

void Display3DLayer::setGeometryLayers(const ::nds::display::layer::Display3DGeometryLayerList& geometryLayers_)
{
    m_geometryLayers_ = geometryLayers_;
}

void Display3DLayer::setGeometryLayers(::nds::display::layer::Display3DGeometryLayerList&& geometryLayers_)
{
    m_geometryLayers_ = ::std::move(geometryLayers_);
}

::nds::system::types::LayerType Display3DLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::FEATURE);
}

void Display3DLayer::initPackingContext(Display3DLayer::ZserioPackingContext& context) const
{
    m_header_.initPackingContext(context.getHeader());
    m_geometryLayers_.initPackingContext(context.getGeometryLayers());
}

size_t Display3DLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(endBitPosition);
    endBitPosition += m_geometryLayers_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Display3DLayer::bitSizeOf(Display3DLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(context.getHeader(), endBitPosition);
    endBitPosition += m_geometryLayers_.bitSizeOf(context.getGeometryLayers(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Display3DLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(endBitPosition);
    endBitPosition = m_geometryLayers_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t Display3DLayer::initializeOffsets(Display3DLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(context.getHeader(), endBitPosition);
    endBitPosition = m_geometryLayers_.initializeOffsets(context.getGeometryLayers(), endBitPosition);

    return endBitPosition;
}

bool Display3DLayer::operator==(const Display3DLayer& other) const
{
    if (this != &other)
    {
        return
                (m_header_ == other.m_header_) &&
                (m_geometryLayers_ == other.m_geometryLayers_);
    }

    return true;
}

uint32_t Display3DLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_header_);
    result = ::zserio::calcHashCode(result, m_geometryLayers_);

    return result;
}

void Display3DLayer::write(::zserio::BitStreamWriter& out) const
{
    m_header_.write(out);

    // check parameters
    if (m_geometryLayers_.getContent() != static_cast<::nds::display::metadata::Display3DContent>(getHeader().getContent()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter content for field Display3DLayer.geometryLayers: ") <<
                m_geometryLayers_.getContent() << " != " << static_cast<::nds::display::metadata::Display3DContent>(getHeader().getContent()) << "!";
    }
    m_geometryLayers_.write(out);
}

void Display3DLayer::write(Display3DLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_header_.write(context.getHeader(), out);

    // check parameters
    if (m_geometryLayers_.getContent() != static_cast<::nds::display::metadata::Display3DContent>(getHeader().getContent()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter content for field Display3DLayer.geometryLayers: ") <<
                m_geometryLayers_.getContent() << " != " << static_cast<::nds::display::metadata::Display3DContent>(getHeader().getContent()) << "!";
    }
    m_geometryLayers_.write(context.getGeometryLayers(), out);
}

::nds::display::layer::Display3DLayerHeader Display3DLayer::readHeader(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::layer::Display3DLayerHeader(in, allocator);
}

::nds::display::layer::Display3DLayerHeader Display3DLayer::readHeader(Display3DLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::layer::Display3DLayerHeader(context.getHeader(), in, allocator);
}
::nds::display::layer::Display3DGeometryLayerList Display3DLayer::readGeometryLayers(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::layer::Display3DGeometryLayerList(in, static_cast<::nds::display::metadata::Display3DContent>(getHeader().getContent()), allocator);
}

::nds::display::layer::Display3DGeometryLayerList Display3DLayer::readGeometryLayers(Display3DLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::layer::Display3DGeometryLayerList(context.getGeometryLayers(), in, static_cast<::nds::display::metadata::Display3DContent>(getHeader().getContent()), allocator);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/layer/Display3DLayerHeader.h>

namespace nds
{
namespace display
{
namespace layer
{

Display3DLayerHeader::Display3DLayerHeader(const allocator_type&) noexcept :
        m_content_(::nds::display::metadata::Display3DContent()),
        m_minScaleDenominator_(::nds::core::types::ScaleDenominator()),
        m_maxScaleDenominator_(::nds::core::types::ScaleDenominator())
{
}

Display3DLayerHeader::Display3DLayerHeader(::zserio::BitStreamReader& in, const allocator_type&) :
        m_content_(readContent(in)),
        m_minScaleDenominator_(readMinScaleDenominator(in)),
        m_maxScaleDenominator_(readMaxScaleDenominator(in))
{
}

Display3DLayerHeader::Display3DLayerHeader(Display3DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_content_(readContent(context, in)),
        m_minScaleDenominator_(readMinScaleDenominator(context, in)),
        m_maxScaleDenominator_(readMaxScaleDenominator(context, in))
{
}

Display3DLayerHeader::Display3DLayerHeader(::zserio::PropagateAllocatorT,
        const Display3DLayerHeader& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_minScaleDenominator_(::zserio::allocatorPropagatingCopy(other.m_minScaleDenominator_, allocator)),
        m_maxScaleDenominator_(::zserio::allocatorPropagatingCopy(other.m_maxScaleDenominator_, allocator))
{
}

::nds::display::metadata::Display3DContent Display3DLayerHeader::getContent() const
{
    return m_content_;
}

void Display3DLayerHeader::setContent(::nds::display::metadata::Display3DContent content_)
{
    m_content_ = content_;
}

::nds::core::types::ScaleDenominator Display3DLayerHeader::getMinScaleDenominator() const
{
    return m_minScaleDenominator_;
}

void Display3DLayerHeader::setMinScaleDenominator(::nds::core::types::ScaleDenominator minScaleDenominator_)
{
    m_minScaleDenominator_ = minScaleDenominator_;
}

::nds::core::types::ScaleDenominator Display3DLayerHeader::getMaxScaleDenominator() const
{
    return m_maxScaleDenominator_;
}

void Display3DLayerHeader::setMaxScaleDenominator(::nds::core::types::ScaleDenominator maxScaleDenominator_)
{
    m_maxScaleDenominator_ = maxScaleDenominator_;
}

void Display3DLayerHeader::initPackingContext(Display3DLayerHeader::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getMinScaleDenominator().init<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    context.getMaxScaleDenominator().init<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);
}

size_t Display3DLayerHeader::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(32);
    endBitPosition += UINT8_C(32);

    return endBitPosition - bitPosition;
}

size_t Display3DLayerHeader::bitSizeOf(Display3DLayerHeader::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getMinScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    endBitPosition += context.getMaxScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);

    return endBitPosition - bitPosition;
}

size_t Display3DLayerHeader::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(32);
    endBitPosition += UINT8_C(32);

    return endBitPosition;
}

size_t Display3DLayerHeader::initializeOffsets(Display3DLayerHeader::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getMinScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    endBitPosition += context.getMaxScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);

    return endBitPosition;
}

bool Display3DLayerHeader::operator==(const Display3DLayerHeader& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_minScaleDenominator_ == other.m_minScaleDenominator_) &&
                (m_maxScaleDenominator_ == other.m_maxScaleDenominator_);
    }

    return true;
}

uint32_t Display3DLayerHeader::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_minScaleDenominator_);
    result = ::zserio::calcHashCode(result, m_maxScaleDenominator_);

    return result;
}

void Display3DLayerHeader::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    out.writeBits(m_minScaleDenominator_, UINT8_C(32));
    out.writeBits(m_maxScaleDenominator_, UINT8_C(32));
}

void Display3DLayerHeader::write(Display3DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    context.getMinScaleDenominator().write<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(out, m_minScaleDenominator_);
    context.getMaxScaleDenominator().write<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(out, m_maxScaleDenominator_);
}

::nds::display::metadata::Display3DContent Display3DLayerHeader::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::Display3DContent(in);
}

::nds::display::metadata::Display3DContent Display3DLayerHeader::readContent(Display3DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::Display3DContent(context.getContent(), in);
}
::nds::core::types::ScaleDenominator Display3DLayerHeader::readMinScaleDenominator(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::ScaleDenominator>(in.readBits(UINT8_C(32)));
}

::nds::core::types::ScaleDenominator Display3DLayerHeader::readMinScaleDenominator(Display3DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMinScaleDenominator().read<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(in);
}
::nds::core::types::ScaleDenominator Display3DLayerHeader::readMaxScaleDenominator(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::ScaleDenominator>(in.readBits(UINT8_C(32)));
}

::nds::core::types::ScaleDenominator Display3DLayerHeader::readMaxScaleDenominator(Display3DLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMaxScaleDenominator().read<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(in);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/Display3DGeometryLayerList.h>
#include <nds/display/metadata/Display3DContent.h>

namespace nds
{
namespace display
{
namespace layer
{

Display3DGeometryLayerList::Display3DGeometryLayerList(const allocator_type&) noexcept :
        m_isInitialized(false),
        m_mesh3DRenderLayer_(::zserio::NullOpt)
{
}

Display3DGeometryLayerList::Display3DGeometryLayerList(::zserio::BitStreamReader& in,
        ::nds::display::metadata::Display3DContent content_, const allocator_type& allocator) :
        m_content_(content_),
        m_isInitialized(true),
        m_mesh3DRenderLayer_(readMesh3DRenderLayer(in, allocator))
{
}

Display3DGeometryLayerList::Display3DGeometryLayerList(Display3DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::display::metadata::Display3DContent content_, const allocator_type& allocator) :
        m_content_(content_),
        m_isInitialized(true),
        m_mesh3DRenderLayer_(readMesh3DRenderLayer(context, in, allocator))
{
}

Display3DGeometryLayerList::Display3DGeometryLayerList(const Display3DGeometryLayerList& other) :
        m_mesh3DRenderLayer_(other.m_mesh3DRenderLayer_)
{
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;
}

Display3DGeometryLayerList& Display3DGeometryLayerList::operator=(const Display3DGeometryLayerList& other)
{
    m_mesh3DRenderLayer_ = other.m_mesh3DRenderLayer_;
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;

    return *this;
}

Display3DGeometryLayerList::Display3DGeometryLayerList(Display3DGeometryLayerList&& other) :
        m_mesh3DRenderLayer_(::std::move(other.m_mesh3DRenderLayer_))
{
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;
}

Display3DGeometryLayerList& Display3DGeometryLayerList::operator=(Display3DGeometryLayerList&& other)
{
    m_mesh3DRenderLayer_ = ::std::move(other.m_mesh3DRenderLayer_);
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;

    return *this;
}

Display3DGeometryLayerList::Display3DGeometryLayerList(::zserio::PropagateAllocatorT,
        const Display3DGeometryLayerList& other, const allocator_type& allocator) :
        m_mesh3DRenderLayer_(::zserio::allocatorPropagatingCopy(other.m_mesh3DRenderLayer_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_content_);
    else
        m_isInitialized = false;
}

void Display3DGeometryLayerList::initialize(
        ::nds::display::metadata::Display3DContent content_)
{
    m_content_ = content_;
    m_isInitialized = true;

    initializeChildren();
}

bool Display3DGeometryLayerList::isInitialized() const
{
    return m_isInitialized;
}

void Display3DGeometryLayerList::initializeChildren()
{
    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
        m_mesh3DRenderLayer_.value().initializeChildren();
}

::nds::display::metadata::Display3DContent Display3DGeometryLayerList::getContent() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'content' of compound 'Display3DGeometryLayerList' is not initialized!");

    return m_content_;
}

::nds::display::layer::Mesh3DRenderLayerData& Display3DGeometryLayerList::getMesh3DRenderLayer()
{
    return m_mesh3DRenderLayer_.value();
}

const ::nds::display::layer::Mesh3DRenderLayerData& Display3DGeometryLayerList::getMesh3DRenderLayer() const
{
    return m_mesh3DRenderLayer_.value();
}

void Display3DGeometryLayerList::setMesh3DRenderLayer(const ::nds::display::layer::Mesh3DRenderLayerData& mesh3DRenderLayer_)
{
    m_mesh3DRenderLayer_ = mesh3DRenderLayer_;
}

void Display3DGeometryLayerList::setMesh3DRenderLayer(::nds::display::layer::Mesh3DRenderLayerData&& mesh3DRenderLayer_)
{
    m_mesh3DRenderLayer_ = ::std::move(mesh3DRenderLayer_);
}

bool Display3DGeometryLayerList::isMesh3DRenderLayerUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D);
}

bool Display3DGeometryLayerList::isMesh3DRenderLayerSet() const
{
    return m_mesh3DRenderLayer_.hasValue();
}

void Display3DGeometryLayerList::resetMesh3DRenderLayer()
{
    m_mesh3DRenderLayer_.reset();
}

void Display3DGeometryLayerList::initPackingContext(Display3DGeometryLayerList::ZserioPackingContext& context) const
{
    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        m_mesh3DRenderLayer_.value().initPackingContext(context.getMesh3DRenderLayer());
    }
}

size_t Display3DGeometryLayerList::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        endBitPosition += m_mesh3DRenderLayer_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3DGeometryLayerList::bitSizeOf(Display3DGeometryLayerList::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        endBitPosition += m_mesh3DRenderLayer_.value().bitSizeOf(context.getMesh3DRenderLayer(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3DGeometryLayerList::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        endBitPosition = m_mesh3DRenderLayer_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t Display3DGeometryLayerList::initializeOffsets(Display3DGeometryLayerList::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        endBitPosition = m_mesh3DRenderLayer_.value().initializeOffsets(context.getMesh3DRenderLayer(), endBitPosition);
    }

    return endBitPosition;
}

bool Display3DGeometryLayerList::operator==(const Display3DGeometryLayerList& other) const
{
    if (this != &other)
    {
        return
                (getContent() == other.getContent()) &&
                (!isMesh3DRenderLayerUsed() ? !other.isMesh3DRenderLayerUsed() : (m_mesh3DRenderLayer_ == other.m_mesh3DRenderLayer_));
    }

    return true;
}

uint32_t Display3DGeometryLayerList::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getContent());
    if (isMesh3DRenderLayerUsed())
        result = ::zserio::calcHashCode(result, m_mesh3DRenderLayer_);

    return result;
}

void Display3DGeometryLayerList::write(::zserio::BitStreamWriter& out) const
{
    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        m_mesh3DRenderLayer_.value().write(out);
    }
}

void Display3DGeometryLayerList::write(Display3DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        m_mesh3DRenderLayer_.value().write(context.getMesh3DRenderLayer(), out);
    }
}

::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData> Display3DGeometryLayerList::readMesh3DRenderLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData>(::nds::display::layer::Mesh3DRenderLayerData(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData> Display3DGeometryLayerList::readMesh3DRenderLayer(Display3DGeometryLayerList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display3DContent::Values::MESH_3D) == ::nds::display::metadata::Display3DContent::Values::MESH_3D)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData>(::nds::display::layer::Mesh3DRenderLayerData(context.getMesh3DRenderLayer(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::layer::Mesh3DRenderLayerData>(::zserio::NullOpt);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/Mesh3DRenderLayerData.h>
#include <nds/core/geometry/GeometryLayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

Mesh3DRenderLayerData::Mesh3DRenderLayerData(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_header_(allocator),
        m_mesh3dDisplayGeometryLayer_(allocator),
        m_normals_(::zserio::NullOpt),
        m_textureCoordinates_(::zserio::NullOpt),
        m_textureCoordsAdditional_(::zserio::NullOpt),
        m_colorIds_(::zserio::NullOpt),
        m_normalIndices_(::zserio::NullOpt),
        m_textureCoordsIndices_(::zserio::NullOpt),
        m_textureCoordsAdditionalIndices_(::zserio::NullOpt),
        m_colorIdIndices_(::zserio::NullOpt),
        m_mesh3DRenderData_(allocator)
{
}

Mesh3DRenderLayerData::Mesh3DRenderLayerData(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_header_(readHeader(in, allocator)),
        m_mesh3dDisplayGeometryLayer_(readMesh3dDisplayGeometryLayer(in, allocator)),
        m_normals_(readNormals(in, allocator)),
        m_textureCoordinates_(readTextureCoordinates(in, allocator)),
        m_textureCoordsAdditional_(readTextureCoordsAdditional(in, allocator)),
        m_colorIds_(readColorIds(in, allocator)),
        m_normalIndices_(readNormalIndices(in, allocator)),
        m_textureCoordsIndices_(readTextureCoordsIndices(in, allocator)),
        m_textureCoordsAdditionalIndices_(readTextureCoordsAdditionalIndices(in, allocator)),
        m_colorIdIndices_(readColorIdIndices(in, allocator)),
        m_mesh3DRenderData_(readMesh3DRenderData(in, allocator))
{
}

Mesh3DRenderLayerData::Mesh3DRenderLayerData(Mesh3DRenderLayerData::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_header_(readHeader(context, in, allocator)),
        m_mesh3dDisplayGeometryLayer_(readMesh3dDisplayGeometryLayer(context, in, allocator)),
        m_normals_(readNormals(context, in, allocator)),
        m_textureCoordinates_(readTextureCoordinates(in, allocator)),
        m_textureCoordsAdditional_(readTextureCoordsAdditional(in, allocator)),
        m_colorIds_(readColorIds(context, in, allocator)),
        m_normalIndices_(readNormalIndices(context, in, allocator)),
        m_textureCoordsIndices_(readTextureCoordsIndices(context, in, allocator)),
        m_textureCoordsAdditionalIndices_(readTextureCoordsAdditionalIndices(context, in, allocator)),
        m_colorIdIndices_(readColorIdIndices(context, in, allocator)),
        m_mesh3DRenderData_(readMesh3DRenderData(context, in, allocator))
{
}

Mesh3DRenderLayerData::Mesh3DRenderLayerData(const Mesh3DRenderLayerData& other) :
        m_header_(other.m_header_),
        m_mesh3dDisplayGeometryLayer_(other.m_mesh3dDisplayGeometryLayer_),
        m_normals_(other.m_normals_),
        m_textureCoordinates_(other.m_textureCoordinates_),
        m_textureCoordsAdditional_(other.m_textureCoordsAdditional_),
        m_colorIds_(other.m_colorIds_),
        m_normalIndices_(other.m_normalIndices_),
        m_textureCoordsIndices_(other.m_textureCoordsIndices_),
        m_textureCoordsAdditionalIndices_(other.m_textureCoordsAdditionalIndices_),
        m_colorIdIndices_(other.m_colorIdIndices_),
        m_mesh3DRenderData_(other.m_mesh3DRenderData_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Mesh3DRenderLayerData& Mesh3DRenderLayerData::operator=(const Mesh3DRenderLayerData& other)
{
    m_header_ = other.m_header_;
    m_mesh3dDisplayGeometryLayer_ = other.m_mesh3dDisplayGeometryLayer_;
    m_normals_ = other.m_normals_;
    m_textureCoordinates_ = other.m_textureCoordinates_;
    m_textureCoordsAdditional_ = other.m_textureCoordsAdditional_;
    m_colorIds_ = other.m_colorIds_;
    m_normalIndices_ = other.m_normalIndices_;
    m_textureCoordsIndices_ = other.m_textureCoordsIndices_;
    m_textureCoordsAdditionalIndices_ = other.m_textureCoordsAdditionalIndices_;
    m_colorIdIndices_ = other.m_colorIdIndices_;
    m_mesh3DRenderData_ = other.m_mesh3DRenderData_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Mesh3DRenderLayerData::Mesh3DRenderLayerData(Mesh3DRenderLayerData&& other) :
        m_header_(::std::move(other.m_header_)),
        m_mesh3dDisplayGeometryLayer_(::std::move(other.m_mesh3dDisplayGeometryLayer_)),
        m_normals_(::std::move(other.m_normals_)),
        m_textureCoordinates_(::std::move(other.m_textureCoordinates_)),
        m_textureCoordsAdditional_(::std::move(other.m_textureCoordsAdditional_)),
        m_colorIds_(::std::move(other.m_colorIds_)),
        m_normalIndices_(::std::move(other.m_normalIndices_)),
        m_textureCoordsIndices_(::std::move(other.m_textureCoordsIndices_)),
        m_textureCoordsAdditionalIndices_(::std::move(other.m_textureCoordsAdditionalIndices_)),
        m_colorIdIndices_(::std::move(other.m_colorIdIndices_)),
        m_mesh3DRenderData_(::std::move(other.m_mesh3DRenderData_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Mesh3DRenderLayerData& Mesh3DRenderLayerData::operator=(Mesh3DRenderLayerData&& other)
{
    m_header_ = ::std::move(other.m_header_);
    m_mesh3dDisplayGeometryLayer_ = ::std::move(other.m_mesh3dDisplayGeometryLayer_);
    m_normals_ = ::std::move(other.m_normals_);
    m_textureCoordinates_ = ::std::move(other.m_textureCoordinates_);
    m_textureCoordsAdditional_ = ::std::move(other.m_textureCoordsAdditional_);
    m_colorIds_ = ::std::move(other.m_colorIds_);
    m_normalIndices_ = ::std::move(other.m_normalIndices_);
    m_textureCoordsIndices_ = ::std::move(other.m_textureCoordsIndices_);
    m_textureCoordsAdditionalIndices_ = ::std::move(other.m_textureCoordsAdditionalIndices_);
    m_colorIdIndices_ = ::std::move(other.m_colorIdIndices_);
    m_mesh3DRenderData_ = ::std::move(other.m_mesh3DRenderData_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Mesh3DRenderLayerData::Mesh3DRenderLayerData(::zserio::PropagateAllocatorT,
        const Mesh3DRenderLayerData& other, const allocator_type& allocator) :
        m_header_(::zserio::allocatorPropagatingCopy(other.m_header_, allocator)),
        m_mesh3dDisplayGeometryLayer_(::zserio::allocatorPropagatingCopy(other.m_mesh3dDisplayGeometryLayer_, allocator)),
        m_normals_(::zserio::allocatorPropagatingCopy(other.m_normals_, allocator)),
        m_textureCoordinates_(::zserio::allocatorPropagatingCopy(other.m_textureCoordinates_, allocator)),
        m_textureCoordsAdditional_(::zserio::allocatorPropagatingCopy(other.m_textureCoordsAdditional_, allocator)),
        m_colorIds_(::zserio::allocatorPropagatingCopy(other.m_colorIds_, allocator)),
        m_normalIndices_(::zserio::allocatorPropagatingCopy(other.m_normalIndices_, allocator)),
        m_textureCoordsIndices_(::zserio::allocatorPropagatingCopy(other.m_textureCoordsIndices_, allocator)),
        m_textureCoordsAdditionalIndices_(::zserio::allocatorPropagatingCopy(other.m_textureCoordsAdditionalIndices_, allocator)),
        m_colorIdIndices_(::zserio::allocatorPropagatingCopy(other.m_colorIdIndices_, allocator)),
        m_mesh3DRenderData_(::zserio::allocatorPropagatingCopy(other.m_mesh3DRenderData_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void Mesh3DRenderLayerData::initializeChildren()
{
    m_mesh3dDisplayGeometryLayer_.initialize(static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::MESH_3D), static_cast<bool>(true), static_cast<bool>(true));
    if ((getHeader().getHasNormals()))
        m_normalIndices_.value().initialize(static_cast<uint32_t>(getNormals().size()));
    if ((getHeader().getHasTextureCoords()))
        m_textureCoordsIndices_.value().initialize(static_cast<uint32_t>(getTextureCoordinates().size()));
    if ((getHeader().getHasTextureCoordsAdditional()))
        m_textureCoordsAdditionalIndices_.value().initialize(static_cast<uint32_t>(getTextureCoordsAdditional().size()));
    if ((getHeader().funcHasColorPerVertex()))
        m_colorIdIndices_.value().initialize(static_cast<uint32_t>(getColorIds().size()));
    m_mesh3DRenderData_.initializeElements(*this);

    m_areChildrenInitialized = true;
}

::nds::display::types::Mesh3DRenderLayerHeader& Mesh3DRenderLayerData::getHeader()
{
    return m_header_;
}

const ::nds::display::types::Mesh3DRenderLayerHeader& Mesh3DRenderLayerData::getHeader() const
{
    return m_header_;
}

void Mesh3DRenderLayerData::setHeader(const ::nds::display::types::Mesh3DRenderLayerHeader& header_)
{
    m_header_ = header_;
}

void Mesh3DRenderLayerData::setHeader(::nds::display::types::Mesh3DRenderLayerHeader&& header_)
{
    m_header_ = ::std::move(header_);
}

::nds::display::instantiations::Mesh3dDisplayGeometryLayer& Mesh3DRenderLayerData::getMesh3dDisplayGeometryLayer()
{
    return m_mesh3dDisplayGeometryLayer_;
}

const ::nds::display::instantiations::Mesh3dDisplayGeometryLayer& Mesh3DRenderLayerData::getMesh3dDisplayGeometryLayer() const
{
    return m_mesh3dDisplayGeometryLayer_;
}

void Mesh3DRenderLayerData::setMesh3dDisplayGeometryLayer(const ::nds::display::instantiations::Mesh3dDisplayGeometryLayer& mesh3dDisplayGeometryLayer_)
{
    m_mesh3dDisplayGeometryLayer_ = mesh3dDisplayGeometryLayer_;
}

void Mesh3DRenderLayerData::setMesh3dDisplayGeometryLayer(::nds::display::instantiations::Mesh3dDisplayGeometryLayer&& mesh3dDisplayGeometryLayer_)
{
    m_mesh3dDisplayGeometryLayer_ = ::std::move(mesh3dDisplayGeometryLayer_);
}

::zserio::vector<::nds::display::types::NormalSphere>& Mesh3DRenderLayerData::getNormals()
{
    return m_normals_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::NormalSphere>& Mesh3DRenderLayerData::getNormals() const
{
    return m_normals_.value().getRawArray();
}

void Mesh3DRenderLayerData::setNormals(const ::zserio::vector<::nds::display::types::NormalSphere>& normals_)
{
    m_normals_ = ZserioArrayType_normals(normals_);
}

void Mesh3DRenderLayerData::setNormals(::zserio::vector<::nds::display::types::NormalSphere>&& normals_)
{
    m_normals_ = ZserioArrayType_normals(std::move(normals_));
}

bool Mesh3DRenderLayerData::isNormalsUsed() const
{
    return ((getHeader().getHasNormals()));
}

bool Mesh3DRenderLayerData::isNormalsSet() const
{
    return m_normals_.hasValue();
}

void Mesh3DRenderLayerData::resetNormals()
{
    m_normals_.reset();
}

::zserio::vector<::nds::display::types::TextureCoords>& Mesh3DRenderLayerData::getTextureCoordinates()
{
    return m_textureCoordinates_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::TextureCoords>& Mesh3DRenderLayerData::getTextureCoordinates() const
{
    return m_textureCoordinates_.value().getRawArray();
}

void Mesh3DRenderLayerData::setTextureCoordinates(const ::zserio::vector<::nds::display::types::TextureCoords>& textureCoordinates_)
{
    m_textureCoordinates_ = ZserioArrayType_textureCoordinates(textureCoordinates_);
}

void Mesh3DRenderLayerData::setTextureCoordinates(::zserio::vector<::nds::display::types::TextureCoords>&& textureCoordinates_)
{
    m_textureCoordinates_ = ZserioArrayType_textureCoordinates(std::move(textureCoordinates_));
}

bool Mesh3DRenderLayerData::isTextureCoordinatesUsed() const
{
    return ((getHeader().getHasTextureCoords()));
}

bool Mesh3DRenderLayerData::isTextureCoordinatesSet() const
{
    return m_textureCoordinates_.hasValue();
}

void Mesh3DRenderLayerData::resetTextureCoordinates()
{
    m_textureCoordinates_.reset();
}

::zserio::vector<::nds::display::types::TextureCoords>& Mesh3DRenderLayerData::getTextureCoordsAdditional()
{
    return m_textureCoordsAdditional_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::TextureCoords>& Mesh3DRenderLayerData::getTextureCoordsAdditional() const
{
    return m_textureCoordsAdditional_.value().getRawArray();
}

void Mesh3DRenderLayerData::setTextureCoordsAdditional(const ::zserio::vector<::nds::display::types::TextureCoords>& textureCoordsAdditional_)
{
    m_textureCoordsAdditional_ = ZserioArrayType_textureCoordsAdditional(textureCoordsAdditional_);
}

void Mesh3DRenderLayerData::setTextureCoordsAdditional(::zserio::vector<::nds::display::types::TextureCoords>&& textureCoordsAdditional_)
{
    m_textureCoordsAdditional_ = ZserioArrayType_textureCoordsAdditional(std::move(textureCoordsAdditional_));
}

bool Mesh3DRenderLayerData::isTextureCoordsAdditionalUsed() const
{
    return ((getHeader().getHasTextureCoordsAdditional()));
}

bool Mesh3DRenderLayerData::isTextureCoordsAdditionalSet() const
{
    return m_textureCoordsAdditional_.hasValue();
}

void Mesh3DRenderLayerData::resetTextureCoordsAdditional()
{
    m_textureCoordsAdditional_.reset();
}

::zserio::vector<::nds::display::types::ColorId>& Mesh3DRenderLayerData::getColorIds()
{
    return m_colorIds_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::ColorId>& Mesh3DRenderLayerData::getColorIds() const
{
    return m_colorIds_.value().getRawArray();
}

void Mesh3DRenderLayerData::setColorIds(const ::zserio::vector<::nds::display::types::ColorId>& colorIds_)
{
    m_colorIds_ = ZserioArrayType_colorIds(colorIds_);
}

void Mesh3DRenderLayerData::setColorIds(::zserio::vector<::nds::display::types::ColorId>&& colorIds_)
{
    m_colorIds_ = ZserioArrayType_colorIds(std::move(colorIds_));
}

bool Mesh3DRenderLayerData::isColorIdsUsed() const
{
    return ((getHeader().funcHasColorPerVertex()));
}

bool Mesh3DRenderLayerData::isColorIdsSet() const
{
    return m_colorIds_.hasValue();
}

void Mesh3DRenderLayerData::resetColorIds()
{
    m_colorIds_.reset();
}

::nds::core::geometry::IndexBuffer& Mesh3DRenderLayerData::getNormalIndices()
{
    return m_normalIndices_.value();
}

const ::nds::core::geometry::IndexBuffer& Mesh3DRenderLayerData::getNormalIndices() const
{
    return m_normalIndices_.value();
}

void Mesh3DRenderLayerData::setNormalIndices(const ::nds::core::geometry::IndexBuffer& normalIndices_)
{
    m_normalIndices_ = normalIndices_;
}

void Mesh3DRenderLayerData::setNormalIndices(::nds::core::geometry::IndexBuffer&& normalIndices_)
{
    m_normalIndices_ = ::std::move(normalIndices_);
}

bool Mesh3DRenderLayerData::isNormalIndicesUsed() const
{
    return ((getHeader().getHasNormals()));
}

bool Mesh3DRenderLayerData::isNormalIndicesSet() const
{
    return m_normalIndices_.hasValue();
}

void Mesh3DRenderLayerData::resetNormalIndices()
{
    m_normalIndices_.reset();
}

::nds::core::geometry::IndexBuffer& Mesh3DRenderLayerData::getTextureCoordsIndices()
{
    return m_textureCoordsIndices_.value();
}

const ::nds::core::geometry::IndexBuffer& Mesh3DRenderLayerData::getTextureCoordsIndices() const
{
    return m_textureCoordsIndices_.value();
}

void Mesh3DRenderLayerData::setTextureCoordsIndices(const ::nds::core::geometry::IndexBuffer& textureCoordsIndices_)
{
    m_textureCoordsIndices_ = textureCoordsIndices_;
}

void Mesh3DRenderLayerData::setTextureCoordsIndices(::nds::core::geometry::IndexBuffer&& textureCoordsIndices_)
{
    m_textureCoordsIndices_ = ::std::move(textureCoordsIndices_);
}

bool Mesh3DRenderLayerData::isTextureCoordsIndicesUsed() const
{
    return ((getHeader().getHasTextureCoords()));
}

bool Mesh3DRenderLayerData::isTextureCoordsIndicesSet() const
{
    return m_textureCoordsIndices_.hasValue();
}

void Mesh3DRenderLayerData::resetTextureCoordsIndices()
{
    m_textureCoordsIndices_.reset();
}

::nds::core::geometry::IndexBuffer& Mesh3DRenderLayerData::getTextureCoordsAdditionalIndices()
{
    return m_textureCoordsAdditionalIndices_.value();
}

const ::nds::core::geometry::IndexBuffer& Mesh3DRenderLayerData::getTextureCoordsAdditionalIndices() const
{
    return m_textureCoordsAdditionalIndices_.value();
}

void Mesh3DRenderLayerData::setTextureCoordsAdditionalIndices(const ::nds::core::geometry::IndexBuffer& textureCoordsAdditionalIndices_)
{
    m_textureCoordsAdditionalIndices_ = textureCoordsAdditionalIndices_;
}

void Mesh3DRenderLayerData::setTextureCoordsAdditionalIndices(::nds::core::geometry::IndexBuffer&& textureCoordsAdditionalIndices_)
{
    m_textureCoordsAdditionalIndices_ = ::std::move(textureCoordsAdditionalIndices_);
}

bool Mesh3DRenderLayerData::isTextureCoordsAdditionalIndicesUsed() const
{
    return ((getHeader().getHasTextureCoordsAdditional()));
}

bool Mesh3DRenderLayerData::isTextureCoordsAdditionalIndicesSet() const
{
    return m_textureCoordsAdditionalIndices_.hasValue();
}

void Mesh3DRenderLayerData::resetTextureCoordsAdditionalIndices()
{
    m_textureCoordsAdditionalIndices_.reset();
}

::nds::core::geometry::IndexBuffer& Mesh3DRenderLayerData::getColorIdIndices()
{
    return m_colorIdIndices_.value();
}

const ::nds::core::geometry::IndexBuffer& Mesh3DRenderLayerData::getColorIdIndices() const
{
    return m_colorIdIndices_.value();
}

void Mesh3DRenderLayerData::setColorIdIndices(const ::nds::core::geometry::IndexBuffer& colorIdIndices_)
{
    m_colorIdIndices_ = colorIdIndices_;
}

void Mesh3DRenderLayerData::setColorIdIndices(::nds::core::geometry::IndexBuffer&& colorIdIndices_)
{
    m_colorIdIndices_ = ::std::move(colorIdIndices_);
}

bool Mesh3DRenderLayerData::isColorIdIndicesUsed() const
{
    return ((getHeader().funcHasColorPerVertex()));
}

bool Mesh3DRenderLayerData::isColorIdIndicesSet() const
{
    return m_colorIdIndices_.hasValue();
}

void Mesh3DRenderLayerData::resetColorIdIndices()
{
    m_colorIdIndices_.reset();
}

::zserio::vector<::nds::display::types::Mesh3DRenderData>& Mesh3DRenderLayerData::getMesh3DRenderData()
{
    return m_mesh3DRenderData_.getRawArray();
}

const ::zserio::vector<::nds::display::types::Mesh3DRenderData>& Mesh3DRenderLayerData::getMesh3DRenderData() const
{
    return m_mesh3DRenderData_.getRawArray();
}

void Mesh3DRenderLayerData::setMesh3DRenderData(const ::zserio::vector<::nds::display::types::Mesh3DRenderData>& mesh3DRenderData_)
{
    m_mesh3DRenderData_ = ZserioArrayType_mesh3DRenderData(mesh3DRenderData_);
}

void Mesh3DRenderLayerData::setMesh3DRenderData(::zserio::vector<::nds::display::types::Mesh3DRenderData>&& mesh3DRenderData_)
{
    m_mesh3DRenderData_ = ZserioArrayType_mesh3DRenderData(std::move(mesh3DRenderData_));
}

void Mesh3DRenderLayerData::initPackingContext(Mesh3DRenderLayerData::ZserioPackingContext& context) const
{
    m_header_.initPackingContext(context.getHeader());
    m_mesh3dDisplayGeometryLayer_.initPackingContext(context.getMesh3dDisplayGeometryLayer());
    if ((getHeader().getHasNormals()))
    {
        m_normalIndices_.value().initPackingContext(context.getNormalIndices());
    }
    if ((getHeader().getHasTextureCoords()))
    {
        m_textureCoordsIndices_.value().initPackingContext(context.getTextureCoordsIndices());
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        m_textureCoordsAdditionalIndices_.value().initPackingContext(context.getTextureCoordsAdditionalIndices());
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        m_colorIdIndices_.value().initPackingContext(context.getColorIdIndices());
    }
}

size_t Mesh3DRenderLayerData::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(endBitPosition);
    endBitPosition += m_mesh3dDisplayGeometryLayer_.bitSizeOf(endBitPosition);
    if ((getHeader().getHasNormals()))
    {
        endBitPosition += m_normals_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getHeader().getHasTextureCoords()))
    {
        endBitPosition += m_textureCoordinates_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        endBitPosition += m_textureCoordsAdditional_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        endBitPosition += m_colorIds_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getHeader().getHasNormals()))
    {
        endBitPosition += m_normalIndices_.value().bitSizeOf(endBitPosition);
    }
    if ((getHeader().getHasTextureCoords()))
    {
        endBitPosition += m_textureCoordsIndices_.value().bitSizeOf(endBitPosition);
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        endBitPosition += m_textureCoordsAdditionalIndices_.value().bitSizeOf(endBitPosition);
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        endBitPosition += m_colorIdIndices_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_mesh3DRenderData_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Mesh3DRenderLayerData::bitSizeOf(Mesh3DRenderLayerData::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(context.getHeader(), endBitPosition);
    endBitPosition += m_mesh3dDisplayGeometryLayer_.bitSizeOf(context.getMesh3dDisplayGeometryLayer(), endBitPosition);
    if ((getHeader().getHasNormals()))
    {
        endBitPosition += m_normals_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getHeader().getHasTextureCoords()))
    {
        endBitPosition += m_textureCoordinates_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        endBitPosition += m_textureCoordsAdditional_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        endBitPosition += m_colorIds_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getHeader().getHasNormals()))
    {
        endBitPosition += m_normalIndices_.value().bitSizeOf(context.getNormalIndices(), endBitPosition);
    }
    if ((getHeader().getHasTextureCoords()))
    {
        endBitPosition += m_textureCoordsIndices_.value().bitSizeOf(context.getTextureCoordsIndices(), endBitPosition);
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        endBitPosition += m_textureCoordsAdditionalIndices_.value().bitSizeOf(context.getTextureCoordsAdditionalIndices(), endBitPosition);
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        endBitPosition += m_colorIdIndices_.value().bitSizeOf(context.getColorIdIndices(), endBitPosition);
    }
    endBitPosition += m_mesh3DRenderData_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Mesh3DRenderLayerData::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(endBitPosition);
    endBitPosition = m_mesh3dDisplayGeometryLayer_.initializeOffsets(endBitPosition);
    if ((getHeader().getHasNormals()))
    {
        endBitPosition = m_normals_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getHeader().getHasTextureCoords()))
    {
        endBitPosition = m_textureCoordinates_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        endBitPosition = m_textureCoordsAdditional_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        endBitPosition = m_colorIds_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getHeader().getHasNormals()))
    {
        endBitPosition = m_normalIndices_.value().initializeOffsets(endBitPosition);
    }
    if ((getHeader().getHasTextureCoords()))
    {
        endBitPosition = m_textureCoordsIndices_.value().initializeOffsets(endBitPosition);
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        endBitPosition = m_textureCoordsAdditionalIndices_.value().initializeOffsets(endBitPosition);
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        endBitPosition = m_colorIdIndices_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_mesh3DRenderData_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t Mesh3DRenderLayerData::initializeOffsets(Mesh3DRenderLayerData::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(context.getHeader(), endBitPosition);
    endBitPosition = m_mesh3dDisplayGeometryLayer_.initializeOffsets(context.getMesh3dDisplayGeometryLayer(), endBitPosition);
    if ((getHeader().getHasNormals()))
    {
        endBitPosition = m_normals_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getHeader().getHasTextureCoords()))
    {
        endBitPosition = m_textureCoordinates_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        endBitPosition = m_textureCoordsAdditional_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        endBitPosition = m_colorIds_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getHeader().getHasNormals()))
    {
        endBitPosition = m_normalIndices_.value().initializeOffsets(context.getNormalIndices(), endBitPosition);
    }
    if ((getHeader().getHasTextureCoords()))
    {
        endBitPosition = m_textureCoordsIndices_.value().initializeOffsets(context.getTextureCoordsIndices(), endBitPosition);
    }
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        endBitPosition = m_textureCoordsAdditionalIndices_.value().initializeOffsets(context.getTextureCoordsAdditionalIndices(), endBitPosition);
    }
    if ((getHeader().funcHasColorPerVertex()))
    {
        endBitPosition = m_colorIdIndices_.value().initializeOffsets(context.getColorIdIndices(), endBitPosition);
    }
    endBitPosition = m_mesh3DRenderData_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool Mesh3DRenderLayerData::operator==(const Mesh3DRenderLayerData& other) const
{
    if (this != &other)
    {
        return
                (m_header_ == other.m_header_) &&
                (m_mesh3dDisplayGeometryLayer_ == other.m_mesh3dDisplayGeometryLayer_) &&
                (!isNormalsUsed() ? !other.isNormalsUsed() : (m_normals_ == other.m_normals_)) &&
                (!isTextureCoordinatesUsed() ? !other.isTextureCoordinatesUsed() : (m_textureCoordinates_ == other.m_textureCoordinates_)) &&
                (!isTextureCoordsAdditionalUsed() ? !other.isTextureCoordsAdditionalUsed() : (m_textureCoordsAdditional_ == other.m_textureCoordsAdditional_)) &&
                (!isColorIdsUsed() ? !other.isColorIdsUsed() : (m_colorIds_ == other.m_colorIds_)) &&
                (!isNormalIndicesUsed() ? !other.isNormalIndicesUsed() : (m_normalIndices_ == other.m_normalIndices_)) &&
                (!isTextureCoordsIndicesUsed() ? !other.isTextureCoordsIndicesUsed() : (m_textureCoordsIndices_ == other.m_textureCoordsIndices_)) &&
                (!isTextureCoordsAdditionalIndicesUsed() ? !other.isTextureCoordsAdditionalIndicesUsed() : (m_textureCoordsAdditionalIndices_ == other.m_textureCoordsAdditionalIndices_)) &&
                (!isColorIdIndicesUsed() ? !other.isColorIdIndicesUsed() : (m_colorIdIndices_ == other.m_colorIdIndices_)) &&
                (m_mesh3DRenderData_ == other.m_mesh3DRenderData_);
    }

    return true;
}

uint32_t Mesh3DRenderLayerData::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_header_);
    result = ::zserio::calcHashCode(result, m_mesh3dDisplayGeometryLayer_);
    if (isNormalsUsed())
        result = ::zserio::calcHashCode(result, m_normals_);
    if (isTextureCoordinatesUsed())
        result = ::zserio::calcHashCode(result, m_textureCoordinates_);
    if (isTextureCoordsAdditionalUsed())
        result = ::zserio::calcHashCode(result, m_textureCoordsAdditional_);
    if (isColorIdsUsed())
        result = ::zserio::calcHashCode(result, m_colorIds_);
    if (isNormalIndicesUsed())
        result = ::zserio::calcHashCode(result, m_normalIndices_);
    if (isTextureCoordsIndicesUsed())
        result = ::zserio::calcHashCode(result, m_textureCoordsIndices_);
    if (isTextureCoordsAdditionalIndicesUsed())
        result = ::zserio::calcHashCode(result, m_textureCoordsAdditionalIndices_);
    if (isColorIdIndicesUsed())
        result = ::zserio::calcHashCode(result, m_colorIdIndices_);
    result = ::zserio::calcHashCode(result, m_mesh3DRenderData_);

    return result;
}

void Mesh3DRenderLayerData::write(::zserio::BitStreamWriter& out) const
{
    m_header_.write(out);

    // check parameters
    if (m_mesh3dDisplayGeometryLayer_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::MESH_3D))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: ") <<
                m_mesh3dDisplayGeometryLayer_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::MESH_3D) << "!";
    }
    if (m_mesh3dDisplayGeometryLayer_.getHasIds() != static_cast<bool>(true))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: ") <<
                m_mesh3dDisplayGeometryLayer_.getHasIds() << " != " << static_cast<bool>(true) << "!";
    }
    if (m_mesh3dDisplayGeometryLayer_.getHasTypes() != static_cast<bool>(true))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: ") <<
                m_mesh3dDisplayGeometryLayer_.getHasTypes() << " != " << static_cast<bool>(true) << "!";
    }
    m_mesh3dDisplayGeometryLayer_.write(out);

    if ((getHeader().getHasNormals()))
    {
        // check array length
        if (m_normals_.value().getRawArray().size() != static_cast<size_t>(getHeader().funcNumOfNormals()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.normals: ") <<
                    m_normals_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().funcNumOfNormals()) << "!";
        }
        m_normals_.value().writePacked(*this, out);
    }

    if ((getHeader().getHasTextureCoords()))
    {
        // check array length
        if (m_textureCoordinates_.value().getRawArray().size() != static_cast<size_t>(getHeader().funcNumOfTextureCoords()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.textureCoordinates: ") <<
                    m_textureCoordinates_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().funcNumOfTextureCoords()) << "!";
        }
        m_textureCoordinates_.value().write(*this, out);
    }

    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        // check array length
        if (m_textureCoordsAdditional_.value().getRawArray().size() != static_cast<size_t>(getHeader().funcNumOfTextureCoordsAdditional()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.textureCoordsAdditional: ") <<
                    m_textureCoordsAdditional_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().funcNumOfTextureCoordsAdditional()) << "!";
        }
        m_textureCoordsAdditional_.value().write(*this, out);
    }

    if ((getHeader().funcHasColorPerVertex()))
    {
        // check array length
        if (m_colorIds_.value().getRawArray().size() != static_cast<size_t>(getHeader().funcNumOfColorIds()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.colorIds: ") <<
                    m_colorIds_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().funcNumOfColorIds()) << "!";
        }
        m_colorIds_.value().writePacked(out);
    }

    if ((getHeader().getHasNormals()))
    {
        // check parameters
        if (m_normalIndices_.value().getPositionBufferSize() != static_cast<uint32_t>(getNormals().size()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.normalIndices: ") <<
                    m_normalIndices_.value().getPositionBufferSize() << " != " << static_cast<uint32_t>(getNormals().size()) << "!";
        }
        m_normalIndices_.value().write(out);
    }

    if ((getHeader().getHasTextureCoords()))
    {
        // check parameters
        if (m_textureCoordsIndices_.value().getPositionBufferSize() != static_cast<uint32_t>(getTextureCoordinates().size()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsIndices: ") <<
                    m_textureCoordsIndices_.value().getPositionBufferSize() << " != " << static_cast<uint32_t>(getTextureCoordinates().size()) << "!";
        }
        m_textureCoordsIndices_.value().write(out);
    }

    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        // check parameters
        if (m_textureCoordsAdditionalIndices_.value().getPositionBufferSize() != static_cast<uint32_t>(getTextureCoordsAdditional().size()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsAdditionalIndices: ") <<
                    m_textureCoordsAdditionalIndices_.value().getPositionBufferSize() << " != " << static_cast<uint32_t>(getTextureCoordsAdditional().size()) << "!";
        }
        m_textureCoordsAdditionalIndices_.value().write(out);
    }

    if ((getHeader().funcHasColorPerVertex()))
    {
        // check parameters
        if (m_colorIdIndices_.value().getPositionBufferSize() != static_cast<uint32_t>(getColorIds().size()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.colorIdIndices: ") <<
                    m_colorIdIndices_.value().getPositionBufferSize() << " != " << static_cast<uint32_t>(getColorIds().size()) << "!";
        }
        m_colorIdIndices_.value().write(out);
    }

    // check array length
    if (m_mesh3DRenderData_.getRawArray().size() != static_cast<size_t>(getMesh3dDisplayGeometryLayer().getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.mesh3DRenderData: ") <<
                m_mesh3DRenderData_.getRawArray().size() << " != " <<
                static_cast<size_t>(getMesh3dDisplayGeometryLayer().getNumElements()) << "!";
    }
    m_mesh3DRenderData_.write(*this, out);
}

void Mesh3DRenderLayerData::write(Mesh3DRenderLayerData::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_header_.write(context.getHeader(), out);

    // check parameters
    if (m_mesh3dDisplayGeometryLayer_.getType() != static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::MESH_3D))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter type for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: ") <<
                m_mesh3dDisplayGeometryLayer_.getType() << " != " << static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::MESH_3D) << "!";
    }
    if (m_mesh3dDisplayGeometryLayer_.getHasIds() != static_cast<bool>(true))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: ") <<
                m_mesh3dDisplayGeometryLayer_.getHasIds() << " != " << static_cast<bool>(true) << "!";
    }
    if (m_mesh3dDisplayGeometryLayer_.getHasTypes() != static_cast<bool>(true))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: ") <<
                m_mesh3dDisplayGeometryLayer_.getHasTypes() << " != " << static_cast<bool>(true) << "!";
    }
    m_mesh3dDisplayGeometryLayer_.write(context.getMesh3dDisplayGeometryLayer(), out);

    if ((getHeader().getHasNormals()))
    {
        // check array length
        if (m_normals_.value().getRawArray().size() != static_cast<size_t>(getHeader().funcNumOfNormals()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.normals: ") <<
                    m_normals_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().funcNumOfNormals()) << "!";
        }
        m_normals_.value().writePacked(*this, out);
    }

    if ((getHeader().getHasTextureCoords()))
    {
        // check array length
        if (m_textureCoordinates_.value().getRawArray().size() != static_cast<size_t>(getHeader().funcNumOfTextureCoords()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.textureCoordinates: ") <<
                    m_textureCoordinates_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().funcNumOfTextureCoords()) << "!";
        }
        m_textureCoordinates_.value().write(*this, out);
    }

    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        // check array length
        if (m_textureCoordsAdditional_.value().getRawArray().size() != static_cast<size_t>(getHeader().funcNumOfTextureCoordsAdditional()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.textureCoordsAdditional: ") <<
                    m_textureCoordsAdditional_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().funcNumOfTextureCoordsAdditional()) << "!";
        }
        m_textureCoordsAdditional_.value().write(*this, out);
    }

    if ((getHeader().funcHasColorPerVertex()))
    {
        // check array length
        if (m_colorIds_.value().getRawArray().size() != static_cast<size_t>(getHeader().funcNumOfColorIds()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.colorIds: ") <<
                    m_colorIds_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getHeader().funcNumOfColorIds()) << "!";
        }
        m_colorIds_.value().writePacked(out);
    }

    if ((getHeader().getHasNormals()))
    {
        // check parameters
        if (m_normalIndices_.value().getPositionBufferSize() != static_cast<uint32_t>(getNormals().size()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.normalIndices: ") <<
                    m_normalIndices_.value().getPositionBufferSize() << " != " << static_cast<uint32_t>(getNormals().size()) << "!";
        }
        m_normalIndices_.value().write(context.getNormalIndices(), out);
    }

    if ((getHeader().getHasTextureCoords()))
    {
        // check parameters
        if (m_textureCoordsIndices_.value().getPositionBufferSize() != static_cast<uint32_t>(getTextureCoordinates().size()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsIndices: ") <<
                    m_textureCoordsIndices_.value().getPositionBufferSize() << " != " << static_cast<uint32_t>(getTextureCoordinates().size()) << "!";
        }
        m_textureCoordsIndices_.value().write(context.getTextureCoordsIndices(), out);
    }

    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        // check parameters
        if (m_textureCoordsAdditionalIndices_.value().getPositionBufferSize() != static_cast<uint32_t>(getTextureCoordsAdditional().size()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsAdditionalIndices: ") <<
                    m_textureCoordsAdditionalIndices_.value().getPositionBufferSize() << " != " << static_cast<uint32_t>(getTextureCoordsAdditional().size()) << "!";
        }
        m_textureCoordsAdditionalIndices_.value().write(context.getTextureCoordsAdditionalIndices(), out);
    }

    if ((getHeader().funcHasColorPerVertex()))
    {
        // check parameters
        if (m_colorIdIndices_.value().getPositionBufferSize() != static_cast<uint32_t>(getColorIds().size()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.colorIdIndices: ") <<
                    m_colorIdIndices_.value().getPositionBufferSize() << " != " << static_cast<uint32_t>(getColorIds().size()) << "!";
        }
        m_colorIdIndices_.value().write(context.getColorIdIndices(), out);
    }

    // check array length
    if (m_mesh3DRenderData_.getRawArray().size() != static_cast<size_t>(getMesh3dDisplayGeometryLayer().getNumElements()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field Mesh3DRenderLayerData.mesh3DRenderData: ") <<
                m_mesh3DRenderData_.getRawArray().size() << " != " <<
                static_cast<size_t>(getMesh3dDisplayGeometryLayer().getNumElements()) << "!";
    }
    m_mesh3DRenderData_.writePacked(*this, out);
}

void Mesh3DRenderLayerData::ZserioElementFactory_normals::create(Mesh3DRenderLayerData&        ,
        ::zserio::vector<::nds::display::types::NormalSphere>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Mesh3DRenderLayerData::ZserioElementFactory_normals::create(Mesh3DRenderLayerData&        ,
        ::zserio::vector<::nds::display::types::NormalSphere>& array,
        ::nds::display::types::NormalSphere::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void Mesh3DRenderLayerData::ZserioElementFactory_textureCoordinates::create(Mesh3DRenderLayerData&        ,
        ::zserio::vector<::nds::display::types::TextureCoords>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Mesh3DRenderLayerData::ZserioElementFactory_textureCoordsAdditional::create(Mesh3DRenderLayerData&        ,
        ::zserio::vector<::nds::display::types::TextureCoords>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Mesh3DRenderLayerData::ZserioArrayExpressions_mesh3DRenderData::initializeElement(Mesh3DRenderLayerData& owner,
        ::nds::display::types::Mesh3DRenderData& element, size_t index)
{
    element.initialize(owner.getMesh3dDisplayGeometryLayer().getBuffers().getMeshes3D().getPolymeshes().at(index), owner.getHeader());
}

void Mesh3DRenderLayerData::ZserioElementFactory_mesh3DRenderData::create(Mesh3DRenderLayerData&         owner,
        ::zserio::vector<::nds::display::types::Mesh3DRenderData>& array,
        ::zserio::BitStreamReader& in, size_t index)
{
    array.emplace_back(in, owner.getMesh3dDisplayGeometryLayer().getBuffers().getMeshes3D().getPolymeshes().at(index), owner.getHeader(), array.get_allocator());
}

void Mesh3DRenderLayerData::ZserioElementFactory_mesh3DRenderData::create(Mesh3DRenderLayerData&         owner,
        ::zserio::vector<::nds::display::types::Mesh3DRenderData>& array,
        ::nds::display::types::Mesh3DRenderData::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t index)
{
    array.emplace_back(context, in, owner.getMesh3dDisplayGeometryLayer().getBuffers().getMeshes3D().getPolymeshes().at(index), owner.getHeader(), array.get_allocator());
}

::nds::display::types::Mesh3DRenderLayerHeader Mesh3DRenderLayerData::readHeader(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::types::Mesh3DRenderLayerHeader(in, allocator);
}

::nds::display::types::Mesh3DRenderLayerHeader Mesh3DRenderLayerData::readHeader(Mesh3DRenderLayerData::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::types::Mesh3DRenderLayerHeader(context.getHeader(), in, allocator);
}
::nds::display::instantiations::Mesh3dDisplayGeometryLayer Mesh3DRenderLayerData::readMesh3dDisplayGeometryLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::instantiations::Mesh3dDisplayGeometryLayer(in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::MESH_3D), static_cast<bool>(true), static_cast<bool>(true), allocator);
}

::nds::display::instantiations::Mesh3dDisplayGeometryLayer Mesh3DRenderLayerData::readMesh3dDisplayGeometryLayer(Mesh3DRenderLayerData::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::instantiations::Mesh3dDisplayGeometryLayer(context.getMesh3dDisplayGeometryLayer(), in, static_cast<::nds::core::geometry::GeometryLayerType>(::nds::core::geometry::GeometryLayerType::MESH_3D), static_cast<bool>(true), static_cast<bool>(true), allocator);
}
::zserio::InplaceOptionalHolder<Mesh3DRenderLayerData::ZserioArrayType_normals> Mesh3DRenderLayerData::readNormals(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getHeader().getHasNormals()))
    {
        ZserioArrayType_normals readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getHeader().funcNumOfNormals()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_normals>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_normals>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Mesh3DRenderLayerData::ZserioArrayType_normals> Mesh3DRenderLayerData::readNormals(Mesh3DRenderLayerData::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getHeader().getHasNormals()))
    {
        ZserioArrayType_normals readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getHeader().funcNumOfNormals()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_normals>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_normals>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Mesh3DRenderLayerData::ZserioArrayType_textureCoordinates> Mesh3DRenderLayerData::readTextureCoordinates(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getHeader().getHasTextureCoords()))
    {
        ZserioArrayType_textureCoordinates readField(allocator);
        readField.read(*this, in, static_cast<size_t>(getHeader().funcNumOfTextureCoords()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordinates>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordinates>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Mesh3DRenderLayerData::ZserioArrayType_textureCoordsAdditional> Mesh3DRenderLayerData::readTextureCoordsAdditional(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        ZserioArrayType_textureCoordsAdditional readField(allocator);
        readField.read(*this, in, static_cast<size_t>(getHeader().funcNumOfTextureCoordsAdditional()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordsAdditional>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordsAdditional>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Mesh3DRenderLayerData::ZserioArrayType_colorIds> Mesh3DRenderLayerData::readColorIds(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getHeader().funcHasColorPerVertex()))
    {
        ZserioArrayType_colorIds readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getHeader().funcNumOfColorIds()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_colorIds>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_colorIds>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Mesh3DRenderLayerData::ZserioArrayType_colorIds> Mesh3DRenderLayerData::readColorIds(Mesh3DRenderLayerData::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getHeader().funcHasColorPerVertex()))
    {
        ZserioArrayType_colorIds readField(allocator);
        readField.readPacked(in, static_cast<size_t>(getHeader().funcNumOfColorIds()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_colorIds>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_colorIds>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> Mesh3DRenderLayerData::readNormalIndices(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getHeader().getHasNormals()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::nds::core::geometry::IndexBuffer(in, static_cast<uint32_t>(getNormals().size()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> Mesh3DRenderLayerData::readNormalIndices(Mesh3DRenderLayerData::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getHeader().getHasNormals()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::nds::core::geometry::IndexBuffer(context.getNormalIndices(), in, static_cast<uint32_t>(getNormals().size()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> Mesh3DRenderLayerData::readTextureCoordsIndices(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getHeader().getHasTextureCoords()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::nds::core::geometry::IndexBuffer(in, static_cast<uint32_t>(getTextureCoordinates().size()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> Mesh3DRenderLayerData::readTextureCoordsIndices(Mesh3DRenderLayerData::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getHeader().getHasTextureCoords()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::nds::core::geometry::IndexBuffer(context.getTextureCoordsIndices(), in, static_cast<uint32_t>(getTextureCoordinates().size()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> Mesh3DRenderLayerData::readTextureCoordsAdditionalIndices(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::nds::core::geometry::IndexBuffer(in, static_cast<uint32_t>(getTextureCoordsAdditional().size()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> Mesh3DRenderLayerData::readTextureCoordsAdditionalIndices(Mesh3DRenderLayerData::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getHeader().getHasTextureCoordsAdditional()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::nds::core::geometry::IndexBuffer(context.getTextureCoordsAdditionalIndices(), in, static_cast<uint32_t>(getTextureCoordsAdditional().size()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> Mesh3DRenderLayerData::readColorIdIndices(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getHeader().funcHasColorPerVertex()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::nds::core::geometry::IndexBuffer(in, static_cast<uint32_t>(getColorIds().size()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> Mesh3DRenderLayerData::readColorIdIndices(Mesh3DRenderLayerData::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getHeader().funcHasColorPerVertex()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::nds::core::geometry::IndexBuffer(context.getColorIdIndices(), in, static_cast<uint32_t>(getColorIds().size()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer>(::zserio::NullOpt);
}
Mesh3DRenderLayerData::ZserioArrayType_mesh3DRenderData Mesh3DRenderLayerData::readMesh3DRenderData(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_mesh3DRenderData readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getMesh3dDisplayGeometryLayer().getNumElements()));

    return readField;
}

Mesh3DRenderLayerData::ZserioArrayType_mesh3DRenderData Mesh3DRenderLayerData::readMesh3DRenderData(Mesh3DRenderLayerData::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_mesh3DRenderData readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getMesh3dDisplayGeometryLayer().getNumElements()));

    return readField;
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/Display3DStyleLayer.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

Display3DStyleLayer::Display3DStyleLayer(const allocator_type& allocator) noexcept :
        m_content_(allocator),
        m_textures_(::zserio::NullOpt),
        m_colors_(::zserio::NullOpt)
{
}

Display3DStyleLayer::Display3DStyleLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in, allocator)),
        m_textures_(readTextures(in, allocator)),
        m_colors_(readColors(in, allocator))
{
}

Display3DStyleLayer::Display3DStyleLayer(Display3DStyleLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in, allocator)),
        m_textures_(readTextures(context, in, allocator)),
        m_colors_(readColors(context, in, allocator))
{
}

Display3DStyleLayer::Display3DStyleLayer(::zserio::PropagateAllocatorT,
        const Display3DStyleLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_textures_(::zserio::allocatorPropagatingCopy(other.m_textures_, allocator)),
        m_colors_(::zserio::allocatorPropagatingCopy(other.m_colors_, allocator))
{
}

::nds::display::metadata::Display3DStyleLayerContent& Display3DStyleLayer::getContent()
{
    return m_content_;
}

const ::nds::display::metadata::Display3DStyleLayerContent& Display3DStyleLayer::getContent() const
{
    return m_content_;
}

void Display3DStyleLayer::setContent(const ::nds::display::metadata::Display3DStyleLayerContent& content_)
{
    m_content_ = content_;
}

void Display3DStyleLayer::setContent(::nds::display::metadata::Display3DStyleLayerContent&& content_)
{
    m_content_ = ::std::move(content_);
}

::zserio::vector<::nds::display::types::Texture>& Display3DStyleLayer::getTextures()
{
    return m_textures_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::Texture>& Display3DStyleLayer::getTextures() const
{
    return m_textures_.value().getRawArray();
}

void Display3DStyleLayer::setTextures(const ::zserio::vector<::nds::display::types::Texture>& textures_)
{
    m_textures_ = ZserioArrayType_textures(textures_);
}

void Display3DStyleLayer::setTextures(::zserio::vector<::nds::display::types::Texture>&& textures_)
{
    m_textures_ = ZserioArrayType_textures(std::move(textures_));
}

bool Display3DStyleLayer::isTexturesUsed() const
{
    return (getContent().getHasTextures());
}

bool Display3DStyleLayer::isTexturesSet() const
{
    return m_textures_.hasValue();
}

void Display3DStyleLayer::resetTextures()
{
    m_textures_.reset();
}

::zserio::vector<::nds::display::types::Style3DColor>& Display3DStyleLayer::getColors()
{
    return m_colors_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::Style3DColor>& Display3DStyleLayer::getColors() const
{
    return m_colors_.value().getRawArray();
}

void Display3DStyleLayer::setColors(const ::zserio::vector<::nds::display::types::Style3DColor>& colors_)
{
    m_colors_ = ZserioArrayType_colors(colors_);
}

void Display3DStyleLayer::setColors(::zserio::vector<::nds::display::types::Style3DColor>&& colors_)
{
    m_colors_ = ZserioArrayType_colors(std::move(colors_));
}

bool Display3DStyleLayer::isColorsUsed() const
{
    return (getContent().getHasColors());
}

bool Display3DStyleLayer::isColorsSet() const
{
    return m_colors_.hasValue();
}

void Display3DStyleLayer::resetColors()
{
    m_colors_.reset();
}

::nds::system::types::LayerType Display3DStyleLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::GEOMETRY);
}

void Display3DStyleLayer::initPackingContext(Display3DStyleLayer::ZserioPackingContext&) const
{
}

size_t Display3DStyleLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if (getContent().getHasTextures())
    {
        endBitPosition += m_textures_.value().bitSizeOf(*this, endBitPosition);
    }
    if (getContent().getHasColors())
    {
        endBitPosition += m_colors_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3DStyleLayer::bitSizeOf(Display3DStyleLayer::ZserioPackingContext&, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if (getContent().getHasTextures())
    {
        endBitPosition += m_textures_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if (getContent().getHasColors())
    {
        endBitPosition += m_colors_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3DStyleLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if (getContent().getHasTextures())
    {
        endBitPosition = m_textures_.value().initializeOffsets(*this, endBitPosition);
    }
    if (getContent().getHasColors())
    {
        endBitPosition = m_colors_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t Display3DStyleLayer::initializeOffsets(Display3DStyleLayer::ZserioPackingContext&, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if (getContent().getHasTextures())
    {
        endBitPosition = m_textures_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if (getContent().getHasColors())
    {
        endBitPosition = m_colors_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool Display3DStyleLayer::operator==(const Display3DStyleLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isTexturesUsed() ? !other.isTexturesUsed() : (m_textures_ == other.m_textures_)) &&
                (!isColorsUsed() ? !other.isColorsUsed() : (m_colors_ == other.m_colors_));
    }

    return true;
}

uint32_t Display3DStyleLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isTexturesUsed())
        result = ::zserio::calcHashCode(result, m_textures_);
    if (isColorsUsed())
        result = ::zserio::calcHashCode(result, m_colors_);

    return result;
}

void Display3DStyleLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if (getContent().getHasTextures())
    {
        // check constraint
        if (!(getTextures().size() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at Display3DStyleLayer.textures!");
        m_textures_.value().write(*this, out);
    }

    if (getContent().getHasColors())
    {
        // check constraint
        if (!(getColors().size() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at Display3DStyleLayer.colors!");
        m_colors_.value().write(*this, out);
    }
}

void Display3DStyleLayer::write(Display3DStyleLayer::ZserioPackingContext&, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if (getContent().getHasTextures())
    {
        // check constraint
        if (!(getTextures().size() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at Display3DStyleLayer.textures!");
        m_textures_.value().writePacked(*this, out);
    }

    if (getContent().getHasColors())
    {
        // check constraint
        if (!(getColors().size() > 0))
            throw ::zserio::ConstraintException("Write: Constraint violated at Display3DStyleLayer.colors!");
        m_colors_.value().writePacked(*this, out);
    }
}

void Display3DStyleLayer::ZserioElementFactory_textures::create(Display3DStyleLayer&        ,
        ::zserio::vector<::nds::display::types::Texture>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Display3DStyleLayer::ZserioElementFactory_textures::create(Display3DStyleLayer&        ,
        ::zserio::vector<::nds::display::types::Texture>& array,
        ::nds::display::types::Texture::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void Display3DStyleLayer::ZserioElementFactory_colors::create(Display3DStyleLayer&        ,
        ::zserio::vector<::nds::display::types::Style3DColor>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Display3DStyleLayer::ZserioElementFactory_colors::create(Display3DStyleLayer&        ,
        ::zserio::vector<::nds::display::types::Style3DColor>& array,
        ::nds::display::types::Style3DColor::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::display::metadata::Display3DStyleLayerContent Display3DStyleLayer::readContent(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::Display3DStyleLayerContent(in, allocator);
}
::zserio::InplaceOptionalHolder<Display3DStyleLayer::ZserioArrayType_textures> Display3DStyleLayer::readTextures(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getContent().getHasTextures())
    {
        ZserioArrayType_textures readField(allocator);
        readField.read(*this, in);
        // check constraint
        if (!(readField.getRawArray().size() > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at Display3DStyleLayer.textures!");

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_textures>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_textures>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display3DStyleLayer::ZserioArrayType_textures> Display3DStyleLayer::readTextures(Display3DStyleLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getContent().getHasTextures())
    {
        ZserioArrayType_textures readField(allocator);
        readField.readPacked(*this, in);
        // check constraint
        if (!(readField.getRawArray().size() > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at Display3DStyleLayer.textures!");

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_textures>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_textures>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Display3DStyleLayer::ZserioArrayType_colors> Display3DStyleLayer::readColors(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getContent().getHasColors())
    {
        ZserioArrayType_colors readField(allocator);
        readField.read(*this, in);
        // check constraint
        if (!(readField.getRawArray().size() > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at Display3DStyleLayer.colors!");

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_colors>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_colors>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display3DStyleLayer::ZserioArrayType_colors> Display3DStyleLayer::readColors(Display3DStyleLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getContent().getHasColors())
    {
        ZserioArrayType_colors readField(allocator);
        readField.readPacked(*this, in);
        // check constraint
        if (!(readField.getRawArray().size() > 0))
            throw ::zserio::ConstraintException("Read: Constraint violated at Display3DStyleLayer.colors!");

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_colors>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_colors>(::zserio::NullOpt);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/layer/GltfLayer.h>

namespace nds
{
namespace display
{
namespace layer
{

GltfLayer::GltfLayer(const allocator_type& allocator) noexcept :
        m_header_(allocator),
        m_gltfData_(allocator)
{
}

GltfLayer::GltfLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_header_(readHeader(in, allocator)),
        m_gltfData_(readGltfData(in, allocator))
{
}

GltfLayer::GltfLayer(GltfLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_header_(readHeader(context, in, allocator)),
        m_gltfData_(readGltfData(in, allocator))
{
}

GltfLayer::GltfLayer(::zserio::PropagateAllocatorT,
        const GltfLayer& other, const allocator_type& allocator) :
        m_header_(::zserio::allocatorPropagatingCopy(other.m_header_, allocator)),
        m_gltfData_(::zserio::allocatorPropagatingCopy(other.m_gltfData_, allocator))
{
}

::nds::display::layer::GltfLayerHeader& GltfLayer::getHeader()
{
    return m_header_;
}

const ::nds::display::layer::GltfLayerHeader& GltfLayer::getHeader() const
{
    return m_header_;
}

void GltfLayer::setHeader(const ::nds::display::layer::GltfLayerHeader& header_)
{
    m_header_ = header_;
}

void GltfLayer::setHeader(::nds::display::layer::GltfLayerHeader&& header_)
{
    m_header_ = ::std::move(header_);
}

::zserio::BitBuffer& GltfLayer::getGltfData()
{
    return m_gltfData_;
}

const ::zserio::BitBuffer& GltfLayer::getGltfData() const
{
    return m_gltfData_;
}

void GltfLayer::setGltfData(const ::zserio::BitBuffer& gltfData_)
{
    m_gltfData_ = gltfData_;
}

void GltfLayer::setGltfData(::zserio::BitBuffer&& gltfData_)
{
    m_gltfData_ = ::std::move(gltfData_);
}

void GltfLayer::initPackingContext(GltfLayer::ZserioPackingContext& context) const
{
    m_header_.initPackingContext(context.getHeader());
}

size_t GltfLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_gltfData_);

    return endBitPosition - bitPosition;
}

size_t GltfLayer::bitSizeOf(GltfLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(context.getHeader(), endBitPosition);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_gltfData_);

    return endBitPosition - bitPosition;
}

size_t GltfLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_gltfData_);

    return endBitPosition;
}

size_t GltfLayer::initializeOffsets(GltfLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(context.getHeader(), endBitPosition);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_gltfData_);

    return endBitPosition;
}

bool GltfLayer::operator==(const GltfLayer& other) const
{
    if (this != &other)
    {
        return
                (m_header_ == other.m_header_) &&
                (m_gltfData_ == other.m_gltfData_);
    }

    return true;
}

uint32_t GltfLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_header_);
    result = ::zserio::calcHashCode(result, m_gltfData_);

    return result;
}

void GltfLayer::write(::zserio::BitStreamWriter& out) const
{
    m_header_.write(out);
    out.writeBitBuffer(m_gltfData_);
}

void GltfLayer::write(GltfLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_header_.write(context.getHeader(), out);
    out.writeBitBuffer(m_gltfData_);
}

::nds::display::layer::GltfLayerHeader GltfLayer::readHeader(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::layer::GltfLayerHeader(in, allocator);
}

::nds::display::layer::GltfLayerHeader GltfLayer::readHeader(GltfLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::layer::GltfLayerHeader(context.getHeader(), in, allocator);
}
::zserio::BitBuffer GltfLayer::readGltfData(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::BitBuffer>(in.readBitBuffer(allocator));
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/layer/GltfLayerHeader.h>

namespace nds
{
namespace display
{
namespace layer
{

GltfLayerHeader::GltfLayerHeader(const allocator_type&) noexcept :
        m_gltfVersion_(::nds::display::types::GltfVersion()),
        m_minScaleDenominator_(::nds::core::types::ScaleDenominator()),
        m_maxScaleDenominator_(::nds::core::types::ScaleDenominator())
{
}

GltfLayerHeader::GltfLayerHeader(::zserio::BitStreamReader& in, const allocator_type&) :
        m_gltfVersion_(readGltfVersion(in)),
        m_minScaleDenominator_(readMinScaleDenominator(in)),
        m_maxScaleDenominator_(readMaxScaleDenominator(in))
{
}

GltfLayerHeader::GltfLayerHeader(GltfLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_gltfVersion_(readGltfVersion(context, in)),
        m_minScaleDenominator_(readMinScaleDenominator(context, in)),
        m_maxScaleDenominator_(readMaxScaleDenominator(context, in))
{
}

GltfLayerHeader::GltfLayerHeader(::zserio::PropagateAllocatorT,
        const GltfLayerHeader& other, const allocator_type& allocator) :
        m_gltfVersion_(::zserio::allocatorPropagatingCopy(other.m_gltfVersion_, allocator)),
        m_minScaleDenominator_(::zserio::allocatorPropagatingCopy(other.m_minScaleDenominator_, allocator)),
        m_maxScaleDenominator_(::zserio::allocatorPropagatingCopy(other.m_maxScaleDenominator_, allocator))
{
}

::nds::display::types::GltfVersion GltfLayerHeader::getGltfVersion() const
{
    return m_gltfVersion_;
}

void GltfLayerHeader::setGltfVersion(::nds::display::types::GltfVersion gltfVersion_)
{
    m_gltfVersion_ = gltfVersion_;
}

::nds::core::types::ScaleDenominator GltfLayerHeader::getMinScaleDenominator() const
{
    return m_minScaleDenominator_;
}

void GltfLayerHeader::setMinScaleDenominator(::nds::core::types::ScaleDenominator minScaleDenominator_)
{
    m_minScaleDenominator_ = minScaleDenominator_;
}

::nds::core::types::ScaleDenominator GltfLayerHeader::getMaxScaleDenominator() const
{
    return m_maxScaleDenominator_;
}

void GltfLayerHeader::setMaxScaleDenominator(::nds::core::types::ScaleDenominator maxScaleDenominator_)
{
    m_maxScaleDenominator_ = maxScaleDenominator_;
}

void GltfLayerHeader::initPackingContext(GltfLayerHeader::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getGltfVersion(), m_gltfVersion_);
    context.getMinScaleDenominator().init<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    context.getMaxScaleDenominator().init<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);
}

size_t GltfLayerHeader::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_gltfVersion_);
    endBitPosition += UINT8_C(32);
    endBitPosition += UINT8_C(32);

    return endBitPosition - bitPosition;
}

size_t GltfLayerHeader::bitSizeOf(GltfLayerHeader::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getGltfVersion(), m_gltfVersion_);
    endBitPosition += context.getMinScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    endBitPosition += context.getMaxScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);

    return endBitPosition - bitPosition;
}

size_t GltfLayerHeader::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_gltfVersion_);
    endBitPosition += UINT8_C(32);
    endBitPosition += UINT8_C(32);

    return endBitPosition;
}

size_t GltfLayerHeader::initializeOffsets(GltfLayerHeader::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getGltfVersion(), endBitPosition,
        m_gltfVersion_);
    endBitPosition += context.getMinScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_minScaleDenominator_);
    endBitPosition += context.getMaxScaleDenominator().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(m_maxScaleDenominator_);

    return endBitPosition;
}

bool GltfLayerHeader::operator==(const GltfLayerHeader& other) const
{
    if (this != &other)
    {
        return
                (m_gltfVersion_ == other.m_gltfVersion_) &&
                (m_minScaleDenominator_ == other.m_minScaleDenominator_) &&
                (m_maxScaleDenominator_ == other.m_maxScaleDenominator_);
    }

    return true;
}

uint32_t GltfLayerHeader::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_gltfVersion_);
    result = ::zserio::calcHashCode(result, m_minScaleDenominator_);
    result = ::zserio::calcHashCode(result, m_maxScaleDenominator_);

    return result;
}

void GltfLayerHeader::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_gltfVersion_);
    out.writeBits(m_minScaleDenominator_, UINT8_C(32));
    out.writeBits(m_maxScaleDenominator_, UINT8_C(32));
}

void GltfLayerHeader::write(GltfLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getGltfVersion(), out, m_gltfVersion_);
    context.getMinScaleDenominator().write<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(out, m_minScaleDenominator_);
    context.getMaxScaleDenominator().write<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(out, m_maxScaleDenominator_);
}

::nds::display::types::GltfVersion GltfLayerHeader::readGltfVersion(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::GltfVersion>(in);
}

::nds::display::types::GltfVersion GltfLayerHeader::readGltfVersion(GltfLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::GltfVersion>(context.getGltfVersion(), in);
}
::nds::core::types::ScaleDenominator GltfLayerHeader::readMinScaleDenominator(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::ScaleDenominator>(in.readBits(UINT8_C(32)));
}

::nds::core::types::ScaleDenominator GltfLayerHeader::readMinScaleDenominator(GltfLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMinScaleDenominator().read<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(in);
}
::nds::core::types::ScaleDenominator GltfLayerHeader::readMaxScaleDenominator(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::ScaleDenominator>(in.readBits(UINT8_C(32)));
}

::nds::core::types::ScaleDenominator GltfLayerHeader::readMaxScaleDenominator(GltfLayerHeader::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMaxScaleDenominator().read<::zserio::StdIntArrayTraits<::nds::core::types::ScaleDenominator>>(in);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/HeightmapLayer.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

HeightmapLayer::HeightmapLayer(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_hasIds_(bool()),
        m_completeTile_(bool()),
        m_heightmaps_(allocator)
{
}

HeightmapLayer::HeightmapLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_hasIds_(readHasIds(in)),
        m_completeTile_(readCompleteTile(in)),
        m_heightmaps_(readHeightmaps(in, allocator))
{
}

HeightmapLayer::HeightmapLayer(HeightmapLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_hasIds_(readHasIds(in)),
        m_completeTile_(readCompleteTile(in)),
        m_heightmaps_(readHeightmaps(context, in, allocator))
{
}

HeightmapLayer::HeightmapLayer(const HeightmapLayer& other) :
        m_hasIds_(other.m_hasIds_),
        m_completeTile_(other.m_completeTile_),
        m_heightmaps_(other.m_heightmaps_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

HeightmapLayer& HeightmapLayer::operator=(const HeightmapLayer& other)
{
    m_hasIds_ = other.m_hasIds_;
    m_completeTile_ = other.m_completeTile_;
    m_heightmaps_ = other.m_heightmaps_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

HeightmapLayer::HeightmapLayer(HeightmapLayer&& other) :
        m_hasIds_(::std::move(other.m_hasIds_)),
        m_completeTile_(::std::move(other.m_completeTile_)),
        m_heightmaps_(::std::move(other.m_heightmaps_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

HeightmapLayer& HeightmapLayer::operator=(HeightmapLayer&& other)
{
    m_hasIds_ = ::std::move(other.m_hasIds_);
    m_completeTile_ = ::std::move(other.m_completeTile_);
    m_heightmaps_ = ::std::move(other.m_heightmaps_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

HeightmapLayer::HeightmapLayer(::zserio::PropagateAllocatorT,
        const HeightmapLayer& other, const allocator_type& allocator) :
        m_hasIds_(::zserio::allocatorPropagatingCopy(other.m_hasIds_, allocator)),
        m_completeTile_(::zserio::allocatorPropagatingCopy(other.m_completeTile_, allocator)),
        m_heightmaps_(::zserio::allocatorPropagatingCopy(other.m_heightmaps_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void HeightmapLayer::initializeChildren()
{
    m_heightmaps_.initialize(static_cast<bool>(getHasIds()), static_cast<bool>(false));

    m_areChildrenInitialized = true;
}

bool HeightmapLayer::getHasIds() const
{
    return m_hasIds_;
}

void HeightmapLayer::setHasIds(bool hasIds_)
{
    m_hasIds_ = hasIds_;
}

bool HeightmapLayer::getCompleteTile() const
{
    return m_completeTile_;
}

void HeightmapLayer::setCompleteTile(bool completeTile_)
{
    m_completeTile_ = completeTile_;
}

::nds::display::instantiations::HeightMapGridLayer& HeightmapLayer::getHeightmaps()
{
    return m_heightmaps_;
}

const ::nds::display::instantiations::HeightMapGridLayer& HeightmapLayer::getHeightmaps() const
{
    return m_heightmaps_;
}

void HeightmapLayer::setHeightmaps(const ::nds::display::instantiations::HeightMapGridLayer& heightmaps_)
{
    m_heightmaps_ = heightmaps_;
}

void HeightmapLayer::setHeightmaps(::nds::display::instantiations::HeightMapGridLayer&& heightmaps_)
{
    m_heightmaps_ = ::std::move(heightmaps_);
}

::nds::system::types::LayerType HeightmapLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::FEATURE);
}

void HeightmapLayer::initPackingContext(HeightmapLayer::ZserioPackingContext& context) const
{
    m_heightmaps_.initPackingContext(context.getHeightmaps());
}

size_t HeightmapLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += m_heightmaps_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t HeightmapLayer::bitSizeOf(HeightmapLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition += m_heightmaps_.bitSizeOf(context.getHeightmaps(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t HeightmapLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition = m_heightmaps_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t HeightmapLayer::initializeOffsets(HeightmapLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);
    endBitPosition = m_heightmaps_.initializeOffsets(context.getHeightmaps(), endBitPosition);

    return endBitPosition;
}

bool HeightmapLayer::operator==(const HeightmapLayer& other) const
{
    if (this != &other)
    {
        return
                (m_hasIds_ == other.m_hasIds_) &&
                (m_completeTile_ == other.m_completeTile_) &&
                (m_heightmaps_ == other.m_heightmaps_);
    }

    return true;
}

uint32_t HeightmapLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_hasIds_);
    result = ::zserio::calcHashCode(result, m_completeTile_);
    result = ::zserio::calcHashCode(result, m_heightmaps_);

    return result;
}

void HeightmapLayer::write(::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_hasIds_);

    out.writeBool(m_completeTile_);

    // check parameters
    if (m_heightmaps_.getHasIds() != static_cast<bool>(getHasIds()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field HeightmapLayer.heightmaps: ") <<
                m_heightmaps_.getHasIds() << " != " << static_cast<bool>(getHasIds()) << "!";
    }
    if (m_heightmaps_.getHasTypes() != static_cast<bool>(false))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field HeightmapLayer.heightmaps: ") <<
                m_heightmaps_.getHasTypes() << " != " << static_cast<bool>(false) << "!";
    }
    m_heightmaps_.write(out);
}

void HeightmapLayer::write(HeightmapLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_hasIds_);

    out.writeBool(m_completeTile_);

    // check parameters
    if (m_heightmaps_.getHasIds() != static_cast<bool>(getHasIds()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasIds for field HeightmapLayer.heightmaps: ") <<
                m_heightmaps_.getHasIds() << " != " << static_cast<bool>(getHasIds()) << "!";
    }
    if (m_heightmaps_.getHasTypes() != static_cast<bool>(false))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter hasTypes for field HeightmapLayer.heightmaps: ") <<
                m_heightmaps_.getHasTypes() << " != " << static_cast<bool>(false) << "!";
    }
    m_heightmaps_.write(context.getHeightmaps(), out);
}

bool HeightmapLayer::readHasIds(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool HeightmapLayer::readCompleteTile(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
::nds::display::instantiations::HeightMapGridLayer HeightmapLayer::readHeightmaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::instantiations::HeightMapGridLayer(in, static_cast<bool>(getHasIds()), static_cast<bool>(false), allocator);
}

::nds::display::instantiations::HeightMapGridLayer HeightmapLayer::readHeightmaps(HeightmapLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::instantiations::HeightMapGridLayer(context.getHeightmaps(), in, static_cast<bool>(getHasIds()), static_cast<bool>(false), allocator);
}

} // namespace layer
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/layer/BdamLayer.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

BdamLayer::BdamLayer(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_header_(allocator),
        m_surfaceGrids_(allocator)
{
}

BdamLayer::BdamLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_header_(readHeader(in, allocator)),
        m_surfaceGrids_(readSurfaceGrids(in, allocator))
{
}

BdamLayer::BdamLayer(BdamLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_header_(readHeader(context, in, allocator)),
        m_surfaceGrids_(readSurfaceGrids(context, in, allocator))
{
}

BdamLayer::BdamLayer(const BdamLayer& other) :
        m_header_(other.m_header_),
        m_surfaceGrids_(other.m_surfaceGrids_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

BdamLayer& BdamLayer::operator=(const BdamLayer& other)
{
    m_header_ = other.m_header_;
    m_surfaceGrids_ = other.m_surfaceGrids_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

BdamLayer::BdamLayer(BdamLayer&& other) :
        m_header_(::std::move(other.m_header_)),
        m_surfaceGrids_(::std::move(other.m_surfaceGrids_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

BdamLayer& BdamLayer::operator=(BdamLayer&& other)
{
    m_header_ = ::std::move(other.m_header_);
    m_surfaceGrids_ = ::std::move(other.m_surfaceGrids_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

BdamLayer::BdamLayer(::zserio::PropagateAllocatorT,
        const BdamLayer& other, const allocator_type& allocator) :
        m_header_(::zserio::allocatorPropagatingCopy(other.m_header_, allocator)),
        m_surfaceGrids_(::zserio::allocatorPropagatingCopy(other.m_surfaceGrids_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void BdamLayer::initializeChildren()
{
    m_surfaceGrids_.initializeElements(*this);

    m_areChildrenInitialized = true;
}

::nds::display::types::BdamLayerHeader& BdamLayer::getHeader()
{
    return m_header_;
}

const ::nds::display::types::BdamLayerHeader& BdamLayer::getHeader() const
{
    return m_header_;
}

void BdamLayer::setHeader(const ::nds::display::types::BdamLayerHeader& header_)
{
    m_header_ = header_;
}

void BdamLayer::setHeader(::nds::display::types::BdamLayerHeader&& header_)
{
    m_header_ = ::std::move(header_);
}

::zserio::vector<::nds::display::types::BdamSurfaceGrid>& BdamLayer::getSurfaceGrids()
{
    return m_surfaceGrids_.getRawArray();
}

const ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& BdamLayer::getSurfaceGrids() const
{
    return m_surfaceGrids_.getRawArray();
}

void BdamLayer::setSurfaceGrids(const ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& surfaceGrids_)
{
    m_surfaceGrids_ = ZserioArrayType_surfaceGrids(surfaceGrids_);
}

void BdamLayer::setSurfaceGrids(::zserio::vector<::nds::display::types::BdamSurfaceGrid>&& surfaceGrids_)
{
    m_surfaceGrids_ = ZserioArrayType_surfaceGrids(std::move(surfaceGrids_));
}

::nds::system::types::LayerType BdamLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::FEATURE);
}

void BdamLayer::initPackingContext(BdamLayer::ZserioPackingContext& context) const
{
    m_header_.initPackingContext(context.getHeader());
}

size_t BdamLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(endBitPosition);
    endBitPosition += m_surfaceGrids_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t BdamLayer::bitSizeOf(BdamLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_header_.bitSizeOf(context.getHeader(), endBitPosition);
    endBitPosition += m_surfaceGrids_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t BdamLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(endBitPosition);
    endBitPosition = m_surfaceGrids_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t BdamLayer::initializeOffsets(BdamLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_header_.initializeOffsets(context.getHeader(), endBitPosition);
    endBitPosition = m_surfaceGrids_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool BdamLayer::operator==(const BdamLayer& other) const
{
    if (this != &other)
    {
        return
                (m_header_ == other.m_header_) &&
                (m_surfaceGrids_ == other.m_surfaceGrids_);
    }

    return true;
}

uint32_t BdamLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_header_);
    result = ::zserio::calcHashCode(result, m_surfaceGrids_);

    return result;
}

void BdamLayer::write(::zserio::BitStreamWriter& out) const
{
    m_header_.write(out);
    m_surfaceGrids_.write(*this, out);
}

void BdamLayer::write(BdamLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_header_.write(context.getHeader(), out);
    m_surfaceGrids_.writePacked(*this, out);
}

void BdamLayer::ZserioArrayExpressions_surfaceGrids::initializeElement(BdamLayer& owner,
        ::nds::display::types::BdamSurfaceGrid& element, size_t)
{
    element.initialize(owner.getHeader());
}

void BdamLayer::ZserioElementFactory_surfaceGrids::create(BdamLayer&         owner,
        ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, owner.getHeader(), array.get_allocator());
}

void BdamLayer::ZserioElementFactory_surfaceGrids::create(BdamLayer&         owner,
        ::zserio::vector<::nds::display::types::BdamSurfaceGrid>& array,
        ::nds::display::types::BdamSurfaceGrid::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, owner.getHeader(), array.get_allocator());
}

::nds::display::types::BdamLayerHeader BdamLayer::readHeader(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::types::BdamLayerHeader(in, allocator);
}

::nds::display::types::BdamLayerHeader BdamLayer::readHeader(BdamLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::types::BdamLayerHeader(context.getHeader(), in, allocator);
}
BdamLayer::ZserioArrayType_surfaceGrids BdamLayer::readSurfaceGrids(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_surfaceGrids readField(allocator);
    readField.read(*this, in);

    return readField;
}

BdamLayer::ZserioArrayType_surfaceGrids BdamLayer::readSurfaceGrids(BdamLayer::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_surfaceGrids readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace layer
} // namespace display
} // namespace nds
