/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_LAYER_MESH3_DRENDER_LAYER_DATA_H
#define NDS_DISPLAY_LAYER_MESH3_DRENDER_LAYER_DATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/GeometryLayerType.h>
#include <nds/core/geometry/IndexBuffer.h>
#include <nds/core/geometry/PolyMesh3D.h>
#include <nds/display/instantiations/Mesh3dDisplayGeometryLayer.h>
#include <nds/display/types/ColorId.h>
#include <nds/display/types/Mesh3DRenderData.h>
#include <nds/display/types/Mesh3DRenderLayerHeader.h>
#include <nds/display/types/NormalSphere.h>
#include <nds/display/types/TextureCoords.h>

namespace nds
{
namespace display
{
namespace layer
{

class Mesh3DRenderLayerData
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::display::types::Mesh3DRenderLayerHeader::ZserioPackingContext& getHeader()
        {
            return m_header_;
        }

        ::nds::display::instantiations::Mesh3dDisplayGeometryLayer::ZserioPackingContext& getMesh3dDisplayGeometryLayer()
        {
            return m_mesh3dDisplayGeometryLayer_;
        }

        ::nds::core::geometry::IndexBuffer::ZserioPackingContext& getNormalIndices()
        {
            return m_normalIndices_;
        }

        ::nds::core::geometry::IndexBuffer::ZserioPackingContext& getTextureCoordsIndices()
        {
            return m_textureCoordsIndices_;
        }

        ::nds::core::geometry::IndexBuffer::ZserioPackingContext& getTextureCoordsAdditionalIndices()
        {
            return m_textureCoordsAdditionalIndices_;
        }

        ::nds::core::geometry::IndexBuffer::ZserioPackingContext& getColorIdIndices()
        {
            return m_colorIdIndices_;
        }

    private:
        ::nds::display::types::Mesh3DRenderLayerHeader::ZserioPackingContext m_header_;
        ::nds::display::instantiations::Mesh3dDisplayGeometryLayer::ZserioPackingContext m_mesh3dDisplayGeometryLayer_;
        ::nds::core::geometry::IndexBuffer::ZserioPackingContext m_normalIndices_;
        ::nds::core::geometry::IndexBuffer::ZserioPackingContext m_textureCoordsIndices_;
        ::nds::core::geometry::IndexBuffer::ZserioPackingContext m_textureCoordsAdditionalIndices_;
        ::nds::core::geometry::IndexBuffer::ZserioPackingContext m_colorIdIndices_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Mesh3DRenderLayerData() noexcept :
            Mesh3DRenderLayerData(allocator_type())
    {}

    explicit Mesh3DRenderLayerData(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_header = ::nds::display::types::Mesh3DRenderLayerHeader,
            typename ZSERIO_T_mesh3dDisplayGeometryLayer = ::nds::display::instantiations::Mesh3dDisplayGeometryLayer,
            typename ZSERIO_T_normals = ::zserio::vector<::nds::display::types::NormalSphere>,
            typename ZSERIO_T_textureCoordinates = ::zserio::vector<::nds::display::types::TextureCoords>,
            typename ZSERIO_T_textureCoordsAdditional = ::zserio::vector<::nds::display::types::TextureCoords>,
            typename ZSERIO_T_colorIds = ::zserio::vector<::nds::display::types::ColorId>,
            typename ZSERIO_T_normalIndices = ::nds::core::geometry::IndexBuffer,
            typename ZSERIO_T_textureCoordsIndices = ::nds::core::geometry::IndexBuffer,
            typename ZSERIO_T_textureCoordsAdditionalIndices = ::nds::core::geometry::IndexBuffer,
            typename ZSERIO_T_colorIdIndices = ::nds::core::geometry::IndexBuffer,
            typename ZSERIO_T_mesh3DRenderData = ::zserio::vector<::nds::display::types::Mesh3DRenderData>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_header, Mesh3DRenderLayerData, allocator_type> = 0>
    Mesh3DRenderLayerData(
            ZSERIO_T_header&& header_,
            ZSERIO_T_mesh3dDisplayGeometryLayer&& mesh3dDisplayGeometryLayer_,
            ZSERIO_T_normals&& normals_,
            ZSERIO_T_textureCoordinates&& textureCoordinates_,
            ZSERIO_T_textureCoordsAdditional&& textureCoordsAdditional_,
            ZSERIO_T_colorIds&& colorIds_,
            ZSERIO_T_normalIndices&& normalIndices_,
            ZSERIO_T_textureCoordsIndices&& textureCoordsIndices_,
            ZSERIO_T_textureCoordsAdditionalIndices&& textureCoordsAdditionalIndices_,
            ZSERIO_T_colorIdIndices&& colorIdIndices_,
            ZSERIO_T_mesh3DRenderData&& mesh3DRenderData_,
            const allocator_type& allocator = allocator_type()) :
            Mesh3DRenderLayerData(allocator)
    {
        m_header_ = ::std::forward<ZSERIO_T_header>(header_);
        m_mesh3dDisplayGeometryLayer_ = ::std::forward<ZSERIO_T_mesh3dDisplayGeometryLayer>(mesh3dDisplayGeometryLayer_);
        m_normals_ = ::zserio::createOptionalArray<ZserioArrayType_normals>(::std::forward<ZSERIO_T_normals>(normals_));
        m_textureCoordinates_ = ::zserio::createOptionalArray<ZserioArrayType_textureCoordinates>(::std::forward<ZSERIO_T_textureCoordinates>(textureCoordinates_));
        m_textureCoordsAdditional_ = ::zserio::createOptionalArray<ZserioArrayType_textureCoordsAdditional>(::std::forward<ZSERIO_T_textureCoordsAdditional>(textureCoordsAdditional_));
        m_colorIds_ = ::zserio::createOptionalArray<ZserioArrayType_colorIds>(::std::forward<ZSERIO_T_colorIds>(colorIds_));
        m_normalIndices_ = ::std::forward<ZSERIO_T_normalIndices>(normalIndices_);
        m_textureCoordsIndices_ = ::std::forward<ZSERIO_T_textureCoordsIndices>(textureCoordsIndices_);
        m_textureCoordsAdditionalIndices_ = ::std::forward<ZSERIO_T_textureCoordsAdditionalIndices>(textureCoordsAdditionalIndices_);
        m_colorIdIndices_ = ::std::forward<ZSERIO_T_colorIdIndices>(colorIdIndices_);
        m_mesh3DRenderData_ = ZserioArrayType_mesh3DRenderData(::std::forward<ZSERIO_T_mesh3DRenderData>(mesh3DRenderData_));
    }

    explicit Mesh3DRenderLayerData(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Mesh3DRenderLayerData(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Mesh3DRenderLayerData() = default;

    Mesh3DRenderLayerData(const Mesh3DRenderLayerData& other);
    Mesh3DRenderLayerData& operator=(const Mesh3DRenderLayerData& other);

    Mesh3DRenderLayerData(Mesh3DRenderLayerData&& other);
    Mesh3DRenderLayerData& operator=(Mesh3DRenderLayerData&& other);

    Mesh3DRenderLayerData(::zserio::PropagateAllocatorT,
            const Mesh3DRenderLayerData& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::display::types::Mesh3DRenderLayerHeader& getHeader() const;
    ::nds::display::types::Mesh3DRenderLayerHeader& getHeader();
    void setHeader(const ::nds::display::types::Mesh3DRenderLayerHeader& header_);
    void setHeader(::nds::display::types::Mesh3DRenderLayerHeader&& header_);

    const ::nds::display::instantiations::Mesh3dDisplayGeometryLayer& getMesh3dDisplayGeometryLayer() const;
    ::nds::display::instantiations::Mesh3dDisplayGeometryLayer& getMesh3dDisplayGeometryLayer();
    void setMesh3dDisplayGeometryLayer(const ::nds::display::instantiations::Mesh3dDisplayGeometryLayer& mesh3dDisplayGeometryLayer_);
    void setMesh3dDisplayGeometryLayer(::nds::display::instantiations::Mesh3dDisplayGeometryLayer&& mesh3dDisplayGeometryLayer_);

    const ::zserio::vector<::nds::display::types::NormalSphere>& getNormals() const;
    ::zserio::vector<::nds::display::types::NormalSphere>& getNormals();
    void setNormals(const ::zserio::vector<::nds::display::types::NormalSphere>& normals_);
    void setNormals(::zserio::vector<::nds::display::types::NormalSphere>&& normals_);
    bool isNormalsUsed() const;
    bool isNormalsSet() const;
    void resetNormals();

    const ::zserio::vector<::nds::display::types::TextureCoords>& getTextureCoordinates() const;
    ::zserio::vector<::nds::display::types::TextureCoords>& getTextureCoordinates();
    void setTextureCoordinates(const ::zserio::vector<::nds::display::types::TextureCoords>& textureCoordinates_);
    void setTextureCoordinates(::zserio::vector<::nds::display::types::TextureCoords>&& textureCoordinates_);
    bool isTextureCoordinatesUsed() const;
    bool isTextureCoordinatesSet() const;
    void resetTextureCoordinates();

    const ::zserio::vector<::nds::display::types::TextureCoords>& getTextureCoordsAdditional() const;
    ::zserio::vector<::nds::display::types::TextureCoords>& getTextureCoordsAdditional();
    void setTextureCoordsAdditional(const ::zserio::vector<::nds::display::types::TextureCoords>& textureCoordsAdditional_);
    void setTextureCoordsAdditional(::zserio::vector<::nds::display::types::TextureCoords>&& textureCoordsAdditional_);
    bool isTextureCoordsAdditionalUsed() const;
    bool isTextureCoordsAdditionalSet() const;
    void resetTextureCoordsAdditional();

    const ::zserio::vector<::nds::display::types::ColorId>& getColorIds() const;
    ::zserio::vector<::nds::display::types::ColorId>& getColorIds();
    void setColorIds(const ::zserio::vector<::nds::display::types::ColorId>& colorIds_);
    void setColorIds(::zserio::vector<::nds::display::types::ColorId>&& colorIds_);
    bool isColorIdsUsed() const;
    bool isColorIdsSet() const;
    void resetColorIds();

    const ::nds::core::geometry::IndexBuffer& getNormalIndices() const;
    ::nds::core::geometry::IndexBuffer& getNormalIndices();
    void setNormalIndices(const ::nds::core::geometry::IndexBuffer& normalIndices_);
    void setNormalIndices(::nds::core::geometry::IndexBuffer&& normalIndices_);
    bool isNormalIndicesUsed() const;
    bool isNormalIndicesSet() const;
    void resetNormalIndices();

    const ::nds::core::geometry::IndexBuffer& getTextureCoordsIndices() const;
    ::nds::core::geometry::IndexBuffer& getTextureCoordsIndices();
    void setTextureCoordsIndices(const ::nds::core::geometry::IndexBuffer& textureCoordsIndices_);
    void setTextureCoordsIndices(::nds::core::geometry::IndexBuffer&& textureCoordsIndices_);
    bool isTextureCoordsIndicesUsed() const;
    bool isTextureCoordsIndicesSet() const;
    void resetTextureCoordsIndices();

    const ::nds::core::geometry::IndexBuffer& getTextureCoordsAdditionalIndices() const;
    ::nds::core::geometry::IndexBuffer& getTextureCoordsAdditionalIndices();
    void setTextureCoordsAdditionalIndices(const ::nds::core::geometry::IndexBuffer& textureCoordsAdditionalIndices_);
    void setTextureCoordsAdditionalIndices(::nds::core::geometry::IndexBuffer&& textureCoordsAdditionalIndices_);
    bool isTextureCoordsAdditionalIndicesUsed() const;
    bool isTextureCoordsAdditionalIndicesSet() const;
    void resetTextureCoordsAdditionalIndices();

    const ::nds::core::geometry::IndexBuffer& getColorIdIndices() const;
    ::nds::core::geometry::IndexBuffer& getColorIdIndices();
    void setColorIdIndices(const ::nds::core::geometry::IndexBuffer& colorIdIndices_);
    void setColorIdIndices(::nds::core::geometry::IndexBuffer&& colorIdIndices_);
    bool isColorIdIndicesUsed() const;
    bool isColorIdIndicesSet() const;
    void resetColorIdIndices();

    const ::zserio::vector<::nds::display::types::Mesh3DRenderData>& getMesh3DRenderData() const;
    ::zserio::vector<::nds::display::types::Mesh3DRenderData>& getMesh3DRenderData();
    void setMesh3DRenderData(const ::zserio::vector<::nds::display::types::Mesh3DRenderData>& mesh3DRenderData_);
    void setMesh3DRenderData(::zserio::vector<::nds::display::types::Mesh3DRenderData>&& mesh3DRenderData_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Mesh3DRenderLayerData& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_normals
    {
    public:
        using OwnerType = Mesh3DRenderLayerData;

        static void create(Mesh3DRenderLayerData& owner,
                ::zserio::vector<::nds::display::types::NormalSphere>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Mesh3DRenderLayerData& owner,
                ::zserio::vector<::nds::display::types::NormalSphere>& array,
                ::nds::display::types::NormalSphere::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_textureCoordinates
    {
    public:
        using OwnerType = Mesh3DRenderLayerData;

        static void create(Mesh3DRenderLayerData& owner,
                ::zserio::vector<::nds::display::types::TextureCoords>& array,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_textureCoordsAdditional
    {
    public:
        using OwnerType = Mesh3DRenderLayerData;

        static void create(Mesh3DRenderLayerData& owner,
                ::zserio::vector<::nds::display::types::TextureCoords>& array,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_mesh3DRenderData
    {
    public:
        using OwnerType = Mesh3DRenderLayerData;

        static void initializeElement(Mesh3DRenderLayerData& owner,
                ::nds::display::types::Mesh3DRenderData& element, size_t index);
    };

    class ZserioElementFactory_mesh3DRenderData
    {
    public:
        using OwnerType = Mesh3DRenderLayerData;

        static void create(Mesh3DRenderLayerData& owner,
                ::zserio::vector<::nds::display::types::Mesh3DRenderData>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Mesh3DRenderLayerData& owner,
                ::zserio::vector<::nds::display::types::Mesh3DRenderData>& array,
                ::nds::display::types::Mesh3DRenderData::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_normals = ::zserio::Array<::zserio::vector<::nds::display::types::NormalSphere>, ::zserio::ObjectArrayTraits<::nds::display::types::NormalSphere, ZserioElementFactory_normals>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_textureCoordinates = ::zserio::Array<::zserio::vector<::nds::display::types::TextureCoords>, ::zserio::ObjectArrayTraits<::nds::display::types::TextureCoords, ZserioElementFactory_textureCoordinates>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_textureCoordsAdditional = ::zserio::Array<::zserio::vector<::nds::display::types::TextureCoords>, ::zserio::ObjectArrayTraits<::nds::display::types::TextureCoords, ZserioElementFactory_textureCoordsAdditional>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_colorIds = ::zserio::Array<::zserio::vector<::nds::display::types::ColorId>, ::zserio::VarIntNNArrayTraits<::nds::display::types::ColorId>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_mesh3DRenderData = ::zserio::Array<::zserio::vector<::nds::display::types::Mesh3DRenderData>, ::zserio::ObjectArrayTraits<::nds::display::types::Mesh3DRenderData, ZserioElementFactory_mesh3DRenderData>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_mesh3DRenderData>;

    ::nds::display::types::Mesh3DRenderLayerHeader readHeader(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::types::Mesh3DRenderLayerHeader readHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::display::instantiations::Mesh3dDisplayGeometryLayer readMesh3dDisplayGeometryLayer(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::instantiations::Mesh3dDisplayGeometryLayer readMesh3dDisplayGeometryLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_normals> readNormals(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_normals> readNormals(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordinates> readTextureCoordinates(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordsAdditional> readTextureCoordsAdditional(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_colorIds> readColorIds(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_colorIds> readColorIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> readNormalIndices(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> readNormalIndices(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> readTextureCoordsIndices(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> readTextureCoordsIndices(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> readTextureCoordsAdditionalIndices(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> readTextureCoordsAdditionalIndices(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> readColorIdIndices(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> readColorIdIndices(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_mesh3DRenderData readMesh3DRenderData(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_mesh3DRenderData readMesh3DRenderData(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::display::types::Mesh3DRenderLayerHeader m_header_;
    ::nds::display::instantiations::Mesh3dDisplayGeometryLayer m_mesh3dDisplayGeometryLayer_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_normals> m_normals_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordinates> m_textureCoordinates_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordsAdditional> m_textureCoordsAdditional_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_colorIds> m_colorIds_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> m_normalIndices_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> m_textureCoordsIndices_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> m_textureCoordsAdditionalIndices_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::IndexBuffer> m_colorIdIndices_;
    ZserioArrayType_mesh3DRenderData m_mesh3DRenderData_;
};

} // namespace layer
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_LAYER_MESH3_DRENDER_LAYER_DATA_H
