/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_LAYER_DISPLAY2_DLAYER_HEADER_H
#define NDS_DISPLAY_LAYER_DISPLAY2_DLAYER_HEADER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/types/ScaleDenominator.h>
#include <nds/display/metadata/Display2DContent.h>
#include <nds/display/types/SublevelScaleDenominator.h>

namespace nds
{
namespace display
{
namespace layer
{

class Display2DLayerHeader
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getMinScaleDenominator()
        {
            return m_minScaleDenominator_;
        }

        ::zserio::DeltaContext& getMaxScaleDenominator()
        {
            return m_maxScaleDenominator_;
        }

        ::zserio::DeltaContext& getNumSublevels()
        {
            return m_numSublevels_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::zserio::DeltaContext m_minScaleDenominator_;
        ::zserio::DeltaContext m_maxScaleDenominator_;
        ::zserio::DeltaContext m_numSublevels_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Display2DLayerHeader() noexcept :
            Display2DLayerHeader(allocator_type())
    {}

    explicit Display2DLayerHeader(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_numSublevels = uint8_t,
            typename ZSERIO_T_subscales = ::zserio::vector<::nds::display::types::SublevelScaleDenominator>>
    Display2DLayerHeader(
            ::nds::display::metadata::Display2DContent content_,
            bool hasClippingEdgeList_,
            bool hasScaleSublevels_,
            ::nds::core::types::ScaleDenominator minScaleDenominator_,
            ::nds::core::types::ScaleDenominator maxScaleDenominator_,
            ZSERIO_T_numSublevels&& numSublevels_,
            ZSERIO_T_subscales&& subscales_,
            const allocator_type& allocator = allocator_type()) :
            Display2DLayerHeader(allocator)
    {
        m_content_ = content_;
        m_hasClippingEdgeList_ = hasClippingEdgeList_;
        m_hasScaleSublevels_ = hasScaleSublevels_;
        m_minScaleDenominator_ = minScaleDenominator_;
        m_maxScaleDenominator_ = maxScaleDenominator_;
        m_numSublevels_ = ::std::forward<ZSERIO_T_numSublevels>(numSublevels_);
        m_subscales_ = ::zserio::createOptionalArray<ZserioArrayType_subscales>(::std::forward<ZSERIO_T_subscales>(subscales_));
    }

    explicit Display2DLayerHeader(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Display2DLayerHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Display2DLayerHeader() = default;

    Display2DLayerHeader(const Display2DLayerHeader&) = default;
    Display2DLayerHeader& operator=(const Display2DLayerHeader&) = default;

    Display2DLayerHeader(Display2DLayerHeader&&) = default;
    Display2DLayerHeader& operator=(Display2DLayerHeader&&) = default;

    Display2DLayerHeader(::zserio::PropagateAllocatorT,
            const Display2DLayerHeader& other, const allocator_type& allocator);

    ::nds::display::metadata::Display2DContent getContent() const;
    void setContent(::nds::display::metadata::Display2DContent content_);

    bool getHasClippingEdgeList() const;
    void setHasClippingEdgeList(bool hasClippingEdgeList_);

    bool getHasScaleSublevels() const;
    void setHasScaleSublevels(bool hasScaleSublevels_);

    ::nds::core::types::ScaleDenominator getMinScaleDenominator() const;
    void setMinScaleDenominator(::nds::core::types::ScaleDenominator minScaleDenominator_);

    ::nds::core::types::ScaleDenominator getMaxScaleDenominator() const;
    void setMaxScaleDenominator(::nds::core::types::ScaleDenominator maxScaleDenominator_);

    uint8_t getNumSublevels() const;
    void setNumSublevels(uint8_t numSublevels_);
    bool isNumSublevelsUsed() const;
    bool isNumSublevelsSet() const;
    void resetNumSublevels();

    const ::zserio::vector<::nds::display::types::SublevelScaleDenominator>& getSubscales() const;
    ::zserio::vector<::nds::display::types::SublevelScaleDenominator>& getSubscales();
    void setSubscales(const ::zserio::vector<::nds::display::types::SublevelScaleDenominator>& subscales_);
    void setSubscales(::zserio::vector<::nds::display::types::SublevelScaleDenominator>&& subscales_);
    bool isSubscalesUsed() const;
    bool isSubscalesSet() const;
    void resetSubscales();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Display2DLayerHeader& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_subscales = ::zserio::Array<::zserio::vector<::nds::display::types::SublevelScaleDenominator>, ::zserio::StdIntArrayTraits<::nds::display::types::SublevelScaleDenominator>, ::zserio::ArrayType::NORMAL>;

    ::nds::display::metadata::Display2DContent readContent(::zserio::BitStreamReader& in);
    ::nds::display::metadata::Display2DContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasClippingEdgeList(::zserio::BitStreamReader& in);
    bool readHasScaleSublevels(::zserio::BitStreamReader& in);
    ::nds::core::types::ScaleDenominator readMinScaleDenominator(::zserio::BitStreamReader& in);
    ::nds::core::types::ScaleDenominator readMinScaleDenominator(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::ScaleDenominator readMaxScaleDenominator(::zserio::BitStreamReader& in);
    ::nds::core::types::ScaleDenominator readMaxScaleDenominator(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readNumSublevels(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readNumSublevels(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_subscales> readSubscales(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_subscales> readSubscales(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::metadata::Display2DContent m_content_;
    bool m_hasClippingEdgeList_;
    bool m_hasScaleSublevels_;
    ::nds::core::types::ScaleDenominator m_minScaleDenominator_;
    ::nds::core::types::ScaleDenominator m_maxScaleDenominator_;
    ::zserio::InplaceOptionalHolder<uint8_t> m_numSublevels_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_subscales> m_subscales_;
};

} // namespace layer
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_LAYER_DISPLAY2_DLAYER_HEADER_H
