/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_LAYER_DISPLAY3_DSTYLE_LAYER_H
#define NDS_DISPLAY_LAYER_DISPLAY3_DSTYLE_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/display/metadata/Display3DStyleLayerContent.h>
#include <nds/display/types/Style3DColor.h>
#include <nds/display/types/Texture.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

class Display3DStyleLayer
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Display3DStyleLayer() noexcept :
            Display3DStyleLayer(allocator_type())
    {}

    explicit Display3DStyleLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_content = ::nds::display::metadata::Display3DStyleLayerContent,
            typename ZSERIO_T_textures = ::zserio::vector<::nds::display::types::Texture>,
            typename ZSERIO_T_colors = ::zserio::vector<::nds::display::types::Style3DColor>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_content, Display3DStyleLayer, allocator_type> = 0>
    Display3DStyleLayer(
            ZSERIO_T_content&& content_,
            ZSERIO_T_textures&& textures_,
            ZSERIO_T_colors&& colors_,
            const allocator_type& allocator = allocator_type()) :
            Display3DStyleLayer(allocator)
    {
        m_content_ = ::std::forward<ZSERIO_T_content>(content_);
        m_textures_ = ::zserio::createOptionalArray<ZserioArrayType_textures>(::std::forward<ZSERIO_T_textures>(textures_));
        m_colors_ = ::zserio::createOptionalArray<ZserioArrayType_colors>(::std::forward<ZSERIO_T_colors>(colors_));
    }

    explicit Display3DStyleLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Display3DStyleLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Display3DStyleLayer() = default;

    Display3DStyleLayer(const Display3DStyleLayer&) = default;
    Display3DStyleLayer& operator=(const Display3DStyleLayer&) = default;

    Display3DStyleLayer(Display3DStyleLayer&&) = default;
    Display3DStyleLayer& operator=(Display3DStyleLayer&&) = default;

    Display3DStyleLayer(::zserio::PropagateAllocatorT,
            const Display3DStyleLayer& other, const allocator_type& allocator);

    const ::nds::display::metadata::Display3DStyleLayerContent& getContent() const;
    ::nds::display::metadata::Display3DStyleLayerContent& getContent();
    void setContent(const ::nds::display::metadata::Display3DStyleLayerContent& content_);
    void setContent(::nds::display::metadata::Display3DStyleLayerContent&& content_);

    const ::zserio::vector<::nds::display::types::Texture>& getTextures() const;
    ::zserio::vector<::nds::display::types::Texture>& getTextures();
    void setTextures(const ::zserio::vector<::nds::display::types::Texture>& textures_);
    void setTextures(::zserio::vector<::nds::display::types::Texture>&& textures_);
    bool isTexturesUsed() const;
    bool isTexturesSet() const;
    void resetTextures();

    const ::zserio::vector<::nds::display::types::Style3DColor>& getColors() const;
    ::zserio::vector<::nds::display::types::Style3DColor>& getColors();
    void setColors(const ::zserio::vector<::nds::display::types::Style3DColor>& colors_);
    void setColors(::zserio::vector<::nds::display::types::Style3DColor>&& colors_);
    bool isColorsUsed() const;
    bool isColorsSet() const;
    void resetColors();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Display3DStyleLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_textures
    {
    public:
        using OwnerType = Display3DStyleLayer;

        static void create(Display3DStyleLayer& owner,
                ::zserio::vector<::nds::display::types::Texture>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Display3DStyleLayer& owner,
                ::zserio::vector<::nds::display::types::Texture>& array,
                ::nds::display::types::Texture::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_colors
    {
    public:
        using OwnerType = Display3DStyleLayer;

        static void create(Display3DStyleLayer& owner,
                ::zserio::vector<::nds::display::types::Style3DColor>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Display3DStyleLayer& owner,
                ::zserio::vector<::nds::display::types::Style3DColor>& array,
                ::nds::display::types::Style3DColor::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_textures = ::zserio::Array<::zserio::vector<::nds::display::types::Texture>, ::zserio::ObjectArrayTraits<::nds::display::types::Texture, ZserioElementFactory_textures>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_colors = ::zserio::Array<::zserio::vector<::nds::display::types::Style3DColor>, ::zserio::ObjectArrayTraits<::nds::display::types::Style3DColor, ZserioElementFactory_colors>, ::zserio::ArrayType::AUTO>;

    ::nds::display::metadata::Display3DStyleLayerContent readContent(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textures> readTextures(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textures> readTextures(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_colors> readColors(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_colors> readColors(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::metadata::Display3DStyleLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textures> m_textures_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_colors> m_colors_;
};

} // namespace layer
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_LAYER_DISPLAY3_DSTYLE_LAYER_H
