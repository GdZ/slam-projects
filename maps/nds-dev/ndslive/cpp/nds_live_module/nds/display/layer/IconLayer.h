/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_LAYER_ICON_LAYER_H
#define NDS_DISPLAY_LAYER_ICON_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/icons/IconImage.h>
#include <nds/core/icons/IconSet.h>
#include <nds/core/icons/IconTemplateSet.h>
#include <nds/display/metadata/IconLayerContent.h>
#include <nds/display/types/GenericIconSetMap.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace layer
{

class IconLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

    private:
        ::zserio::DeltaContext m_content_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    IconLayer() noexcept :
            IconLayer(allocator_type())
    {}

    explicit IconLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_icons = ::zserio::vector<::nds::core::icons::IconImage>,
            typename ZSERIO_T_genericIconSets = ::zserio::vector<::nds::core::icons::IconSet>,
            typename ZSERIO_T_genericIconSetMap = ::zserio::vector<::nds::display::types::GenericIconSetMap>,
            typename ZSERIO_T_referencedIconSets = ::zserio::vector<::nds::core::icons::IconSet>,
            typename ZSERIO_T_iconTemplateSets = ::zserio::vector<::nds::core::icons::IconTemplateSet>>
    IconLayer(
            ::nds::display::metadata::IconLayerContent content_,
            ZSERIO_T_icons&& icons_,
            ZSERIO_T_genericIconSets&& genericIconSets_,
            ZSERIO_T_genericIconSetMap&& genericIconSetMap_,
            ZSERIO_T_referencedIconSets&& referencedIconSets_,
            ZSERIO_T_iconTemplateSets&& iconTemplateSets_,
            const allocator_type& allocator = allocator_type()) :
            IconLayer(allocator)
    {
        m_content_ = content_;
        m_icons_ = ZserioArrayType_icons(::std::forward<ZSERIO_T_icons>(icons_));
        m_genericIconSets_ = ::zserio::createOptionalArray<ZserioArrayType_genericIconSets>(::std::forward<ZSERIO_T_genericIconSets>(genericIconSets_));
        m_genericIconSetMap_ = ::zserio::createOptionalArray<ZserioArrayType_genericIconSetMap>(::std::forward<ZSERIO_T_genericIconSetMap>(genericIconSetMap_));
        m_referencedIconSets_ = ::zserio::createOptionalArray<ZserioArrayType_referencedIconSets>(::std::forward<ZSERIO_T_referencedIconSets>(referencedIconSets_));
        m_iconTemplateSets_ = ::zserio::createOptionalArray<ZserioArrayType_iconTemplateSets>(::std::forward<ZSERIO_T_iconTemplateSets>(iconTemplateSets_));
    }

    explicit IconLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit IconLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~IconLayer() = default;

    IconLayer(const IconLayer&) = default;
    IconLayer& operator=(const IconLayer&) = default;

    IconLayer(IconLayer&&) = default;
    IconLayer& operator=(IconLayer&&) = default;

    IconLayer(::zserio::PropagateAllocatorT,
            const IconLayer& other, const allocator_type& allocator);

    ::nds::display::metadata::IconLayerContent getContent() const;
    void setContent(::nds::display::metadata::IconLayerContent content_);

    const ::zserio::vector<::nds::core::icons::IconImage>& getIcons() const;
    ::zserio::vector<::nds::core::icons::IconImage>& getIcons();
    void setIcons(const ::zserio::vector<::nds::core::icons::IconImage>& icons_);
    void setIcons(::zserio::vector<::nds::core::icons::IconImage>&& icons_);

    const ::zserio::vector<::nds::core::icons::IconSet>& getGenericIconSets() const;
    ::zserio::vector<::nds::core::icons::IconSet>& getGenericIconSets();
    void setGenericIconSets(const ::zserio::vector<::nds::core::icons::IconSet>& genericIconSets_);
    void setGenericIconSets(::zserio::vector<::nds::core::icons::IconSet>&& genericIconSets_);
    bool isGenericIconSetsUsed() const;
    bool isGenericIconSetsSet() const;
    void resetGenericIconSets();

    const ::zserio::vector<::nds::display::types::GenericIconSetMap>& getGenericIconSetMap() const;
    ::zserio::vector<::nds::display::types::GenericIconSetMap>& getGenericIconSetMap();
    void setGenericIconSetMap(const ::zserio::vector<::nds::display::types::GenericIconSetMap>& genericIconSetMap_);
    void setGenericIconSetMap(::zserio::vector<::nds::display::types::GenericIconSetMap>&& genericIconSetMap_);
    bool isGenericIconSetMapUsed() const;
    bool isGenericIconSetMapSet() const;
    void resetGenericIconSetMap();

    const ::zserio::vector<::nds::core::icons::IconSet>& getReferencedIconSets() const;
    ::zserio::vector<::nds::core::icons::IconSet>& getReferencedIconSets();
    void setReferencedIconSets(const ::zserio::vector<::nds::core::icons::IconSet>& referencedIconSets_);
    void setReferencedIconSets(::zserio::vector<::nds::core::icons::IconSet>&& referencedIconSets_);
    bool isReferencedIconSetsUsed() const;
    bool isReferencedIconSetsSet() const;
    void resetReferencedIconSets();

    const ::zserio::vector<::nds::core::icons::IconTemplateSet>& getIconTemplateSets() const;
    ::zserio::vector<::nds::core::icons::IconTemplateSet>& getIconTemplateSets();
    void setIconTemplateSets(const ::zserio::vector<::nds::core::icons::IconTemplateSet>& iconTemplateSets_);
    void setIconTemplateSets(::zserio::vector<::nds::core::icons::IconTemplateSet>&& iconTemplateSets_);
    bool isIconTemplateSetsUsed() const;
    bool isIconTemplateSetsSet() const;
    void resetIconTemplateSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const IconLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_icons
    {
    public:
        using OwnerType = IconLayer;

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::core::icons::IconImage>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::core::icons::IconImage>& array,
                ::nds::core::icons::IconImage::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_genericIconSets
    {
    public:
        using OwnerType = IconLayer;

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::core::icons::IconSet>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::core::icons::IconSet>& array,
                ::nds::core::icons::IconSet::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_genericIconSetMap
    {
    public:
        using OwnerType = IconLayer;

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::display::types::GenericIconSetMap>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::display::types::GenericIconSetMap>& array,
                ::nds::display::types::GenericIconSetMap::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_referencedIconSets
    {
    public:
        using OwnerType = IconLayer;

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::core::icons::IconSet>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::core::icons::IconSet>& array,
                ::nds::core::icons::IconSet::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_iconTemplateSets
    {
    public:
        using OwnerType = IconLayer;

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::core::icons::IconTemplateSet>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(IconLayer& owner,
                ::zserio::vector<::nds::core::icons::IconTemplateSet>& array,
                ::nds::core::icons::IconTemplateSet::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_icons = ::zserio::Array<::zserio::vector<::nds::core::icons::IconImage>, ::zserio::ObjectArrayTraits<::nds::core::icons::IconImage, ZserioElementFactory_icons>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_genericIconSets = ::zserio::Array<::zserio::vector<::nds::core::icons::IconSet>, ::zserio::ObjectArrayTraits<::nds::core::icons::IconSet, ZserioElementFactory_genericIconSets>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_genericIconSetMap = ::zserio::Array<::zserio::vector<::nds::display::types::GenericIconSetMap>, ::zserio::ObjectArrayTraits<::nds::display::types::GenericIconSetMap, ZserioElementFactory_genericIconSetMap>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_referencedIconSets = ::zserio::Array<::zserio::vector<::nds::core::icons::IconSet>, ::zserio::ObjectArrayTraits<::nds::core::icons::IconSet, ZserioElementFactory_referencedIconSets>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_iconTemplateSets = ::zserio::Array<::zserio::vector<::nds::core::icons::IconTemplateSet>, ::zserio::ObjectArrayTraits<::nds::core::icons::IconTemplateSet, ZserioElementFactory_iconTemplateSets>, ::zserio::ArrayType::AUTO>;

    ::nds::display::metadata::IconLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::display::metadata::IconLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_icons readIcons(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_icons readIcons(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSets> readGenericIconSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSets> readGenericIconSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSetMap> readGenericIconSetMap(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSetMap> readGenericIconSetMap(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_referencedIconSets> readReferencedIconSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_referencedIconSets> readReferencedIconSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_iconTemplateSets> readIconTemplateSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_iconTemplateSets> readIconTemplateSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::metadata::IconLayerContent m_content_;
    ZserioArrayType_icons m_icons_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSets> m_genericIconSets_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_genericIconSetMap> m_genericIconSetMap_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_referencedIconSets> m_referencedIconSets_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_iconTemplateSets> m_iconTemplateSets_;
};

} // namespace layer
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_LAYER_ICON_LAYER_H
