/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_GENERIC_ICON_SET_MAP_ELEMENT_H
#define NDS_DISPLAY_TYPES_GENERIC_ICON_SET_MAP_ELEMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/icons/IconSetId.h>
#include <nds/system/types/ModuleExtern.h>

namespace nds
{
namespace display
{
namespace types
{

class GenericIconSetMapElement
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

        ::zserio::DeltaContext& getTargetEnumValue()
        {
            return m_targetEnumValue_;
        }

    private:
        ::zserio::DeltaContext m_id_;
        ::zserio::DeltaContext m_targetEnumValue_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    GenericIconSetMapElement() noexcept :
            GenericIconSetMapElement(allocator_type())
    {}

    explicit GenericIconSetMapElement(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_descriptor = ::nds::system::types::ModuleExtern,
            typename ZSERIO_T_targetEnumValue = int64_t>
    GenericIconSetMapElement(
            ::nds::core::icons::IconSetId id_,
            ZSERIO_T_descriptor&& descriptor_,
            ZSERIO_T_targetEnumValue&& targetEnumValue_,
            const allocator_type& allocator = allocator_type()) :
            GenericIconSetMapElement(allocator)
    {
        m_id_ = id_;
        m_descriptor_ = ::std::forward<ZSERIO_T_descriptor>(descriptor_);
        m_targetEnumValue_ = ::std::forward<ZSERIO_T_targetEnumValue>(targetEnumValue_);
    }

    explicit GenericIconSetMapElement(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit GenericIconSetMapElement(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~GenericIconSetMapElement() = default;

    GenericIconSetMapElement(const GenericIconSetMapElement&) = default;
    GenericIconSetMapElement& operator=(const GenericIconSetMapElement&) = default;

    GenericIconSetMapElement(GenericIconSetMapElement&&) = default;
    GenericIconSetMapElement& operator=(GenericIconSetMapElement&&) = default;

    GenericIconSetMapElement(::zserio::PropagateAllocatorT,
            const GenericIconSetMapElement& other, const allocator_type& allocator);

    ::nds::core::icons::IconSetId getId() const;
    void setId(::nds::core::icons::IconSetId id_);

    const ::nds::system::types::ModuleExtern& getDescriptor() const;
    ::nds::system::types::ModuleExtern& getDescriptor();
    void setDescriptor(const ::nds::system::types::ModuleExtern& descriptor_);
    void setDescriptor(::nds::system::types::ModuleExtern&& descriptor_);

    int64_t getTargetEnumValue() const;
    void setTargetEnumValue(int64_t targetEnumValue_);
    bool isTargetEnumValueUsed() const;
    bool isTargetEnumValueSet() const;
    void resetTargetEnumValue();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const GenericIconSetMapElement& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::icons::IconSetId readId(::zserio::BitStreamReader& in);
    ::nds::core::icons::IconSetId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::system::types::ModuleExtern readDescriptor(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<int64_t> readTargetEnumValue(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int64_t> readTargetEnumValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::icons::IconSetId m_id_;
    ::nds::system::types::ModuleExtern m_descriptor_;
    ::zserio::InplaceOptionalHolder<int64_t> m_targetEnumValue_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_GENERIC_ICON_SET_MAP_ELEMENT_H
