/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_BDAM_SURFACE_GRID_H
#define NDS_DISPLAY_TYPES_BDAM_SURFACE_GRID_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Position2D.h>
#include <nds/core/grid/NumGridCells.h>
#include <nds/display/types/BdamLayerHeader.h>
#include <nds/display/types/BdamSurface.h>
#include <nds/display/types/SpaceError.h>
#include <nds/display/types/SurfaceGridCellSize.h>
#include <nds/display/types/VertexGridCellSize.h>

namespace nds
{
namespace display
{
namespace types
{

class BdamSurfaceGrid
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::geometry::Position2D::ZserioPackingContext& getSouthWestCorner()
        {
            return m_southWestCorner_;
        }

        ::zserio::DeltaContext& getSurfaceGridCellSize()
        {
            return m_surfaceGridCellSize_;
        }

        ::zserio::DeltaContext& getNumRows()
        {
            return m_numRows_;
        }

        ::zserio::DeltaContext& getNumColumns()
        {
            return m_numColumns_;
        }

        ::zserio::DeltaContext& getLongSideErrorL1()
        {
            return m_longSideErrorL1_;
        }

        ::zserio::DeltaContext& getShortSideErrorL1()
        {
            return m_shortSideErrorL1_;
        }

        ::zserio::DeltaContext& getShortSideErrorL2()
        {
            return m_shortSideErrorL2_;
        }

        ::zserio::DeltaContext& getVertexGridCellSize()
        {
            return m_vertexGridCellSize_;
        }

    private:
        ::nds::core::geometry::Position2D::ZserioPackingContext m_southWestCorner_;
        ::zserio::DeltaContext m_surfaceGridCellSize_;
        ::zserio::DeltaContext m_numRows_;
        ::zserio::DeltaContext m_numColumns_;
        ::zserio::DeltaContext m_longSideErrorL1_;
        ::zserio::DeltaContext m_shortSideErrorL1_;
        ::zserio::DeltaContext m_shortSideErrorL2_;
        ::zserio::DeltaContext m_vertexGridCellSize_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    BdamSurfaceGrid() noexcept :
            BdamSurfaceGrid(allocator_type())
    {}

    explicit BdamSurfaceGrid(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_southWestCorner = ::nds::core::geometry::Position2D,
            typename ZSERIO_T_surfaces = ::zserio::vector<::nds::display::types::BdamSurface>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_southWestCorner, BdamSurfaceGrid, allocator_type> = 0>
    BdamSurfaceGrid(
            ZSERIO_T_southWestCorner&& southWestCorner_,
            ::nds::display::types::SurfaceGridCellSize surfaceGridCellSize_,
            ::nds::core::grid::NumGridCells numRows_,
            ::nds::core::grid::NumGridCells numColumns_,
            ::nds::display::types::SpaceError longSideErrorL1_,
            ::nds::display::types::SpaceError shortSideErrorL1_,
            ::nds::display::types::SpaceError shortSideErrorL2_,
            ::nds::display::types::VertexGridCellSize vertexGridCellSize_,
            ZSERIO_T_surfaces&& surfaces_,
            const allocator_type& allocator = allocator_type()) :
            BdamSurfaceGrid(allocator)
    {
        m_southWestCorner_ = ::std::forward<ZSERIO_T_southWestCorner>(southWestCorner_);
        m_surfaceGridCellSize_ = surfaceGridCellSize_;
        m_numRows_ = numRows_;
        m_numColumns_ = numColumns_;
        m_longSideErrorL1_ = longSideErrorL1_;
        m_shortSideErrorL1_ = shortSideErrorL1_;
        m_shortSideErrorL2_ = shortSideErrorL2_;
        m_vertexGridCellSize_ = vertexGridCellSize_;
        m_surfaces_ = ZserioArrayType_surfaces(::std::forward<ZSERIO_T_surfaces>(surfaces_));
    }

    explicit BdamSurfaceGrid(::zserio::BitStreamReader& in,
            ::nds::display::types::BdamLayerHeader& header_, const allocator_type& allocator = allocator_type());
    explicit BdamSurfaceGrid(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::display::types::BdamLayerHeader& header_, const allocator_type& allocator = allocator_type());

    ~BdamSurfaceGrid() = default;

    BdamSurfaceGrid(const BdamSurfaceGrid& other);
    BdamSurfaceGrid& operator=(const BdamSurfaceGrid& other);

    BdamSurfaceGrid(BdamSurfaceGrid&& other);
    BdamSurfaceGrid& operator=(BdamSurfaceGrid&& other);

    BdamSurfaceGrid(::zserio::PropagateAllocatorT,
            const BdamSurfaceGrid& other, const allocator_type& allocator);

    void initialize(
            ::nds::display::types::BdamLayerHeader& header_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::display::types::BdamLayerHeader& getHeader();
    const ::nds::display::types::BdamLayerHeader& getHeader() const;

    const ::nds::core::geometry::Position2D& getSouthWestCorner() const;
    ::nds::core::geometry::Position2D& getSouthWestCorner();
    void setSouthWestCorner(const ::nds::core::geometry::Position2D& southWestCorner_);
    void setSouthWestCorner(::nds::core::geometry::Position2D&& southWestCorner_);

    ::nds::display::types::SurfaceGridCellSize getSurfaceGridCellSize() const;
    void setSurfaceGridCellSize(::nds::display::types::SurfaceGridCellSize surfaceGridCellSize_);

    ::nds::core::grid::NumGridCells getNumRows() const;
    void setNumRows(::nds::core::grid::NumGridCells numRows_);

    ::nds::core::grid::NumGridCells getNumColumns() const;
    void setNumColumns(::nds::core::grid::NumGridCells numColumns_);

    ::nds::display::types::SpaceError getLongSideErrorL1() const;
    void setLongSideErrorL1(::nds::display::types::SpaceError longSideErrorL1_);

    ::nds::display::types::SpaceError getShortSideErrorL1() const;
    void setShortSideErrorL1(::nds::display::types::SpaceError shortSideErrorL1_);

    ::nds::display::types::SpaceError getShortSideErrorL2() const;
    void setShortSideErrorL2(::nds::display::types::SpaceError shortSideErrorL2_);

    ::nds::display::types::VertexGridCellSize getVertexGridCellSize() const;
    void setVertexGridCellSize(::nds::display::types::VertexGridCellSize vertexGridCellSize_);

    const ::zserio::vector<::nds::display::types::BdamSurface>& getSurfaces() const;
    ::zserio::vector<::nds::display::types::BdamSurface>& getSurfaces();
    void setSurfaces(const ::zserio::vector<::nds::display::types::BdamSurface>& surfaces_);
    void setSurfaces(::zserio::vector<::nds::display::types::BdamSurface>&& surfaces_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const BdamSurfaceGrid& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_surfaces
    {
    public:
        using OwnerType = BdamSurfaceGrid;

        static void initializeElement(BdamSurfaceGrid& owner,
                ::nds::display::types::BdamSurface& element, size_t index);
    };

    class ZserioElementFactory_surfaces
    {
    public:
        using OwnerType = BdamSurfaceGrid;

        static void create(BdamSurfaceGrid& owner,
                ::zserio::vector<::nds::display::types::BdamSurface>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(BdamSurfaceGrid& owner,
                ::zserio::vector<::nds::display::types::BdamSurface>& array,
                ::nds::display::types::BdamSurface::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_surfaces = ::zserio::Array<::zserio::vector<::nds::display::types::BdamSurface>, ::zserio::ObjectArrayTraits<::nds::display::types::BdamSurface, ZserioElementFactory_surfaces>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_surfaces>;

    ::nds::core::geometry::Position2D readSouthWestCorner(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Position2D readSouthWestCorner(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::display::types::SurfaceGridCellSize readSurfaceGridCellSize(::zserio::BitStreamReader& in);
    ::nds::display::types::SurfaceGridCellSize readSurfaceGridCellSize(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::grid::NumGridCells readNumRows(::zserio::BitStreamReader& in);
    ::nds::core::grid::NumGridCells readNumRows(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::grid::NumGridCells readNumColumns(::zserio::BitStreamReader& in);
    ::nds::core::grid::NumGridCells readNumColumns(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::display::types::SpaceError readLongSideErrorL1(::zserio::BitStreamReader& in);
    ::nds::display::types::SpaceError readLongSideErrorL1(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::display::types::SpaceError readShortSideErrorL1(::zserio::BitStreamReader& in);
    ::nds::display::types::SpaceError readShortSideErrorL1(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::display::types::SpaceError readShortSideErrorL2(::zserio::BitStreamReader& in);
    ::nds::display::types::SpaceError readShortSideErrorL2(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::display::types::VertexGridCellSize readVertexGridCellSize(::zserio::BitStreamReader& in);
    ::nds::display::types::VertexGridCellSize readVertexGridCellSize(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_surfaces readSurfaces(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_surfaces readSurfaces(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::types::BdamLayerHeader* m_header_;
    bool m_isInitialized;
    ::nds::core::geometry::Position2D m_southWestCorner_;
    ::nds::display::types::SurfaceGridCellSize m_surfaceGridCellSize_;
    ::nds::core::grid::NumGridCells m_numRows_;
    ::nds::core::grid::NumGridCells m_numColumns_;
    ::nds::display::types::SpaceError m_longSideErrorL1_;
    ::nds::display::types::SpaceError m_shortSideErrorL1_;
    ::nds::display::types::SpaceError m_shortSideErrorL2_;
    ::nds::display::types::VertexGridCellSize m_vertexGridCellSize_;
    ZserioArrayType_surfaces m_surfaces_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_BDAM_SURFACE_GRID_H
