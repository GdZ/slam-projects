/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_GENERIC_ICON_SET_MAP_H
#define NDS_DISPLAY_TYPES_GENERIC_ICON_SET_MAP_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/display/types/GenericIconSetMapElement.h>
#include <nds/system/types/ModuleName.h>
#include <nds/system/types/ModuleVersion.h>

namespace nds
{
namespace display
{
namespace types
{

class GenericIconSetMap
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumElements()
        {
            return m_numElements_;
        }

    private:
        ::zserio::DeltaContext m_numElements_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    GenericIconSetMap() noexcept :
            GenericIconSetMap(allocator_type())
    {}

    explicit GenericIconSetMap(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_moduleName = ::nds::system::types::ModuleName,
            typename ZSERIO_T_moduleVersion = ::nds::system::types::ModuleVersion,
            typename ZSERIO_T_elements = ::zserio::vector<::nds::display::types::GenericIconSetMapElement>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_moduleName, GenericIconSetMap, allocator_type> = 0>
    GenericIconSetMap(
            ZSERIO_T_moduleName&& moduleName_,
            ZSERIO_T_moduleVersion&& moduleVersion_,
            uint32_t numElements_,
            ZSERIO_T_elements&& elements_,
            const allocator_type& allocator = allocator_type()) :
            GenericIconSetMap(allocator)
    {
        m_moduleName_ = ::std::forward<ZSERIO_T_moduleName>(moduleName_);
        m_moduleVersion_ = ::std::forward<ZSERIO_T_moduleVersion>(moduleVersion_);
        m_numElements_ = numElements_;
        m_elements_ = ZserioArrayType_elements(::std::forward<ZSERIO_T_elements>(elements_));
    }

    explicit GenericIconSetMap(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit GenericIconSetMap(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~GenericIconSetMap() = default;

    GenericIconSetMap(const GenericIconSetMap&) = default;
    GenericIconSetMap& operator=(const GenericIconSetMap&) = default;

    GenericIconSetMap(GenericIconSetMap&&) = default;
    GenericIconSetMap& operator=(GenericIconSetMap&&) = default;

    GenericIconSetMap(::zserio::PropagateAllocatorT,
            const GenericIconSetMap& other, const allocator_type& allocator);

    const ::nds::system::types::ModuleName& getModuleName() const;
    ::nds::system::types::ModuleName& getModuleName();
    void setModuleName(const ::nds::system::types::ModuleName& moduleName_);
    void setModuleName(::nds::system::types::ModuleName&& moduleName_);

    const ::nds::system::types::ModuleVersion& getModuleVersion() const;
    ::nds::system::types::ModuleVersion& getModuleVersion();
    void setModuleVersion(const ::nds::system::types::ModuleVersion& moduleVersion_);
    void setModuleVersion(::nds::system::types::ModuleVersion&& moduleVersion_);

    uint32_t getNumElements() const;
    void setNumElements(uint32_t numElements_);

    const ::zserio::vector<::nds::display::types::GenericIconSetMapElement>& getElements() const;
    ::zserio::vector<::nds::display::types::GenericIconSetMapElement>& getElements();
    void setElements(const ::zserio::vector<::nds::display::types::GenericIconSetMapElement>& elements_);
    void setElements(::zserio::vector<::nds::display::types::GenericIconSetMapElement>&& elements_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const GenericIconSetMap& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_elements
    {
    public:
        using OwnerType = GenericIconSetMap;

        static void create(GenericIconSetMap& owner,
                ::zserio::vector<::nds::display::types::GenericIconSetMapElement>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(GenericIconSetMap& owner,
                ::zserio::vector<::nds::display::types::GenericIconSetMapElement>& array,
                ::nds::display::types::GenericIconSetMapElement::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_elements = ::zserio::Array<::zserio::vector<::nds::display::types::GenericIconSetMapElement>, ::zserio::ObjectArrayTraits<::nds::display::types::GenericIconSetMapElement, ZserioElementFactory_elements>, ::zserio::ArrayType::NORMAL>;

    ::nds::system::types::ModuleName readModuleName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::ModuleVersion readModuleVersion(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    uint32_t readNumElements(::zserio::BitStreamReader& in);
    uint32_t readNumElements(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_elements readElements(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_elements readElements(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::system::types::ModuleName m_moduleName_;
    ::nds::system::types::ModuleVersion m_moduleVersion_;
    uint32_t m_numElements_;
    ZserioArrayType_elements m_elements_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_GENERIC_ICON_SET_MAP_H
