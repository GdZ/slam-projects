/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_TEXTURE_DATA_H
#define NDS_DISPLAY_TYPES_TEXTURE_DATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>

#include <nds/display/types/TextureSectionArray.h>

namespace nds
{
namespace display
{
namespace types
{

class TextureData
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::display::types::TextureSectionArray::ZserioPackingContext& getTextureSectionArray()
        {
            return m_TextureSectionArray_;
        }

    private:
        ::nds::display::types::TextureSectionArray::ZserioPackingContext m_TextureSectionArray_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TextureData() noexcept :
            TextureData(allocator_type())
    {}

    explicit TextureData(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_textureData = ::zserio::BitBuffer,
            typename ZSERIO_T_TextureSectionArray = ::nds::display::types::TextureSectionArray,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_textureData, TextureData, allocator_type> = 0>
    TextureData(
            ZSERIO_T_textureData&& textureData_,
            ZSERIO_T_TextureSectionArray&& TextureSectionArray_,
            const allocator_type& allocator = allocator_type()) :
            TextureData(allocator)
    {
        m_textureData_ = ::std::forward<ZSERIO_T_textureData>(textureData_);
        m_TextureSectionArray_ = ::std::forward<ZSERIO_T_TextureSectionArray>(TextureSectionArray_);
    }

    explicit TextureData(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TextureData(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TextureData() = default;

    TextureData(const TextureData&) = default;
    TextureData& operator=(const TextureData&) = default;

    TextureData(TextureData&&) = default;
    TextureData& operator=(TextureData&&) = default;

    TextureData(::zserio::PropagateAllocatorT,
            const TextureData& other, const allocator_type& allocator);

    const ::zserio::BitBuffer& getTextureData() const;
    ::zserio::BitBuffer& getTextureData();
    void setTextureData(const ::zserio::BitBuffer& textureData_);
    void setTextureData(::zserio::BitBuffer&& textureData_);

    const ::nds::display::types::TextureSectionArray& getTextureSectionArray() const;
    ::nds::display::types::TextureSectionArray& getTextureSectionArray();
    void setTextureSectionArray(const ::nds::display::types::TextureSectionArray& TextureSectionArray_);
    void setTextureSectionArray(::nds::display::types::TextureSectionArray&& TextureSectionArray_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TextureData& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::BitBuffer readTextureData(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::types::TextureSectionArray readTextureSectionArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::types::TextureSectionArray readTextureSectionArray(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::zserio::BitBuffer m_textureData_;
    ::nds::display::types::TextureSectionArray m_TextureSectionArray_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_TEXTURE_DATA_H
