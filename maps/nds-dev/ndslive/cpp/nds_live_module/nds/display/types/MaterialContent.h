/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_MATERIAL_CONTENT_H
#define NDS_DISPLAY_TYPES_MATERIAL_CONTENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/types/TextureCoordsUsageType.h>

namespace nds
{
namespace display
{
namespace types
{

class MaterialContent
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getTextureCoordUsageType()
        {
            return m_textureCoordUsageType_;
        }

    private:
        ::zserio::DeltaContext m_textureCoordUsageType_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    MaterialContent() noexcept :
            MaterialContent(allocator_type())
    {}

    explicit MaterialContent(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_textureCoordUsageType = ::nds::display::types::TextureCoordsUsageType>
    MaterialContent(
            bool hasAmbientAndDiffuseColor_,
            bool hasSpecularAndShininessColor_,
            bool isTransparent_,
            bool isLightEmitting_,
            bool usesTextures_,
            ZSERIO_T_textureCoordUsageType&& textureCoordUsageType_,
            const allocator_type& allocator = allocator_type()) :
            MaterialContent(allocator)
    {
        m_hasAmbientAndDiffuseColor_ = hasAmbientAndDiffuseColor_;
        m_hasSpecularAndShininessColor_ = hasSpecularAndShininessColor_;
        m_isTransparent_ = isTransparent_;
        m_isLightEmitting_ = isLightEmitting_;
        m_usesTextures_ = usesTextures_;
        m_textureCoordUsageType_ = ::std::forward<ZSERIO_T_textureCoordUsageType>(textureCoordUsageType_);
    }

    explicit MaterialContent(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit MaterialContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~MaterialContent() = default;

    MaterialContent(const MaterialContent&) = default;
    MaterialContent& operator=(const MaterialContent&) = default;

    MaterialContent(MaterialContent&&) = default;
    MaterialContent& operator=(MaterialContent&&) = default;

    MaterialContent(::zserio::PropagateAllocatorT,
            const MaterialContent& other, const allocator_type& allocator);

    bool getHasAmbientAndDiffuseColor() const;
    void setHasAmbientAndDiffuseColor(bool hasAmbientAndDiffuseColor_);

    bool getHasSpecularAndShininessColor() const;
    void setHasSpecularAndShininessColor(bool hasSpecularAndShininessColor_);

    bool getIsTransparent() const;
    void setIsTransparent(bool isTransparent_);

    bool getIsLightEmitting() const;
    void setIsLightEmitting(bool isLightEmitting_);

    bool getUsesTextures() const;
    void setUsesTextures(bool usesTextures_);

    ::nds::display::types::TextureCoordsUsageType getTextureCoordUsageType() const;
    void setTextureCoordUsageType(::nds::display::types::TextureCoordsUsageType textureCoordUsageType_);
    bool isTextureCoordUsageTypeUsed() const;
    bool isTextureCoordUsageTypeSet() const;
    void resetTextureCoordUsageType();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const MaterialContent& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    bool readHasAmbientAndDiffuseColor(::zserio::BitStreamReader& in);
    bool readHasSpecularAndShininessColor(::zserio::BitStreamReader& in);
    bool readIsTransparent(::zserio::BitStreamReader& in);
    bool readIsLightEmitting(::zserio::BitStreamReader& in);
    bool readUsesTextures(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::TextureCoordsUsageType> readTextureCoordUsageType(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::TextureCoordsUsageType> readTextureCoordUsageType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    bool m_hasAmbientAndDiffuseColor_;
    bool m_hasSpecularAndShininessColor_;
    bool m_isTransparent_;
    bool m_isLightEmitting_;
    bool m_usesTextures_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::TextureCoordsUsageType> m_textureCoordUsageType_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_MATERIAL_CONTENT_H
