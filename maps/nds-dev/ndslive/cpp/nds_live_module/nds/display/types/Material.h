/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_MATERIAL_H
#define NDS_DISPLAY_TYPES_MATERIAL_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/display/reference/types/TextureReference.h>
#include <nds/display/types/ColorId.h>
#include <nds/display/types/MaterialContent.h>

namespace nds
{
namespace display
{
namespace types
{

class Material
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::display::types::MaterialContent::ZserioPackingContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getAmbient()
        {
            return m_ambient_;
        }

        ::zserio::DeltaContext& getDiffuse()
        {
            return m_diffuse_;
        }

        ::zserio::DeltaContext& getSpecular()
        {
            return m_specular_;
        }

        ::zserio::DeltaContext& getShininess()
        {
            return m_shininess_;
        }

        ::nds::display::reference::types::TextureReference::ZserioPackingContext& getTexture()
        {
            return m_texture_;
        }

    private:
        ::nds::display::types::MaterialContent::ZserioPackingContext m_content_;
        ::zserio::DeltaContext m_ambient_;
        ::zserio::DeltaContext m_diffuse_;
        ::zserio::DeltaContext m_specular_;
        ::zserio::DeltaContext m_shininess_;
        ::nds::display::reference::types::TextureReference::ZserioPackingContext m_texture_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Material() noexcept :
            Material(allocator_type())
    {}

    explicit Material(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_content = ::nds::display::types::MaterialContent,
            typename ZSERIO_T_ambient = ::nds::display::types::ColorId,
            typename ZSERIO_T_diffuse = ::nds::display::types::ColorId,
            typename ZSERIO_T_specular = ::nds::display::types::ColorId,
            typename ZSERIO_T_shininess = uint8_t,
            typename ZSERIO_T_texture = ::nds::display::reference::types::TextureReference,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_content, Material, allocator_type> = 0>
    Material(
            ZSERIO_T_content&& content_,
            ZSERIO_T_ambient&& ambient_,
            ZSERIO_T_diffuse&& diffuse_,
            ZSERIO_T_specular&& specular_,
            ZSERIO_T_shininess&& shininess_,
            ZSERIO_T_texture&& texture_,
            const allocator_type& allocator = allocator_type()) :
            Material(allocator)
    {
        m_content_ = ::std::forward<ZSERIO_T_content>(content_);
        m_ambient_ = ::std::forward<ZSERIO_T_ambient>(ambient_);
        m_diffuse_ = ::std::forward<ZSERIO_T_diffuse>(diffuse_);
        m_specular_ = ::std::forward<ZSERIO_T_specular>(specular_);
        m_shininess_ = ::std::forward<ZSERIO_T_shininess>(shininess_);
        m_texture_ = ::std::forward<ZSERIO_T_texture>(texture_);
    }

    explicit Material(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Material(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Material() = default;

    Material(const Material&) = default;
    Material& operator=(const Material&) = default;

    Material(Material&&) = default;
    Material& operator=(Material&&) = default;

    Material(::zserio::PropagateAllocatorT,
            const Material& other, const allocator_type& allocator);

    const ::nds::display::types::MaterialContent& getContent() const;
    ::nds::display::types::MaterialContent& getContent();
    void setContent(const ::nds::display::types::MaterialContent& content_);
    void setContent(::nds::display::types::MaterialContent&& content_);

    ::nds::display::types::ColorId getAmbient() const;
    void setAmbient(::nds::display::types::ColorId ambient_);
    bool isAmbientUsed() const;
    bool isAmbientSet() const;
    void resetAmbient();

    ::nds::display::types::ColorId getDiffuse() const;
    void setDiffuse(::nds::display::types::ColorId diffuse_);
    bool isDiffuseUsed() const;
    bool isDiffuseSet() const;
    void resetDiffuse();

    ::nds::display::types::ColorId getSpecular() const;
    void setSpecular(::nds::display::types::ColorId specular_);
    bool isSpecularUsed() const;
    bool isSpecularSet() const;
    void resetSpecular();

    uint8_t getShininess() const;
    void setShininess(uint8_t shininess_);
    bool isShininessUsed() const;
    bool isShininessSet() const;
    void resetShininess();

    const ::nds::display::reference::types::TextureReference& getTexture() const;
    ::nds::display::reference::types::TextureReference& getTexture();
    void setTexture(const ::nds::display::reference::types::TextureReference& texture_);
    void setTexture(::nds::display::reference::types::TextureReference&& texture_);
    bool isTextureUsed() const;
    bool isTextureSet() const;
    void resetTexture();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Material& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::display::types::MaterialContent readContent(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::types::MaterialContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> readAmbient(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> readAmbient(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> readDiffuse(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> readDiffuse(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> readSpecular(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> readSpecular(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readShininess(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readShininess(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::TextureReference> readTexture(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::TextureReference> readTexture(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::types::MaterialContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> m_ambient_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> m_diffuse_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> m_specular_;
    ::zserio::InplaceOptionalHolder<uint8_t> m_shininess_;
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::TextureReference> m_texture_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_MATERIAL_H
