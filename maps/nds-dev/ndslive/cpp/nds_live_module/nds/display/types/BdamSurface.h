/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_BDAM_SURFACE_H
#define NDS_DISPLAY_TYPES_BDAM_SURFACE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Position3D.h>
#include <nds/display/types/BdamLayerHeader.h>
#include <nds/display/types/BdamSurfaceTin.h>
#include <nds/display/types/NormalSphere.h>
#include <nds/display/types/RegularGridVertex.h>
#include <nds/display/types/SurfaceGridCellSize.h>
#include <nds/display/types/TextureCoords.h>
#include <nds/display/types/VertexGridCellSize.h>

namespace nds
{
namespace display
{
namespace types
{

class BdamSurface
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    BdamSurface() noexcept :
            BdamSurface(allocator_type())
    {}

    explicit BdamSurface(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_regularVertexGrid = ::zserio::vector<::nds::display::types::RegularGridVertex>,
            typename ZSERIO_T_vertices = ::zserio::vector<::nds::core::geometry::Position3D>,
            typename ZSERIO_T_normals = ::zserio::vector<::nds::display::types::NormalSphere>,
            typename ZSERIO_T_textureCoordinates = ::zserio::vector<::nds::display::types::TextureCoords>,
            typename ZSERIO_T_surfaceTins = ::zserio::vector<::nds::display::types::BdamSurfaceTin>>
    BdamSurface(
            bool hasRegularVertexGrid_,
            ZSERIO_T_regularVertexGrid&& regularVertexGrid_,
            ZSERIO_T_vertices&& vertices_,
            ZSERIO_T_normals&& normals_,
            ZSERIO_T_textureCoordinates&& textureCoordinates_,
            ZSERIO_T_surfaceTins&& surfaceTins_,
            const allocator_type& allocator = allocator_type()) :
            BdamSurface(allocator)
    {
        m_hasRegularVertexGrid_ = hasRegularVertexGrid_;
        m_regularVertexGrid_ = ::zserio::createOptionalArray<ZserioArrayType_regularVertexGrid>(::std::forward<ZSERIO_T_regularVertexGrid>(regularVertexGrid_));
        m_vertices_ = ZserioArrayType_vertices(::std::forward<ZSERIO_T_vertices>(vertices_));
        m_normals_ = ZserioArrayType_normals(::std::forward<ZSERIO_T_normals>(normals_));
        m_textureCoordinates_ = ::zserio::createOptionalArray<ZserioArrayType_textureCoordinates>(::std::forward<ZSERIO_T_textureCoordinates>(textureCoordinates_));
        m_surfaceTins_ = ZserioArrayType_surfaceTins(::std::forward<ZSERIO_T_surfaceTins>(surfaceTins_));
    }

    explicit BdamSurface(::zserio::BitStreamReader& in,
            ::nds::display::types::BdamLayerHeader& header_,
            ::nds::display::types::SurfaceGridCellSize surfaceCellSize_,
            ::nds::display::types::VertexGridCellSize vertexCellSize_, const allocator_type& allocator = allocator_type());
    explicit BdamSurface(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::display::types::BdamLayerHeader& header_,
            ::nds::display::types::SurfaceGridCellSize surfaceCellSize_,
            ::nds::display::types::VertexGridCellSize vertexCellSize_, const allocator_type& allocator = allocator_type());

    ~BdamSurface() = default;

    BdamSurface(const BdamSurface& other);
    BdamSurface& operator=(const BdamSurface& other);

    BdamSurface(BdamSurface&& other);
    BdamSurface& operator=(BdamSurface&& other);

    BdamSurface(::zserio::PropagateAllocatorT,
            const BdamSurface& other, const allocator_type& allocator);

    void initialize(
            ::nds::display::types::BdamLayerHeader& header_,
            ::nds::display::types::SurfaceGridCellSize surfaceCellSize_,
            ::nds::display::types::VertexGridCellSize vertexCellSize_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::display::types::BdamLayerHeader& getHeader();
    const ::nds::display::types::BdamLayerHeader& getHeader() const;

    ::nds::display::types::SurfaceGridCellSize getSurfaceCellSize() const;

    ::nds::display::types::VertexGridCellSize getVertexCellSize() const;

    bool getHasRegularVertexGrid() const;
    void setHasRegularVertexGrid(bool hasRegularVertexGrid_);

    const ::zserio::vector<::nds::display::types::RegularGridVertex>& getRegularVertexGrid() const;
    ::zserio::vector<::nds::display::types::RegularGridVertex>& getRegularVertexGrid();
    void setRegularVertexGrid(const ::zserio::vector<::nds::display::types::RegularGridVertex>& regularVertexGrid_);
    void setRegularVertexGrid(::zserio::vector<::nds::display::types::RegularGridVertex>&& regularVertexGrid_);
    bool isRegularVertexGridUsed() const;
    bool isRegularVertexGridSet() const;
    void resetRegularVertexGrid();

    const ::zserio::vector<::nds::core::geometry::Position3D>& getVertices() const;
    ::zserio::vector<::nds::core::geometry::Position3D>& getVertices();
    void setVertices(const ::zserio::vector<::nds::core::geometry::Position3D>& vertices_);
    void setVertices(::zserio::vector<::nds::core::geometry::Position3D>&& vertices_);

    const ::zserio::vector<::nds::display::types::NormalSphere>& getNormals() const;
    ::zserio::vector<::nds::display::types::NormalSphere>& getNormals();
    void setNormals(const ::zserio::vector<::nds::display::types::NormalSphere>& normals_);
    void setNormals(::zserio::vector<::nds::display::types::NormalSphere>&& normals_);

    const ::zserio::vector<::nds::display::types::TextureCoords>& getTextureCoordinates() const;
    ::zserio::vector<::nds::display::types::TextureCoords>& getTextureCoordinates();
    void setTextureCoordinates(const ::zserio::vector<::nds::display::types::TextureCoords>& textureCoordinates_);
    void setTextureCoordinates(::zserio::vector<::nds::display::types::TextureCoords>&& textureCoordinates_);
    bool isTextureCoordinatesUsed() const;
    bool isTextureCoordinatesSet() const;
    void resetTextureCoordinates();

    const ::zserio::vector<::nds::display::types::BdamSurfaceTin>& getSurfaceTins() const;
    ::zserio::vector<::nds::display::types::BdamSurfaceTin>& getSurfaceTins();
    void setSurfaceTins(const ::zserio::vector<::nds::display::types::BdamSurfaceTin>& surfaceTins_);
    void setSurfaceTins(::zserio::vector<::nds::display::types::BdamSurfaceTin>&& surfaceTins_);

    uint32_t funcNumGridVertices() const;

    uint32_t funcNumVertices() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const BdamSurface& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_regularVertexGrid
    {
    public:
        using OwnerType = BdamSurface;

        static void initializeElement(BdamSurface& owner,
                ::nds::display::types::RegularGridVertex& element, size_t index);
    };

    class ZserioElementFactory_regularVertexGrid
    {
    public:
        using OwnerType = BdamSurface;

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::display::types::RegularGridVertex>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::display::types::RegularGridVertex>& array,
                ::nds::display::types::RegularGridVertex::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_vertices
    {
    public:
        using OwnerType = BdamSurface;

        static void initializeElement(BdamSurface& owner,
                ::nds::core::geometry::Position3D& element, size_t index);
    };

    class ZserioElementFactory_vertices
    {
    public:
        using OwnerType = BdamSurface;

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::core::geometry::Position3D>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::core::geometry::Position3D>& array,
                ::nds::core::geometry::Position3D::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_normals
    {
    public:
        using OwnerType = BdamSurface;

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::display::types::NormalSphere>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::display::types::NormalSphere>& array,
                ::nds::display::types::NormalSphere::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_textureCoordinates
    {
    public:
        using OwnerType = BdamSurface;

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::display::types::TextureCoords>& array,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_surfaceTins
    {
    public:
        using OwnerType = BdamSurface;

        static void initializeElement(BdamSurface& owner,
                ::nds::display::types::BdamSurfaceTin& element, size_t index);
    };

    class ZserioElementFactory_surfaceTins
    {
    public:
        using OwnerType = BdamSurface;

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::display::types::BdamSurfaceTin>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(BdamSurface& owner,
                ::zserio::vector<::nds::display::types::BdamSurfaceTin>& array,
                ::nds::display::types::BdamSurfaceTin::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_regularVertexGrid = ::zserio::Array<::zserio::vector<::nds::display::types::RegularGridVertex>, ::zserio::ObjectArrayTraits<::nds::display::types::RegularGridVertex, ZserioElementFactory_regularVertexGrid>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_regularVertexGrid>;
    using ZserioArrayType_vertices = ::zserio::Array<::zserio::vector<::nds::core::geometry::Position3D>, ::zserio::ObjectArrayTraits<::nds::core::geometry::Position3D, ZserioElementFactory_vertices>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_vertices>;
    using ZserioArrayType_normals = ::zserio::Array<::zserio::vector<::nds::display::types::NormalSphere>, ::zserio::ObjectArrayTraits<::nds::display::types::NormalSphere, ZserioElementFactory_normals>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_textureCoordinates = ::zserio::Array<::zserio::vector<::nds::display::types::TextureCoords>, ::zserio::ObjectArrayTraits<::nds::display::types::TextureCoords, ZserioElementFactory_textureCoordinates>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_surfaceTins = ::zserio::Array<::zserio::vector<::nds::display::types::BdamSurfaceTin>, ::zserio::ObjectArrayTraits<::nds::display::types::BdamSurfaceTin, ZserioElementFactory_surfaceTins>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_surfaceTins>;

    bool readHasRegularVertexGrid(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_regularVertexGrid> readRegularVertexGrid(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_regularVertexGrid> readRegularVertexGrid(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_vertices readVertices(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_vertices readVertices(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_normals readNormals(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_normals readNormals(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordinates> readTextureCoordinates(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_surfaceTins readSurfaceTins(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_surfaceTins readSurfaceTins(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::types::BdamLayerHeader* m_header_;
    ::nds::display::types::SurfaceGridCellSize m_surfaceCellSize_;
    ::nds::display::types::VertexGridCellSize m_vertexCellSize_;
    bool m_isInitialized;
    bool m_hasRegularVertexGrid_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_regularVertexGrid> m_regularVertexGrid_;
    ZserioArrayType_vertices m_vertices_;
    ZserioArrayType_normals m_normals_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_textureCoordinates> m_textureCoordinates_;
    ZserioArrayType_surfaceTins m_surfaceTins_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_BDAM_SURFACE_H
