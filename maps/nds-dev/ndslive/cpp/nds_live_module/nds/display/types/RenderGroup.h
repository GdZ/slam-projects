/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_RENDER_GROUP_H
#define NDS_DISPLAY_TYPES_RENDER_GROUP_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/PolyMesh3D.h>
#include <nds/display/types/ColorId.h>
#include <nds/display/types/Material.h>
#include <nds/display/types/Mesh3DRenderConfiguration.h>
#include <nds/display/types/RenderGroupTriangleStrip.h>
#include <nds/display/types/RenderGroupTriangles.h>

namespace nds
{
namespace display
{
namespace types
{

class RenderGroup
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getColorId()
        {
            return m_colorId_;
        }

        ::nds::display::types::RenderGroupTriangleStrip::ZserioPackingContext& getTriangleStrip()
        {
            return m_triangleStrip_;
        }

        ::nds::display::types::RenderGroupTriangles::ZserioPackingContext& getTriangles()
        {
            return m_triangles_;
        }

        ::nds::display::types::Material::ZserioPackingContext& getMaterial()
        {
            return m_material_;
        }

        ::nds::display::types::Material::ZserioPackingContext& getMaterialAdditional()
        {
            return m_materialAdditional_;
        }

    private:
        ::zserio::DeltaContext m_colorId_;
        ::nds::display::types::RenderGroupTriangleStrip::ZserioPackingContext m_triangleStrip_;
        ::nds::display::types::RenderGroupTriangles::ZserioPackingContext m_triangles_;
        ::nds::display::types::Material::ZserioPackingContext m_material_;
        ::nds::display::types::Material::ZserioPackingContext m_materialAdditional_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RenderGroup() noexcept :
            RenderGroup(allocator_type())
    {}

    explicit RenderGroup(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_colorId = ::nds::display::types::ColorId,
            typename ZSERIO_T_triangleStrip = ::nds::display::types::RenderGroupTriangleStrip,
            typename ZSERIO_T_triangles = ::nds::display::types::RenderGroupTriangles,
            typename ZSERIO_T_material = ::nds::display::types::Material,
            typename ZSERIO_T_materialAdditional = ::nds::display::types::Material,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_colorId, RenderGroup, allocator_type> = 0>
    RenderGroup(
            ZSERIO_T_colorId&& colorId_,
            ZSERIO_T_triangleStrip&& triangleStrip_,
            ZSERIO_T_triangles&& triangles_,
            ZSERIO_T_material&& material_,
            ZSERIO_T_materialAdditional&& materialAdditional_,
            const allocator_type& allocator = allocator_type()) :
            RenderGroup(allocator)
    {
        m_colorId_ = ::std::forward<ZSERIO_T_colorId>(colorId_);
        m_triangleStrip_ = ::std::forward<ZSERIO_T_triangleStrip>(triangleStrip_);
        m_triangles_ = ::std::forward<ZSERIO_T_triangles>(triangles_);
        m_material_ = ::std::forward<ZSERIO_T_material>(material_);
        m_materialAdditional_ = ::std::forward<ZSERIO_T_materialAdditional>(materialAdditional_);
    }

    explicit RenderGroup(::zserio::BitStreamReader& in,
            ::nds::core::geometry::PolyMesh3D& mesh_,
            ::nds::display::types::Mesh3DRenderConfiguration& config_, const allocator_type& allocator = allocator_type());
    explicit RenderGroup(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::PolyMesh3D& mesh_,
            ::nds::display::types::Mesh3DRenderConfiguration& config_, const allocator_type& allocator = allocator_type());

    ~RenderGroup() = default;

    RenderGroup(const RenderGroup& other);
    RenderGroup& operator=(const RenderGroup& other);

    RenderGroup(RenderGroup&& other);
    RenderGroup& operator=(RenderGroup&& other);

    RenderGroup(::zserio::PropagateAllocatorT,
            const RenderGroup& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::PolyMesh3D& mesh_,
            ::nds::display::types::Mesh3DRenderConfiguration& config_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::PolyMesh3D& getMesh();
    const ::nds::core::geometry::PolyMesh3D& getMesh() const;

    ::nds::display::types::Mesh3DRenderConfiguration& getConfig();
    const ::nds::display::types::Mesh3DRenderConfiguration& getConfig() const;

    ::nds::display::types::ColorId getColorId() const;
    void setColorId(::nds::display::types::ColorId colorId_);
    bool isColorIdUsed() const;
    bool isColorIdSet() const;
    void resetColorId();

    const ::nds::display::types::RenderGroupTriangleStrip& getTriangleStrip() const;
    ::nds::display::types::RenderGroupTriangleStrip& getTriangleStrip();
    void setTriangleStrip(const ::nds::display::types::RenderGroupTriangleStrip& triangleStrip_);
    void setTriangleStrip(::nds::display::types::RenderGroupTriangleStrip&& triangleStrip_);
    bool isTriangleStripUsed() const;
    bool isTriangleStripSet() const;
    void resetTriangleStrip();

    const ::nds::display::types::RenderGroupTriangles& getTriangles() const;
    ::nds::display::types::RenderGroupTriangles& getTriangles();
    void setTriangles(const ::nds::display::types::RenderGroupTriangles& triangles_);
    void setTriangles(::nds::display::types::RenderGroupTriangles&& triangles_);
    bool isTrianglesUsed() const;
    bool isTrianglesSet() const;
    void resetTriangles();

    const ::nds::display::types::Material& getMaterial() const;
    ::nds::display::types::Material& getMaterial();
    void setMaterial(const ::nds::display::types::Material& material_);
    void setMaterial(::nds::display::types::Material&& material_);
    bool isMaterialUsed() const;
    bool isMaterialSet() const;
    void resetMaterial();

    const ::nds::display::types::Material& getMaterialAdditional() const;
    ::nds::display::types::Material& getMaterialAdditional();
    void setMaterialAdditional(const ::nds::display::types::Material& materialAdditional_);
    void setMaterialAdditional(::nds::display::types::Material&& materialAdditional_);
    bool isMaterialAdditionalUsed() const;
    bool isMaterialAdditionalSet() const;
    void resetMaterialAdditional();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RenderGroup& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> readColorId(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> readColorId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::types::RenderGroupTriangleStrip> readTriangleStrip(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::RenderGroupTriangleStrip> readTriangleStrip(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::RenderGroupTriangles> readTriangles(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::RenderGroupTriangles> readTriangles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> readMaterial(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> readMaterial(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> readMaterialAdditional(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> readMaterialAdditional(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::PolyMesh3D* m_mesh_;
    ::nds::display::types::Mesh3DRenderConfiguration* m_config_;
    bool m_isInitialized;
    ::zserio::InplaceOptionalHolder<::nds::display::types::ColorId> m_colorId_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::RenderGroupTriangleStrip> m_triangleStrip_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::RenderGroupTriangles> m_triangles_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> m_material_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> m_materialAdditional_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_RENDER_GROUP_H
