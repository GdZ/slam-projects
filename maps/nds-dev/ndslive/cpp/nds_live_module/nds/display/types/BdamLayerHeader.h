/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_BDAM_LAYER_HEADER_H
#define NDS_DISPLAY_TYPES_BDAM_LAYER_HEADER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>

namespace nds
{
namespace display
{
namespace types
{

class BdamLayerHeader
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getShiftXY()
        {
            return m_shiftXY_;
        }

        ::zserio::DeltaContext& getShiftZ()
        {
            return m_shiftZ_;
        }

    private:
        ::zserio::DeltaContext m_shiftXY_;
        ::zserio::DeltaContext m_shiftZ_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    BdamLayerHeader() noexcept :
            BdamLayerHeader(allocator_type())
    {}

    explicit BdamLayerHeader(const allocator_type& allocator) noexcept;

    BdamLayerHeader(
            ::nds::core::geometry::CoordShift shiftXY_,
            ::nds::core::geometry::CoordShift shiftZ_,
            bool hasTexture_,
            const allocator_type& allocator = allocator_type()) :
            BdamLayerHeader(allocator)
    {
        m_shiftXY_ = shiftXY_;
        m_shiftZ_ = shiftZ_;
        m_hasTexture_ = hasTexture_;
    }

    explicit BdamLayerHeader(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit BdamLayerHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~BdamLayerHeader() = default;

    BdamLayerHeader(const BdamLayerHeader&) = default;
    BdamLayerHeader& operator=(const BdamLayerHeader&) = default;

    BdamLayerHeader(BdamLayerHeader&&) = default;
    BdamLayerHeader& operator=(BdamLayerHeader&&) = default;

    BdamLayerHeader(::zserio::PropagateAllocatorT,
            const BdamLayerHeader& other, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift getShiftXY() const;
    void setShiftXY(::nds::core::geometry::CoordShift shiftXY_);

    ::nds::core::geometry::CoordShift getShiftZ() const;
    void setShiftZ(::nds::core::geometry::CoordShift shiftZ_);

    bool getHasTexture() const;
    void setHasTexture(bool hasTexture_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const BdamLayerHeader& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::CoordShift readShiftXY(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShiftXY(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShiftZ(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShiftZ(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasTexture(::zserio::BitStreamReader& in);

    ::nds::core::geometry::CoordShift m_shiftXY_;
    ::nds::core::geometry::CoordShift m_shiftZ_;
    bool m_hasTexture_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_BDAM_LAYER_HEADER_H
