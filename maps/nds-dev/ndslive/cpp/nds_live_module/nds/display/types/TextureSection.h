/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_TEXTURE_SECTION_H
#define NDS_DISPLAY_TYPES_TEXTURE_SECTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace display
{
namespace types
{

class TextureSection
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getTop()
        {
            return m_top_;
        }

        ::zserio::DeltaContext& getLeft()
        {
            return m_left_;
        }

        ::zserio::DeltaContext& getHeight()
        {
            return m_height_;
        }

        ::zserio::DeltaContext& getWidth()
        {
            return m_width_;
        }

    private:
        ::zserio::DeltaContext m_top_;
        ::zserio::DeltaContext m_left_;
        ::zserio::DeltaContext m_height_;
        ::zserio::DeltaContext m_width_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TextureSection() noexcept :
            TextureSection(allocator_type())
    {}

    explicit TextureSection(const allocator_type& allocator) noexcept;

    TextureSection(
            uint16_t top_,
            uint16_t left_,
            uint16_t height_,
            uint16_t width_,
            const allocator_type& allocator = allocator_type()) :
            TextureSection(allocator)
    {
        m_top_ = top_;
        m_left_ = left_;
        m_height_ = height_;
        m_width_ = width_;
    }

    explicit TextureSection(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TextureSection(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TextureSection() = default;

    TextureSection(const TextureSection&) = default;
    TextureSection& operator=(const TextureSection&) = default;

    TextureSection(TextureSection&&) = default;
    TextureSection& operator=(TextureSection&&) = default;

    TextureSection(::zserio::PropagateAllocatorT,
            const TextureSection& other, const allocator_type& allocator);

    uint16_t getTop() const;
    void setTop(uint16_t top_);

    uint16_t getLeft() const;
    void setLeft(uint16_t left_);

    uint16_t getHeight() const;
    void setHeight(uint16_t height_);

    uint16_t getWidth() const;
    void setWidth(uint16_t width_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TextureSection& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    uint16_t readTop(::zserio::BitStreamReader& in);
    uint16_t readTop(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint16_t readLeft(::zserio::BitStreamReader& in);
    uint16_t readLeft(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint16_t readHeight(::zserio::BitStreamReader& in);
    uint16_t readHeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint16_t readWidth(::zserio::BitStreamReader& in);
    uint16_t readWidth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    uint16_t m_top_;
    uint16_t m_left_;
    uint16_t m_height_;
    uint16_t m_width_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_TEXTURE_SECTION_H
