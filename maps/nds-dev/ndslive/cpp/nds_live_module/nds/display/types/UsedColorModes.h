/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_USED_COLOR_MODES_H
#define NDS_DISPLAY_TYPES_USED_COLOR_MODES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace display
{
namespace types
{

class UsedColorModes
{
public:
    using underlying_type = uint8_t;

    enum class Values : underlying_type
    {
        COLOR_PER_RENDER_GROUP = UINT8_C(1),
        COLOR_PER_VERTEX = UINT8_C(2)
    };

    constexpr UsedColorModes() noexcept :
            m_value(0)
    {}

    explicit UsedColorModes(::zserio::BitStreamReader& in);
    UsedColorModes(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);
    constexpr UsedColorModes(Values value) noexcept :
            m_value(static_cast<underlying_type>(value))
    {}

    explicit UsedColorModes(underlying_type value);

    ~UsedColorModes() = default;

    UsedColorModes(const UsedColorModes&) = default;
    UsedColorModes& operator=(const UsedColorModes&) = default;

    UsedColorModes(UsedColorModes&&) = default;
    UsedColorModes& operator=(UsedColorModes&&) = default;

    constexpr explicit operator underlying_type() const
    {
        return m_value;
    }

    constexpr underlying_type getValue() const
    {
        return m_value;
    }

    void initPackingContext(::zserio::DeltaContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::DeltaContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0) const;
    size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const;

    ::zserio::string<> toString(const ::zserio::string<>::allocator_type& allocator =
            ::zserio::string<>::allocator_type()) const;

private:
    static underlying_type readValue(::zserio::BitStreamReader& in);
    static underlying_type readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

    underlying_type m_value;
};

inline bool operator==(const UsedColorModes& lhs, const UsedColorModes& rhs)
{
    return lhs.getValue() == rhs.getValue();
}

inline bool operator!=(const UsedColorModes& lhs, const UsedColorModes& rhs)
{
    return lhs.getValue() != rhs.getValue();
}

inline UsedColorModes operator|(UsedColorModes::Values lhs, UsedColorModes::Values rhs)
{
    return UsedColorModes(static_cast<UsedColorModes::underlying_type>(lhs) | static_cast<UsedColorModes::underlying_type>(rhs));
}

inline UsedColorModes operator|(const UsedColorModes& lhs, const UsedColorModes& rhs)
{
    return UsedColorModes(lhs.getValue() | rhs.getValue());
}

inline UsedColorModes operator&(UsedColorModes::Values lhs, UsedColorModes::Values rhs)
{
    return UsedColorModes(static_cast<UsedColorModes::underlying_type>(lhs) & static_cast<UsedColorModes::underlying_type>(rhs));
}

inline UsedColorModes operator&(const UsedColorModes& lhs, const UsedColorModes& rhs)
{
    return UsedColorModes(lhs.getValue() & rhs.getValue());
}

inline UsedColorModes operator^(UsedColorModes::Values lhs, UsedColorModes::Values rhs)
{
    return UsedColorModes(static_cast<UsedColorModes::underlying_type>(lhs) ^ static_cast<UsedColorModes::underlying_type>(rhs));
}

inline UsedColorModes operator^(const UsedColorModes& lhs, const UsedColorModes& rhs)
{
    return UsedColorModes(lhs.getValue() ^ rhs.getValue());
}

inline UsedColorModes operator~(UsedColorModes::Values lhs)
{
    return UsedColorModes(~static_cast<UsedColorModes::underlying_type>(lhs) & UINT8_C(15));
}

inline UsedColorModes operator~(const UsedColorModes& lhs)
{
    return UsedColorModes(~lhs.getValue() & UINT8_C(15));
}

inline UsedColorModes operator|=(UsedColorModes& lhs, const UsedColorModes& rhs)
{
    lhs = UsedColorModes(lhs.getValue() | rhs.getValue());
    return lhs;
}

inline UsedColorModes operator&=(UsedColorModes& lhs, const UsedColorModes& rhs)
{
    lhs = UsedColorModes(lhs.getValue() & rhs.getValue());
    return lhs;
}

inline UsedColorModes operator^=(UsedColorModes& lhs, const UsedColorModes& rhs)
{
    lhs = UsedColorModes(lhs.getValue() ^ rhs.getValue());
    return lhs;
}

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_USED_COLOR_MODES_H
