/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_STYLE3_DCOLOR_H
#define NDS_DISPLAY_TYPES_STYLE3_DCOLOR_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/color/ColorRgba.h>
#include <nds/display/types/ColorId.h>

namespace nds
{
namespace display
{
namespace types
{

class Style3DColor
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getColorId()
        {
            return m_colorId_;
        }

        ::nds::core::color::ColorRgba::ZserioPackingContext& getColorRgba()
        {
            return m_colorRgba_;
        }

    private:
        ::zserio::DeltaContext m_colorId_;
        ::nds::core::color::ColorRgba::ZserioPackingContext m_colorRgba_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Style3DColor() noexcept :
            Style3DColor(allocator_type())
    {}

    explicit Style3DColor(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_colorRgba = ::nds::core::color::ColorRgba>
    Style3DColor(
            ::nds::display::types::ColorId colorId_,
            ZSERIO_T_colorRgba&& colorRgba_,
            const allocator_type& allocator = allocator_type()) :
            Style3DColor(allocator)
    {
        m_colorId_ = colorId_;
        m_colorRgba_ = ::std::forward<ZSERIO_T_colorRgba>(colorRgba_);
    }

    explicit Style3DColor(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Style3DColor(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Style3DColor() = default;

    Style3DColor(const Style3DColor&) = default;
    Style3DColor& operator=(const Style3DColor&) = default;

    Style3DColor(Style3DColor&&) = default;
    Style3DColor& operator=(Style3DColor&&) = default;

    Style3DColor(::zserio::PropagateAllocatorT,
            const Style3DColor& other, const allocator_type& allocator);

    ::nds::display::types::ColorId getColorId() const;
    void setColorId(::nds::display::types::ColorId colorId_);

    const ::nds::core::color::ColorRgba& getColorRgba() const;
    ::nds::core::color::ColorRgba& getColorRgba();
    void setColorRgba(const ::nds::core::color::ColorRgba& colorRgba_);
    void setColorRgba(::nds::core::color::ColorRgba&& colorRgba_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Style3DColor& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::display::types::ColorId readColorId(::zserio::BitStreamReader& in);
    ::nds::display::types::ColorId readColorId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::color::ColorRgba readColorRgba(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::color::ColorRgba readColorRgba(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::types::ColorId m_colorId_;
    ::nds::core::color::ColorRgba m_colorRgba_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_STYLE3_DCOLOR_H
