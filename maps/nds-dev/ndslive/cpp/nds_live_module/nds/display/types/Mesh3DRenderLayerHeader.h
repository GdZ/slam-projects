/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_MESH3_DRENDER_LAYER_HEADER_H
#define NDS_DISPLAY_TYPES_MESH3_DRENDER_LAYER_HEADER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/display/types/UsedColorModes.h>

namespace nds
{
namespace display
{
namespace types
{

class Mesh3DRenderLayerHeader
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getColorModes()
        {
            return m_colorModes_;
        }

        ::zserio::DeltaContext& getNumColorIds()
        {
            return m_numColorIds_;
        }

        ::zserio::DeltaContext& getNumNormals()
        {
            return m_numNormals_;
        }

        ::zserio::DeltaContext& getNumTextureCoords()
        {
            return m_numTextureCoords_;
        }

        ::zserio::DeltaContext& getNumTextureCoordsAdditional()
        {
            return m_numTextureCoordsAdditional_;
        }

    private:
        ::zserio::DeltaContext m_colorModes_;
        ::zserio::DeltaContext m_numColorIds_;
        ::zserio::DeltaContext m_numNormals_;
        ::zserio::DeltaContext m_numTextureCoords_;
        ::zserio::DeltaContext m_numTextureCoordsAdditional_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Mesh3DRenderLayerHeader() noexcept :
            Mesh3DRenderLayerHeader(allocator_type())
    {}

    explicit Mesh3DRenderLayerHeader(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_numColorIds = uint16_t,
            typename ZSERIO_T_numNormals = uint32_t,
            typename ZSERIO_T_numTextureCoords = uint32_t,
            typename ZSERIO_T_numTextureCoordsAdditional = uint32_t>
    Mesh3DRenderLayerHeader(
            ::nds::display::types::UsedColorModes colorModes_,
            ZSERIO_T_numColorIds&& numColorIds_,
            bool hasNormals_,
            ZSERIO_T_numNormals&& numNormals_,
            bool hasTextureCoords_,
            ZSERIO_T_numTextureCoords&& numTextureCoords_,
            bool hasTextureCoordsAdditional_,
            ZSERIO_T_numTextureCoordsAdditional&& numTextureCoordsAdditional_,
            const allocator_type& allocator = allocator_type()) :
            Mesh3DRenderLayerHeader(allocator)
    {
        m_colorModes_ = colorModes_;
        m_numColorIds_ = ::std::forward<ZSERIO_T_numColorIds>(numColorIds_);
        m_hasNormals_ = hasNormals_;
        m_numNormals_ = ::std::forward<ZSERIO_T_numNormals>(numNormals_);
        m_hasTextureCoords_ = hasTextureCoords_;
        m_numTextureCoords_ = ::std::forward<ZSERIO_T_numTextureCoords>(numTextureCoords_);
        m_hasTextureCoordsAdditional_ = hasTextureCoordsAdditional_;
        m_numTextureCoordsAdditional_ = ::std::forward<ZSERIO_T_numTextureCoordsAdditional>(numTextureCoordsAdditional_);
    }

    explicit Mesh3DRenderLayerHeader(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Mesh3DRenderLayerHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Mesh3DRenderLayerHeader() = default;

    Mesh3DRenderLayerHeader(const Mesh3DRenderLayerHeader&) = default;
    Mesh3DRenderLayerHeader& operator=(const Mesh3DRenderLayerHeader&) = default;

    Mesh3DRenderLayerHeader(Mesh3DRenderLayerHeader&&) = default;
    Mesh3DRenderLayerHeader& operator=(Mesh3DRenderLayerHeader&&) = default;

    Mesh3DRenderLayerHeader(::zserio::PropagateAllocatorT,
            const Mesh3DRenderLayerHeader& other, const allocator_type& allocator);

    ::nds::display::types::UsedColorModes getColorModes() const;
    void setColorModes(::nds::display::types::UsedColorModes colorModes_);

    uint16_t getNumColorIds() const;
    void setNumColorIds(uint16_t numColorIds_);
    bool isNumColorIdsUsed() const;
    bool isNumColorIdsSet() const;
    void resetNumColorIds();

    bool getHasNormals() const;
    void setHasNormals(bool hasNormals_);

    uint32_t getNumNormals() const;
    void setNumNormals(uint32_t numNormals_);
    bool isNumNormalsUsed() const;
    bool isNumNormalsSet() const;
    void resetNumNormals();

    bool getHasTextureCoords() const;
    void setHasTextureCoords(bool hasTextureCoords_);

    uint32_t getNumTextureCoords() const;
    void setNumTextureCoords(uint32_t numTextureCoords_);
    bool isNumTextureCoordsUsed() const;
    bool isNumTextureCoordsSet() const;
    void resetNumTextureCoords();

    bool getHasTextureCoordsAdditional() const;
    void setHasTextureCoordsAdditional(bool hasTextureCoordsAdditional_);

    uint32_t getNumTextureCoordsAdditional() const;
    void setNumTextureCoordsAdditional(uint32_t numTextureCoordsAdditional_);
    bool isNumTextureCoordsAdditionalUsed() const;
    bool isNumTextureCoordsAdditionalSet() const;
    void resetNumTextureCoordsAdditional();

    bool funcUsesColors() const;

    bool funcHasColorPerVertex() const;

    uint16_t funcNumOfColorIds() const;

    uint32_t funcNumOfNormals() const;

    uint32_t funcNumOfTextureCoords() const;

    uint32_t funcNumOfTextureCoordsAdditional() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Mesh3DRenderLayerHeader& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::display::types::UsedColorModes readColorModes(::zserio::BitStreamReader& in);
    ::nds::display::types::UsedColorModes readColorModes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint16_t> readNumColorIds(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint16_t> readNumColorIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasNormals(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumNormals(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumNormals(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasTextureCoords(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumTextureCoords(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumTextureCoords(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasTextureCoordsAdditional(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumTextureCoordsAdditional(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumTextureCoordsAdditional(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::display::types::UsedColorModes m_colorModes_;
    ::zserio::InplaceOptionalHolder<uint16_t> m_numColorIds_;
    bool m_hasNormals_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_numNormals_;
    bool m_hasTextureCoords_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_numTextureCoords_;
    bool m_hasTextureCoordsAdditional_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_numTextureCoordsAdditional_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_MESH3_DRENDER_LAYER_HEADER_H
