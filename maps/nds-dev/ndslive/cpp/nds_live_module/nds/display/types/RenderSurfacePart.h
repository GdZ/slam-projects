/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_RENDER_SURFACE_PART_H
#define NDS_DISPLAY_TYPES_RENDER_SURFACE_PART_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/display/types/Material.h>

namespace nds
{
namespace display
{
namespace types
{

class RenderSurfacePart
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::display::types::Material::ZserioPackingContext& getMaterial()
        {
            return m_material_;
        }

    private:
        ::nds::display::types::Material::ZserioPackingContext m_material_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RenderSurfacePart() noexcept :
            RenderSurfacePart(allocator_type())
    {}

    explicit RenderSurfacePart(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_material = ::nds::display::types::Material,
            typename ZSERIO_T_indices = ::zserio::vector<uint32_t>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_material, RenderSurfacePart, allocator_type> = 0>
    RenderSurfacePart(
            ZSERIO_T_material&& material_,
            ZSERIO_T_indices&& indices_,
            const allocator_type& allocator = allocator_type()) :
            RenderSurfacePart(allocator)
    {
        m_material_ = ::std::forward<ZSERIO_T_material>(material_);
        m_indices_ = ZserioArrayType_indices(::std::forward<ZSERIO_T_indices>(indices_));
    }

    explicit RenderSurfacePart(::zserio::BitStreamReader& in,
            uint8_t numIndexBits_, const allocator_type& allocator = allocator_type());
    explicit RenderSurfacePart(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            uint8_t numIndexBits_, const allocator_type& allocator = allocator_type());

    ~RenderSurfacePart() = default;

    RenderSurfacePart(const RenderSurfacePart& other);
    RenderSurfacePart& operator=(const RenderSurfacePart& other);

    RenderSurfacePart(RenderSurfacePart&& other);
    RenderSurfacePart& operator=(RenderSurfacePart&& other);

    RenderSurfacePart(::zserio::PropagateAllocatorT,
            const RenderSurfacePart& other, const allocator_type& allocator);

    void initialize(
            uint8_t numIndexBits_);
    bool isInitialized() const;

    uint8_t getNumIndexBits() const;

    const ::nds::display::types::Material& getMaterial() const;
    ::nds::display::types::Material& getMaterial();
    void setMaterial(const ::nds::display::types::Material& material_);
    void setMaterial(::nds::display::types::Material&& material_);
    bool isMaterialUsed() const;
    bool isMaterialSet() const;
    void resetMaterial();

    const ::zserio::vector<uint32_t>& getIndices() const;
    ::zserio::vector<uint32_t>& getIndices();
    void setIndices(const ::zserio::vector<uint32_t>& indices_);
    void setIndices(::zserio::vector<uint32_t>&& indices_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RenderSurfacePart& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementBitSize_indices
    {
    public:
        using OwnerType = RenderSurfacePart;

        static uint8_t get(const RenderSurfacePart& owner);
    };

    using ZserioArrayType_indices = ::zserio::Array<::zserio::vector<uint32_t>, ::zserio::DynamicBitFieldArrayTraits<uint32_t, ZserioElementBitSize_indices>, ::zserio::ArrayType::AUTO>;

    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> readMaterial(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> readMaterial(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_indices readIndices(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_indices readIndices(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint8_t m_numIndexBits_;
    bool m_isInitialized;
    ::zserio::InplaceOptionalHolder<::nds::display::types::Material> m_material_;
    ZserioArrayType_indices m_indices_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_RENDER_SURFACE_PART_H
