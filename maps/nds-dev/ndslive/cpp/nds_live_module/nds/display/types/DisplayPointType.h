/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_DISPLAY_POINT_TYPE_H
#define NDS_DISPLAY_TYPES_DISPLAY_POINT_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace display
{
namespace types
{

enum class DisplayPointType : uint16_t
{
    DISPLAY_POINT = UINT16_C(0),
    POINT_MUNICIPALITY_CENTER = UINT16_C(1),
    POINT_MUNICIPALITY_SUBDIVISION_CENTER = UINT16_C(2),
    POINT_HAMLET = UINT16_C(3),
    POINT_MOUNTAIN_PEAK = UINT16_C(4),
    POINT_NEIGHBORHOOD = UINT16_C(5),
    POINT_CONTROLLED_ACCESS_EXIT = UINT16_C(6),
    POINT_CONTROLLED_ACCESS_ENTRY = UINT16_C(7),
    POINT_CONTROLLED_ACCESS_INTERSECTION = UINT16_C(8),
    POINT_COUNTRY = UINT16_C(9),
    POINT_SUB_COUNTRY = UINT16_C(10),
    POINT_TRAFFIC_LIGHT = UINT16_C(11),
    POINT_SEA_OCEAN = UINT16_C(12),
    POINT_SUB_COUNTRY_SET = UINT16_C(13),
    POINT_COUNTY = UINT16_C(14),
    POINT_CITY_BLOCK = UINT16_C(15),
    POINT_ISLAND = UINT16_C(16),
    POINT_AUTONOMOUS_REGION = UINT16_C(17),
    POINT_MUNICIPALITY_CENTER_CAPITAL = UINT16_C(18),
    POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY = UINT16_C(19),
    POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY = UINT16_C(20),
    POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTY = UINT16_C(21),
    POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY_SET = UINT16_C(22),
    POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY_SET = UINT16_C(23),
    POINT_MUNICIPALITY_CENTER_CAPITAL_ZONE = UINT16_C(24)
};

} // namespace types
} // namespace display
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for DisplayPointType enumeration.
template <>
struct EnumTraits<::nds::display::types::DisplayPointType>
{
    static constexpr ::std::array<const char*, 25> names =
    {{
        "DISPLAY_POINT",
        "POINT_MUNICIPALITY_CENTER",
        "POINT_MUNICIPALITY_SUBDIVISION_CENTER",
        "POINT_HAMLET",
        "POINT_MOUNTAIN_PEAK",
        "POINT_NEIGHBORHOOD",
        "POINT_CONTROLLED_ACCESS_EXIT",
        "POINT_CONTROLLED_ACCESS_ENTRY",
        "POINT_CONTROLLED_ACCESS_INTERSECTION",
        "POINT_COUNTRY",
        "POINT_SUB_COUNTRY",
        "POINT_TRAFFIC_LIGHT",
        "POINT_SEA_OCEAN",
        "POINT_SUB_COUNTRY_SET",
        "POINT_COUNTY",
        "POINT_CITY_BLOCK",
        "POINT_ISLAND",
        "POINT_AUTONOMOUS_REGION",
        "POINT_MUNICIPALITY_CENTER_CAPITAL",
        "POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY",
        "POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY",
        "POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTY",
        "POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY_SET",
        "POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY_SET",
        "POINT_MUNICIPALITY_CENTER_CAPITAL_ZONE"
    }};

    static constexpr ::std::array<::nds::display::types::DisplayPointType, 25> values =
    {{
        ::nds::display::types::DisplayPointType::DISPLAY_POINT,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_CENTER,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_SUBDIVISION_CENTER,
        ::nds::display::types::DisplayPointType::POINT_HAMLET,
        ::nds::display::types::DisplayPointType::POINT_MOUNTAIN_PEAK,
        ::nds::display::types::DisplayPointType::POINT_NEIGHBORHOOD,
        ::nds::display::types::DisplayPointType::POINT_CONTROLLED_ACCESS_EXIT,
        ::nds::display::types::DisplayPointType::POINT_CONTROLLED_ACCESS_ENTRY,
        ::nds::display::types::DisplayPointType::POINT_CONTROLLED_ACCESS_INTERSECTION,
        ::nds::display::types::DisplayPointType::POINT_COUNTRY,
        ::nds::display::types::DisplayPointType::POINT_SUB_COUNTRY,
        ::nds::display::types::DisplayPointType::POINT_TRAFFIC_LIGHT,
        ::nds::display::types::DisplayPointType::POINT_SEA_OCEAN,
        ::nds::display::types::DisplayPointType::POINT_SUB_COUNTRY_SET,
        ::nds::display::types::DisplayPointType::POINT_COUNTY,
        ::nds::display::types::DisplayPointType::POINT_CITY_BLOCK,
        ::nds::display::types::DisplayPointType::POINT_ISLAND,
        ::nds::display::types::DisplayPointType::POINT_AUTONOMOUS_REGION,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_CENTER_CAPITAL,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTY,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY_SET,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY_SET,
        ::nds::display::types::DisplayPointType::POINT_MUNICIPALITY_CENTER_CAPITAL_ZONE
    }};

    static constexpr const char* enumName = "DisplayPointType";
};

template <>
size_t enumToOrdinal<::nds::display::types::DisplayPointType>(::nds::display::types::DisplayPointType value);

template <>
::nds::display::types::DisplayPointType valueToEnum<::nds::display::types::DisplayPointType>(
        typename ::std::underlying_type<::nds::display::types::DisplayPointType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::display::types::DisplayPointType>(::nds::display::types::DisplayPointType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::display::types::DisplayPointType>(::zserio::DeltaContext& context, ::nds::display::types::DisplayPointType value);

template <>
size_t bitSizeOf<::nds::display::types::DisplayPointType>(::nds::display::types::DisplayPointType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::display::types::DisplayPointType>(::zserio::DeltaContext& context, ::nds::display::types::DisplayPointType value);

template <>
size_t initializeOffsets<::nds::display::types::DisplayPointType>(size_t bitPosition, ::nds::display::types::DisplayPointType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::display::types::DisplayPointType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::display::types::DisplayPointType value);

template <>
::nds::display::types::DisplayPointType read<::nds::display::types::DisplayPointType>(::zserio::BitStreamReader& in);

template <>
::nds::display::types::DisplayPointType read<::nds::display::types::DisplayPointType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::display::types::DisplayPointType>(::zserio::BitStreamWriter& out, ::nds::display::types::DisplayPointType value);

template <>
void write<::zserio::DeltaContext, ::nds::display::types::DisplayPointType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::display::types::DisplayPointType value);

} // namespace zserio

#endif // NDS_DISPLAY_TYPES_DISPLAY_POINT_TYPE_H
