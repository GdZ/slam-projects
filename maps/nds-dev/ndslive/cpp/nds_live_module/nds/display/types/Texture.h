/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_TEXTURE_H
#define NDS_DISPLAY_TYPES_TEXTURE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/display/reference/types/TextureId.h>
#include <nds/display/types/TextureConditionUsageType.h>
#include <nds/display/types/TextureData.h>
#include <nds/display/types/TextureFormat.h>
#include <nds/display/types/TextureRenderingUsageType.h>

namespace nds
{
namespace display
{
namespace types
{

class Texture
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getTextureId()
        {
            return m_textureId_;
        }

        ::zserio::DeltaContext& getTextureRenderingUsageType()
        {
            return m_textureRenderingUsageType_;
        }

        ::zserio::DeltaContext& getFormat()
        {
            return m_format_;
        }

    private:
        ::zserio::DeltaContext m_textureId_;
        ::zserio::DeltaContext m_textureRenderingUsageType_;
        ::zserio::DeltaContext m_format_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Texture() noexcept :
            Texture(allocator_type())
    {}

    explicit Texture(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_textureConditionUsageType = ::zserio::vector<::nds::display::types::TextureConditionUsageType>,
            typename ZSERIO_T_textureData = ::zserio::vector<::nds::display::types::TextureData>>
    Texture(
            ::nds::display::reference::types::TextureId textureId_,
            ::nds::display::types::TextureRenderingUsageType textureRenderingUsageType_,
            ::nds::display::types::TextureFormat format_,
            bool doubleSided_,
            ZSERIO_T_textureConditionUsageType&& textureConditionUsageType_,
            ZSERIO_T_textureData&& textureData_,
            const allocator_type& allocator = allocator_type()) :
            Texture(allocator)
    {
        m_textureId_ = textureId_;
        m_textureRenderingUsageType_ = textureRenderingUsageType_;
        m_format_ = format_;
        m_doubleSided_ = doubleSided_;
        m_textureConditionUsageType_ = ZserioArrayType_textureConditionUsageType(::std::forward<ZSERIO_T_textureConditionUsageType>(textureConditionUsageType_));
        m_textureData_ = ZserioArrayType_textureData(::std::forward<ZSERIO_T_textureData>(textureData_));
    }

    explicit Texture(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Texture(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Texture() = default;

    Texture(const Texture&) = default;
    Texture& operator=(const Texture&) = default;

    Texture(Texture&&) = default;
    Texture& operator=(Texture&&) = default;

    Texture(::zserio::PropagateAllocatorT,
            const Texture& other, const allocator_type& allocator);

    ::nds::display::reference::types::TextureId getTextureId() const;
    void setTextureId(::nds::display::reference::types::TextureId textureId_);

    ::nds::display::types::TextureRenderingUsageType getTextureRenderingUsageType() const;
    void setTextureRenderingUsageType(::nds::display::types::TextureRenderingUsageType textureRenderingUsageType_);

    ::nds::display::types::TextureFormat getFormat() const;
    void setFormat(::nds::display::types::TextureFormat format_);

    bool getDoubleSided() const;
    void setDoubleSided(bool doubleSided_);

    const ::zserio::vector<::nds::display::types::TextureConditionUsageType>& getTextureConditionUsageType() const;
    ::zserio::vector<::nds::display::types::TextureConditionUsageType>& getTextureConditionUsageType();
    void setTextureConditionUsageType(const ::zserio::vector<::nds::display::types::TextureConditionUsageType>& textureConditionUsageType_);
    void setTextureConditionUsageType(::zserio::vector<::nds::display::types::TextureConditionUsageType>&& textureConditionUsageType_);

    const ::zserio::vector<::nds::display::types::TextureData>& getTextureData() const;
    ::zserio::vector<::nds::display::types::TextureData>& getTextureData();
    void setTextureData(const ::zserio::vector<::nds::display::types::TextureData>& textureData_);
    void setTextureData(::zserio::vector<::nds::display::types::TextureData>&& textureData_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Texture& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_textureData
    {
    public:
        using OwnerType = Texture;

        static void create(Texture& owner,
                ::zserio::vector<::nds::display::types::TextureData>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Texture& owner,
                ::zserio::vector<::nds::display::types::TextureData>& array,
                ::nds::display::types::TextureData::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_textureConditionUsageType = ::zserio::Array<::zserio::vector<::nds::display::types::TextureConditionUsageType>, ::zserio::BitmaskArrayTraits<::nds::display::types::TextureConditionUsageType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_textureData = ::zserio::Array<::zserio::vector<::nds::display::types::TextureData>, ::zserio::ObjectArrayTraits<::nds::display::types::TextureData, ZserioElementFactory_textureData>, ::zserio::ArrayType::AUTO>;

    ::nds::display::reference::types::TextureId readTextureId(::zserio::BitStreamReader& in);
    ::nds::display::reference::types::TextureId readTextureId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::display::types::TextureRenderingUsageType readTextureRenderingUsageType(::zserio::BitStreamReader& in);
    ::nds::display::types::TextureRenderingUsageType readTextureRenderingUsageType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::display::types::TextureFormat readFormat(::zserio::BitStreamReader& in);
    ::nds::display::types::TextureFormat readFormat(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readDoubleSided(::zserio::BitStreamReader& in);
    ZserioArrayType_textureConditionUsageType readTextureConditionUsageType(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_textureConditionUsageType readTextureConditionUsageType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_textureData readTextureData(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_textureData readTextureData(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::reference::types::TextureId m_textureId_;
    ::nds::display::types::TextureRenderingUsageType m_textureRenderingUsageType_;
    ::nds::display::types::TextureFormat m_format_;
    bool m_doubleSided_;
    ZserioArrayType_textureConditionUsageType m_textureConditionUsageType_;
    ZserioArrayType_textureData m_textureData_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_TEXTURE_H
