/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_MESH3_DRENDER_CONFIGURATION_H
#define NDS_DISPLAY_TYPES_MESH3_DRENDER_CONFIGURATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/display/types/ColorMode.h>
#include <nds/display/types/Mesh3DRenderLayerHeader.h>

namespace nds
{
namespace display
{
namespace types
{

class Mesh3DRenderConfiguration
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getColorMode()
        {
            return m_colorMode_;
        }

    private:
        ::zserio::DeltaContext m_colorMode_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Mesh3DRenderConfiguration() noexcept :
            Mesh3DRenderConfiguration(allocator_type())
    {}

    explicit Mesh3DRenderConfiguration(const allocator_type& allocator) noexcept;

    Mesh3DRenderConfiguration(
            ::nds::display::types::ColorMode colorMode_,
            bool hasTextureCoords_,
            bool hasTextureCoordsAdditional_,
            bool hasNormals_,
            const allocator_type& allocator = allocator_type()) :
            Mesh3DRenderConfiguration(allocator)
    {
        m_colorMode_ = colorMode_;
        m_hasTextureCoords_ = hasTextureCoords_;
        m_hasTextureCoordsAdditional_ = hasTextureCoordsAdditional_;
        m_hasNormals_ = hasNormals_;
    }

    explicit Mesh3DRenderConfiguration(::zserio::BitStreamReader& in,
            ::nds::display::types::Mesh3DRenderLayerHeader& header_, const allocator_type& allocator = allocator_type());
    explicit Mesh3DRenderConfiguration(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::display::types::Mesh3DRenderLayerHeader& header_, const allocator_type& allocator = allocator_type());

    ~Mesh3DRenderConfiguration() = default;

    Mesh3DRenderConfiguration(const Mesh3DRenderConfiguration& other);
    Mesh3DRenderConfiguration& operator=(const Mesh3DRenderConfiguration& other);

    Mesh3DRenderConfiguration(Mesh3DRenderConfiguration&& other);
    Mesh3DRenderConfiguration& operator=(Mesh3DRenderConfiguration&& other);

    Mesh3DRenderConfiguration(::zserio::PropagateAllocatorT,
            const Mesh3DRenderConfiguration& other, const allocator_type& allocator);

    void initialize(
            ::nds::display::types::Mesh3DRenderLayerHeader& header_);
    bool isInitialized() const;

    ::nds::display::types::Mesh3DRenderLayerHeader& getHeader();
    const ::nds::display::types::Mesh3DRenderLayerHeader& getHeader() const;

    ::nds::display::types::ColorMode getColorMode() const;
    void setColorMode(::nds::display::types::ColorMode colorMode_);

    bool getHasTextureCoords() const;
    void setHasTextureCoords(bool hasTextureCoords_);

    bool getHasTextureCoordsAdditional() const;
    void setHasTextureCoordsAdditional(bool hasTextureCoordsAdditional_);

    bool getHasNormals() const;
    void setHasNormals(bool hasNormals_);

    bool funcUsesColorPerVertex() const;

    bool funcUsesColorPerRenderGroup() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Mesh3DRenderConfiguration& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::display::types::ColorMode readColorMode(::zserio::BitStreamReader& in);
    ::nds::display::types::ColorMode readColorMode(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasTextureCoords(::zserio::BitStreamReader& in);
    bool readHasTextureCoordsAdditional(::zserio::BitStreamReader& in);
    bool readHasNormals(::zserio::BitStreamReader& in);

    ::nds::display::types::Mesh3DRenderLayerHeader* m_header_;
    bool m_isInitialized;
    ::nds::display::types::ColorMode m_colorMode_;
    bool m_hasTextureCoords_;
    bool m_hasTextureCoordsAdditional_;
    bool m_hasNormals_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_MESH3_DRENDER_CONFIGURATION_H
