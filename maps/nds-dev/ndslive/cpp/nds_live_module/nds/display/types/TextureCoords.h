/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_TEXTURE_COORDS_H
#define NDS_DISPLAY_TYPES_TEXTURE_COORDS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>

namespace nds
{
namespace display
{
namespace types
{

class TextureCoords
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    TextureCoords() noexcept :
            TextureCoords(allocator_type())
    {}

    explicit TextureCoords(const allocator_type& allocator) noexcept;

    TextureCoords(
            float u_,
            float v_,
            const allocator_type& allocator = allocator_type()) :
            TextureCoords(allocator)
    {
        m_u_ = u_;
        m_v_ = v_;
    }

    explicit TextureCoords(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TextureCoords() = default;

    TextureCoords(const TextureCoords&) = default;
    TextureCoords& operator=(const TextureCoords&) = default;

    TextureCoords(TextureCoords&&) = default;
    TextureCoords& operator=(TextureCoords&&) = default;

    TextureCoords(::zserio::PropagateAllocatorT,
            const TextureCoords& other, const allocator_type& allocator);

    float getU() const;
    void setU(float u_);

    float getV() const;
    void setV(float v_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const TextureCoords& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    float readU(::zserio::BitStreamReader& in);
    float readV(::zserio::BitStreamReader& in);

    float m_u_;
    float m_v_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_TEXTURE_COORDS_H
