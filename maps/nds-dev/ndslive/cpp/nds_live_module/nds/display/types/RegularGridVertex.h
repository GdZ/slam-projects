/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_REGULAR_GRID_VERTEX_H
#define NDS_DISPLAY_TYPES_REGULAR_GRID_VERTEX_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/display/types/NormalSphere.h>
#include <nds/display/types/TextureCoords.h>

namespace nds
{
namespace display
{
namespace types
{

class RegularGridVertex
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getElevation()
        {
            return m_elevation_;
        }

        ::nds::display::types::NormalSphere::ZserioPackingContext& getNormal()
        {
            return m_normal_;
        }

    private:
        ::zserio::DeltaContext m_elevation_;
        ::nds::display::types::NormalSphere::ZserioPackingContext m_normal_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RegularGridVertex() noexcept :
            RegularGridVertex(allocator_type())
    {}

    explicit RegularGridVertex(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_normal = ::nds::display::types::NormalSphere,
            typename ZSERIO_T_textureCoord = ::nds::display::types::TextureCoords>
    RegularGridVertex(
            int32_t elevation_,
            ZSERIO_T_normal&& normal_,
            ZSERIO_T_textureCoord&& textureCoord_,
            const allocator_type& allocator = allocator_type()) :
            RegularGridVertex(allocator)
    {
        m_elevation_ = elevation_;
        m_normal_ = ::std::forward<ZSERIO_T_normal>(normal_);
        m_textureCoord_ = ::std::forward<ZSERIO_T_textureCoord>(textureCoord_);
    }

    explicit RegularGridVertex(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shiftZ_,
            bool hasTexture_, const allocator_type& allocator = allocator_type());
    explicit RegularGridVertex(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shiftZ_,
            bool hasTexture_, const allocator_type& allocator = allocator_type());

    ~RegularGridVertex() = default;

    RegularGridVertex(const RegularGridVertex& other);
    RegularGridVertex& operator=(const RegularGridVertex& other);

    RegularGridVertex(RegularGridVertex&& other);
    RegularGridVertex& operator=(RegularGridVertex&& other);

    RegularGridVertex(::zserio::PropagateAllocatorT,
            const RegularGridVertex& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shiftZ_,
            bool hasTexture_);
    bool isInitialized() const;

    ::nds::core::geometry::CoordShift getShiftZ() const;

    bool getHasTexture() const;

    int32_t getElevation() const;
    void setElevation(int32_t elevation_);

    const ::nds::display::types::NormalSphere& getNormal() const;
    ::nds::display::types::NormalSphere& getNormal();
    void setNormal(const ::nds::display::types::NormalSphere& normal_);
    void setNormal(::nds::display::types::NormalSphere&& normal_);

    const ::nds::display::types::TextureCoords& getTextureCoord() const;
    ::nds::display::types::TextureCoords& getTextureCoord();
    void setTextureCoord(const ::nds::display::types::TextureCoords& textureCoord_);
    void setTextureCoord(::nds::display::types::TextureCoords&& textureCoord_);
    bool isTextureCoordUsed() const;
    bool isTextureCoordSet() const;
    void resetTextureCoord();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RegularGridVertex& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementBitSize_elevation
    {
    public:
        using OwnerType = RegularGridVertex;

        static uint8_t get(const RegularGridVertex& owner);
    };

    int32_t readElevation(::zserio::BitStreamReader& in);
    int32_t readElevation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::display::types::NormalSphere readNormal(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::types::NormalSphere readNormal(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::types::TextureCoords> readTextureCoord(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shiftZ_;
    bool m_hasTexture_;
    bool m_isInitialized;
    int32_t m_elevation_;
    ::nds::display::types::NormalSphere m_normal_;
    ::zserio::InplaceOptionalHolder<::nds::display::types::TextureCoords> m_textureCoord_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_REGULAR_GRID_VERTEX_H
