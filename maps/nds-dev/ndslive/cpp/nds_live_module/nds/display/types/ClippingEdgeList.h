/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_TYPES_CLIPPING_EDGE_LIST_H
#define NDS_DISPLAY_TYPES_CLIPPING_EDGE_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/display/types/ClippingEdge.h>

namespace nds
{
namespace display
{
namespace types
{

class ClippingEdgeList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::zserio::DeltaContext& getNumEdges()
        {
            return m_numEdges_;
        }

    private:
        ::zserio::DeltaContext m_shift_;
        ::zserio::DeltaContext m_numEdges_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ClippingEdgeList() noexcept :
            ClippingEdgeList(allocator_type())
    {}

    explicit ClippingEdgeList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_edges = ::zserio::vector<::nds::display::types::ClippingEdge>>
    ClippingEdgeList(
            ::nds::core::geometry::CoordShift shift_,
            uint32_t numEdges_,
            ZSERIO_T_edges&& edges_,
            const allocator_type& allocator = allocator_type()) :
            ClippingEdgeList(allocator)
    {
        m_shift_ = shift_;
        m_numEdges_ = numEdges_;
        m_edges_ = ZserioArrayType_edges(::std::forward<ZSERIO_T_edges>(edges_));
    }

    explicit ClippingEdgeList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ClippingEdgeList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ClippingEdgeList() = default;

    ClippingEdgeList(const ClippingEdgeList& other);
    ClippingEdgeList& operator=(const ClippingEdgeList& other);

    ClippingEdgeList(ClippingEdgeList&& other);
    ClippingEdgeList& operator=(ClippingEdgeList&& other);

    ClippingEdgeList(::zserio::PropagateAllocatorT,
            const ClippingEdgeList& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    uint32_t getNumEdges() const;
    void setNumEdges(uint32_t numEdges_);

    const ::zserio::vector<::nds::display::types::ClippingEdge>& getEdges() const;
    ::zserio::vector<::nds::display::types::ClippingEdge>& getEdges();
    void setEdges(const ::zserio::vector<::nds::display::types::ClippingEdge>& edges_);
    void setEdges(::zserio::vector<::nds::display::types::ClippingEdge>&& edges_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ClippingEdgeList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_edges
    {
    public:
        using OwnerType = ClippingEdgeList;

        static void initializeElement(ClippingEdgeList& owner,
                ::nds::display::types::ClippingEdge& element, size_t index);
    };

    class ZserioElementFactory_edges
    {
    public:
        using OwnerType = ClippingEdgeList;

        static void create(ClippingEdgeList& owner,
                ::zserio::vector<::nds::display::types::ClippingEdge>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ClippingEdgeList& owner,
                ::zserio::vector<::nds::display::types::ClippingEdge>& array,
                ::nds::display::types::ClippingEdge::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_edges = ::zserio::Array<::zserio::vector<::nds::display::types::ClippingEdge>, ::zserio::ObjectArrayTraits<::nds::display::types::ClippingEdge, ZserioElementFactory_edges>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_edges>;

    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint32_t readNumEdges(::zserio::BitStreamReader& in);
    uint32_t readNumEdges(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_edges readEdges(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_edges readEdges(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::core::geometry::CoordShift m_shift_;
    uint32_t m_numEdges_;
    ZserioArrayType_edges m_edges_;
};

} // namespace types
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_TYPES_CLIPPING_EDGE_LIST_H
