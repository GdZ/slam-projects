/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_DETAILS_TYPES_DRAWING_ORDER_H
#define NDS_DISPLAY_DETAILS_TYPES_DRAWING_ORDER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace display
{
namespace details
{
namespace types
{

class DrawingOrder
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getPrimaryDrawingOrder()
        {
            return m_primaryDrawingOrder_;
        }

        ::zserio::DeltaContext& getSecondaryDrawingOrder()
        {
            return m_secondaryDrawingOrder_;
        }

    private:
        ::zserio::DeltaContext m_primaryDrawingOrder_;
        ::zserio::DeltaContext m_secondaryDrawingOrder_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DrawingOrder() noexcept :
            DrawingOrder(allocator_type())
    {}

    explicit DrawingOrder(const allocator_type& allocator) noexcept;

    DrawingOrder(
            uint16_t primaryDrawingOrder_,
            uint16_t secondaryDrawingOrder_,
            const allocator_type& allocator = allocator_type()) :
            DrawingOrder(allocator)
    {
        m_primaryDrawingOrder_ = primaryDrawingOrder_;
        m_secondaryDrawingOrder_ = secondaryDrawingOrder_;
    }

    explicit DrawingOrder(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DrawingOrder(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DrawingOrder() = default;

    DrawingOrder(const DrawingOrder&) = default;
    DrawingOrder& operator=(const DrawingOrder&) = default;

    DrawingOrder(DrawingOrder&&) = default;
    DrawingOrder& operator=(DrawingOrder&&) = default;

    DrawingOrder(::zserio::PropagateAllocatorT,
            const DrawingOrder& other, const allocator_type& allocator);

    uint16_t getPrimaryDrawingOrder() const;
    void setPrimaryDrawingOrder(uint16_t primaryDrawingOrder_);

    uint16_t getSecondaryDrawingOrder() const;
    void setSecondaryDrawingOrder(uint16_t secondaryDrawingOrder_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DrawingOrder& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    uint16_t readPrimaryDrawingOrder(::zserio::BitStreamReader& in);
    uint16_t readPrimaryDrawingOrder(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint16_t readSecondaryDrawingOrder(::zserio::BitStreamReader& in);
    uint16_t readSecondaryDrawingOrder(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    uint16_t m_primaryDrawingOrder_;
    uint16_t m_secondaryDrawingOrder_;
};

} // namespace types
} // namespace details
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_DETAILS_TYPES_DRAWING_ORDER_H
