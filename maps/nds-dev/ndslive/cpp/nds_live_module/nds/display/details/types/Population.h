/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_DETAILS_TYPES_POPULATION_H
#define NDS_DISPLAY_DETAILS_TYPES_POPULATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace display
{
namespace details
{
namespace types
{

enum class Population : uint8_t
{
    POPULATION_SMALL = UINT8_C(0),
    POPULATION_5K = UINT8_C(1),
    POPULATION_10K = UINT8_C(2),
    POPULATION_50K = UINT8_C(3),
    POPULATION_100K = UINT8_C(4),
    POPULATION_500K = UINT8_C(5),
    POPULATION_1M = UINT8_C(6),
    POPULATION_5M = UINT8_C(7),
    POPULATION_10M = UINT8_C(8),
    POPULATION_15M = UINT8_C(9),
    POPULATION_20M = UINT8_C(10),
    POPULATION_25M = UINT8_C(11),
    POPULATION_30M = UINT8_C(12),
    POPULATION_35M = UINT8_C(13),
    POPULATION_40M = UINT8_C(14)
};

} // namespace types
} // namespace details
} // namespace display
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for Population enumeration.
template <>
struct EnumTraits<::nds::display::details::types::Population>
{
    static constexpr ::std::array<const char*, 15> names =
    {{
        "POPULATION_SMALL",
        "POPULATION_5K",
        "POPULATION_10K",
        "POPULATION_50K",
        "POPULATION_100K",
        "POPULATION_500K",
        "POPULATION_1M",
        "POPULATION_5M",
        "POPULATION_10M",
        "POPULATION_15M",
        "POPULATION_20M",
        "POPULATION_25M",
        "POPULATION_30M",
        "POPULATION_35M",
        "POPULATION_40M"
    }};

    static constexpr ::std::array<::nds::display::details::types::Population, 15> values =
    {{
        ::nds::display::details::types::Population::POPULATION_SMALL,
        ::nds::display::details::types::Population::POPULATION_5K,
        ::nds::display::details::types::Population::POPULATION_10K,
        ::nds::display::details::types::Population::POPULATION_50K,
        ::nds::display::details::types::Population::POPULATION_100K,
        ::nds::display::details::types::Population::POPULATION_500K,
        ::nds::display::details::types::Population::POPULATION_1M,
        ::nds::display::details::types::Population::POPULATION_5M,
        ::nds::display::details::types::Population::POPULATION_10M,
        ::nds::display::details::types::Population::POPULATION_15M,
        ::nds::display::details::types::Population::POPULATION_20M,
        ::nds::display::details::types::Population::POPULATION_25M,
        ::nds::display::details::types::Population::POPULATION_30M,
        ::nds::display::details::types::Population::POPULATION_35M,
        ::nds::display::details::types::Population::POPULATION_40M
    }};

    static constexpr const char* enumName = "Population";
};

template <>
size_t enumToOrdinal<::nds::display::details::types::Population>(::nds::display::details::types::Population value);

template <>
::nds::display::details::types::Population valueToEnum<::nds::display::details::types::Population>(
        typename ::std::underlying_type<::nds::display::details::types::Population>::type rawValue);

template <>
uint32_t enumHashCode<::nds::display::details::types::Population>(::nds::display::details::types::Population value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::display::details::types::Population>(::zserio::DeltaContext& context, ::nds::display::details::types::Population value);

template <>
size_t bitSizeOf<::nds::display::details::types::Population>(::nds::display::details::types::Population value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::display::details::types::Population>(::zserio::DeltaContext& context, ::nds::display::details::types::Population value);

template <>
size_t initializeOffsets<::nds::display::details::types::Population>(size_t bitPosition, ::nds::display::details::types::Population value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::display::details::types::Population>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::display::details::types::Population value);

template <>
::nds::display::details::types::Population read<::nds::display::details::types::Population>(::zserio::BitStreamReader& in);

template <>
::nds::display::details::types::Population read<::nds::display::details::types::Population, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::display::details::types::Population>(::zserio::BitStreamWriter& out, ::nds::display::details::types::Population value);

template <>
void write<::zserio::DeltaContext, ::nds::display::details::types::Population>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::display::details::types::Population value);

} // namespace zserio

#endif // NDS_DISPLAY_DETAILS_TYPES_POPULATION_H
