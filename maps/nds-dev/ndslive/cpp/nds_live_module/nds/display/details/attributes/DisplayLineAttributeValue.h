/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_DETAILS_ATTRIBUTES_DISPLAY_LINE_ATTRIBUTE_VALUE_H
#define NDS_DISPLAY_DETAILS_ATTRIBUTES_DISPLAY_LINE_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/DeltaElevation.h>
#include <nds/display/details/attributes/DisplayLineAttributeType.h>
#include <nds/display/details/types/DetachedFromTerrain.h>
#include <nds/display/details/types/DrawingOrder.h>
#include <nds/display/details/types/ElevationLevel.h>
#include <nds/display/details/types/ZLevel.h>

namespace nds
{
namespace display
{
namespace details
{
namespace attributes
{

class DisplayLineAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_drawingOrder = 0,
        CHOICE_zLevel = 1,
        CHOICE_detachedFromTerrain = 2,
        CHOICE_elevationDelta = 3,
        CHOICE_elevationLevel = 4,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::display::details::types::DrawingOrder::ZserioPackingContext& getDrawingOrder()
        {
            return m_drawingOrder_;
        }

        ::zserio::DeltaContext& getZLevel()
        {
            return m_zLevel_;
        }

        ::zserio::DeltaContext& getElevationDelta()
        {
            return m_elevationDelta_;
        }

        ::zserio::DeltaContext& getElevationLevel()
        {
            return m_elevationLevel_;
        }

    private:
        ::nds::display::details::types::DrawingOrder::ZserioPackingContext m_drawingOrder_;
        ::zserio::DeltaContext m_zLevel_;
        ::zserio::DeltaContext m_elevationDelta_;
        ::zserio::DeltaContext m_elevationLevel_;
    };

    DisplayLineAttributeValue() noexcept :
            DisplayLineAttributeValue(allocator_type())
    {}

    explicit DisplayLineAttributeValue(const allocator_type& allocator) noexcept;

    explicit DisplayLineAttributeValue(::zserio::BitStreamReader& in,
            ::nds::display::details::attributes::DisplayLineAttributeType type_, const allocator_type& allocator = allocator_type());
    explicit DisplayLineAttributeValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::display::details::attributes::DisplayLineAttributeType type_, const allocator_type& allocator = allocator_type());

    ~DisplayLineAttributeValue() = default;

    DisplayLineAttributeValue(const DisplayLineAttributeValue& other);
    DisplayLineAttributeValue& operator=(const DisplayLineAttributeValue& other);

    DisplayLineAttributeValue(DisplayLineAttributeValue&& other);
    DisplayLineAttributeValue& operator=(DisplayLineAttributeValue&& other);

    DisplayLineAttributeValue(::zserio::PropagateAllocatorT,
            const DisplayLineAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::display::details::attributes::DisplayLineAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::display::details::attributes::DisplayLineAttributeType getType() const;

    const ::nds::display::details::types::DrawingOrder& getDrawingOrder() const;
    ::nds::display::details::types::DrawingOrder& getDrawingOrder();
    void setDrawingOrder(const ::nds::display::details::types::DrawingOrder& drawingOrder_);
    void setDrawingOrder(::nds::display::details::types::DrawingOrder&& drawingOrder_);

    ::nds::display::details::types::ZLevel getZLevel() const;
    void setZLevel(::nds::display::details::types::ZLevel zLevel_);

    const ::nds::display::details::types::DetachedFromTerrain& getDetachedFromTerrain() const;
    ::nds::display::details::types::DetachedFromTerrain& getDetachedFromTerrain();
    void setDetachedFromTerrain(const ::nds::display::details::types::DetachedFromTerrain& detachedFromTerrain_);
    void setDetachedFromTerrain(::nds::display::details::types::DetachedFromTerrain&& detachedFromTerrain_);

    ::nds::core::geometry::DeltaElevation getElevationDelta() const;
    void setElevationDelta(::nds::core::geometry::DeltaElevation elevationDelta_);

    ::nds::display::details::types::ElevationLevel getElevationLevel() const;
    void setElevationLevel(::nds::display::details::types::ElevationLevel elevationLevel_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DisplayLineAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::display::details::attributes::DisplayLineAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace details
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_DETAILS_ATTRIBUTES_DISPLAY_LINE_ATTRIBUTE_VALUE_H
