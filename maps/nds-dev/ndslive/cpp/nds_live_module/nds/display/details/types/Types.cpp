/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/details/types/Population.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for Population enumeration.
constexpr ::std::array<const char*, 15> EnumTraits<::nds::display::details::types::Population>::names;
constexpr ::std::array<::nds::display::details::types::Population, 15> EnumTraits<::nds::display::details::types::Population>::values;
constexpr const char* EnumTraits<::nds::display::details::types::Population>::enumName;

template <>
size_t enumToOrdinal(::nds::display::details::types::Population value)
{
    switch (value)
    {
    case ::nds::display::details::types::Population::POPULATION_SMALL:
        return 0;
    case ::nds::display::details::types::Population::POPULATION_5K:
        return 1;
    case ::nds::display::details::types::Population::POPULATION_10K:
        return 2;
    case ::nds::display::details::types::Population::POPULATION_50K:
        return 3;
    case ::nds::display::details::types::Population::POPULATION_100K:
        return 4;
    case ::nds::display::details::types::Population::POPULATION_500K:
        return 5;
    case ::nds::display::details::types::Population::POPULATION_1M:
        return 6;
    case ::nds::display::details::types::Population::POPULATION_5M:
        return 7;
    case ::nds::display::details::types::Population::POPULATION_10M:
        return 8;
    case ::nds::display::details::types::Population::POPULATION_15M:
        return 9;
    case ::nds::display::details::types::Population::POPULATION_20M:
        return 10;
    case ::nds::display::details::types::Population::POPULATION_25M:
        return 11;
    case ::nds::display::details::types::Population::POPULATION_30M:
        return 12;
    case ::nds::display::details::types::Population::POPULATION_35M:
        return 13;
    case ::nds::display::details::types::Population::POPULATION_40M:
        return 14;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Population: ") <<
                static_cast<typename ::std::underlying_type<::nds::display::details::types::Population>::type>(value) << "!";
    }
}

template <>
::nds::display::details::types::Population valueToEnum(
        typename ::std::underlying_type<::nds::display::details::types::Population>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(4):
    case UINT8_C(5):
    case UINT8_C(6):
    case UINT8_C(7):
    case UINT8_C(8):
    case UINT8_C(9):
    case UINT8_C(10):
    case UINT8_C(11):
    case UINT8_C(12):
    case UINT8_C(13):
    case UINT8_C(14):
        return static_cast<::nds::display::details::types::Population>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Population: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::display::details::types::Population>(::nds::display::details::types::Population value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::display::details::types::Population value)
{
    context.init<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::display::details::types::Population>::type, UINT8_C(4)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::display::details::types::Population)
{
    return UINT8_C(4);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::display::details::types::Population value)
{
    return context.bitSizeOf<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::display::details::types::Population>::type, UINT8_C(4)>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::display::details::types::Population value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::display::details::types::Population value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::display::details::types::Population read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::types::Population>(
            static_cast<typename ::std::underlying_type<::nds::display::details::types::Population>::type>(
                    in.readBits(UINT8_C(4))));
}

template <>
::nds::display::details::types::Population read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::types::Population>(context.read<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::display::details::types::Population>::type, UINT8_C(4)>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::display::details::types::Population value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(4));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::display::details::types::Population value)
{
    context.write<::zserio::BitFieldArrayTraits<typename ::std::underlying_type<::nds::display::details::types::Population>::type, UINT8_C(4)>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/details/types/Additional3dFeatureClass.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for Additional3dFeatureClass enumeration.
constexpr ::std::array<const char*, 232> EnumTraits<::nds::display::details::types::Additional3dFeatureClass>::names;
constexpr ::std::array<::nds::display::details::types::Additional3dFeatureClass, 232> EnumTraits<::nds::display::details::types::Additional3dFeatureClass>::values;
constexpr const char* EnumTraits<::nds::display::details::types::Additional3dFeatureClass>::enumName;

template <>
size_t enumToOrdinal(::nds::display::details::types::Additional3dFeatureClass value)
{
    switch (value)
    {
    case ::nds::display::details::types::Additional3dFeatureClass::FEATURE_3D:
        return 0;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_BUILDING:
        return 1;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PRIVATE_HOME_RESIDENTIAL:
        return 2;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_COMMERCIAL_BUILDING:
        return 3;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CONVENTION_EXHIBITION_CENTER:
        return 4;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RETAIL_BUILDING:
        return 5;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SHOPPING_CENTER:
        return 6;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PETROL_STATION:
        return 7;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RESTAURANT:
        return 8;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_HOTEL_OR_MOTEL:
        return 9;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_DAM:
        return 10;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_LIGHT_HOUSE:
        return 11;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_NO_WALLS:
        return 12;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MULTI_STOREY:
        return 13;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_OTHER_FACILITY:
        return 14;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TOWER:
        return 15;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_INDUSTRIAL_BUILDING:
        return 16;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRANSPORTATION_BUILDING:
        return 17;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PUBLIC_BUILDING:
        return 18;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_POLICE_OFFICE:
        return 19;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_FIRE_DEPARTMENT:
        return 20;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_POST_OFFICE:
        return 21;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_THEATER:
        return 22;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MUSEUM:
        return 23;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_LIBRARY:
        return 24;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_INSTITUTION:
        return 25;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RELIGIOUS_BUILDING:
        return 26;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CHURCH:
        return 27;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SYNAGOGUE:
        return 28;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MOSQUE:
        return 29;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TEMPLE:
        return 30;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SHRINE:
        return 31;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ABBEY:
        return 32;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MONASTERY:
        return 33;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_BUILDING_GROUND:
        return 34;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PAVED:
        return 35;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SAND:
        return 36;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MEMORIAL_GROUND:
        return 37;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MUSEUM_GROUND:
        return 38;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_HOSPITAL_GROUND:
        return 39;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_LIBRARY_GROUND:
        return 40;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SCHOOL_GROUND:
        return 41;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_STADIUM_GROUND:
        return 42;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_GOVERNMENT_OFFICE:
        return 43;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_GOVERNMENT_BUILDING:
        return 44;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CITY_HALL:
        return 45;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_COURTHOUSE:
        return 46;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PRISON:
        return 47;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SUBWAY_PLATFORM:
        return 48;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SUBWAY_STATION:
        return 49;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SCHEMATIC_BUILDING:
        return 50;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_URBAN_BRIDGE:
        return 51;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_URBAN_CARRIAGEWAY_DIVIDER:
        return 52;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_URBAN_RAILWAY_BRIDGE:
        return 53;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_URBAN_RAILWAY_CROSSING:
        return 54;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_URBAN_TUNNEL:
        return 55;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_URBAN_WALKWAY:
        return 56;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ARTIFICIAL:
        return 57;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_URBAN:
        return 58;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CONTINUOUS_URBAN:
        return 59;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_DISCONTINUOUS_URBAN:
        return 60;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_INDUSTRIAL_COMMERCIAL_TRANSPORT:
        return 61;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_INDUSTRIAL_COMMERCIAL_UNITS:
        return 62;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MILITARY_BASE:
        return 63;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC:
        return 64;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC_PEDESTRIAN:
        return 65;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC_ROAD:
        return 66;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC_RAILWAY:
        return 67;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC_PARKING:
        return 68;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC_PARKING_GARAGE:
        return 69;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC_PARKING_LOT:
        return 70;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC_PARKING_ROW:
        return 71;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TRAFFIC_PARKING_SPOT:
        return 72;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CAR_RACETRACK:
        return 73;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_UNDERPASS:
        return 74;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CENTER:
        return 75;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CITY_MAP_COVERAGE:
        return 76;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PERIPHERY:
        return 77;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_POSTAL_DISTRICT:
        return 78;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TUNNEL_ICON:
        return 79;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_GARDEN_PATH:
        return 80;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PORT_FACILITIES:
        return 81;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_AIRPORT:
        return 82;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_AIRPORT_RUNWAY:
        return 83;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MINE_DUMP:
        return 84;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MINERAL_EXTRACTION_SITE:
        return 85;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_DUMP:
        return 86;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CONSTRUCTION:
        return 87;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_VEGETATED:
        return 88;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_GREEN_URBAN:
        return 89;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PARK:
        return 90;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CEMETERY:
        return 91;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SPORT_LEISURE:
        return 92;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SPORTS_COMPLEX:
        return 93;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_AMUSEMENT_PARK:
        return 94;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ARTS_CENTER:
        return 95;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CAMPING_SITE:
        return 96;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_GOLF_COURSE:
        return 97;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_HIPPODROME:
        return 98;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_HOLIDAY:
        return 99;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RECREATIONAL:
        return 100;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_REST_AREA:
        return 101;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SPORTS_HALL:
        return 102;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_STADIUM:
        return 103;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_WALKING_TERRAIN:
        return 104;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ZOO:
        return 105;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SKI:
        return 106;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SWIMMING_POOL:
        return 107;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RAILWAY_STATION:
        return 108;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_FERRY_TERMINAL:
        return 109;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_BUS_STATION:
        return 110;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MARINA:
        return 111;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_AGRICULTURAL:
        return 112;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ARABLE:
        return 113;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_NON_IRRIGATED:
        return 114;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PERMANENTLY_IRRIGATED:
        return 115;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RICE_FIELD:
        return 116;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PERMANENT_CROP:
        return 117;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TREE_BERRY_PLANTATION:
        return 118;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_VINEYARD:
        return 119;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_OLIVE_GROVES:
        return 120;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_HETEROGENEOUS:
        return 121;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_COMPLEX_CULTIVATION:
        return 122;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ANNUAL_PERMANENT:
        return 123;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_AGRO_FORESTRY:
        return 124;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_AGRICULTURAL_AND_NATURAL:
        return 125;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PASTURE_RANGELAND:
        return 126;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PASTURE:
        return 127;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RANGELAND:
        return 128;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_FOREST_SEMI_NATURAL:
        return 129;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_FOREST:
        return 130;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_LEAVED_FOREST:
        return 131;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CONIFEROUS:
        return 132;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MIXED_FOREST:
        return 133;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SCRUB:
        return 134;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_GRASSLAND:
        return 135;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MOOR_HEATH:
        return 136;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SCLEROPHYLLOUS:
        return 137;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_WOODLAND:
        return 138;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_OPEN_SPACE:
        return 139;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ROCK:
        return 140;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_GLACIER:
        return 141;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_BURNT:
        return 142;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SPARSELY_VEGETATED:
        return 143;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_BEACH_DUNE:
        return 144;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_WETLAND:
        return 145;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_INLAND_WETLAND:
        return 146;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_INLAND_MARSH:
        return 147;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_PEATBOG:
        return 148;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_FORESTED_WETLAND:
        return 149;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_COASTAL_WETLAND:
        return 150;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SALT_MARSH:
        return 151;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SALINE:
        return 152;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_INTERTIDAL_FLAT:
        return 153;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ISLAND:
        return 154;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_WATER:
        return 155;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_INLAND_WATER:
        return 156;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RIVER:
        return 157;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CANAL:
        return 158;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_LAKE:
        return 159;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_RESERVOIR:
        return 160;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_BASIN:
        return 161;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MARINE_WATER:
        return 162;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SEA_OCEAN:
        return 163;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_COASTAL_LAGOON:
        return 164;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ESTUARY:
        return 165;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ADMIN:
        return 166;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_COUNTRY:
        return 167;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SUB_COUNTRY_SET:
        return 168;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SUB_COUNTRY:
        return 169;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_COUNTY:
        return 170;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MUNICIPALITY:
        return 171;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MUNICIPALITY_SUBDIVISION:
        return 172;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_NEIGHBORHOOD:
        return 173;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CITY_BLOCK:
        return 174;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ADMIN_AUTONOMOUS:
        return 175;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_NATIVE_TRIBE_RESERVATION:
        return 176;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CONTOUR:
        return 177;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_NATIONAL_PARK:
        return 178;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_ENVIRONMENTAL_ZONE:
        return 179;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TOLL_ZONE:
        return 180;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_EDUCATION_BUILDING:
        return 181;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SCHOOL:
        return 182;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_UNIVERSITY_OR_COLLEGE:
        return 183;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MEDICAL_BUILDING:
        return 184;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_HOSPITAL:
        return 185;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_EMERGENCY_SERVICE:
        return 186;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CULTURE_BUILDING:
        return 187;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_HISTORICAL_BUILDING:
        return 188;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_TOURIST_BUILDING:
        return 189;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_CASTLE:
        return 190;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_FORTRESS:
        return 191;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_MONUMENT:
        return 192;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_VIEW:
        return 193;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_WATERMILL:
        return 194;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_WINDMILL:
        return 195;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_LEISURE_BUILDING:
        return 196;
    case ::nds::display::details::types::Additional3dFeatureClass::AREA_SPORT_BUILDING:
        return 197;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D:
        return 198;
    case ::nds::display::details::types::Additional3dFeatureClass::BUILDING_3D:
        return 199;
    case ::nds::display::details::types::Additional3dFeatureClass::OBJECT_LANDMARK_3D:
        return 200;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D:
        return 201;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_STREET_LIGHT:
        return 202;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TRAFFIC_LIGHTS:
        return 203;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TREE:
        return 204;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_ROAD_SIGN:
        return 205;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_BRIDGE:
        return 206;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_BUS_STOP:
        return 207;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TRAM_STOP:
        return 208;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TUNNEL:
        return 209;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TUNNEL_LEFT:
        return 210;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TUNNEL_RIGHT:
        return 211;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TUNNEL_ROOF:
        return 212;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TUNNEL_ROOF_LEFT:
        return 213;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TUNNEL_ROOF_RIGHT:
        return 214;
    case ::nds::display::details::types::Additional3dFeatureClass::FURNITURE_3D_TUNNEL_PORTAL:
        return 215;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE_MARKING:
        return 216;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE_SEPARATOR_MARKING:
        return 217;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_STOP_LINE:
        return 218;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_STOP_ZONE:
        return 219;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE:
        return 220;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE_BICYCLE:
        return 221;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE_BUS:
        return 222;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE_TAXI:
        return 223;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE_HOV:
        return 224;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE_TOLL:
        return 225;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_LANE_TOLL_ETC:
        return 226;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_DECORATION:
        return 227;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_RESTRICTION:
        return 228;
    case ::nds::display::details::types::Additional3dFeatureClass::ROAD_SURFACE_3D_PEDESTRIAN_CROSSING:
        return 229;
    case ::nds::display::details::types::Additional3dFeatureClass::ENHANCED_CITY_MODEL:
        return 230;
    case ::nds::display::details::types::Additional3dFeatureClass::CITY_MODEL:
        return 231;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Additional3dFeatureClass: ") <<
                static_cast<typename ::std::underlying_type<::nds::display::details::types::Additional3dFeatureClass>::type>(value) << "!";
    }
}

template <>
::nds::display::details::types::Additional3dFeatureClass valueToEnum(
        typename ::std::underlying_type<::nds::display::details::types::Additional3dFeatureClass>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
    case UINT16_C(18):
    case UINT16_C(19):
    case UINT16_C(20):
    case UINT16_C(21):
    case UINT16_C(22):
    case UINT16_C(23):
    case UINT16_C(24):
    case UINT16_C(25):
    case UINT16_C(26):
    case UINT16_C(27):
    case UINT16_C(28):
    case UINT16_C(29):
    case UINT16_C(30):
    case UINT16_C(31):
    case UINT16_C(32):
    case UINT16_C(33):
    case UINT16_C(34):
    case UINT16_C(35):
    case UINT16_C(36):
    case UINT16_C(37):
    case UINT16_C(38):
    case UINT16_C(39):
    case UINT16_C(40):
    case UINT16_C(41):
    case UINT16_C(42):
    case UINT16_C(43):
    case UINT16_C(44):
    case UINT16_C(45):
    case UINT16_C(46):
    case UINT16_C(47):
    case UINT16_C(48):
    case UINT16_C(49):
    case UINT16_C(50):
    case UINT16_C(51):
    case UINT16_C(52):
    case UINT16_C(53):
    case UINT16_C(54):
    case UINT16_C(55):
    case UINT16_C(56):
    case UINT16_C(57):
    case UINT16_C(58):
    case UINT16_C(59):
    case UINT16_C(60):
    case UINT16_C(61):
    case UINT16_C(62):
    case UINT16_C(63):
    case UINT16_C(64):
    case UINT16_C(65):
    case UINT16_C(66):
    case UINT16_C(67):
    case UINT16_C(68):
    case UINT16_C(69):
    case UINT16_C(70):
    case UINT16_C(71):
    case UINT16_C(72):
    case UINT16_C(73):
    case UINT16_C(74):
    case UINT16_C(75):
    case UINT16_C(76):
    case UINT16_C(77):
    case UINT16_C(78):
    case UINT16_C(79):
    case UINT16_C(80):
    case UINT16_C(81):
    case UINT16_C(82):
    case UINT16_C(83):
    case UINT16_C(84):
    case UINT16_C(85):
    case UINT16_C(86):
    case UINT16_C(87):
    case UINT16_C(88):
    case UINT16_C(89):
    case UINT16_C(90):
    case UINT16_C(91):
    case UINT16_C(92):
    case UINT16_C(93):
    case UINT16_C(94):
    case UINT16_C(95):
    case UINT16_C(96):
    case UINT16_C(97):
    case UINT16_C(98):
    case UINT16_C(99):
    case UINT16_C(100):
    case UINT16_C(101):
    case UINT16_C(102):
    case UINT16_C(103):
    case UINT16_C(104):
    case UINT16_C(105):
    case UINT16_C(106):
    case UINT16_C(107):
    case UINT16_C(108):
    case UINT16_C(109):
    case UINT16_C(110):
    case UINT16_C(111):
    case UINT16_C(112):
    case UINT16_C(113):
    case UINT16_C(114):
    case UINT16_C(115):
    case UINT16_C(116):
    case UINT16_C(117):
    case UINT16_C(118):
    case UINT16_C(119):
    case UINT16_C(120):
    case UINT16_C(121):
    case UINT16_C(122):
    case UINT16_C(123):
    case UINT16_C(124):
    case UINT16_C(125):
    case UINT16_C(126):
    case UINT16_C(127):
    case UINT16_C(128):
    case UINT16_C(129):
    case UINT16_C(130):
    case UINT16_C(131):
    case UINT16_C(132):
    case UINT16_C(133):
    case UINT16_C(134):
    case UINT16_C(135):
    case UINT16_C(136):
    case UINT16_C(137):
    case UINT16_C(138):
    case UINT16_C(139):
    case UINT16_C(140):
    case UINT16_C(141):
    case UINT16_C(142):
    case UINT16_C(143):
    case UINT16_C(144):
    case UINT16_C(145):
    case UINT16_C(146):
    case UINT16_C(147):
    case UINT16_C(148):
    case UINT16_C(149):
    case UINT16_C(150):
    case UINT16_C(151):
    case UINT16_C(152):
    case UINT16_C(153):
    case UINT16_C(154):
    case UINT16_C(155):
    case UINT16_C(156):
    case UINT16_C(157):
    case UINT16_C(158):
    case UINT16_C(159):
    case UINT16_C(160):
    case UINT16_C(161):
    case UINT16_C(162):
    case UINT16_C(163):
    case UINT16_C(164):
    case UINT16_C(165):
    case UINT16_C(166):
    case UINT16_C(167):
    case UINT16_C(168):
    case UINT16_C(169):
    case UINT16_C(170):
    case UINT16_C(171):
    case UINT16_C(172):
    case UINT16_C(173):
    case UINT16_C(174):
    case UINT16_C(175):
    case UINT16_C(176):
    case UINT16_C(177):
    case UINT16_C(178):
    case UINT16_C(179):
    case UINT16_C(180):
    case UINT16_C(181):
    case UINT16_C(182):
    case UINT16_C(183):
    case UINT16_C(184):
    case UINT16_C(185):
    case UINT16_C(186):
    case UINT16_C(187):
    case UINT16_C(188):
    case UINT16_C(189):
    case UINT16_C(190):
    case UINT16_C(191):
    case UINT16_C(192):
    case UINT16_C(193):
    case UINT16_C(194):
    case UINT16_C(195):
    case UINT16_C(196):
    case UINT16_C(197):
    case UINT16_C(198):
    case UINT16_C(199):
    case UINT16_C(200):
    case UINT16_C(201):
    case UINT16_C(202):
    case UINT16_C(203):
    case UINT16_C(204):
    case UINT16_C(205):
    case UINT16_C(206):
    case UINT16_C(207):
    case UINT16_C(208):
    case UINT16_C(209):
    case UINT16_C(210):
    case UINT16_C(211):
    case UINT16_C(212):
    case UINT16_C(213):
    case UINT16_C(214):
    case UINT16_C(215):
    case UINT16_C(216):
    case UINT16_C(217):
    case UINT16_C(218):
    case UINT16_C(219):
    case UINT16_C(220):
    case UINT16_C(221):
    case UINT16_C(222):
    case UINT16_C(223):
    case UINT16_C(224):
    case UINT16_C(225):
    case UINT16_C(226):
    case UINT16_C(227):
    case UINT16_C(228):
    case UINT16_C(229):
    case UINT16_C(230):
    case UINT16_C(231):
        return static_cast<::nds::display::details::types::Additional3dFeatureClass>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Additional3dFeatureClass: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::display::details::types::Additional3dFeatureClass>(::nds::display::details::types::Additional3dFeatureClass value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::display::details::types::Additional3dFeatureClass value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::types::Additional3dFeatureClass>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::display::details::types::Additional3dFeatureClass value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::display::details::types::Additional3dFeatureClass value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::types::Additional3dFeatureClass>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::display::details::types::Additional3dFeatureClass value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::display::details::types::Additional3dFeatureClass value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::display::details::types::Additional3dFeatureClass read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::types::Additional3dFeatureClass>(
            static_cast<typename ::std::underlying_type<::nds::display::details::types::Additional3dFeatureClass>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::display::details::types::Additional3dFeatureClass read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::types::Additional3dFeatureClass>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::types::Additional3dFeatureClass>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::display::details::types::Additional3dFeatureClass value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::display::details::types::Additional3dFeatureClass value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::types::Additional3dFeatureClass>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/details/types/DrawingOrder.h>

namespace nds
{
namespace display
{
namespace details
{
namespace types
{

DrawingOrder::DrawingOrder(const allocator_type&) noexcept :
        m_primaryDrawingOrder_(uint16_t()),
        m_secondaryDrawingOrder_(uint16_t())
{
}

DrawingOrder::DrawingOrder(::zserio::BitStreamReader& in, const allocator_type&) :
        m_primaryDrawingOrder_(readPrimaryDrawingOrder(in)),
        m_secondaryDrawingOrder_(readSecondaryDrawingOrder(in))
{
}

DrawingOrder::DrawingOrder(DrawingOrder::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_primaryDrawingOrder_(readPrimaryDrawingOrder(context, in)),
        m_secondaryDrawingOrder_(readSecondaryDrawingOrder(context, in))
{
}

DrawingOrder::DrawingOrder(::zserio::PropagateAllocatorT,
        const DrawingOrder& other, const allocator_type& allocator) :
        m_primaryDrawingOrder_(::zserio::allocatorPropagatingCopy(other.m_primaryDrawingOrder_, allocator)),
        m_secondaryDrawingOrder_(::zserio::allocatorPropagatingCopy(other.m_secondaryDrawingOrder_, allocator))
{
}

uint16_t DrawingOrder::getPrimaryDrawingOrder() const
{
    return m_primaryDrawingOrder_;
}

void DrawingOrder::setPrimaryDrawingOrder(uint16_t primaryDrawingOrder_)
{
    m_primaryDrawingOrder_ = primaryDrawingOrder_;
}

uint16_t DrawingOrder::getSecondaryDrawingOrder() const
{
    return m_secondaryDrawingOrder_;
}

void DrawingOrder::setSecondaryDrawingOrder(uint16_t secondaryDrawingOrder_)
{
    m_secondaryDrawingOrder_ = secondaryDrawingOrder_;
}

void DrawingOrder::initPackingContext(DrawingOrder::ZserioPackingContext& context) const
{
    context.getPrimaryDrawingOrder().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_primaryDrawingOrder_);
    context.getSecondaryDrawingOrder().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_secondaryDrawingOrder_);
}

size_t DrawingOrder::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_primaryDrawingOrder_);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_secondaryDrawingOrder_);

    return endBitPosition - bitPosition;
}

size_t DrawingOrder::bitSizeOf(DrawingOrder::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getPrimaryDrawingOrder().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_primaryDrawingOrder_);
    endBitPosition += context.getSecondaryDrawingOrder().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_secondaryDrawingOrder_);

    return endBitPosition - bitPosition;
}

size_t DrawingOrder::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_primaryDrawingOrder_);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_secondaryDrawingOrder_);

    return endBitPosition;
}

size_t DrawingOrder::initializeOffsets(DrawingOrder::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getPrimaryDrawingOrder().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_primaryDrawingOrder_);
    endBitPosition += context.getSecondaryDrawingOrder().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_secondaryDrawingOrder_);

    return endBitPosition;
}

bool DrawingOrder::operator==(const DrawingOrder& other) const
{
    if (this != &other)
    {
        return
                (m_primaryDrawingOrder_ == other.m_primaryDrawingOrder_) &&
                (m_secondaryDrawingOrder_ == other.m_secondaryDrawingOrder_);
    }

    return true;
}

uint32_t DrawingOrder::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_primaryDrawingOrder_);
    result = ::zserio::calcHashCode(result, m_secondaryDrawingOrder_);

    return result;
}

void DrawingOrder::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_primaryDrawingOrder_);
    out.writeVarUInt16(m_secondaryDrawingOrder_);
}

void DrawingOrder::write(DrawingOrder::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getPrimaryDrawingOrder().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_primaryDrawingOrder_);
    context.getSecondaryDrawingOrder().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_secondaryDrawingOrder_);
}

uint16_t DrawingOrder::readPrimaryDrawingOrder(::zserio::BitStreamReader& in)
{
    return static_cast<uint16_t>(in.readVarUInt16());
}

uint16_t DrawingOrder::readPrimaryDrawingOrder(DrawingOrder::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPrimaryDrawingOrder().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in);
}
uint16_t DrawingOrder::readSecondaryDrawingOrder(::zserio::BitStreamReader& in)
{
    return static_cast<uint16_t>(in.readVarUInt16());
}

uint16_t DrawingOrder::readSecondaryDrawingOrder(DrawingOrder::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getSecondaryDrawingOrder().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in);
}

} // namespace types
} // namespace details
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/details/types/OriginalPointHeights.h>

namespace nds
{
namespace display
{
namespace details
{
namespace types
{

OriginalPointHeights::OriginalPointHeights(const allocator_type& allocator) noexcept :
        m_pointHeight_(allocator)
{
}

OriginalPointHeights::OriginalPointHeights(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_pointHeight_(readPointHeight(in, allocator))
{
}

OriginalPointHeights::OriginalPointHeights(OriginalPointHeights::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_pointHeight_(readPointHeight(context, in, allocator))
{
}

OriginalPointHeights::OriginalPointHeights(::zserio::PropagateAllocatorT,
        const OriginalPointHeights& other, const allocator_type& allocator) :
        m_pointHeight_(::zserio::allocatorPropagatingCopy(other.m_pointHeight_, allocator))
{
}

::zserio::vector<int16_t>& OriginalPointHeights::getPointHeight()
{
    return m_pointHeight_.getRawArray();
}

const ::zserio::vector<int16_t>& OriginalPointHeights::getPointHeight() const
{
    return m_pointHeight_.getRawArray();
}

void OriginalPointHeights::setPointHeight(const ::zserio::vector<int16_t>& pointHeight_)
{
    m_pointHeight_ = ZserioArrayType_pointHeight(pointHeight_);
}

void OriginalPointHeights::setPointHeight(::zserio::vector<int16_t>&& pointHeight_)
{
    m_pointHeight_ = ZserioArrayType_pointHeight(std::move(pointHeight_));
}

void OriginalPointHeights::initPackingContext(OriginalPointHeights::ZserioPackingContext&) const
{
}

size_t OriginalPointHeights::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_pointHeight_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t OriginalPointHeights::bitSizeOf(OriginalPointHeights::ZserioPackingContext&, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_pointHeight_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t OriginalPointHeights::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_pointHeight_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t OriginalPointHeights::initializeOffsets(OriginalPointHeights::ZserioPackingContext&, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_pointHeight_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool OriginalPointHeights::operator==(const OriginalPointHeights& other) const
{
    if (this != &other)
    {
        return
                (m_pointHeight_ == other.m_pointHeight_);
    }

    return true;
}

uint32_t OriginalPointHeights::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_pointHeight_);

    return result;
}

void OriginalPointHeights::write(::zserio::BitStreamWriter& out) const
{
    // check array length
    if (m_pointHeight_.getRawArray().size() != static_cast<size_t>(2))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field OriginalPointHeights.pointHeight: ") <<
                m_pointHeight_.getRawArray().size() << " != " <<
                static_cast<size_t>(2) << "!";
    }
    m_pointHeight_.write(out);
}

void OriginalPointHeights::write(OriginalPointHeights::ZserioPackingContext&, ::zserio::BitStreamWriter& out) const
{
    // check array length
    if (m_pointHeight_.getRawArray().size() != static_cast<size_t>(2))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field OriginalPointHeights.pointHeight: ") <<
                m_pointHeight_.getRawArray().size() << " != " <<
                static_cast<size_t>(2) << "!";
    }
    m_pointHeight_.writePacked(out);
}

OriginalPointHeights::ZserioArrayType_pointHeight OriginalPointHeights::readPointHeight(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_pointHeight readField(allocator);
    readField.read(in, static_cast<size_t>(2));

    return readField;
}

OriginalPointHeights::ZserioArrayType_pointHeight OriginalPointHeights::readPointHeight(OriginalPointHeights::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_pointHeight readField(allocator);
    readField.readPacked(in, static_cast<size_t>(2));

    return readField;
}

} // namespace types
} // namespace details
} // namespace display
} // namespace nds
