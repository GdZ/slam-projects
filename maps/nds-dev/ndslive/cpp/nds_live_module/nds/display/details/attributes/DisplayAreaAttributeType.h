/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_DETAILS_ATTRIBUTES_DISPLAY_AREA_ATTRIBUTE_TYPE_H
#define NDS_DISPLAY_DETAILS_ATTRIBUTES_DISPLAY_AREA_ATTRIBUTE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace display
{
namespace details
{
namespace attributes
{

enum class DisplayAreaAttributeType : uint16_t
{
    DRAWING_ORDER = UINT16_C(0),
    BUILDING_FLOOR_COUNT = UINT16_C(1),
    BUILDING_HEIGHT = UINT16_C(2),
    GROUND_HEIGHT = UINT16_C(3),
    ROOF_COLOR = UINT16_C(4),
    WALL_COLOR = UINT16_C(5),
    ELEVATION_DELTA = UINT16_C(6),
    ELEVATION_LEVEL = UINT16_C(7),
    HAS_3D_REPRESENTATION = UINT16_C(8),
    GLOBAL_SOURCE_ID = UINT16_C(9)
};

} // namespace attributes
} // namespace details
} // namespace display
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for DisplayAreaAttributeType enumeration.
template <>
struct EnumTraits<::nds::display::details::attributes::DisplayAreaAttributeType>
{
    static constexpr ::std::array<const char*, 10> names =
    {{
        "DRAWING_ORDER",
        "BUILDING_FLOOR_COUNT",
        "BUILDING_HEIGHT",
        "GROUND_HEIGHT",
        "ROOF_COLOR",
        "WALL_COLOR",
        "ELEVATION_DELTA",
        "ELEVATION_LEVEL",
        "HAS_3D_REPRESENTATION",
        "GLOBAL_SOURCE_ID"
    }};

    static constexpr ::std::array<::nds::display::details::attributes::DisplayAreaAttributeType, 10> values =
    {{
        ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER,
        ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT,
        ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT,
        ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT,
        ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR,
        ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR,
        ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA,
        ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL,
        ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION,
        ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID
    }};

    static constexpr const char* enumName = "DisplayAreaAttributeType";
};

template <>
size_t enumToOrdinal<::nds::display::details::attributes::DisplayAreaAttributeType>(::nds::display::details::attributes::DisplayAreaAttributeType value);

template <>
::nds::display::details::attributes::DisplayAreaAttributeType valueToEnum<::nds::display::details::attributes::DisplayAreaAttributeType>(
        typename ::std::underlying_type<::nds::display::details::attributes::DisplayAreaAttributeType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::display::details::attributes::DisplayAreaAttributeType>(::nds::display::details::attributes::DisplayAreaAttributeType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::display::details::attributes::DisplayAreaAttributeType>(::zserio::DeltaContext& context, ::nds::display::details::attributes::DisplayAreaAttributeType value);

template <>
size_t bitSizeOf<::nds::display::details::attributes::DisplayAreaAttributeType>(::nds::display::details::attributes::DisplayAreaAttributeType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::display::details::attributes::DisplayAreaAttributeType>(::zserio::DeltaContext& context, ::nds::display::details::attributes::DisplayAreaAttributeType value);

template <>
size_t initializeOffsets<::nds::display::details::attributes::DisplayAreaAttributeType>(size_t bitPosition, ::nds::display::details::attributes::DisplayAreaAttributeType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::display::details::attributes::DisplayAreaAttributeType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::display::details::attributes::DisplayAreaAttributeType value);

template <>
::nds::display::details::attributes::DisplayAreaAttributeType read<::nds::display::details::attributes::DisplayAreaAttributeType>(::zserio::BitStreamReader& in);

template <>
::nds::display::details::attributes::DisplayAreaAttributeType read<::nds::display::details::attributes::DisplayAreaAttributeType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::display::details::attributes::DisplayAreaAttributeType>(::zserio::BitStreamWriter& out, ::nds::display::details::attributes::DisplayAreaAttributeType value);

template <>
void write<::zserio::DeltaContext, ::nds::display::details::attributes::DisplayAreaAttributeType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::display::details::attributes::DisplayAreaAttributeType value);

} // namespace zserio

#endif // NDS_DISPLAY_DETAILS_ATTRIBUTES_DISPLAY_AREA_ATTRIBUTE_TYPE_H
