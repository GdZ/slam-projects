/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/details/layer/DisplayAttributeLayer.h>
#include <nds/display/details/metadata/DisplayAttributeLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace details
{
namespace layer
{

DisplayAttributeLayer::DisplayAttributeLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::display::details::metadata::DisplayAttributeLayerContent()),
        m_baseElevation_(::zserio::NullOpt),
        m_displayAreaAttributeMaps_(::zserio::NullOpt),
        m_displayAreaAttributeSets_(::zserio::NullOpt),
        m_displayLineAttributeMaps_(::zserio::NullOpt),
        m_displayLineAttributeSets_(::zserio::NullOpt),
        m_displayPointAttributeMaps_(::zserio::NullOpt),
        m_displayPointAttributeSets_(::zserio::NullOpt)
{
}

DisplayAttributeLayer::DisplayAttributeLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_baseElevation_(readBaseElevation(in)),
        m_displayAreaAttributeMaps_(readDisplayAreaAttributeMaps(in, allocator)),
        m_displayAreaAttributeSets_(readDisplayAreaAttributeSets(in, allocator)),
        m_displayLineAttributeMaps_(readDisplayLineAttributeMaps(in, allocator)),
        m_displayLineAttributeSets_(readDisplayLineAttributeSets(in, allocator)),
        m_displayPointAttributeMaps_(readDisplayPointAttributeMaps(in, allocator)),
        m_displayPointAttributeSets_(readDisplayPointAttributeSets(in, allocator))
{
}

DisplayAttributeLayer::DisplayAttributeLayer(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_baseElevation_(readBaseElevation(context, in)),
        m_displayAreaAttributeMaps_(readDisplayAreaAttributeMaps(context, in, allocator)),
        m_displayAreaAttributeSets_(readDisplayAreaAttributeSets(context, in, allocator)),
        m_displayLineAttributeMaps_(readDisplayLineAttributeMaps(context, in, allocator)),
        m_displayLineAttributeSets_(readDisplayLineAttributeSets(context, in, allocator)),
        m_displayPointAttributeMaps_(readDisplayPointAttributeMaps(context, in, allocator)),
        m_displayPointAttributeSets_(readDisplayPointAttributeSets(context, in, allocator))
{
}

DisplayAttributeLayer::DisplayAttributeLayer(const DisplayAttributeLayer& other) :
        m_content_(other.m_content_),
        m_baseElevation_(other.m_baseElevation_),
        m_displayAreaAttributeMaps_(other.m_displayAreaAttributeMaps_),
        m_displayAreaAttributeSets_(other.m_displayAreaAttributeSets_),
        m_displayLineAttributeMaps_(other.m_displayLineAttributeMaps_),
        m_displayLineAttributeSets_(other.m_displayLineAttributeSets_),
        m_displayPointAttributeMaps_(other.m_displayPointAttributeMaps_),
        m_displayPointAttributeSets_(other.m_displayPointAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

DisplayAttributeLayer& DisplayAttributeLayer::operator=(const DisplayAttributeLayer& other)
{
    m_content_ = other.m_content_;
    m_baseElevation_ = other.m_baseElevation_;
    m_displayAreaAttributeMaps_ = other.m_displayAreaAttributeMaps_;
    m_displayAreaAttributeSets_ = other.m_displayAreaAttributeSets_;
    m_displayLineAttributeMaps_ = other.m_displayLineAttributeMaps_;
    m_displayLineAttributeSets_ = other.m_displayLineAttributeSets_;
    m_displayPointAttributeMaps_ = other.m_displayPointAttributeMaps_;
    m_displayPointAttributeSets_ = other.m_displayPointAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

DisplayAttributeLayer::DisplayAttributeLayer(DisplayAttributeLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_baseElevation_(::std::move(other.m_baseElevation_)),
        m_displayAreaAttributeMaps_(::std::move(other.m_displayAreaAttributeMaps_)),
        m_displayAreaAttributeSets_(::std::move(other.m_displayAreaAttributeSets_)),
        m_displayLineAttributeMaps_(::std::move(other.m_displayLineAttributeMaps_)),
        m_displayLineAttributeSets_(::std::move(other.m_displayLineAttributeSets_)),
        m_displayPointAttributeMaps_(::std::move(other.m_displayPointAttributeMaps_)),
        m_displayPointAttributeSets_(::std::move(other.m_displayPointAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

DisplayAttributeLayer& DisplayAttributeLayer::operator=(DisplayAttributeLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_baseElevation_ = ::std::move(other.m_baseElevation_);
    m_displayAreaAttributeMaps_ = ::std::move(other.m_displayAreaAttributeMaps_);
    m_displayAreaAttributeSets_ = ::std::move(other.m_displayAreaAttributeSets_);
    m_displayLineAttributeMaps_ = ::std::move(other.m_displayLineAttributeMaps_);
    m_displayLineAttributeSets_ = ::std::move(other.m_displayLineAttributeSets_);
    m_displayPointAttributeMaps_ = ::std::move(other.m_displayPointAttributeMaps_);
    m_displayPointAttributeSets_ = ::std::move(other.m_displayPointAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

DisplayAttributeLayer::DisplayAttributeLayer(::zserio::PropagateAllocatorT,
        const DisplayAttributeLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_baseElevation_(::zserio::allocatorPropagatingCopy(other.m_baseElevation_, allocator)),
        m_displayAreaAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayAreaAttributeMaps_, allocator)),
        m_displayAreaAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayAreaAttributeSets_, allocator)),
        m_displayLineAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayLineAttributeMaps_, allocator)),
        m_displayLineAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayLineAttributeSets_, allocator)),
        m_displayPointAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayPointAttributeMaps_, allocator)),
        m_displayPointAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayPointAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void DisplayAttributeLayer::initializeChildren()
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
        m_displayAreaAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
        m_displayAreaAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
        m_displayLineAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
        m_displayLineAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
        m_displayPointAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
        m_displayPointAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::display::details::metadata::DisplayAttributeLayerContent DisplayAttributeLayer::getContent() const
{
    return m_content_;
}

void DisplayAttributeLayer::setContent(::nds::display::details::metadata::DisplayAttributeLayerContent content_)
{
    m_content_ = content_;
}

::nds::display::details::types::BaseElevation DisplayAttributeLayer::getBaseElevation() const
{
    return m_baseElevation_.value();
}

void DisplayAttributeLayer::setBaseElevation(::nds::display::details::types::BaseElevation baseElevation_)
{
    m_baseElevation_ = baseElevation_;
}

bool DisplayAttributeLayer::isBaseElevationUsed() const
{
    return (isBaseElevationSet());
}

bool DisplayAttributeLayer::isBaseElevationSet() const
{
    return m_baseElevation_.hasValue();
}

void DisplayAttributeLayer::resetBaseElevation()
{
    m_baseElevation_.reset();
}

::nds::display::details::instantiations::DisplayAreaAttributeMapList& DisplayAttributeLayer::getDisplayAreaAttributeMaps()
{
    return m_displayAreaAttributeMaps_.value();
}

const ::nds::display::details::instantiations::DisplayAreaAttributeMapList& DisplayAttributeLayer::getDisplayAreaAttributeMaps() const
{
    return m_displayAreaAttributeMaps_.value();
}

void DisplayAttributeLayer::setDisplayAreaAttributeMaps(const ::nds::display::details::instantiations::DisplayAreaAttributeMapList& displayAreaAttributeMaps_)
{
    m_displayAreaAttributeMaps_ = displayAreaAttributeMaps_;
}

void DisplayAttributeLayer::setDisplayAreaAttributeMaps(::nds::display::details::instantiations::DisplayAreaAttributeMapList&& displayAreaAttributeMaps_)
{
    m_displayAreaAttributeMaps_ = ::std::move(displayAreaAttributeMaps_);
}

bool DisplayAttributeLayer::isDisplayAreaAttributeMapsUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS);
}

bool DisplayAttributeLayer::isDisplayAreaAttributeMapsSet() const
{
    return m_displayAreaAttributeMaps_.hasValue();
}

void DisplayAttributeLayer::resetDisplayAreaAttributeMaps()
{
    m_displayAreaAttributeMaps_.reset();
}

::nds::display::details::instantiations::DisplayAreaAttributeSetList& DisplayAttributeLayer::getDisplayAreaAttributeSets()
{
    return m_displayAreaAttributeSets_.value();
}

const ::nds::display::details::instantiations::DisplayAreaAttributeSetList& DisplayAttributeLayer::getDisplayAreaAttributeSets() const
{
    return m_displayAreaAttributeSets_.value();
}

void DisplayAttributeLayer::setDisplayAreaAttributeSets(const ::nds::display::details::instantiations::DisplayAreaAttributeSetList& displayAreaAttributeSets_)
{
    m_displayAreaAttributeSets_ = displayAreaAttributeSets_;
}

void DisplayAttributeLayer::setDisplayAreaAttributeSets(::nds::display::details::instantiations::DisplayAreaAttributeSetList&& displayAreaAttributeSets_)
{
    m_displayAreaAttributeSets_ = ::std::move(displayAreaAttributeSets_);
}

bool DisplayAttributeLayer::isDisplayAreaAttributeSetsUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS);
}

bool DisplayAttributeLayer::isDisplayAreaAttributeSetsSet() const
{
    return m_displayAreaAttributeSets_.hasValue();
}

void DisplayAttributeLayer::resetDisplayAreaAttributeSets()
{
    m_displayAreaAttributeSets_.reset();
}

::nds::display::details::instantiations::DisplayLineAttributeMapList& DisplayAttributeLayer::getDisplayLineAttributeMaps()
{
    return m_displayLineAttributeMaps_.value();
}

const ::nds::display::details::instantiations::DisplayLineAttributeMapList& DisplayAttributeLayer::getDisplayLineAttributeMaps() const
{
    return m_displayLineAttributeMaps_.value();
}

void DisplayAttributeLayer::setDisplayLineAttributeMaps(const ::nds::display::details::instantiations::DisplayLineAttributeMapList& displayLineAttributeMaps_)
{
    m_displayLineAttributeMaps_ = displayLineAttributeMaps_;
}

void DisplayAttributeLayer::setDisplayLineAttributeMaps(::nds::display::details::instantiations::DisplayLineAttributeMapList&& displayLineAttributeMaps_)
{
    m_displayLineAttributeMaps_ = ::std::move(displayLineAttributeMaps_);
}

bool DisplayAttributeLayer::isDisplayLineAttributeMapsUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS);
}

bool DisplayAttributeLayer::isDisplayLineAttributeMapsSet() const
{
    return m_displayLineAttributeMaps_.hasValue();
}

void DisplayAttributeLayer::resetDisplayLineAttributeMaps()
{
    m_displayLineAttributeMaps_.reset();
}

::nds::display::details::instantiations::DisplayLineAttributeSetList& DisplayAttributeLayer::getDisplayLineAttributeSets()
{
    return m_displayLineAttributeSets_.value();
}

const ::nds::display::details::instantiations::DisplayLineAttributeSetList& DisplayAttributeLayer::getDisplayLineAttributeSets() const
{
    return m_displayLineAttributeSets_.value();
}

void DisplayAttributeLayer::setDisplayLineAttributeSets(const ::nds::display::details::instantiations::DisplayLineAttributeSetList& displayLineAttributeSets_)
{
    m_displayLineAttributeSets_ = displayLineAttributeSets_;
}

void DisplayAttributeLayer::setDisplayLineAttributeSets(::nds::display::details::instantiations::DisplayLineAttributeSetList&& displayLineAttributeSets_)
{
    m_displayLineAttributeSets_ = ::std::move(displayLineAttributeSets_);
}

bool DisplayAttributeLayer::isDisplayLineAttributeSetsUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS);
}

bool DisplayAttributeLayer::isDisplayLineAttributeSetsSet() const
{
    return m_displayLineAttributeSets_.hasValue();
}

void DisplayAttributeLayer::resetDisplayLineAttributeSets()
{
    m_displayLineAttributeSets_.reset();
}

::nds::display::details::instantiations::DisplayPointAttributeMapList& DisplayAttributeLayer::getDisplayPointAttributeMaps()
{
    return m_displayPointAttributeMaps_.value();
}

const ::nds::display::details::instantiations::DisplayPointAttributeMapList& DisplayAttributeLayer::getDisplayPointAttributeMaps() const
{
    return m_displayPointAttributeMaps_.value();
}

void DisplayAttributeLayer::setDisplayPointAttributeMaps(const ::nds::display::details::instantiations::DisplayPointAttributeMapList& displayPointAttributeMaps_)
{
    m_displayPointAttributeMaps_ = displayPointAttributeMaps_;
}

void DisplayAttributeLayer::setDisplayPointAttributeMaps(::nds::display::details::instantiations::DisplayPointAttributeMapList&& displayPointAttributeMaps_)
{
    m_displayPointAttributeMaps_ = ::std::move(displayPointAttributeMaps_);
}

bool DisplayAttributeLayer::isDisplayPointAttributeMapsUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS);
}

bool DisplayAttributeLayer::isDisplayPointAttributeMapsSet() const
{
    return m_displayPointAttributeMaps_.hasValue();
}

void DisplayAttributeLayer::resetDisplayPointAttributeMaps()
{
    m_displayPointAttributeMaps_.reset();
}

::nds::display::details::instantiations::DisplayPointAttributeSetList& DisplayAttributeLayer::getDisplayPointAttributeSets()
{
    return m_displayPointAttributeSets_.value();
}

const ::nds::display::details::instantiations::DisplayPointAttributeSetList& DisplayAttributeLayer::getDisplayPointAttributeSets() const
{
    return m_displayPointAttributeSets_.value();
}

void DisplayAttributeLayer::setDisplayPointAttributeSets(const ::nds::display::details::instantiations::DisplayPointAttributeSetList& displayPointAttributeSets_)
{
    m_displayPointAttributeSets_ = displayPointAttributeSets_;
}

void DisplayAttributeLayer::setDisplayPointAttributeSets(::nds::display::details::instantiations::DisplayPointAttributeSetList&& displayPointAttributeSets_)
{
    m_displayPointAttributeSets_ = ::std::move(displayPointAttributeSets_);
}

bool DisplayAttributeLayer::isDisplayPointAttributeSetsUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS);
}

bool DisplayAttributeLayer::isDisplayPointAttributeSetsSet() const
{
    return m_displayPointAttributeSets_.hasValue();
}

void DisplayAttributeLayer::resetDisplayPointAttributeSets()
{
    m_displayPointAttributeSets_.reset();
}

::nds::system::types::LayerType DisplayAttributeLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void DisplayAttributeLayer::initPackingContext(DisplayAttributeLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if (isBaseElevationSet())
    {
        context.getBaseElevation().init<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BaseElevation>>(m_baseElevation_.value());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        m_displayAreaAttributeMaps_.value().initPackingContext(context.getDisplayAreaAttributeMaps());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        m_displayAreaAttributeSets_.value().initPackingContext(context.getDisplayAreaAttributeSets());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        m_displayLineAttributeMaps_.value().initPackingContext(context.getDisplayLineAttributeMaps());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        m_displayLineAttributeSets_.value().initPackingContext(context.getDisplayLineAttributeSets());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        m_displayPointAttributeMaps_.value().initPackingContext(context.getDisplayPointAttributeMaps());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        m_displayPointAttributeSets_.value().initPackingContext(context.getDisplayPointAttributeSets());
    }
}

size_t DisplayAttributeLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isBaseElevationSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarInt32(m_baseElevation_.value());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition += m_displayAreaAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition += m_displayAreaAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        endBitPosition += m_displayLineAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        endBitPosition += m_displayLineAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        endBitPosition += m_displayPointAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition += m_displayPointAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayAttributeLayer::bitSizeOf(DisplayAttributeLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += 1;
    if (isBaseElevationSet())
    {
        endBitPosition += context.getBaseElevation().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BaseElevation>>(m_baseElevation_.value());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition += m_displayAreaAttributeMaps_.value().bitSizeOf(context.getDisplayAreaAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition += m_displayAreaAttributeSets_.value().bitSizeOf(context.getDisplayAreaAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        endBitPosition += m_displayLineAttributeMaps_.value().bitSizeOf(context.getDisplayLineAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        endBitPosition += m_displayLineAttributeSets_.value().bitSizeOf(context.getDisplayLineAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        endBitPosition += m_displayPointAttributeMaps_.value().bitSizeOf(context.getDisplayPointAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition += m_displayPointAttributeSets_.value().bitSizeOf(context.getDisplayPointAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayAttributeLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isBaseElevationSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarInt32(m_baseElevation_.value());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition = m_displayAreaAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition = m_displayAreaAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        endBitPosition = m_displayLineAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        endBitPosition = m_displayLineAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        endBitPosition = m_displayPointAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition = m_displayPointAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t DisplayAttributeLayer::initializeOffsets(DisplayAttributeLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += 1;
    if (isBaseElevationSet())
    {
        endBitPosition += context.getBaseElevation().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BaseElevation>>(m_baseElevation_.value());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        endBitPosition = m_displayAreaAttributeMaps_.value().initializeOffsets(context.getDisplayAreaAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition = m_displayAreaAttributeSets_.value().initializeOffsets(context.getDisplayAreaAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        endBitPosition = m_displayLineAttributeMaps_.value().initializeOffsets(context.getDisplayLineAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        endBitPosition = m_displayLineAttributeSets_.value().initializeOffsets(context.getDisplayLineAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        endBitPosition = m_displayPointAttributeMaps_.value().initializeOffsets(context.getDisplayPointAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition = m_displayPointAttributeSets_.value().initializeOffsets(context.getDisplayPointAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool DisplayAttributeLayer::operator==(const DisplayAttributeLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isBaseElevationUsed() ? !other.isBaseElevationUsed() : (m_baseElevation_ == other.m_baseElevation_)) &&
                (!isDisplayAreaAttributeMapsUsed() ? !other.isDisplayAreaAttributeMapsUsed() : (m_displayAreaAttributeMaps_ == other.m_displayAreaAttributeMaps_)) &&
                (!isDisplayAreaAttributeSetsUsed() ? !other.isDisplayAreaAttributeSetsUsed() : (m_displayAreaAttributeSets_ == other.m_displayAreaAttributeSets_)) &&
                (!isDisplayLineAttributeMapsUsed() ? !other.isDisplayLineAttributeMapsUsed() : (m_displayLineAttributeMaps_ == other.m_displayLineAttributeMaps_)) &&
                (!isDisplayLineAttributeSetsUsed() ? !other.isDisplayLineAttributeSetsUsed() : (m_displayLineAttributeSets_ == other.m_displayLineAttributeSets_)) &&
                (!isDisplayPointAttributeMapsUsed() ? !other.isDisplayPointAttributeMapsUsed() : (m_displayPointAttributeMaps_ == other.m_displayPointAttributeMaps_)) &&
                (!isDisplayPointAttributeSetsUsed() ? !other.isDisplayPointAttributeSetsUsed() : (m_displayPointAttributeSets_ == other.m_displayPointAttributeSets_));
    }

    return true;
}

uint32_t DisplayAttributeLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isBaseElevationUsed())
        result = ::zserio::calcHashCode(result, m_baseElevation_);
    if (isDisplayAreaAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayAreaAttributeMaps_);
    if (isDisplayAreaAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayAreaAttributeSets_);
    if (isDisplayLineAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineAttributeMaps_);
    if (isDisplayLineAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineAttributeSets_);
    if (isDisplayPointAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayPointAttributeMaps_);
    if (isDisplayPointAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayPointAttributeSets_);

    return result;
}

void DisplayAttributeLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if (isBaseElevationSet())
    {
        out.writeBool(true);
        out.writeVarInt32(m_baseElevation_.value());
    }
    else
    {
        out.writeBool(false);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        // check parameters
        if (m_displayAreaAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayAreaAttributeMaps: ") <<
                    m_displayAreaAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayAreaAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        // check parameters
        if (m_displayAreaAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayAreaAttributeSets: ") <<
                    m_displayAreaAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayAreaAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        // check parameters
        if (m_displayLineAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayLineAttributeMaps: ") <<
                    m_displayLineAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayLineAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        // check parameters
        if (m_displayLineAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayLineAttributeSets: ") <<
                    m_displayLineAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayLineAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        // check parameters
        if (m_displayPointAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayPointAttributeMaps: ") <<
                    m_displayPointAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayPointAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        // check parameters
        if (m_displayPointAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayPointAttributeSets: ") <<
                    m_displayPointAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayPointAttributeSets_.value().write(out);
    }
}

void DisplayAttributeLayer::write(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if (isBaseElevationSet())
    {
        out.writeBool(true);
        context.getBaseElevation().write<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BaseElevation>>(out, m_baseElevation_.value());
    }
    else
    {
        out.writeBool(false);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        // check parameters
        if (m_displayAreaAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayAreaAttributeMaps: ") <<
                    m_displayAreaAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayAreaAttributeMaps_.value().write(context.getDisplayAreaAttributeMaps(), out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        // check parameters
        if (m_displayAreaAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayAreaAttributeSets: ") <<
                    m_displayAreaAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayAreaAttributeSets_.value().write(context.getDisplayAreaAttributeSets(), out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        // check parameters
        if (m_displayLineAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayLineAttributeMaps: ") <<
                    m_displayLineAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayLineAttributeMaps_.value().write(context.getDisplayLineAttributeMaps(), out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        // check parameters
        if (m_displayLineAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayLineAttributeSets: ") <<
                    m_displayLineAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayLineAttributeSets_.value().write(context.getDisplayLineAttributeSets(), out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        // check parameters
        if (m_displayPointAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayPointAttributeMaps: ") <<
                    m_displayPointAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayPointAttributeMaps_.value().write(context.getDisplayPointAttributeMaps(), out);
    }

    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        // check parameters
        if (m_displayPointAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayAttributeLayer.displayPointAttributeSets: ") <<
                    m_displayPointAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_displayPointAttributeSets_.value().write(context.getDisplayPointAttributeSets(), out);
    }
}

::nds::display::details::metadata::DisplayAttributeLayerContent DisplayAttributeLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::details::metadata::DisplayAttributeLayerContent(in);
}

::nds::display::details::metadata::DisplayAttributeLayerContent DisplayAttributeLayer::readContent(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::details::metadata::DisplayAttributeLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::display::details::types::BaseElevation> DisplayAttributeLayer::readBaseElevation(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::types::BaseElevation>(static_cast<::nds::display::details::types::BaseElevation>(in.readVarInt32()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::types::BaseElevation>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::types::BaseElevation> DisplayAttributeLayer::readBaseElevation(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::types::BaseElevation>(context.getBaseElevation().read<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BaseElevation>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::types::BaseElevation>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMapList> DisplayAttributeLayer::readDisplayAreaAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMapList>(::nds::display::details::instantiations::DisplayAreaAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMapList> DisplayAttributeLayer::readDisplayAreaAttributeMaps(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMapList>(::nds::display::details::instantiations::DisplayAreaAttributeMapList(context.getDisplayAreaAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeSetList> DisplayAttributeLayer::readDisplayAreaAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeSetList>(::nds::display::details::instantiations::DisplayAreaAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeSetList> DisplayAttributeLayer::readDisplayAreaAttributeSets(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeSetList>(::nds::display::details::instantiations::DisplayAreaAttributeSetList(context.getDisplayAreaAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMapList> DisplayAttributeLayer::readDisplayLineAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMapList>(::nds::display::details::instantiations::DisplayLineAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMapList> DisplayAttributeLayer::readDisplayLineAttributeMaps(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMapList>(::nds::display::details::instantiations::DisplayLineAttributeMapList(context.getDisplayLineAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeSetList> DisplayAttributeLayer::readDisplayLineAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeSetList>(::nds::display::details::instantiations::DisplayLineAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeSetList> DisplayAttributeLayer::readDisplayLineAttributeSets(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeSetList>(::nds::display::details::instantiations::DisplayLineAttributeSetList(context.getDisplayLineAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMapList> DisplayAttributeLayer::readDisplayPointAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMapList>(::nds::display::details::instantiations::DisplayPointAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMapList> DisplayAttributeLayer::readDisplayPointAttributeMaps(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMapList>(::nds::display::details::instantiations::DisplayPointAttributeMapList(context.getDisplayPointAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeSetList> DisplayAttributeLayer::readDisplayPointAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeSetList>(::nds::display::details::instantiations::DisplayPointAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeSetList> DisplayAttributeLayer::readDisplayPointAttributeSets(DisplayAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeSetList>(::nds::display::details::instantiations::DisplayPointAttributeSetList(context.getDisplayPointAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace details
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/details/layer/Display3dAttributeLayer.h>
#include <nds/display/details/metadata/Display3dAttributeLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace display
{
namespace details
{
namespace layer
{

Display3dAttributeLayer::Display3dAttributeLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::display::details::metadata::Display3dAttributeLayerContent()),
        m_display3dMeshAttributeMaps_(::zserio::NullOpt),
        m_display3dMeshAttributeSets_(::zserio::NullOpt)
{
}

Display3dAttributeLayer::Display3dAttributeLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_display3dMeshAttributeMaps_(readDisplay3dMeshAttributeMaps(in, allocator)),
        m_display3dMeshAttributeSets_(readDisplay3dMeshAttributeSets(in, allocator))
{
}

Display3dAttributeLayer::Display3dAttributeLayer(Display3dAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_display3dMeshAttributeMaps_(readDisplay3dMeshAttributeMaps(context, in, allocator)),
        m_display3dMeshAttributeSets_(readDisplay3dMeshAttributeSets(context, in, allocator))
{
}

Display3dAttributeLayer::Display3dAttributeLayer(const Display3dAttributeLayer& other) :
        m_content_(other.m_content_),
        m_display3dMeshAttributeMaps_(other.m_display3dMeshAttributeMaps_),
        m_display3dMeshAttributeSets_(other.m_display3dMeshAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Display3dAttributeLayer& Display3dAttributeLayer::operator=(const Display3dAttributeLayer& other)
{
    m_content_ = other.m_content_;
    m_display3dMeshAttributeMaps_ = other.m_display3dMeshAttributeMaps_;
    m_display3dMeshAttributeSets_ = other.m_display3dMeshAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Display3dAttributeLayer::Display3dAttributeLayer(Display3dAttributeLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_display3dMeshAttributeMaps_(::std::move(other.m_display3dMeshAttributeMaps_)),
        m_display3dMeshAttributeSets_(::std::move(other.m_display3dMeshAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

Display3dAttributeLayer& Display3dAttributeLayer::operator=(Display3dAttributeLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_display3dMeshAttributeMaps_ = ::std::move(other.m_display3dMeshAttributeMaps_);
    m_display3dMeshAttributeSets_ = ::std::move(other.m_display3dMeshAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

Display3dAttributeLayer::Display3dAttributeLayer(::zserio::PropagateAllocatorT,
        const Display3dAttributeLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_display3dMeshAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_display3dMeshAttributeMaps_, allocator)),
        m_display3dMeshAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_display3dMeshAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void Display3dAttributeLayer::initializeChildren()
{
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
        m_display3dMeshAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
        m_display3dMeshAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::display::details::metadata::Display3dAttributeLayerContent Display3dAttributeLayer::getContent() const
{
    return m_content_;
}

void Display3dAttributeLayer::setContent(::nds::display::details::metadata::Display3dAttributeLayerContent content_)
{
    m_content_ = content_;
}

::nds::display::details::instantiations::Display3dMeshAttributeMapList& Display3dAttributeLayer::getDisplay3dMeshAttributeMaps()
{
    return m_display3dMeshAttributeMaps_.value();
}

const ::nds::display::details::instantiations::Display3dMeshAttributeMapList& Display3dAttributeLayer::getDisplay3dMeshAttributeMaps() const
{
    return m_display3dMeshAttributeMaps_.value();
}

void Display3dAttributeLayer::setDisplay3dMeshAttributeMaps(const ::nds::display::details::instantiations::Display3dMeshAttributeMapList& display3dMeshAttributeMaps_)
{
    m_display3dMeshAttributeMaps_ = display3dMeshAttributeMaps_;
}

void Display3dAttributeLayer::setDisplay3dMeshAttributeMaps(::nds::display::details::instantiations::Display3dMeshAttributeMapList&& display3dMeshAttributeMaps_)
{
    m_display3dMeshAttributeMaps_ = ::std::move(display3dMeshAttributeMaps_);
}

bool Display3dAttributeLayer::isDisplay3dMeshAttributeMapsUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS);
}

bool Display3dAttributeLayer::isDisplay3dMeshAttributeMapsSet() const
{
    return m_display3dMeshAttributeMaps_.hasValue();
}

void Display3dAttributeLayer::resetDisplay3dMeshAttributeMaps()
{
    m_display3dMeshAttributeMaps_.reset();
}

::nds::display::details::instantiations::Display3dMeshAttributeSetList& Display3dAttributeLayer::getDisplay3dMeshAttributeSets()
{
    return m_display3dMeshAttributeSets_.value();
}

const ::nds::display::details::instantiations::Display3dMeshAttributeSetList& Display3dAttributeLayer::getDisplay3dMeshAttributeSets() const
{
    return m_display3dMeshAttributeSets_.value();
}

void Display3dAttributeLayer::setDisplay3dMeshAttributeSets(const ::nds::display::details::instantiations::Display3dMeshAttributeSetList& display3dMeshAttributeSets_)
{
    m_display3dMeshAttributeSets_ = display3dMeshAttributeSets_;
}

void Display3dAttributeLayer::setDisplay3dMeshAttributeSets(::nds::display::details::instantiations::Display3dMeshAttributeSetList&& display3dMeshAttributeSets_)
{
    m_display3dMeshAttributeSets_ = ::std::move(display3dMeshAttributeSets_);
}

bool Display3dAttributeLayer::isDisplay3dMeshAttributeSetsUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS);
}

bool Display3dAttributeLayer::isDisplay3dMeshAttributeSetsSet() const
{
    return m_display3dMeshAttributeSets_.hasValue();
}

void Display3dAttributeLayer::resetDisplay3dMeshAttributeSets()
{
    m_display3dMeshAttributeSets_.reset();
}

::nds::system::types::LayerType Display3dAttributeLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void Display3dAttributeLayer::initPackingContext(Display3dAttributeLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        m_display3dMeshAttributeMaps_.value().initPackingContext(context.getDisplay3dMeshAttributeMaps());
    }
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        m_display3dMeshAttributeSets_.value().initPackingContext(context.getDisplay3dMeshAttributeSets());
    }
}

size_t Display3dAttributeLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        endBitPosition += m_display3dMeshAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        endBitPosition += m_display3dMeshAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3dAttributeLayer::bitSizeOf(Display3dAttributeLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        endBitPosition += m_display3dMeshAttributeMaps_.value().bitSizeOf(context.getDisplay3dMeshAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        endBitPosition += m_display3dMeshAttributeSets_.value().bitSizeOf(context.getDisplay3dMeshAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3dAttributeLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        endBitPosition = m_display3dMeshAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        endBitPosition = m_display3dMeshAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t Display3dAttributeLayer::initializeOffsets(Display3dAttributeLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        endBitPosition = m_display3dMeshAttributeMaps_.value().initializeOffsets(context.getDisplay3dMeshAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        endBitPosition = m_display3dMeshAttributeSets_.value().initializeOffsets(context.getDisplay3dMeshAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool Display3dAttributeLayer::operator==(const Display3dAttributeLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isDisplay3dMeshAttributeMapsUsed() ? !other.isDisplay3dMeshAttributeMapsUsed() : (m_display3dMeshAttributeMaps_ == other.m_display3dMeshAttributeMaps_)) &&
                (!isDisplay3dMeshAttributeSetsUsed() ? !other.isDisplay3dMeshAttributeSetsUsed() : (m_display3dMeshAttributeSets_ == other.m_display3dMeshAttributeSets_));
    }

    return true;
}

uint32_t Display3dAttributeLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isDisplay3dMeshAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_display3dMeshAttributeMaps_);
    if (isDisplay3dMeshAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_display3dMeshAttributeSets_);

    return result;
}

void Display3dAttributeLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        // check parameters
        if (m_display3dMeshAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field Display3dAttributeLayer.display3dMeshAttributeMaps: ") <<
                    m_display3dMeshAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_display3dMeshAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        // check parameters
        if (m_display3dMeshAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field Display3dAttributeLayer.display3dMeshAttributeSets: ") <<
                    m_display3dMeshAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_display3dMeshAttributeSets_.value().write(out);
    }
}

void Display3dAttributeLayer::write(Display3dAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        // check parameters
        if (m_display3dMeshAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field Display3dAttributeLayer.display3dMeshAttributeMaps: ") <<
                    m_display3dMeshAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_display3dMeshAttributeMaps_.value().write(context.getDisplay3dMeshAttributeMaps(), out);
    }

    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        // check parameters
        if (m_display3dMeshAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field Display3dAttributeLayer.display3dMeshAttributeSets: ") <<
                    m_display3dMeshAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_display3dMeshAttributeSets_.value().write(context.getDisplay3dMeshAttributeSets(), out);
    }
}

::nds::display::details::metadata::Display3dAttributeLayerContent Display3dAttributeLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::details::metadata::Display3dAttributeLayerContent(in);
}

::nds::display::details::metadata::Display3dAttributeLayerContent Display3dAttributeLayer::readContent(Display3dAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::details::metadata::Display3dAttributeLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMapList> Display3dAttributeLayer::readDisplay3dMeshAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMapList>(::nds::display::details::instantiations::Display3dMeshAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMapList> Display3dAttributeLayer::readDisplay3dMeshAttributeMaps(Display3dAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMapList>(::nds::display::details::instantiations::Display3dMeshAttributeMapList(context.getDisplay3dMeshAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeSetList> Display3dAttributeLayer::readDisplay3dMeshAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeSetList>(::nds::display::details::instantiations::Display3dMeshAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeSetList> Display3dAttributeLayer::readDisplay3dMeshAttributeSets(Display3dAttributeLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeSetList>(::nds::display::details::instantiations::Display3dMeshAttributeSetList(context.getDisplay3dMeshAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace details
} // namespace display
} // namespace nds
