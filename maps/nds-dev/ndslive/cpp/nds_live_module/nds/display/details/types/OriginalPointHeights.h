/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_DETAILS_TYPES_ORIGINAL_POINT_HEIGHTS_H
#define NDS_DISPLAY_DETAILS_TYPES_ORIGINAL_POINT_HEIGHTS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

namespace nds
{
namespace display
{
namespace details
{
namespace types
{

class OriginalPointHeights
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    OriginalPointHeights() noexcept :
            OriginalPointHeights(allocator_type())
    {}

    explicit OriginalPointHeights(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_pointHeight = ::zserio::vector<int16_t>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_pointHeight, OriginalPointHeights, allocator_type> = 0>
    explicit OriginalPointHeights(
            ZSERIO_T_pointHeight&& pointHeight_,
            const allocator_type& allocator = allocator_type()) :
            OriginalPointHeights(allocator)
    {
        m_pointHeight_ = ZserioArrayType_pointHeight(::std::forward<ZSERIO_T_pointHeight>(pointHeight_));
    }

    explicit OriginalPointHeights(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit OriginalPointHeights(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~OriginalPointHeights() = default;

    OriginalPointHeights(const OriginalPointHeights&) = default;
    OriginalPointHeights& operator=(const OriginalPointHeights&) = default;

    OriginalPointHeights(OriginalPointHeights&&) = default;
    OriginalPointHeights& operator=(OriginalPointHeights&&) = default;

    OriginalPointHeights(::zserio::PropagateAllocatorT,
            const OriginalPointHeights& other, const allocator_type& allocator);

    const ::zserio::vector<int16_t>& getPointHeight() const;
    ::zserio::vector<int16_t>& getPointHeight();
    void setPointHeight(const ::zserio::vector<int16_t>& pointHeight_);
    void setPointHeight(::zserio::vector<int16_t>&& pointHeight_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const OriginalPointHeights& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_pointHeight = ::zserio::Array<::zserio::vector<int16_t>, ::zserio::VarIntNNArrayTraits<int16_t>, ::zserio::ArrayType::NORMAL>;

    ZserioArrayType_pointHeight readPointHeight(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_pointHeight readPointHeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_pointHeight m_pointHeight_;
};

} // namespace types
} // namespace details
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_DETAILS_TYPES_ORIGINAL_POINT_HEIGHTS_H
