/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/details/attributes/DisplayAreaAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for DisplayAreaAttributeType enumeration.
constexpr ::std::array<const char*, 10> EnumTraits<::nds::display::details::attributes::DisplayAreaAttributeType>::names;
constexpr ::std::array<::nds::display::details::attributes::DisplayAreaAttributeType, 10> EnumTraits<::nds::display::details::attributes::DisplayAreaAttributeType>::values;
constexpr const char* EnumTraits<::nds::display::details::attributes::DisplayAreaAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    switch (value)
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        return 0;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        return 1;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        return 2;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        return 3;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        return 4;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        return 5;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        return 6;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        return 7;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        return 8;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        return 9;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration DisplayAreaAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::display::details::attributes::DisplayAreaAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::display::details::attributes::DisplayAreaAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::display::details::attributes::DisplayAreaAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
        return static_cast<::nds::display::details::attributes::DisplayAreaAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration DisplayAreaAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::display::details::attributes::DisplayAreaAttributeType>(::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayAreaAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayAreaAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::display::details::attributes::DisplayAreaAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::attributes::DisplayAreaAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::display::details::attributes::DisplayAreaAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::display::details::attributes::DisplayAreaAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::attributes::DisplayAreaAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayAreaAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::display::details::attributes::DisplayAreaAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayAreaAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/details/attributes/DisplayLineAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for DisplayLineAttributeType enumeration.
constexpr ::std::array<const char*, 5> EnumTraits<::nds::display::details::attributes::DisplayLineAttributeType>::names;
constexpr ::std::array<::nds::display::details::attributes::DisplayLineAttributeType, 5> EnumTraits<::nds::display::details::attributes::DisplayLineAttributeType>::values;
constexpr const char* EnumTraits<::nds::display::details::attributes::DisplayLineAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::display::details::attributes::DisplayLineAttributeType value)
{
    switch (value)
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        return 0;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        return 1;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        return 2;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        return 3;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        return 4;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration DisplayLineAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::display::details::attributes::DisplayLineAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::display::details::attributes::DisplayLineAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::display::details::attributes::DisplayLineAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
        return static_cast<::nds::display::details::attributes::DisplayLineAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration DisplayLineAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::display::details::attributes::DisplayLineAttributeType>(::nds::display::details::attributes::DisplayLineAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::display::details::attributes::DisplayLineAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayLineAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::display::details::attributes::DisplayLineAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::display::details::attributes::DisplayLineAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayLineAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::display::details::attributes::DisplayLineAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::display::details::attributes::DisplayLineAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::display::details::attributes::DisplayLineAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::attributes::DisplayLineAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::display::details::attributes::DisplayLineAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::display::details::attributes::DisplayLineAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::attributes::DisplayLineAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayLineAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::display::details::attributes::DisplayLineAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::display::details::attributes::DisplayLineAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayLineAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/details/attributes/DisplayPointAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for DisplayPointAttributeType enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::display::details::attributes::DisplayPointAttributeType>::names;
constexpr ::std::array<::nds::display::details::attributes::DisplayPointAttributeType, 4> EnumTraits<::nds::display::details::attributes::DisplayPointAttributeType>::values;
constexpr const char* EnumTraits<::nds::display::details::attributes::DisplayPointAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::display::details::attributes::DisplayPointAttributeType value)
{
    switch (value)
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        return 0;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        return 1;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        return 2;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration DisplayPointAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::display::details::attributes::DisplayPointAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::display::details::attributes::DisplayPointAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::display::details::attributes::DisplayPointAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
        return static_cast<::nds::display::details::attributes::DisplayPointAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration DisplayPointAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::display::details::attributes::DisplayPointAttributeType>(::nds::display::details::attributes::DisplayPointAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::display::details::attributes::DisplayPointAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayPointAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::display::details::attributes::DisplayPointAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::display::details::attributes::DisplayPointAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayPointAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::display::details::attributes::DisplayPointAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::display::details::attributes::DisplayPointAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::display::details::attributes::DisplayPointAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::attributes::DisplayPointAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::display::details::attributes::DisplayPointAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::display::details::attributes::DisplayPointAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::attributes::DisplayPointAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayPointAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::display::details::attributes::DisplayPointAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::display::details::attributes::DisplayPointAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::DisplayPointAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/details/attributes/Display3dMeshAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for Display3dMeshAttributeType enumeration.
constexpr ::std::array<const char*, 2> EnumTraits<::nds::display::details::attributes::Display3dMeshAttributeType>::names;
constexpr ::std::array<::nds::display::details::attributes::Display3dMeshAttributeType, 2> EnumTraits<::nds::display::details::attributes::Display3dMeshAttributeType>::values;
constexpr const char* EnumTraits<::nds::display::details::attributes::Display3dMeshAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    switch (value)
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        return 0;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        return 1;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Display3dMeshAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::display::details::attributes::Display3dMeshAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::display::details::attributes::Display3dMeshAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::display::details::attributes::Display3dMeshAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
        return static_cast<::nds::display::details::attributes::Display3dMeshAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration Display3dMeshAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::display::details::attributes::Display3dMeshAttributeType>(::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::Display3dMeshAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::Display3dMeshAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::display::details::attributes::Display3dMeshAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::attributes::Display3dMeshAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::display::details::attributes::Display3dMeshAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::display::details::attributes::Display3dMeshAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::display::details::attributes::Display3dMeshAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::Display3dMeshAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::display::details::attributes::Display3dMeshAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::display::details::attributes::Display3dMeshAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/details/attributes/DisplayAreaAttributeValue.h>

namespace nds
{
namespace display
{
namespace details
{
namespace attributes
{

DisplayAreaAttributeValue::DisplayAreaAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

DisplayAreaAttributeValue::DisplayAreaAttributeValue(::zserio::BitStreamReader& in,
        ::nds::display::details::attributes::DisplayAreaAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

DisplayAreaAttributeValue::DisplayAreaAttributeValue(DisplayAreaAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::display::details::attributes::DisplayAreaAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

DisplayAreaAttributeValue::DisplayAreaAttributeValue(const DisplayAreaAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

DisplayAreaAttributeValue& DisplayAreaAttributeValue::operator=(const DisplayAreaAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

DisplayAreaAttributeValue::DisplayAreaAttributeValue(DisplayAreaAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

DisplayAreaAttributeValue& DisplayAreaAttributeValue::operator=(DisplayAreaAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

DisplayAreaAttributeValue::DisplayAreaAttributeValue(::zserio::PropagateAllocatorT,
        const DisplayAreaAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void DisplayAreaAttributeValue::initialize(
        ::nds::display::details::attributes::DisplayAreaAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool DisplayAreaAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::display::details::attributes::DisplayAreaAttributeType DisplayAreaAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'DisplayAreaAttributeValue' is not initialized!");

    return m_type_;
}

::nds::display::details::types::DrawingOrder& DisplayAreaAttributeValue::getDrawingOrder()
{
    return m_objectChoice.get<::nds::display::details::types::DrawingOrder>();
}

const ::nds::display::details::types::DrawingOrder& DisplayAreaAttributeValue::getDrawingOrder() const
{
    return m_objectChoice.get<::nds::display::details::types::DrawingOrder>();
}

void DisplayAreaAttributeValue::setDrawingOrder(const ::nds::display::details::types::DrawingOrder& drawingOrder_)
{
    m_objectChoice = drawingOrder_;
}

void DisplayAreaAttributeValue::setDrawingOrder(::nds::display::details::types::DrawingOrder&& drawingOrder_)
{
    m_objectChoice = ::std::move(drawingOrder_);
}

::nds::display::details::types::BuildingFloorCount DisplayAreaAttributeValue::getBuildingFloorCount() const
{
    return m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>();
}

void DisplayAreaAttributeValue::setBuildingFloorCount(::nds::display::details::types::BuildingFloorCount buildingFloorCount_)
{
    m_objectChoice = buildingFloorCount_;
}

::nds::display::details::types::BuildingHeight DisplayAreaAttributeValue::getBuildingHeight() const
{
    return m_objectChoice.get<::nds::display::details::types::BuildingHeight>();
}

void DisplayAreaAttributeValue::setBuildingHeight(::nds::display::details::types::BuildingHeight buildingHeight_)
{
    m_objectChoice = buildingHeight_;
}

::nds::display::details::types::GroundHeight DisplayAreaAttributeValue::getGroundHeight() const
{
    return m_objectChoice.get<::nds::display::details::types::GroundHeight>();
}

void DisplayAreaAttributeValue::setGroundHeight(::nds::display::details::types::GroundHeight groundHeight_)
{
    m_objectChoice = groundHeight_;
}

::nds::display::details::types::RoofColor& DisplayAreaAttributeValue::getRoofColor()
{
    return m_objectChoice.get<::nds::display::details::types::RoofColor>();
}

const ::nds::display::details::types::RoofColor& DisplayAreaAttributeValue::getRoofColor() const
{
    return m_objectChoice.get<::nds::display::details::types::RoofColor>();
}

void DisplayAreaAttributeValue::setRoofColor(const ::nds::display::details::types::RoofColor& roofColor_)
{
    m_objectChoice = roofColor_;
}

void DisplayAreaAttributeValue::setRoofColor(::nds::display::details::types::RoofColor&& roofColor_)
{
    m_objectChoice = ::std::move(roofColor_);
}

::nds::display::details::types::WallColor& DisplayAreaAttributeValue::getWallColor()
{
    return m_objectChoice.get<::nds::display::details::types::WallColor>();
}

const ::nds::display::details::types::WallColor& DisplayAreaAttributeValue::getWallColor() const
{
    return m_objectChoice.get<::nds::display::details::types::WallColor>();
}

void DisplayAreaAttributeValue::setWallColor(const ::nds::display::details::types::WallColor& wallColor_)
{
    m_objectChoice = wallColor_;
}

void DisplayAreaAttributeValue::setWallColor(::nds::display::details::types::WallColor&& wallColor_)
{
    m_objectChoice = ::std::move(wallColor_);
}

::nds::core::geometry::DeltaElevation DisplayAreaAttributeValue::getElevationDelta() const
{
    return m_objectChoice.get<::nds::core::geometry::DeltaElevation>();
}

void DisplayAreaAttributeValue::setElevationDelta(::nds::core::geometry::DeltaElevation elevationDelta_)
{
    m_objectChoice = elevationDelta_;
}

::nds::display::details::types::ElevationLevel DisplayAreaAttributeValue::getElevationLevel() const
{
    return m_objectChoice.get<::nds::display::details::types::ElevationLevel>();
}

void DisplayAreaAttributeValue::setElevationLevel(::nds::display::details::types::ElevationLevel elevationLevel_)
{
    m_objectChoice = elevationLevel_;
}

::nds::display::details::types::Has3dRepresentation& DisplayAreaAttributeValue::getHas3dRepresentation()
{
    return m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>();
}

const ::nds::display::details::types::Has3dRepresentation& DisplayAreaAttributeValue::getHas3dRepresentation() const
{
    return m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>();
}

void DisplayAreaAttributeValue::setHas3dRepresentation(const ::nds::display::details::types::Has3dRepresentation& has3dRepresentation_)
{
    m_objectChoice = has3dRepresentation_;
}

void DisplayAreaAttributeValue::setHas3dRepresentation(::nds::display::details::types::Has3dRepresentation&& has3dRepresentation_)
{
    m_objectChoice = ::std::move(has3dRepresentation_);
}

::nds::core::types::GlobalSourceId& DisplayAreaAttributeValue::getGlobalSourceId()
{
    return m_objectChoice.get<::nds::core::types::GlobalSourceId>();
}

const ::nds::core::types::GlobalSourceId& DisplayAreaAttributeValue::getGlobalSourceId() const
{
    return m_objectChoice.get<::nds::core::types::GlobalSourceId>();
}

void DisplayAreaAttributeValue::setGlobalSourceId(const ::nds::core::types::GlobalSourceId& globalSourceId_)
{
    m_objectChoice = globalSourceId_;
}

void DisplayAreaAttributeValue::setGlobalSourceId(::nds::core::types::GlobalSourceId&& globalSourceId_)
{
    m_objectChoice = ::std::move(globalSourceId_);
}

DisplayAreaAttributeValue::ChoiceTag DisplayAreaAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        return CHOICE_drawingOrder;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        return CHOICE_buildingFloorCount;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        return CHOICE_buildingHeight;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        return CHOICE_groundHeight;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        return CHOICE_roofColor;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        return CHOICE_wallColor;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        return CHOICE_elevationDelta;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        return CHOICE_elevationLevel;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        return CHOICE_has3dRepresentation;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        return CHOICE_globalSourceId;
    default:
        return UNDEFINED_CHOICE;
    }
}

void DisplayAreaAttributeValue::initPackingContext(DisplayAreaAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initPackingContext(context.getDrawingOrder());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        context.getBuildingFloorCount().init<::zserio::StdIntArrayTraits<::nds::display::details::types::BuildingFloorCount>>(m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        context.getBuildingHeight().init<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BuildingHeight>>(m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        context.getGroundHeight().init<::zserio::VarIntNNArrayTraits<::nds::display::details::types::GroundHeight>>(m_objectChoice.get<::nds::display::details::types::GroundHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        m_objectChoice.get<::nds::display::details::types::RoofColor>().initPackingContext(context.getRoofColor());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        m_objectChoice.get<::nds::display::details::types::WallColor>().initPackingContext(context.getWallColor());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        context.getElevationDelta().init<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        context.getElevationLevel().init<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }
}

size_t DisplayAreaAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::DrawingOrder>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::display::details::types::GroundHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::RoofColor>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::WallColor>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        endBitPosition += ::zserio::bitSizeOfVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t DisplayAreaAttributeValue::bitSizeOf(DisplayAreaAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::DrawingOrder>().bitSizeOf(context.getDrawingOrder(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        endBitPosition += context.getBuildingFloorCount().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::BuildingFloorCount>>(m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        endBitPosition += context.getBuildingHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BuildingHeight>>(m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        endBitPosition += context.getGroundHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::details::types::GroundHeight>>(m_objectChoice.get<::nds::display::details::types::GroundHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::RoofColor>().bitSizeOf(context.getRoofColor(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::WallColor>().bitSizeOf(context.getWallColor(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        endBitPosition += context.getElevationDelta().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        endBitPosition += context.getElevationLevel().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t DisplayAreaAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::display::details::types::GroundHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::RoofColor>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::WallColor>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        endBitPosition += ::zserio::bitSizeOfVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }

    return endBitPosition;
}

size_t DisplayAreaAttributeValue::initializeOffsets(DisplayAreaAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initializeOffsets(context.getDrawingOrder(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        endBitPosition += context.getBuildingFloorCount().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::BuildingFloorCount>>(m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        endBitPosition += context.getBuildingHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BuildingHeight>>(m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        endBitPosition += context.getGroundHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::details::types::GroundHeight>>(m_objectChoice.get<::nds::display::details::types::GroundHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::RoofColor>().initializeOffsets(context.getRoofColor(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::WallColor>().initializeOffsets(context.getWallColor(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        endBitPosition += context.getElevationDelta().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        endBitPosition += context.getElevationLevel().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }

    return endBitPosition;
}

bool DisplayAreaAttributeValue::operator==(const DisplayAreaAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::DrawingOrder>() == other.m_objectChoice.get<::nds::display::details::types::DrawingOrder>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>() == other.m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::BuildingHeight>() == other.m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::GroundHeight>() == other.m_objectChoice.get<::nds::display::details::types::GroundHeight>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::RoofColor>() == other.m_objectChoice.get<::nds::display::details::types::RoofColor>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::WallColor>() == other.m_objectChoice.get<::nds::display::details::types::WallColor>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::geometry::DeltaElevation>() == other.m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::ElevationLevel>() == other.m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>() == other.m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>());
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::GlobalSourceId>() == other.m_objectChoice.get<::nds::core::types::GlobalSourceId>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }
}

uint32_t DisplayAreaAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::DrawingOrder>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::GroundHeight>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::RoofColor>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::WallColor>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>());
            break;
        case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::GlobalSourceId>());
            break;
        default:
            break;
        }
    }

    return result;
}

void DisplayAreaAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        out.writeBits(m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>(), UINT8_C(8));
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        out.writeVarUInt32(m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        out.writeVarUInt32(m_objectChoice.get<::nds::display::details::types::GroundHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        m_objectChoice.get<::nds::display::details::types::RoofColor>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        m_objectChoice.get<::nds::display::details::types::WallColor>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        out.writeVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        out.writeSignedBits(m_objectChoice.get<::nds::display::details::types::ElevationLevel>(), UINT8_C(8));
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        out.writeString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }
}

void DisplayAreaAttributeValue::write(DisplayAreaAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().write(context.getDrawingOrder(), out);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        context.getBuildingFloorCount().write<::zserio::StdIntArrayTraits<::nds::display::details::types::BuildingFloorCount>>(out, m_objectChoice.get<::nds::display::details::types::BuildingFloorCount>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        context.getBuildingHeight().write<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BuildingHeight>>(out, m_objectChoice.get<::nds::display::details::types::BuildingHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        context.getGroundHeight().write<::zserio::VarIntNNArrayTraits<::nds::display::details::types::GroundHeight>>(out, m_objectChoice.get<::nds::display::details::types::GroundHeight>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        m_objectChoice.get<::nds::display::details::types::RoofColor>().write(context.getRoofColor(), out);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        m_objectChoice.get<::nds::display::details::types::WallColor>().write(context.getWallColor(), out);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        context.getElevationDelta().write<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(out, m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        context.getElevationLevel().write<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(out, m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        m_objectChoice.get<::nds::display::details::types::Has3dRepresentation>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        out.writeString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayAreaAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        return ::zserio::AnyHolder<>(::nds::display::details::types::DrawingOrder(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        return ::zserio::AnyHolder<>(static_cast<::nds::display::details::types::BuildingFloorCount>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        return ::zserio::AnyHolder<>(static_cast<::nds::display::details::types::BuildingHeight>(in.readVarUInt32()), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        return ::zserio::AnyHolder<>(static_cast<::nds::display::details::types::GroundHeight>(in.readVarUInt32()), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        return ::zserio::AnyHolder<>(::nds::display::details::types::RoofColor(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        return ::zserio::AnyHolder<>(::nds::display::details::types::WallColor(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::geometry::DeltaElevation>(in.readVarInt32()), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        return ::zserio::AnyHolder<>(static_cast<::nds::display::details::types::ElevationLevel>(in.readSignedBits(UINT8_C(8))), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        return ::zserio::AnyHolder<>(::nds::display::details::types::Has3dRepresentation(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayAreaAttributeValue::readObject(DisplayAreaAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        return ::zserio::AnyHolder<>(::nds::display::details::types::DrawingOrder(context.getDrawingOrder(), in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        return ::zserio::AnyHolder<>(context.getBuildingFloorCount().read<::zserio::StdIntArrayTraits<::nds::display::details::types::BuildingFloorCount>>(in), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        return ::zserio::AnyHolder<>(context.getBuildingHeight().read<::zserio::VarIntNNArrayTraits<::nds::display::details::types::BuildingHeight>>(in), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        return ::zserio::AnyHolder<>(context.getGroundHeight().read<::zserio::VarIntNNArrayTraits<::nds::display::details::types::GroundHeight>>(in), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        return ::zserio::AnyHolder<>(::nds::display::details::types::RoofColor(context.getRoofColor(), in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        return ::zserio::AnyHolder<>(::nds::display::details::types::WallColor(context.getWallColor(), in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        return ::zserio::AnyHolder<>(context.getElevationDelta().read<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(in), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        return ::zserio::AnyHolder<>(context.getElevationLevel().read<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(in), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        return ::zserio::AnyHolder<>(::nds::display::details::types::Has3dRepresentation(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayAreaAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayAreaAttributeType::DRAWING_ORDER:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::DrawingOrder>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_FLOOR_COUNT:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::BuildingFloorCount>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::BUILDING_HEIGHT:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::BuildingHeight>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GROUND_HEIGHT:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::GroundHeight>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ROOF_COLOR:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::RoofColor>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::WALL_COLOR:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::WallColor>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_DELTA:
        return ::zserio::allocatorPropagatingCopy<::nds::core::geometry::DeltaElevation>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::ELEVATION_LEVEL:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::ElevationLevel>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::HAS_3D_REPRESENTATION:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::Has3dRepresentation>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayAreaAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::GlobalSourceId>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayAreaAttributeValue!");
    }
}

} // namespace attributes
} // namespace details
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/details/attributes/DisplayLineAttributeValue.h>

namespace nds
{
namespace display
{
namespace details
{
namespace attributes
{

DisplayLineAttributeValue::DisplayLineAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

DisplayLineAttributeValue::DisplayLineAttributeValue(::zserio::BitStreamReader& in,
        ::nds::display::details::attributes::DisplayLineAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

DisplayLineAttributeValue::DisplayLineAttributeValue(DisplayLineAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::display::details::attributes::DisplayLineAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

DisplayLineAttributeValue::DisplayLineAttributeValue(const DisplayLineAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

DisplayLineAttributeValue& DisplayLineAttributeValue::operator=(const DisplayLineAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

DisplayLineAttributeValue::DisplayLineAttributeValue(DisplayLineAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

DisplayLineAttributeValue& DisplayLineAttributeValue::operator=(DisplayLineAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

DisplayLineAttributeValue::DisplayLineAttributeValue(::zserio::PropagateAllocatorT,
        const DisplayLineAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void DisplayLineAttributeValue::initialize(
        ::nds::display::details::attributes::DisplayLineAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool DisplayLineAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::display::details::attributes::DisplayLineAttributeType DisplayLineAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'DisplayLineAttributeValue' is not initialized!");

    return m_type_;
}

::nds::display::details::types::DrawingOrder& DisplayLineAttributeValue::getDrawingOrder()
{
    return m_objectChoice.get<::nds::display::details::types::DrawingOrder>();
}

const ::nds::display::details::types::DrawingOrder& DisplayLineAttributeValue::getDrawingOrder() const
{
    return m_objectChoice.get<::nds::display::details::types::DrawingOrder>();
}

void DisplayLineAttributeValue::setDrawingOrder(const ::nds::display::details::types::DrawingOrder& drawingOrder_)
{
    m_objectChoice = drawingOrder_;
}

void DisplayLineAttributeValue::setDrawingOrder(::nds::display::details::types::DrawingOrder&& drawingOrder_)
{
    m_objectChoice = ::std::move(drawingOrder_);
}

::nds::display::details::types::ZLevel DisplayLineAttributeValue::getZLevel() const
{
    return m_objectChoice.get<::nds::display::details::types::ZLevel>();
}

void DisplayLineAttributeValue::setZLevel(::nds::display::details::types::ZLevel zLevel_)
{
    m_objectChoice = zLevel_;
}

::nds::display::details::types::DetachedFromTerrain& DisplayLineAttributeValue::getDetachedFromTerrain()
{
    return m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>();
}

const ::nds::display::details::types::DetachedFromTerrain& DisplayLineAttributeValue::getDetachedFromTerrain() const
{
    return m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>();
}

void DisplayLineAttributeValue::setDetachedFromTerrain(const ::nds::display::details::types::DetachedFromTerrain& detachedFromTerrain_)
{
    m_objectChoice = detachedFromTerrain_;
}

void DisplayLineAttributeValue::setDetachedFromTerrain(::nds::display::details::types::DetachedFromTerrain&& detachedFromTerrain_)
{
    m_objectChoice = ::std::move(detachedFromTerrain_);
}

::nds::core::geometry::DeltaElevation DisplayLineAttributeValue::getElevationDelta() const
{
    return m_objectChoice.get<::nds::core::geometry::DeltaElevation>();
}

void DisplayLineAttributeValue::setElevationDelta(::nds::core::geometry::DeltaElevation elevationDelta_)
{
    m_objectChoice = elevationDelta_;
}

::nds::display::details::types::ElevationLevel DisplayLineAttributeValue::getElevationLevel() const
{
    return m_objectChoice.get<::nds::display::details::types::ElevationLevel>();
}

void DisplayLineAttributeValue::setElevationLevel(::nds::display::details::types::ElevationLevel elevationLevel_)
{
    m_objectChoice = elevationLevel_;
}

DisplayLineAttributeValue::ChoiceTag DisplayLineAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        return CHOICE_drawingOrder;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        return CHOICE_zLevel;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        return CHOICE_detachedFromTerrain;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        return CHOICE_elevationDelta;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        return CHOICE_elevationLevel;
    default:
        return UNDEFINED_CHOICE;
    }
}

void DisplayLineAttributeValue::initPackingContext(DisplayLineAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initPackingContext(context.getDrawingOrder());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        context.getZLevel().init<::zserio::StdIntArrayTraits<::nds::display::details::types::ZLevel>>(m_objectChoice.get<::nds::display::details::types::ZLevel>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        context.getElevationDelta().init<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        context.getElevationLevel().init<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }
}

size_t DisplayLineAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::DrawingOrder>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        endBitPosition += ::zserio::bitSizeOfVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        endBitPosition += UINT8_C(8);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineAttributeValue::bitSizeOf(DisplayLineAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::DrawingOrder>().bitSizeOf(context.getDrawingOrder(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        endBitPosition += context.getZLevel().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::ZLevel>>(m_objectChoice.get<::nds::display::details::types::ZLevel>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        endBitPosition += context.getElevationDelta().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        endBitPosition += context.getElevationLevel().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        endBitPosition += ::zserio::bitSizeOfVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        endBitPosition += UINT8_C(8);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }

    return endBitPosition;
}

size_t DisplayLineAttributeValue::initializeOffsets(DisplayLineAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initializeOffsets(context.getDrawingOrder(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        endBitPosition += context.getZLevel().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::ZLevel>>(m_objectChoice.get<::nds::display::details::types::ZLevel>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        endBitPosition += context.getElevationDelta().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        endBitPosition += context.getElevationLevel().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }

    return endBitPosition;
}

bool DisplayLineAttributeValue::operator==(const DisplayLineAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::DrawingOrder>() == other.m_objectChoice.get<::nds::display::details::types::DrawingOrder>());
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::ZLevel>() == other.m_objectChoice.get<::nds::display::details::types::ZLevel>());
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>() == other.m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>());
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::geometry::DeltaElevation>() == other.m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::ElevationLevel>() == other.m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }
}

uint32_t DisplayLineAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::DrawingOrder>());
            break;
        case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::ZLevel>());
            break;
        case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>());
            break;
        case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
            break;
        case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
            break;
        default:
            break;
        }
    }

    return result;
}

void DisplayLineAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        out.writeSignedBits(m_objectChoice.get<::nds::display::details::types::ZLevel>(), UINT8_C(8));
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        out.writeVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        out.writeSignedBits(m_objectChoice.get<::nds::display::details::types::ElevationLevel>(), UINT8_C(8));
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }
}

void DisplayLineAttributeValue::write(DisplayLineAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().write(context.getDrawingOrder(), out);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        context.getZLevel().write<::zserio::StdIntArrayTraits<::nds::display::details::types::ZLevel>>(out, m_objectChoice.get<::nds::display::details::types::ZLevel>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        m_objectChoice.get<::nds::display::details::types::DetachedFromTerrain>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        context.getElevationDelta().write<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(out, m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        context.getElevationLevel().write<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(out, m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayLineAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        return ::zserio::AnyHolder<>(::nds::display::details::types::DrawingOrder(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        return ::zserio::AnyHolder<>(static_cast<::nds::display::details::types::ZLevel>(in.readSignedBits(UINT8_C(8))), allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        return ::zserio::AnyHolder<>(::nds::display::details::types::DetachedFromTerrain(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::geometry::DeltaElevation>(in.readVarInt32()), allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        return ::zserio::AnyHolder<>(static_cast<::nds::display::details::types::ElevationLevel>(in.readSignedBits(UINT8_C(8))), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayLineAttributeValue::readObject(DisplayLineAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        return ::zserio::AnyHolder<>(::nds::display::details::types::DrawingOrder(context.getDrawingOrder(), in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        return ::zserio::AnyHolder<>(context.getZLevel().read<::zserio::StdIntArrayTraits<::nds::display::details::types::ZLevel>>(in), allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        return ::zserio::AnyHolder<>(::nds::display::details::types::DetachedFromTerrain(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        return ::zserio::AnyHolder<>(context.getElevationDelta().read<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(in), allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        return ::zserio::AnyHolder<>(context.getElevationLevel().read<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayLineAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayLineAttributeType::DRAWING_ORDER:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::DrawingOrder>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::Z_LEVEL:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::ZLevel>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::DETACHED_FROM_TERRAIN:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::DetachedFromTerrain>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_DELTA:
        return ::zserio::allocatorPropagatingCopy<::nds::core::geometry::DeltaElevation>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayLineAttributeType::ELEVATION_LEVEL:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::ElevationLevel>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayLineAttributeValue!");
    }
}

} // namespace attributes
} // namespace details
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/details/attributes/DisplayPointAttributeValue.h>

namespace nds
{
namespace display
{
namespace details
{
namespace attributes
{

DisplayPointAttributeValue::DisplayPointAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

DisplayPointAttributeValue::DisplayPointAttributeValue(::zserio::BitStreamReader& in,
        ::nds::display::details::attributes::DisplayPointAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

DisplayPointAttributeValue::DisplayPointAttributeValue(DisplayPointAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::display::details::attributes::DisplayPointAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

DisplayPointAttributeValue::DisplayPointAttributeValue(const DisplayPointAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

DisplayPointAttributeValue& DisplayPointAttributeValue::operator=(const DisplayPointAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

DisplayPointAttributeValue::DisplayPointAttributeValue(DisplayPointAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

DisplayPointAttributeValue& DisplayPointAttributeValue::operator=(DisplayPointAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

DisplayPointAttributeValue::DisplayPointAttributeValue(::zserio::PropagateAllocatorT,
        const DisplayPointAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void DisplayPointAttributeValue::initialize(
        ::nds::display::details::attributes::DisplayPointAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool DisplayPointAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::display::details::attributes::DisplayPointAttributeType DisplayPointAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'DisplayPointAttributeValue' is not initialized!");

    return m_type_;
}

::nds::display::details::types::Population DisplayPointAttributeValue::getPopulation() const
{
    return m_objectChoice.get<::nds::display::details::types::Population>();
}

void DisplayPointAttributeValue::setPopulation(::nds::display::details::types::Population population_)
{
    m_objectChoice = population_;
}

::nds::display::details::types::DrawingOrder& DisplayPointAttributeValue::getDrawingOrder()
{
    return m_objectChoice.get<::nds::display::details::types::DrawingOrder>();
}

const ::nds::display::details::types::DrawingOrder& DisplayPointAttributeValue::getDrawingOrder() const
{
    return m_objectChoice.get<::nds::display::details::types::DrawingOrder>();
}

void DisplayPointAttributeValue::setDrawingOrder(const ::nds::display::details::types::DrawingOrder& drawingOrder_)
{
    m_objectChoice = drawingOrder_;
}

void DisplayPointAttributeValue::setDrawingOrder(::nds::display::details::types::DrawingOrder&& drawingOrder_)
{
    m_objectChoice = ::std::move(drawingOrder_);
}

::nds::core::geometry::DeltaElevation DisplayPointAttributeValue::getElevationDelta() const
{
    return m_objectChoice.get<::nds::core::geometry::DeltaElevation>();
}

void DisplayPointAttributeValue::setElevationDelta(::nds::core::geometry::DeltaElevation elevationDelta_)
{
    m_objectChoice = elevationDelta_;
}

::nds::display::details::types::ElevationLevel DisplayPointAttributeValue::getElevationLevel() const
{
    return m_objectChoice.get<::nds::display::details::types::ElevationLevel>();
}

void DisplayPointAttributeValue::setElevationLevel(::nds::display::details::types::ElevationLevel elevationLevel_)
{
    m_objectChoice = elevationLevel_;
}

DisplayPointAttributeValue::ChoiceTag DisplayPointAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        return CHOICE_population;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        return CHOICE_drawingOrder;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        return CHOICE_elevationDelta;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        return CHOICE_elevationLevel;
    default:
        return UNDEFINED_CHOICE;
    }
}

void DisplayPointAttributeValue::initPackingContext(DisplayPointAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        ::zserio::initPackingContext(context.getPopulation(), m_objectChoice.get<::nds::display::details::types::Population>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initPackingContext(context.getDrawingOrder());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        context.getElevationDelta().init<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        context.getElevationLevel().init<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }
}

size_t DisplayPointAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::display::details::types::Population>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::DrawingOrder>().bitSizeOf(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        endBitPosition += ::zserio::bitSizeOfVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        endBitPosition += UINT8_C(8);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t DisplayPointAttributeValue::bitSizeOf(DisplayPointAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        endBitPosition += ::zserio::bitSizeOf(context.getPopulation(), m_objectChoice.get<::nds::display::details::types::Population>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::DrawingOrder>().bitSizeOf(context.getDrawingOrder(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        endBitPosition += context.getElevationDelta().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        endBitPosition += context.getElevationLevel().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t DisplayPointAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::display::details::types::Population>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initializeOffsets(endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        endBitPosition += ::zserio::bitSizeOfVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        endBitPosition += UINT8_C(8);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }

    return endBitPosition;
}

size_t DisplayPointAttributeValue::initializeOffsets(DisplayPointAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        endBitPosition = ::zserio::initializeOffsets(context.getPopulation(), endBitPosition,
        m_objectChoice.get<::nds::display::details::types::Population>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::DrawingOrder>().initializeOffsets(context.getDrawingOrder(), endBitPosition);
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        endBitPosition += context.getElevationDelta().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        endBitPosition += context.getElevationLevel().bitSizeOf<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }

    return endBitPosition;
}

bool DisplayPointAttributeValue::operator==(const DisplayPointAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::Population>() == other.m_objectChoice.get<::nds::display::details::types::Population>());
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::DrawingOrder>() == other.m_objectChoice.get<::nds::display::details::types::DrawingOrder>());
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::geometry::DeltaElevation>() == other.m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::ElevationLevel>() == other.m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }
}

uint32_t DisplayPointAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::Population>());
            break;
        case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::DrawingOrder>());
            break;
        case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
            break;
        case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
            break;
        default:
            break;
        }
    }

    return result;
}

void DisplayPointAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        ::zserio::write(out, m_objectChoice.get<::nds::display::details::types::Population>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().write(out);
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        out.writeVarInt32(m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        out.writeSignedBits(m_objectChoice.get<::nds::display::details::types::ElevationLevel>(), UINT8_C(8));
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }
}

void DisplayPointAttributeValue::write(DisplayPointAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        ::zserio::write(context.getPopulation(), out, m_objectChoice.get<::nds::display::details::types::Population>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        m_objectChoice.get<::nds::display::details::types::DrawingOrder>().write(context.getDrawingOrder(), out);
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        context.getElevationDelta().write<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(out, m_objectChoice.get<::nds::core::geometry::DeltaElevation>());
        break;
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        context.getElevationLevel().write<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(out, m_objectChoice.get<::nds::display::details::types::ElevationLevel>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayPointAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::display::details::types::Population>(in), allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        return ::zserio::AnyHolder<>(::nds::display::details::types::DrawingOrder(in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::geometry::DeltaElevation>(in.readVarInt32()), allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        return ::zserio::AnyHolder<>(static_cast<::nds::display::details::types::ElevationLevel>(in.readSignedBits(UINT8_C(8))), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayPointAttributeValue::readObject(DisplayPointAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::display::details::types::Population>(context.getPopulation(), in), allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        return ::zserio::AnyHolder<>(::nds::display::details::types::DrawingOrder(context.getDrawingOrder(), in, allocator), allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        return ::zserio::AnyHolder<>(context.getElevationDelta().read<::zserio::VarIntNNArrayTraits<::nds::core::geometry::DeltaElevation>>(in), allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        return ::zserio::AnyHolder<>(context.getElevationLevel().read<::zserio::StdIntArrayTraits<::nds::display::details::types::ElevationLevel>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }
}

::zserio::AnyHolder<> DisplayPointAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::DisplayPointAttributeType::POPULATION:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::Population>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::DRAWING_ORDER:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::DrawingOrder>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_DELTA:
        return ::zserio::allocatorPropagatingCopy<::nds::core::geometry::DeltaElevation>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::DisplayPointAttributeType::ELEVATION_LEVEL:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::ElevationLevel>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice DisplayPointAttributeValue!");
    }
}

} // namespace attributes
} // namespace details
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/details/attributes/Display3dMeshAttributeValue.h>

namespace nds
{
namespace display
{
namespace details
{
namespace attributes
{

Display3dMeshAttributeValue::Display3dMeshAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

Display3dMeshAttributeValue::Display3dMeshAttributeValue(::zserio::BitStreamReader& in,
        ::nds::display::details::attributes::Display3dMeshAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

Display3dMeshAttributeValue::Display3dMeshAttributeValue(Display3dMeshAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::display::details::attributes::Display3dMeshAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

Display3dMeshAttributeValue::Display3dMeshAttributeValue(const Display3dMeshAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

Display3dMeshAttributeValue& Display3dMeshAttributeValue::operator=(const Display3dMeshAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

Display3dMeshAttributeValue::Display3dMeshAttributeValue(Display3dMeshAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

Display3dMeshAttributeValue& Display3dMeshAttributeValue::operator=(Display3dMeshAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

Display3dMeshAttributeValue::Display3dMeshAttributeValue(::zserio::PropagateAllocatorT,
        const Display3dMeshAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void Display3dMeshAttributeValue::initialize(
        ::nds::display::details::attributes::Display3dMeshAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool Display3dMeshAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::display::details::attributes::Display3dMeshAttributeType Display3dMeshAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'Display3dMeshAttributeValue' is not initialized!");

    return m_type_;
}

::nds::display::details::types::Additional3dFeatureClass Display3dMeshAttributeValue::getAdditional3dFeatureClass() const
{
    return m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>();
}

void Display3dMeshAttributeValue::setAdditional3dFeatureClass(::nds::display::details::types::Additional3dFeatureClass additional3dFeatureClass_)
{
    m_objectChoice = additional3dFeatureClass_;
}

::nds::display::details::types::OriginalPointHeights& Display3dMeshAttributeValue::getOriginalPointHeights()
{
    return m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>();
}

const ::nds::display::details::types::OriginalPointHeights& Display3dMeshAttributeValue::getOriginalPointHeights() const
{
    return m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>();
}

void Display3dMeshAttributeValue::setOriginalPointHeights(const ::nds::display::details::types::OriginalPointHeights& originalPointHeights_)
{
    m_objectChoice = originalPointHeights_;
}

void Display3dMeshAttributeValue::setOriginalPointHeights(::nds::display::details::types::OriginalPointHeights&& originalPointHeights_)
{
    m_objectChoice = ::std::move(originalPointHeights_);
}

Display3dMeshAttributeValue::ChoiceTag Display3dMeshAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        return CHOICE_additional3dFeatureClass;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        return CHOICE_originalPointHeights;
    default:
        return UNDEFINED_CHOICE;
    }
}

void Display3dMeshAttributeValue::initPackingContext(Display3dMeshAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        ::zserio::initPackingContext(context.getAdditional3dFeatureClass(), m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
        break;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>().initPackingContext(context.getOriginalPointHeights());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }
}

size_t Display3dMeshAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
        break;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>().bitSizeOf(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t Display3dMeshAttributeValue::bitSizeOf(Display3dMeshAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        endBitPosition += ::zserio::bitSizeOf(context.getAdditional3dFeatureClass(), m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
        break;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        endBitPosition += m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>().bitSizeOf(context.getOriginalPointHeights(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t Display3dMeshAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
        break;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>().initializeOffsets(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }

    return endBitPosition;
}

size_t Display3dMeshAttributeValue::initializeOffsets(Display3dMeshAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        endBitPosition = ::zserio::initializeOffsets(context.getAdditional3dFeatureClass(), endBitPosition,
        m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
        break;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        endBitPosition = m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>().initializeOffsets(context.getOriginalPointHeights(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }

    return endBitPosition;
}

bool Display3dMeshAttributeValue::operator==(const Display3dMeshAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>() == other.m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>() == other.m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }
}

uint32_t Display3dMeshAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
            break;
        case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>());
            break;
        default:
            break;
        }
    }

    return result;
}

void Display3dMeshAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        ::zserio::write(out, m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
        break;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>().write(out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }
}

void Display3dMeshAttributeValue::write(Display3dMeshAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        ::zserio::write(context.getAdditional3dFeatureClass(), out, m_objectChoice.get<::nds::display::details::types::Additional3dFeatureClass>());
        break;
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        m_objectChoice.get<::nds::display::details::types::OriginalPointHeights>().write(context.getOriginalPointHeights(), out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }
}

::zserio::AnyHolder<> Display3dMeshAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::display::details::types::Additional3dFeatureClass>(in), allocator);
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        return ::zserio::AnyHolder<>(::nds::display::details::types::OriginalPointHeights(in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }
}

::zserio::AnyHolder<> Display3dMeshAttributeValue::readObject(Display3dMeshAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::display::details::types::Additional3dFeatureClass>(context.getAdditional3dFeatureClass(), in), allocator);
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        return ::zserio::AnyHolder<>(::nds::display::details::types::OriginalPointHeights(context.getOriginalPointHeights(), in, allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }
}

::zserio::AnyHolder<> Display3dMeshAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ADDITIONAL_3D_FEATURE_CLASS:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::Additional3dFeatureClass>(m_objectChoice, allocator);
    case ::nds::display::details::attributes::Display3dMeshAttributeType::ORIGINAL_POINT_HEIGHTS:
        return ::zserio::allocatorPropagatingCopy<::nds::display::details::types::OriginalPointHeights>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice Display3dMeshAttributeValue!");
    }
}

} // namespace attributes
} // namespace details
} // namespace display
} // namespace nds
