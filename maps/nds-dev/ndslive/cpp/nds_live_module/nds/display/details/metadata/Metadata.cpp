/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/details/metadata/DisplayAttributeLayerContent.h>

namespace nds
{
namespace display
{
namespace details
{
namespace metadata
{

DisplayAttributeLayerContent::DisplayAttributeLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

DisplayAttributeLayerContent::DisplayAttributeLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

DisplayAttributeLayerContent::DisplayAttributeLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'DisplayAttributeLayerContent' out of bounds: ") << value << "!";
}

void DisplayAttributeLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::display::details::metadata::DisplayAttributeLayerContent::underlying_type>>(m_value);
}

size_t DisplayAttributeLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t DisplayAttributeLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::details::metadata::DisplayAttributeLayerContent::underlying_type>>(m_value);
}

size_t DisplayAttributeLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t DisplayAttributeLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t DisplayAttributeLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void DisplayAttributeLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void DisplayAttributeLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::display::details::metadata::DisplayAttributeLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> DisplayAttributeLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS)
        result += result.empty() ? "DISPLAY_AREA_MAPS" : " | DISPLAY_AREA_MAPS";
    if ((*this & DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
        result += result.empty() ? "DISPLAY_AREA_SETS" : " | DISPLAY_AREA_SETS";
    if ((*this & DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS)
        result += result.empty() ? "DISPLAY_LINE_MAPS" : " | DISPLAY_LINE_MAPS";
    if ((*this & DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
        result += result.empty() ? "DISPLAY_LINE_SETS" : " | DISPLAY_LINE_SETS";
    if ((*this & DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS)
        result += result.empty() ? "DISPLAY_POINT_MAPS" : " | DISPLAY_POINT_MAPS";
    if ((*this & DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
        result += result.empty() ? "DISPLAY_POINT_SETS" : " | DISPLAY_POINT_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

DisplayAttributeLayerContent::underlying_type DisplayAttributeLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

DisplayAttributeLayerContent::underlying_type DisplayAttributeLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::display::details::metadata::DisplayAttributeLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace details
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/details/metadata/Display3dAttributeLayerContent.h>

namespace nds
{
namespace display
{
namespace details
{
namespace metadata
{

Display3dAttributeLayerContent::Display3dAttributeLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

Display3dAttributeLayerContent::Display3dAttributeLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

Display3dAttributeLayerContent::Display3dAttributeLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'Display3dAttributeLayerContent' out of bounds: ") << value << "!";
}

void Display3dAttributeLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::display::details::metadata::Display3dAttributeLayerContent::underlying_type>>(m_value);
}

size_t Display3dAttributeLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t Display3dAttributeLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::details::metadata::Display3dAttributeLayerContent::underlying_type>>(m_value);
}

size_t Display3dAttributeLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t Display3dAttributeLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t Display3dAttributeLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void Display3dAttributeLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void Display3dAttributeLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::display::details::metadata::Display3dAttributeLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> Display3dAttributeLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS)
        result += result.empty() ? "DISPLAY_MESH_MAPS" : " | DISPLAY_MESH_MAPS";
    if ((*this & Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
        result += result.empty() ? "DISPLAY_MESH_SETS" : " | DISPLAY_MESH_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

Display3dAttributeLayerContent::underlying_type Display3dAttributeLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

Display3dAttributeLayerContent::underlying_type Display3dAttributeLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::display::details::metadata::Display3dAttributeLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace details
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/details/metadata/DisplayAttributeLayerMetadata.h>
#include <nds/display/details/metadata/DisplayAttributeLayerContent.h>

namespace nds
{
namespace display
{
namespace details
{
namespace metadata
{

DisplayAttributeLayerMetadata::DisplayAttributeLayerMetadata(const allocator_type&) noexcept :
        m_content_(::nds::display::details::metadata::DisplayAttributeLayerContent()),
        m_displayAreaAttributeMetadata_(::zserio::NullOpt),
        m_displayLineAttributeMetadata_(::zserio::NullOpt),
        m_displayPointAttributeMetadata_(::zserio::NullOpt)
{
}

DisplayAttributeLayerMetadata::DisplayAttributeLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_displayAreaAttributeMetadata_(readDisplayAreaAttributeMetadata(in, allocator)),
        m_displayLineAttributeMetadata_(readDisplayLineAttributeMetadata(in, allocator)),
        m_displayPointAttributeMetadata_(readDisplayPointAttributeMetadata(in, allocator))
{
}

DisplayAttributeLayerMetadata::DisplayAttributeLayerMetadata(DisplayAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_displayAreaAttributeMetadata_(readDisplayAreaAttributeMetadata(context, in, allocator)),
        m_displayLineAttributeMetadata_(readDisplayLineAttributeMetadata(context, in, allocator)),
        m_displayPointAttributeMetadata_(readDisplayPointAttributeMetadata(context, in, allocator))
{
}

DisplayAttributeLayerMetadata::DisplayAttributeLayerMetadata(::zserio::PropagateAllocatorT,
        const DisplayAttributeLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_displayAreaAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayAreaAttributeMetadata_, allocator)),
        m_displayLineAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayLineAttributeMetadata_, allocator)),
        m_displayPointAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayPointAttributeMetadata_, allocator))
{
}

::nds::display::details::metadata::DisplayAttributeLayerContent DisplayAttributeLayerMetadata::getContent() const
{
    return m_content_;
}

void DisplayAttributeLayerMetadata::setContent(::nds::display::details::metadata::DisplayAttributeLayerContent content_)
{
    m_content_ = content_;
}

::nds::display::details::instantiations::DisplayAreaAttributeMetadata& DisplayAttributeLayerMetadata::getDisplayAreaAttributeMetadata()
{
    return m_displayAreaAttributeMetadata_.value();
}

const ::nds::display::details::instantiations::DisplayAreaAttributeMetadata& DisplayAttributeLayerMetadata::getDisplayAreaAttributeMetadata() const
{
    return m_displayAreaAttributeMetadata_.value();
}

void DisplayAttributeLayerMetadata::setDisplayAreaAttributeMetadata(const ::nds::display::details::instantiations::DisplayAreaAttributeMetadata& displayAreaAttributeMetadata_)
{
    m_displayAreaAttributeMetadata_ = displayAreaAttributeMetadata_;
}

void DisplayAttributeLayerMetadata::setDisplayAreaAttributeMetadata(::nds::display::details::instantiations::DisplayAreaAttributeMetadata&& displayAreaAttributeMetadata_)
{
    m_displayAreaAttributeMetadata_ = ::std::move(displayAreaAttributeMetadata_);
}

bool DisplayAttributeLayerMetadata::isDisplayAreaAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS);
}

bool DisplayAttributeLayerMetadata::isDisplayAreaAttributeMetadataSet() const
{
    return m_displayAreaAttributeMetadata_.hasValue();
}

void DisplayAttributeLayerMetadata::resetDisplayAreaAttributeMetadata()
{
    m_displayAreaAttributeMetadata_.reset();
}

::nds::display::details::instantiations::DisplayLineAttributeMetadata& DisplayAttributeLayerMetadata::getDisplayLineAttributeMetadata()
{
    return m_displayLineAttributeMetadata_.value();
}

const ::nds::display::details::instantiations::DisplayLineAttributeMetadata& DisplayAttributeLayerMetadata::getDisplayLineAttributeMetadata() const
{
    return m_displayLineAttributeMetadata_.value();
}

void DisplayAttributeLayerMetadata::setDisplayLineAttributeMetadata(const ::nds::display::details::instantiations::DisplayLineAttributeMetadata& displayLineAttributeMetadata_)
{
    m_displayLineAttributeMetadata_ = displayLineAttributeMetadata_;
}

void DisplayAttributeLayerMetadata::setDisplayLineAttributeMetadata(::nds::display::details::instantiations::DisplayLineAttributeMetadata&& displayLineAttributeMetadata_)
{
    m_displayLineAttributeMetadata_ = ::std::move(displayLineAttributeMetadata_);
}

bool DisplayAttributeLayerMetadata::isDisplayLineAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS);
}

bool DisplayAttributeLayerMetadata::isDisplayLineAttributeMetadataSet() const
{
    return m_displayLineAttributeMetadata_.hasValue();
}

void DisplayAttributeLayerMetadata::resetDisplayLineAttributeMetadata()
{
    m_displayLineAttributeMetadata_.reset();
}

::nds::display::details::instantiations::DisplayPointAttributeMetadata& DisplayAttributeLayerMetadata::getDisplayPointAttributeMetadata()
{
    return m_displayPointAttributeMetadata_.value();
}

const ::nds::display::details::instantiations::DisplayPointAttributeMetadata& DisplayAttributeLayerMetadata::getDisplayPointAttributeMetadata() const
{
    return m_displayPointAttributeMetadata_.value();
}

void DisplayAttributeLayerMetadata::setDisplayPointAttributeMetadata(const ::nds::display::details::instantiations::DisplayPointAttributeMetadata& displayPointAttributeMetadata_)
{
    m_displayPointAttributeMetadata_ = displayPointAttributeMetadata_;
}

void DisplayAttributeLayerMetadata::setDisplayPointAttributeMetadata(::nds::display::details::instantiations::DisplayPointAttributeMetadata&& displayPointAttributeMetadata_)
{
    m_displayPointAttributeMetadata_ = ::std::move(displayPointAttributeMetadata_);
}

bool DisplayAttributeLayerMetadata::isDisplayPointAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS);
}

bool DisplayAttributeLayerMetadata::isDisplayPointAttributeMetadataSet() const
{
    return m_displayPointAttributeMetadata_.hasValue();
}

void DisplayAttributeLayerMetadata::resetDisplayPointAttributeMetadata()
{
    m_displayPointAttributeMetadata_.reset();
}

void DisplayAttributeLayerMetadata::initPackingContext(DisplayAttributeLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        m_displayAreaAttributeMetadata_.value().initPackingContext(context.getDisplayAreaAttributeMetadata());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        m_displayLineAttributeMetadata_.value().initPackingContext(context.getDisplayLineAttributeMetadata());
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        m_displayPointAttributeMetadata_.value().initPackingContext(context.getDisplayPointAttributeMetadata());
    }
}

size_t DisplayAttributeLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition += m_displayAreaAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        endBitPosition += m_displayLineAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition += m_displayPointAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayAttributeLayerMetadata::bitSizeOf(DisplayAttributeLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition += m_displayAreaAttributeMetadata_.value().bitSizeOf(context.getDisplayAreaAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        endBitPosition += m_displayLineAttributeMetadata_.value().bitSizeOf(context.getDisplayLineAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition += m_displayPointAttributeMetadata_.value().bitSizeOf(context.getDisplayPointAttributeMetadata(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayAttributeLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition = m_displayAreaAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        endBitPosition = m_displayLineAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition = m_displayPointAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t DisplayAttributeLayerMetadata::initializeOffsets(DisplayAttributeLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        endBitPosition = m_displayAreaAttributeMetadata_.value().initializeOffsets(context.getDisplayAreaAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        endBitPosition = m_displayLineAttributeMetadata_.value().initializeOffsets(context.getDisplayLineAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        endBitPosition = m_displayPointAttributeMetadata_.value().initializeOffsets(context.getDisplayPointAttributeMetadata(), endBitPosition);
    }

    return endBitPosition;
}

bool DisplayAttributeLayerMetadata::operator==(const DisplayAttributeLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isDisplayAreaAttributeMetadataUsed() ? !other.isDisplayAreaAttributeMetadataUsed() : (m_displayAreaAttributeMetadata_ == other.m_displayAreaAttributeMetadata_)) &&
                (!isDisplayLineAttributeMetadataUsed() ? !other.isDisplayLineAttributeMetadataUsed() : (m_displayLineAttributeMetadata_ == other.m_displayLineAttributeMetadata_)) &&
                (!isDisplayPointAttributeMetadataUsed() ? !other.isDisplayPointAttributeMetadataUsed() : (m_displayPointAttributeMetadata_ == other.m_displayPointAttributeMetadata_));
    }

    return true;
}

uint32_t DisplayAttributeLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isDisplayAreaAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayAreaAttributeMetadata_);
    if (isDisplayLineAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayLineAttributeMetadata_);
    if (isDisplayPointAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayPointAttributeMetadata_);

    return result;
}

void DisplayAttributeLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        m_displayAreaAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        m_displayLineAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        m_displayPointAttributeMetadata_.value().write(out);
    }
}

void DisplayAttributeLayerMetadata::write(DisplayAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        m_displayAreaAttributeMetadata_.value().write(context.getDisplayAreaAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        m_displayLineAttributeMetadata_.value().write(context.getDisplayLineAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        m_displayPointAttributeMetadata_.value().write(context.getDisplayPointAttributeMetadata(), out);
    }
}

::nds::display::details::metadata::DisplayAttributeLayerContent DisplayAttributeLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::details::metadata::DisplayAttributeLayerContent(in);
}

::nds::display::details::metadata::DisplayAttributeLayerContent DisplayAttributeLayerMetadata::readContent(DisplayAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::details::metadata::DisplayAttributeLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMetadata> DisplayAttributeLayerMetadata::readDisplayAreaAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMetadata>(::nds::display::details::instantiations::DisplayAreaAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMetadata> DisplayAttributeLayerMetadata::readDisplayAreaAttributeMetadata(DisplayAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_AREA_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMetadata>(::nds::display::details::instantiations::DisplayAreaAttributeMetadata(context.getDisplayAreaAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayAreaAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMetadata> DisplayAttributeLayerMetadata::readDisplayLineAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMetadata>(::nds::display::details::instantiations::DisplayLineAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMetadata> DisplayAttributeLayerMetadata::readDisplayLineAttributeMetadata(DisplayAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_LINE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMetadata>(::nds::display::details::instantiations::DisplayLineAttributeMetadata(context.getDisplayLineAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayLineAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMetadata> DisplayAttributeLayerMetadata::readDisplayPointAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMetadata>(::nds::display::details::instantiations::DisplayPointAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMetadata> DisplayAttributeLayerMetadata::readDisplayPointAttributeMetadata(DisplayAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_MAPS || (getContent() & ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS) == ::nds::display::details::metadata::DisplayAttributeLayerContent::Values::DISPLAY_POINT_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMetadata>(::nds::display::details::instantiations::DisplayPointAttributeMetadata(context.getDisplayPointAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::DisplayPointAttributeMetadata>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace details
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/details/metadata/Display3dAttributeLayerMetadata.h>
#include <nds/display/details/metadata/Display3dAttributeLayerContent.h>

namespace nds
{
namespace display
{
namespace details
{
namespace metadata
{

Display3dAttributeLayerMetadata::Display3dAttributeLayerMetadata(const allocator_type&) noexcept :
        m_content_(::nds::display::details::metadata::Display3dAttributeLayerContent()),
        m_display3dMeshAttributeMetadata_(::zserio::NullOpt)
{
}

Display3dAttributeLayerMetadata::Display3dAttributeLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_display3dMeshAttributeMetadata_(readDisplay3dMeshAttributeMetadata(in, allocator))
{
}

Display3dAttributeLayerMetadata::Display3dAttributeLayerMetadata(Display3dAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_display3dMeshAttributeMetadata_(readDisplay3dMeshAttributeMetadata(context, in, allocator))
{
}

Display3dAttributeLayerMetadata::Display3dAttributeLayerMetadata(::zserio::PropagateAllocatorT,
        const Display3dAttributeLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_display3dMeshAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_display3dMeshAttributeMetadata_, allocator))
{
}

::nds::display::details::metadata::Display3dAttributeLayerContent Display3dAttributeLayerMetadata::getContent() const
{
    return m_content_;
}

void Display3dAttributeLayerMetadata::setContent(::nds::display::details::metadata::Display3dAttributeLayerContent content_)
{
    m_content_ = content_;
}

::nds::display::details::instantiations::Display3dMeshAttributeMetadata& Display3dAttributeLayerMetadata::getDisplay3dMeshAttributeMetadata()
{
    return m_display3dMeshAttributeMetadata_.value();
}

const ::nds::display::details::instantiations::Display3dMeshAttributeMetadata& Display3dAttributeLayerMetadata::getDisplay3dMeshAttributeMetadata() const
{
    return m_display3dMeshAttributeMetadata_.value();
}

void Display3dAttributeLayerMetadata::setDisplay3dMeshAttributeMetadata(const ::nds::display::details::instantiations::Display3dMeshAttributeMetadata& display3dMeshAttributeMetadata_)
{
    m_display3dMeshAttributeMetadata_ = display3dMeshAttributeMetadata_;
}

void Display3dAttributeLayerMetadata::setDisplay3dMeshAttributeMetadata(::nds::display::details::instantiations::Display3dMeshAttributeMetadata&& display3dMeshAttributeMetadata_)
{
    m_display3dMeshAttributeMetadata_ = ::std::move(display3dMeshAttributeMetadata_);
}

bool Display3dAttributeLayerMetadata::isDisplay3dMeshAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS);
}

bool Display3dAttributeLayerMetadata::isDisplay3dMeshAttributeMetadataSet() const
{
    return m_display3dMeshAttributeMetadata_.hasValue();
}

void Display3dAttributeLayerMetadata::resetDisplay3dMeshAttributeMetadata()
{
    m_display3dMeshAttributeMetadata_.reset();
}

void Display3dAttributeLayerMetadata::initPackingContext(Display3dAttributeLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        m_display3dMeshAttributeMetadata_.value().initPackingContext(context.getDisplay3dMeshAttributeMetadata());
    }
}

size_t Display3dAttributeLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        endBitPosition += m_display3dMeshAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3dAttributeLayerMetadata::bitSizeOf(Display3dAttributeLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        endBitPosition += m_display3dMeshAttributeMetadata_.value().bitSizeOf(context.getDisplay3dMeshAttributeMetadata(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3dAttributeLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        endBitPosition = m_display3dMeshAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t Display3dAttributeLayerMetadata::initializeOffsets(Display3dAttributeLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        endBitPosition = m_display3dMeshAttributeMetadata_.value().initializeOffsets(context.getDisplay3dMeshAttributeMetadata(), endBitPosition);
    }

    return endBitPosition;
}

bool Display3dAttributeLayerMetadata::operator==(const Display3dAttributeLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isDisplay3dMeshAttributeMetadataUsed() ? !other.isDisplay3dMeshAttributeMetadataUsed() : (m_display3dMeshAttributeMetadata_ == other.m_display3dMeshAttributeMetadata_));
    }

    return true;
}

uint32_t Display3dAttributeLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isDisplay3dMeshAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_display3dMeshAttributeMetadata_);

    return result;
}

void Display3dAttributeLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        m_display3dMeshAttributeMetadata_.value().write(out);
    }
}

void Display3dAttributeLayerMetadata::write(Display3dAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        m_display3dMeshAttributeMetadata_.value().write(context.getDisplay3dMeshAttributeMetadata(), out);
    }
}

::nds::display::details::metadata::Display3dAttributeLayerContent Display3dAttributeLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::details::metadata::Display3dAttributeLayerContent(in);
}

::nds::display::details::metadata::Display3dAttributeLayerContent Display3dAttributeLayerMetadata::readContent(Display3dAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::details::metadata::Display3dAttributeLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMetadata> Display3dAttributeLayerMetadata::readDisplay3dMeshAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMetadata>(::nds::display::details::instantiations::Display3dMeshAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMetadata> Display3dAttributeLayerMetadata::readDisplay3dMeshAttributeMetadata(Display3dAttributeLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_MAPS || (getContent() & ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS) == ::nds::display::details::metadata::Display3dAttributeLayerContent::Values::DISPLAY_MESH_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMetadata>(::nds::display::details::instantiations::Display3dMeshAttributeMetadata(context.getDisplay3dMeshAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::details::instantiations::Display3dMeshAttributeMetadata>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace details
} // namespace display
} // namespace nds
