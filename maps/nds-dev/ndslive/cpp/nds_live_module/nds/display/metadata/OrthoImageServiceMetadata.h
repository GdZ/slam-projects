/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_METADATA_ORTHO_IMAGE_SERVICE_METADATA_H
#define NDS_DISPLAY_METADATA_ORTHO_IMAGE_SERVICE_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/MapProjectionMethod.h>
#include <nds/display/types/OrthoImageConfig.h>

namespace nds
{
namespace display
{
namespace metadata
{

class OrthoImageServiceMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getVerticalPixResolution()
        {
            return m_verticalPixResolution_;
        }

        ::zserio::DeltaContext& getCoordinateProjection()
        {
            return m_coordinateProjection_;
        }

        ::zserio::DeltaContext& getMaximumLatitude()
        {
            return m_maximumLatitude_;
        }

    private:
        ::zserio::DeltaContext m_verticalPixResolution_;
        ::zserio::DeltaContext m_coordinateProjection_;
        ::zserio::DeltaContext m_maximumLatitude_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    OrthoImageServiceMetadata() noexcept :
            OrthoImageServiceMetadata(allocator_type())
    {}

    explicit OrthoImageServiceMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_supportedConfigurations = ::zserio::vector<::nds::display::types::OrthoImageConfig>,
            typename ZSERIO_T_maximumLatitude = int32_t,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_supportedConfigurations, OrthoImageServiceMetadata, allocator_type> = 0>
    OrthoImageServiceMetadata(
            ZSERIO_T_supportedConfigurations&& supportedConfigurations_,
            uint32_t verticalPixResolution_,
            ::nds::core::geometry::MapProjectionMethod coordinateProjection_,
            ZSERIO_T_maximumLatitude&& maximumLatitude_,
            const allocator_type& allocator = allocator_type()) :
            OrthoImageServiceMetadata(allocator)
    {
        m_supportedConfigurations_ = ZserioArrayType_supportedConfigurations(::std::forward<ZSERIO_T_supportedConfigurations>(supportedConfigurations_));
        m_verticalPixResolution_ = verticalPixResolution_;
        m_coordinateProjection_ = coordinateProjection_;
        m_maximumLatitude_ = ::std::forward<ZSERIO_T_maximumLatitude>(maximumLatitude_);
    }

    explicit OrthoImageServiceMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit OrthoImageServiceMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~OrthoImageServiceMetadata() = default;

    OrthoImageServiceMetadata(const OrthoImageServiceMetadata&) = default;
    OrthoImageServiceMetadata& operator=(const OrthoImageServiceMetadata&) = default;

    OrthoImageServiceMetadata(OrthoImageServiceMetadata&&) = default;
    OrthoImageServiceMetadata& operator=(OrthoImageServiceMetadata&&) = default;

    OrthoImageServiceMetadata(::zserio::PropagateAllocatorT,
            const OrthoImageServiceMetadata& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::display::types::OrthoImageConfig>& getSupportedConfigurations() const;
    ::zserio::vector<::nds::display::types::OrthoImageConfig>& getSupportedConfigurations();
    void setSupportedConfigurations(const ::zserio::vector<::nds::display::types::OrthoImageConfig>& supportedConfigurations_);
    void setSupportedConfigurations(::zserio::vector<::nds::display::types::OrthoImageConfig>&& supportedConfigurations_);

    uint32_t getVerticalPixResolution() const;
    void setVerticalPixResolution(uint32_t verticalPixResolution_);

    ::nds::core::geometry::MapProjectionMethod getCoordinateProjection() const;
    void setCoordinateProjection(::nds::core::geometry::MapProjectionMethod coordinateProjection_);

    int32_t getMaximumLatitude() const;
    void setMaximumLatitude(int32_t maximumLatitude_);
    bool isMaximumLatitudeUsed() const;
    bool isMaximumLatitudeSet() const;
    void resetMaximumLatitude();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const OrthoImageServiceMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_supportedConfigurations
    {
    public:
        using OwnerType = OrthoImageServiceMetadata;

        static void create(OrthoImageServiceMetadata& owner,
                ::zserio::vector<::nds::display::types::OrthoImageConfig>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(OrthoImageServiceMetadata& owner,
                ::zserio::vector<::nds::display::types::OrthoImageConfig>& array,
                ::nds::display::types::OrthoImageConfig::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_supportedConfigurations = ::zserio::Array<::zserio::vector<::nds::display::types::OrthoImageConfig>, ::zserio::ObjectArrayTraits<::nds::display::types::OrthoImageConfig, ZserioElementFactory_supportedConfigurations>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_supportedConfigurations readSupportedConfigurations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_supportedConfigurations readSupportedConfigurations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    uint32_t readVerticalPixResolution(::zserio::BitStreamReader& in);
    uint32_t readVerticalPixResolution(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::MapProjectionMethod readCoordinateProjection(::zserio::BitStreamReader& in);
    ::nds::core::geometry::MapProjectionMethod readCoordinateProjection(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readMaximumLatitude(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readMaximumLatitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ZserioArrayType_supportedConfigurations m_supportedConfigurations_;
    uint32_t m_verticalPixResolution_;
    ::nds::core::geometry::MapProjectionMethod m_coordinateProjection_;
    ::zserio::InplaceOptionalHolder<int32_t> m_maximumLatitude_;
};

} // namespace metadata
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_METADATA_ORTHO_IMAGE_SERVICE_METADATA_H
