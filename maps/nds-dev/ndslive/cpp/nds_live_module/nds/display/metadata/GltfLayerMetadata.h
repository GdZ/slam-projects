/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_METADATA_GLTF_LAYER_METADATA_H
#define NDS_DISPLAY_METADATA_GLTF_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/display/metadata/DisplayScaleTileLevelMapping.h>
#include <nds/display/types/GltfExtensionId.h>
#include <nds/display/types/GltfVersion.h>

namespace nds
{
namespace display
{
namespace metadata
{

class GltfLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getGltfVersion()
        {
            return m_gltfVersion_;
        }

        ::nds::display::metadata::DisplayScaleTileLevelMapping::ZserioPackingContext& getDisplayScaleTileLevelMapping()
        {
            return m_displayScaleTileLevelMapping_;
        }

    private:
        ::zserio::DeltaContext m_gltfVersion_;
        ::nds::display::metadata::DisplayScaleTileLevelMapping::ZserioPackingContext m_displayScaleTileLevelMapping_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    GltfLayerMetadata() noexcept :
            GltfLayerMetadata(allocator_type())
    {}

    explicit GltfLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_usedExtensions = ::zserio::vector<::nds::display::types::GltfExtensionId>,
            typename ZSERIO_T_displayScaleTileLevelMapping = ::nds::display::metadata::DisplayScaleTileLevelMapping>
    GltfLayerMetadata(
            ::nds::display::types::GltfVersion gltfVersion_,
            ZSERIO_T_usedExtensions&& usedExtensions_,
            ZSERIO_T_displayScaleTileLevelMapping&& displayScaleTileLevelMapping_,
            const allocator_type& allocator = allocator_type()) :
            GltfLayerMetadata(allocator)
    {
        m_gltfVersion_ = gltfVersion_;
        m_usedExtensions_ = ZserioArrayType_usedExtensions(::std::forward<ZSERIO_T_usedExtensions>(usedExtensions_));
        m_displayScaleTileLevelMapping_ = ::std::forward<ZSERIO_T_displayScaleTileLevelMapping>(displayScaleTileLevelMapping_);
    }

    explicit GltfLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit GltfLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~GltfLayerMetadata() = default;

    GltfLayerMetadata(const GltfLayerMetadata&) = default;
    GltfLayerMetadata& operator=(const GltfLayerMetadata&) = default;

    GltfLayerMetadata(GltfLayerMetadata&&) = default;
    GltfLayerMetadata& operator=(GltfLayerMetadata&&) = default;

    GltfLayerMetadata(::zserio::PropagateAllocatorT,
            const GltfLayerMetadata& other, const allocator_type& allocator);

    ::nds::display::types::GltfVersion getGltfVersion() const;
    void setGltfVersion(::nds::display::types::GltfVersion gltfVersion_);

    const ::zserio::vector<::nds::display::types::GltfExtensionId>& getUsedExtensions() const;
    ::zserio::vector<::nds::display::types::GltfExtensionId>& getUsedExtensions();
    void setUsedExtensions(const ::zserio::vector<::nds::display::types::GltfExtensionId>& usedExtensions_);
    void setUsedExtensions(::zserio::vector<::nds::display::types::GltfExtensionId>&& usedExtensions_);

    const ::nds::display::metadata::DisplayScaleTileLevelMapping& getDisplayScaleTileLevelMapping() const;
    ::nds::display::metadata::DisplayScaleTileLevelMapping& getDisplayScaleTileLevelMapping();
    void setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_);
    void setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const GltfLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_usedExtensions = ::zserio::Array<::zserio::vector<::nds::display::types::GltfExtensionId>, ::zserio::StringArrayTraits, ::zserio::ArrayType::AUTO>;

    ::nds::display::types::GltfVersion readGltfVersion(::zserio::BitStreamReader& in);
    ::nds::display::types::GltfVersion readGltfVersion(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_usedExtensions readUsedExtensions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::metadata::DisplayScaleTileLevelMapping readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::metadata::DisplayScaleTileLevelMapping readDisplayScaleTileLevelMapping(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::types::GltfVersion m_gltfVersion_;
    ZserioArrayType_usedExtensions m_usedExtensions_;
    ::nds::display::metadata::DisplayScaleTileLevelMapping m_displayScaleTileLevelMapping_;
};

} // namespace metadata
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_METADATA_GLTF_LAYER_METADATA_H
