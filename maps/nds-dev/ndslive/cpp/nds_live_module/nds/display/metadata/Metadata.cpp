/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/metadata/Display2DContent.h>

namespace nds
{
namespace display
{
namespace metadata
{

Display2DContent::Display2DContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

Display2DContent::Display2DContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

Display2DContent::Display2DContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'Display2DContent' out of bounds: ") << value << "!";
}

void Display2DContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::display::metadata::Display2DContent::underlying_type>>(m_value);
}

size_t Display2DContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t Display2DContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::metadata::Display2DContent::underlying_type>>(m_value);
}

size_t Display2DContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t Display2DContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t Display2DContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void Display2DContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void Display2DContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::display::metadata::Display2DContent::underlying_type>>(out, m_value);
}

::zserio::string<> Display2DContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & Display2DContent::Values::POINTS) == Display2DContent::Values::POINTS)
        result += result.empty() ? "POINTS" : " | POINTS";
    if ((*this & Display2DContent::Values::LINES) == Display2DContent::Values::LINES)
        result += result.empty() ? "LINES" : " | LINES";
    if ((*this & Display2DContent::Values::AREAS) == Display2DContent::Values::AREAS)
        result += result.empty() ? "AREAS" : " | AREAS";
    if ((*this & Display2DContent::Values::AREA_TYPE_RELATIONS) == Display2DContent::Values::AREA_TYPE_RELATIONS)
        result += result.empty() ? "AREA_TYPE_RELATIONS" : " | AREA_TYPE_RELATIONS";
    if ((*this & Display2DContent::Values::LINE_TYPE_RELATIONS) == Display2DContent::Values::LINE_TYPE_RELATIONS)
        result += result.empty() ? "LINE_TYPE_RELATIONS" : " | LINE_TYPE_RELATIONS";
    if ((*this & Display2DContent::Values::POINT_TYPE_RELATIONS) == Display2DContent::Values::POINT_TYPE_RELATIONS)
        result += result.empty() ? "POINT_TYPE_RELATIONS" : " | POINT_TYPE_RELATIONS";
    if ((*this & Display2DContent::Values::SIMPLE_AREAS) == Display2DContent::Values::SIMPLE_AREAS)
        result += result.empty() ? "SIMPLE_AREAS" : " | SIMPLE_AREAS";
    if ((*this & Display2DContent::Values::SIMPLE_AREA_SETS) == Display2DContent::Values::SIMPLE_AREA_SETS)
        result += result.empty() ? "SIMPLE_AREA_SETS" : " | SIMPLE_AREA_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

Display2DContent::underlying_type Display2DContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

Display2DContent::underlying_type Display2DContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::display::metadata::Display2DContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/metadata/Display3DContent.h>

namespace nds
{
namespace display
{
namespace metadata
{

Display3DContent::Display3DContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

Display3DContent::Display3DContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

Display3DContent::Display3DContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'Display3DContent' out of bounds: ") << value << "!";
}

void Display3DContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::display::metadata::Display3DContent::underlying_type>>(m_value);
}

size_t Display3DContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t Display3DContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::metadata::Display3DContent::underlying_type>>(m_value);
}

size_t Display3DContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t Display3DContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t Display3DContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void Display3DContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void Display3DContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::display::metadata::Display3DContent::underlying_type>>(out, m_value);
}

::zserio::string<> Display3DContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & Display3DContent::Values::MESH_3D) == Display3DContent::Values::MESH_3D)
        result += result.empty() ? "MESH_3D" : " | MESH_3D";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

Display3DContent::underlying_type Display3DContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

Display3DContent::underlying_type Display3DContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::display::metadata::Display3DContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/display/metadata/IconLayerContent.h>

namespace nds
{
namespace display
{
namespace metadata
{

IconLayerContent::IconLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

IconLayerContent::IconLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

IconLayerContent::IconLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'IconLayerContent' out of bounds: ") << value << "!";
}

void IconLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::display::metadata::IconLayerContent::underlying_type>>(m_value);
}

size_t IconLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t IconLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::display::metadata::IconLayerContent::underlying_type>>(m_value);
}

size_t IconLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t IconLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t IconLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void IconLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void IconLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::display::metadata::IconLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> IconLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & IconLayerContent::Values::GENERIC_ICON_SETS) == IconLayerContent::Values::GENERIC_ICON_SETS)
        result += result.empty() ? "GENERIC_ICON_SETS" : " | GENERIC_ICON_SETS";
    if ((*this & IconLayerContent::Values::REFERENCED_ICON_SETS) == IconLayerContent::Values::REFERENCED_ICON_SETS)
        result += result.empty() ? "REFERENCED_ICON_SETS" : " | REFERENCED_ICON_SETS";
    if ((*this & IconLayerContent::Values::TEMPLATE_ICON_SETS) == IconLayerContent::Values::TEMPLATE_ICON_SETS)
        result += result.empty() ? "TEMPLATE_ICON_SETS" : " | TEMPLATE_ICON_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

IconLayerContent::underlying_type IconLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

IconLayerContent::underlying_type IconLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::display::metadata::IconLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/metadata/Display2DLayerMetadata.h>
#include <nds/display/metadata/Display2DContent.h>

namespace nds
{
namespace display
{
namespace metadata
{

Display2DLayerMetadata::Display2DLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::display::metadata::Display2DContent()),
        m_availableDisplayPointTypes_(::zserio::NullOpt),
        m_availableDisplayLineTypes_(::zserio::NullOpt),
        m_availableDisplayAreaTypes_(::zserio::NullOpt),
        m_defaultDrawingOrders_(allocator),
        m_displayAreaTypeRelations_(::zserio::NullOpt),
        m_displayLineTypeRelations_(::zserio::NullOpt),
        m_displayPointTypeRelations_(::zserio::NullOpt),
        m_displayScaleTileLevelMapping_(allocator)
{
}

Display2DLayerMetadata::Display2DLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_availableDisplayPointTypes_(readAvailableDisplayPointTypes(in, allocator)),
        m_availableDisplayLineTypes_(readAvailableDisplayLineTypes(in, allocator)),
        m_availableDisplayAreaTypes_(readAvailableDisplayAreaTypes(in, allocator)),
        m_defaultDrawingOrders_(readDefaultDrawingOrders(in, allocator)),
        m_displayAreaTypeRelations_(readDisplayAreaTypeRelations(in, allocator)),
        m_displayLineTypeRelations_(readDisplayLineTypeRelations(in, allocator)),
        m_displayPointTypeRelations_(readDisplayPointTypeRelations(in, allocator)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(in, allocator))
{
}

Display2DLayerMetadata::Display2DLayerMetadata(Display2DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_availableDisplayPointTypes_(readAvailableDisplayPointTypes(context, in, allocator)),
        m_availableDisplayLineTypes_(readAvailableDisplayLineTypes(context, in, allocator)),
        m_availableDisplayAreaTypes_(readAvailableDisplayAreaTypes(context, in, allocator)),
        m_defaultDrawingOrders_(readDefaultDrawingOrders(context, in, allocator)),
        m_displayAreaTypeRelations_(readDisplayAreaTypeRelations(context, in, allocator)),
        m_displayLineTypeRelations_(readDisplayLineTypeRelations(context, in, allocator)),
        m_displayPointTypeRelations_(readDisplayPointTypeRelations(context, in, allocator)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(context, in, allocator))
{
}

Display2DLayerMetadata::Display2DLayerMetadata(::zserio::PropagateAllocatorT,
        const Display2DLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_availableDisplayPointTypes_(::zserio::allocatorPropagatingCopy(other.m_availableDisplayPointTypes_, allocator)),
        m_availableDisplayLineTypes_(::zserio::allocatorPropagatingCopy(other.m_availableDisplayLineTypes_, allocator)),
        m_availableDisplayAreaTypes_(::zserio::allocatorPropagatingCopy(other.m_availableDisplayAreaTypes_, allocator)),
        m_defaultDrawingOrders_(::zserio::allocatorPropagatingCopy(other.m_defaultDrawingOrders_, allocator)),
        m_displayAreaTypeRelations_(::zserio::allocatorPropagatingCopy(other.m_displayAreaTypeRelations_, allocator)),
        m_displayLineTypeRelations_(::zserio::allocatorPropagatingCopy(other.m_displayLineTypeRelations_, allocator)),
        m_displayPointTypeRelations_(::zserio::allocatorPropagatingCopy(other.m_displayPointTypeRelations_, allocator)),
        m_displayScaleTileLevelMapping_(::zserio::allocatorPropagatingCopy(other.m_displayScaleTileLevelMapping_, allocator))
{
}

::nds::display::metadata::Display2DContent Display2DLayerMetadata::getContent() const
{
    return m_content_;
}

void Display2DLayerMetadata::setContent(::nds::display::metadata::Display2DContent content_)
{
    m_content_ = content_;
}

::zserio::vector<::nds::display::types::DisplayPointType>& Display2DLayerMetadata::getAvailableDisplayPointTypes()
{
    return m_availableDisplayPointTypes_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayPointType>& Display2DLayerMetadata::getAvailableDisplayPointTypes() const
{
    return m_availableDisplayPointTypes_.value().getRawArray();
}

void Display2DLayerMetadata::setAvailableDisplayPointTypes(const ::zserio::vector<::nds::display::types::DisplayPointType>& availableDisplayPointTypes_)
{
    m_availableDisplayPointTypes_ = ZserioArrayType_availableDisplayPointTypes(availableDisplayPointTypes_);
}

void Display2DLayerMetadata::setAvailableDisplayPointTypes(::zserio::vector<::nds::display::types::DisplayPointType>&& availableDisplayPointTypes_)
{
    m_availableDisplayPointTypes_ = ZserioArrayType_availableDisplayPointTypes(std::move(availableDisplayPointTypes_));
}

bool Display2DLayerMetadata::isAvailableDisplayPointTypesUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS);
}

bool Display2DLayerMetadata::isAvailableDisplayPointTypesSet() const
{
    return m_availableDisplayPointTypes_.hasValue();
}

void Display2DLayerMetadata::resetAvailableDisplayPointTypes()
{
    m_availableDisplayPointTypes_.reset();
}

::zserio::vector<::nds::display::types::DisplayLineType>& Display2DLayerMetadata::getAvailableDisplayLineTypes()
{
    return m_availableDisplayLineTypes_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayLineType>& Display2DLayerMetadata::getAvailableDisplayLineTypes() const
{
    return m_availableDisplayLineTypes_.value().getRawArray();
}

void Display2DLayerMetadata::setAvailableDisplayLineTypes(const ::zserio::vector<::nds::display::types::DisplayLineType>& availableDisplayLineTypes_)
{
    m_availableDisplayLineTypes_ = ZserioArrayType_availableDisplayLineTypes(availableDisplayLineTypes_);
}

void Display2DLayerMetadata::setAvailableDisplayLineTypes(::zserio::vector<::nds::display::types::DisplayLineType>&& availableDisplayLineTypes_)
{
    m_availableDisplayLineTypes_ = ZserioArrayType_availableDisplayLineTypes(std::move(availableDisplayLineTypes_));
}

bool Display2DLayerMetadata::isAvailableDisplayLineTypesUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES);
}

bool Display2DLayerMetadata::isAvailableDisplayLineTypesSet() const
{
    return m_availableDisplayLineTypes_.hasValue();
}

void Display2DLayerMetadata::resetAvailableDisplayLineTypes()
{
    m_availableDisplayLineTypes_.reset();
}

::zserio::vector<::nds::display::types::DisplayAreaType>& Display2DLayerMetadata::getAvailableDisplayAreaTypes()
{
    return m_availableDisplayAreaTypes_.value().getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayAreaType>& Display2DLayerMetadata::getAvailableDisplayAreaTypes() const
{
    return m_availableDisplayAreaTypes_.value().getRawArray();
}

void Display2DLayerMetadata::setAvailableDisplayAreaTypes(const ::zserio::vector<::nds::display::types::DisplayAreaType>& availableDisplayAreaTypes_)
{
    m_availableDisplayAreaTypes_ = ZserioArrayType_availableDisplayAreaTypes(availableDisplayAreaTypes_);
}

void Display2DLayerMetadata::setAvailableDisplayAreaTypes(::zserio::vector<::nds::display::types::DisplayAreaType>&& availableDisplayAreaTypes_)
{
    m_availableDisplayAreaTypes_ = ZserioArrayType_availableDisplayAreaTypes(std::move(availableDisplayAreaTypes_));
}

bool Display2DLayerMetadata::isAvailableDisplayAreaTypesUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS);
}

bool Display2DLayerMetadata::isAvailableDisplayAreaTypesSet() const
{
    return m_availableDisplayAreaTypes_.hasValue();
}

void Display2DLayerMetadata::resetAvailableDisplayAreaTypes()
{
    m_availableDisplayAreaTypes_.reset();
}

::nds::display::metadata::DrawingOrderMapping& Display2DLayerMetadata::getDefaultDrawingOrders()
{
    return m_defaultDrawingOrders_;
}

const ::nds::display::metadata::DrawingOrderMapping& Display2DLayerMetadata::getDefaultDrawingOrders() const
{
    return m_defaultDrawingOrders_;
}

void Display2DLayerMetadata::setDefaultDrawingOrders(const ::nds::display::metadata::DrawingOrderMapping& defaultDrawingOrders_)
{
    m_defaultDrawingOrders_ = defaultDrawingOrders_;
}

void Display2DLayerMetadata::setDefaultDrawingOrders(::nds::display::metadata::DrawingOrderMapping&& defaultDrawingOrders_)
{
    m_defaultDrawingOrders_ = ::std::move(defaultDrawingOrders_);
}

::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& Display2DLayerMetadata::getDisplayAreaTypeRelations()
{
    return m_displayAreaTypeRelations_.value().getRawArray();
}

const ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& Display2DLayerMetadata::getDisplayAreaTypeRelations() const
{
    return m_displayAreaTypeRelations_.value().getRawArray();
}

void Display2DLayerMetadata::setDisplayAreaTypeRelations(const ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& displayAreaTypeRelations_)
{
    m_displayAreaTypeRelations_ = ZserioArrayType_displayAreaTypeRelations(displayAreaTypeRelations_);
}

void Display2DLayerMetadata::setDisplayAreaTypeRelations(::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>&& displayAreaTypeRelations_)
{
    m_displayAreaTypeRelations_ = ZserioArrayType_displayAreaTypeRelations(std::move(displayAreaTypeRelations_));
}

bool Display2DLayerMetadata::isDisplayAreaTypeRelationsUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS);
}

bool Display2DLayerMetadata::isDisplayAreaTypeRelationsSet() const
{
    return m_displayAreaTypeRelations_.hasValue();
}

void Display2DLayerMetadata::resetDisplayAreaTypeRelations()
{
    m_displayAreaTypeRelations_.reset();
}

::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& Display2DLayerMetadata::getDisplayLineTypeRelations()
{
    return m_displayLineTypeRelations_.value().getRawArray();
}

const ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& Display2DLayerMetadata::getDisplayLineTypeRelations() const
{
    return m_displayLineTypeRelations_.value().getRawArray();
}

void Display2DLayerMetadata::setDisplayLineTypeRelations(const ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& displayLineTypeRelations_)
{
    m_displayLineTypeRelations_ = ZserioArrayType_displayLineTypeRelations(displayLineTypeRelations_);
}

void Display2DLayerMetadata::setDisplayLineTypeRelations(::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>&& displayLineTypeRelations_)
{
    m_displayLineTypeRelations_ = ZserioArrayType_displayLineTypeRelations(std::move(displayLineTypeRelations_));
}

bool Display2DLayerMetadata::isDisplayLineTypeRelationsUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS);
}

bool Display2DLayerMetadata::isDisplayLineTypeRelationsSet() const
{
    return m_displayLineTypeRelations_.hasValue();
}

void Display2DLayerMetadata::resetDisplayLineTypeRelations()
{
    m_displayLineTypeRelations_.reset();
}

::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& Display2DLayerMetadata::getDisplayPointTypeRelations()
{
    return m_displayPointTypeRelations_.value().getRawArray();
}

const ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& Display2DLayerMetadata::getDisplayPointTypeRelations() const
{
    return m_displayPointTypeRelations_.value().getRawArray();
}

void Display2DLayerMetadata::setDisplayPointTypeRelations(const ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& displayPointTypeRelations_)
{
    m_displayPointTypeRelations_ = ZserioArrayType_displayPointTypeRelations(displayPointTypeRelations_);
}

void Display2DLayerMetadata::setDisplayPointTypeRelations(::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>&& displayPointTypeRelations_)
{
    m_displayPointTypeRelations_ = ZserioArrayType_displayPointTypeRelations(std::move(displayPointTypeRelations_));
}

bool Display2DLayerMetadata::isDisplayPointTypeRelationsUsed() const
{
    return ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS);
}

bool Display2DLayerMetadata::isDisplayPointTypeRelationsSet() const
{
    return m_displayPointTypeRelations_.hasValue();
}

void Display2DLayerMetadata::resetDisplayPointTypeRelations()
{
    m_displayPointTypeRelations_.reset();
}

::nds::display::metadata::DisplayScaleTileLevelMapping& Display2DLayerMetadata::getDisplayScaleTileLevelMapping()
{
    return m_displayScaleTileLevelMapping_;
}

const ::nds::display::metadata::DisplayScaleTileLevelMapping& Display2DLayerMetadata::getDisplayScaleTileLevelMapping() const
{
    return m_displayScaleTileLevelMapping_;
}

void Display2DLayerMetadata::setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = displayScaleTileLevelMapping_;
}

void Display2DLayerMetadata::setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = ::std::move(displayScaleTileLevelMapping_);
}

void Display2DLayerMetadata::initPackingContext(Display2DLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    m_defaultDrawingOrders_.initPackingContext(context.getDefaultDrawingOrders());
    m_displayScaleTileLevelMapping_.initPackingContext(context.getDisplayScaleTileLevelMapping());
}

size_t Display2DLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        endBitPosition += m_availableDisplayPointTypes_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        endBitPosition += m_availableDisplayLineTypes_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        endBitPosition += m_availableDisplayAreaTypes_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_defaultDrawingOrders_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS)
    {
        endBitPosition += m_displayAreaTypeRelations_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS)
    {
        endBitPosition += m_displayLineTypeRelations_.value().bitSizeOf(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS)
    {
        endBitPosition += m_displayPointTypeRelations_.value().bitSizeOf(*this, endBitPosition);
    }
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Display2DLayerMetadata::bitSizeOf(Display2DLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        endBitPosition += m_availableDisplayPointTypes_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        endBitPosition += m_availableDisplayLineTypes_.value().bitSizeOfPacked(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        endBitPosition += m_availableDisplayAreaTypes_.value().bitSizeOfPacked(endBitPosition);
    }
    endBitPosition += m_defaultDrawingOrders_.bitSizeOf(context.getDefaultDrawingOrders(), endBitPosition);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS)
    {
        endBitPosition += m_displayAreaTypeRelations_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS)
    {
        endBitPosition += m_displayLineTypeRelations_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS)
    {
        endBitPosition += m_displayPointTypeRelations_.value().bitSizeOfPacked(*this, endBitPosition);
    }
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Display2DLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        endBitPosition = m_availableDisplayPointTypes_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        endBitPosition = m_availableDisplayLineTypes_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        endBitPosition = m_availableDisplayAreaTypes_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_defaultDrawingOrders_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS)
    {
        endBitPosition = m_displayAreaTypeRelations_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS)
    {
        endBitPosition = m_displayLineTypeRelations_.value().initializeOffsets(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS)
    {
        endBitPosition = m_displayPointTypeRelations_.value().initializeOffsets(*this, endBitPosition);
    }
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t Display2DLayerMetadata::initializeOffsets(Display2DLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        endBitPosition = m_availableDisplayPointTypes_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        endBitPosition = m_availableDisplayLineTypes_.value().initializeOffsetsPacked(endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        endBitPosition = m_availableDisplayAreaTypes_.value().initializeOffsetsPacked(endBitPosition);
    }
    endBitPosition = m_defaultDrawingOrders_.initializeOffsets(context.getDefaultDrawingOrders(), endBitPosition);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS)
    {
        endBitPosition = m_displayAreaTypeRelations_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS)
    {
        endBitPosition = m_displayLineTypeRelations_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS)
    {
        endBitPosition = m_displayPointTypeRelations_.value().initializeOffsetsPacked(*this, endBitPosition);
    }
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition;
}

bool Display2DLayerMetadata::operator==(const Display2DLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isAvailableDisplayPointTypesUsed() ? !other.isAvailableDisplayPointTypesUsed() : (m_availableDisplayPointTypes_ == other.m_availableDisplayPointTypes_)) &&
                (!isAvailableDisplayLineTypesUsed() ? !other.isAvailableDisplayLineTypesUsed() : (m_availableDisplayLineTypes_ == other.m_availableDisplayLineTypes_)) &&
                (!isAvailableDisplayAreaTypesUsed() ? !other.isAvailableDisplayAreaTypesUsed() : (m_availableDisplayAreaTypes_ == other.m_availableDisplayAreaTypes_)) &&
                (m_defaultDrawingOrders_ == other.m_defaultDrawingOrders_) &&
                (!isDisplayAreaTypeRelationsUsed() ? !other.isDisplayAreaTypeRelationsUsed() : (m_displayAreaTypeRelations_ == other.m_displayAreaTypeRelations_)) &&
                (!isDisplayLineTypeRelationsUsed() ? !other.isDisplayLineTypeRelationsUsed() : (m_displayLineTypeRelations_ == other.m_displayLineTypeRelations_)) &&
                (!isDisplayPointTypeRelationsUsed() ? !other.isDisplayPointTypeRelationsUsed() : (m_displayPointTypeRelations_ == other.m_displayPointTypeRelations_)) &&
                (m_displayScaleTileLevelMapping_ == other.m_displayScaleTileLevelMapping_);
    }

    return true;
}

uint32_t Display2DLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isAvailableDisplayPointTypesUsed())
        result = ::zserio::calcHashCode(result, m_availableDisplayPointTypes_);
    if (isAvailableDisplayLineTypesUsed())
        result = ::zserio::calcHashCode(result, m_availableDisplayLineTypes_);
    if (isAvailableDisplayAreaTypesUsed())
        result = ::zserio::calcHashCode(result, m_availableDisplayAreaTypes_);
    result = ::zserio::calcHashCode(result, m_defaultDrawingOrders_);
    if (isDisplayAreaTypeRelationsUsed())
        result = ::zserio::calcHashCode(result, m_displayAreaTypeRelations_);
    if (isDisplayLineTypeRelationsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineTypeRelations_);
    if (isDisplayPointTypeRelationsUsed())
        result = ::zserio::calcHashCode(result, m_displayPointTypeRelations_);
    result = ::zserio::calcHashCode(result, m_displayScaleTileLevelMapping_);

    return result;
}

void Display2DLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        m_availableDisplayPointTypes_.value().write(out);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        m_availableDisplayLineTypes_.value().write(out);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        m_availableDisplayAreaTypes_.value().write(out);
    }
    m_defaultDrawingOrders_.write(out);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS)
    {
        m_displayAreaTypeRelations_.value().write(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS)
    {
        m_displayLineTypeRelations_.value().write(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS)
    {
        m_displayPointTypeRelations_.value().write(*this, out);
    }
    m_displayScaleTileLevelMapping_.write(out);
}

void Display2DLayerMetadata::write(Display2DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        m_availableDisplayPointTypes_.value().writePacked(out);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        m_availableDisplayLineTypes_.value().writePacked(out);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        m_availableDisplayAreaTypes_.value().writePacked(out);
    }
    m_defaultDrawingOrders_.write(context.getDefaultDrawingOrders(), out);
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS)
    {
        m_displayAreaTypeRelations_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS)
    {
        m_displayLineTypeRelations_.value().writePacked(*this, out);
    }
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS)
    {
        m_displayPointTypeRelations_.value().writePacked(*this, out);
    }
    m_displayScaleTileLevelMapping_.write(context.getDisplayScaleTileLevelMapping(), out);
}

void Display2DLayerMetadata::ZserioElementFactory_displayAreaTypeRelations::create(Display2DLayerMetadata&        ,
        ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Display2DLayerMetadata::ZserioElementFactory_displayAreaTypeRelations::create(Display2DLayerMetadata&        ,
        ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& array,
        ::nds::display::metadata::DisplayAreaTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void Display2DLayerMetadata::ZserioElementFactory_displayLineTypeRelations::create(Display2DLayerMetadata&        ,
        ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Display2DLayerMetadata::ZserioElementFactory_displayLineTypeRelations::create(Display2DLayerMetadata&        ,
        ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& array,
        ::nds::display::metadata::DisplayLineTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void Display2DLayerMetadata::ZserioElementFactory_displayPointTypeRelations::create(Display2DLayerMetadata&        ,
        ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Display2DLayerMetadata::ZserioElementFactory_displayPointTypeRelations::create(Display2DLayerMetadata&        ,
        ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& array,
        ::nds::display::metadata::DisplayPointTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::display::metadata::Display2DContent Display2DLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::Display2DContent(in);
}

::nds::display::metadata::Display2DContent Display2DLayerMetadata::readContent(Display2DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::Display2DContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_availableDisplayPointTypes> Display2DLayerMetadata::readAvailableDisplayPointTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        ZserioArrayType_availableDisplayPointTypes readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayPointTypes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayPointTypes>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_availableDisplayPointTypes> Display2DLayerMetadata::readAvailableDisplayPointTypes(Display2DLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINTS) == ::nds::display::metadata::Display2DContent::Values::POINTS)
    {
        ZserioArrayType_availableDisplayPointTypes readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayPointTypes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayPointTypes>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_availableDisplayLineTypes> Display2DLayerMetadata::readAvailableDisplayLineTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        ZserioArrayType_availableDisplayLineTypes readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayLineTypes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayLineTypes>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_availableDisplayLineTypes> Display2DLayerMetadata::readAvailableDisplayLineTypes(Display2DLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINES) == ::nds::display::metadata::Display2DContent::Values::LINES)
    {
        ZserioArrayType_availableDisplayLineTypes readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayLineTypes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayLineTypes>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_availableDisplayAreaTypes> Display2DLayerMetadata::readAvailableDisplayAreaTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        ZserioArrayType_availableDisplayAreaTypes readField(allocator);
        readField.read(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayAreaTypes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayAreaTypes>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_availableDisplayAreaTypes> Display2DLayerMetadata::readAvailableDisplayAreaTypes(Display2DLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREAS) == ::nds::display::metadata::Display2DContent::Values::AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREAS || (getContent() & ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS) == ::nds::display::metadata::Display2DContent::Values::SIMPLE_AREA_SETS)
    {
        ZserioArrayType_availableDisplayAreaTypes readField(allocator);
        readField.readPacked(in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayAreaTypes>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayAreaTypes>(::zserio::NullOpt);
}
::nds::display::metadata::DrawingOrderMapping Display2DLayerMetadata::readDefaultDrawingOrders(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::DrawingOrderMapping(in, allocator);
}

::nds::display::metadata::DrawingOrderMapping Display2DLayerMetadata::readDefaultDrawingOrders(Display2DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::metadata::DrawingOrderMapping(context.getDefaultDrawingOrders(), in, allocator);
}
::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_displayAreaTypeRelations> Display2DLayerMetadata::readDisplayAreaTypeRelations(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS)
    {
        ZserioArrayType_displayAreaTypeRelations readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayAreaTypeRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayAreaTypeRelations>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_displayAreaTypeRelations> Display2DLayerMetadata::readDisplayAreaTypeRelations(Display2DLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::AREA_TYPE_RELATIONS)
    {
        ZserioArrayType_displayAreaTypeRelations readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayAreaTypeRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayAreaTypeRelations>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_displayLineTypeRelations> Display2DLayerMetadata::readDisplayLineTypeRelations(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS)
    {
        ZserioArrayType_displayLineTypeRelations readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayLineTypeRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayLineTypeRelations>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_displayLineTypeRelations> Display2DLayerMetadata::readDisplayLineTypeRelations(Display2DLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::LINE_TYPE_RELATIONS)
    {
        ZserioArrayType_displayLineTypeRelations readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayLineTypeRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayLineTypeRelations>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_displayPointTypeRelations> Display2DLayerMetadata::readDisplayPointTypeRelations(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS)
    {
        ZserioArrayType_displayPointTypeRelations readField(allocator);
        readField.read(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayPointTypeRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayPointTypeRelations>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<Display2DLayerMetadata::ZserioArrayType_displayPointTypeRelations> Display2DLayerMetadata::readDisplayPointTypeRelations(Display2DLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS) == ::nds::display::metadata::Display2DContent::Values::POINT_TYPE_RELATIONS)
    {
        ZserioArrayType_displayPointTypeRelations readField(allocator);
        readField.readPacked(*this, in);

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayPointTypeRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_displayPointTypeRelations>(::zserio::NullOpt);
}
::nds::display::metadata::DisplayScaleTileLevelMapping Display2DLayerMetadata::readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(in, allocator);
}

::nds::display::metadata::DisplayScaleTileLevelMapping Display2DLayerMetadata::readDisplayScaleTileLevelMapping(Display2DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(context.getDisplayScaleTileLevelMapping(), in, allocator);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/DisplayScaleTileLevelMapping.h>

namespace nds
{
namespace display
{
namespace metadata
{

DisplayScaleTileLevelMapping::DisplayScaleTileLevelMapping(const allocator_type& allocator) noexcept :
        m_numLevels_(uint8_t()),
        m_tileLevel_(allocator),
        m_scaleRange_(allocator)
{
}

DisplayScaleTileLevelMapping::DisplayScaleTileLevelMapping(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numLevels_(readNumLevels(in)),
        m_tileLevel_(readTileLevel(in, allocator)),
        m_scaleRange_(readScaleRange(in, allocator))
{
}

DisplayScaleTileLevelMapping::DisplayScaleTileLevelMapping(DisplayScaleTileLevelMapping::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numLevels_(readNumLevels(context, in)),
        m_tileLevel_(readTileLevel(context, in, allocator)),
        m_scaleRange_(readScaleRange(context, in, allocator))
{
}

DisplayScaleTileLevelMapping::DisplayScaleTileLevelMapping(::zserio::PropagateAllocatorT,
        const DisplayScaleTileLevelMapping& other, const allocator_type& allocator) :
        m_numLevels_(::zserio::allocatorPropagatingCopy(other.m_numLevels_, allocator)),
        m_tileLevel_(::zserio::allocatorPropagatingCopy(other.m_tileLevel_, allocator)),
        m_scaleRange_(::zserio::allocatorPropagatingCopy(other.m_scaleRange_, allocator))
{
}

uint8_t DisplayScaleTileLevelMapping::getNumLevels() const
{
    return m_numLevels_;
}

void DisplayScaleTileLevelMapping::setNumLevels(uint8_t numLevels_)
{
    m_numLevels_ = numLevels_;
}

::zserio::vector<uint8_t>& DisplayScaleTileLevelMapping::getTileLevel()
{
    return m_tileLevel_.getRawArray();
}

const ::zserio::vector<uint8_t>& DisplayScaleTileLevelMapping::getTileLevel() const
{
    return m_tileLevel_.getRawArray();
}

void DisplayScaleTileLevelMapping::setTileLevel(const ::zserio::vector<uint8_t>& tileLevel_)
{
    m_tileLevel_ = ZserioArrayType_tileLevel(tileLevel_);
}

void DisplayScaleTileLevelMapping::setTileLevel(::zserio::vector<uint8_t>&& tileLevel_)
{
    m_tileLevel_ = ZserioArrayType_tileLevel(std::move(tileLevel_));
}

::zserio::vector<::nds::core::types::ScaleRange>& DisplayScaleTileLevelMapping::getScaleRange()
{
    return m_scaleRange_.getRawArray();
}

const ::zserio::vector<::nds::core::types::ScaleRange>& DisplayScaleTileLevelMapping::getScaleRange() const
{
    return m_scaleRange_.getRawArray();
}

void DisplayScaleTileLevelMapping::setScaleRange(const ::zserio::vector<::nds::core::types::ScaleRange>& scaleRange_)
{
    m_scaleRange_ = ZserioArrayType_scaleRange(scaleRange_);
}

void DisplayScaleTileLevelMapping::setScaleRange(::zserio::vector<::nds::core::types::ScaleRange>&& scaleRange_)
{
    m_scaleRange_ = ZserioArrayType_scaleRange(std::move(scaleRange_));
}

void DisplayScaleTileLevelMapping::initPackingContext(DisplayScaleTileLevelMapping::ZserioPackingContext& context) const
{
    context.getNumLevels().init<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(m_numLevels_);
}

size_t DisplayScaleTileLevelMapping::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(4);
    endBitPosition += m_tileLevel_.bitSizeOf(endBitPosition);
    endBitPosition += m_scaleRange_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayScaleTileLevelMapping::bitSizeOf(DisplayScaleTileLevelMapping::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumLevels().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(m_numLevels_);
    endBitPosition += m_tileLevel_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_scaleRange_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayScaleTileLevelMapping::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(4);
    endBitPosition = m_tileLevel_.initializeOffsets(endBitPosition);
    endBitPosition = m_scaleRange_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

size_t DisplayScaleTileLevelMapping::initializeOffsets(DisplayScaleTileLevelMapping::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumLevels().bitSizeOf<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(m_numLevels_);
    endBitPosition = m_tileLevel_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_scaleRange_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool DisplayScaleTileLevelMapping::operator==(const DisplayScaleTileLevelMapping& other) const
{
    if (this != &other)
    {
        return
                (m_numLevels_ == other.m_numLevels_) &&
                (m_tileLevel_ == other.m_tileLevel_) &&
                (m_scaleRange_ == other.m_scaleRange_);
    }

    return true;
}

uint32_t DisplayScaleTileLevelMapping::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numLevels_);
    result = ::zserio::calcHashCode(result, m_tileLevel_);
    result = ::zserio::calcHashCode(result, m_scaleRange_);

    return result;
}

void DisplayScaleTileLevelMapping::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_numLevels_, UINT8_C(4));

    // check array length
    if (m_tileLevel_.getRawArray().size() != static_cast<size_t>(getNumLevels()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DisplayScaleTileLevelMapping.tileLevel: ") <<
                m_tileLevel_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumLevels()) << "!";
    }
    m_tileLevel_.write(out);

    // check array length
    if (m_scaleRange_.getRawArray().size() != static_cast<size_t>(getNumLevels()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DisplayScaleTileLevelMapping.scaleRange: ") <<
                m_scaleRange_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumLevels()) << "!";
    }
    m_scaleRange_.writePacked(*this, out);
}

void DisplayScaleTileLevelMapping::write(DisplayScaleTileLevelMapping::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumLevels().write<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(out, m_numLevels_);

    // check array length
    if (m_tileLevel_.getRawArray().size() != static_cast<size_t>(getNumLevels()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DisplayScaleTileLevelMapping.tileLevel: ") <<
                m_tileLevel_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumLevels()) << "!";
    }
    m_tileLevel_.writePacked(out);

    // check array length
    if (m_scaleRange_.getRawArray().size() != static_cast<size_t>(getNumLevels()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DisplayScaleTileLevelMapping.scaleRange: ") <<
                m_scaleRange_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumLevels()) << "!";
    }
    m_scaleRange_.writePacked(*this, out);
}

void DisplayScaleTileLevelMapping::ZserioElementFactory_scaleRange::create(DisplayScaleTileLevelMapping&        ,
        ::zserio::vector<::nds::core::types::ScaleRange>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void DisplayScaleTileLevelMapping::ZserioElementFactory_scaleRange::create(DisplayScaleTileLevelMapping&        ,
        ::zserio::vector<::nds::core::types::ScaleRange>& array,
        ::nds::core::types::ScaleRange::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

uint8_t DisplayScaleTileLevelMapping::readNumLevels(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(4)));
}

uint8_t DisplayScaleTileLevelMapping::readNumLevels(DisplayScaleTileLevelMapping::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumLevels().read<::zserio::BitFieldArrayTraits<uint8_t, UINT8_C(4)>>(in);
}
DisplayScaleTileLevelMapping::ZserioArrayType_tileLevel DisplayScaleTileLevelMapping::readTileLevel(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_tileLevel readField(allocator);
    readField.read(in, static_cast<size_t>(getNumLevels()));

    return readField;
}

DisplayScaleTileLevelMapping::ZserioArrayType_tileLevel DisplayScaleTileLevelMapping::readTileLevel(DisplayScaleTileLevelMapping::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_tileLevel readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumLevels()));

    return readField;
}
DisplayScaleTileLevelMapping::ZserioArrayType_scaleRange DisplayScaleTileLevelMapping::readScaleRange(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_scaleRange readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumLevels()));

    return readField;
}

DisplayScaleTileLevelMapping::ZserioArrayType_scaleRange DisplayScaleTileLevelMapping::readScaleRange(DisplayScaleTileLevelMapping::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_scaleRange readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumLevels()));

    return readField;
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/Display3DLayerMetadata.h>

namespace nds
{
namespace display
{
namespace metadata
{

Display3DLayerMetadata::Display3DLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::display::metadata::Display3DContent()),
        m_displayScaleTileLevelMapping_(allocator)
{
}

Display3DLayerMetadata::Display3DLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(in, allocator))
{
}

Display3DLayerMetadata::Display3DLayerMetadata(Display3DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(context, in, allocator))
{
}

Display3DLayerMetadata::Display3DLayerMetadata(::zserio::PropagateAllocatorT,
        const Display3DLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_displayScaleTileLevelMapping_(::zserio::allocatorPropagatingCopy(other.m_displayScaleTileLevelMapping_, allocator))
{
}

::nds::display::metadata::Display3DContent Display3DLayerMetadata::getContent() const
{
    return m_content_;
}

void Display3DLayerMetadata::setContent(::nds::display::metadata::Display3DContent content_)
{
    m_content_ = content_;
}

::nds::display::metadata::DisplayScaleTileLevelMapping& Display3DLayerMetadata::getDisplayScaleTileLevelMapping()
{
    return m_displayScaleTileLevelMapping_;
}

const ::nds::display::metadata::DisplayScaleTileLevelMapping& Display3DLayerMetadata::getDisplayScaleTileLevelMapping() const
{
    return m_displayScaleTileLevelMapping_;
}

void Display3DLayerMetadata::setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = displayScaleTileLevelMapping_;
}

void Display3DLayerMetadata::setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = ::std::move(displayScaleTileLevelMapping_);
}

void Display3DLayerMetadata::initPackingContext(Display3DLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    m_displayScaleTileLevelMapping_.initPackingContext(context.getDisplayScaleTileLevelMapping());
}

size_t Display3DLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Display3DLayerMetadata::bitSizeOf(Display3DLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Display3DLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t Display3DLayerMetadata::initializeOffsets(Display3DLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition;
}

bool Display3DLayerMetadata::operator==(const Display3DLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_displayScaleTileLevelMapping_ == other.m_displayScaleTileLevelMapping_);
    }

    return true;
}

uint32_t Display3DLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_displayScaleTileLevelMapping_);

    return result;
}

void Display3DLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    m_displayScaleTileLevelMapping_.write(out);
}

void Display3DLayerMetadata::write(Display3DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    m_displayScaleTileLevelMapping_.write(context.getDisplayScaleTileLevelMapping(), out);
}

::nds::display::metadata::Display3DContent Display3DLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::Display3DContent(in);
}

::nds::display::metadata::Display3DContent Display3DLayerMetadata::readContent(Display3DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::Display3DContent(context.getContent(), in);
}
::nds::display::metadata::DisplayScaleTileLevelMapping Display3DLayerMetadata::readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(in, allocator);
}

::nds::display::metadata::DisplayScaleTileLevelMapping Display3DLayerMetadata::readDisplayScaleTileLevelMapping(Display3DLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(context.getDisplayScaleTileLevelMapping(), in, allocator);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/Display3DStyleLayerMetadata.h>

namespace nds
{
namespace display
{
namespace metadata
{

Display3DStyleLayerMetadata::Display3DStyleLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(allocator),
        m_textureMetadata_(::zserio::NullOpt)
{
}

Display3DStyleLayerMetadata::Display3DStyleLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in, allocator)),
        m_textureMetadata_(readTextureMetadata(in, allocator))
{
}

Display3DStyleLayerMetadata::Display3DStyleLayerMetadata(Display3DStyleLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in, allocator)),
        m_textureMetadata_(readTextureMetadata(context, in, allocator))
{
}

Display3DStyleLayerMetadata::Display3DStyleLayerMetadata(::zserio::PropagateAllocatorT,
        const Display3DStyleLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_textureMetadata_(::zserio::allocatorPropagatingCopy(other.m_textureMetadata_, allocator))
{
}

::nds::display::metadata::Display3DStyleLayerContent& Display3DStyleLayerMetadata::getContent()
{
    return m_content_;
}

const ::nds::display::metadata::Display3DStyleLayerContent& Display3DStyleLayerMetadata::getContent() const
{
    return m_content_;
}

void Display3DStyleLayerMetadata::setContent(const ::nds::display::metadata::Display3DStyleLayerContent& content_)
{
    m_content_ = content_;
}

void Display3DStyleLayerMetadata::setContent(::nds::display::metadata::Display3DStyleLayerContent&& content_)
{
    m_content_ = ::std::move(content_);
}

::nds::display::metadata::TextureContentDescriptor& Display3DStyleLayerMetadata::getTextureMetadata()
{
    return m_textureMetadata_.value();
}

const ::nds::display::metadata::TextureContentDescriptor& Display3DStyleLayerMetadata::getTextureMetadata() const
{
    return m_textureMetadata_.value();
}

void Display3DStyleLayerMetadata::setTextureMetadata(const ::nds::display::metadata::TextureContentDescriptor& textureMetadata_)
{
    m_textureMetadata_ = textureMetadata_;
}

void Display3DStyleLayerMetadata::setTextureMetadata(::nds::display::metadata::TextureContentDescriptor&& textureMetadata_)
{
    m_textureMetadata_ = ::std::move(textureMetadata_);
}

bool Display3DStyleLayerMetadata::isTextureMetadataUsed() const
{
    return ((getContent().getHasTextures()));
}

bool Display3DStyleLayerMetadata::isTextureMetadataSet() const
{
    return m_textureMetadata_.hasValue();
}

void Display3DStyleLayerMetadata::resetTextureMetadata()
{
    m_textureMetadata_.reset();
}

void Display3DStyleLayerMetadata::initPackingContext(Display3DStyleLayerMetadata::ZserioPackingContext& context) const
{
    if ((getContent().getHasTextures()))
    {
        m_textureMetadata_.value().initPackingContext(context.getTextureMetadata());
    }
}

size_t Display3DStyleLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent().getHasTextures()))
    {
        endBitPosition += m_textureMetadata_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3DStyleLayerMetadata::bitSizeOf(Display3DStyleLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent().getHasTextures()))
    {
        endBitPosition += m_textureMetadata_.value().bitSizeOf(context.getTextureMetadata(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t Display3DStyleLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent().getHasTextures()))
    {
        endBitPosition = m_textureMetadata_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t Display3DStyleLayerMetadata::initializeOffsets(Display3DStyleLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent().getHasTextures()))
    {
        endBitPosition = m_textureMetadata_.value().initializeOffsets(context.getTextureMetadata(), endBitPosition);
    }

    return endBitPosition;
}

bool Display3DStyleLayerMetadata::operator==(const Display3DStyleLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isTextureMetadataUsed() ? !other.isTextureMetadataUsed() : (m_textureMetadata_ == other.m_textureMetadata_));
    }

    return true;
}

uint32_t Display3DStyleLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isTextureMetadataUsed())
        result = ::zserio::calcHashCode(result, m_textureMetadata_);

    return result;
}

void Display3DStyleLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent().getHasTextures()))
    {
        m_textureMetadata_.value().write(out);
    }
}

void Display3DStyleLayerMetadata::write(Display3DStyleLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent().getHasTextures()))
    {
        m_textureMetadata_.value().write(context.getTextureMetadata(), out);
    }
}

::nds::display::metadata::Display3DStyleLayerContent Display3DStyleLayerMetadata::readContent(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::Display3DStyleLayerContent(in, allocator);
}
::zserio::InplaceOptionalHolder<::nds::display::metadata::TextureContentDescriptor> Display3DStyleLayerMetadata::readTextureMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent().getHasTextures()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::metadata::TextureContentDescriptor>(::nds::display::metadata::TextureContentDescriptor(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::metadata::TextureContentDescriptor>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::display::metadata::TextureContentDescriptor> Display3DStyleLayerMetadata::readTextureMetadata(Display3DStyleLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent().getHasTextures()))
    {
        return ::zserio::InplaceOptionalHolder<::nds::display::metadata::TextureContentDescriptor>(::nds::display::metadata::TextureContentDescriptor(context.getTextureMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::display::metadata::TextureContentDescriptor>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/Display3DStyleLayerContent.h>

namespace nds
{
namespace display
{
namespace metadata
{

Display3DStyleLayerContent::Display3DStyleLayerContent(const allocator_type&) noexcept :
        m_hasTextures_(bool()),
        m_hasColors_(bool())
{
}

Display3DStyleLayerContent::Display3DStyleLayerContent(::zserio::BitStreamReader& in, const allocator_type&) :
        m_hasTextures_(readHasTextures(in)),
        m_hasColors_(readHasColors(in))
{
}

Display3DStyleLayerContent::Display3DStyleLayerContent(::zserio::PropagateAllocatorT,
        const Display3DStyleLayerContent& other, const allocator_type& allocator) :
        m_hasTextures_(::zserio::allocatorPropagatingCopy(other.m_hasTextures_, allocator)),
        m_hasColors_(::zserio::allocatorPropagatingCopy(other.m_hasColors_, allocator))
{
}

bool Display3DStyleLayerContent::getHasTextures() const
{
    return m_hasTextures_;
}

void Display3DStyleLayerContent::setHasTextures(bool hasTextures_)
{
    m_hasTextures_ = hasTextures_;
}

bool Display3DStyleLayerContent::getHasColors() const
{
    return m_hasColors_;
}

void Display3DStyleLayerContent::setHasColors(bool hasColors_)
{
    m_hasColors_ = hasColors_;
}

size_t Display3DStyleLayerContent::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);

    return endBitPosition - bitPosition;
}

size_t Display3DStyleLayerContent::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(1);
    endBitPosition += UINT8_C(1);

    return endBitPosition;
}

bool Display3DStyleLayerContent::operator==(const Display3DStyleLayerContent& other) const
{
    if (this != &other)
    {
        return
                (m_hasTextures_ == other.m_hasTextures_) &&
                (m_hasColors_ == other.m_hasColors_);
    }

    return true;
}

uint32_t Display3DStyleLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_hasTextures_);
    result = ::zserio::calcHashCode(result, m_hasColors_);

    return result;
}

void Display3DStyleLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeBool(m_hasTextures_);
    out.writeBool(m_hasColors_);
}

bool Display3DStyleLayerContent::readHasTextures(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}
bool Display3DStyleLayerContent::readHasColors(::zserio::BitStreamReader& in)
{
    return static_cast<bool>(in.readBool());
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/TextureContentDescriptor.h>

namespace nds
{
namespace display
{
namespace metadata
{

TextureContentDescriptor::TextureContentDescriptor(const allocator_type& allocator) noexcept :
        m_textureFormats_(allocator),
        m_textureRenderingUsageTypes_(allocator),
        m_textureConditionUsageTypes_(::nds::display::types::TextureConditionUsageType())
{
}

TextureContentDescriptor::TextureContentDescriptor(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_textureFormats_(readTextureFormats(in, allocator)),
        m_textureRenderingUsageTypes_(readTextureRenderingUsageTypes(in, allocator)),
        m_textureConditionUsageTypes_(readTextureConditionUsageTypes(in))
{
}

TextureContentDescriptor::TextureContentDescriptor(TextureContentDescriptor::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_textureFormats_(readTextureFormats(context, in, allocator)),
        m_textureRenderingUsageTypes_(readTextureRenderingUsageTypes(context, in, allocator)),
        m_textureConditionUsageTypes_(readTextureConditionUsageTypes(context, in))
{
}

TextureContentDescriptor::TextureContentDescriptor(::zserio::PropagateAllocatorT,
        const TextureContentDescriptor& other, const allocator_type& allocator) :
        m_textureFormats_(::zserio::allocatorPropagatingCopy(other.m_textureFormats_, allocator)),
        m_textureRenderingUsageTypes_(::zserio::allocatorPropagatingCopy(other.m_textureRenderingUsageTypes_, allocator)),
        m_textureConditionUsageTypes_(::zserio::allocatorPropagatingCopy(other.m_textureConditionUsageTypes_, allocator))
{
}

::zserio::vector<::nds::display::types::TextureFormat>& TextureContentDescriptor::getTextureFormats()
{
    return m_textureFormats_.getRawArray();
}

const ::zserio::vector<::nds::display::types::TextureFormat>& TextureContentDescriptor::getTextureFormats() const
{
    return m_textureFormats_.getRawArray();
}

void TextureContentDescriptor::setTextureFormats(const ::zserio::vector<::nds::display::types::TextureFormat>& textureFormats_)
{
    m_textureFormats_ = ZserioArrayType_textureFormats(textureFormats_);
}

void TextureContentDescriptor::setTextureFormats(::zserio::vector<::nds::display::types::TextureFormat>&& textureFormats_)
{
    m_textureFormats_ = ZserioArrayType_textureFormats(std::move(textureFormats_));
}

::zserio::vector<::nds::display::types::TextureRenderingUsageType>& TextureContentDescriptor::getTextureRenderingUsageTypes()
{
    return m_textureRenderingUsageTypes_.getRawArray();
}

const ::zserio::vector<::nds::display::types::TextureRenderingUsageType>& TextureContentDescriptor::getTextureRenderingUsageTypes() const
{
    return m_textureRenderingUsageTypes_.getRawArray();
}

void TextureContentDescriptor::setTextureRenderingUsageTypes(const ::zserio::vector<::nds::display::types::TextureRenderingUsageType>& textureRenderingUsageTypes_)
{
    m_textureRenderingUsageTypes_ = ZserioArrayType_textureRenderingUsageTypes(textureRenderingUsageTypes_);
}

void TextureContentDescriptor::setTextureRenderingUsageTypes(::zserio::vector<::nds::display::types::TextureRenderingUsageType>&& textureRenderingUsageTypes_)
{
    m_textureRenderingUsageTypes_ = ZserioArrayType_textureRenderingUsageTypes(std::move(textureRenderingUsageTypes_));
}

::nds::display::types::TextureConditionUsageType TextureContentDescriptor::getTextureConditionUsageTypes() const
{
    return m_textureConditionUsageTypes_;
}

void TextureContentDescriptor::setTextureConditionUsageTypes(::nds::display::types::TextureConditionUsageType textureConditionUsageTypes_)
{
    m_textureConditionUsageTypes_ = textureConditionUsageTypes_;
}

void TextureContentDescriptor::initPackingContext(TextureContentDescriptor::ZserioPackingContext& context) const
{
    m_textureConditionUsageTypes_.initPackingContext(context.getTextureConditionUsageTypes());
}

size_t TextureContentDescriptor::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_textureFormats_.bitSizeOf(endBitPosition);
    endBitPosition += m_textureRenderingUsageTypes_.bitSizeOf(endBitPosition);
    endBitPosition += m_textureConditionUsageTypes_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t TextureContentDescriptor::bitSizeOf(TextureContentDescriptor::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_textureFormats_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_textureRenderingUsageTypes_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_textureConditionUsageTypes_.bitSizeOf(context.getTextureConditionUsageTypes(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t TextureContentDescriptor::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_textureFormats_.initializeOffsets(endBitPosition);
    endBitPosition = m_textureRenderingUsageTypes_.initializeOffsets(endBitPosition);
    endBitPosition = m_textureConditionUsageTypes_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t TextureContentDescriptor::initializeOffsets(TextureContentDescriptor::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_textureFormats_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_textureRenderingUsageTypes_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_textureConditionUsageTypes_.initializeOffsets(context.getTextureConditionUsageTypes(), endBitPosition);

    return endBitPosition;
}

bool TextureContentDescriptor::operator==(const TextureContentDescriptor& other) const
{
    if (this != &other)
    {
        return
                (m_textureFormats_ == other.m_textureFormats_) &&
                (m_textureRenderingUsageTypes_ == other.m_textureRenderingUsageTypes_) &&
                (m_textureConditionUsageTypes_ == other.m_textureConditionUsageTypes_);
    }

    return true;
}

uint32_t TextureContentDescriptor::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_textureFormats_);
    result = ::zserio::calcHashCode(result, m_textureRenderingUsageTypes_);
    result = ::zserio::calcHashCode(result, m_textureConditionUsageTypes_);

    return result;
}

void TextureContentDescriptor::write(::zserio::BitStreamWriter& out) const
{
    m_textureFormats_.write(out);
    m_textureRenderingUsageTypes_.write(out);
    m_textureConditionUsageTypes_.write(out);
}

void TextureContentDescriptor::write(TextureContentDescriptor::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_textureFormats_.writePacked(out);
    m_textureRenderingUsageTypes_.writePacked(out);
    m_textureConditionUsageTypes_.write(context.getTextureConditionUsageTypes(), out);
}

TextureContentDescriptor::ZserioArrayType_textureFormats TextureContentDescriptor::readTextureFormats(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_textureFormats readField(allocator);
    readField.read(in);

    return readField;
}

TextureContentDescriptor::ZserioArrayType_textureFormats TextureContentDescriptor::readTextureFormats(TextureContentDescriptor::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_textureFormats readField(allocator);
    readField.readPacked(in);

    return readField;
}
TextureContentDescriptor::ZserioArrayType_textureRenderingUsageTypes TextureContentDescriptor::readTextureRenderingUsageTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_textureRenderingUsageTypes readField(allocator);
    readField.read(in);

    return readField;
}

TextureContentDescriptor::ZserioArrayType_textureRenderingUsageTypes TextureContentDescriptor::readTextureRenderingUsageTypes(TextureContentDescriptor::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_textureRenderingUsageTypes readField(allocator);
    readField.readPacked(in);

    return readField;
}
::nds::display::types::TextureConditionUsageType TextureContentDescriptor::readTextureConditionUsageTypes(::zserio::BitStreamReader& in)
{
    return ::nds::display::types::TextureConditionUsageType(in);
}

::nds::display::types::TextureConditionUsageType TextureContentDescriptor::readTextureConditionUsageTypes(TextureContentDescriptor::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::types::TextureConditionUsageType(context.getTextureConditionUsageTypes(), in);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/GltfLayerMetadata.h>

namespace nds
{
namespace display
{
namespace metadata
{

GltfLayerMetadata::GltfLayerMetadata(const allocator_type& allocator) noexcept :
        m_gltfVersion_(::nds::display::types::GltfVersion()),
        m_usedExtensions_(allocator),
        m_displayScaleTileLevelMapping_(allocator)
{
}

GltfLayerMetadata::GltfLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_gltfVersion_(readGltfVersion(in)),
        m_usedExtensions_(readUsedExtensions(in, allocator)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(in, allocator))
{
}

GltfLayerMetadata::GltfLayerMetadata(GltfLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_gltfVersion_(readGltfVersion(context, in)),
        m_usedExtensions_(readUsedExtensions(in, allocator)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(context, in, allocator))
{
}

GltfLayerMetadata::GltfLayerMetadata(::zserio::PropagateAllocatorT,
        const GltfLayerMetadata& other, const allocator_type& allocator) :
        m_gltfVersion_(::zserio::allocatorPropagatingCopy(other.m_gltfVersion_, allocator)),
        m_usedExtensions_(::zserio::allocatorPropagatingCopy(other.m_usedExtensions_, allocator)),
        m_displayScaleTileLevelMapping_(::zserio::allocatorPropagatingCopy(other.m_displayScaleTileLevelMapping_, allocator))
{
}

::nds::display::types::GltfVersion GltfLayerMetadata::getGltfVersion() const
{
    return m_gltfVersion_;
}

void GltfLayerMetadata::setGltfVersion(::nds::display::types::GltfVersion gltfVersion_)
{
    m_gltfVersion_ = gltfVersion_;
}

::zserio::vector<::nds::display::types::GltfExtensionId>& GltfLayerMetadata::getUsedExtensions()
{
    return m_usedExtensions_.getRawArray();
}

const ::zserio::vector<::nds::display::types::GltfExtensionId>& GltfLayerMetadata::getUsedExtensions() const
{
    return m_usedExtensions_.getRawArray();
}

void GltfLayerMetadata::setUsedExtensions(const ::zserio::vector<::nds::display::types::GltfExtensionId>& usedExtensions_)
{
    m_usedExtensions_ = ZserioArrayType_usedExtensions(usedExtensions_);
}

void GltfLayerMetadata::setUsedExtensions(::zserio::vector<::nds::display::types::GltfExtensionId>&& usedExtensions_)
{
    m_usedExtensions_ = ZserioArrayType_usedExtensions(std::move(usedExtensions_));
}

::nds::display::metadata::DisplayScaleTileLevelMapping& GltfLayerMetadata::getDisplayScaleTileLevelMapping()
{
    return m_displayScaleTileLevelMapping_;
}

const ::nds::display::metadata::DisplayScaleTileLevelMapping& GltfLayerMetadata::getDisplayScaleTileLevelMapping() const
{
    return m_displayScaleTileLevelMapping_;
}

void GltfLayerMetadata::setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = displayScaleTileLevelMapping_;
}

void GltfLayerMetadata::setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = ::std::move(displayScaleTileLevelMapping_);
}

void GltfLayerMetadata::initPackingContext(GltfLayerMetadata::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getGltfVersion(), m_gltfVersion_);
    m_displayScaleTileLevelMapping_.initPackingContext(context.getDisplayScaleTileLevelMapping());
}

size_t GltfLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_gltfVersion_);
    endBitPosition += m_usedExtensions_.bitSizeOf(endBitPosition);
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t GltfLayerMetadata::bitSizeOf(GltfLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getGltfVersion(), m_gltfVersion_);
    endBitPosition += m_usedExtensions_.bitSizeOf(endBitPosition);
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t GltfLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_gltfVersion_);
    endBitPosition = m_usedExtensions_.initializeOffsets(endBitPosition);
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t GltfLayerMetadata::initializeOffsets(GltfLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getGltfVersion(), endBitPosition,
        m_gltfVersion_);
    endBitPosition = m_usedExtensions_.initializeOffsets(endBitPosition);
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition;
}

bool GltfLayerMetadata::operator==(const GltfLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_gltfVersion_ == other.m_gltfVersion_) &&
                (m_usedExtensions_ == other.m_usedExtensions_) &&
                (m_displayScaleTileLevelMapping_ == other.m_displayScaleTileLevelMapping_);
    }

    return true;
}

uint32_t GltfLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_gltfVersion_);
    result = ::zserio::calcHashCode(result, m_usedExtensions_);
    result = ::zserio::calcHashCode(result, m_displayScaleTileLevelMapping_);

    return result;
}

void GltfLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_gltfVersion_);
    m_usedExtensions_.write(out);
    m_displayScaleTileLevelMapping_.write(out);
}

void GltfLayerMetadata::write(GltfLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getGltfVersion(), out, m_gltfVersion_);
    m_usedExtensions_.write(out);
    m_displayScaleTileLevelMapping_.write(context.getDisplayScaleTileLevelMapping(), out);
}

::nds::display::types::GltfVersion GltfLayerMetadata::readGltfVersion(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::GltfVersion>(in);
}

::nds::display::types::GltfVersion GltfLayerMetadata::readGltfVersion(GltfLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::GltfVersion>(context.getGltfVersion(), in);
}
GltfLayerMetadata::ZserioArrayType_usedExtensions GltfLayerMetadata::readUsedExtensions(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_usedExtensions readField(allocator);
    readField.read(in);

    return readField;
}
::nds::display::metadata::DisplayScaleTileLevelMapping GltfLayerMetadata::readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(in, allocator);
}

::nds::display::metadata::DisplayScaleTileLevelMapping GltfLayerMetadata::readDisplayScaleTileLevelMapping(GltfLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(context.getDisplayScaleTileLevelMapping(), in, allocator);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/metadata/HeightmapLayerMetadata.h>
#include <nds/display/types/HeightmapMapProjection.h>

namespace nds
{
namespace display
{
namespace metadata
{

HeightmapLayerMetadata::HeightmapLayerMetadata(const allocator_type& allocator) noexcept :
        m_availableUsageTypes_(allocator),
        m_mapProjection_(::nds::display::types::HeightmapMapProjection()),
        m_tileBufferSize_(uint16_t()),
        m_maximumLatitude_(::zserio::NullOpt),
        m_displayScaleTileLevelMapping_(allocator)
{
}

HeightmapLayerMetadata::HeightmapLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_availableUsageTypes_(readAvailableUsageTypes(in, allocator)),
        m_mapProjection_(readMapProjection(in)),
        m_tileBufferSize_(readTileBufferSize(in)),
        m_maximumLatitude_(readMaximumLatitude(in)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(in, allocator))
{
}

HeightmapLayerMetadata::HeightmapLayerMetadata(HeightmapLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_availableUsageTypes_(readAvailableUsageTypes(context, in, allocator)),
        m_mapProjection_(readMapProjection(context, in)),
        m_tileBufferSize_(readTileBufferSize(context, in)),
        m_maximumLatitude_(readMaximumLatitude(context, in)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(context, in, allocator))
{
}

HeightmapLayerMetadata::HeightmapLayerMetadata(::zserio::PropagateAllocatorT,
        const HeightmapLayerMetadata& other, const allocator_type& allocator) :
        m_availableUsageTypes_(::zserio::allocatorPropagatingCopy(other.m_availableUsageTypes_, allocator)),
        m_mapProjection_(::zserio::allocatorPropagatingCopy(other.m_mapProjection_, allocator)),
        m_tileBufferSize_(::zserio::allocatorPropagatingCopy(other.m_tileBufferSize_, allocator)),
        m_maximumLatitude_(::zserio::allocatorPropagatingCopy(other.m_maximumLatitude_, allocator)),
        m_displayScaleTileLevelMapping_(::zserio::allocatorPropagatingCopy(other.m_displayScaleTileLevelMapping_, allocator))
{
}

::zserio::vector<::nds::display::types::TerrainOptimizationType>& HeightmapLayerMetadata::getAvailableUsageTypes()
{
    return m_availableUsageTypes_.getRawArray();
}

const ::zserio::vector<::nds::display::types::TerrainOptimizationType>& HeightmapLayerMetadata::getAvailableUsageTypes() const
{
    return m_availableUsageTypes_.getRawArray();
}

void HeightmapLayerMetadata::setAvailableUsageTypes(const ::zserio::vector<::nds::display::types::TerrainOptimizationType>& availableUsageTypes_)
{
    m_availableUsageTypes_ = ZserioArrayType_availableUsageTypes(availableUsageTypes_);
}

void HeightmapLayerMetadata::setAvailableUsageTypes(::zserio::vector<::nds::display::types::TerrainOptimizationType>&& availableUsageTypes_)
{
    m_availableUsageTypes_ = ZserioArrayType_availableUsageTypes(std::move(availableUsageTypes_));
}

::nds::display::types::HeightmapMapProjection HeightmapLayerMetadata::getMapProjection() const
{
    return m_mapProjection_;
}

void HeightmapLayerMetadata::setMapProjection(::nds::display::types::HeightmapMapProjection mapProjection_)
{
    m_mapProjection_ = mapProjection_;
}

uint16_t HeightmapLayerMetadata::getTileBufferSize() const
{
    return m_tileBufferSize_;
}

void HeightmapLayerMetadata::setTileBufferSize(uint16_t tileBufferSize_)
{
    m_tileBufferSize_ = tileBufferSize_;
}

int32_t HeightmapLayerMetadata::getMaximumLatitude() const
{
    return m_maximumLatitude_.value();
}

void HeightmapLayerMetadata::setMaximumLatitude(int32_t maximumLatitude_)
{
    m_maximumLatitude_ = maximumLatitude_;
}

bool HeightmapLayerMetadata::isMaximumLatitudeUsed() const
{
    return (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857);
}

bool HeightmapLayerMetadata::isMaximumLatitudeSet() const
{
    return m_maximumLatitude_.hasValue();
}

void HeightmapLayerMetadata::resetMaximumLatitude()
{
    m_maximumLatitude_.reset();
}

::nds::display::metadata::DisplayScaleTileLevelMapping& HeightmapLayerMetadata::getDisplayScaleTileLevelMapping()
{
    return m_displayScaleTileLevelMapping_;
}

const ::nds::display::metadata::DisplayScaleTileLevelMapping& HeightmapLayerMetadata::getDisplayScaleTileLevelMapping() const
{
    return m_displayScaleTileLevelMapping_;
}

void HeightmapLayerMetadata::setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = displayScaleTileLevelMapping_;
}

void HeightmapLayerMetadata::setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = ::std::move(displayScaleTileLevelMapping_);
}

void HeightmapLayerMetadata::initPackingContext(HeightmapLayerMetadata::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getMapProjection(), m_mapProjection_);
    context.getTileBufferSize().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_tileBufferSize_);
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        context.getMaximumLatitude().init<::zserio::StdIntArrayTraits<int32_t>>(m_maximumLatitude_.value());
    }
    m_displayScaleTileLevelMapping_.initPackingContext(context.getDisplayScaleTileLevelMapping());
}

size_t HeightmapLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_availableUsageTypes_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOf(m_mapProjection_);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_tileBufferSize_);
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t HeightmapLayerMetadata::bitSizeOf(HeightmapLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_availableUsageTypes_.bitSizeOfPacked(endBitPosition);
    endBitPosition += ::zserio::bitSizeOf(context.getMapProjection(), m_mapProjection_);
    endBitPosition += context.getTileBufferSize().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_tileBufferSize_);
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        endBitPosition += context.getMaximumLatitude().bitSizeOf<::zserio::StdIntArrayTraits<int32_t>>(m_maximumLatitude_.value());
    }
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t HeightmapLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_availableUsageTypes_.initializeOffsets(endBitPosition);
    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_mapProjection_);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_tileBufferSize_);
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        endBitPosition += UINT8_C(32);
    }
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t HeightmapLayerMetadata::initializeOffsets(HeightmapLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_availableUsageTypes_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = ::zserio::initializeOffsets(context.getMapProjection(), endBitPosition,
        m_mapProjection_);
    endBitPosition += context.getTileBufferSize().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_tileBufferSize_);
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        endBitPosition += context.getMaximumLatitude().bitSizeOf<::zserio::StdIntArrayTraits<int32_t>>(m_maximumLatitude_.value());
    }
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition;
}

bool HeightmapLayerMetadata::operator==(const HeightmapLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_availableUsageTypes_ == other.m_availableUsageTypes_) &&
                (m_mapProjection_ == other.m_mapProjection_) &&
                (m_tileBufferSize_ == other.m_tileBufferSize_) &&
                (!isMaximumLatitudeUsed() ? !other.isMaximumLatitudeUsed() : (m_maximumLatitude_ == other.m_maximumLatitude_)) &&
                (m_displayScaleTileLevelMapping_ == other.m_displayScaleTileLevelMapping_);
    }

    return true;
}

uint32_t HeightmapLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_availableUsageTypes_);
    result = ::zserio::calcHashCode(result, m_mapProjection_);
    result = ::zserio::calcHashCode(result, m_tileBufferSize_);
    if (isMaximumLatitudeUsed())
        result = ::zserio::calcHashCode(result, m_maximumLatitude_);
    result = ::zserio::calcHashCode(result, m_displayScaleTileLevelMapping_);

    return result;
}

void HeightmapLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_availableUsageTypes_.write(out);
    ::zserio::write(out, m_mapProjection_);
    out.writeVarUInt16(m_tileBufferSize_);
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        out.writeSignedBits(m_maximumLatitude_.value(), UINT8_C(32));
    }
    m_displayScaleTileLevelMapping_.write(out);
}

void HeightmapLayerMetadata::write(HeightmapLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_availableUsageTypes_.writePacked(out);
    ::zserio::write(context.getMapProjection(), out, m_mapProjection_);
    context.getTileBufferSize().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_tileBufferSize_);
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        context.getMaximumLatitude().write<::zserio::StdIntArrayTraits<int32_t>>(out, m_maximumLatitude_.value());
    }
    m_displayScaleTileLevelMapping_.write(context.getDisplayScaleTileLevelMapping(), out);
}

HeightmapLayerMetadata::ZserioArrayType_availableUsageTypes HeightmapLayerMetadata::readAvailableUsageTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_availableUsageTypes readField(allocator);
    readField.read(in);

    return readField;
}

HeightmapLayerMetadata::ZserioArrayType_availableUsageTypes HeightmapLayerMetadata::readAvailableUsageTypes(HeightmapLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_availableUsageTypes readField(allocator);
    readField.readPacked(in);

    return readField;
}
::nds::display::types::HeightmapMapProjection HeightmapLayerMetadata::readMapProjection(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::HeightmapMapProjection>(in);
}

::nds::display::types::HeightmapMapProjection HeightmapLayerMetadata::readMapProjection(HeightmapLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::HeightmapMapProjection>(context.getMapProjection(), in);
}
uint16_t HeightmapLayerMetadata::readTileBufferSize(::zserio::BitStreamReader& in)
{
    return static_cast<uint16_t>(in.readVarUInt16());
}

uint16_t HeightmapLayerMetadata::readTileBufferSize(HeightmapLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getTileBufferSize().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in);
}
::zserio::InplaceOptionalHolder<int32_t> HeightmapLayerMetadata::readMaximumLatitude(::zserio::BitStreamReader& in)
{
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        return ::zserio::InplaceOptionalHolder<int32_t>(static_cast<int32_t>(in.readSignedBits(UINT8_C(32))));
    }

    return ::zserio::InplaceOptionalHolder<int32_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<int32_t> HeightmapLayerMetadata::readMaximumLatitude(HeightmapLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getMapProjection() == ::nds::display::types::HeightmapMapProjection::WEB_MERCATOR_EPSG_3857)
    {
        return ::zserio::InplaceOptionalHolder<int32_t>(context.getMaximumLatitude().read<::zserio::StdIntArrayTraits<int32_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<int32_t>(::zserio::NullOpt);
}
::nds::display::metadata::DisplayScaleTileLevelMapping HeightmapLayerMetadata::readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(in, allocator);
}

::nds::display::metadata::DisplayScaleTileLevelMapping HeightmapLayerMetadata::readDisplayScaleTileLevelMapping(HeightmapLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(context.getDisplayScaleTileLevelMapping(), in, allocator);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/BdamLayerMetadata.h>

namespace nds
{
namespace display
{
namespace metadata
{

BdamLayerMetadata::BdamLayerMetadata(const allocator_type& allocator) noexcept :
        m_displayScaleTileLevelMapping_(allocator)
{
}

BdamLayerMetadata::BdamLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(in, allocator))
{
}

BdamLayerMetadata::BdamLayerMetadata(BdamLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(context, in, allocator))
{
}

BdamLayerMetadata::BdamLayerMetadata(::zserio::PropagateAllocatorT,
        const BdamLayerMetadata& other, const allocator_type& allocator) :
        m_displayScaleTileLevelMapping_(::zserio::allocatorPropagatingCopy(other.m_displayScaleTileLevelMapping_, allocator))
{
}

::nds::display::metadata::DisplayScaleTileLevelMapping& BdamLayerMetadata::getDisplayScaleTileLevelMapping()
{
    return m_displayScaleTileLevelMapping_;
}

const ::nds::display::metadata::DisplayScaleTileLevelMapping& BdamLayerMetadata::getDisplayScaleTileLevelMapping() const
{
    return m_displayScaleTileLevelMapping_;
}

void BdamLayerMetadata::setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = displayScaleTileLevelMapping_;
}

void BdamLayerMetadata::setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = ::std::move(displayScaleTileLevelMapping_);
}

void BdamLayerMetadata::initPackingContext(BdamLayerMetadata::ZserioPackingContext& context) const
{
    m_displayScaleTileLevelMapping_.initPackingContext(context.getDisplayScaleTileLevelMapping());
}

size_t BdamLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t BdamLayerMetadata::bitSizeOf(BdamLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t BdamLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t BdamLayerMetadata::initializeOffsets(BdamLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition;
}

bool BdamLayerMetadata::operator==(const BdamLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_displayScaleTileLevelMapping_ == other.m_displayScaleTileLevelMapping_);
    }

    return true;
}

uint32_t BdamLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_displayScaleTileLevelMapping_);

    return result;
}

void BdamLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_displayScaleTileLevelMapping_.write(out);
}

void BdamLayerMetadata::write(BdamLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_displayScaleTileLevelMapping_.write(context.getDisplayScaleTileLevelMapping(), out);
}

::nds::display::metadata::DisplayScaleTileLevelMapping BdamLayerMetadata::readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(in, allocator);
}

::nds::display::metadata::DisplayScaleTileLevelMapping BdamLayerMetadata::readDisplayScaleTileLevelMapping(BdamLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(context.getDisplayScaleTileLevelMapping(), in, allocator);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/DrawingOrderMapping.h>

namespace nds
{
namespace display
{
namespace metadata
{

DrawingOrderMapping::DrawingOrderMapping(const allocator_type& allocator) noexcept :
        m_numDisplayPointTypes_(uint32_t()),
        m_numDisplayLineTypes_(uint32_t()),
        m_numDisplayAreaTypes_(uint32_t()),
        m_displayPointType_(allocator),
        m_displayPointDrawingOrder_(allocator),
        m_displayLineType_(allocator),
        m_displayLineDrawingOrder_(allocator),
        m_displayAreaType_(allocator),
        m_displayAreaDrawingOrder_(allocator)
{
}

DrawingOrderMapping::DrawingOrderMapping(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numDisplayPointTypes_(readNumDisplayPointTypes(in)),
        m_numDisplayLineTypes_(readNumDisplayLineTypes(in)),
        m_numDisplayAreaTypes_(readNumDisplayAreaTypes(in)),
        m_displayPointType_(readDisplayPointType(in, allocator)),
        m_displayPointDrawingOrder_(readDisplayPointDrawingOrder(in, allocator)),
        m_displayLineType_(readDisplayLineType(in, allocator)),
        m_displayLineDrawingOrder_(readDisplayLineDrawingOrder(in, allocator)),
        m_displayAreaType_(readDisplayAreaType(in, allocator)),
        m_displayAreaDrawingOrder_(readDisplayAreaDrawingOrder(in, allocator))
{
}

DrawingOrderMapping::DrawingOrderMapping(DrawingOrderMapping::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_numDisplayPointTypes_(readNumDisplayPointTypes(context, in)),
        m_numDisplayLineTypes_(readNumDisplayLineTypes(context, in)),
        m_numDisplayAreaTypes_(readNumDisplayAreaTypes(context, in)),
        m_displayPointType_(readDisplayPointType(context, in, allocator)),
        m_displayPointDrawingOrder_(readDisplayPointDrawingOrder(context, in, allocator)),
        m_displayLineType_(readDisplayLineType(context, in, allocator)),
        m_displayLineDrawingOrder_(readDisplayLineDrawingOrder(context, in, allocator)),
        m_displayAreaType_(readDisplayAreaType(context, in, allocator)),
        m_displayAreaDrawingOrder_(readDisplayAreaDrawingOrder(context, in, allocator))
{
}

DrawingOrderMapping::DrawingOrderMapping(::zserio::PropagateAllocatorT,
        const DrawingOrderMapping& other, const allocator_type& allocator) :
        m_numDisplayPointTypes_(::zserio::allocatorPropagatingCopy(other.m_numDisplayPointTypes_, allocator)),
        m_numDisplayLineTypes_(::zserio::allocatorPropagatingCopy(other.m_numDisplayLineTypes_, allocator)),
        m_numDisplayAreaTypes_(::zserio::allocatorPropagatingCopy(other.m_numDisplayAreaTypes_, allocator)),
        m_displayPointType_(::zserio::allocatorPropagatingCopy(other.m_displayPointType_, allocator)),
        m_displayPointDrawingOrder_(::zserio::allocatorPropagatingCopy(other.m_displayPointDrawingOrder_, allocator)),
        m_displayLineType_(::zserio::allocatorPropagatingCopy(other.m_displayLineType_, allocator)),
        m_displayLineDrawingOrder_(::zserio::allocatorPropagatingCopy(other.m_displayLineDrawingOrder_, allocator)),
        m_displayAreaType_(::zserio::allocatorPropagatingCopy(other.m_displayAreaType_, allocator)),
        m_displayAreaDrawingOrder_(::zserio::allocatorPropagatingCopy(other.m_displayAreaDrawingOrder_, allocator))
{
}

uint32_t DrawingOrderMapping::getNumDisplayPointTypes() const
{
    return m_numDisplayPointTypes_;
}

void DrawingOrderMapping::setNumDisplayPointTypes(uint32_t numDisplayPointTypes_)
{
    m_numDisplayPointTypes_ = numDisplayPointTypes_;
}

uint32_t DrawingOrderMapping::getNumDisplayLineTypes() const
{
    return m_numDisplayLineTypes_;
}

void DrawingOrderMapping::setNumDisplayLineTypes(uint32_t numDisplayLineTypes_)
{
    m_numDisplayLineTypes_ = numDisplayLineTypes_;
}

uint32_t DrawingOrderMapping::getNumDisplayAreaTypes() const
{
    return m_numDisplayAreaTypes_;
}

void DrawingOrderMapping::setNumDisplayAreaTypes(uint32_t numDisplayAreaTypes_)
{
    m_numDisplayAreaTypes_ = numDisplayAreaTypes_;
}

::zserio::vector<::nds::display::types::DisplayPointType>& DrawingOrderMapping::getDisplayPointType()
{
    return m_displayPointType_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayPointType>& DrawingOrderMapping::getDisplayPointType() const
{
    return m_displayPointType_.getRawArray();
}

void DrawingOrderMapping::setDisplayPointType(const ::zserio::vector<::nds::display::types::DisplayPointType>& displayPointType_)
{
    m_displayPointType_ = ZserioArrayType_displayPointType(displayPointType_);
}

void DrawingOrderMapping::setDisplayPointType(::zserio::vector<::nds::display::types::DisplayPointType>&& displayPointType_)
{
    m_displayPointType_ = ZserioArrayType_displayPointType(std::move(displayPointType_));
}

::zserio::vector<::nds::display::types::DefaultDrawingOrder>& DrawingOrderMapping::getDisplayPointDrawingOrder()
{
    return m_displayPointDrawingOrder_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DefaultDrawingOrder>& DrawingOrderMapping::getDisplayPointDrawingOrder() const
{
    return m_displayPointDrawingOrder_.getRawArray();
}

void DrawingOrderMapping::setDisplayPointDrawingOrder(const ::zserio::vector<::nds::display::types::DefaultDrawingOrder>& displayPointDrawingOrder_)
{
    m_displayPointDrawingOrder_ = ZserioArrayType_displayPointDrawingOrder(displayPointDrawingOrder_);
}

void DrawingOrderMapping::setDisplayPointDrawingOrder(::zserio::vector<::nds::display::types::DefaultDrawingOrder>&& displayPointDrawingOrder_)
{
    m_displayPointDrawingOrder_ = ZserioArrayType_displayPointDrawingOrder(std::move(displayPointDrawingOrder_));
}

::zserio::vector<::nds::display::types::DisplayLineType>& DrawingOrderMapping::getDisplayLineType()
{
    return m_displayLineType_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayLineType>& DrawingOrderMapping::getDisplayLineType() const
{
    return m_displayLineType_.getRawArray();
}

void DrawingOrderMapping::setDisplayLineType(const ::zserio::vector<::nds::display::types::DisplayLineType>& displayLineType_)
{
    m_displayLineType_ = ZserioArrayType_displayLineType(displayLineType_);
}

void DrawingOrderMapping::setDisplayLineType(::zserio::vector<::nds::display::types::DisplayLineType>&& displayLineType_)
{
    m_displayLineType_ = ZserioArrayType_displayLineType(std::move(displayLineType_));
}

::zserio::vector<::nds::display::types::DefaultDrawingOrder>& DrawingOrderMapping::getDisplayLineDrawingOrder()
{
    return m_displayLineDrawingOrder_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DefaultDrawingOrder>& DrawingOrderMapping::getDisplayLineDrawingOrder() const
{
    return m_displayLineDrawingOrder_.getRawArray();
}

void DrawingOrderMapping::setDisplayLineDrawingOrder(const ::zserio::vector<::nds::display::types::DefaultDrawingOrder>& displayLineDrawingOrder_)
{
    m_displayLineDrawingOrder_ = ZserioArrayType_displayLineDrawingOrder(displayLineDrawingOrder_);
}

void DrawingOrderMapping::setDisplayLineDrawingOrder(::zserio::vector<::nds::display::types::DefaultDrawingOrder>&& displayLineDrawingOrder_)
{
    m_displayLineDrawingOrder_ = ZserioArrayType_displayLineDrawingOrder(std::move(displayLineDrawingOrder_));
}

::zserio::vector<::nds::display::types::DisplayAreaType>& DrawingOrderMapping::getDisplayAreaType()
{
    return m_displayAreaType_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayAreaType>& DrawingOrderMapping::getDisplayAreaType() const
{
    return m_displayAreaType_.getRawArray();
}

void DrawingOrderMapping::setDisplayAreaType(const ::zserio::vector<::nds::display::types::DisplayAreaType>& displayAreaType_)
{
    m_displayAreaType_ = ZserioArrayType_displayAreaType(displayAreaType_);
}

void DrawingOrderMapping::setDisplayAreaType(::zserio::vector<::nds::display::types::DisplayAreaType>&& displayAreaType_)
{
    m_displayAreaType_ = ZserioArrayType_displayAreaType(std::move(displayAreaType_));
}

::zserio::vector<::nds::display::types::DefaultDrawingOrder>& DrawingOrderMapping::getDisplayAreaDrawingOrder()
{
    return m_displayAreaDrawingOrder_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DefaultDrawingOrder>& DrawingOrderMapping::getDisplayAreaDrawingOrder() const
{
    return m_displayAreaDrawingOrder_.getRawArray();
}

void DrawingOrderMapping::setDisplayAreaDrawingOrder(const ::zserio::vector<::nds::display::types::DefaultDrawingOrder>& displayAreaDrawingOrder_)
{
    m_displayAreaDrawingOrder_ = ZserioArrayType_displayAreaDrawingOrder(displayAreaDrawingOrder_);
}

void DrawingOrderMapping::setDisplayAreaDrawingOrder(::zserio::vector<::nds::display::types::DefaultDrawingOrder>&& displayAreaDrawingOrder_)
{
    m_displayAreaDrawingOrder_ = ZserioArrayType_displayAreaDrawingOrder(std::move(displayAreaDrawingOrder_));
}

void DrawingOrderMapping::initPackingContext(DrawingOrderMapping::ZserioPackingContext& context) const
{
    context.getNumDisplayPointTypes().init<::zserio::VarSizeArrayTraits>(m_numDisplayPointTypes_);
    context.getNumDisplayLineTypes().init<::zserio::VarSizeArrayTraits>(m_numDisplayLineTypes_);
    context.getNumDisplayAreaTypes().init<::zserio::VarSizeArrayTraits>(m_numDisplayAreaTypes_);
}

size_t DrawingOrderMapping::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numDisplayPointTypes_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numDisplayLineTypes_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numDisplayAreaTypes_);
    endBitPosition += m_displayPointType_.bitSizeOf(endBitPosition);
    endBitPosition += m_displayPointDrawingOrder_.bitSizeOf(endBitPosition);
    endBitPosition += m_displayLineType_.bitSizeOf(endBitPosition);
    endBitPosition += m_displayLineDrawingOrder_.bitSizeOf(endBitPosition);
    endBitPosition += m_displayAreaType_.bitSizeOf(endBitPosition);
    endBitPosition += m_displayAreaDrawingOrder_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DrawingOrderMapping::bitSizeOf(DrawingOrderMapping::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumDisplayPointTypes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numDisplayPointTypes_);
    endBitPosition += context.getNumDisplayLineTypes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numDisplayLineTypes_);
    endBitPosition += context.getNumDisplayAreaTypes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numDisplayAreaTypes_);
    endBitPosition += m_displayPointType_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_displayPointDrawingOrder_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_displayLineType_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_displayLineDrawingOrder_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_displayAreaType_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_displayAreaDrawingOrder_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DrawingOrderMapping::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numDisplayPointTypes_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numDisplayLineTypes_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numDisplayAreaTypes_);
    endBitPosition = m_displayPointType_.initializeOffsets(endBitPosition);
    endBitPosition = m_displayPointDrawingOrder_.initializeOffsets(endBitPosition);
    endBitPosition = m_displayLineType_.initializeOffsets(endBitPosition);
    endBitPosition = m_displayLineDrawingOrder_.initializeOffsets(endBitPosition);
    endBitPosition = m_displayAreaType_.initializeOffsets(endBitPosition);
    endBitPosition = m_displayAreaDrawingOrder_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t DrawingOrderMapping::initializeOffsets(DrawingOrderMapping::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumDisplayPointTypes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numDisplayPointTypes_);
    endBitPosition += context.getNumDisplayLineTypes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numDisplayLineTypes_);
    endBitPosition += context.getNumDisplayAreaTypes().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numDisplayAreaTypes_);
    endBitPosition = m_displayPointType_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_displayPointDrawingOrder_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_displayLineType_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_displayLineDrawingOrder_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_displayAreaType_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_displayAreaDrawingOrder_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool DrawingOrderMapping::operator==(const DrawingOrderMapping& other) const
{
    if (this != &other)
    {
        return
                (m_numDisplayPointTypes_ == other.m_numDisplayPointTypes_) &&
                (m_numDisplayLineTypes_ == other.m_numDisplayLineTypes_) &&
                (m_numDisplayAreaTypes_ == other.m_numDisplayAreaTypes_) &&
                (m_displayPointType_ == other.m_displayPointType_) &&
                (m_displayPointDrawingOrder_ == other.m_displayPointDrawingOrder_) &&
                (m_displayLineType_ == other.m_displayLineType_) &&
                (m_displayLineDrawingOrder_ == other.m_displayLineDrawingOrder_) &&
                (m_displayAreaType_ == other.m_displayAreaType_) &&
                (m_displayAreaDrawingOrder_ == other.m_displayAreaDrawingOrder_);
    }

    return true;
}

uint32_t DrawingOrderMapping::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numDisplayPointTypes_);
    result = ::zserio::calcHashCode(result, m_numDisplayLineTypes_);
    result = ::zserio::calcHashCode(result, m_numDisplayAreaTypes_);
    result = ::zserio::calcHashCode(result, m_displayPointType_);
    result = ::zserio::calcHashCode(result, m_displayPointDrawingOrder_);
    result = ::zserio::calcHashCode(result, m_displayLineType_);
    result = ::zserio::calcHashCode(result, m_displayLineDrawingOrder_);
    result = ::zserio::calcHashCode(result, m_displayAreaType_);
    result = ::zserio::calcHashCode(result, m_displayAreaDrawingOrder_);

    return result;
}

void DrawingOrderMapping::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarSize(m_numDisplayPointTypes_);

    out.writeVarSize(m_numDisplayLineTypes_);

    out.writeVarSize(m_numDisplayAreaTypes_);

    // check array length
    if (m_displayPointType_.getRawArray().size() != static_cast<size_t>(getNumDisplayPointTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayPointType: ") <<
                m_displayPointType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayPointTypes()) << "!";
    }
    m_displayPointType_.write(out);

    // check array length
    if (m_displayPointDrawingOrder_.getRawArray().size() != static_cast<size_t>(getNumDisplayPointTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayPointDrawingOrder: ") <<
                m_displayPointDrawingOrder_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayPointTypes()) << "!";
    }
    m_displayPointDrawingOrder_.write(out);

    // check array length
    if (m_displayLineType_.getRawArray().size() != static_cast<size_t>(getNumDisplayLineTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayLineType: ") <<
                m_displayLineType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayLineTypes()) << "!";
    }
    m_displayLineType_.write(out);

    // check array length
    if (m_displayLineDrawingOrder_.getRawArray().size() != static_cast<size_t>(getNumDisplayLineTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayLineDrawingOrder: ") <<
                m_displayLineDrawingOrder_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayLineTypes()) << "!";
    }
    m_displayLineDrawingOrder_.write(out);

    // check array length
    if (m_displayAreaType_.getRawArray().size() != static_cast<size_t>(getNumDisplayAreaTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayAreaType: ") <<
                m_displayAreaType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayAreaTypes()) << "!";
    }
    m_displayAreaType_.write(out);

    // check array length
    if (m_displayAreaDrawingOrder_.getRawArray().size() != static_cast<size_t>(getNumDisplayAreaTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayAreaDrawingOrder: ") <<
                m_displayAreaDrawingOrder_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayAreaTypes()) << "!";
    }
    m_displayAreaDrawingOrder_.write(out);
}

void DrawingOrderMapping::write(DrawingOrderMapping::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumDisplayPointTypes().write<::zserio::VarSizeArrayTraits>(out, m_numDisplayPointTypes_);

    context.getNumDisplayLineTypes().write<::zserio::VarSizeArrayTraits>(out, m_numDisplayLineTypes_);

    context.getNumDisplayAreaTypes().write<::zserio::VarSizeArrayTraits>(out, m_numDisplayAreaTypes_);

    // check array length
    if (m_displayPointType_.getRawArray().size() != static_cast<size_t>(getNumDisplayPointTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayPointType: ") <<
                m_displayPointType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayPointTypes()) << "!";
    }
    m_displayPointType_.writePacked(out);

    // check array length
    if (m_displayPointDrawingOrder_.getRawArray().size() != static_cast<size_t>(getNumDisplayPointTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayPointDrawingOrder: ") <<
                m_displayPointDrawingOrder_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayPointTypes()) << "!";
    }
    m_displayPointDrawingOrder_.writePacked(out);

    // check array length
    if (m_displayLineType_.getRawArray().size() != static_cast<size_t>(getNumDisplayLineTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayLineType: ") <<
                m_displayLineType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayLineTypes()) << "!";
    }
    m_displayLineType_.writePacked(out);

    // check array length
    if (m_displayLineDrawingOrder_.getRawArray().size() != static_cast<size_t>(getNumDisplayLineTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayLineDrawingOrder: ") <<
                m_displayLineDrawingOrder_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayLineTypes()) << "!";
    }
    m_displayLineDrawingOrder_.writePacked(out);

    // check array length
    if (m_displayAreaType_.getRawArray().size() != static_cast<size_t>(getNumDisplayAreaTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayAreaType: ") <<
                m_displayAreaType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayAreaTypes()) << "!";
    }
    m_displayAreaType_.writePacked(out);

    // check array length
    if (m_displayAreaDrawingOrder_.getRawArray().size() != static_cast<size_t>(getNumDisplayAreaTypes()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field DrawingOrderMapping.displayAreaDrawingOrder: ") <<
                m_displayAreaDrawingOrder_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumDisplayAreaTypes()) << "!";
    }
    m_displayAreaDrawingOrder_.writePacked(out);
}

uint32_t DrawingOrderMapping::readNumDisplayPointTypes(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t DrawingOrderMapping::readNumDisplayPointTypes(DrawingOrderMapping::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumDisplayPointTypes().read<::zserio::VarSizeArrayTraits>(in);
}
uint32_t DrawingOrderMapping::readNumDisplayLineTypes(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t DrawingOrderMapping::readNumDisplayLineTypes(DrawingOrderMapping::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumDisplayLineTypes().read<::zserio::VarSizeArrayTraits>(in);
}
uint32_t DrawingOrderMapping::readNumDisplayAreaTypes(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t DrawingOrderMapping::readNumDisplayAreaTypes(DrawingOrderMapping::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumDisplayAreaTypes().read<::zserio::VarSizeArrayTraits>(in);
}
DrawingOrderMapping::ZserioArrayType_displayPointType DrawingOrderMapping::readDisplayPointType(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_displayPointType readField(allocator);
    readField.read(in, static_cast<size_t>(getNumDisplayPointTypes()));

    return readField;
}

DrawingOrderMapping::ZserioArrayType_displayPointType DrawingOrderMapping::readDisplayPointType(DrawingOrderMapping::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_displayPointType readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumDisplayPointTypes()));

    return readField;
}
DrawingOrderMapping::ZserioArrayType_displayPointDrawingOrder DrawingOrderMapping::readDisplayPointDrawingOrder(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_displayPointDrawingOrder readField(allocator);
    readField.read(in, static_cast<size_t>(getNumDisplayPointTypes()));

    return readField;
}

DrawingOrderMapping::ZserioArrayType_displayPointDrawingOrder DrawingOrderMapping::readDisplayPointDrawingOrder(DrawingOrderMapping::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_displayPointDrawingOrder readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumDisplayPointTypes()));

    return readField;
}
DrawingOrderMapping::ZserioArrayType_displayLineType DrawingOrderMapping::readDisplayLineType(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_displayLineType readField(allocator);
    readField.read(in, static_cast<size_t>(getNumDisplayLineTypes()));

    return readField;
}

DrawingOrderMapping::ZserioArrayType_displayLineType DrawingOrderMapping::readDisplayLineType(DrawingOrderMapping::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_displayLineType readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumDisplayLineTypes()));

    return readField;
}
DrawingOrderMapping::ZserioArrayType_displayLineDrawingOrder DrawingOrderMapping::readDisplayLineDrawingOrder(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_displayLineDrawingOrder readField(allocator);
    readField.read(in, static_cast<size_t>(getNumDisplayLineTypes()));

    return readField;
}

DrawingOrderMapping::ZserioArrayType_displayLineDrawingOrder DrawingOrderMapping::readDisplayLineDrawingOrder(DrawingOrderMapping::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_displayLineDrawingOrder readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumDisplayLineTypes()));

    return readField;
}
DrawingOrderMapping::ZserioArrayType_displayAreaType DrawingOrderMapping::readDisplayAreaType(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_displayAreaType readField(allocator);
    readField.read(in, static_cast<size_t>(getNumDisplayAreaTypes()));

    return readField;
}

DrawingOrderMapping::ZserioArrayType_displayAreaType DrawingOrderMapping::readDisplayAreaType(DrawingOrderMapping::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_displayAreaType readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumDisplayAreaTypes()));

    return readField;
}
DrawingOrderMapping::ZserioArrayType_displayAreaDrawingOrder DrawingOrderMapping::readDisplayAreaDrawingOrder(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_displayAreaDrawingOrder readField(allocator);
    readField.read(in, static_cast<size_t>(getNumDisplayAreaTypes()));

    return readField;
}

DrawingOrderMapping::ZserioArrayType_displayAreaDrawingOrder DrawingOrderMapping::readDisplayAreaDrawingOrder(DrawingOrderMapping::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_displayAreaDrawingOrder readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumDisplayAreaTypes()));

    return readField;
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/DisplayAreaTypeHierarchyRelation.h>

namespace nds
{
namespace display
{
namespace metadata
{

DisplayAreaTypeHierarchyRelation::DisplayAreaTypeHierarchyRelation(const allocator_type& allocator) noexcept :
        m_parent_(::nds::display::types::DisplayAreaType()),
        m_children_(allocator)
{
}

DisplayAreaTypeHierarchyRelation::DisplayAreaTypeHierarchyRelation(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_parent_(readParent(in)),
        m_children_(readChildren(in, allocator))
{
}

DisplayAreaTypeHierarchyRelation::DisplayAreaTypeHierarchyRelation(DisplayAreaTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_parent_(readParent(context, in)),
        m_children_(readChildren(context, in, allocator))
{
}

DisplayAreaTypeHierarchyRelation::DisplayAreaTypeHierarchyRelation(::zserio::PropagateAllocatorT,
        const DisplayAreaTypeHierarchyRelation& other, const allocator_type& allocator) :
        m_parent_(::zserio::allocatorPropagatingCopy(other.m_parent_, allocator)),
        m_children_(::zserio::allocatorPropagatingCopy(other.m_children_, allocator))
{
}

::nds::display::types::DisplayAreaType DisplayAreaTypeHierarchyRelation::getParent() const
{
    return m_parent_;
}

void DisplayAreaTypeHierarchyRelation::setParent(::nds::display::types::DisplayAreaType parent_)
{
    m_parent_ = parent_;
}

::zserio::vector<::nds::display::types::DisplayAreaType>& DisplayAreaTypeHierarchyRelation::getChildren()
{
    return m_children_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayAreaType>& DisplayAreaTypeHierarchyRelation::getChildren() const
{
    return m_children_.getRawArray();
}

void DisplayAreaTypeHierarchyRelation::setChildren(const ::zserio::vector<::nds::display::types::DisplayAreaType>& children_)
{
    m_children_ = ZserioArrayType_children(children_);
}

void DisplayAreaTypeHierarchyRelation::setChildren(::zserio::vector<::nds::display::types::DisplayAreaType>&& children_)
{
    m_children_ = ZserioArrayType_children(std::move(children_));
}

void DisplayAreaTypeHierarchyRelation::initPackingContext(DisplayAreaTypeHierarchyRelation::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getParent(), m_parent_);
}

size_t DisplayAreaTypeHierarchyRelation::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_parent_);
    endBitPosition += m_children_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayAreaTypeHierarchyRelation::bitSizeOf(DisplayAreaTypeHierarchyRelation::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getParent(), m_parent_);
    endBitPosition += m_children_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayAreaTypeHierarchyRelation::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_parent_);
    endBitPosition = m_children_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t DisplayAreaTypeHierarchyRelation::initializeOffsets(DisplayAreaTypeHierarchyRelation::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getParent(), endBitPosition,
        m_parent_);
    endBitPosition = m_children_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool DisplayAreaTypeHierarchyRelation::operator==(const DisplayAreaTypeHierarchyRelation& other) const
{
    if (this != &other)
    {
        return
                (m_parent_ == other.m_parent_) &&
                (m_children_ == other.m_children_);
    }

    return true;
}

uint32_t DisplayAreaTypeHierarchyRelation::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_parent_);
    result = ::zserio::calcHashCode(result, m_children_);

    return result;
}

void DisplayAreaTypeHierarchyRelation::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_parent_);
    m_children_.write(out);
}

void DisplayAreaTypeHierarchyRelation::write(DisplayAreaTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getParent(), out, m_parent_);
    m_children_.writePacked(out);
}

::nds::display::types::DisplayAreaType DisplayAreaTypeHierarchyRelation::readParent(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::DisplayAreaType>(in);
}

::nds::display::types::DisplayAreaType DisplayAreaTypeHierarchyRelation::readParent(DisplayAreaTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::DisplayAreaType>(context.getParent(), in);
}
DisplayAreaTypeHierarchyRelation::ZserioArrayType_children DisplayAreaTypeHierarchyRelation::readChildren(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_children readField(allocator);
    readField.read(in);

    return readField;
}

DisplayAreaTypeHierarchyRelation::ZserioArrayType_children DisplayAreaTypeHierarchyRelation::readChildren(DisplayAreaTypeHierarchyRelation::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_children readField(allocator);
    readField.readPacked(in);

    return readField;
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/DisplayLineTypeHierarchyRelation.h>

namespace nds
{
namespace display
{
namespace metadata
{

DisplayLineTypeHierarchyRelation::DisplayLineTypeHierarchyRelation(const allocator_type& allocator) noexcept :
        m_parent_(::nds::display::types::DisplayLineType()),
        m_children_(allocator)
{
}

DisplayLineTypeHierarchyRelation::DisplayLineTypeHierarchyRelation(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_parent_(readParent(in)),
        m_children_(readChildren(in, allocator))
{
}

DisplayLineTypeHierarchyRelation::DisplayLineTypeHierarchyRelation(DisplayLineTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_parent_(readParent(context, in)),
        m_children_(readChildren(context, in, allocator))
{
}

DisplayLineTypeHierarchyRelation::DisplayLineTypeHierarchyRelation(::zserio::PropagateAllocatorT,
        const DisplayLineTypeHierarchyRelation& other, const allocator_type& allocator) :
        m_parent_(::zserio::allocatorPropagatingCopy(other.m_parent_, allocator)),
        m_children_(::zserio::allocatorPropagatingCopy(other.m_children_, allocator))
{
}

::nds::display::types::DisplayLineType DisplayLineTypeHierarchyRelation::getParent() const
{
    return m_parent_;
}

void DisplayLineTypeHierarchyRelation::setParent(::nds::display::types::DisplayLineType parent_)
{
    m_parent_ = parent_;
}

::zserio::vector<::nds::display::types::DisplayLineType>& DisplayLineTypeHierarchyRelation::getChildren()
{
    return m_children_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayLineType>& DisplayLineTypeHierarchyRelation::getChildren() const
{
    return m_children_.getRawArray();
}

void DisplayLineTypeHierarchyRelation::setChildren(const ::zserio::vector<::nds::display::types::DisplayLineType>& children_)
{
    m_children_ = ZserioArrayType_children(children_);
}

void DisplayLineTypeHierarchyRelation::setChildren(::zserio::vector<::nds::display::types::DisplayLineType>&& children_)
{
    m_children_ = ZserioArrayType_children(std::move(children_));
}

void DisplayLineTypeHierarchyRelation::initPackingContext(DisplayLineTypeHierarchyRelation::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getParent(), m_parent_);
}

size_t DisplayLineTypeHierarchyRelation::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_parent_);
    endBitPosition += m_children_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayLineTypeHierarchyRelation::bitSizeOf(DisplayLineTypeHierarchyRelation::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getParent(), m_parent_);
    endBitPosition += m_children_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayLineTypeHierarchyRelation::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_parent_);
    endBitPosition = m_children_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t DisplayLineTypeHierarchyRelation::initializeOffsets(DisplayLineTypeHierarchyRelation::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getParent(), endBitPosition,
        m_parent_);
    endBitPosition = m_children_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool DisplayLineTypeHierarchyRelation::operator==(const DisplayLineTypeHierarchyRelation& other) const
{
    if (this != &other)
    {
        return
                (m_parent_ == other.m_parent_) &&
                (m_children_ == other.m_children_);
    }

    return true;
}

uint32_t DisplayLineTypeHierarchyRelation::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_parent_);
    result = ::zserio::calcHashCode(result, m_children_);

    return result;
}

void DisplayLineTypeHierarchyRelation::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_parent_);
    m_children_.write(out);
}

void DisplayLineTypeHierarchyRelation::write(DisplayLineTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getParent(), out, m_parent_);
    m_children_.writePacked(out);
}

::nds::display::types::DisplayLineType DisplayLineTypeHierarchyRelation::readParent(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::DisplayLineType>(in);
}

::nds::display::types::DisplayLineType DisplayLineTypeHierarchyRelation::readParent(DisplayLineTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::DisplayLineType>(context.getParent(), in);
}
DisplayLineTypeHierarchyRelation::ZserioArrayType_children DisplayLineTypeHierarchyRelation::readChildren(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_children readField(allocator);
    readField.read(in);

    return readField;
}

DisplayLineTypeHierarchyRelation::ZserioArrayType_children DisplayLineTypeHierarchyRelation::readChildren(DisplayLineTypeHierarchyRelation::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_children readField(allocator);
    readField.readPacked(in);

    return readField;
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/DisplayPointTypeHierarchyRelation.h>

namespace nds
{
namespace display
{
namespace metadata
{

DisplayPointTypeHierarchyRelation::DisplayPointTypeHierarchyRelation(const allocator_type& allocator) noexcept :
        m_parent_(::nds::display::types::DisplayPointType()),
        m_children_(allocator)
{
}

DisplayPointTypeHierarchyRelation::DisplayPointTypeHierarchyRelation(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_parent_(readParent(in)),
        m_children_(readChildren(in, allocator))
{
}

DisplayPointTypeHierarchyRelation::DisplayPointTypeHierarchyRelation(DisplayPointTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_parent_(readParent(context, in)),
        m_children_(readChildren(context, in, allocator))
{
}

DisplayPointTypeHierarchyRelation::DisplayPointTypeHierarchyRelation(::zserio::PropagateAllocatorT,
        const DisplayPointTypeHierarchyRelation& other, const allocator_type& allocator) :
        m_parent_(::zserio::allocatorPropagatingCopy(other.m_parent_, allocator)),
        m_children_(::zserio::allocatorPropagatingCopy(other.m_children_, allocator))
{
}

::nds::display::types::DisplayPointType DisplayPointTypeHierarchyRelation::getParent() const
{
    return m_parent_;
}

void DisplayPointTypeHierarchyRelation::setParent(::nds::display::types::DisplayPointType parent_)
{
    m_parent_ = parent_;
}

::zserio::vector<::nds::display::types::DisplayPointType>& DisplayPointTypeHierarchyRelation::getChildren()
{
    return m_children_.getRawArray();
}

const ::zserio::vector<::nds::display::types::DisplayPointType>& DisplayPointTypeHierarchyRelation::getChildren() const
{
    return m_children_.getRawArray();
}

void DisplayPointTypeHierarchyRelation::setChildren(const ::zserio::vector<::nds::display::types::DisplayPointType>& children_)
{
    m_children_ = ZserioArrayType_children(children_);
}

void DisplayPointTypeHierarchyRelation::setChildren(::zserio::vector<::nds::display::types::DisplayPointType>&& children_)
{
    m_children_ = ZserioArrayType_children(std::move(children_));
}

void DisplayPointTypeHierarchyRelation::initPackingContext(DisplayPointTypeHierarchyRelation::ZserioPackingContext& context) const
{
    ::zserio::initPackingContext(context.getParent(), m_parent_);
}

size_t DisplayPointTypeHierarchyRelation::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(m_parent_);
    endBitPosition += m_children_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayPointTypeHierarchyRelation::bitSizeOf(DisplayPointTypeHierarchyRelation::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOf(context.getParent(), m_parent_);
    endBitPosition += m_children_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t DisplayPointTypeHierarchyRelation::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_parent_);
    endBitPosition = m_children_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t DisplayPointTypeHierarchyRelation::initializeOffsets(DisplayPointTypeHierarchyRelation::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = ::zserio::initializeOffsets(context.getParent(), endBitPosition,
        m_parent_);
    endBitPosition = m_children_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool DisplayPointTypeHierarchyRelation::operator==(const DisplayPointTypeHierarchyRelation& other) const
{
    if (this != &other)
    {
        return
                (m_parent_ == other.m_parent_) &&
                (m_children_ == other.m_children_);
    }

    return true;
}

uint32_t DisplayPointTypeHierarchyRelation::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_parent_);
    result = ::zserio::calcHashCode(result, m_children_);

    return result;
}

void DisplayPointTypeHierarchyRelation::write(::zserio::BitStreamWriter& out) const
{
    ::zserio::write(out, m_parent_);
    m_children_.write(out);
}

void DisplayPointTypeHierarchyRelation::write(DisplayPointTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    ::zserio::write(context.getParent(), out, m_parent_);
    m_children_.writePacked(out);
}

::nds::display::types::DisplayPointType DisplayPointTypeHierarchyRelation::readParent(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::DisplayPointType>(in);
}

::nds::display::types::DisplayPointType DisplayPointTypeHierarchyRelation::readParent(DisplayPointTypeHierarchyRelation::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::display::types::DisplayPointType>(context.getParent(), in);
}
DisplayPointTypeHierarchyRelation::ZserioArrayType_children DisplayPointTypeHierarchyRelation::readChildren(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_children readField(allocator);
    readField.read(in);

    return readField;
}

DisplayPointTypeHierarchyRelation::ZserioArrayType_children DisplayPointTypeHierarchyRelation::readChildren(DisplayPointTypeHierarchyRelation::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_children readField(allocator);
    readField.readPacked(in);

    return readField;
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/display/metadata/IconLayerMetadata.h>

namespace nds
{
namespace display
{
namespace metadata
{

IconLayerMetadata::IconLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::display::metadata::IconLayerContent()),
        m_containedIconFormats_(allocator),
        m_isoCountryCode_(::zserio::NullOpt),
        m_displayScaleTileLevelMapping_(allocator)
{
}

IconLayerMetadata::IconLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_containedIconFormats_(readContainedIconFormats(in, allocator)),
        m_isoCountryCode_(readIsoCountryCode(in, allocator)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(in, allocator))
{
}

IconLayerMetadata::IconLayerMetadata(IconLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_containedIconFormats_(readContainedIconFormats(context, in, allocator)),
        m_isoCountryCode_(readIsoCountryCode(in, allocator)),
        m_displayScaleTileLevelMapping_(readDisplayScaleTileLevelMapping(context, in, allocator))
{
}

IconLayerMetadata::IconLayerMetadata(::zserio::PropagateAllocatorT,
        const IconLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_containedIconFormats_(::zserio::allocatorPropagatingCopy(other.m_containedIconFormats_, allocator)),
        m_isoCountryCode_(::zserio::allocatorPropagatingCopy(other.m_isoCountryCode_, allocator)),
        m_displayScaleTileLevelMapping_(::zserio::allocatorPropagatingCopy(other.m_displayScaleTileLevelMapping_, allocator))
{
}

::nds::display::metadata::IconLayerContent IconLayerMetadata::getContent() const
{
    return m_content_;
}

void IconLayerMetadata::setContent(::nds::display::metadata::IconLayerContent content_)
{
    m_content_ = content_;
}

::zserio::vector<::nds::core::icons::IconFormat>& IconLayerMetadata::getContainedIconFormats()
{
    return m_containedIconFormats_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconFormat>& IconLayerMetadata::getContainedIconFormats() const
{
    return m_containedIconFormats_.getRawArray();
}

void IconLayerMetadata::setContainedIconFormats(const ::zserio::vector<::nds::core::icons::IconFormat>& containedIconFormats_)
{
    m_containedIconFormats_ = ZserioArrayType_containedIconFormats(containedIconFormats_);
}

void IconLayerMetadata::setContainedIconFormats(::zserio::vector<::nds::core::icons::IconFormat>&& containedIconFormats_)
{
    m_containedIconFormats_ = ZserioArrayType_containedIconFormats(std::move(containedIconFormats_));
}

::nds::core::types::Iso3166Codes& IconLayerMetadata::getIsoCountryCode()
{
    return m_isoCountryCode_.value();
}

const ::nds::core::types::Iso3166Codes& IconLayerMetadata::getIsoCountryCode() const
{
    return m_isoCountryCode_.value();
}

void IconLayerMetadata::setIsoCountryCode(const ::nds::core::types::Iso3166Codes& isoCountryCode_)
{
    m_isoCountryCode_ = isoCountryCode_;
}

void IconLayerMetadata::setIsoCountryCode(::nds::core::types::Iso3166Codes&& isoCountryCode_)
{
    m_isoCountryCode_ = ::std::move(isoCountryCode_);
}

bool IconLayerMetadata::isIsoCountryCodeUsed() const
{
    return (isIsoCountryCodeSet());
}

bool IconLayerMetadata::isIsoCountryCodeSet() const
{
    return m_isoCountryCode_.hasValue();
}

void IconLayerMetadata::resetIsoCountryCode()
{
    m_isoCountryCode_.reset();
}

::nds::display::metadata::DisplayScaleTileLevelMapping& IconLayerMetadata::getDisplayScaleTileLevelMapping()
{
    return m_displayScaleTileLevelMapping_;
}

const ::nds::display::metadata::DisplayScaleTileLevelMapping& IconLayerMetadata::getDisplayScaleTileLevelMapping() const
{
    return m_displayScaleTileLevelMapping_;
}

void IconLayerMetadata::setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = displayScaleTileLevelMapping_;
}

void IconLayerMetadata::setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_)
{
    m_displayScaleTileLevelMapping_ = ::std::move(displayScaleTileLevelMapping_);
}

void IconLayerMetadata::initPackingContext(IconLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    m_displayScaleTileLevelMapping_.initPackingContext(context.getDisplayScaleTileLevelMapping());
}

size_t IconLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += m_containedIconFormats_.bitSizeOf(endBitPosition);
    endBitPosition += 1;
    if (isIsoCountryCodeSet())
    {
        endBitPosition += m_isoCountryCode_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t IconLayerMetadata::bitSizeOf(IconLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += m_containedIconFormats_.bitSizeOfPacked(endBitPosition);
    endBitPosition += 1;
    if (isIsoCountryCodeSet())
    {
        endBitPosition += m_isoCountryCode_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_displayScaleTileLevelMapping_.bitSizeOf(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t IconLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition = m_containedIconFormats_.initializeOffsets(endBitPosition);
    endBitPosition += 1;
    if (isIsoCountryCodeSet())
    {
        endBitPosition = m_isoCountryCode_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t IconLayerMetadata::initializeOffsets(IconLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition = m_containedIconFormats_.initializeOffsetsPacked(endBitPosition);
    endBitPosition += 1;
    if (isIsoCountryCodeSet())
    {
        endBitPosition = m_isoCountryCode_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_displayScaleTileLevelMapping_.initializeOffsets(context.getDisplayScaleTileLevelMapping(), endBitPosition);

    return endBitPosition;
}

bool IconLayerMetadata::operator==(const IconLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_containedIconFormats_ == other.m_containedIconFormats_) &&
                (!isIsoCountryCodeUsed() ? !other.isIsoCountryCodeUsed() : (m_isoCountryCode_ == other.m_isoCountryCode_)) &&
                (m_displayScaleTileLevelMapping_ == other.m_displayScaleTileLevelMapping_);
    }

    return true;
}

uint32_t IconLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_containedIconFormats_);
    if (isIsoCountryCodeUsed())
        result = ::zserio::calcHashCode(result, m_isoCountryCode_);
    result = ::zserio::calcHashCode(result, m_displayScaleTileLevelMapping_);

    return result;
}

void IconLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    m_containedIconFormats_.write(out);
    if (isIsoCountryCodeSet())
    {
        out.writeBool(true);
        m_isoCountryCode_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
    m_displayScaleTileLevelMapping_.write(out);
}

void IconLayerMetadata::write(IconLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    m_containedIconFormats_.writePacked(out);
    if (isIsoCountryCodeSet())
    {
        out.writeBool(true);
        m_isoCountryCode_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
    m_displayScaleTileLevelMapping_.write(context.getDisplayScaleTileLevelMapping(), out);
}

::nds::display::metadata::IconLayerContent IconLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::IconLayerContent(in);
}

::nds::display::metadata::IconLayerContent IconLayerMetadata::readContent(IconLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::display::metadata::IconLayerContent(context.getContent(), in);
}
IconLayerMetadata::ZserioArrayType_containedIconFormats IconLayerMetadata::readContainedIconFormats(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_containedIconFormats readField(allocator);
    readField.read(in);

    return readField;
}

IconLayerMetadata::ZserioArrayType_containedIconFormats IconLayerMetadata::readContainedIconFormats(IconLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_containedIconFormats readField(allocator);
    readField.readPacked(in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::core::types::Iso3166Codes> IconLayerMetadata::readIsoCountryCode(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::types::Iso3166Codes>(::nds::core::types::Iso3166Codes(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::types::Iso3166Codes>(::zserio::NullOpt);
}
::nds::display::metadata::DisplayScaleTileLevelMapping IconLayerMetadata::readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(in, allocator);
}

::nds::display::metadata::DisplayScaleTileLevelMapping IconLayerMetadata::readDisplayScaleTileLevelMapping(IconLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::display::metadata::DisplayScaleTileLevelMapping(context.getDisplayScaleTileLevelMapping(), in, allocator);
}

} // namespace metadata
} // namespace display
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/display/metadata/OrthoImageServiceMetadata.h>
#include <nds/core/geometry/MapProjectionMethod.h>

namespace nds
{
namespace display
{
namespace metadata
{

OrthoImageServiceMetadata::OrthoImageServiceMetadata(const allocator_type& allocator) noexcept :
        m_supportedConfigurations_(allocator),
        m_verticalPixResolution_(uint32_t()),
        m_coordinateProjection_(::nds::core::geometry::MapProjectionMethod()),
        m_maximumLatitude_(::zserio::NullOpt)
{
}

OrthoImageServiceMetadata::OrthoImageServiceMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_supportedConfigurations_(readSupportedConfigurations(in, allocator)),
        m_verticalPixResolution_(readVerticalPixResolution(in)),
        m_coordinateProjection_(readCoordinateProjection(in)),
        m_maximumLatitude_(readMaximumLatitude(in))
{
}

OrthoImageServiceMetadata::OrthoImageServiceMetadata(OrthoImageServiceMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_supportedConfigurations_(readSupportedConfigurations(context, in, allocator)),
        m_verticalPixResolution_(readVerticalPixResolution(context, in)),
        m_coordinateProjection_(readCoordinateProjection(context, in)),
        m_maximumLatitude_(readMaximumLatitude(context, in))
{
}

OrthoImageServiceMetadata::OrthoImageServiceMetadata(::zserio::PropagateAllocatorT,
        const OrthoImageServiceMetadata& other, const allocator_type& allocator) :
        m_supportedConfigurations_(::zserio::allocatorPropagatingCopy(other.m_supportedConfigurations_, allocator)),
        m_verticalPixResolution_(::zserio::allocatorPropagatingCopy(other.m_verticalPixResolution_, allocator)),
        m_coordinateProjection_(::zserio::allocatorPropagatingCopy(other.m_coordinateProjection_, allocator)),
        m_maximumLatitude_(::zserio::allocatorPropagatingCopy(other.m_maximumLatitude_, allocator))
{
}

::zserio::vector<::nds::display::types::OrthoImageConfig>& OrthoImageServiceMetadata::getSupportedConfigurations()
{
    return m_supportedConfigurations_.getRawArray();
}

const ::zserio::vector<::nds::display::types::OrthoImageConfig>& OrthoImageServiceMetadata::getSupportedConfigurations() const
{
    return m_supportedConfigurations_.getRawArray();
}

void OrthoImageServiceMetadata::setSupportedConfigurations(const ::zserio::vector<::nds::display::types::OrthoImageConfig>& supportedConfigurations_)
{
    m_supportedConfigurations_ = ZserioArrayType_supportedConfigurations(supportedConfigurations_);
}

void OrthoImageServiceMetadata::setSupportedConfigurations(::zserio::vector<::nds::display::types::OrthoImageConfig>&& supportedConfigurations_)
{
    m_supportedConfigurations_ = ZserioArrayType_supportedConfigurations(std::move(supportedConfigurations_));
}

uint32_t OrthoImageServiceMetadata::getVerticalPixResolution() const
{
    return m_verticalPixResolution_;
}

void OrthoImageServiceMetadata::setVerticalPixResolution(uint32_t verticalPixResolution_)
{
    m_verticalPixResolution_ = verticalPixResolution_;
}

::nds::core::geometry::MapProjectionMethod OrthoImageServiceMetadata::getCoordinateProjection() const
{
    return m_coordinateProjection_;
}

void OrthoImageServiceMetadata::setCoordinateProjection(::nds::core::geometry::MapProjectionMethod coordinateProjection_)
{
    m_coordinateProjection_ = coordinateProjection_;
}

int32_t OrthoImageServiceMetadata::getMaximumLatitude() const
{
    return m_maximumLatitude_.value();
}

void OrthoImageServiceMetadata::setMaximumLatitude(int32_t maximumLatitude_)
{
    m_maximumLatitude_ = maximumLatitude_;
}

bool OrthoImageServiceMetadata::isMaximumLatitudeUsed() const
{
    return (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857);
}

bool OrthoImageServiceMetadata::isMaximumLatitudeSet() const
{
    return m_maximumLatitude_.hasValue();
}

void OrthoImageServiceMetadata::resetMaximumLatitude()
{
    m_maximumLatitude_.reset();
}

void OrthoImageServiceMetadata::initPackingContext(OrthoImageServiceMetadata::ZserioPackingContext& context) const
{
    context.getVerticalPixResolution().init<::zserio::VarIntNNArrayTraits<uint32_t>>(m_verticalPixResolution_);
    ::zserio::initPackingContext(context.getCoordinateProjection(), m_coordinateProjection_);
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        context.getMaximumLatitude().init<::zserio::StdIntArrayTraits<int32_t>>(m_maximumLatitude_.value());
    }
}

size_t OrthoImageServiceMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_supportedConfigurations_.bitSizeOf(*this, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_verticalPixResolution_);
    endBitPosition += ::zserio::bitSizeOf(m_coordinateProjection_);
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition - bitPosition;
}

size_t OrthoImageServiceMetadata::bitSizeOf(OrthoImageServiceMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_supportedConfigurations_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += context.getVerticalPixResolution().bitSizeOf<::zserio::VarIntNNArrayTraits<uint32_t>>(m_verticalPixResolution_);
    endBitPosition += ::zserio::bitSizeOf(context.getCoordinateProjection(), m_coordinateProjection_);
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        endBitPosition += context.getMaximumLatitude().bitSizeOf<::zserio::StdIntArrayTraits<int32_t>>(m_maximumLatitude_.value());
    }

    return endBitPosition - bitPosition;
}

size_t OrthoImageServiceMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_supportedConfigurations_.initializeOffsets(*this, endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_verticalPixResolution_);
    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_coordinateProjection_);
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        endBitPosition += UINT8_C(32);
    }

    return endBitPosition;
}

size_t OrthoImageServiceMetadata::initializeOffsets(OrthoImageServiceMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_supportedConfigurations_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition += context.getVerticalPixResolution().bitSizeOf<::zserio::VarIntNNArrayTraits<uint32_t>>(m_verticalPixResolution_);
    endBitPosition = ::zserio::initializeOffsets(context.getCoordinateProjection(), endBitPosition,
        m_coordinateProjection_);
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        endBitPosition += context.getMaximumLatitude().bitSizeOf<::zserio::StdIntArrayTraits<int32_t>>(m_maximumLatitude_.value());
    }

    return endBitPosition;
}

bool OrthoImageServiceMetadata::operator==(const OrthoImageServiceMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_supportedConfigurations_ == other.m_supportedConfigurations_) &&
                (m_verticalPixResolution_ == other.m_verticalPixResolution_) &&
                (m_coordinateProjection_ == other.m_coordinateProjection_) &&
                (!isMaximumLatitudeUsed() ? !other.isMaximumLatitudeUsed() : (m_maximumLatitude_ == other.m_maximumLatitude_));
    }

    return true;
}

uint32_t OrthoImageServiceMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_supportedConfigurations_);
    result = ::zserio::calcHashCode(result, m_verticalPixResolution_);
    result = ::zserio::calcHashCode(result, m_coordinateProjection_);
    if (isMaximumLatitudeUsed())
        result = ::zserio::calcHashCode(result, m_maximumLatitude_);

    return result;
}

void OrthoImageServiceMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_supportedConfigurations_.write(*this, out);
    out.writeVarUInt32(m_verticalPixResolution_);
    ::zserio::write(out, m_coordinateProjection_);
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        out.writeSignedBits(m_maximumLatitude_.value(), UINT8_C(32));
    }
}

void OrthoImageServiceMetadata::write(OrthoImageServiceMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_supportedConfigurations_.writePacked(*this, out);
    context.getVerticalPixResolution().write<::zserio::VarIntNNArrayTraits<uint32_t>>(out, m_verticalPixResolution_);
    ::zserio::write(context.getCoordinateProjection(), out, m_coordinateProjection_);
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        context.getMaximumLatitude().write<::zserio::StdIntArrayTraits<int32_t>>(out, m_maximumLatitude_.value());
    }
}

void OrthoImageServiceMetadata::ZserioElementFactory_supportedConfigurations::create(OrthoImageServiceMetadata&        ,
        ::zserio::vector<::nds::display::types::OrthoImageConfig>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void OrthoImageServiceMetadata::ZserioElementFactory_supportedConfigurations::create(OrthoImageServiceMetadata&        ,
        ::zserio::vector<::nds::display::types::OrthoImageConfig>& array,
        ::nds::display::types::OrthoImageConfig::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

OrthoImageServiceMetadata::ZserioArrayType_supportedConfigurations OrthoImageServiceMetadata::readSupportedConfigurations(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_supportedConfigurations readField(allocator);
    readField.read(*this, in);

    return readField;
}

OrthoImageServiceMetadata::ZserioArrayType_supportedConfigurations OrthoImageServiceMetadata::readSupportedConfigurations(OrthoImageServiceMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_supportedConfigurations readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
uint32_t OrthoImageServiceMetadata::readVerticalPixResolution(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarUInt32());
}

uint32_t OrthoImageServiceMetadata::readVerticalPixResolution(OrthoImageServiceMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getVerticalPixResolution().read<::zserio::VarIntNNArrayTraits<uint32_t>>(in);
}
::nds::core::geometry::MapProjectionMethod OrthoImageServiceMetadata::readCoordinateProjection(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::geometry::MapProjectionMethod>(in);
}

::nds::core::geometry::MapProjectionMethod OrthoImageServiceMetadata::readCoordinateProjection(OrthoImageServiceMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::geometry::MapProjectionMethod>(context.getCoordinateProjection(), in);
}
::zserio::InplaceOptionalHolder<int32_t> OrthoImageServiceMetadata::readMaximumLatitude(::zserio::BitStreamReader& in)
{
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        return ::zserio::InplaceOptionalHolder<int32_t>(static_cast<int32_t>(in.readSignedBits(UINT8_C(32))));
    }

    return ::zserio::InplaceOptionalHolder<int32_t>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<int32_t> OrthoImageServiceMetadata::readMaximumLatitude(OrthoImageServiceMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (getCoordinateProjection() == ::nds::core::geometry::MapProjectionMethod::WEB_MERCATOR_EPSG_3857)
    {
        return ::zserio::InplaceOptionalHolder<int32_t>(context.getMaximumLatitude().read<::zserio::StdIntArrayTraits<int32_t>>(in));
    }

    return ::zserio::InplaceOptionalHolder<int32_t>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace display
} // namespace nds
