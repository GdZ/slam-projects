/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_METADATA_HEIGHTMAP_LAYER_METADATA_H
#define NDS_DISPLAY_METADATA_HEIGHTMAP_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/display/metadata/DisplayScaleTileLevelMapping.h>
#include <nds/display/types/HeightmapMapProjection.h>
#include <nds/display/types/TerrainOptimizationType.h>

namespace nds
{
namespace display
{
namespace metadata
{

class HeightmapLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getMapProjection()
        {
            return m_mapProjection_;
        }

        ::zserio::DeltaContext& getTileBufferSize()
        {
            return m_tileBufferSize_;
        }

        ::zserio::DeltaContext& getMaximumLatitude()
        {
            return m_maximumLatitude_;
        }

        ::nds::display::metadata::DisplayScaleTileLevelMapping::ZserioPackingContext& getDisplayScaleTileLevelMapping()
        {
            return m_displayScaleTileLevelMapping_;
        }

    private:
        ::zserio::DeltaContext m_mapProjection_;
        ::zserio::DeltaContext m_tileBufferSize_;
        ::zserio::DeltaContext m_maximumLatitude_;
        ::nds::display::metadata::DisplayScaleTileLevelMapping::ZserioPackingContext m_displayScaleTileLevelMapping_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    HeightmapLayerMetadata() noexcept :
            HeightmapLayerMetadata(allocator_type())
    {}

    explicit HeightmapLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_availableUsageTypes = ::zserio::vector<::nds::display::types::TerrainOptimizationType>,
            typename ZSERIO_T_maximumLatitude = int32_t,
            typename ZSERIO_T_displayScaleTileLevelMapping = ::nds::display::metadata::DisplayScaleTileLevelMapping,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_availableUsageTypes, HeightmapLayerMetadata, allocator_type> = 0>
    HeightmapLayerMetadata(
            ZSERIO_T_availableUsageTypes&& availableUsageTypes_,
            ::nds::display::types::HeightmapMapProjection mapProjection_,
            uint16_t tileBufferSize_,
            ZSERIO_T_maximumLatitude&& maximumLatitude_,
            ZSERIO_T_displayScaleTileLevelMapping&& displayScaleTileLevelMapping_,
            const allocator_type& allocator = allocator_type()) :
            HeightmapLayerMetadata(allocator)
    {
        m_availableUsageTypes_ = ZserioArrayType_availableUsageTypes(::std::forward<ZSERIO_T_availableUsageTypes>(availableUsageTypes_));
        m_mapProjection_ = mapProjection_;
        m_tileBufferSize_ = tileBufferSize_;
        m_maximumLatitude_ = ::std::forward<ZSERIO_T_maximumLatitude>(maximumLatitude_);
        m_displayScaleTileLevelMapping_ = ::std::forward<ZSERIO_T_displayScaleTileLevelMapping>(displayScaleTileLevelMapping_);
    }

    explicit HeightmapLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit HeightmapLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~HeightmapLayerMetadata() = default;

    HeightmapLayerMetadata(const HeightmapLayerMetadata&) = default;
    HeightmapLayerMetadata& operator=(const HeightmapLayerMetadata&) = default;

    HeightmapLayerMetadata(HeightmapLayerMetadata&&) = default;
    HeightmapLayerMetadata& operator=(HeightmapLayerMetadata&&) = default;

    HeightmapLayerMetadata(::zserio::PropagateAllocatorT,
            const HeightmapLayerMetadata& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::display::types::TerrainOptimizationType>& getAvailableUsageTypes() const;
    ::zserio::vector<::nds::display::types::TerrainOptimizationType>& getAvailableUsageTypes();
    void setAvailableUsageTypes(const ::zserio::vector<::nds::display::types::TerrainOptimizationType>& availableUsageTypes_);
    void setAvailableUsageTypes(::zserio::vector<::nds::display::types::TerrainOptimizationType>&& availableUsageTypes_);

    ::nds::display::types::HeightmapMapProjection getMapProjection() const;
    void setMapProjection(::nds::display::types::HeightmapMapProjection mapProjection_);

    uint16_t getTileBufferSize() const;
    void setTileBufferSize(uint16_t tileBufferSize_);

    int32_t getMaximumLatitude() const;
    void setMaximumLatitude(int32_t maximumLatitude_);
    bool isMaximumLatitudeUsed() const;
    bool isMaximumLatitudeSet() const;
    void resetMaximumLatitude();

    const ::nds::display::metadata::DisplayScaleTileLevelMapping& getDisplayScaleTileLevelMapping() const;
    ::nds::display::metadata::DisplayScaleTileLevelMapping& getDisplayScaleTileLevelMapping();
    void setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_);
    void setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const HeightmapLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_availableUsageTypes = ::zserio::Array<::zserio::vector<::nds::display::types::TerrainOptimizationType>, ::zserio::BitmaskArrayTraits<::nds::display::types::TerrainOptimizationType>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_availableUsageTypes readAvailableUsageTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_availableUsageTypes readAvailableUsageTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::display::types::HeightmapMapProjection readMapProjection(::zserio::BitStreamReader& in);
    ::nds::display::types::HeightmapMapProjection readMapProjection(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint16_t readTileBufferSize(::zserio::BitStreamReader& in);
    uint16_t readTileBufferSize(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readMaximumLatitude(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readMaximumLatitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::display::metadata::DisplayScaleTileLevelMapping readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::metadata::DisplayScaleTileLevelMapping readDisplayScaleTileLevelMapping(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_availableUsageTypes m_availableUsageTypes_;
    ::nds::display::types::HeightmapMapProjection m_mapProjection_;
    uint16_t m_tileBufferSize_;
    ::zserio::InplaceOptionalHolder<int32_t> m_maximumLatitude_;
    ::nds::display::metadata::DisplayScaleTileLevelMapping m_displayScaleTileLevelMapping_;
};

} // namespace metadata
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_METADATA_HEIGHTMAP_LAYER_METADATA_H
