/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_METADATA_DISPLAY2_DLAYER_METADATA_H
#define NDS_DISPLAY_METADATA_DISPLAY2_DLAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/display/metadata/Display2DContent.h>
#include <nds/display/metadata/DisplayAreaTypeHierarchyRelation.h>
#include <nds/display/metadata/DisplayLineTypeHierarchyRelation.h>
#include <nds/display/metadata/DisplayPointTypeHierarchyRelation.h>
#include <nds/display/metadata/DisplayScaleTileLevelMapping.h>
#include <nds/display/metadata/DrawingOrderMapping.h>
#include <nds/display/types/DisplayAreaType.h>
#include <nds/display/types/DisplayLineType.h>
#include <nds/display/types/DisplayPointType.h>

namespace nds
{
namespace display
{
namespace metadata
{

class Display2DLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::display::metadata::DrawingOrderMapping::ZserioPackingContext& getDefaultDrawingOrders()
        {
            return m_defaultDrawingOrders_;
        }

        ::nds::display::metadata::DisplayScaleTileLevelMapping::ZserioPackingContext& getDisplayScaleTileLevelMapping()
        {
            return m_displayScaleTileLevelMapping_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::display::metadata::DrawingOrderMapping::ZserioPackingContext m_defaultDrawingOrders_;
        ::nds::display::metadata::DisplayScaleTileLevelMapping::ZserioPackingContext m_displayScaleTileLevelMapping_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Display2DLayerMetadata() noexcept :
            Display2DLayerMetadata(allocator_type())
    {}

    explicit Display2DLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_availableDisplayPointTypes = ::zserio::vector<::nds::display::types::DisplayPointType>,
            typename ZSERIO_T_availableDisplayLineTypes = ::zserio::vector<::nds::display::types::DisplayLineType>,
            typename ZSERIO_T_availableDisplayAreaTypes = ::zserio::vector<::nds::display::types::DisplayAreaType>,
            typename ZSERIO_T_defaultDrawingOrders = ::nds::display::metadata::DrawingOrderMapping,
            typename ZSERIO_T_displayAreaTypeRelations = ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>,
            typename ZSERIO_T_displayLineTypeRelations = ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>,
            typename ZSERIO_T_displayPointTypeRelations = ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>,
            typename ZSERIO_T_displayScaleTileLevelMapping = ::nds::display::metadata::DisplayScaleTileLevelMapping>
    Display2DLayerMetadata(
            ::nds::display::metadata::Display2DContent content_,
            ZSERIO_T_availableDisplayPointTypes&& availableDisplayPointTypes_,
            ZSERIO_T_availableDisplayLineTypes&& availableDisplayLineTypes_,
            ZSERIO_T_availableDisplayAreaTypes&& availableDisplayAreaTypes_,
            ZSERIO_T_defaultDrawingOrders&& defaultDrawingOrders_,
            ZSERIO_T_displayAreaTypeRelations&& displayAreaTypeRelations_,
            ZSERIO_T_displayLineTypeRelations&& displayLineTypeRelations_,
            ZSERIO_T_displayPointTypeRelations&& displayPointTypeRelations_,
            ZSERIO_T_displayScaleTileLevelMapping&& displayScaleTileLevelMapping_,
            const allocator_type& allocator = allocator_type()) :
            Display2DLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_availableDisplayPointTypes_ = ::zserio::createOptionalArray<ZserioArrayType_availableDisplayPointTypes>(::std::forward<ZSERIO_T_availableDisplayPointTypes>(availableDisplayPointTypes_));
        m_availableDisplayLineTypes_ = ::zserio::createOptionalArray<ZserioArrayType_availableDisplayLineTypes>(::std::forward<ZSERIO_T_availableDisplayLineTypes>(availableDisplayLineTypes_));
        m_availableDisplayAreaTypes_ = ::zserio::createOptionalArray<ZserioArrayType_availableDisplayAreaTypes>(::std::forward<ZSERIO_T_availableDisplayAreaTypes>(availableDisplayAreaTypes_));
        m_defaultDrawingOrders_ = ::std::forward<ZSERIO_T_defaultDrawingOrders>(defaultDrawingOrders_);
        m_displayAreaTypeRelations_ = ::zserio::createOptionalArray<ZserioArrayType_displayAreaTypeRelations>(::std::forward<ZSERIO_T_displayAreaTypeRelations>(displayAreaTypeRelations_));
        m_displayLineTypeRelations_ = ::zserio::createOptionalArray<ZserioArrayType_displayLineTypeRelations>(::std::forward<ZSERIO_T_displayLineTypeRelations>(displayLineTypeRelations_));
        m_displayPointTypeRelations_ = ::zserio::createOptionalArray<ZserioArrayType_displayPointTypeRelations>(::std::forward<ZSERIO_T_displayPointTypeRelations>(displayPointTypeRelations_));
        m_displayScaleTileLevelMapping_ = ::std::forward<ZSERIO_T_displayScaleTileLevelMapping>(displayScaleTileLevelMapping_);
    }

    explicit Display2DLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Display2DLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Display2DLayerMetadata() = default;

    Display2DLayerMetadata(const Display2DLayerMetadata&) = default;
    Display2DLayerMetadata& operator=(const Display2DLayerMetadata&) = default;

    Display2DLayerMetadata(Display2DLayerMetadata&&) = default;
    Display2DLayerMetadata& operator=(Display2DLayerMetadata&&) = default;

    Display2DLayerMetadata(::zserio::PropagateAllocatorT,
            const Display2DLayerMetadata& other, const allocator_type& allocator);

    ::nds::display::metadata::Display2DContent getContent() const;
    void setContent(::nds::display::metadata::Display2DContent content_);

    const ::zserio::vector<::nds::display::types::DisplayPointType>& getAvailableDisplayPointTypes() const;
    ::zserio::vector<::nds::display::types::DisplayPointType>& getAvailableDisplayPointTypes();
    void setAvailableDisplayPointTypes(const ::zserio::vector<::nds::display::types::DisplayPointType>& availableDisplayPointTypes_);
    void setAvailableDisplayPointTypes(::zserio::vector<::nds::display::types::DisplayPointType>&& availableDisplayPointTypes_);
    bool isAvailableDisplayPointTypesUsed() const;
    bool isAvailableDisplayPointTypesSet() const;
    void resetAvailableDisplayPointTypes();

    const ::zserio::vector<::nds::display::types::DisplayLineType>& getAvailableDisplayLineTypes() const;
    ::zserio::vector<::nds::display::types::DisplayLineType>& getAvailableDisplayLineTypes();
    void setAvailableDisplayLineTypes(const ::zserio::vector<::nds::display::types::DisplayLineType>& availableDisplayLineTypes_);
    void setAvailableDisplayLineTypes(::zserio::vector<::nds::display::types::DisplayLineType>&& availableDisplayLineTypes_);
    bool isAvailableDisplayLineTypesUsed() const;
    bool isAvailableDisplayLineTypesSet() const;
    void resetAvailableDisplayLineTypes();

    const ::zserio::vector<::nds::display::types::DisplayAreaType>& getAvailableDisplayAreaTypes() const;
    ::zserio::vector<::nds::display::types::DisplayAreaType>& getAvailableDisplayAreaTypes();
    void setAvailableDisplayAreaTypes(const ::zserio::vector<::nds::display::types::DisplayAreaType>& availableDisplayAreaTypes_);
    void setAvailableDisplayAreaTypes(::zserio::vector<::nds::display::types::DisplayAreaType>&& availableDisplayAreaTypes_);
    bool isAvailableDisplayAreaTypesUsed() const;
    bool isAvailableDisplayAreaTypesSet() const;
    void resetAvailableDisplayAreaTypes();

    const ::nds::display::metadata::DrawingOrderMapping& getDefaultDrawingOrders() const;
    ::nds::display::metadata::DrawingOrderMapping& getDefaultDrawingOrders();
    void setDefaultDrawingOrders(const ::nds::display::metadata::DrawingOrderMapping& defaultDrawingOrders_);
    void setDefaultDrawingOrders(::nds::display::metadata::DrawingOrderMapping&& defaultDrawingOrders_);

    const ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& getDisplayAreaTypeRelations() const;
    ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& getDisplayAreaTypeRelations();
    void setDisplayAreaTypeRelations(const ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& displayAreaTypeRelations_);
    void setDisplayAreaTypeRelations(::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>&& displayAreaTypeRelations_);
    bool isDisplayAreaTypeRelationsUsed() const;
    bool isDisplayAreaTypeRelationsSet() const;
    void resetDisplayAreaTypeRelations();

    const ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& getDisplayLineTypeRelations() const;
    ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& getDisplayLineTypeRelations();
    void setDisplayLineTypeRelations(const ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& displayLineTypeRelations_);
    void setDisplayLineTypeRelations(::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>&& displayLineTypeRelations_);
    bool isDisplayLineTypeRelationsUsed() const;
    bool isDisplayLineTypeRelationsSet() const;
    void resetDisplayLineTypeRelations();

    const ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& getDisplayPointTypeRelations() const;
    ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& getDisplayPointTypeRelations();
    void setDisplayPointTypeRelations(const ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& displayPointTypeRelations_);
    void setDisplayPointTypeRelations(::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>&& displayPointTypeRelations_);
    bool isDisplayPointTypeRelationsUsed() const;
    bool isDisplayPointTypeRelationsSet() const;
    void resetDisplayPointTypeRelations();

    const ::nds::display::metadata::DisplayScaleTileLevelMapping& getDisplayScaleTileLevelMapping() const;
    ::nds::display::metadata::DisplayScaleTileLevelMapping& getDisplayScaleTileLevelMapping();
    void setDisplayScaleTileLevelMapping(const ::nds::display::metadata::DisplayScaleTileLevelMapping& displayScaleTileLevelMapping_);
    void setDisplayScaleTileLevelMapping(::nds::display::metadata::DisplayScaleTileLevelMapping&& displayScaleTileLevelMapping_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Display2DLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_displayAreaTypeRelations
    {
    public:
        using OwnerType = Display2DLayerMetadata;

        static void create(Display2DLayerMetadata& owner,
                ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Display2DLayerMetadata& owner,
                ::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>& array,
                ::nds::display::metadata::DisplayAreaTypeHierarchyRelation::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_displayLineTypeRelations
    {
    public:
        using OwnerType = Display2DLayerMetadata;

        static void create(Display2DLayerMetadata& owner,
                ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Display2DLayerMetadata& owner,
                ::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>& array,
                ::nds::display::metadata::DisplayLineTypeHierarchyRelation::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_displayPointTypeRelations
    {
    public:
        using OwnerType = Display2DLayerMetadata;

        static void create(Display2DLayerMetadata& owner,
                ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Display2DLayerMetadata& owner,
                ::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>& array,
                ::nds::display::metadata::DisplayPointTypeHierarchyRelation::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_availableDisplayPointTypes = ::zserio::Array<::zserio::vector<::nds::display::types::DisplayPointType>, ::zserio::EnumArrayTraits<::nds::display::types::DisplayPointType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_availableDisplayLineTypes = ::zserio::Array<::zserio::vector<::nds::display::types::DisplayLineType>, ::zserio::EnumArrayTraits<::nds::display::types::DisplayLineType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_availableDisplayAreaTypes = ::zserio::Array<::zserio::vector<::nds::display::types::DisplayAreaType>, ::zserio::EnumArrayTraits<::nds::display::types::DisplayAreaType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_displayAreaTypeRelations = ::zserio::Array<::zserio::vector<::nds::display::metadata::DisplayAreaTypeHierarchyRelation>, ::zserio::ObjectArrayTraits<::nds::display::metadata::DisplayAreaTypeHierarchyRelation, ZserioElementFactory_displayAreaTypeRelations>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_displayLineTypeRelations = ::zserio::Array<::zserio::vector<::nds::display::metadata::DisplayLineTypeHierarchyRelation>, ::zserio::ObjectArrayTraits<::nds::display::metadata::DisplayLineTypeHierarchyRelation, ZserioElementFactory_displayLineTypeRelations>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_displayPointTypeRelations = ::zserio::Array<::zserio::vector<::nds::display::metadata::DisplayPointTypeHierarchyRelation>, ::zserio::ObjectArrayTraits<::nds::display::metadata::DisplayPointTypeHierarchyRelation, ZserioElementFactory_displayPointTypeRelations>, ::zserio::ArrayType::AUTO>;

    ::nds::display::metadata::Display2DContent readContent(::zserio::BitStreamReader& in);
    ::nds::display::metadata::Display2DContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayPointTypes> readAvailableDisplayPointTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayPointTypes> readAvailableDisplayPointTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayLineTypes> readAvailableDisplayLineTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayLineTypes> readAvailableDisplayLineTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayAreaTypes> readAvailableDisplayAreaTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayAreaTypes> readAvailableDisplayAreaTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::display::metadata::DrawingOrderMapping readDefaultDrawingOrders(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::metadata::DrawingOrderMapping readDefaultDrawingOrders(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayAreaTypeRelations> readDisplayAreaTypeRelations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayAreaTypeRelations> readDisplayAreaTypeRelations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayLineTypeRelations> readDisplayLineTypeRelations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayLineTypeRelations> readDisplayLineTypeRelations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayPointTypeRelations> readDisplayPointTypeRelations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayPointTypeRelations> readDisplayPointTypeRelations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::display::metadata::DisplayScaleTileLevelMapping readDisplayScaleTileLevelMapping(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::display::metadata::DisplayScaleTileLevelMapping readDisplayScaleTileLevelMapping(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::display::metadata::Display2DContent m_content_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayPointTypes> m_availableDisplayPointTypes_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayLineTypes> m_availableDisplayLineTypes_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_availableDisplayAreaTypes> m_availableDisplayAreaTypes_;
    ::nds::display::metadata::DrawingOrderMapping m_defaultDrawingOrders_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayAreaTypeRelations> m_displayAreaTypeRelations_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayLineTypeRelations> m_displayLineTypeRelations_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_displayPointTypeRelations> m_displayPointTypeRelations_;
    ::nds::display::metadata::DisplayScaleTileLevelMapping m_displayScaleTileLevelMapping_;
};

} // namespace metadata
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_METADATA_DISPLAY2_DLAYER_METADATA_H
