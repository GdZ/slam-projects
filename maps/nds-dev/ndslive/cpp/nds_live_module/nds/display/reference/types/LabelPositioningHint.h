/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_REFERENCE_TYPES_LABEL_POSITIONING_HINT_H
#define NDS_DISPLAY_REFERENCE_TYPES_LABEL_POSITIONING_HINT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/display/reference/types/CurvedLabelPositioningHint.h>
#include <nds/display/reference/types/StraightLabelPositioningHint.h>

namespace nds
{
namespace display
{
namespace reference
{
namespace types
{

class LabelPositioningHint
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getImportance()
        {
            return m_importance_;
        }

        ::nds::display::reference::types::CurvedLabelPositioningHint::ZserioPackingContext& getCurvedLabelHint()
        {
            return m_curvedLabelHint_;
        }

        ::nds::display::reference::types::StraightLabelPositioningHint::ZserioPackingContext& getStraightLabelHint()
        {
            return m_straightLabelHint_;
        }

    private:
        ::zserio::DeltaContext m_importance_;
        ::nds::display::reference::types::CurvedLabelPositioningHint::ZserioPackingContext m_curvedLabelHint_;
        ::nds::display::reference::types::StraightLabelPositioningHint::ZserioPackingContext m_straightLabelHint_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LabelPositioningHint() noexcept :
            LabelPositioningHint(allocator_type())
    {}

    explicit LabelPositioningHint(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_curvedLabelHint = ::nds::display::reference::types::CurvedLabelPositioningHint,
            typename ZSERIO_T_straightLabelHint = ::nds::display::reference::types::StraightLabelPositioningHint>
    LabelPositioningHint(
            uint8_t importance_,
            bool hasCurvedLabel_,
            bool hasStraightLabel_,
            ZSERIO_T_curvedLabelHint&& curvedLabelHint_,
            ZSERIO_T_straightLabelHint&& straightLabelHint_,
            const allocator_type& allocator = allocator_type()) :
            LabelPositioningHint(allocator)
    {
        m_importance_ = importance_;
        m_hasCurvedLabel_ = hasCurvedLabel_;
        m_hasStraightLabel_ = hasStraightLabel_;
        m_curvedLabelHint_ = ::std::forward<ZSERIO_T_curvedLabelHint>(curvedLabelHint_);
        m_straightLabelHint_ = ::std::forward<ZSERIO_T_straightLabelHint>(straightLabelHint_);
    }

    explicit LabelPositioningHint(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit LabelPositioningHint(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~LabelPositioningHint() = default;

    LabelPositioningHint(const LabelPositioningHint& other);
    LabelPositioningHint& operator=(const LabelPositioningHint& other);

    LabelPositioningHint(LabelPositioningHint&& other);
    LabelPositioningHint& operator=(LabelPositioningHint&& other);

    LabelPositioningHint(::zserio::PropagateAllocatorT,
            const LabelPositioningHint& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    uint8_t getImportance() const;
    void setImportance(uint8_t importance_);

    bool getHasCurvedLabel() const;
    void setHasCurvedLabel(bool hasCurvedLabel_);

    bool getHasStraightLabel() const;
    void setHasStraightLabel(bool hasStraightLabel_);

    const ::nds::display::reference::types::CurvedLabelPositioningHint& getCurvedLabelHint() const;
    ::nds::display::reference::types::CurvedLabelPositioningHint& getCurvedLabelHint();
    void setCurvedLabelHint(const ::nds::display::reference::types::CurvedLabelPositioningHint& curvedLabelHint_);
    void setCurvedLabelHint(::nds::display::reference::types::CurvedLabelPositioningHint&& curvedLabelHint_);
    bool isCurvedLabelHintUsed() const;
    bool isCurvedLabelHintSet() const;
    void resetCurvedLabelHint();

    const ::nds::display::reference::types::StraightLabelPositioningHint& getStraightLabelHint() const;
    ::nds::display::reference::types::StraightLabelPositioningHint& getStraightLabelHint();
    void setStraightLabelHint(const ::nds::display::reference::types::StraightLabelPositioningHint& straightLabelHint_);
    void setStraightLabelHint(::nds::display::reference::types::StraightLabelPositioningHint&& straightLabelHint_);
    bool isStraightLabelHintUsed() const;
    bool isStraightLabelHintSet() const;
    void resetStraightLabelHint();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LabelPositioningHint& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    uint8_t readImportance(::zserio::BitStreamReader& in);
    uint8_t readImportance(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    bool readHasCurvedLabel(::zserio::BitStreamReader& in);
    bool readHasStraightLabel(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::CurvedLabelPositioningHint> readCurvedLabelHint(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::CurvedLabelPositioningHint> readCurvedLabelHint(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::StraightLabelPositioningHint> readStraightLabelHint(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::StraightLabelPositioningHint> readStraightLabelHint(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    uint8_t m_importance_;
    bool m_hasCurvedLabel_;
    bool m_hasStraightLabel_;
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::CurvedLabelPositioningHint> m_curvedLabelHint_;
    ::zserio::InplaceOptionalHolder<::nds::display::reference::types::StraightLabelPositioningHint> m_straightLabelHint_;
};

} // namespace types
} // namespace reference
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_REFERENCE_TYPES_LABEL_POSITIONING_HINT_H
