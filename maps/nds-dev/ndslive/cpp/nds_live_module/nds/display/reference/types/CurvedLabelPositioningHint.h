/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_REFERENCE_TYPES_CURVED_LABEL_POSITIONING_HINT_H
#define NDS_DISPLAY_REFERENCE_TYPES_CURVED_LABEL_POSITIONING_HINT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Line2D.h>

namespace nds
{
namespace display
{
namespace reference
{
namespace types
{

class CurvedLabelPositioningHint
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumLines()
        {
            return m_numLines_;
        }

    private:
        ::zserio::DeltaContext m_numLines_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    CurvedLabelPositioningHint() noexcept :
            CurvedLabelPositioningHint(allocator_type())
    {}

    explicit CurvedLabelPositioningHint(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_hintLines = ::zserio::vector<::nds::core::geometry::Line2D>>
    CurvedLabelPositioningHint(
            uint32_t numLines_,
            ZSERIO_T_hintLines&& hintLines_,
            const allocator_type& allocator = allocator_type()) :
            CurvedLabelPositioningHint(allocator)
    {
        m_numLines_ = numLines_;
        m_hintLines_ = ZserioArrayType_hintLines(::std::forward<ZSERIO_T_hintLines>(hintLines_));
    }

    explicit CurvedLabelPositioningHint(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit CurvedLabelPositioningHint(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~CurvedLabelPositioningHint() = default;

    CurvedLabelPositioningHint(const CurvedLabelPositioningHint& other);
    CurvedLabelPositioningHint& operator=(const CurvedLabelPositioningHint& other);

    CurvedLabelPositioningHint(CurvedLabelPositioningHint&& other);
    CurvedLabelPositioningHint& operator=(CurvedLabelPositioningHint&& other);

    CurvedLabelPositioningHint(::zserio::PropagateAllocatorT,
            const CurvedLabelPositioningHint& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    uint32_t getNumLines() const;
    void setNumLines(uint32_t numLines_);

    const ::zserio::vector<::nds::core::geometry::Line2D>& getHintLines() const;
    ::zserio::vector<::nds::core::geometry::Line2D>& getHintLines();
    void setHintLines(const ::zserio::vector<::nds::core::geometry::Line2D>& hintLines_);
    void setHintLines(::zserio::vector<::nds::core::geometry::Line2D>&& hintLines_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const CurvedLabelPositioningHint& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_hintLines
    {
    public:
        using OwnerType = CurvedLabelPositioningHint;

        static void initializeElement(CurvedLabelPositioningHint& owner,
                ::nds::core::geometry::Line2D& element, size_t index);
    };

    class ZserioElementFactory_hintLines
    {
    public:
        using OwnerType = CurvedLabelPositioningHint;

        static void create(CurvedLabelPositioningHint& owner,
                ::zserio::vector<::nds::core::geometry::Line2D>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(CurvedLabelPositioningHint& owner,
                ::zserio::vector<::nds::core::geometry::Line2D>& array,
                ::nds::core::geometry::Line2D::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_hintLines = ::zserio::Array<::zserio::vector<::nds::core::geometry::Line2D>, ::zserio::ObjectArrayTraits<::nds::core::geometry::Line2D, ZserioElementFactory_hintLines>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_hintLines>;

    uint32_t readNumLines(::zserio::BitStreamReader& in);
    uint32_t readNumLines(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_hintLines readHintLines(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_hintLines readHintLines(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    uint32_t m_numLines_;
    ZserioArrayType_hintLines m_hintLines_;
};

} // namespace types
} // namespace reference
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_REFERENCE_TYPES_CURVED_LABEL_POSITIONING_HINT_H
