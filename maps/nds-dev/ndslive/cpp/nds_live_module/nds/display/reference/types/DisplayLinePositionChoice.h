/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_LINE_POSITION_CHOICE_H
#define NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_LINE_POSITION_CHOICE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/display/reference/types/CurvedLabelPositioningHint.h>
#include <nds/display/reference/types/DisplayLineGeometryOffsetPosition.h>
#include <nds/display/reference/types/DisplayLineGeometryPosition.h>
#include <nds/display/reference/types/DisplayLinePercentagePosition.h>
#include <nds/display/reference/types/DisplayLineValidityPosition.h>
#include <nds/display/reference/types/DisplayLineValidityType.h>

namespace nds
{
namespace display
{
namespace reference
{
namespace types
{

class DisplayLinePositionChoice
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_validityPosition = 0,
        CHOICE_geometryPosition = 1,
        CHOICE_geometryOffsetPosition = 2,
        CHOICE_percentagePosition = 3,
        CHOICE_curvedLabelPositioningHint = 4,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::display::reference::types::DisplayLineValidityPosition::ZserioPackingContext& getValidityPosition()
        {
            return m_validityPosition_;
        }

        ::zserio::DeltaContext& getGeometryPosition()
        {
            return m_geometryPosition_;
        }

        ::nds::display::reference::types::DisplayLineGeometryOffsetPosition::ZserioPackingContext& getGeometryOffsetPosition()
        {
            return m_geometryOffsetPosition_;
        }

        ::nds::display::reference::types::DisplayLinePercentagePosition::ZserioPackingContext& getPercentagePosition()
        {
            return m_percentagePosition_;
        }

        ::nds::display::reference::types::CurvedLabelPositioningHint::ZserioPackingContext& getCurvedLabelPositioningHint()
        {
            return m_curvedLabelPositioningHint_;
        }

    private:
        ::nds::display::reference::types::DisplayLineValidityPosition::ZserioPackingContext m_validityPosition_;
        ::zserio::DeltaContext m_geometryPosition_;
        ::nds::display::reference::types::DisplayLineGeometryOffsetPosition::ZserioPackingContext m_geometryOffsetPosition_;
        ::nds::display::reference::types::DisplayLinePercentagePosition::ZserioPackingContext m_percentagePosition_;
        ::nds::display::reference::types::CurvedLabelPositioningHint::ZserioPackingContext m_curvedLabelPositioningHint_;
    };

    DisplayLinePositionChoice() noexcept :
            DisplayLinePositionChoice(allocator_type())
    {}

    explicit DisplayLinePositionChoice(const allocator_type& allocator) noexcept;

    explicit DisplayLinePositionChoice(::zserio::BitStreamReader& in,
            ::nds::display::reference::types::DisplayLineValidityType type_,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit DisplayLinePositionChoice(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::display::reference::types::DisplayLineValidityType type_,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~DisplayLinePositionChoice() = default;

    DisplayLinePositionChoice(const DisplayLinePositionChoice& other);
    DisplayLinePositionChoice& operator=(const DisplayLinePositionChoice& other);

    DisplayLinePositionChoice(DisplayLinePositionChoice&& other);
    DisplayLinePositionChoice& operator=(DisplayLinePositionChoice&& other);

    DisplayLinePositionChoice(::zserio::PropagateAllocatorT,
            const DisplayLinePositionChoice& other, const allocator_type& allocator);

    void initialize(
            ::nds::display::reference::types::DisplayLineValidityType type_,
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ChoiceTag choiceTag() const;

    ::nds::display::reference::types::DisplayLineValidityType getType() const;

    ::nds::core::geometry::CoordShift getShift() const;

    const ::nds::display::reference::types::DisplayLineValidityPosition& getValidityPosition() const;
    ::nds::display::reference::types::DisplayLineValidityPosition& getValidityPosition();
    void setValidityPosition(const ::nds::display::reference::types::DisplayLineValidityPosition& validityPosition_);
    void setValidityPosition(::nds::display::reference::types::DisplayLineValidityPosition&& validityPosition_);

    ::nds::display::reference::types::DisplayLineGeometryPosition getGeometryPosition() const;
    void setGeometryPosition(::nds::display::reference::types::DisplayLineGeometryPosition geometryPosition_);

    const ::nds::display::reference::types::DisplayLineGeometryOffsetPosition& getGeometryOffsetPosition() const;
    ::nds::display::reference::types::DisplayLineGeometryOffsetPosition& getGeometryOffsetPosition();
    void setGeometryOffsetPosition(const ::nds::display::reference::types::DisplayLineGeometryOffsetPosition& geometryOffsetPosition_);
    void setGeometryOffsetPosition(::nds::display::reference::types::DisplayLineGeometryOffsetPosition&& geometryOffsetPosition_);

    const ::nds::display::reference::types::DisplayLinePercentagePosition& getPercentagePosition() const;
    ::nds::display::reference::types::DisplayLinePercentagePosition& getPercentagePosition();
    void setPercentagePosition(const ::nds::display::reference::types::DisplayLinePercentagePosition& percentagePosition_);
    void setPercentagePosition(::nds::display::reference::types::DisplayLinePercentagePosition&& percentagePosition_);

    const ::nds::display::reference::types::CurvedLabelPositioningHint& getCurvedLabelPositioningHint() const;
    ::nds::display::reference::types::CurvedLabelPositioningHint& getCurvedLabelPositioningHint();
    void setCurvedLabelPositioningHint(const ::nds::display::reference::types::CurvedLabelPositioningHint& curvedLabelPositioningHint_);
    void setCurvedLabelPositioningHint(::nds::display::reference::types::CurvedLabelPositioningHint&& curvedLabelPositioningHint_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DisplayLinePositionChoice& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::display::reference::types::DisplayLineValidityType m_type_;
    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace types
} // namespace reference
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_LINE_POSITION_CHOICE_H
