/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_AREA_VALIDITY_H
#define NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_AREA_VALIDITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/display/reference/types/DisplayAreaChoice.h>
#include <nds/display/reference/types/DisplayAreaValidityType.h>

namespace nds
{
namespace display
{
namespace reference
{
namespace types
{

class DisplayAreaValidity
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getNumLabelAreas()
        {
            return m_numLabelAreas_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_numLabelAreas_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DisplayAreaValidity() noexcept :
            DisplayAreaValidity(allocator_type())
    {}

    explicit DisplayAreaValidity(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_numLabelAreas = uint32_t,
            typename ZSERIO_T_labelAreas = ::zserio::vector<::nds::display::reference::types::DisplayAreaChoice>>
    DisplayAreaValidity(
            ::nds::display::reference::types::DisplayAreaValidityType type_,
            ZSERIO_T_numLabelAreas&& numLabelAreas_,
            ZSERIO_T_labelAreas&& labelAreas_,
            const allocator_type& allocator = allocator_type()) :
            DisplayAreaValidity(allocator)
    {
        m_type_ = type_;
        m_numLabelAreas_ = ::std::forward<ZSERIO_T_numLabelAreas>(numLabelAreas_);
        m_labelAreas_ = ::zserio::createOptionalArray<ZserioArrayType_labelAreas>(::std::forward<ZSERIO_T_labelAreas>(labelAreas_));
    }

    explicit DisplayAreaValidity(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit DisplayAreaValidity(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~DisplayAreaValidity() = default;

    DisplayAreaValidity(const DisplayAreaValidity& other);
    DisplayAreaValidity& operator=(const DisplayAreaValidity& other);

    DisplayAreaValidity(DisplayAreaValidity&& other);
    DisplayAreaValidity& operator=(DisplayAreaValidity&& other);

    DisplayAreaValidity(::zserio::PropagateAllocatorT,
            const DisplayAreaValidity& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    ::nds::display::reference::types::DisplayAreaValidityType getType() const;
    void setType(::nds::display::reference::types::DisplayAreaValidityType type_);

    uint32_t getNumLabelAreas() const;
    void setNumLabelAreas(uint32_t numLabelAreas_);
    bool isNumLabelAreasUsed() const;
    bool isNumLabelAreasSet() const;
    void resetNumLabelAreas();

    const ::zserio::vector<::nds::display::reference::types::DisplayAreaChoice>& getLabelAreas() const;
    ::zserio::vector<::nds::display::reference::types::DisplayAreaChoice>& getLabelAreas();
    void setLabelAreas(const ::zserio::vector<::nds::display::reference::types::DisplayAreaChoice>& labelAreas_);
    void setLabelAreas(::zserio::vector<::nds::display::reference::types::DisplayAreaChoice>&& labelAreas_);
    bool isLabelAreasUsed() const;
    bool isLabelAreasSet() const;
    void resetLabelAreas();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DisplayAreaValidity& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_labelAreas
    {
    public:
        using OwnerType = DisplayAreaValidity;

        static void initializeElement(DisplayAreaValidity& owner,
                ::nds::display::reference::types::DisplayAreaChoice& element, size_t index);
    };

    class ZserioElementFactory_labelAreas
    {
    public:
        using OwnerType = DisplayAreaValidity;

        static void create(DisplayAreaValidity& owner,
                ::zserio::vector<::nds::display::reference::types::DisplayAreaChoice>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(DisplayAreaValidity& owner,
                ::zserio::vector<::nds::display::reference::types::DisplayAreaChoice>& array,
                ::nds::display::reference::types::DisplayAreaChoice::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_labelAreas = ::zserio::Array<::zserio::vector<::nds::display::reference::types::DisplayAreaChoice>, ::zserio::ObjectArrayTraits<::nds::display::reference::types::DisplayAreaChoice, ZserioElementFactory_labelAreas>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_labelAreas>;

    ::nds::display::reference::types::DisplayAreaValidityType readType(::zserio::BitStreamReader& in);
    ::nds::display::reference::types::DisplayAreaValidityType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumLabelAreas(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readNumLabelAreas(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_labelAreas> readLabelAreas(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_labelAreas> readLabelAreas(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::nds::display::reference::types::DisplayAreaValidityType m_type_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_numLabelAreas_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_labelAreas> m_labelAreas_;
};

} // namespace types
} // namespace reference
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_AREA_VALIDITY_H
