/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_LINE_RANGE_CHOICE_H
#define NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_LINE_RANGE_CHOICE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/display/reference/types/CurvedLabelPositioningHint.h>
#include <nds/display/reference/types/DisplayLineGeometryOffsetRange.h>
#include <nds/display/reference/types/DisplayLineGeometryRange.h>
#include <nds/display/reference/types/DisplayLinePercentageRange.h>
#include <nds/display/reference/types/DisplayLineValidityRange.h>
#include <nds/display/reference/types/DisplayLineValidityType.h>

namespace nds
{
namespace display
{
namespace reference
{
namespace types
{

class DisplayLineRangeChoice
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_validityRange = 0,
        CHOICE_geometryRange = 1,
        CHOICE_geometryOffsetRange = 2,
        CHOICE_percentageRange = 3,
        CHOICE_curvedLabelPositioningHint = 4,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::display::reference::types::DisplayLineValidityRange::ZserioPackingContext& getValidityRange()
        {
            return m_validityRange_;
        }

        ::nds::display::reference::types::DisplayLineGeometryRange::ZserioPackingContext& getGeometryRange()
        {
            return m_geometryRange_;
        }

        ::nds::display::reference::types::DisplayLineGeometryOffsetRange::ZserioPackingContext& getGeometryOffsetRange()
        {
            return m_geometryOffsetRange_;
        }

        ::nds::display::reference::types::DisplayLinePercentageRange::ZserioPackingContext& getPercentageRange()
        {
            return m_percentageRange_;
        }

        ::nds::display::reference::types::CurvedLabelPositioningHint::ZserioPackingContext& getCurvedLabelPositioningHint()
        {
            return m_curvedLabelPositioningHint_;
        }

    private:
        ::nds::display::reference::types::DisplayLineValidityRange::ZserioPackingContext m_validityRange_;
        ::nds::display::reference::types::DisplayLineGeometryRange::ZserioPackingContext m_geometryRange_;
        ::nds::display::reference::types::DisplayLineGeometryOffsetRange::ZserioPackingContext m_geometryOffsetRange_;
        ::nds::display::reference::types::DisplayLinePercentageRange::ZserioPackingContext m_percentageRange_;
        ::nds::display::reference::types::CurvedLabelPositioningHint::ZserioPackingContext m_curvedLabelPositioningHint_;
    };

    DisplayLineRangeChoice() noexcept :
            DisplayLineRangeChoice(allocator_type())
    {}

    explicit DisplayLineRangeChoice(const allocator_type& allocator) noexcept;

    explicit DisplayLineRangeChoice(::zserio::BitStreamReader& in,
            ::nds::display::reference::types::DisplayLineValidityType type_,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit DisplayLineRangeChoice(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::display::reference::types::DisplayLineValidityType type_,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~DisplayLineRangeChoice() = default;

    DisplayLineRangeChoice(const DisplayLineRangeChoice& other);
    DisplayLineRangeChoice& operator=(const DisplayLineRangeChoice& other);

    DisplayLineRangeChoice(DisplayLineRangeChoice&& other);
    DisplayLineRangeChoice& operator=(DisplayLineRangeChoice&& other);

    DisplayLineRangeChoice(::zserio::PropagateAllocatorT,
            const DisplayLineRangeChoice& other, const allocator_type& allocator);

    void initialize(
            ::nds::display::reference::types::DisplayLineValidityType type_,
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ChoiceTag choiceTag() const;

    ::nds::display::reference::types::DisplayLineValidityType getType() const;

    ::nds::core::geometry::CoordShift getShift() const;

    const ::nds::display::reference::types::DisplayLineValidityRange& getValidityRange() const;
    ::nds::display::reference::types::DisplayLineValidityRange& getValidityRange();
    void setValidityRange(const ::nds::display::reference::types::DisplayLineValidityRange& validityRange_);
    void setValidityRange(::nds::display::reference::types::DisplayLineValidityRange&& validityRange_);

    const ::nds::display::reference::types::DisplayLineGeometryRange& getGeometryRange() const;
    ::nds::display::reference::types::DisplayLineGeometryRange& getGeometryRange();
    void setGeometryRange(const ::nds::display::reference::types::DisplayLineGeometryRange& geometryRange_);
    void setGeometryRange(::nds::display::reference::types::DisplayLineGeometryRange&& geometryRange_);

    const ::nds::display::reference::types::DisplayLineGeometryOffsetRange& getGeometryOffsetRange() const;
    ::nds::display::reference::types::DisplayLineGeometryOffsetRange& getGeometryOffsetRange();
    void setGeometryOffsetRange(const ::nds::display::reference::types::DisplayLineGeometryOffsetRange& geometryOffsetRange_);
    void setGeometryOffsetRange(::nds::display::reference::types::DisplayLineGeometryOffsetRange&& geometryOffsetRange_);

    const ::nds::display::reference::types::DisplayLinePercentageRange& getPercentageRange() const;
    ::nds::display::reference::types::DisplayLinePercentageRange& getPercentageRange();
    void setPercentageRange(const ::nds::display::reference::types::DisplayLinePercentageRange& percentageRange_);
    void setPercentageRange(::nds::display::reference::types::DisplayLinePercentageRange&& percentageRange_);

    const ::nds::display::reference::types::CurvedLabelPositioningHint& getCurvedLabelPositioningHint() const;
    ::nds::display::reference::types::CurvedLabelPositioningHint& getCurvedLabelPositioningHint();
    void setCurvedLabelPositioningHint(const ::nds::display::reference::types::CurvedLabelPositioningHint& curvedLabelPositioningHint_);
    void setCurvedLabelPositioningHint(::nds::display::reference::types::CurvedLabelPositioningHint&& curvedLabelPositioningHint_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DisplayLineRangeChoice& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::display::reference::types::DisplayLineValidityType m_type_;
    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace types
} // namespace reference
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_REFERENCE_TYPES_DISPLAY_LINE_RANGE_CHOICE_H
