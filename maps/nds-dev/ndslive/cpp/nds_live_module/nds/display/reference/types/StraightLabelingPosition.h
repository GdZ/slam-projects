/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_DISPLAY_REFERENCE_TYPES_STRAIGHT_LABELING_POSITION_H
#define NDS_DISPLAY_REFERENCE_TYPES_STRAIGHT_LABELING_POSITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/CoordWidth.h>
#include <nds/core/geometry/Position2D.h>
#include <nds/core/geometry/PositionOffset2D.h>

namespace nds
{
namespace display
{
namespace reference
{
namespace types
{

class StraightLabelingPosition
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::geometry::Position2D::ZserioPackingContext& getCenterPosition()
        {
            return m_centerPosition_;
        }

        ::nds::core::geometry::PositionOffset2D::ZserioPackingContext& getRadiusPosition()
        {
            return m_radiusPosition_;
        }

    private:
        ::nds::core::geometry::Position2D::ZserioPackingContext m_centerPosition_;
        ::nds::core::geometry::PositionOffset2D::ZserioPackingContext m_radiusPosition_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    StraightLabelingPosition() noexcept :
            StraightLabelingPosition(allocator_type())
    {}

    explicit StraightLabelingPosition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_centerPosition = ::nds::core::geometry::Position2D,
            typename ZSERIO_T_radiusPosition = ::nds::core::geometry::PositionOffset2D,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_centerPosition, StraightLabelingPosition, allocator_type> = 0>
    StraightLabelingPosition(
            ZSERIO_T_centerPosition&& centerPosition_,
            ZSERIO_T_radiusPosition&& radiusPosition_,
            const allocator_type& allocator = allocator_type()) :
            StraightLabelingPosition(allocator)
    {
        m_centerPosition_ = ::std::forward<ZSERIO_T_centerPosition>(centerPosition_);
        m_radiusPosition_ = ::std::forward<ZSERIO_T_radiusPosition>(radiusPosition_);
    }

    explicit StraightLabelingPosition(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_,
            ::nds::core::geometry::CoordWidth width_, const allocator_type& allocator = allocator_type());
    explicit StraightLabelingPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_,
            ::nds::core::geometry::CoordWidth width_, const allocator_type& allocator = allocator_type());

    ~StraightLabelingPosition() = default;

    StraightLabelingPosition(const StraightLabelingPosition& other);
    StraightLabelingPosition& operator=(const StraightLabelingPosition& other);

    StraightLabelingPosition(StraightLabelingPosition&& other);
    StraightLabelingPosition& operator=(StraightLabelingPosition&& other);

    StraightLabelingPosition(::zserio::PropagateAllocatorT,
            const StraightLabelingPosition& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_,
            ::nds::core::geometry::CoordWidth width_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    ::nds::core::geometry::CoordWidth getWidth() const;

    const ::nds::core::geometry::Position2D& getCenterPosition() const;
    ::nds::core::geometry::Position2D& getCenterPosition();
    void setCenterPosition(const ::nds::core::geometry::Position2D& centerPosition_);
    void setCenterPosition(::nds::core::geometry::Position2D&& centerPosition_);

    const ::nds::core::geometry::PositionOffset2D& getRadiusPosition() const;
    ::nds::core::geometry::PositionOffset2D& getRadiusPosition();
    void setRadiusPosition(const ::nds::core::geometry::PositionOffset2D& radiusPosition_);
    void setRadiusPosition(::nds::core::geometry::PositionOffset2D&& radiusPosition_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const StraightLabelingPosition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::Position2D readCenterPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Position2D readCenterPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::geometry::PositionOffset2D readRadiusPosition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::PositionOffset2D readRadiusPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    ::nds::core::geometry::CoordWidth m_width_;
    bool m_isInitialized;
    ::nds::core::geometry::Position2D m_centerPosition_;
    ::nds::core::geometry::PositionOffset2D m_radiusPosition_;
};

} // namespace types
} // namespace reference
} // namespace display
} // namespace nds

#endif // NDS_DISPLAY_REFERENCE_TYPES_STRAIGHT_LABELING_POSITION_H
