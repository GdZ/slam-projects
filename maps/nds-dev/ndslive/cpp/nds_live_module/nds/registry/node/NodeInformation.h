/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_REGISTRY_NODE_NODE_INFORMATION_H
#define NDS_REGISTRY_NODE_NODE_INFORMATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>

#include <nds/core/geometry/SpatialExtent.h>
#include <nds/registry/node/ConnectionCosts.h>
#include <nds/registry/node/NodeType.h>
#include <nds/registry/node/ProtocolType.h>
#include <nds/registry/node/ServiceInformation.h>
#include <nds/system/types/ModuleDefinition.h>
#include <nds/system/types/NdsNodeLegalInfo.h>
#include <nds/system/types/NdsNodeToken.h>
#include <nds/system/types/NdsSystemToken.h>

namespace nds
{
namespace registry
{
namespace node
{

class NodeInformation
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::system::types::NdsSystemToken::ZserioPackingContext& getSystemId()
        {
            return m_systemId_;
        }

        ::nds::system::types::NdsNodeToken::ZserioPackingContext& getNodeToken()
        {
            return m_nodeToken_;
        }

        ::nds::system::types::NdsNodeLegalInfo::ZserioPackingContext& getLegalInfo()
        {
            return m_legalInfo_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getConnectionCosts()
        {
            return m_connectionCosts_;
        }

        ::nds::core::geometry::SpatialExtent::ZserioPackingContext& getSpatialCoverage()
        {
            return m_spatialCoverage_;
        }

        ::zserio::DeltaContext& getProtocolType()
        {
            return m_protocolType_;
        }

        ::zserio::DeltaContext& getPort()
        {
            return m_port_;
        }

        ::nds::registry::node::ServiceInformation::ZserioPackingContext& getServiceInformation()
        {
            return m_serviceInformation_;
        }

    private:
        ::nds::system::types::NdsSystemToken::ZserioPackingContext m_systemId_;
        ::nds::system::types::NdsNodeToken::ZserioPackingContext m_nodeToken_;
        ::nds::system::types::NdsNodeLegalInfo::ZserioPackingContext m_legalInfo_;
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_connectionCosts_;
        ::nds::core::geometry::SpatialExtent::ZserioPackingContext m_spatialCoverage_;
        ::zserio::DeltaContext m_protocolType_;
        ::zserio::DeltaContext m_port_;
        ::nds::registry::node::ServiceInformation::ZserioPackingContext m_serviceInformation_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    NodeInformation() noexcept :
            NodeInformation(allocator_type())
    {}

    explicit NodeInformation(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_systemId = ::nds::system::types::NdsSystemToken,
            typename ZSERIO_T_nodeToken = ::nds::system::types::NdsNodeToken,
            typename ZSERIO_T_legalInfo = ::nds::system::types::NdsNodeLegalInfo,
            typename ZSERIO_T_spatialCoverage = ::nds::core::geometry::SpatialExtent,
            typename ZSERIO_T_protocolDetailsUri = ::zserio::string<>,
            typename ZSERIO_T_nodeName = ::zserio::string<>,
            typename ZSERIO_T_hostName = ::zserio::string<>,
            typename ZSERIO_T_serviceInformation = ::nds::registry::node::ServiceInformation,
            typename ZSERIO_T_registryDefinition = ::nds::system::types::ModuleDefinition,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_systemId, NodeInformation, allocator_type> = 0>
    NodeInformation(
            ZSERIO_T_systemId&& systemId_,
            ZSERIO_T_nodeToken&& nodeToken_,
            ZSERIO_T_legalInfo&& legalInfo_,
            ::nds::registry::node::NodeType type_,
            ::nds::registry::node::ConnectionCosts connectionCosts_,
            ZSERIO_T_spatialCoverage&& spatialCoverage_,
            ::nds::registry::node::ProtocolType protocolType_,
            ZSERIO_T_protocolDetailsUri&& protocolDetailsUri_,
            ZSERIO_T_nodeName&& nodeName_,
            ZSERIO_T_hostName&& hostName_,
            uint16_t port_,
            ZSERIO_T_serviceInformation&& serviceInformation_,
            ZSERIO_T_registryDefinition&& registryDefinition_,
            const allocator_type& allocator = allocator_type()) :
            NodeInformation(allocator)
    {
        m_systemId_ = ::std::forward<ZSERIO_T_systemId>(systemId_);
        m_nodeToken_ = ::std::forward<ZSERIO_T_nodeToken>(nodeToken_);
        m_legalInfo_ = ::std::forward<ZSERIO_T_legalInfo>(legalInfo_);
        m_type_ = type_;
        m_connectionCosts_ = connectionCosts_;
        m_spatialCoverage_ = ::std::forward<ZSERIO_T_spatialCoverage>(spatialCoverage_);
        m_protocolType_ = protocolType_;
        m_protocolDetailsUri_ = ::std::forward<ZSERIO_T_protocolDetailsUri>(protocolDetailsUri_);
        m_nodeName_ = ::std::forward<ZSERIO_T_nodeName>(nodeName_);
        m_hostName_ = ::std::forward<ZSERIO_T_hostName>(hostName_);
        m_port_ = port_;
        m_serviceInformation_ = ::std::forward<ZSERIO_T_serviceInformation>(serviceInformation_);
        m_registryDefinition_ = ::std::forward<ZSERIO_T_registryDefinition>(registryDefinition_);
    }

    explicit NodeInformation(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit NodeInformation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~NodeInformation() = default;

    NodeInformation(const NodeInformation&) = default;
    NodeInformation& operator=(const NodeInformation&) = default;

    NodeInformation(NodeInformation&&) = default;
    NodeInformation& operator=(NodeInformation&&) = default;

    NodeInformation(::zserio::PropagateAllocatorT,
            const NodeInformation& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::system::types::NdsSystemToken& getSystemId() const;
    ::nds::system::types::NdsSystemToken& getSystemId();
    void setSystemId(const ::nds::system::types::NdsSystemToken& systemId_);
    void setSystemId(::nds::system::types::NdsSystemToken&& systemId_);

    const ::nds::system::types::NdsNodeToken& getNodeToken() const;
    ::nds::system::types::NdsNodeToken& getNodeToken();
    void setNodeToken(const ::nds::system::types::NdsNodeToken& nodeToken_);
    void setNodeToken(::nds::system::types::NdsNodeToken&& nodeToken_);

    const ::nds::system::types::NdsNodeLegalInfo& getLegalInfo() const;
    ::nds::system::types::NdsNodeLegalInfo& getLegalInfo();
    void setLegalInfo(const ::nds::system::types::NdsNodeLegalInfo& legalInfo_);
    void setLegalInfo(::nds::system::types::NdsNodeLegalInfo&& legalInfo_);

    ::nds::registry::node::NodeType getType() const;
    void setType(::nds::registry::node::NodeType type_);

    ::nds::registry::node::ConnectionCosts getConnectionCosts() const;
    void setConnectionCosts(::nds::registry::node::ConnectionCosts connectionCosts_);

    const ::nds::core::geometry::SpatialExtent& getSpatialCoverage() const;
    ::nds::core::geometry::SpatialExtent& getSpatialCoverage();
    void setSpatialCoverage(const ::nds::core::geometry::SpatialExtent& spatialCoverage_);
    void setSpatialCoverage(::nds::core::geometry::SpatialExtent&& spatialCoverage_);

    ::nds::registry::node::ProtocolType getProtocolType() const;
    void setProtocolType(::nds::registry::node::ProtocolType protocolType_);

    const ::zserio::string<>& getProtocolDetailsUri() const;
    ::zserio::string<>& getProtocolDetailsUri();
    void setProtocolDetailsUri(const ::zserio::string<>& protocolDetailsUri_);
    void setProtocolDetailsUri(::zserio::string<>&& protocolDetailsUri_);

    const ::zserio::string<>& getNodeName() const;
    ::zserio::string<>& getNodeName();
    void setNodeName(const ::zserio::string<>& nodeName_);
    void setNodeName(::zserio::string<>&& nodeName_);

    const ::zserio::string<>& getHostName() const;
    ::zserio::string<>& getHostName();
    void setHostName(const ::zserio::string<>& hostName_);
    void setHostName(::zserio::string<>&& hostName_);

    uint16_t getPort() const;
    void setPort(uint16_t port_);

    const ::nds::registry::node::ServiceInformation& getServiceInformation() const;
    ::nds::registry::node::ServiceInformation& getServiceInformation();
    void setServiceInformation(const ::nds::registry::node::ServiceInformation& serviceInformation_);
    void setServiceInformation(::nds::registry::node::ServiceInformation&& serviceInformation_);
    bool isServiceInformationUsed() const;
    bool isServiceInformationSet() const;
    void resetServiceInformation();

    const ::nds::system::types::ModuleDefinition& getRegistryDefinition() const;
    ::nds::system::types::ModuleDefinition& getRegistryDefinition();
    void setRegistryDefinition(const ::nds::system::types::ModuleDefinition& registryDefinition_);
    void setRegistryDefinition(::nds::system::types::ModuleDefinition&& registryDefinition_);
    bool isRegistryDefinitionUsed() const;
    bool isRegistryDefinitionSet() const;
    void resetRegistryDefinition();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const NodeInformation& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::system::types::NdsSystemToken readSystemId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::NdsSystemToken readSystemId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::system::types::NdsNodeToken readNodeToken(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::NdsNodeToken readNodeToken(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::system::types::NdsNodeLegalInfo readLegalInfo(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::NdsNodeLegalInfo readLegalInfo(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::registry::node::NodeType readType(::zserio::BitStreamReader& in);
    ::nds::registry::node::NodeType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::registry::node::ConnectionCosts readConnectionCosts(::zserio::BitStreamReader& in);
    ::nds::registry::node::ConnectionCosts readConnectionCosts(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::SpatialExtent readSpatialCoverage(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::SpatialExtent readSpatialCoverage(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::registry::node::ProtocolType readProtocolType(::zserio::BitStreamReader& in);
    ::nds::registry::node::ProtocolType readProtocolType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::string<> readProtocolDetailsUri(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readNodeName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readHostName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    uint16_t readPort(::zserio::BitStreamReader& in);
    uint16_t readPort(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::registry::node::ServiceInformation> readServiceInformation(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::registry::node::ServiceInformation> readServiceInformation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition> readRegistryDefinition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::system::types::NdsSystemToken m_systemId_;
    ::nds::system::types::NdsNodeToken m_nodeToken_;
    ::nds::system::types::NdsNodeLegalInfo m_legalInfo_;
    ::nds::registry::node::NodeType m_type_;
    ::nds::registry::node::ConnectionCosts m_connectionCosts_;
    ::nds::core::geometry::SpatialExtent m_spatialCoverage_;
    ::nds::registry::node::ProtocolType m_protocolType_;
    ::zserio::string<> m_protocolDetailsUri_;
    ::zserio::string<> m_nodeName_;
    ::zserio::string<> m_hostName_;
    uint16_t m_port_;
    ::zserio::InplaceOptionalHolder<::nds::registry::node::ServiceInformation> m_serviceInformation_;
    ::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition> m_registryDefinition_;
};

} // namespace node
} // namespace registry
} // namespace nds

#endif // NDS_REGISTRY_NODE_NODE_INFORMATION_H
