/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_REGISTRY_NODE_SERVICE_INFORMATION_H
#define NDS_REGISTRY_NODE_SERVICE_INFORMATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>

#include <nds/registry/node/ServicePriority.h>
#include <nds/system/types/ExternData.h>
#include <nds/system/types/ModuleDefinition.h>
#include <nds/system/types/ModuleService.h>

namespace nds
{
namespace registry
{
namespace node
{

class ServiceInformation
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getServicePriority()
        {
            return m_servicePriority_;
        }

    private:
        ::zserio::DeltaContext m_servicePriority_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ServiceInformation() noexcept :
            ServiceInformation(allocator_type())
    {}

    explicit ServiceInformation(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_moduleDefinition = ::nds::system::types::ModuleDefinition,
            typename ZSERIO_T_moduleService = ::nds::system::types::ModuleService,
            typename ZSERIO_T_serviceMetadata = ::nds::system::types::ExternData,
            typename ZSERIO_T_serviceCertificationMetadata = ::zserio::BitBuffer,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_moduleDefinition, ServiceInformation, allocator_type> = 0>
    ServiceInformation(
            ZSERIO_T_moduleDefinition&& moduleDefinition_,
            ZSERIO_T_moduleService&& moduleService_,
            ::nds::registry::node::ServicePriority servicePriority_,
            ZSERIO_T_serviceMetadata&& serviceMetadata_,
            ZSERIO_T_serviceCertificationMetadata&& serviceCertificationMetadata_,
            const allocator_type& allocator = allocator_type()) :
            ServiceInformation(allocator)
    {
        m_moduleDefinition_ = ::std::forward<ZSERIO_T_moduleDefinition>(moduleDefinition_);
        m_moduleService_ = ::std::forward<ZSERIO_T_moduleService>(moduleService_);
        m_servicePriority_ = servicePriority_;
        m_serviceMetadata_ = ::std::forward<ZSERIO_T_serviceMetadata>(serviceMetadata_);
        m_serviceCertificationMetadata_ = ::std::forward<ZSERIO_T_serviceCertificationMetadata>(serviceCertificationMetadata_);
    }

    explicit ServiceInformation(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ServiceInformation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ServiceInformation() = default;

    ServiceInformation(const ServiceInformation&) = default;
    ServiceInformation& operator=(const ServiceInformation&) = default;

    ServiceInformation(ServiceInformation&&) = default;
    ServiceInformation& operator=(ServiceInformation&&) = default;

    ServiceInformation(::zserio::PropagateAllocatorT,
            const ServiceInformation& other, const allocator_type& allocator);

    const ::nds::system::types::ModuleDefinition& getModuleDefinition() const;
    ::nds::system::types::ModuleDefinition& getModuleDefinition();
    void setModuleDefinition(const ::nds::system::types::ModuleDefinition& moduleDefinition_);
    void setModuleDefinition(::nds::system::types::ModuleDefinition&& moduleDefinition_);

    const ::nds::system::types::ModuleService& getModuleService() const;
    ::nds::system::types::ModuleService& getModuleService();
    void setModuleService(const ::nds::system::types::ModuleService& moduleService_);
    void setModuleService(::nds::system::types::ModuleService&& moduleService_);

    ::nds::registry::node::ServicePriority getServicePriority() const;
    void setServicePriority(::nds::registry::node::ServicePriority servicePriority_);

    const ::nds::system::types::ExternData& getServiceMetadata() const;
    ::nds::system::types::ExternData& getServiceMetadata();
    void setServiceMetadata(const ::nds::system::types::ExternData& serviceMetadata_);
    void setServiceMetadata(::nds::system::types::ExternData&& serviceMetadata_);
    bool isServiceMetadataUsed() const;
    bool isServiceMetadataSet() const;
    void resetServiceMetadata();

    const ::zserio::BitBuffer& getServiceCertificationMetadata() const;
    ::zserio::BitBuffer& getServiceCertificationMetadata();
    void setServiceCertificationMetadata(const ::zserio::BitBuffer& serviceCertificationMetadata_);
    void setServiceCertificationMetadata(::zserio::BitBuffer&& serviceCertificationMetadata_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ServiceInformation& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::system::types::ModuleDefinition readModuleDefinition(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::ModuleService readModuleService(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::registry::node::ServicePriority readServicePriority(::zserio::BitStreamReader& in);
    ::nds::registry::node::ServicePriority readServicePriority(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> readServiceMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::BitBuffer readServiceCertificationMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::system::types::ModuleDefinition m_moduleDefinition_;
    ::nds::system::types::ModuleService m_moduleService_;
    ::nds::registry::node::ServicePriority m_servicePriority_;
    ::zserio::InplaceOptionalHolder<::nds::system::types::ExternData> m_serviceMetadata_;
    ::zserio::BitBuffer m_serviceCertificationMetadata_;
};

} // namespace node
} // namespace registry
} // namespace nds

#endif // NDS_REGISTRY_NODE_SERVICE_INFORMATION_H
