/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_REGISTRY_NODE_NODE_LIST_H
#define NDS_REGISTRY_NODE_NODE_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/registry/node/NodeInformation.h>

namespace nds
{
namespace registry
{
namespace node
{

class NodeList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumNodes()
        {
            return m_numNodes_;
        }

    private:
        ::zserio::DeltaContext m_numNodes_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    NodeList() noexcept :
            NodeList(allocator_type())
    {}

    explicit NodeList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_nodes = ::zserio::vector<::nds::registry::node::NodeInformation>>
    NodeList(
            uint64_t numNodes_,
            ZSERIO_T_nodes&& nodes_,
            const allocator_type& allocator = allocator_type()) :
            NodeList(allocator)
    {
        m_numNodes_ = numNodes_;
        m_nodes_ = ZserioArrayType_nodes(::std::forward<ZSERIO_T_nodes>(nodes_));
    }

    explicit NodeList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit NodeList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~NodeList() = default;

    NodeList(const NodeList&) = default;
    NodeList& operator=(const NodeList&) = default;

    NodeList(NodeList&&) = default;
    NodeList& operator=(NodeList&&) = default;

    NodeList(::zserio::PropagateAllocatorT,
            const NodeList& other, const allocator_type& allocator);

    void initializeChildren();

    uint64_t getNumNodes() const;
    void setNumNodes(uint64_t numNodes_);

    const ::zserio::vector<::nds::registry::node::NodeInformation>& getNodes() const;
    ::zserio::vector<::nds::registry::node::NodeInformation>& getNodes();
    void setNodes(const ::zserio::vector<::nds::registry::node::NodeInformation>& nodes_);
    void setNodes(::zserio::vector<::nds::registry::node::NodeInformation>&& nodes_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const NodeList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_nodes
    {
    public:
        using OwnerType = NodeList;

        static void initializeElement(NodeList& owner,
                ::nds::registry::node::NodeInformation& element, size_t index);
    };

    class ZserioElementFactory_nodes
    {
    public:
        using OwnerType = NodeList;

        static void create(NodeList& owner,
                ::zserio::vector<::nds::registry::node::NodeInformation>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(NodeList& owner,
                ::zserio::vector<::nds::registry::node::NodeInformation>& array,
                ::nds::registry::node::NodeInformation::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_nodes = ::zserio::Array<::zserio::vector<::nds::registry::node::NodeInformation>, ::zserio::ObjectArrayTraits<::nds::registry::node::NodeInformation, ZserioElementFactory_nodes>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_nodes>;

    uint64_t readNumNodes(::zserio::BitStreamReader& in);
    uint64_t readNumNodes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_nodes readNodes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_nodes readNodes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint64_t m_numNodes_;
    ZserioArrayType_nodes m_nodes_;
};

} // namespace node
} // namespace registry
} // namespace nds

#endif // NDS_REGISTRY_NODE_NODE_LIST_H
