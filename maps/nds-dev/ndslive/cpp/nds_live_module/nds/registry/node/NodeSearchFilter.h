/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_REGISTRY_NODE_NODE_SEARCH_FILTER_H
#define NDS_REGISTRY_NODE_NODE_SEARCH_FILTER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/registry/node/NodeType.h>
#include <nds/registry/node/ServiceInformationFilter.h>
#include <nds/system/types/NdsSystemToken.h>

namespace nds
{
namespace registry
{
namespace node
{

class NodeSearchFilter
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::system::types::NdsSystemToken::ZserioPackingContext& getSystemId()
        {
            return m_systemId_;
        }

        ::zserio::DeltaContext& getNodeType()
        {
            return m_nodeType_;
        }

        ::nds::registry::node::ServiceInformationFilter::ZserioPackingContext& getServiceInfoFilter()
        {
            return m_serviceInfoFilter_;
        }

    private:
        ::nds::system::types::NdsSystemToken::ZserioPackingContext m_systemId_;
        ::zserio::DeltaContext m_nodeType_;
        ::nds::registry::node::ServiceInformationFilter::ZserioPackingContext m_serviceInfoFilter_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    NodeSearchFilter() noexcept :
            NodeSearchFilter(allocator_type())
    {}

    explicit NodeSearchFilter(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_systemId = ::nds::system::types::NdsSystemToken,
            typename ZSERIO_T_serviceInfoFilter = ::nds::registry::node::ServiceInformationFilter,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_systemId, NodeSearchFilter, allocator_type> = 0>
    NodeSearchFilter(
            ZSERIO_T_systemId&& systemId_,
            ::nds::registry::node::NodeType nodeType_,
            ZSERIO_T_serviceInfoFilter&& serviceInfoFilter_,
            const allocator_type& allocator = allocator_type()) :
            NodeSearchFilter(allocator)
    {
        m_systemId_ = ::std::forward<ZSERIO_T_systemId>(systemId_);
        m_nodeType_ = nodeType_;
        m_serviceInfoFilter_ = ::std::forward<ZSERIO_T_serviceInfoFilter>(serviceInfoFilter_);
    }

    explicit NodeSearchFilter(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit NodeSearchFilter(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~NodeSearchFilter() = default;

    NodeSearchFilter(const NodeSearchFilter&) = default;
    NodeSearchFilter& operator=(const NodeSearchFilter&) = default;

    NodeSearchFilter(NodeSearchFilter&&) = default;
    NodeSearchFilter& operator=(NodeSearchFilter&&) = default;

    NodeSearchFilter(::zserio::PropagateAllocatorT,
            const NodeSearchFilter& other, const allocator_type& allocator);

    const ::nds::system::types::NdsSystemToken& getSystemId() const;
    ::nds::system::types::NdsSystemToken& getSystemId();
    void setSystemId(const ::nds::system::types::NdsSystemToken& systemId_);
    void setSystemId(::nds::system::types::NdsSystemToken&& systemId_);

    ::nds::registry::node::NodeType getNodeType() const;
    void setNodeType(::nds::registry::node::NodeType nodeType_);

    const ::nds::registry::node::ServiceInformationFilter& getServiceInfoFilter() const;
    ::nds::registry::node::ServiceInformationFilter& getServiceInfoFilter();
    void setServiceInfoFilter(const ::nds::registry::node::ServiceInformationFilter& serviceInfoFilter_);
    void setServiceInfoFilter(::nds::registry::node::ServiceInformationFilter&& serviceInfoFilter_);
    bool isServiceInfoFilterUsed() const;
    bool isServiceInfoFilterSet() const;
    void resetServiceInfoFilter();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const NodeSearchFilter& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::system::types::NdsSystemToken readSystemId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::NdsSystemToken readSystemId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::registry::node::NodeType readNodeType(::zserio::BitStreamReader& in);
    ::nds::registry::node::NodeType readNodeType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::registry::node::ServiceInformationFilter> readServiceInfoFilter(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::registry::node::ServiceInformationFilter> readServiceInfoFilter(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::system::types::NdsSystemToken m_systemId_;
    ::nds::registry::node::NodeType m_nodeType_;
    ::zserio::InplaceOptionalHolder<::nds::registry::node::ServiceInformationFilter> m_serviceInfoFilter_;
};

} // namespace node
} // namespace registry
} // namespace nds

#endif // NDS_REGISTRY_NODE_NODE_SEARCH_FILTER_H
