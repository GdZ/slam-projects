/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_REGISTRY_FILESTORE_REGISTRY_NODE_TABLE_H
#define NDS_REGISTRY_FILESTORE_REGISTRY_NODE_TABLE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <memory>
#include <sqlite3.h>
#include <zserio/Vector.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/AllocatorHolder.h>
#include <zserio/Span.h>
#include <zserio/StringView.h>
#include <zserio/SqliteConnection.h>
#include <zserio/SqliteFinalizer.h>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>

#include <nds/core/geometry/SpatialExtent.h>
#include <nds/registry/node/ConnectionCosts.h>
#include <nds/registry/node/NodeType.h>
#include <nds/registry/node/ProtocolType.h>
#include <nds/registry/node/ServiceInformation.h>
#include <nds/system/types/ModuleDefinition.h>
#include <nds/system/types/NdsNodeLegalInfo.h>
#include <nds/system/types/NdsNodeToken.h>
#include <nds/system/types/NdsSystemToken.h>

namespace nds
{
namespace registry
{
namespace filestore
{

class RegistryNodeTable : public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    class Row
    {
    public:
        ::nds::system::types::NdsSystemToken& getSystemId();
        const ::nds::system::types::NdsSystemToken& getSystemId() const;
        void setSystemId(const ::nds::system::types::NdsSystemToken& systemId_);
        void setSystemId(::nds::system::types::NdsSystemToken&& systemId_);
        void resetSystemId();
        bool isSystemIdSet() const;

        ::nds::system::types::NdsNodeToken& getNodeToken();
        const ::nds::system::types::NdsNodeToken& getNodeToken() const;
        void setNodeToken(const ::nds::system::types::NdsNodeToken& nodeToken_);
        void setNodeToken(::nds::system::types::NdsNodeToken&& nodeToken_);
        void resetNodeToken();
        bool isNodeTokenSet() const;

        ::nds::system::types::NdsNodeLegalInfo& getLegalInfo();
        const ::nds::system::types::NdsNodeLegalInfo& getLegalInfo() const;
        void setLegalInfo(const ::nds::system::types::NdsNodeLegalInfo& legalInfo_);
        void setLegalInfo(::nds::system::types::NdsNodeLegalInfo&& legalInfo_);
        void resetLegalInfo();
        bool isLegalInfoSet() const;

        ::nds::registry::node::NodeType getType() const;
        void setType(::nds::registry::node::NodeType type_);
        void resetType();
        bool isTypeSet() const;

        ::nds::registry::node::ConnectionCosts getConnectionCosts() const;
        void setConnectionCosts(::nds::registry::node::ConnectionCosts connectionCosts_);
        void resetConnectionCosts();
        bool isConnectionCostsSet() const;

        ::nds::core::geometry::SpatialExtent& getSpatialCoverage();
        const ::nds::core::geometry::SpatialExtent& getSpatialCoverage() const;
        void setSpatialCoverage(const ::nds::core::geometry::SpatialExtent& spatialCoverage_);
        void setSpatialCoverage(::nds::core::geometry::SpatialExtent&& spatialCoverage_);
        void resetSpatialCoverage();
        bool isSpatialCoverageSet() const;

        ::nds::registry::node::ProtocolType getProtocolType() const;
        void setProtocolType(::nds::registry::node::ProtocolType protocolType_);
        void resetProtocolType();
        bool isProtocolTypeSet() const;

        ::zserio::string<>& getProtocolDetailsUri();
        const ::zserio::string<>& getProtocolDetailsUri() const;
        void setProtocolDetailsUri(const ::zserio::string<>& protocolDetailsUri_);
        void setProtocolDetailsUri(::zserio::string<>&& protocolDetailsUri_);
        void resetProtocolDetailsUri();
        bool isProtocolDetailsUriSet() const;

        ::zserio::string<>& getNodeName();
        const ::zserio::string<>& getNodeName() const;
        void setNodeName(const ::zserio::string<>& nodeName_);
        void setNodeName(::zserio::string<>&& nodeName_);
        void resetNodeName();
        bool isNodeNameSet() const;

        ::zserio::string<>& getHostName();
        const ::zserio::string<>& getHostName() const;
        void setHostName(const ::zserio::string<>& hostName_);
        void setHostName(::zserio::string<>&& hostName_);
        void resetHostName();
        bool isHostNameSet() const;

        uint16_t getPort() const;
        void setPort(uint16_t port_);
        void resetPort();
        bool isPortSet() const;

        ::nds::registry::node::ServiceInformation& getServiceInformation();
        const ::nds::registry::node::ServiceInformation& getServiceInformation() const;
        void setServiceInformation(const ::nds::registry::node::ServiceInformation& serviceInformation_);
        void setServiceInformation(::nds::registry::node::ServiceInformation&& serviceInformation_);
        void resetServiceInformation();
        bool isServiceInformationSet() const;

        ::nds::system::types::ModuleDefinition& getRegistryDefinition();
        const ::nds::system::types::ModuleDefinition& getRegistryDefinition() const;
        void setRegistryDefinition(const ::nds::system::types::ModuleDefinition& registryDefinition_);
        void setRegistryDefinition(::nds::system::types::ModuleDefinition&& registryDefinition_);
        void resetRegistryDefinition();
        bool isRegistryDefinitionSet() const;

        void initializeChildren();

    private:
        ::zserio::InplaceOptionalHolder<::nds::system::types::NdsSystemToken> m_systemId_;
        ::zserio::InplaceOptionalHolder<::nds::system::types::NdsNodeToken> m_nodeToken_;
        ::zserio::InplaceOptionalHolder<::nds::system::types::NdsNodeLegalInfo> m_legalInfo_;
        ::zserio::InplaceOptionalHolder<::nds::registry::node::NodeType> m_type_;
        ::zserio::InplaceOptionalHolder<::nds::registry::node::ConnectionCosts> m_connectionCosts_;
        ::zserio::InplaceOptionalHolder<::nds::core::geometry::SpatialExtent> m_spatialCoverage_;
        ::zserio::InplaceOptionalHolder<::nds::registry::node::ProtocolType> m_protocolType_;
        ::zserio::InplaceOptionalHolder<::zserio::string<>> m_protocolDetailsUri_;
        ::zserio::InplaceOptionalHolder<::zserio::string<>> m_nodeName_;
        ::zserio::InplaceOptionalHolder<::zserio::string<>> m_hostName_;
        ::zserio::InplaceOptionalHolder<uint16_t> m_port_;
        ::zserio::InplaceOptionalHolder<::nds::registry::node::ServiceInformation> m_serviceInformation_;
        ::zserio::InplaceOptionalHolder<::nds::system::types::ModuleDefinition> m_registryDefinition_;
    };

    class Reader : public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
    {
    public:
        ~Reader() = default;

        Reader(const Reader&) = delete;
        Reader& operator=(const Reader&) = delete;

        Reader(Reader&&) = default;
        Reader& operator=(Reader&&) = delete;

        bool hasNext() const noexcept;
        Row next();

    private:
        explicit Reader(::zserio::SqliteConnection& db, const ::zserio::string<>& sqlQuery, const allocator_type& allocator = allocator_type());
        friend class RegistryNodeTable;

        void makeStep();

        ::std::unique_ptr<sqlite3_stmt, ::zserio::SqliteFinalizer> m_stmt;
        int m_lastResult;
    };

    RegistryNodeTable(::zserio::SqliteConnection& db, ::zserio::StringView tableName,
            ::zserio::StringView attachedDbName = ::zserio::StringView(),
            const allocator_type& allocator = allocator_type());
    RegistryNodeTable(::zserio::SqliteConnection& db, ::zserio::StringView tableName, const allocator_type& allocator);

    ~RegistryNodeTable() = default;

    RegistryNodeTable(const RegistryNodeTable&) = delete;
    RegistryNodeTable& operator=(const RegistryNodeTable&) = delete;

    RegistryNodeTable(RegistryNodeTable&&) = delete;
    RegistryNodeTable& operator=(RegistryNodeTable&&) = delete;

    void createTable();
    void deleteTable();

    Reader createReader(::zserio::StringView condition = ::zserio::StringView()) const;
    void write(::zserio::Span<Row> rows);
    void update(Row& row, ::zserio::StringView whereCondition);

private:
    void writeRow(Row& row, sqlite3_stmt& statement);

    void appendCreateTableToQuery(::zserio::string<>& sqlQuery) const;

    void appendTableNameToQuery(::zserio::string<>& sqlQuery) const;

    ::zserio::SqliteConnection& m_db;
    ::zserio::StringView m_name;
    ::zserio::StringView m_attachedDbName;
};

} // namespace filestore
} // namespace registry
} // namespace nds

#endif // NDS_REGISTRY_FILESTORE_REGISTRY_NODE_TABLE_H
