/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_REGISTRY_FILESTORE_REGISTRY_STORE_H
#define NDS_REGISTRY_FILESTORE_REGISTRY_STORE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <memory>
#include <array>
#include <set>
#include <zserio/Vector.h>
#include <map>
#include <zserio/Vector.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/UniquePtr.h>
#include <zserio/AllocatorHolder.h>
#include <zserio/StringView.h>
#include <zserio/ISqliteDatabase.h>
#include <zserio/SqliteConnection.h>

#include <nds/registry/filestore/RegistryNodeTable.h>

namespace nds
{
namespace registry
{
namespace filestore
{

class RegistryStore : public ::zserio::ISqliteDatabase,
        public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    using TRelocationMap = ::std::map<::zserio::string<>, ::zserio::string<>>;

    explicit RegistryStore(const ::zserio::string<>& dbFileName,
            const TRelocationMap& tableToDbFileNameRelocationMap = TRelocationMap(),
            const allocator_type& allocator = allocator_type());
    explicit RegistryStore(const ::zserio::string<>& dbFileName, const allocator_type& allocator);
    explicit RegistryStore(sqlite3* externalConnection,
            const TRelocationMap& tableToAttachedDbNameRelocationMap = TRelocationMap(),
            const allocator_type& allocator = allocator_type());
    explicit RegistryStore(sqlite3* externalConnection, const allocator_type& allocator);

    ~RegistryStore() override;

    RegistryStore(const RegistryStore&) = delete;
    RegistryStore& operator=(const RegistryStore&) = delete;

    RegistryStore(RegistryStore&&) = delete;
    RegistryStore& operator=(RegistryStore&&) = delete;

    ::zserio::SqliteConnection& connection() noexcept override;

    ::nds::registry::filestore::RegistryNodeTable& getNodeTable() noexcept;

    void createSchema() override;
    void createSchema(const ::std::set<::zserio::string<>>& withoutRowIdTableNamesBlackList);
    void deleteSchema() override;

    static ::zserio::StringView databaseName() noexcept;
    static const ::std::array<::zserio::StringView, 1>& tableNames() noexcept;

private:
    void initTables();
    void attachDatabase(::zserio::StringView fileName, ::zserio::StringView attachedDbName);
    void detachDatabases();

    static ::zserio::StringView tableNameNodeTable() noexcept;

    ::zserio::SqliteConnection m_db;
    ::zserio::vector<::zserio::string<>> m_attachedDbList;
    TRelocationMap m_tableToAttachedDbNameRelocationMap;

    ::zserio::unique_ptr<::nds::registry::filestore::RegistryNodeTable> m_nodeTable_;
};

} // namespace filestore
} // namespace registry
} // namespace nds

#endif // NDS_REGISTRY_FILESTORE_REGISTRY_STORE_H
