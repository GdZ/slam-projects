/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_REGISTRY_SERVICES_REGISTRY_SERVICE_CAPABILITIES_RESPONSE_H
#define NDS_REGISTRY_SERVICES_REGISTRY_SERVICE_CAPABILITIES_RESPONSE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/registry/services/RegistryServiceCapabilities.h>

namespace nds
{
namespace registry
{
namespace services
{

class RegistryServiceCapabilitiesResponse
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getCapabilities()
        {
            return m_capabilities_;
        }

    private:
        ::zserio::DeltaContext m_capabilities_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RegistryServiceCapabilitiesResponse() noexcept :
            RegistryServiceCapabilitiesResponse(allocator_type())
    {}

    explicit RegistryServiceCapabilitiesResponse(const allocator_type& allocator) noexcept;

    explicit RegistryServiceCapabilitiesResponse(
            ::nds::registry::services::RegistryServiceCapabilities capabilities_,
            const allocator_type& allocator = allocator_type()) :
            RegistryServiceCapabilitiesResponse(allocator)
    {
        m_capabilities_ = capabilities_;
    }

    explicit RegistryServiceCapabilitiesResponse(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RegistryServiceCapabilitiesResponse(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RegistryServiceCapabilitiesResponse() = default;

    RegistryServiceCapabilitiesResponse(const RegistryServiceCapabilitiesResponse&) = default;
    RegistryServiceCapabilitiesResponse& operator=(const RegistryServiceCapabilitiesResponse&) = default;

    RegistryServiceCapabilitiesResponse(RegistryServiceCapabilitiesResponse&&) = default;
    RegistryServiceCapabilitiesResponse& operator=(RegistryServiceCapabilitiesResponse&&) = default;

    RegistryServiceCapabilitiesResponse(::zserio::PropagateAllocatorT,
            const RegistryServiceCapabilitiesResponse& other, const allocator_type& allocator);

    ::nds::registry::services::RegistryServiceCapabilities getCapabilities() const;
    void setCapabilities(::nds::registry::services::RegistryServiceCapabilities capabilities_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RegistryServiceCapabilitiesResponse& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::registry::services::RegistryServiceCapabilities readCapabilities(::zserio::BitStreamReader& in);
    ::nds::registry::services::RegistryServiceCapabilities readCapabilities(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::registry::services::RegistryServiceCapabilities m_capabilities_;
};

} // namespace services
} // namespace registry
} // namespace nds

#endif // NDS_REGISTRY_SERVICES_REGISTRY_SERVICE_CAPABILITIES_RESPONSE_H
