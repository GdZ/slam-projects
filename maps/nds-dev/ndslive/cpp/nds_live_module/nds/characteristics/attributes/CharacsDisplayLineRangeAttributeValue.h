/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_ATTRIBUTES_CHARACS_DISPLAY_LINE_RANGE_ATTRIBUTE_VALUE_H
#define NDS_CHARACTERISTICS_ATTRIBUTES_CHARACS_DISPLAY_LINE_RANGE_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/characteristics/attributes/CharacsDisplayLineRangeAttributeType.h>
#include <nds/characteristics/types/CompleteCarpoolRoad.h>
#include <nds/characteristics/types/ComplexIntersectionType.h>
#include <nds/characteristics/types/FerryType.h>
#include <nds/characteristics/types/HasSidewalk.h>
#include <nds/characteristics/types/HasStreetLights.h>
#include <nds/characteristics/types/InBusinessDistrict.h>
#include <nds/characteristics/types/MetricLaneWidth.h>
#include <nds/characteristics/types/MovableBridge.h>
#include <nds/characteristics/types/PartialCarpoolRoad.h>
#include <nds/characteristics/types/PavementType.h>
#include <nds/characteristics/types/RoadLocationAssignment.h>
#include <nds/characteristics/types/SharedRoadSurfaceWithPedestrians.h>
#include <nds/characteristics/types/StationPlazaType.h>
#include <nds/core/types/FunctionalRoadClass.h>
#include <nds/core/types/GlobalSourceId.h>
#include <nds/core/types/PriorityRoadClass.h>
#include <nds/core/types/RoadType.h>
#include <nds/core/types/SpeedKmh.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

class CharacsDisplayLineRangeAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_metricLaneWidth = 0,
        CHOICE_pavementType = 1,
        CHOICE_movableBridge = 2,
        CHOICE_hasSidewalk = 3,
        CHOICE_stationPlazaType = 4,
        CHOICE_averageSpeed = 5,
        CHOICE_functionalRoadClass = 6,
        CHOICE_priorityRoadClass = 7,
        CHOICE_complexIntersectionType = 8,
        CHOICE_roadLocationId = 9,
        CHOICE_hasStreetLights = 10,
        CHOICE_sharedRoadSurfaceWithPedestrians = 11,
        CHOICE_inBusinessDistrict = 12,
        CHOICE_roadType = 13,
        CHOICE_completeCarpoolRoad = 14,
        CHOICE_partialCarpoolRoad = 15,
        CHOICE_ferryType = 16,
        CHOICE_globalSourceId = 17,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getMetricLaneWidth()
        {
            return m_metricLaneWidth_;
        }

        ::zserio::DeltaContext& getPavementType()
        {
            return m_pavementType_;
        }

        ::zserio::DeltaContext& getStationPlazaType()
        {
            return m_stationPlazaType_;
        }

        ::zserio::DeltaContext& getAverageSpeed()
        {
            return m_averageSpeed_;
        }

        ::zserio::DeltaContext& getFunctionalRoadClass()
        {
            return m_functionalRoadClass_;
        }

        ::zserio::DeltaContext& getPriorityRoadClass()
        {
            return m_priorityRoadClass_;
        }

        ::zserio::DeltaContext& getComplexIntersectionType()
        {
            return m_complexIntersectionType_;
        }

        ::nds::characteristics::types::RoadLocationAssignment::ZserioPackingContext& getRoadLocationId()
        {
            return m_roadLocationId_;
        }

        ::nds::core::types::RoadType::ZserioPackingContext& getRoadType()
        {
            return m_roadType_;
        }

        ::zserio::DeltaContext& getFerryType()
        {
            return m_ferryType_;
        }

    private:
        ::zserio::DeltaContext m_metricLaneWidth_;
        ::zserio::DeltaContext m_pavementType_;
        ::zserio::DeltaContext m_stationPlazaType_;
        ::zserio::DeltaContext m_averageSpeed_;
        ::zserio::DeltaContext m_functionalRoadClass_;
        ::zserio::DeltaContext m_priorityRoadClass_;
        ::zserio::DeltaContext m_complexIntersectionType_;
        ::nds::characteristics::types::RoadLocationAssignment::ZserioPackingContext m_roadLocationId_;
        ::nds::core::types::RoadType::ZserioPackingContext m_roadType_;
        ::zserio::DeltaContext m_ferryType_;
    };

    CharacsDisplayLineRangeAttributeValue() noexcept :
            CharacsDisplayLineRangeAttributeValue(allocator_type())
    {}

    explicit CharacsDisplayLineRangeAttributeValue(const allocator_type& allocator) noexcept;

    explicit CharacsDisplayLineRangeAttributeValue(::zserio::BitStreamReader& in,
            ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType type_, const allocator_type& allocator = allocator_type());
    explicit CharacsDisplayLineRangeAttributeValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType type_, const allocator_type& allocator = allocator_type());

    ~CharacsDisplayLineRangeAttributeValue() = default;

    CharacsDisplayLineRangeAttributeValue(const CharacsDisplayLineRangeAttributeValue& other);
    CharacsDisplayLineRangeAttributeValue& operator=(const CharacsDisplayLineRangeAttributeValue& other);

    CharacsDisplayLineRangeAttributeValue(CharacsDisplayLineRangeAttributeValue&& other);
    CharacsDisplayLineRangeAttributeValue& operator=(CharacsDisplayLineRangeAttributeValue&& other);

    CharacsDisplayLineRangeAttributeValue(::zserio::PropagateAllocatorT,
            const CharacsDisplayLineRangeAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType getType() const;

    ::nds::characteristics::types::MetricLaneWidth getMetricLaneWidth() const;
    void setMetricLaneWidth(::nds::characteristics::types::MetricLaneWidth metricLaneWidth_);

    ::nds::characteristics::types::PavementType getPavementType() const;
    void setPavementType(::nds::characteristics::types::PavementType pavementType_);

    const ::nds::characteristics::types::MovableBridge& getMovableBridge() const;
    ::nds::characteristics::types::MovableBridge& getMovableBridge();
    void setMovableBridge(const ::nds::characteristics::types::MovableBridge& movableBridge_);
    void setMovableBridge(::nds::characteristics::types::MovableBridge&& movableBridge_);

    const ::nds::characteristics::types::HasSidewalk& getHasSidewalk() const;
    ::nds::characteristics::types::HasSidewalk& getHasSidewalk();
    void setHasSidewalk(const ::nds::characteristics::types::HasSidewalk& hasSidewalk_);
    void setHasSidewalk(::nds::characteristics::types::HasSidewalk&& hasSidewalk_);

    ::nds::characteristics::types::StationPlazaType getStationPlazaType() const;
    void setStationPlazaType(::nds::characteristics::types::StationPlazaType stationPlazaType_);

    ::nds::core::types::SpeedKmh getAverageSpeed() const;
    void setAverageSpeed(::nds::core::types::SpeedKmh averageSpeed_);

    ::nds::core::types::FunctionalRoadClass getFunctionalRoadClass() const;
    void setFunctionalRoadClass(::nds::core::types::FunctionalRoadClass functionalRoadClass_);

    ::nds::core::types::PriorityRoadClass getPriorityRoadClass() const;
    void setPriorityRoadClass(::nds::core::types::PriorityRoadClass priorityRoadClass_);

    ::nds::characteristics::types::ComplexIntersectionType getComplexIntersectionType() const;
    void setComplexIntersectionType(::nds::characteristics::types::ComplexIntersectionType complexIntersectionType_);

    const ::nds::characteristics::types::RoadLocationAssignment& getRoadLocationId() const;
    ::nds::characteristics::types::RoadLocationAssignment& getRoadLocationId();
    void setRoadLocationId(const ::nds::characteristics::types::RoadLocationAssignment& roadLocationId_);
    void setRoadLocationId(::nds::characteristics::types::RoadLocationAssignment&& roadLocationId_);

    const ::nds::characteristics::types::HasStreetLights& getHasStreetLights() const;
    ::nds::characteristics::types::HasStreetLights& getHasStreetLights();
    void setHasStreetLights(const ::nds::characteristics::types::HasStreetLights& hasStreetLights_);
    void setHasStreetLights(::nds::characteristics::types::HasStreetLights&& hasStreetLights_);

    const ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& getSharedRoadSurfaceWithPedestrians() const;
    ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& getSharedRoadSurfaceWithPedestrians();
    void setSharedRoadSurfaceWithPedestrians(const ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& sharedRoadSurfaceWithPedestrians_);
    void setSharedRoadSurfaceWithPedestrians(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians&& sharedRoadSurfaceWithPedestrians_);

    const ::nds::characteristics::types::InBusinessDistrict& getInBusinessDistrict() const;
    ::nds::characteristics::types::InBusinessDistrict& getInBusinessDistrict();
    void setInBusinessDistrict(const ::nds::characteristics::types::InBusinessDistrict& inBusinessDistrict_);
    void setInBusinessDistrict(::nds::characteristics::types::InBusinessDistrict&& inBusinessDistrict_);

    const ::nds::core::types::RoadType& getRoadType() const;
    ::nds::core::types::RoadType& getRoadType();
    void setRoadType(const ::nds::core::types::RoadType& roadType_);
    void setRoadType(::nds::core::types::RoadType&& roadType_);

    const ::nds::characteristics::types::CompleteCarpoolRoad& getCompleteCarpoolRoad() const;
    ::nds::characteristics::types::CompleteCarpoolRoad& getCompleteCarpoolRoad();
    void setCompleteCarpoolRoad(const ::nds::characteristics::types::CompleteCarpoolRoad& completeCarpoolRoad_);
    void setCompleteCarpoolRoad(::nds::characteristics::types::CompleteCarpoolRoad&& completeCarpoolRoad_);

    const ::nds::characteristics::types::PartialCarpoolRoad& getPartialCarpoolRoad() const;
    ::nds::characteristics::types::PartialCarpoolRoad& getPartialCarpoolRoad();
    void setPartialCarpoolRoad(const ::nds::characteristics::types::PartialCarpoolRoad& partialCarpoolRoad_);
    void setPartialCarpoolRoad(::nds::characteristics::types::PartialCarpoolRoad&& partialCarpoolRoad_);

    ::nds::characteristics::types::FerryType getFerryType() const;
    void setFerryType(::nds::characteristics::types::FerryType ferryType_);

    const ::nds::core::types::GlobalSourceId& getGlobalSourceId() const;
    ::nds::core::types::GlobalSourceId& getGlobalSourceId();
    void setGlobalSourceId(const ::nds::core::types::GlobalSourceId& globalSourceId_);
    void setGlobalSourceId(::nds::core::types::GlobalSourceId&& globalSourceId_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const CharacsDisplayLineRangeAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace characteristics
} // namespace nds

#endif // NDS_CHARACTERISTICS_ATTRIBUTES_CHARACS_DISPLAY_LINE_RANGE_ATTRIBUTE_VALUE_H
