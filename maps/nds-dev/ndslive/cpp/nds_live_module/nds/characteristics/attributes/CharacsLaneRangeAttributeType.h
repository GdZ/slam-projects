/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_ATTRIBUTES_CHARACS_LANE_RANGE_ATTRIBUTE_TYPE_H
#define NDS_CHARACTERISTICS_ATTRIBUTES_CHARACS_LANE_RANGE_ATTRIBUTE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

enum class CharacsLaneRangeAttributeType : uint16_t
{
    LANE_TYPE = UINT16_C(0),
    PHYSICAL_WIDTH_METRIC = UINT16_C(1),
    TYPE_OF_PAVEMENT = UINT16_C(2),
    GRADE_TYPE = UINT16_C(3),
    RAILWAY_CROSSING = UINT16_C(4),
    PEDESTRIAN_CROSSING = UINT16_C(5),
    DIVIDER_TYPE = UINT16_C(6),
    SUPERELEVATION = UINT16_C(7),
    AVERAGE_SPEED = UINT16_C(8),
    FUNCTIONAL_ROAD_CLASS = UINT16_C(9),
    PRIORITY_ROAD_CLASS = UINT16_C(10),
    STATION_PLAZA_TYPE = UINT16_C(11),
    TRAFFIC_CALMING = UINT16_C(12),
    MOVABLE_BRIDGE = UINT16_C(13),
    ROAD_MEDIAN = UINT16_C(14),
    HAS_SIDEWALK = UINT16_C(15),
    FRICTION = UINT16_C(16),
    LANE_WIDTH_STATE = UINT16_C(17),
    COMPLEX_INTERSECTION_TYPE = UINT16_C(18),
    START_OR_DESTINATION_ROAD_ONLY = UINT16_C(19),
    ROAD_LOCATION_ID = UINT16_C(20),
    HAS_STREET_LIGHTS = UINT16_C(21),
    SHARED_ROAD_SURFACE_WITH_PEDESTRIANS = UINT16_C(22),
    IN_BUSINESS_DISTRICT = UINT16_C(23),
    FERRY_TYPE = UINT16_C(24),
    STUBBLE = UINT16_C(25),
    MIDDLE_DIVIDER_TYPE = UINT16_C(26),
    MULTI_DIGITIZED_LANE_GROUP_REFERENCE = UINT16_C(27),
    GLOBAL_SOURCE_ID = UINT16_C(28)
};

} // namespace attributes
} // namespace characteristics
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for CharacsLaneRangeAttributeType enumeration.
template <>
struct EnumTraits<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>
{
    static constexpr ::std::array<const char*, 29> names =
    {{
        "LANE_TYPE",
        "PHYSICAL_WIDTH_METRIC",
        "TYPE_OF_PAVEMENT",
        "GRADE_TYPE",
        "RAILWAY_CROSSING",
        "PEDESTRIAN_CROSSING",
        "DIVIDER_TYPE",
        "SUPERELEVATION",
        "AVERAGE_SPEED",
        "FUNCTIONAL_ROAD_CLASS",
        "PRIORITY_ROAD_CLASS",
        "STATION_PLAZA_TYPE",
        "TRAFFIC_CALMING",
        "MOVABLE_BRIDGE",
        "ROAD_MEDIAN",
        "HAS_SIDEWALK",
        "FRICTION",
        "LANE_WIDTH_STATE",
        "COMPLEX_INTERSECTION_TYPE",
        "START_OR_DESTINATION_ROAD_ONLY",
        "ROAD_LOCATION_ID",
        "HAS_STREET_LIGHTS",
        "SHARED_ROAD_SURFACE_WITH_PEDESTRIANS",
        "IN_BUSINESS_DISTRICT",
        "FERRY_TYPE",
        "STUBBLE",
        "MIDDLE_DIVIDER_TYPE",
        "MULTI_DIGITIZED_LANE_GROUP_REFERENCE",
        "GLOBAL_SOURCE_ID"
    }};

    static constexpr ::std::array<::nds::characteristics::attributes::CharacsLaneRangeAttributeType, 29> values =
    {{
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID
    }};

    static constexpr const char* enumName = "CharacsLaneRangeAttributeType";
};

template <>
size_t enumToOrdinal<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

template <>
::nds::characteristics::attributes::CharacsLaneRangeAttributeType valueToEnum<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(
        typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

template <>
size_t bitSizeOf<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

template <>
size_t initializeOffsets<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(size_t bitPosition, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

template <>
::nds::characteristics::attributes::CharacsLaneRangeAttributeType read<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::zserio::BitStreamReader& in);

template <>
::nds::characteristics::attributes::CharacsLaneRangeAttributeType read<::nds::characteristics::attributes::CharacsLaneRangeAttributeType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

template <>
void write<::zserio::DeltaContext, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value);

} // namespace zserio

#endif // NDS_CHARACTERISTICS_ATTRIBUTES_CHARACS_LANE_RANGE_ATTRIBUTE_TYPE_H
