/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/attributes/CharacsRoadPositionAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for CharacsRoadPositionAttributeType enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::names;
constexpr ::std::array<::nds::characteristics::attributes::CharacsRoadPositionAttributeType, 4> EnumTraits<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::values;
constexpr const char* EnumTraits<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    switch (value)
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        return 0;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        return 1;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        return 2;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsRoadPositionAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::characteristics::attributes::CharacsRoadPositionAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
        return static_cast<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsRoadPositionAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>(::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::characteristics::attributes::CharacsRoadPositionAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::characteristics::attributes::CharacsRoadPositionAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsRoadPositionAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadPositionAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/attributes/CharacsRoadRangeAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for CharacsRoadRangeAttributeType enumeration.
constexpr ::std::array<const char*, 31> EnumTraits<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::names;
constexpr ::std::array<::nds::characteristics::attributes::CharacsRoadRangeAttributeType, 31> EnumTraits<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::values;
constexpr const char* EnumTraits<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    switch (value)
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return 0;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return 1;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return 2;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        return 3;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        return 4;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        return 5;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        return 6;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        return 7;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        return 8;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        return 9;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        return 10;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        return 11;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        return 12;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        return 13;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        return 14;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        return 15;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        return 16;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return 17;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        return 18;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return 19;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        return 20;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        return 21;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        return 22;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        return 23;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return 24;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return 25;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        return 26;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        return 27;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return 28;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        return 29;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        return 30;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsRoadRangeAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::characteristics::attributes::CharacsRoadRangeAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
    case UINT16_C(18):
    case UINT16_C(19):
    case UINT16_C(20):
    case UINT16_C(21):
    case UINT16_C(22):
    case UINT16_C(23):
    case UINT16_C(24):
    case UINT16_C(25):
    case UINT16_C(26):
    case UINT16_C(27):
    case UINT16_C(28):
    case UINT16_C(29):
    case UINT16_C(30):
        return static_cast<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsRoadRangeAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>(::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::characteristics::attributes::CharacsRoadRangeAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::characteristics::attributes::CharacsRoadRangeAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsRoadRangeAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsRoadRangeAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/attributes/CharacsTransitionAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for CharacsTransitionAttributeType enumeration.
constexpr ::std::array<const char*, 1> EnumTraits<::nds::characteristics::attributes::CharacsTransitionAttributeType>::names;
constexpr ::std::array<::nds::characteristics::attributes::CharacsTransitionAttributeType, 1> EnumTraits<::nds::characteristics::attributes::CharacsTransitionAttributeType>::values;
constexpr const char* EnumTraits<::nds::characteristics::attributes::CharacsTransitionAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    switch (value)
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        return 0;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsTransitionAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsTransitionAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::characteristics::attributes::CharacsTransitionAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::characteristics::attributes::CharacsTransitionAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
        return static_cast<::nds::characteristics::attributes::CharacsTransitionAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsTransitionAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::characteristics::attributes::CharacsTransitionAttributeType>(::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsTransitionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsTransitionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::characteristics::attributes::CharacsTransitionAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsTransitionAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsTransitionAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::characteristics::attributes::CharacsTransitionAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsTransitionAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsTransitionAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsTransitionAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsTransitionAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/attributes/CharacsLanePositionAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for CharacsLanePositionAttributeType enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::names;
constexpr ::std::array<::nds::characteristics::attributes::CharacsLanePositionAttributeType, 4> EnumTraits<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::values;
constexpr const char* EnumTraits<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    switch (value)
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        return 0;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        return 1;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return 2;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsLanePositionAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::characteristics::attributes::CharacsLanePositionAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
        return static_cast<::nds::characteristics::attributes::CharacsLanePositionAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsLanePositionAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::characteristics::attributes::CharacsLanePositionAttributeType>(::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::characteristics::attributes::CharacsLanePositionAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsLanePositionAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::characteristics::attributes::CharacsLanePositionAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsLanePositionAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsLanePositionAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLanePositionAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/attributes/CharacsLaneRangeAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for CharacsLaneRangeAttributeType enumeration.
constexpr ::std::array<const char*, 29> EnumTraits<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::names;
constexpr ::std::array<::nds::characteristics::attributes::CharacsLaneRangeAttributeType, 29> EnumTraits<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::values;
constexpr const char* EnumTraits<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    switch (value)
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        return 0;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return 1;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        return 2;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        return 3;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        return 4;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        return 5;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        return 6;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        return 7;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        return 8;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return 9;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        return 10;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        return 11;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        return 12;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        return 13;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        return 14;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        return 15;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        return 16;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        return 17;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return 18;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return 19;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        return 20;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        return 21;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return 22;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        return 23;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        return 24;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        return 25;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return 26;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        return 27;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        return 28;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsLaneRangeAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::characteristics::attributes::CharacsLaneRangeAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
    case UINT16_C(18):
    case UINT16_C(19):
    case UINT16_C(20):
    case UINT16_C(21):
    case UINT16_C(22):
    case UINT16_C(23):
    case UINT16_C(24):
    case UINT16_C(25):
    case UINT16_C(26):
    case UINT16_C(27):
    case UINT16_C(28):
        return static_cast<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsLaneRangeAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::characteristics::attributes::CharacsLaneRangeAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::characteristics::attributes::CharacsLaneRangeAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsLaneRangeAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsLaneRangeAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/attributes/CharacsDisplayLineRangeAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for CharacsDisplayLineRangeAttributeType enumeration.
constexpr ::std::array<const char*, 18> EnumTraits<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::names;
constexpr ::std::array<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType, 18> EnumTraits<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::values;
constexpr const char* EnumTraits<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    switch (value)
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        return 0;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return 1;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        return 2;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        return 3;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return 4;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        return 5;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        return 6;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        return 7;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        return 8;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return 9;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        return 10;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        return 11;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return 12;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        return 13;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return 14;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return 15;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        return 16;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        return 17;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsDisplayLineRangeAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
    case UINT16_C(3):
    case UINT16_C(4):
    case UINT16_C(5):
    case UINT16_C(6):
    case UINT16_C(7):
    case UINT16_C(8):
    case UINT16_C(9):
    case UINT16_C(10):
    case UINT16_C(11):
    case UINT16_C(12):
    case UINT16_C(13):
    case UINT16_C(14):
    case UINT16_C(15):
    case UINT16_C(16):
    case UINT16_C(17):
        return static_cast<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsDisplayLineRangeAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>(::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/attributes/CharacsDisplayLinePositionAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for CharacsDisplayLinePositionAttributeType enumeration.
constexpr ::std::array<const char*, 3> EnumTraits<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::names;
constexpr ::std::array<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType, 3> EnumTraits<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::values;
constexpr const char* EnumTraits<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    switch (value)
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        return 0;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        return 1;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        return 2;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsDisplayLinePositionAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT16_C(0):
    case UINT16_C(1):
    case UINT16_C(2):
        return static_cast<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration CharacsDisplayLinePositionAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>(::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    context.init<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    return ::zserio::bitSizeOfVarUInt16(::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::type>(
                    in.readVarUInt16()));
}

template <>
::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>(context.read<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    out.writeVarUInt16(::zserio::enumToValue(value));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType value)
{
    context.write<::zserio::VarIntNNArrayTraits<typename ::std::underlying_type<::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/attributes/CharacsRoadPositionAttributeValue.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

CharacsRoadPositionAttributeValue::CharacsRoadPositionAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

CharacsRoadPositionAttributeValue::CharacsRoadPositionAttributeValue(::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsRoadPositionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

CharacsRoadPositionAttributeValue::CharacsRoadPositionAttributeValue(CharacsRoadPositionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsRoadPositionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

CharacsRoadPositionAttributeValue::CharacsRoadPositionAttributeValue(const CharacsRoadPositionAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsRoadPositionAttributeValue& CharacsRoadPositionAttributeValue::operator=(const CharacsRoadPositionAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsRoadPositionAttributeValue::CharacsRoadPositionAttributeValue(CharacsRoadPositionAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsRoadPositionAttributeValue& CharacsRoadPositionAttributeValue::operator=(CharacsRoadPositionAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsRoadPositionAttributeValue::CharacsRoadPositionAttributeValue(::zserio::PropagateAllocatorT,
        const CharacsRoadPositionAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void CharacsRoadPositionAttributeValue::initialize(
        ::nds::characteristics::attributes::CharacsRoadPositionAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;

    initializeChildren();
}

bool CharacsRoadPositionAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

void CharacsRoadPositionAttributeValue::initializeChildren()
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        m_objectChoice.get<::nds::core::geometry::Line2D>().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }
}

::nds::characteristics::attributes::CharacsRoadPositionAttributeType CharacsRoadPositionAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'CharacsRoadPositionAttributeValue' is not initialized!");

    return m_type_;
}

::nds::characteristics::types::StopLine& CharacsRoadPositionAttributeValue::getStopLine()
{
    return m_objectChoice.get<::nds::characteristics::types::StopLine>();
}

const ::nds::characteristics::types::StopLine& CharacsRoadPositionAttributeValue::getStopLine() const
{
    return m_objectChoice.get<::nds::characteristics::types::StopLine>();
}

void CharacsRoadPositionAttributeValue::setStopLine(const ::nds::characteristics::types::StopLine& stopLine_)
{
    m_objectChoice = stopLine_;
}

void CharacsRoadPositionAttributeValue::setStopLine(::nds::characteristics::types::StopLine&& stopLine_)
{
    m_objectChoice = ::std::move(stopLine_);
}

::nds::characteristics::types::WaitingLine& CharacsRoadPositionAttributeValue::getWaitingLine()
{
    return m_objectChoice.get<::nds::characteristics::types::WaitingLine>();
}

const ::nds::characteristics::types::WaitingLine& CharacsRoadPositionAttributeValue::getWaitingLine() const
{
    return m_objectChoice.get<::nds::characteristics::types::WaitingLine>();
}

void CharacsRoadPositionAttributeValue::setWaitingLine(const ::nds::characteristics::types::WaitingLine& waitingLine_)
{
    m_objectChoice = waitingLine_;
}

void CharacsRoadPositionAttributeValue::setWaitingLine(::nds::characteristics::types::WaitingLine&& waitingLine_)
{
    m_objectChoice = ::std::move(waitingLine_);
}

::nds::characteristics::types::StationaryObjectType CharacsRoadPositionAttributeValue::getStationaryObjectType() const
{
    return m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>();
}

void CharacsRoadPositionAttributeValue::setStationaryObjectType(::nds::characteristics::types::StationaryObjectType stationaryObjectType_)
{
    m_objectChoice = stationaryObjectType_;
}

::nds::core::geometry::Line2D& CharacsRoadPositionAttributeValue::getSlowRoadUserCrossing()
{
    return m_objectChoice.get<::nds::core::geometry::Line2D>();
}

const ::nds::core::geometry::Line2D& CharacsRoadPositionAttributeValue::getSlowRoadUserCrossing() const
{
    return m_objectChoice.get<::nds::core::geometry::Line2D>();
}

void CharacsRoadPositionAttributeValue::setSlowRoadUserCrossing(const ::nds::core::geometry::Line2D& slowRoadUserCrossing_)
{
    m_objectChoice = slowRoadUserCrossing_;
}

void CharacsRoadPositionAttributeValue::setSlowRoadUserCrossing(::nds::core::geometry::Line2D&& slowRoadUserCrossing_)
{
    m_objectChoice = ::std::move(slowRoadUserCrossing_);
}

CharacsRoadPositionAttributeValue::ChoiceTag CharacsRoadPositionAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        return CHOICE_stopLine;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        return CHOICE_waitingLine;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        return CHOICE_stationaryObjectType;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return CHOICE_slowRoadUserCrossing;
    default:
        return UNDEFINED_CHOICE;
    }
}

void CharacsRoadPositionAttributeValue::initPackingContext(CharacsRoadPositionAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        ::zserio::initPackingContext(context.getStationaryObjectType(), m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        m_objectChoice.get<::nds::core::geometry::Line2D>().initPackingContext(context.getSlowRoadUserCrossing());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }
}

size_t CharacsRoadPositionAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StopLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::WaitingLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        endBitPosition += m_objectChoice.get<::nds::core::geometry::Line2D>().bitSizeOf(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsRoadPositionAttributeValue::bitSizeOf(CharacsRoadPositionAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StopLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::WaitingLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        endBitPosition += ::zserio::bitSizeOf(context.getStationaryObjectType(), m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        endBitPosition += m_objectChoice.get<::nds::core::geometry::Line2D>().bitSizeOf(context.getSlowRoadUserCrossing(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsRoadPositionAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StopLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::WaitingLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        endBitPosition = m_objectChoice.get<::nds::core::geometry::Line2D>().initializeOffsets(endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }

    return endBitPosition;
}

size_t CharacsRoadPositionAttributeValue::initializeOffsets(CharacsRoadPositionAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StopLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::WaitingLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        endBitPosition = ::zserio::initializeOffsets(context.getStationaryObjectType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        endBitPosition = m_objectChoice.get<::nds::core::geometry::Line2D>().initializeOffsets(context.getSlowRoadUserCrossing(), endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }

    return endBitPosition;
}

bool CharacsRoadPositionAttributeValue::operator==(const CharacsRoadPositionAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StopLine>() == other.m_objectChoice.get<::nds::characteristics::types::StopLine>());
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::WaitingLine>() == other.m_objectChoice.get<::nds::characteristics::types::WaitingLine>());
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>() == other.m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::geometry::Line2D>() == other.m_objectChoice.get<::nds::core::geometry::Line2D>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }
}

uint32_t CharacsRoadPositionAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StopLine>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::WaitingLine>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::geometry::Line2D>());
            break;
        default:
            break;
        }
    }

    return result;
}

void CharacsRoadPositionAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        m_objectChoice.get<::nds::characteristics::types::StopLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        m_objectChoice.get<::nds::characteristics::types::WaitingLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        // check parameters
        if (m_objectChoice.get<::nds::core::geometry::Line2D>().getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field CharacsRoadPositionAttributeValue.slowRoadUserCrossing: ") <<
                    m_objectChoice.get<::nds::core::geometry::Line2D>().getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_objectChoice.get<::nds::core::geometry::Line2D>().write(out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }
}

void CharacsRoadPositionAttributeValue::write(CharacsRoadPositionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        m_objectChoice.get<::nds::characteristics::types::StopLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        m_objectChoice.get<::nds::characteristics::types::WaitingLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        ::zserio::write(context.getStationaryObjectType(), out, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        // check parameters
        if (m_objectChoice.get<::nds::core::geometry::Line2D>().getShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field CharacsRoadPositionAttributeValue.slowRoadUserCrossing: ") <<
                    m_objectChoice.get<::nds::core::geometry::Line2D>().getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_objectChoice.get<::nds::core::geometry::Line2D>().write(context.getSlowRoadUserCrossing(), out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsRoadPositionAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StopLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::WaitingLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationaryObjectType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return ::zserio::AnyHolder<>(::nds::core::geometry::Line2D(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsRoadPositionAttributeValue::readObject(CharacsRoadPositionAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StopLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::WaitingLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationaryObjectType>(context.getStationaryObjectType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return ::zserio::AnyHolder<>(::nds::core::geometry::Line2D(context.getSlowRoadUserCrossing(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsRoadPositionAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STOP_LINE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StopLine>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::WAITING_LINE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::WaitingLine>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::STATION:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StationaryObjectType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadPositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return ::zserio::allocatorPropagatingCopy<::nds::core::geometry::Line2D>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadPositionAttributeValue!");
    }
}

} // namespace attributes
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/attributes/CharacsRoadRangeAttributeValue.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

CharacsRoadRangeAttributeValue::CharacsRoadRangeAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

CharacsRoadRangeAttributeValue::CharacsRoadRangeAttributeValue(::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsRoadRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

CharacsRoadRangeAttributeValue::CharacsRoadRangeAttributeValue(CharacsRoadRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsRoadRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

CharacsRoadRangeAttributeValue::CharacsRoadRangeAttributeValue(const CharacsRoadRangeAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsRoadRangeAttributeValue& CharacsRoadRangeAttributeValue::operator=(const CharacsRoadRangeAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsRoadRangeAttributeValue::CharacsRoadRangeAttributeValue(CharacsRoadRangeAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsRoadRangeAttributeValue& CharacsRoadRangeAttributeValue::operator=(CharacsRoadRangeAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsRoadRangeAttributeValue::CharacsRoadRangeAttributeValue(::zserio::PropagateAllocatorT,
        const CharacsRoadRangeAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void CharacsRoadRangeAttributeValue::initialize(
        ::nds::characteristics::attributes::CharacsRoadRangeAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;

    initializeChildren();
}

bool CharacsRoadRangeAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

void CharacsRoadRangeAttributeValue::initializeChildren()
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>().initializeChildren();
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }
}

::nds::characteristics::attributes::CharacsRoadRangeAttributeType CharacsRoadRangeAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'CharacsRoadRangeAttributeValue' is not initialized!");

    return m_type_;
}

::nds::characteristics::types::CompleteCarpoolRoad& CharacsRoadRangeAttributeValue::getCompleteCarpoolRoad()
{
    return m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>();
}

const ::nds::characteristics::types::CompleteCarpoolRoad& CharacsRoadRangeAttributeValue::getCompleteCarpoolRoad() const
{
    return m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>();
}

void CharacsRoadRangeAttributeValue::setCompleteCarpoolRoad(const ::nds::characteristics::types::CompleteCarpoolRoad& completeCarpoolRoad_)
{
    m_objectChoice = completeCarpoolRoad_;
}

void CharacsRoadRangeAttributeValue::setCompleteCarpoolRoad(::nds::characteristics::types::CompleteCarpoolRoad&& completeCarpoolRoad_)
{
    m_objectChoice = ::std::move(completeCarpoolRoad_);
}

::nds::characteristics::types::PartialCarpoolRoad& CharacsRoadRangeAttributeValue::getPartialCarpoolRoad()
{
    return m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>();
}

const ::nds::characteristics::types::PartialCarpoolRoad& CharacsRoadRangeAttributeValue::getPartialCarpoolRoad() const
{
    return m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>();
}

void CharacsRoadRangeAttributeValue::setPartialCarpoolRoad(const ::nds::characteristics::types::PartialCarpoolRoad& partialCarpoolRoad_)
{
    m_objectChoice = partialCarpoolRoad_;
}

void CharacsRoadRangeAttributeValue::setPartialCarpoolRoad(::nds::characteristics::types::PartialCarpoolRoad&& partialCarpoolRoad_)
{
    m_objectChoice = ::std::move(partialCarpoolRoad_);
}

::nds::characteristics::types::MetricRoadWidth CharacsRoadRangeAttributeValue::getMetricRoadWidth() const
{
    return m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>();
}

void CharacsRoadRangeAttributeValue::setMetricRoadWidth(::nds::characteristics::types::MetricRoadWidth metricRoadWidth_)
{
    m_objectChoice = metricRoadWidth_;
}

::nds::characteristics::types::PavementType CharacsRoadRangeAttributeValue::getPavementType() const
{
    return m_objectChoice.get<::nds::characteristics::types::PavementType>();
}

void CharacsRoadRangeAttributeValue::setPavementType(::nds::characteristics::types::PavementType pavementType_)
{
    m_objectChoice = pavementType_;
}

::nds::characteristics::types::FerryType CharacsRoadRangeAttributeValue::getFerryType() const
{
    return m_objectChoice.get<::nds::characteristics::types::FerryType>();
}

void CharacsRoadRangeAttributeValue::setFerryType(::nds::characteristics::types::FerryType ferryType_)
{
    m_objectChoice = ferryType_;
}

::nds::characteristics::types::DividerType CharacsRoadRangeAttributeValue::getDividerType() const
{
    return m_objectChoice.get<::nds::characteristics::types::DividerType>();
}

void CharacsRoadRangeAttributeValue::setDividerType(::nds::characteristics::types::DividerType dividerType_)
{
    m_objectChoice = dividerType_;
}

::nds::characteristics::types::GradeType CharacsRoadRangeAttributeValue::getGradeType() const
{
    return m_objectChoice.get<::nds::characteristics::types::GradeType>();
}

void CharacsRoadRangeAttributeValue::setGradeType(::nds::characteristics::types::GradeType gradeType_)
{
    m_objectChoice = gradeType_;
}

::nds::characteristics::types::Stubble& CharacsRoadRangeAttributeValue::getStubble()
{
    return m_objectChoice.get<::nds::characteristics::types::Stubble>();
}

const ::nds::characteristics::types::Stubble& CharacsRoadRangeAttributeValue::getStubble() const
{
    return m_objectChoice.get<::nds::characteristics::types::Stubble>();
}

void CharacsRoadRangeAttributeValue::setStubble(const ::nds::characteristics::types::Stubble& stubble_)
{
    m_objectChoice = stubble_;
}

void CharacsRoadRangeAttributeValue::setStubble(::nds::characteristics::types::Stubble&& stubble_)
{
    m_objectChoice = ::std::move(stubble_);
}

::nds::characteristics::types::RailwayCrossing CharacsRoadRangeAttributeValue::getRailwayCrossing() const
{
    return m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>();
}

void CharacsRoadRangeAttributeValue::setRailwayCrossing(::nds::characteristics::types::RailwayCrossing railwayCrossing_)
{
    m_objectChoice = railwayCrossing_;
}

::nds::characteristics::types::PedestrianCrossing& CharacsRoadRangeAttributeValue::getPedestrianCrossing()
{
    return m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>();
}

const ::nds::characteristics::types::PedestrianCrossing& CharacsRoadRangeAttributeValue::getPedestrianCrossing() const
{
    return m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>();
}

void CharacsRoadRangeAttributeValue::setPedestrianCrossing(const ::nds::characteristics::types::PedestrianCrossing& pedestrianCrossing_)
{
    m_objectChoice = pedestrianCrossing_;
}

void CharacsRoadRangeAttributeValue::setPedestrianCrossing(::nds::characteristics::types::PedestrianCrossing&& pedestrianCrossing_)
{
    m_objectChoice = ::std::move(pedestrianCrossing_);
}

::nds::characteristics::types::TrafficCalming CharacsRoadRangeAttributeValue::getTrafficCalming() const
{
    return m_objectChoice.get<::nds::characteristics::types::TrafficCalming>();
}

void CharacsRoadRangeAttributeValue::setTrafficCalming(::nds::characteristics::types::TrafficCalming trafficCalming_)
{
    m_objectChoice = trafficCalming_;
}

::nds::characteristics::types::MovableBridge& CharacsRoadRangeAttributeValue::getMovableBridge()
{
    return m_objectChoice.get<::nds::characteristics::types::MovableBridge>();
}

const ::nds::characteristics::types::MovableBridge& CharacsRoadRangeAttributeValue::getMovableBridge() const
{
    return m_objectChoice.get<::nds::characteristics::types::MovableBridge>();
}

void CharacsRoadRangeAttributeValue::setMovableBridge(const ::nds::characteristics::types::MovableBridge& movableBridge_)
{
    m_objectChoice = movableBridge_;
}

void CharacsRoadRangeAttributeValue::setMovableBridge(::nds::characteristics::types::MovableBridge&& movableBridge_)
{
    m_objectChoice = ::std::move(movableBridge_);
}

::nds::characteristics::types::SuperElevationClass CharacsRoadRangeAttributeValue::getSuperElevation() const
{
    return m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>();
}

void CharacsRoadRangeAttributeValue::setSuperElevation(::nds::characteristics::types::SuperElevationClass superElevation_)
{
    m_objectChoice = superElevation_;
}

::nds::characteristics::types::RoadMedian& CharacsRoadRangeAttributeValue::getRoadMedian()
{
    return m_objectChoice.get<::nds::characteristics::types::RoadMedian>();
}

const ::nds::characteristics::types::RoadMedian& CharacsRoadRangeAttributeValue::getRoadMedian() const
{
    return m_objectChoice.get<::nds::characteristics::types::RoadMedian>();
}

void CharacsRoadRangeAttributeValue::setRoadMedian(const ::nds::characteristics::types::RoadMedian& roadMedian_)
{
    m_objectChoice = roadMedian_;
}

void CharacsRoadRangeAttributeValue::setRoadMedian(::nds::characteristics::types::RoadMedian&& roadMedian_)
{
    m_objectChoice = ::std::move(roadMedian_);
}

::nds::characteristics::types::HasSidewalk& CharacsRoadRangeAttributeValue::getHasSidewalk()
{
    return m_objectChoice.get<::nds::characteristics::types::HasSidewalk>();
}

const ::nds::characteristics::types::HasSidewalk& CharacsRoadRangeAttributeValue::getHasSidewalk() const
{
    return m_objectChoice.get<::nds::characteristics::types::HasSidewalk>();
}

void CharacsRoadRangeAttributeValue::setHasSidewalk(const ::nds::characteristics::types::HasSidewalk& hasSidewalk_)
{
    m_objectChoice = hasSidewalk_;
}

void CharacsRoadRangeAttributeValue::setHasSidewalk(::nds::characteristics::types::HasSidewalk&& hasSidewalk_)
{
    m_objectChoice = ::std::move(hasSidewalk_);
}

::nds::characteristics::types::FrictionCoefficient CharacsRoadRangeAttributeValue::getFrictionCoefficient() const
{
    return m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>();
}

void CharacsRoadRangeAttributeValue::setFrictionCoefficient(::nds::characteristics::types::FrictionCoefficient frictionCoefficient_)
{
    m_objectChoice = frictionCoefficient_;
}

::nds::characteristics::types::StationPlazaType CharacsRoadRangeAttributeValue::getStationPlazaType() const
{
    return m_objectChoice.get<::nds::characteristics::types::StationPlazaType>();
}

void CharacsRoadRangeAttributeValue::setStationPlazaType(::nds::characteristics::types::StationPlazaType stationPlazaType_)
{
    m_objectChoice = stationPlazaType_;
}

::nds::characteristics::types::DividerType CharacsRoadRangeAttributeValue::getMiddleDividerType() const
{
    return m_objectChoice.get<::nds::characteristics::types::DividerType>();
}

void CharacsRoadRangeAttributeValue::setMiddleDividerType(::nds::characteristics::types::DividerType middleDividerType_)
{
    m_objectChoice = middleDividerType_;
}

::nds::core::types::SpeedKmh CharacsRoadRangeAttributeValue::getAverageSpeed() const
{
    return m_objectChoice.get<::nds::core::types::SpeedKmh>();
}

void CharacsRoadRangeAttributeValue::setAverageSpeed(::nds::core::types::SpeedKmh averageSpeed_)
{
    m_objectChoice = averageSpeed_;
}

::nds::core::types::FunctionalRoadClass CharacsRoadRangeAttributeValue::getFunctionalRoadClass() const
{
    return m_objectChoice.get<::nds::core::types::FunctionalRoadClass>();
}

void CharacsRoadRangeAttributeValue::setFunctionalRoadClass(::nds::core::types::FunctionalRoadClass functionalRoadClass_)
{
    m_objectChoice = functionalRoadClass_;
}

::nds::core::types::PriorityRoadClass CharacsRoadRangeAttributeValue::getPriorityRoadClass() const
{
    return m_objectChoice.get<::nds::core::types::PriorityRoadClass>();
}

void CharacsRoadRangeAttributeValue::setPriorityRoadClass(::nds::core::types::PriorityRoadClass priorityRoadClass_)
{
    m_objectChoice = priorityRoadClass_;
}

::nds::core::types::RoadType& CharacsRoadRangeAttributeValue::getRoadType()
{
    return m_objectChoice.get<::nds::core::types::RoadType>();
}

const ::nds::core::types::RoadType& CharacsRoadRangeAttributeValue::getRoadType() const
{
    return m_objectChoice.get<::nds::core::types::RoadType>();
}

void CharacsRoadRangeAttributeValue::setRoadType(const ::nds::core::types::RoadType& roadType_)
{
    m_objectChoice = roadType_;
}

void CharacsRoadRangeAttributeValue::setRoadType(::nds::core::types::RoadType&& roadType_)
{
    m_objectChoice = ::std::move(roadType_);
}

::nds::characteristics::types::MultiDigitizedRoadReference& CharacsRoadRangeAttributeValue::getMultiDigitizedRoadReference()
{
    return m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>();
}

const ::nds::characteristics::types::MultiDigitizedRoadReference& CharacsRoadRangeAttributeValue::getMultiDigitizedRoadReference() const
{
    return m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>();
}

void CharacsRoadRangeAttributeValue::setMultiDigitizedRoadReference(const ::nds::characteristics::types::MultiDigitizedRoadReference& multiDigitizedRoadReference_)
{
    m_objectChoice = multiDigitizedRoadReference_;
}

void CharacsRoadRangeAttributeValue::setMultiDigitizedRoadReference(::nds::characteristics::types::MultiDigitizedRoadReference&& multiDigitizedRoadReference_)
{
    m_objectChoice = ::std::move(multiDigitizedRoadReference_);
}

::nds::characteristics::types::NumLanes CharacsRoadRangeAttributeValue::getNumLanes() const
{
    return m_objectChoice.get<::nds::characteristics::types::NumLanes>();
}

void CharacsRoadRangeAttributeValue::setNumLanes(::nds::characteristics::types::NumLanes numLanes_)
{
    m_objectChoice = numLanes_;
}

::nds::characteristics::types::ComplexIntersectionType CharacsRoadRangeAttributeValue::getComplexIntersectionType() const
{
    return m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>();
}

void CharacsRoadRangeAttributeValue::setComplexIntersectionType(::nds::characteristics::types::ComplexIntersectionType complexIntersectionType_)
{
    m_objectChoice = complexIntersectionType_;
}

::nds::characteristics::types::StartOrDestinationRoadOnly& CharacsRoadRangeAttributeValue::getStartOrDestinationRoadOnly()
{
    return m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>();
}

const ::nds::characteristics::types::StartOrDestinationRoadOnly& CharacsRoadRangeAttributeValue::getStartOrDestinationRoadOnly() const
{
    return m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>();
}

void CharacsRoadRangeAttributeValue::setStartOrDestinationRoadOnly(const ::nds::characteristics::types::StartOrDestinationRoadOnly& startOrDestinationRoadOnly_)
{
    m_objectChoice = startOrDestinationRoadOnly_;
}

void CharacsRoadRangeAttributeValue::setStartOrDestinationRoadOnly(::nds::characteristics::types::StartOrDestinationRoadOnly&& startOrDestinationRoadOnly_)
{
    m_objectChoice = ::std::move(startOrDestinationRoadOnly_);
}

::nds::characteristics::types::RoadLocationAssignment& CharacsRoadRangeAttributeValue::getRoadLocationId()
{
    return m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>();
}

const ::nds::characteristics::types::RoadLocationAssignment& CharacsRoadRangeAttributeValue::getRoadLocationId() const
{
    return m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>();
}

void CharacsRoadRangeAttributeValue::setRoadLocationId(const ::nds::characteristics::types::RoadLocationAssignment& roadLocationId_)
{
    m_objectChoice = roadLocationId_;
}

void CharacsRoadRangeAttributeValue::setRoadLocationId(::nds::characteristics::types::RoadLocationAssignment&& roadLocationId_)
{
    m_objectChoice = ::std::move(roadLocationId_);
}

::nds::characteristics::types::HasStreetLights& CharacsRoadRangeAttributeValue::getHasStreetLights()
{
    return m_objectChoice.get<::nds::characteristics::types::HasStreetLights>();
}

const ::nds::characteristics::types::HasStreetLights& CharacsRoadRangeAttributeValue::getHasStreetLights() const
{
    return m_objectChoice.get<::nds::characteristics::types::HasStreetLights>();
}

void CharacsRoadRangeAttributeValue::setHasStreetLights(const ::nds::characteristics::types::HasStreetLights& hasStreetLights_)
{
    m_objectChoice = hasStreetLights_;
}

void CharacsRoadRangeAttributeValue::setHasStreetLights(::nds::characteristics::types::HasStreetLights&& hasStreetLights_)
{
    m_objectChoice = ::std::move(hasStreetLights_);
}

::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& CharacsRoadRangeAttributeValue::getSharedRoadSurfaceWithPedestrians()
{
    return m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>();
}

const ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& CharacsRoadRangeAttributeValue::getSharedRoadSurfaceWithPedestrians() const
{
    return m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>();
}

void CharacsRoadRangeAttributeValue::setSharedRoadSurfaceWithPedestrians(const ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& sharedRoadSurfaceWithPedestrians_)
{
    m_objectChoice = sharedRoadSurfaceWithPedestrians_;
}

void CharacsRoadRangeAttributeValue::setSharedRoadSurfaceWithPedestrians(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians&& sharedRoadSurfaceWithPedestrians_)
{
    m_objectChoice = ::std::move(sharedRoadSurfaceWithPedestrians_);
}

::nds::characteristics::types::InBusinessDistrict& CharacsRoadRangeAttributeValue::getInBusinessDistrict()
{
    return m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>();
}

const ::nds::characteristics::types::InBusinessDistrict& CharacsRoadRangeAttributeValue::getInBusinessDistrict() const
{
    return m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>();
}

void CharacsRoadRangeAttributeValue::setInBusinessDistrict(const ::nds::characteristics::types::InBusinessDistrict& inBusinessDistrict_)
{
    m_objectChoice = inBusinessDistrict_;
}

void CharacsRoadRangeAttributeValue::setInBusinessDistrict(::nds::characteristics::types::InBusinessDistrict&& inBusinessDistrict_)
{
    m_objectChoice = ::std::move(inBusinessDistrict_);
}

::nds::core::types::GlobalSourceId& CharacsRoadRangeAttributeValue::getGlobalSourceId()
{
    return m_objectChoice.get<::nds::core::types::GlobalSourceId>();
}

const ::nds::core::types::GlobalSourceId& CharacsRoadRangeAttributeValue::getGlobalSourceId() const
{
    return m_objectChoice.get<::nds::core::types::GlobalSourceId>();
}

void CharacsRoadRangeAttributeValue::setGlobalSourceId(const ::nds::core::types::GlobalSourceId& globalSourceId_)
{
    m_objectChoice = globalSourceId_;
}

void CharacsRoadRangeAttributeValue::setGlobalSourceId(::nds::core::types::GlobalSourceId&& globalSourceId_)
{
    m_objectChoice = ::std::move(globalSourceId_);
}

CharacsRoadRangeAttributeValue::ChoiceTag CharacsRoadRangeAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return CHOICE_completeCarpoolRoad;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return CHOICE_partialCarpoolRoad;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return CHOICE_metricRoadWidth;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        return CHOICE_pavementType;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        return CHOICE_ferryType;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        return CHOICE_dividerType;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        return CHOICE_gradeType;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        return CHOICE_stubble;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        return CHOICE_railwayCrossing;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        return CHOICE_pedestrianCrossing;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        return CHOICE_trafficCalming;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        return CHOICE_movableBridge;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        return CHOICE_superElevation;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        return CHOICE_roadMedian;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        return CHOICE_hasSidewalk;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        return CHOICE_frictionCoefficient;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        return CHOICE_stationPlazaType;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return CHOICE_middleDividerType;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        return CHOICE_averageSpeed;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return CHOICE_functionalRoadClass;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        return CHOICE_priorityRoadClass;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        return CHOICE_roadType;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        return CHOICE_multiDigitizedRoadReference;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        return CHOICE_numLanes;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return CHOICE_complexIntersectionType;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return CHOICE_startOrDestinationRoadOnly;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        return CHOICE_roadLocationId;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        return CHOICE_hasStreetLights;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return CHOICE_sharedRoadSurfaceWithPedestrians;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        return CHOICE_inBusinessDistrict;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        return CHOICE_globalSourceId;
    default:
        return UNDEFINED_CHOICE;
    }
}

void CharacsRoadRangeAttributeValue::initPackingContext(CharacsRoadRangeAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        context.getMetricRoadWidth().init<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricRoadWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::initPackingContext(context.getPavementType(), m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        ::zserio::initPackingContext(context.getFerryType(), m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        ::zserio::initPackingContext(context.getDividerType(), m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        ::zserio::initPackingContext(context.getGradeType(), m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        ::zserio::initPackingContext(context.getRailwayCrossing(), m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        ::zserio::initPackingContext(context.getTrafficCalming(), m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        ::zserio::initPackingContext(context.getSuperElevation(), m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        m_objectChoice.get<::nds::characteristics::types::RoadMedian>().initPackingContext(context.getRoadMedian());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::initPackingContext(context.getStationPlazaType(), m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        ::zserio::initPackingContext(context.getMiddleDividerType(), m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        context.getAverageSpeed().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        context.getFunctionalRoadClass().init<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        context.getPriorityRoadClass().init<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        m_objectChoice.get<::nds::core::types::RoadType>().initPackingContext(context.getRoadType());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>().initPackingContext(context.getMultiDigitizedRoadReference());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        context.getNumLanes().init<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::NumLanes>>(m_objectChoice.get<::nds::characteristics::types::NumLanes>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::initPackingContext(context.getComplexIntersectionType(), m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initPackingContext(context.getRoadLocationId());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }
}

size_t CharacsRoadRangeAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::Stubble>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MovableBridge>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadMedian>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        endBitPosition += UINT8_C(16);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += UINT8_C(3);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += UINT8_C(4);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::types::RoadType>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::characteristics::types::NumLanes>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsRoadRangeAttributeValue::bitSizeOf(CharacsRoadRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += context.getMetricRoadWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricRoadWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition += ::zserio::bitSizeOf(context.getPavementType(), m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getFerryType(), m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getDividerType(), m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getGradeType(), m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::Stubble>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        endBitPosition += ::zserio::bitSizeOf(context.getRailwayCrossing(), m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        endBitPosition += ::zserio::bitSizeOf(context.getTrafficCalming(), m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MovableBridge>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        endBitPosition += ::zserio::bitSizeOf(context.getSuperElevation(), m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadMedian>().bitSizeOf(context.getRoadMedian(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        endBitPosition += UINT8_C(16);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getStationPlazaType(), m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getMiddleDividerType(), m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += context.getAverageSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += context.getFunctionalRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += context.getPriorityRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::types::RoadType>().bitSizeOf(context.getRoadType(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>().bitSizeOf(context.getMultiDigitizedRoadReference(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        endBitPosition += context.getNumLanes().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::NumLanes>>(m_objectChoice.get<::nds::characteristics::types::NumLanes>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getComplexIntersectionType(), m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().bitSizeOf(context.getRoadLocationId(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsRoadRangeAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::Stubble>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MovableBridge>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadMedian>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        endBitPosition += UINT8_C(16);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += UINT8_C(3);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += UINT8_C(4);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::types::RoadType>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_objectChoice.get<::nds::characteristics::types::NumLanes>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }

    return endBitPosition;
}

size_t CharacsRoadRangeAttributeValue::initializeOffsets(CharacsRoadRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += context.getMetricRoadWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricRoadWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition = ::zserio::initializeOffsets(context.getPavementType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getFerryType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getDividerType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getGradeType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::Stubble>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        endBitPosition = ::zserio::initializeOffsets(context.getRailwayCrossing(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        endBitPosition = ::zserio::initializeOffsets(context.getTrafficCalming(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MovableBridge>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        endBitPosition = ::zserio::initializeOffsets(context.getSuperElevation(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadMedian>().initializeOffsets(context.getRoadMedian(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        endBitPosition += UINT8_C(16);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getStationPlazaType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getMiddleDividerType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += context.getAverageSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += context.getFunctionalRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += context.getPriorityRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::types::RoadType>().initializeOffsets(context.getRoadType(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>().initializeOffsets(context.getMultiDigitizedRoadReference(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        endBitPosition += context.getNumLanes().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::NumLanes>>(m_objectChoice.get<::nds::characteristics::types::NumLanes>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getComplexIntersectionType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initializeOffsets(context.getRoadLocationId(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }

    return endBitPosition;
}

bool CharacsRoadRangeAttributeValue::operator==(const CharacsRoadRangeAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>() == other.m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>() == other.m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>() == other.m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::PavementType>() == other.m_objectChoice.get<::nds::characteristics::types::PavementType>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::FerryType>() == other.m_objectChoice.get<::nds::characteristics::types::FerryType>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::DividerType>() == other.m_objectChoice.get<::nds::characteristics::types::DividerType>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::GradeType>() == other.m_objectChoice.get<::nds::characteristics::types::GradeType>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::Stubble>() == other.m_objectChoice.get<::nds::characteristics::types::Stubble>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>() == other.m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>() == other.m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::TrafficCalming>() == other.m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::MovableBridge>() == other.m_objectChoice.get<::nds::characteristics::types::MovableBridge>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>() == other.m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::RoadMedian>() == other.m_objectChoice.get<::nds::characteristics::types::RoadMedian>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::HasSidewalk>() == other.m_objectChoice.get<::nds::characteristics::types::HasSidewalk>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>() == other.m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StationPlazaType>() == other.m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::DividerType>() == other.m_objectChoice.get<::nds::characteristics::types::DividerType>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::SpeedKmh>() == other.m_objectChoice.get<::nds::core::types::SpeedKmh>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::FunctionalRoadClass>() == other.m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::PriorityRoadClass>() == other.m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::RoadType>() == other.m_objectChoice.get<::nds::core::types::RoadType>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>() == other.m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::NumLanes>() == other.m_objectChoice.get<::nds::characteristics::types::NumLanes>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>() == other.m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>() == other.m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>() == other.m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::HasStreetLights>() == other.m_objectChoice.get<::nds::characteristics::types::HasStreetLights>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>() == other.m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>() == other.m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>());
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::GlobalSourceId>() == other.m_objectChoice.get<::nds::core::types::GlobalSourceId>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }
}

uint32_t CharacsRoadRangeAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::PavementType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::FerryType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::DividerType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::GradeType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::Stubble>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::MovableBridge>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::RoadMedian>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::HasSidewalk>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::DividerType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::SpeedKmh>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::RoadType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::NumLanes>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::HasStreetLights>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>());
            break;
        case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::GlobalSourceId>());
            break;
        default:
            break;
        }
    }

    return result;
}

void CharacsRoadRangeAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        m_objectChoice.get<::nds::characteristics::types::Stubble>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        m_objectChoice.get<::nds::characteristics::types::MovableBridge>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        m_objectChoice.get<::nds::characteristics::types::RoadMedian>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        out.writeFloat16(m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        out.writeBits(m_objectChoice.get<::nds::core::types::SpeedKmh>(), UINT8_C(8));
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        out.writeBits(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>(), UINT8_C(3));
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        out.writeBits(m_objectChoice.get<::nds::core::types::PriorityRoadClass>(), UINT8_C(4));
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        m_objectChoice.get<::nds::core::types::RoadType>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        out.writeVarUInt16(m_objectChoice.get<::nds::characteristics::types::NumLanes>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        out.writeString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }
}

void CharacsRoadRangeAttributeValue::write(CharacsRoadRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        context.getMetricRoadWidth().write<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricRoadWidth>>(out, m_objectChoice.get<::nds::characteristics::types::MetricRoadWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::write(context.getPavementType(), out, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        ::zserio::write(context.getFerryType(), out, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        ::zserio::write(context.getDividerType(), out, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        ::zserio::write(context.getGradeType(), out, m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        m_objectChoice.get<::nds::characteristics::types::Stubble>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        ::zserio::write(context.getRailwayCrossing(), out, m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        ::zserio::write(context.getTrafficCalming(), out, m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        m_objectChoice.get<::nds::characteristics::types::MovableBridge>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        ::zserio::write(context.getSuperElevation(), out, m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        m_objectChoice.get<::nds::characteristics::types::RoadMedian>().write(context.getRoadMedian(), out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        out.writeFloat16(m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::write(context.getStationPlazaType(), out, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        ::zserio::write(context.getMiddleDividerType(), out, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        context.getAverageSpeed().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        context.getFunctionalRoadClass().write<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(out, m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        context.getPriorityRoadClass().write<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(out, m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        m_objectChoice.get<::nds::core::types::RoadType>().write(context.getRoadType(), out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        m_objectChoice.get<::nds::characteristics::types::MultiDigitizedRoadReference>().write(context.getMultiDigitizedRoadReference(), out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        context.getNumLanes().write<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::NumLanes>>(out, m_objectChoice.get<::nds::characteristics::types::NumLanes>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::write(context.getComplexIntersectionType(), out, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().write(context.getRoadLocationId(), out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        out.writeString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsRoadRangeAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::CompleteCarpoolRoad(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::PartialCarpoolRoad(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::characteristics::types::MetricRoadWidth>(in.readVarUInt32()), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::PavementType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::FerryType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::DividerType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::GradeType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::Stubble(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::RailwayCrossing>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::PedestrianCrossing(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::TrafficCalming>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MovableBridge(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::SuperElevationClass>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadMedian(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasSidewalk(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        return ::zserio::AnyHolder<>(static_cast<::nds::characteristics::types::FrictionCoefficient>(in.readFloat16()), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationPlazaType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::DividerType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::FunctionalRoadClass>(in.readBits(UINT8_C(3))), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::PriorityRoadClass>(in.readBits(UINT8_C(4))), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::types::RoadType(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MultiDigitizedRoadReference(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        return ::zserio::AnyHolder<>(static_cast<::nds::characteristics::types::NumLanes>(in.readVarUInt16()), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::ComplexIntersectionType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StartOrDestinationRoadOnly(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadLocationAssignment(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasStreetLights(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::InBusinessDistrict(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsRoadRangeAttributeValue::readObject(CharacsRoadRangeAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::CompleteCarpoolRoad(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::PartialCarpoolRoad(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::AnyHolder<>(context.getMetricRoadWidth().read<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricRoadWidth>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::PavementType>(context.getPavementType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::FerryType>(context.getFerryType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::DividerType>(context.getDividerType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::GradeType>(context.getGradeType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::Stubble(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::RailwayCrossing>(context.getRailwayCrossing(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::PedestrianCrossing(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::TrafficCalming>(context.getTrafficCalming(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MovableBridge(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::SuperElevationClass>(context.getSuperElevation(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadMedian(context.getRoadMedian(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasSidewalk(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        return ::zserio::AnyHolder<>(static_cast<::nds::characteristics::types::FrictionCoefficient>(in.readFloat16()), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationPlazaType>(context.getStationPlazaType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::DividerType>(context.getMiddleDividerType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::AnyHolder<>(context.getAverageSpeed().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::AnyHolder<>(context.getFunctionalRoadClass().read<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::AnyHolder<>(context.getPriorityRoadClass().read<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::types::RoadType(context.getRoadType(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MultiDigitizedRoadReference(context.getMultiDigitizedRoadReference(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        return ::zserio::AnyHolder<>(context.getNumLanes().read<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::NumLanes>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::ComplexIntersectionType>(context.getComplexIntersectionType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StartOrDestinationRoadOnly(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadLocationAssignment(context.getRoadLocationId(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasStreetLights(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::InBusinessDistrict(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsRoadRangeAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::CompleteCarpoolRoad>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::PartialCarpoolRoad>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::MetricRoadWidth>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::PavementType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FERRY_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::FerryType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::DIVIDER_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::DividerType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GRADE_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::GradeType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STUBBLE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::Stubble>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::RAILWAY_CROSSING:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::RailwayCrossing>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PEDESTRIAN_CROSSING:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::PedestrianCrossing>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::TRAFFIC_CALMING:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::TrafficCalming>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::MovableBridge>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SUPERELEVATION:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::SuperElevationClass>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_MEDIAN:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::RoadMedian>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::HasSidewalk>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FRICTION:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::FrictionCoefficient>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StationPlazaType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::DividerType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::SpeedKmh>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::FunctionalRoadClass>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::PriorityRoadClass>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::RoadType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::MULTI_DIGITIZED_ROAD_REFERENCE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::MultiDigitizedRoadReference>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::NUM_LANES:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::NumLanes>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::ComplexIntersectionType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StartOrDestinationRoadOnly>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::RoadLocationAssignment>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::HasStreetLights>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::InBusinessDistrict>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsRoadRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::GlobalSourceId>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsRoadRangeAttributeValue!");
    }
}

} // namespace attributes
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/attributes/CharacsTransitionAttributeValue.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

CharacsTransitionAttributeValue::CharacsTransitionAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

CharacsTransitionAttributeValue::CharacsTransitionAttributeValue(::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsTransitionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

CharacsTransitionAttributeValue::CharacsTransitionAttributeValue(CharacsTransitionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsTransitionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

CharacsTransitionAttributeValue::CharacsTransitionAttributeValue(const CharacsTransitionAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsTransitionAttributeValue& CharacsTransitionAttributeValue::operator=(const CharacsTransitionAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsTransitionAttributeValue::CharacsTransitionAttributeValue(CharacsTransitionAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsTransitionAttributeValue& CharacsTransitionAttributeValue::operator=(CharacsTransitionAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsTransitionAttributeValue::CharacsTransitionAttributeValue(::zserio::PropagateAllocatorT,
        const CharacsTransitionAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void CharacsTransitionAttributeValue::initialize(
        ::nds::characteristics::attributes::CharacsTransitionAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool CharacsTransitionAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::characteristics::attributes::CharacsTransitionAttributeType CharacsTransitionAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'CharacsTransitionAttributeValue' is not initialized!");

    return m_type_;
}

::nds::characteristics::types::IntersectionType CharacsTransitionAttributeValue::getIntersectionType() const
{
    return m_objectChoice.get<::nds::characteristics::types::IntersectionType>();
}

void CharacsTransitionAttributeValue::setIntersectionType(::nds::characteristics::types::IntersectionType intersectionType_)
{
    m_objectChoice = intersectionType_;
}

CharacsTransitionAttributeValue::ChoiceTag CharacsTransitionAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        return CHOICE_intersectionType;
    default:
        return UNDEFINED_CHOICE;
    }
}

void CharacsTransitionAttributeValue::initPackingContext(CharacsTransitionAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        ::zserio::initPackingContext(context.getIntersectionType(), m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }
}

size_t CharacsTransitionAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsTransitionAttributeValue::bitSizeOf(CharacsTransitionAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getIntersectionType(), m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsTransitionAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }

    return endBitPosition;
}

size_t CharacsTransitionAttributeValue::initializeOffsets(CharacsTransitionAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getIntersectionType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }

    return endBitPosition;
}

bool CharacsTransitionAttributeValue::operator==(const CharacsTransitionAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::IntersectionType>() == other.m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }
}

uint32_t CharacsTransitionAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
            break;
        default:
            break;
        }
    }

    return result;
}

void CharacsTransitionAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }
}

void CharacsTransitionAttributeValue::write(CharacsTransitionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        ::zserio::write(context.getIntersectionType(), out, m_objectChoice.get<::nds::characteristics::types::IntersectionType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsTransitionAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::IntersectionType>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsTransitionAttributeValue::readObject(CharacsTransitionAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::IntersectionType>(context.getIntersectionType(), in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsTransitionAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsTransitionAttributeType::INTERSECTION_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::IntersectionType>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsTransitionAttributeValue!");
    }
}

} // namespace attributes
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/attributes/CharacsLanePositionAttributeValue.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

CharacsLanePositionAttributeValue::CharacsLanePositionAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

CharacsLanePositionAttributeValue::CharacsLanePositionAttributeValue(::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsLanePositionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

CharacsLanePositionAttributeValue::CharacsLanePositionAttributeValue(CharacsLanePositionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsLanePositionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

CharacsLanePositionAttributeValue::CharacsLanePositionAttributeValue(const CharacsLanePositionAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsLanePositionAttributeValue& CharacsLanePositionAttributeValue::operator=(const CharacsLanePositionAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsLanePositionAttributeValue::CharacsLanePositionAttributeValue(CharacsLanePositionAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsLanePositionAttributeValue& CharacsLanePositionAttributeValue::operator=(CharacsLanePositionAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsLanePositionAttributeValue::CharacsLanePositionAttributeValue(::zserio::PropagateAllocatorT,
        const CharacsLanePositionAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void CharacsLanePositionAttributeValue::initialize(
        ::nds::characteristics::attributes::CharacsLanePositionAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;

    initializeChildren();
}

bool CharacsLanePositionAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

void CharacsLanePositionAttributeValue::initializeChildren()
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        m_objectChoice.get<::nds::core::geometry::Line3D>().initialize(static_cast<::nds::core::geometry::CoordShift>(0), static_cast<::nds::core::geometry::CoordShift>(0));
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }
}

::nds::characteristics::attributes::CharacsLanePositionAttributeType CharacsLanePositionAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'CharacsLanePositionAttributeValue' is not initialized!");

    return m_type_;
}

::nds::characteristics::types::StopLine& CharacsLanePositionAttributeValue::getStopLine()
{
    return m_objectChoice.get<::nds::characteristics::types::StopLine>();
}

const ::nds::characteristics::types::StopLine& CharacsLanePositionAttributeValue::getStopLine() const
{
    return m_objectChoice.get<::nds::characteristics::types::StopLine>();
}

void CharacsLanePositionAttributeValue::setStopLine(const ::nds::characteristics::types::StopLine& stopLine_)
{
    m_objectChoice = stopLine_;
}

void CharacsLanePositionAttributeValue::setStopLine(::nds::characteristics::types::StopLine&& stopLine_)
{
    m_objectChoice = ::std::move(stopLine_);
}

::nds::core::geometry::Line3D& CharacsLanePositionAttributeValue::getSlowRoadUserCrossing()
{
    return m_objectChoice.get<::nds::core::geometry::Line3D>();
}

const ::nds::core::geometry::Line3D& CharacsLanePositionAttributeValue::getSlowRoadUserCrossing() const
{
    return m_objectChoice.get<::nds::core::geometry::Line3D>();
}

void CharacsLanePositionAttributeValue::setSlowRoadUserCrossing(const ::nds::core::geometry::Line3D& slowRoadUserCrossing_)
{
    m_objectChoice = slowRoadUserCrossing_;
}

void CharacsLanePositionAttributeValue::setSlowRoadUserCrossing(::nds::core::geometry::Line3D&& slowRoadUserCrossing_)
{
    m_objectChoice = ::std::move(slowRoadUserCrossing_);
}

::nds::characteristics::types::WaitingLine& CharacsLanePositionAttributeValue::getWaitingLine()
{
    return m_objectChoice.get<::nds::characteristics::types::WaitingLine>();
}

const ::nds::characteristics::types::WaitingLine& CharacsLanePositionAttributeValue::getWaitingLine() const
{
    return m_objectChoice.get<::nds::characteristics::types::WaitingLine>();
}

void CharacsLanePositionAttributeValue::setWaitingLine(const ::nds::characteristics::types::WaitingLine& waitingLine_)
{
    m_objectChoice = waitingLine_;
}

void CharacsLanePositionAttributeValue::setWaitingLine(::nds::characteristics::types::WaitingLine&& waitingLine_)
{
    m_objectChoice = ::std::move(waitingLine_);
}

::nds::characteristics::types::StationaryObjectType CharacsLanePositionAttributeValue::getStationaryObjectType() const
{
    return m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>();
}

void CharacsLanePositionAttributeValue::setStationaryObjectType(::nds::characteristics::types::StationaryObjectType stationaryObjectType_)
{
    m_objectChoice = stationaryObjectType_;
}

CharacsLanePositionAttributeValue::ChoiceTag CharacsLanePositionAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        return CHOICE_stopLine;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return CHOICE_slowRoadUserCrossing;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        return CHOICE_waitingLine;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        return CHOICE_stationaryObjectType;
    default:
        return UNDEFINED_CHOICE;
    }
}

void CharacsLanePositionAttributeValue::initPackingContext(CharacsLanePositionAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        m_objectChoice.get<::nds::core::geometry::Line3D>().initPackingContext(context.getSlowRoadUserCrossing());
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        ::zserio::initPackingContext(context.getStationaryObjectType(), m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }
}

size_t CharacsLanePositionAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StopLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        endBitPosition += m_objectChoice.get<::nds::core::geometry::Line3D>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::WaitingLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsLanePositionAttributeValue::bitSizeOf(CharacsLanePositionAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StopLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        endBitPosition += m_objectChoice.get<::nds::core::geometry::Line3D>().bitSizeOf(context.getSlowRoadUserCrossing(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::WaitingLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        endBitPosition += ::zserio::bitSizeOf(context.getStationaryObjectType(), m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsLanePositionAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StopLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        endBitPosition = m_objectChoice.get<::nds::core::geometry::Line3D>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::WaitingLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }

    return endBitPosition;
}

size_t CharacsLanePositionAttributeValue::initializeOffsets(CharacsLanePositionAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StopLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        endBitPosition = m_objectChoice.get<::nds::core::geometry::Line3D>().initializeOffsets(context.getSlowRoadUserCrossing(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::WaitingLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        endBitPosition = ::zserio::initializeOffsets(context.getStationaryObjectType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }

    return endBitPosition;
}

bool CharacsLanePositionAttributeValue::operator==(const CharacsLanePositionAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StopLine>() == other.m_objectChoice.get<::nds::characteristics::types::StopLine>());
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::geometry::Line3D>() == other.m_objectChoice.get<::nds::core::geometry::Line3D>());
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::WaitingLine>() == other.m_objectChoice.get<::nds::characteristics::types::WaitingLine>());
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>() == other.m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }
}

uint32_t CharacsLanePositionAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StopLine>());
            break;
        case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::geometry::Line3D>());
            break;
        case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::WaitingLine>());
            break;
        case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
            break;
        default:
            break;
        }
    }

    return result;
}

void CharacsLanePositionAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        m_objectChoice.get<::nds::characteristics::types::StopLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        // check parameters
        if (m_objectChoice.get<::nds::core::geometry::Line3D>().getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field CharacsLanePositionAttributeValue.slowRoadUserCrossing: ") <<
                    m_objectChoice.get<::nds::core::geometry::Line3D>().getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        if (m_objectChoice.get<::nds::core::geometry::Line3D>().getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field CharacsLanePositionAttributeValue.slowRoadUserCrossing: ") <<
                    m_objectChoice.get<::nds::core::geometry::Line3D>().getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_objectChoice.get<::nds::core::geometry::Line3D>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        m_objectChoice.get<::nds::characteristics::types::WaitingLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }
}

void CharacsLanePositionAttributeValue::write(CharacsLanePositionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        m_objectChoice.get<::nds::characteristics::types::StopLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        // check parameters
        if (m_objectChoice.get<::nds::core::geometry::Line3D>().getShiftXY() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftXY for field CharacsLanePositionAttributeValue.slowRoadUserCrossing: ") <<
                    m_objectChoice.get<::nds::core::geometry::Line3D>().getShiftXY() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        if (m_objectChoice.get<::nds::core::geometry::Line3D>().getShiftZ() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter shiftZ for field CharacsLanePositionAttributeValue.slowRoadUserCrossing: ") <<
                    m_objectChoice.get<::nds::core::geometry::Line3D>().getShiftZ() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_objectChoice.get<::nds::core::geometry::Line3D>().write(context.getSlowRoadUserCrossing(), out);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        m_objectChoice.get<::nds::characteristics::types::WaitingLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        ::zserio::write(context.getStationaryObjectType(), out, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsLanePositionAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StopLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return ::zserio::AnyHolder<>(::nds::core::geometry::Line3D(in, static_cast<::nds::core::geometry::CoordShift>(0), static_cast<::nds::core::geometry::CoordShift>(0), allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::WaitingLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationaryObjectType>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsLanePositionAttributeValue::readObject(CharacsLanePositionAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StopLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return ::zserio::AnyHolder<>(::nds::core::geometry::Line3D(context.getSlowRoadUserCrossing(), in, static_cast<::nds::core::geometry::CoordShift>(0), static_cast<::nds::core::geometry::CoordShift>(0), allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::WaitingLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationaryObjectType>(context.getStationaryObjectType(), in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsLanePositionAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STOP_LINE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StopLine>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::SLOW_ROAD_USER_CROSSING:
        return ::zserio::allocatorPropagatingCopy<::nds::core::geometry::Line3D>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::WAITING_LINE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::WaitingLine>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLanePositionAttributeType::STATION:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StationaryObjectType>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLanePositionAttributeValue!");
    }
}

} // namespace attributes
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/attributes/CharacsLaneRangeAttributeValue.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

CharacsLaneRangeAttributeValue::CharacsLaneRangeAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

CharacsLaneRangeAttributeValue::CharacsLaneRangeAttributeValue(::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

CharacsLaneRangeAttributeValue::CharacsLaneRangeAttributeValue(CharacsLaneRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

CharacsLaneRangeAttributeValue::CharacsLaneRangeAttributeValue(const CharacsLaneRangeAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsLaneRangeAttributeValue& CharacsLaneRangeAttributeValue::operator=(const CharacsLaneRangeAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsLaneRangeAttributeValue::CharacsLaneRangeAttributeValue(CharacsLaneRangeAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsLaneRangeAttributeValue& CharacsLaneRangeAttributeValue::operator=(CharacsLaneRangeAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsLaneRangeAttributeValue::CharacsLaneRangeAttributeValue(::zserio::PropagateAllocatorT,
        const CharacsLaneRangeAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void CharacsLaneRangeAttributeValue::initialize(
        ::nds::characteristics::attributes::CharacsLaneRangeAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;

    initializeChildren();
}

bool CharacsLaneRangeAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

void CharacsLaneRangeAttributeValue::initializeChildren()
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>().initializeChildren();
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }
}

::nds::characteristics::attributes::CharacsLaneRangeAttributeType CharacsLaneRangeAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'CharacsLaneRangeAttributeValue' is not initialized!");

    return m_type_;
}

::nds::core::types::LaneType& CharacsLaneRangeAttributeValue::getLaneType()
{
    return m_objectChoice.get<::nds::core::types::LaneType>();
}

const ::nds::core::types::LaneType& CharacsLaneRangeAttributeValue::getLaneType() const
{
    return m_objectChoice.get<::nds::core::types::LaneType>();
}

void CharacsLaneRangeAttributeValue::setLaneType(const ::nds::core::types::LaneType& laneType_)
{
    m_objectChoice = laneType_;
}

void CharacsLaneRangeAttributeValue::setLaneType(::nds::core::types::LaneType&& laneType_)
{
    m_objectChoice = ::std::move(laneType_);
}

::nds::characteristics::types::MetricLaneWidth CharacsLaneRangeAttributeValue::getMetricLaneWidth() const
{
    return m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>();
}

void CharacsLaneRangeAttributeValue::setMetricLaneWidth(::nds::characteristics::types::MetricLaneWidth metricLaneWidth_)
{
    m_objectChoice = metricLaneWidth_;
}

::nds::characteristics::types::PavementType CharacsLaneRangeAttributeValue::getPavementType() const
{
    return m_objectChoice.get<::nds::characteristics::types::PavementType>();
}

void CharacsLaneRangeAttributeValue::setPavementType(::nds::characteristics::types::PavementType pavementType_)
{
    m_objectChoice = pavementType_;
}

::nds::characteristics::types::DividerType CharacsLaneRangeAttributeValue::getDividerType() const
{
    return m_objectChoice.get<::nds::characteristics::types::DividerType>();
}

void CharacsLaneRangeAttributeValue::setDividerType(::nds::characteristics::types::DividerType dividerType_)
{
    m_objectChoice = dividerType_;
}

::nds::characteristics::types::GradeType CharacsLaneRangeAttributeValue::getGradeType() const
{
    return m_objectChoice.get<::nds::characteristics::types::GradeType>();
}

void CharacsLaneRangeAttributeValue::setGradeType(::nds::characteristics::types::GradeType gradeType_)
{
    m_objectChoice = gradeType_;
}

::nds::characteristics::types::RailwayCrossing CharacsLaneRangeAttributeValue::getRailwayCrossing() const
{
    return m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>();
}

void CharacsLaneRangeAttributeValue::setRailwayCrossing(::nds::characteristics::types::RailwayCrossing railwayCrossing_)
{
    m_objectChoice = railwayCrossing_;
}

::nds::characteristics::types::PedestrianCrossing& CharacsLaneRangeAttributeValue::getPedestrianCrossing()
{
    return m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>();
}

const ::nds::characteristics::types::PedestrianCrossing& CharacsLaneRangeAttributeValue::getPedestrianCrossing() const
{
    return m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>();
}

void CharacsLaneRangeAttributeValue::setPedestrianCrossing(const ::nds::characteristics::types::PedestrianCrossing& pedestrianCrossing_)
{
    m_objectChoice = pedestrianCrossing_;
}

void CharacsLaneRangeAttributeValue::setPedestrianCrossing(::nds::characteristics::types::PedestrianCrossing&& pedestrianCrossing_)
{
    m_objectChoice = ::std::move(pedestrianCrossing_);
}

::nds::characteristics::types::TrafficCalming CharacsLaneRangeAttributeValue::getTrafficCalming() const
{
    return m_objectChoice.get<::nds::characteristics::types::TrafficCalming>();
}

void CharacsLaneRangeAttributeValue::setTrafficCalming(::nds::characteristics::types::TrafficCalming trafficCalming_)
{
    m_objectChoice = trafficCalming_;
}

::nds::characteristics::types::MovableBridge& CharacsLaneRangeAttributeValue::getMovableBridge()
{
    return m_objectChoice.get<::nds::characteristics::types::MovableBridge>();
}

const ::nds::characteristics::types::MovableBridge& CharacsLaneRangeAttributeValue::getMovableBridge() const
{
    return m_objectChoice.get<::nds::characteristics::types::MovableBridge>();
}

void CharacsLaneRangeAttributeValue::setMovableBridge(const ::nds::characteristics::types::MovableBridge& movableBridge_)
{
    m_objectChoice = movableBridge_;
}

void CharacsLaneRangeAttributeValue::setMovableBridge(::nds::characteristics::types::MovableBridge&& movableBridge_)
{
    m_objectChoice = ::std::move(movableBridge_);
}

::nds::characteristics::types::SuperElevationClass CharacsLaneRangeAttributeValue::getSuperElevation() const
{
    return m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>();
}

void CharacsLaneRangeAttributeValue::setSuperElevation(::nds::characteristics::types::SuperElevationClass superElevation_)
{
    m_objectChoice = superElevation_;
}

::nds::characteristics::types::RoadMedian& CharacsLaneRangeAttributeValue::getRoadMedian()
{
    return m_objectChoice.get<::nds::characteristics::types::RoadMedian>();
}

const ::nds::characteristics::types::RoadMedian& CharacsLaneRangeAttributeValue::getRoadMedian() const
{
    return m_objectChoice.get<::nds::characteristics::types::RoadMedian>();
}

void CharacsLaneRangeAttributeValue::setRoadMedian(const ::nds::characteristics::types::RoadMedian& roadMedian_)
{
    m_objectChoice = roadMedian_;
}

void CharacsLaneRangeAttributeValue::setRoadMedian(::nds::characteristics::types::RoadMedian&& roadMedian_)
{
    m_objectChoice = ::std::move(roadMedian_);
}

::nds::characteristics::types::HasSidewalk& CharacsLaneRangeAttributeValue::getHasSidewalk()
{
    return m_objectChoice.get<::nds::characteristics::types::HasSidewalk>();
}

const ::nds::characteristics::types::HasSidewalk& CharacsLaneRangeAttributeValue::getHasSidewalk() const
{
    return m_objectChoice.get<::nds::characteristics::types::HasSidewalk>();
}

void CharacsLaneRangeAttributeValue::setHasSidewalk(const ::nds::characteristics::types::HasSidewalk& hasSidewalk_)
{
    m_objectChoice = hasSidewalk_;
}

void CharacsLaneRangeAttributeValue::setHasSidewalk(::nds::characteristics::types::HasSidewalk&& hasSidewalk_)
{
    m_objectChoice = ::std::move(hasSidewalk_);
}

::nds::characteristics::types::FrictionCoefficient CharacsLaneRangeAttributeValue::getFrictionCoefficient() const
{
    return m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>();
}

void CharacsLaneRangeAttributeValue::setFrictionCoefficient(::nds::characteristics::types::FrictionCoefficient frictionCoefficient_)
{
    m_objectChoice = frictionCoefficient_;
}

::nds::characteristics::types::StationPlazaType CharacsLaneRangeAttributeValue::getStationPlazaType() const
{
    return m_objectChoice.get<::nds::characteristics::types::StationPlazaType>();
}

void CharacsLaneRangeAttributeValue::setStationPlazaType(::nds::characteristics::types::StationPlazaType stationPlazaType_)
{
    m_objectChoice = stationPlazaType_;
}

::nds::core::types::SpeedKmh CharacsLaneRangeAttributeValue::getAverageSpeed() const
{
    return m_objectChoice.get<::nds::core::types::SpeedKmh>();
}

void CharacsLaneRangeAttributeValue::setAverageSpeed(::nds::core::types::SpeedKmh averageSpeed_)
{
    m_objectChoice = averageSpeed_;
}

::nds::core::types::FunctionalRoadClass CharacsLaneRangeAttributeValue::getFunctionalRoadClass() const
{
    return m_objectChoice.get<::nds::core::types::FunctionalRoadClass>();
}

void CharacsLaneRangeAttributeValue::setFunctionalRoadClass(::nds::core::types::FunctionalRoadClass functionalRoadClass_)
{
    m_objectChoice = functionalRoadClass_;
}

::nds::core::types::PriorityRoadClass CharacsLaneRangeAttributeValue::getPriorityRoadClass() const
{
    return m_objectChoice.get<::nds::core::types::PriorityRoadClass>();
}

void CharacsLaneRangeAttributeValue::setPriorityRoadClass(::nds::core::types::PriorityRoadClass priorityRoadClass_)
{
    m_objectChoice = priorityRoadClass_;
}

::nds::characteristics::types::LaneWidthState CharacsLaneRangeAttributeValue::getLaneWidthState() const
{
    return m_objectChoice.get<::nds::characteristics::types::LaneWidthState>();
}

void CharacsLaneRangeAttributeValue::setLaneWidthState(::nds::characteristics::types::LaneWidthState laneWidthState_)
{
    m_objectChoice = laneWidthState_;
}

::nds::characteristics::types::ComplexIntersectionType CharacsLaneRangeAttributeValue::getComplexIntersectionType() const
{
    return m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>();
}

void CharacsLaneRangeAttributeValue::setComplexIntersectionType(::nds::characteristics::types::ComplexIntersectionType complexIntersectionType_)
{
    m_objectChoice = complexIntersectionType_;
}

::nds::characteristics::types::StartOrDestinationRoadOnly& CharacsLaneRangeAttributeValue::getStartOrDestinationRoadOnly()
{
    return m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>();
}

const ::nds::characteristics::types::StartOrDestinationRoadOnly& CharacsLaneRangeAttributeValue::getStartOrDestinationRoadOnly() const
{
    return m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>();
}

void CharacsLaneRangeAttributeValue::setStartOrDestinationRoadOnly(const ::nds::characteristics::types::StartOrDestinationRoadOnly& startOrDestinationRoadOnly_)
{
    m_objectChoice = startOrDestinationRoadOnly_;
}

void CharacsLaneRangeAttributeValue::setStartOrDestinationRoadOnly(::nds::characteristics::types::StartOrDestinationRoadOnly&& startOrDestinationRoadOnly_)
{
    m_objectChoice = ::std::move(startOrDestinationRoadOnly_);
}

::nds::characteristics::types::RoadLocationAssignment& CharacsLaneRangeAttributeValue::getRoadLocationId()
{
    return m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>();
}

const ::nds::characteristics::types::RoadLocationAssignment& CharacsLaneRangeAttributeValue::getRoadLocationId() const
{
    return m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>();
}

void CharacsLaneRangeAttributeValue::setRoadLocationId(const ::nds::characteristics::types::RoadLocationAssignment& roadLocationId_)
{
    m_objectChoice = roadLocationId_;
}

void CharacsLaneRangeAttributeValue::setRoadLocationId(::nds::characteristics::types::RoadLocationAssignment&& roadLocationId_)
{
    m_objectChoice = ::std::move(roadLocationId_);
}

::nds::characteristics::types::HasStreetLights& CharacsLaneRangeAttributeValue::getHasStreetLights()
{
    return m_objectChoice.get<::nds::characteristics::types::HasStreetLights>();
}

const ::nds::characteristics::types::HasStreetLights& CharacsLaneRangeAttributeValue::getHasStreetLights() const
{
    return m_objectChoice.get<::nds::characteristics::types::HasStreetLights>();
}

void CharacsLaneRangeAttributeValue::setHasStreetLights(const ::nds::characteristics::types::HasStreetLights& hasStreetLights_)
{
    m_objectChoice = hasStreetLights_;
}

void CharacsLaneRangeAttributeValue::setHasStreetLights(::nds::characteristics::types::HasStreetLights&& hasStreetLights_)
{
    m_objectChoice = ::std::move(hasStreetLights_);
}

::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& CharacsLaneRangeAttributeValue::getSharedRoadSurfaceWithPedestrians()
{
    return m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>();
}

const ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& CharacsLaneRangeAttributeValue::getSharedRoadSurfaceWithPedestrians() const
{
    return m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>();
}

void CharacsLaneRangeAttributeValue::setSharedRoadSurfaceWithPedestrians(const ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& sharedRoadSurfaceWithPedestrians_)
{
    m_objectChoice = sharedRoadSurfaceWithPedestrians_;
}

void CharacsLaneRangeAttributeValue::setSharedRoadSurfaceWithPedestrians(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians&& sharedRoadSurfaceWithPedestrians_)
{
    m_objectChoice = ::std::move(sharedRoadSurfaceWithPedestrians_);
}

::nds::characteristics::types::InBusinessDistrict& CharacsLaneRangeAttributeValue::getInBusinessDistrict()
{
    return m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>();
}

const ::nds::characteristics::types::InBusinessDistrict& CharacsLaneRangeAttributeValue::getInBusinessDistrict() const
{
    return m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>();
}

void CharacsLaneRangeAttributeValue::setInBusinessDistrict(const ::nds::characteristics::types::InBusinessDistrict& inBusinessDistrict_)
{
    m_objectChoice = inBusinessDistrict_;
}

void CharacsLaneRangeAttributeValue::setInBusinessDistrict(::nds::characteristics::types::InBusinessDistrict&& inBusinessDistrict_)
{
    m_objectChoice = ::std::move(inBusinessDistrict_);
}

::nds::characteristics::types::FerryType CharacsLaneRangeAttributeValue::getFerryType() const
{
    return m_objectChoice.get<::nds::characteristics::types::FerryType>();
}

void CharacsLaneRangeAttributeValue::setFerryType(::nds::characteristics::types::FerryType ferryType_)
{
    m_objectChoice = ferryType_;
}

::nds::characteristics::types::Stubble& CharacsLaneRangeAttributeValue::getStubble()
{
    return m_objectChoice.get<::nds::characteristics::types::Stubble>();
}

const ::nds::characteristics::types::Stubble& CharacsLaneRangeAttributeValue::getStubble() const
{
    return m_objectChoice.get<::nds::characteristics::types::Stubble>();
}

void CharacsLaneRangeAttributeValue::setStubble(const ::nds::characteristics::types::Stubble& stubble_)
{
    m_objectChoice = stubble_;
}

void CharacsLaneRangeAttributeValue::setStubble(::nds::characteristics::types::Stubble&& stubble_)
{
    m_objectChoice = ::std::move(stubble_);
}

::nds::characteristics::types::DividerType CharacsLaneRangeAttributeValue::getMiddleDividerType() const
{
    return m_objectChoice.get<::nds::characteristics::types::DividerType>();
}

void CharacsLaneRangeAttributeValue::setMiddleDividerType(::nds::characteristics::types::DividerType middleDividerType_)
{
    m_objectChoice = middleDividerType_;
}

::nds::characteristics::types::MultiDigitizedLaneGroupReference& CharacsLaneRangeAttributeValue::getMultiDigitizedLaneGroupReference()
{
    return m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>();
}

const ::nds::characteristics::types::MultiDigitizedLaneGroupReference& CharacsLaneRangeAttributeValue::getMultiDigitizedLaneGroupReference() const
{
    return m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>();
}

void CharacsLaneRangeAttributeValue::setMultiDigitizedLaneGroupReference(const ::nds::characteristics::types::MultiDigitizedLaneGroupReference& multiDigitizedLaneGroupReference_)
{
    m_objectChoice = multiDigitizedLaneGroupReference_;
}

void CharacsLaneRangeAttributeValue::setMultiDigitizedLaneGroupReference(::nds::characteristics::types::MultiDigitizedLaneGroupReference&& multiDigitizedLaneGroupReference_)
{
    m_objectChoice = ::std::move(multiDigitizedLaneGroupReference_);
}

::nds::core::types::GlobalSourceId& CharacsLaneRangeAttributeValue::getGlobalSourceId()
{
    return m_objectChoice.get<::nds::core::types::GlobalSourceId>();
}

const ::nds::core::types::GlobalSourceId& CharacsLaneRangeAttributeValue::getGlobalSourceId() const
{
    return m_objectChoice.get<::nds::core::types::GlobalSourceId>();
}

void CharacsLaneRangeAttributeValue::setGlobalSourceId(const ::nds::core::types::GlobalSourceId& globalSourceId_)
{
    m_objectChoice = globalSourceId_;
}

void CharacsLaneRangeAttributeValue::setGlobalSourceId(::nds::core::types::GlobalSourceId&& globalSourceId_)
{
    m_objectChoice = ::std::move(globalSourceId_);
}

CharacsLaneRangeAttributeValue::ChoiceTag CharacsLaneRangeAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        return CHOICE_laneType;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return CHOICE_metricLaneWidth;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        return CHOICE_pavementType;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        return CHOICE_dividerType;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        return CHOICE_gradeType;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        return CHOICE_railwayCrossing;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        return CHOICE_pedestrianCrossing;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        return CHOICE_trafficCalming;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        return CHOICE_movableBridge;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        return CHOICE_superElevation;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        return CHOICE_roadMedian;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        return CHOICE_hasSidewalk;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        return CHOICE_frictionCoefficient;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        return CHOICE_stationPlazaType;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        return CHOICE_averageSpeed;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return CHOICE_functionalRoadClass;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        return CHOICE_priorityRoadClass;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        return CHOICE_laneWidthState;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return CHOICE_complexIntersectionType;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return CHOICE_startOrDestinationRoadOnly;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        return CHOICE_roadLocationId;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        return CHOICE_hasStreetLights;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return CHOICE_sharedRoadSurfaceWithPedestrians;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        return CHOICE_inBusinessDistrict;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        return CHOICE_ferryType;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        return CHOICE_stubble;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return CHOICE_middleDividerType;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        return CHOICE_multiDigitizedLaneGroupReference;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        return CHOICE_globalSourceId;
    default:
        return UNDEFINED_CHOICE;
    }
}

void CharacsLaneRangeAttributeValue::initPackingContext(CharacsLaneRangeAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        m_objectChoice.get<::nds::core::types::LaneType>().initPackingContext(context.getLaneType());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        context.getMetricLaneWidth().init<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::initPackingContext(context.getPavementType(), m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        ::zserio::initPackingContext(context.getDividerType(), m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        ::zserio::initPackingContext(context.getGradeType(), m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        ::zserio::initPackingContext(context.getRailwayCrossing(), m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        ::zserio::initPackingContext(context.getTrafficCalming(), m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        ::zserio::initPackingContext(context.getSuperElevation(), m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        m_objectChoice.get<::nds::characteristics::types::RoadMedian>().initPackingContext(context.getRoadMedian());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::initPackingContext(context.getStationPlazaType(), m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        context.getAverageSpeed().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        context.getFunctionalRoadClass().init<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        context.getPriorityRoadClass().init<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        ::zserio::initPackingContext(context.getLaneWidthState(), m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::initPackingContext(context.getComplexIntersectionType(), m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initPackingContext(context.getRoadLocationId());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        ::zserio::initPackingContext(context.getFerryType(), m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        ::zserio::initPackingContext(context.getMiddleDividerType(), m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>().initPackingContext(context.getMultiDigitizedLaneGroupReference());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }
}

size_t CharacsLaneRangeAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::types::LaneType>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MovableBridge>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadMedian>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        endBitPosition += UINT8_C(16);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += UINT8_C(3);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += UINT8_C(4);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::Stubble>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsLaneRangeAttributeValue::bitSizeOf(CharacsLaneRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::types::LaneType>().bitSizeOf(context.getLaneType(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += context.getMetricLaneWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition += ::zserio::bitSizeOf(context.getPavementType(), m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getDividerType(), m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getGradeType(), m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        endBitPosition += ::zserio::bitSizeOf(context.getRailwayCrossing(), m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        endBitPosition += ::zserio::bitSizeOf(context.getTrafficCalming(), m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MovableBridge>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        endBitPosition += ::zserio::bitSizeOf(context.getSuperElevation(), m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadMedian>().bitSizeOf(context.getRoadMedian(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        endBitPosition += UINT8_C(16);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getStationPlazaType(), m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += context.getAverageSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += context.getFunctionalRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += context.getPriorityRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        endBitPosition += ::zserio::bitSizeOf(context.getLaneWidthState(), m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getComplexIntersectionType(), m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().bitSizeOf(context.getRoadLocationId(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getFerryType(), m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::Stubble>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getMiddleDividerType(), m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>().bitSizeOf(context.getMultiDigitizedLaneGroupReference(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsLaneRangeAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::types::LaneType>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MovableBridge>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadMedian>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        endBitPosition += UINT8_C(16);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += UINT8_C(3);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += UINT8_C(4);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::Stubble>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }

    return endBitPosition;
}

size_t CharacsLaneRangeAttributeValue::initializeOffsets(CharacsLaneRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::types::LaneType>().initializeOffsets(context.getLaneType(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += context.getMetricLaneWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition = ::zserio::initializeOffsets(context.getPavementType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getDividerType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getGradeType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        endBitPosition = ::zserio::initializeOffsets(context.getRailwayCrossing(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        endBitPosition = ::zserio::initializeOffsets(context.getTrafficCalming(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MovableBridge>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        endBitPosition = ::zserio::initializeOffsets(context.getSuperElevation(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadMedian>().initializeOffsets(context.getRoadMedian(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        endBitPosition += UINT8_C(16);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getStationPlazaType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += context.getAverageSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += context.getFunctionalRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += context.getPriorityRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        endBitPosition = ::zserio::initializeOffsets(context.getLaneWidthState(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getComplexIntersectionType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initializeOffsets(context.getRoadLocationId(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getFerryType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::Stubble>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getMiddleDividerType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>().initializeOffsets(context.getMultiDigitizedLaneGroupReference(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }

    return endBitPosition;
}

bool CharacsLaneRangeAttributeValue::operator==(const CharacsLaneRangeAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::LaneType>() == other.m_objectChoice.get<::nds::core::types::LaneType>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>() == other.m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::PavementType>() == other.m_objectChoice.get<::nds::characteristics::types::PavementType>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::DividerType>() == other.m_objectChoice.get<::nds::characteristics::types::DividerType>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::GradeType>() == other.m_objectChoice.get<::nds::characteristics::types::GradeType>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>() == other.m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>() == other.m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::TrafficCalming>() == other.m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::MovableBridge>() == other.m_objectChoice.get<::nds::characteristics::types::MovableBridge>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>() == other.m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::RoadMedian>() == other.m_objectChoice.get<::nds::characteristics::types::RoadMedian>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::HasSidewalk>() == other.m_objectChoice.get<::nds::characteristics::types::HasSidewalk>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>() == other.m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StationPlazaType>() == other.m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::SpeedKmh>() == other.m_objectChoice.get<::nds::core::types::SpeedKmh>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::FunctionalRoadClass>() == other.m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::PriorityRoadClass>() == other.m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::LaneWidthState>() == other.m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>() == other.m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>() == other.m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>() == other.m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::HasStreetLights>() == other.m_objectChoice.get<::nds::characteristics::types::HasStreetLights>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>() == other.m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>() == other.m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::FerryType>() == other.m_objectChoice.get<::nds::characteristics::types::FerryType>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::Stubble>() == other.m_objectChoice.get<::nds::characteristics::types::Stubble>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::DividerType>() == other.m_objectChoice.get<::nds::characteristics::types::DividerType>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>() == other.m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>());
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::GlobalSourceId>() == other.m_objectChoice.get<::nds::core::types::GlobalSourceId>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }
}

uint32_t CharacsLaneRangeAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::LaneType>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::PavementType>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::DividerType>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::GradeType>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::MovableBridge>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::RoadMedian>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::HasSidewalk>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::SpeedKmh>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::HasStreetLights>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::FerryType>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::Stubble>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::DividerType>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>());
            break;
        case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::GlobalSourceId>());
            break;
        default:
            break;
        }
    }

    return result;
}

void CharacsLaneRangeAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        m_objectChoice.get<::nds::core::types::LaneType>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        m_objectChoice.get<::nds::characteristics::types::MovableBridge>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        m_objectChoice.get<::nds::characteristics::types::RoadMedian>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        out.writeFloat16(m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        out.writeBits(m_objectChoice.get<::nds::core::types::SpeedKmh>(), UINT8_C(8));
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        out.writeBits(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>(), UINT8_C(3));
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        out.writeBits(m_objectChoice.get<::nds::core::types::PriorityRoadClass>(), UINT8_C(4));
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        m_objectChoice.get<::nds::characteristics::types::Stubble>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        out.writeString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }
}

void CharacsLaneRangeAttributeValue::write(CharacsLaneRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        m_objectChoice.get<::nds::core::types::LaneType>().write(context.getLaneType(), out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        context.getMetricLaneWidth().write<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(out, m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::write(context.getPavementType(), out, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        ::zserio::write(context.getDividerType(), out, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        ::zserio::write(context.getGradeType(), out, m_objectChoice.get<::nds::characteristics::types::GradeType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        ::zserio::write(context.getRailwayCrossing(), out, m_objectChoice.get<::nds::characteristics::types::RailwayCrossing>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        m_objectChoice.get<::nds::characteristics::types::PedestrianCrossing>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        ::zserio::write(context.getTrafficCalming(), out, m_objectChoice.get<::nds::characteristics::types::TrafficCalming>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        m_objectChoice.get<::nds::characteristics::types::MovableBridge>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        ::zserio::write(context.getSuperElevation(), out, m_objectChoice.get<::nds::characteristics::types::SuperElevationClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        m_objectChoice.get<::nds::characteristics::types::RoadMedian>().write(context.getRoadMedian(), out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        out.writeFloat16(m_objectChoice.get<::nds::characteristics::types::FrictionCoefficient>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::write(context.getStationPlazaType(), out, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        context.getAverageSpeed().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        context.getFunctionalRoadClass().write<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(out, m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        context.getPriorityRoadClass().write<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(out, m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        ::zserio::write(context.getLaneWidthState(), out, m_objectChoice.get<::nds::characteristics::types::LaneWidthState>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::write(context.getComplexIntersectionType(), out, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        m_objectChoice.get<::nds::characteristics::types::StartOrDestinationRoadOnly>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().write(context.getRoadLocationId(), out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        ::zserio::write(context.getFerryType(), out, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        m_objectChoice.get<::nds::characteristics::types::Stubble>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        ::zserio::write(context.getMiddleDividerType(), out, m_objectChoice.get<::nds::characteristics::types::DividerType>());
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        m_objectChoice.get<::nds::characteristics::types::MultiDigitizedLaneGroupReference>().write(context.getMultiDigitizedLaneGroupReference(), out);
        break;
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        out.writeString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsLaneRangeAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::types::LaneType(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::characteristics::types::MetricLaneWidth>(in.readVarUInt32()), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::PavementType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::DividerType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::GradeType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::RailwayCrossing>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::PedestrianCrossing(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::TrafficCalming>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MovableBridge(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::SuperElevationClass>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadMedian(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasSidewalk(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        return ::zserio::AnyHolder<>(static_cast<::nds::characteristics::types::FrictionCoefficient>(in.readFloat16()), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationPlazaType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::FunctionalRoadClass>(in.readBits(UINT8_C(3))), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::PriorityRoadClass>(in.readBits(UINT8_C(4))), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::LaneWidthState>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::ComplexIntersectionType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StartOrDestinationRoadOnly(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadLocationAssignment(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasStreetLights(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::InBusinessDistrict(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::FerryType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::Stubble(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::DividerType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MultiDigitizedLaneGroupReference(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsLaneRangeAttributeValue::readObject(CharacsLaneRangeAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::types::LaneType(context.getLaneType(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::AnyHolder<>(context.getMetricLaneWidth().read<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::PavementType>(context.getPavementType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::DividerType>(context.getDividerType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::GradeType>(context.getGradeType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::RailwayCrossing>(context.getRailwayCrossing(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::PedestrianCrossing(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::TrafficCalming>(context.getTrafficCalming(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MovableBridge(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::SuperElevationClass>(context.getSuperElevation(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadMedian(context.getRoadMedian(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasSidewalk(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        return ::zserio::AnyHolder<>(static_cast<::nds::characteristics::types::FrictionCoefficient>(in.readFloat16()), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationPlazaType>(context.getStationPlazaType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::AnyHolder<>(context.getAverageSpeed().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::AnyHolder<>(context.getFunctionalRoadClass().read<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::AnyHolder<>(context.getPriorityRoadClass().read<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::LaneWidthState>(context.getLaneWidthState(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::ComplexIntersectionType>(context.getComplexIntersectionType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StartOrDestinationRoadOnly(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadLocationAssignment(context.getRoadLocationId(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasStreetLights(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::InBusinessDistrict(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::FerryType>(context.getFerryType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::Stubble(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::DividerType>(context.getMiddleDividerType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MultiDigitizedLaneGroupReference(context.getMultiDigitizedLaneGroupReference(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsLaneRangeAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::LaneType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::MetricLaneWidth>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::PavementType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::DIVIDER_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::DividerType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GRADE_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::GradeType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::RAILWAY_CROSSING:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::RailwayCrossing>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PEDESTRIAN_CROSSING:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::PedestrianCrossing>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::TRAFFIC_CALMING:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::TrafficCalming>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::MovableBridge>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SUPERELEVATION:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::SuperElevationClass>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_MEDIAN:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::RoadMedian>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::HasSidewalk>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FRICTION:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::FrictionCoefficient>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StationPlazaType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::SpeedKmh>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::FunctionalRoadClass>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::PriorityRoadClass>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::LANE_WIDTH_STATE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::LaneWidthState>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::ComplexIntersectionType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::START_OR_DESTINATION_ROAD_ONLY:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StartOrDestinationRoadOnly>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::RoadLocationAssignment>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::HasStreetLights>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::InBusinessDistrict>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::FERRY_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::FerryType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::STUBBLE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::Stubble>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MIDDLE_DIVIDER_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::DividerType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::MULTI_DIGITIZED_LANE_GROUP_REFERENCE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::MultiDigitizedLaneGroupReference>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsLaneRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::GlobalSourceId>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsLaneRangeAttributeValue!");
    }
}

} // namespace attributes
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/attributes/CharacsDisplayLineRangeAttributeValue.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

CharacsDisplayLineRangeAttributeValue::CharacsDisplayLineRangeAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

CharacsDisplayLineRangeAttributeValue::CharacsDisplayLineRangeAttributeValue(::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

CharacsDisplayLineRangeAttributeValue::CharacsDisplayLineRangeAttributeValue(CharacsDisplayLineRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

CharacsDisplayLineRangeAttributeValue::CharacsDisplayLineRangeAttributeValue(const CharacsDisplayLineRangeAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsDisplayLineRangeAttributeValue& CharacsDisplayLineRangeAttributeValue::operator=(const CharacsDisplayLineRangeAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsDisplayLineRangeAttributeValue::CharacsDisplayLineRangeAttributeValue(CharacsDisplayLineRangeAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsDisplayLineRangeAttributeValue& CharacsDisplayLineRangeAttributeValue::operator=(CharacsDisplayLineRangeAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsDisplayLineRangeAttributeValue::CharacsDisplayLineRangeAttributeValue(::zserio::PropagateAllocatorT,
        const CharacsDisplayLineRangeAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void CharacsDisplayLineRangeAttributeValue::initialize(
        ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool CharacsDisplayLineRangeAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType CharacsDisplayLineRangeAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'CharacsDisplayLineRangeAttributeValue' is not initialized!");

    return m_type_;
}

::nds::characteristics::types::MetricLaneWidth CharacsDisplayLineRangeAttributeValue::getMetricLaneWidth() const
{
    return m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>();
}

void CharacsDisplayLineRangeAttributeValue::setMetricLaneWidth(::nds::characteristics::types::MetricLaneWidth metricLaneWidth_)
{
    m_objectChoice = metricLaneWidth_;
}

::nds::characteristics::types::PavementType CharacsDisplayLineRangeAttributeValue::getPavementType() const
{
    return m_objectChoice.get<::nds::characteristics::types::PavementType>();
}

void CharacsDisplayLineRangeAttributeValue::setPavementType(::nds::characteristics::types::PavementType pavementType_)
{
    m_objectChoice = pavementType_;
}

::nds::characteristics::types::MovableBridge& CharacsDisplayLineRangeAttributeValue::getMovableBridge()
{
    return m_objectChoice.get<::nds::characteristics::types::MovableBridge>();
}

const ::nds::characteristics::types::MovableBridge& CharacsDisplayLineRangeAttributeValue::getMovableBridge() const
{
    return m_objectChoice.get<::nds::characteristics::types::MovableBridge>();
}

void CharacsDisplayLineRangeAttributeValue::setMovableBridge(const ::nds::characteristics::types::MovableBridge& movableBridge_)
{
    m_objectChoice = movableBridge_;
}

void CharacsDisplayLineRangeAttributeValue::setMovableBridge(::nds::characteristics::types::MovableBridge&& movableBridge_)
{
    m_objectChoice = ::std::move(movableBridge_);
}

::nds::characteristics::types::HasSidewalk& CharacsDisplayLineRangeAttributeValue::getHasSidewalk()
{
    return m_objectChoice.get<::nds::characteristics::types::HasSidewalk>();
}

const ::nds::characteristics::types::HasSidewalk& CharacsDisplayLineRangeAttributeValue::getHasSidewalk() const
{
    return m_objectChoice.get<::nds::characteristics::types::HasSidewalk>();
}

void CharacsDisplayLineRangeAttributeValue::setHasSidewalk(const ::nds::characteristics::types::HasSidewalk& hasSidewalk_)
{
    m_objectChoice = hasSidewalk_;
}

void CharacsDisplayLineRangeAttributeValue::setHasSidewalk(::nds::characteristics::types::HasSidewalk&& hasSidewalk_)
{
    m_objectChoice = ::std::move(hasSidewalk_);
}

::nds::characteristics::types::StationPlazaType CharacsDisplayLineRangeAttributeValue::getStationPlazaType() const
{
    return m_objectChoice.get<::nds::characteristics::types::StationPlazaType>();
}

void CharacsDisplayLineRangeAttributeValue::setStationPlazaType(::nds::characteristics::types::StationPlazaType stationPlazaType_)
{
    m_objectChoice = stationPlazaType_;
}

::nds::core::types::SpeedKmh CharacsDisplayLineRangeAttributeValue::getAverageSpeed() const
{
    return m_objectChoice.get<::nds::core::types::SpeedKmh>();
}

void CharacsDisplayLineRangeAttributeValue::setAverageSpeed(::nds::core::types::SpeedKmh averageSpeed_)
{
    m_objectChoice = averageSpeed_;
}

::nds::core::types::FunctionalRoadClass CharacsDisplayLineRangeAttributeValue::getFunctionalRoadClass() const
{
    return m_objectChoice.get<::nds::core::types::FunctionalRoadClass>();
}

void CharacsDisplayLineRangeAttributeValue::setFunctionalRoadClass(::nds::core::types::FunctionalRoadClass functionalRoadClass_)
{
    m_objectChoice = functionalRoadClass_;
}

::nds::core::types::PriorityRoadClass CharacsDisplayLineRangeAttributeValue::getPriorityRoadClass() const
{
    return m_objectChoice.get<::nds::core::types::PriorityRoadClass>();
}

void CharacsDisplayLineRangeAttributeValue::setPriorityRoadClass(::nds::core::types::PriorityRoadClass priorityRoadClass_)
{
    m_objectChoice = priorityRoadClass_;
}

::nds::characteristics::types::ComplexIntersectionType CharacsDisplayLineRangeAttributeValue::getComplexIntersectionType() const
{
    return m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>();
}

void CharacsDisplayLineRangeAttributeValue::setComplexIntersectionType(::nds::characteristics::types::ComplexIntersectionType complexIntersectionType_)
{
    m_objectChoice = complexIntersectionType_;
}

::nds::characteristics::types::RoadLocationAssignment& CharacsDisplayLineRangeAttributeValue::getRoadLocationId()
{
    return m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>();
}

const ::nds::characteristics::types::RoadLocationAssignment& CharacsDisplayLineRangeAttributeValue::getRoadLocationId() const
{
    return m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>();
}

void CharacsDisplayLineRangeAttributeValue::setRoadLocationId(const ::nds::characteristics::types::RoadLocationAssignment& roadLocationId_)
{
    m_objectChoice = roadLocationId_;
}

void CharacsDisplayLineRangeAttributeValue::setRoadLocationId(::nds::characteristics::types::RoadLocationAssignment&& roadLocationId_)
{
    m_objectChoice = ::std::move(roadLocationId_);
}

::nds::characteristics::types::HasStreetLights& CharacsDisplayLineRangeAttributeValue::getHasStreetLights()
{
    return m_objectChoice.get<::nds::characteristics::types::HasStreetLights>();
}

const ::nds::characteristics::types::HasStreetLights& CharacsDisplayLineRangeAttributeValue::getHasStreetLights() const
{
    return m_objectChoice.get<::nds::characteristics::types::HasStreetLights>();
}

void CharacsDisplayLineRangeAttributeValue::setHasStreetLights(const ::nds::characteristics::types::HasStreetLights& hasStreetLights_)
{
    m_objectChoice = hasStreetLights_;
}

void CharacsDisplayLineRangeAttributeValue::setHasStreetLights(::nds::characteristics::types::HasStreetLights&& hasStreetLights_)
{
    m_objectChoice = ::std::move(hasStreetLights_);
}

::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& CharacsDisplayLineRangeAttributeValue::getSharedRoadSurfaceWithPedestrians()
{
    return m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>();
}

const ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& CharacsDisplayLineRangeAttributeValue::getSharedRoadSurfaceWithPedestrians() const
{
    return m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>();
}

void CharacsDisplayLineRangeAttributeValue::setSharedRoadSurfaceWithPedestrians(const ::nds::characteristics::types::SharedRoadSurfaceWithPedestrians& sharedRoadSurfaceWithPedestrians_)
{
    m_objectChoice = sharedRoadSurfaceWithPedestrians_;
}

void CharacsDisplayLineRangeAttributeValue::setSharedRoadSurfaceWithPedestrians(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians&& sharedRoadSurfaceWithPedestrians_)
{
    m_objectChoice = ::std::move(sharedRoadSurfaceWithPedestrians_);
}

::nds::characteristics::types::InBusinessDistrict& CharacsDisplayLineRangeAttributeValue::getInBusinessDistrict()
{
    return m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>();
}

const ::nds::characteristics::types::InBusinessDistrict& CharacsDisplayLineRangeAttributeValue::getInBusinessDistrict() const
{
    return m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>();
}

void CharacsDisplayLineRangeAttributeValue::setInBusinessDistrict(const ::nds::characteristics::types::InBusinessDistrict& inBusinessDistrict_)
{
    m_objectChoice = inBusinessDistrict_;
}

void CharacsDisplayLineRangeAttributeValue::setInBusinessDistrict(::nds::characteristics::types::InBusinessDistrict&& inBusinessDistrict_)
{
    m_objectChoice = ::std::move(inBusinessDistrict_);
}

::nds::core::types::RoadType& CharacsDisplayLineRangeAttributeValue::getRoadType()
{
    return m_objectChoice.get<::nds::core::types::RoadType>();
}

const ::nds::core::types::RoadType& CharacsDisplayLineRangeAttributeValue::getRoadType() const
{
    return m_objectChoice.get<::nds::core::types::RoadType>();
}

void CharacsDisplayLineRangeAttributeValue::setRoadType(const ::nds::core::types::RoadType& roadType_)
{
    m_objectChoice = roadType_;
}

void CharacsDisplayLineRangeAttributeValue::setRoadType(::nds::core::types::RoadType&& roadType_)
{
    m_objectChoice = ::std::move(roadType_);
}

::nds::characteristics::types::CompleteCarpoolRoad& CharacsDisplayLineRangeAttributeValue::getCompleteCarpoolRoad()
{
    return m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>();
}

const ::nds::characteristics::types::CompleteCarpoolRoad& CharacsDisplayLineRangeAttributeValue::getCompleteCarpoolRoad() const
{
    return m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>();
}

void CharacsDisplayLineRangeAttributeValue::setCompleteCarpoolRoad(const ::nds::characteristics::types::CompleteCarpoolRoad& completeCarpoolRoad_)
{
    m_objectChoice = completeCarpoolRoad_;
}

void CharacsDisplayLineRangeAttributeValue::setCompleteCarpoolRoad(::nds::characteristics::types::CompleteCarpoolRoad&& completeCarpoolRoad_)
{
    m_objectChoice = ::std::move(completeCarpoolRoad_);
}

::nds::characteristics::types::PartialCarpoolRoad& CharacsDisplayLineRangeAttributeValue::getPartialCarpoolRoad()
{
    return m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>();
}

const ::nds::characteristics::types::PartialCarpoolRoad& CharacsDisplayLineRangeAttributeValue::getPartialCarpoolRoad() const
{
    return m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>();
}

void CharacsDisplayLineRangeAttributeValue::setPartialCarpoolRoad(const ::nds::characteristics::types::PartialCarpoolRoad& partialCarpoolRoad_)
{
    m_objectChoice = partialCarpoolRoad_;
}

void CharacsDisplayLineRangeAttributeValue::setPartialCarpoolRoad(::nds::characteristics::types::PartialCarpoolRoad&& partialCarpoolRoad_)
{
    m_objectChoice = ::std::move(partialCarpoolRoad_);
}

::nds::characteristics::types::FerryType CharacsDisplayLineRangeAttributeValue::getFerryType() const
{
    return m_objectChoice.get<::nds::characteristics::types::FerryType>();
}

void CharacsDisplayLineRangeAttributeValue::setFerryType(::nds::characteristics::types::FerryType ferryType_)
{
    m_objectChoice = ferryType_;
}

::nds::core::types::GlobalSourceId& CharacsDisplayLineRangeAttributeValue::getGlobalSourceId()
{
    return m_objectChoice.get<::nds::core::types::GlobalSourceId>();
}

const ::nds::core::types::GlobalSourceId& CharacsDisplayLineRangeAttributeValue::getGlobalSourceId() const
{
    return m_objectChoice.get<::nds::core::types::GlobalSourceId>();
}

void CharacsDisplayLineRangeAttributeValue::setGlobalSourceId(const ::nds::core::types::GlobalSourceId& globalSourceId_)
{
    m_objectChoice = globalSourceId_;
}

void CharacsDisplayLineRangeAttributeValue::setGlobalSourceId(::nds::core::types::GlobalSourceId&& globalSourceId_)
{
    m_objectChoice = ::std::move(globalSourceId_);
}

CharacsDisplayLineRangeAttributeValue::ChoiceTag CharacsDisplayLineRangeAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return CHOICE_metricLaneWidth;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        return CHOICE_pavementType;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        return CHOICE_movableBridge;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        return CHOICE_hasSidewalk;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        return CHOICE_stationPlazaType;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        return CHOICE_averageSpeed;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return CHOICE_functionalRoadClass;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        return CHOICE_priorityRoadClass;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return CHOICE_complexIntersectionType;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        return CHOICE_roadLocationId;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        return CHOICE_hasStreetLights;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return CHOICE_sharedRoadSurfaceWithPedestrians;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        return CHOICE_inBusinessDistrict;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        return CHOICE_roadType;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return CHOICE_completeCarpoolRoad;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return CHOICE_partialCarpoolRoad;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        return CHOICE_ferryType;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        return CHOICE_globalSourceId;
    default:
        return UNDEFINED_CHOICE;
    }
}

void CharacsDisplayLineRangeAttributeValue::initPackingContext(CharacsDisplayLineRangeAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        context.getMetricLaneWidth().init<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::initPackingContext(context.getPavementType(), m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::initPackingContext(context.getStationPlazaType(), m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        context.getAverageSpeed().init<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        context.getFunctionalRoadClass().init<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        context.getPriorityRoadClass().init<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::initPackingContext(context.getComplexIntersectionType(), m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initPackingContext(context.getRoadLocationId());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        m_objectChoice.get<::nds::core::types::RoadType>().initPackingContext(context.getRoadType());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        ::zserio::initPackingContext(context.getFerryType(), m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }
}

size_t CharacsDisplayLineRangeAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MovableBridge>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += UINT8_C(3);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += UINT8_C(4);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::types::RoadType>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsDisplayLineRangeAttributeValue::bitSizeOf(CharacsDisplayLineRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += context.getMetricLaneWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition += ::zserio::bitSizeOf(context.getPavementType(), m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::MovableBridge>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getStationPlazaType(), m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += context.getAverageSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += context.getFunctionalRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += context.getPriorityRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getComplexIntersectionType(), m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().bitSizeOf(context.getRoadLocationId(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        endBitPosition += m_objectChoice.get<::nds::core::types::RoadType>().bitSizeOf(context.getRoadType(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        endBitPosition += ::zserio::bitSizeOf(context.getFerryType(), m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsDisplayLineRangeAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MovableBridge>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += UINT8_C(8);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += UINT8_C(3);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += UINT8_C(4);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::types::RoadType>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }

    return endBitPosition;
}

size_t CharacsDisplayLineRangeAttributeValue::initializeOffsets(CharacsDisplayLineRangeAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        endBitPosition += context.getMetricLaneWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        endBitPosition = ::zserio::initializeOffsets(context.getPavementType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::MovableBridge>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getStationPlazaType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        endBitPosition += context.getAverageSpeed().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        endBitPosition += context.getFunctionalRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        endBitPosition += context.getPriorityRoadClass().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getComplexIntersectionType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().initializeOffsets(context.getRoadLocationId(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        endBitPosition = m_objectChoice.get<::nds::core::types::RoadType>().initializeOffsets(context.getRoadType(), endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        endBitPosition = ::zserio::initializeOffsets(context.getFerryType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }

    return endBitPosition;
}

bool CharacsDisplayLineRangeAttributeValue::operator==(const CharacsDisplayLineRangeAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>() == other.m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::PavementType>() == other.m_objectChoice.get<::nds::characteristics::types::PavementType>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::MovableBridge>() == other.m_objectChoice.get<::nds::characteristics::types::MovableBridge>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::HasSidewalk>() == other.m_objectChoice.get<::nds::characteristics::types::HasSidewalk>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StationPlazaType>() == other.m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::SpeedKmh>() == other.m_objectChoice.get<::nds::core::types::SpeedKmh>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::FunctionalRoadClass>() == other.m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::PriorityRoadClass>() == other.m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>() == other.m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>() == other.m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::HasStreetLights>() == other.m_objectChoice.get<::nds::characteristics::types::HasStreetLights>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>() == other.m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>() == other.m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::RoadType>() == other.m_objectChoice.get<::nds::core::types::RoadType>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>() == other.m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>() == other.m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::FerryType>() == other.m_objectChoice.get<::nds::characteristics::types::FerryType>());
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::core::types::GlobalSourceId>() == other.m_objectChoice.get<::nds::core::types::GlobalSourceId>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }
}

uint32_t CharacsDisplayLineRangeAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::PavementType>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::MovableBridge>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::HasSidewalk>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::SpeedKmh>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::HasStreetLights>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::RoadType>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::FerryType>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::core::types::GlobalSourceId>());
            break;
        default:
            break;
        }
    }

    return result;
}

void CharacsDisplayLineRangeAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        out.writeVarUInt32(m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        m_objectChoice.get<::nds::characteristics::types::MovableBridge>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        out.writeBits(m_objectChoice.get<::nds::core::types::SpeedKmh>(), UINT8_C(8));
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        out.writeBits(m_objectChoice.get<::nds::core::types::FunctionalRoadClass>(), UINT8_C(3));
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        out.writeBits(m_objectChoice.get<::nds::core::types::PriorityRoadClass>(), UINT8_C(4));
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        m_objectChoice.get<::nds::core::types::RoadType>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        out.writeString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }
}

void CharacsDisplayLineRangeAttributeValue::write(CharacsDisplayLineRangeAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        context.getMetricLaneWidth().write<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(out, m_objectChoice.get<::nds::characteristics::types::MetricLaneWidth>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        ::zserio::write(context.getPavementType(), out, m_objectChoice.get<::nds::characteristics::types::PavementType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        m_objectChoice.get<::nds::characteristics::types::MovableBridge>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        m_objectChoice.get<::nds::characteristics::types::HasSidewalk>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        ::zserio::write(context.getStationPlazaType(), out, m_objectChoice.get<::nds::characteristics::types::StationPlazaType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        context.getAverageSpeed().write<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(out, m_objectChoice.get<::nds::core::types::SpeedKmh>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        context.getFunctionalRoadClass().write<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(out, m_objectChoice.get<::nds::core::types::FunctionalRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        context.getPriorityRoadClass().write<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(out, m_objectChoice.get<::nds::core::types::PriorityRoadClass>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        ::zserio::write(context.getComplexIntersectionType(), out, m_objectChoice.get<::nds::characteristics::types::ComplexIntersectionType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        m_objectChoice.get<::nds::characteristics::types::RoadLocationAssignment>().write(context.getRoadLocationId(), out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        m_objectChoice.get<::nds::characteristics::types::HasStreetLights>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        m_objectChoice.get<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        m_objectChoice.get<::nds::characteristics::types::InBusinessDistrict>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        m_objectChoice.get<::nds::core::types::RoadType>().write(context.getRoadType(), out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        m_objectChoice.get<::nds::characteristics::types::CompleteCarpoolRoad>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        m_objectChoice.get<::nds::characteristics::types::PartialCarpoolRoad>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        ::zserio::write(context.getFerryType(), out, m_objectChoice.get<::nds::characteristics::types::FerryType>());
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        out.writeString(m_objectChoice.get<::nds::core::types::GlobalSourceId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsDisplayLineRangeAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::AnyHolder<>(static_cast<::nds::characteristics::types::MetricLaneWidth>(in.readVarUInt32()), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::PavementType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MovableBridge(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasSidewalk(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationPlazaType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::SpeedKmh>(in.readBits(UINT8_C(8))), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::FunctionalRoadClass>(in.readBits(UINT8_C(3))), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::PriorityRoadClass>(in.readBits(UINT8_C(4))), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::ComplexIntersectionType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadLocationAssignment(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasStreetLights(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::InBusinessDistrict(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::types::RoadType(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::CompleteCarpoolRoad(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::PartialCarpoolRoad(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::FerryType>(in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsDisplayLineRangeAttributeValue::readObject(CharacsDisplayLineRangeAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::AnyHolder<>(context.getMetricLaneWidth().read<::zserio::VarIntNNArrayTraits<::nds::characteristics::types::MetricLaneWidth>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::PavementType>(context.getPavementType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::MovableBridge(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasSidewalk(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationPlazaType>(context.getStationPlazaType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::AnyHolder<>(context.getAverageSpeed().read<::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::AnyHolder<>(context.getFunctionalRoadClass().read<::zserio::BitFieldArrayTraits<::nds::core::types::FunctionalRoadClass, UINT8_C(3)>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::AnyHolder<>(context.getPriorityRoadClass().read<::zserio::BitFieldArrayTraits<::nds::core::types::PriorityRoadClass, UINT8_C(4)>>(in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::ComplexIntersectionType>(context.getComplexIntersectionType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::RoadLocationAssignment(context.getRoadLocationId(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::HasStreetLights(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::SharedRoadSurfaceWithPedestrians(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::InBusinessDistrict(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        return ::zserio::AnyHolder<>(::nds::core::types::RoadType(context.getRoadType(), in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::CompleteCarpoolRoad(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::PartialCarpoolRoad(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::FerryType>(context.getFerryType(), in), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::AnyHolder<>(static_cast<::nds::core::types::GlobalSourceId>(in.readString(allocator)), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsDisplayLineRangeAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PHYSICAL_WIDTH_METRIC:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::MetricLaneWidth>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::TYPE_OF_PAVEMENT:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::PavementType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::MOVABLE_BRIDGE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::MovableBridge>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_SIDEWALK:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::HasSidewalk>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::STATION_PLAZA_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StationPlazaType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::AVERAGE_SPEED:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::SpeedKmh>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FUNCTIONAL_ROAD_CLASS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::FunctionalRoadClass>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PRIORITY_ROAD_CLASS:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::PriorityRoadClass>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLEX_INTERSECTION_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::ComplexIntersectionType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_LOCATION_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::RoadLocationAssignment>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::HAS_STREET_LIGHTS:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::HasStreetLights>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::SharedRoadSurfaceWithPedestrians>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::IN_BUSINESS_DISTRICT:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::InBusinessDistrict>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::ROAD_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::RoadType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::COMPLETE_CARPOOL_ROAD:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::CompleteCarpoolRoad>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::PARTIAL_CARPOOL_ROAD:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::PartialCarpoolRoad>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::FERRY_TYPE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::FerryType>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLineRangeAttributeType::GLOBAL_SOURCE_ID:
        return ::zserio::allocatorPropagatingCopy<::nds::core::types::GlobalSourceId>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!");
    }
}

} // namespace attributes
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/attributes/CharacsDisplayLinePositionAttributeValue.h>

namespace nds
{
namespace characteristics
{
namespace attributes
{

CharacsDisplayLinePositionAttributeValue::CharacsDisplayLinePositionAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

CharacsDisplayLinePositionAttributeValue::CharacsDisplayLinePositionAttributeValue(::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

CharacsDisplayLinePositionAttributeValue::CharacsDisplayLinePositionAttributeValue(CharacsDisplayLinePositionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

CharacsDisplayLinePositionAttributeValue::CharacsDisplayLinePositionAttributeValue(const CharacsDisplayLinePositionAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsDisplayLinePositionAttributeValue& CharacsDisplayLinePositionAttributeValue::operator=(const CharacsDisplayLinePositionAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsDisplayLinePositionAttributeValue::CharacsDisplayLinePositionAttributeValue(CharacsDisplayLinePositionAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

CharacsDisplayLinePositionAttributeValue& CharacsDisplayLinePositionAttributeValue::operator=(CharacsDisplayLinePositionAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

CharacsDisplayLinePositionAttributeValue::CharacsDisplayLinePositionAttributeValue(::zserio::PropagateAllocatorT,
        const CharacsDisplayLinePositionAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void CharacsDisplayLinePositionAttributeValue::initialize(
        ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool CharacsDisplayLinePositionAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType CharacsDisplayLinePositionAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'CharacsDisplayLinePositionAttributeValue' is not initialized!");

    return m_type_;
}

::nds::characteristics::types::StopLine& CharacsDisplayLinePositionAttributeValue::getStopLine()
{
    return m_objectChoice.get<::nds::characteristics::types::StopLine>();
}

const ::nds::characteristics::types::StopLine& CharacsDisplayLinePositionAttributeValue::getStopLine() const
{
    return m_objectChoice.get<::nds::characteristics::types::StopLine>();
}

void CharacsDisplayLinePositionAttributeValue::setStopLine(const ::nds::characteristics::types::StopLine& stopLine_)
{
    m_objectChoice = stopLine_;
}

void CharacsDisplayLinePositionAttributeValue::setStopLine(::nds::characteristics::types::StopLine&& stopLine_)
{
    m_objectChoice = ::std::move(stopLine_);
}

::nds::characteristics::types::WaitingLine& CharacsDisplayLinePositionAttributeValue::getWaitingLine()
{
    return m_objectChoice.get<::nds::characteristics::types::WaitingLine>();
}

const ::nds::characteristics::types::WaitingLine& CharacsDisplayLinePositionAttributeValue::getWaitingLine() const
{
    return m_objectChoice.get<::nds::characteristics::types::WaitingLine>();
}

void CharacsDisplayLinePositionAttributeValue::setWaitingLine(const ::nds::characteristics::types::WaitingLine& waitingLine_)
{
    m_objectChoice = waitingLine_;
}

void CharacsDisplayLinePositionAttributeValue::setWaitingLine(::nds::characteristics::types::WaitingLine&& waitingLine_)
{
    m_objectChoice = ::std::move(waitingLine_);
}

::nds::characteristics::types::StationaryObjectType CharacsDisplayLinePositionAttributeValue::getStationaryObjectType() const
{
    return m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>();
}

void CharacsDisplayLinePositionAttributeValue::setStationaryObjectType(::nds::characteristics::types::StationaryObjectType stationaryObjectType_)
{
    m_objectChoice = stationaryObjectType_;
}

CharacsDisplayLinePositionAttributeValue::ChoiceTag CharacsDisplayLinePositionAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        return CHOICE_stopLine;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        return CHOICE_waitingLine;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        return CHOICE_stationaryObjectType;
    default:
        return UNDEFINED_CHOICE;
    }
}

void CharacsDisplayLinePositionAttributeValue::initPackingContext(CharacsDisplayLinePositionAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        ::zserio::initPackingContext(context.getStationaryObjectType(), m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }
}

size_t CharacsDisplayLinePositionAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StopLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::WaitingLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        endBitPosition += ::zserio::bitSizeOf(m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsDisplayLinePositionAttributeValue::bitSizeOf(CharacsDisplayLinePositionAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::StopLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        endBitPosition += m_objectChoice.get<::nds::characteristics::types::WaitingLine>().bitSizeOf(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        endBitPosition += ::zserio::bitSizeOf(context.getStationaryObjectType(), m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t CharacsDisplayLinePositionAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StopLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::WaitingLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }

    return endBitPosition;
}

size_t CharacsDisplayLinePositionAttributeValue::initializeOffsets(CharacsDisplayLinePositionAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::StopLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        endBitPosition = m_objectChoice.get<::nds::characteristics::types::WaitingLine>().initializeOffsets(endBitPosition);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        endBitPosition = ::zserio::initializeOffsets(context.getStationaryObjectType(), endBitPosition,
        m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }

    return endBitPosition;
}

bool CharacsDisplayLinePositionAttributeValue::operator==(const CharacsDisplayLinePositionAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StopLine>() == other.m_objectChoice.get<::nds::characteristics::types::StopLine>());
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::WaitingLine>() == other.m_objectChoice.get<::nds::characteristics::types::WaitingLine>());
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>() == other.m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }
}

uint32_t CharacsDisplayLinePositionAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StopLine>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::WaitingLine>());
            break;
        case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
            break;
        default:
            break;
        }
    }

    return result;
}

void CharacsDisplayLinePositionAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        m_objectChoice.get<::nds::characteristics::types::StopLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        m_objectChoice.get<::nds::characteristics::types::WaitingLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        ::zserio::write(out, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }
}

void CharacsDisplayLinePositionAttributeValue::write(CharacsDisplayLinePositionAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        m_objectChoice.get<::nds::characteristics::types::StopLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        m_objectChoice.get<::nds::characteristics::types::WaitingLine>().write(out);
        break;
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        ::zserio::write(context.getStationaryObjectType(), out, m_objectChoice.get<::nds::characteristics::types::StationaryObjectType>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsDisplayLinePositionAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StopLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::WaitingLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationaryObjectType>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsDisplayLinePositionAttributeValue::readObject(CharacsDisplayLinePositionAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::StopLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        return ::zserio::AnyHolder<>(::nds::characteristics::types::WaitingLine(in, allocator), allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        return ::zserio::AnyHolder<>(::zserio::read<::nds::characteristics::types::StationaryObjectType>(context.getStationaryObjectType(), in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }
}

::zserio::AnyHolder<> CharacsDisplayLinePositionAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STOP_LINE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StopLine>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::WAITING_LINE:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::WaitingLine>(m_objectChoice, allocator);
    case ::nds::characteristics::attributes::CharacsDisplayLinePositionAttributeType::STATION:
        return ::zserio::allocatorPropagatingCopy<::nds::characteristics::types::StationaryObjectType>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice CharacsDisplayLinePositionAttributeValue!");
    }
}

} // namespace attributes
} // namespace characteristics
} // namespace nds
