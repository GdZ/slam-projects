/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_METADATA_ROAD_LOCATION_PROVIDER_DETAILS_H
#define NDS_CHARACTERISTICS_METADATA_ROAD_LOCATION_PROVIDER_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/core/types/TimeStamp.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

class RoadLocationProviderDetails
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::types::TimeStamp::ZserioPackingContext& getCreationTime()
        {
            return m_creationTime_;
        }

    private:
        ::nds::core::types::TimeStamp::ZserioPackingContext m_creationTime_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadLocationProviderDetails() noexcept :
            RoadLocationProviderDetails(allocator_type())
    {}

    explicit RoadLocationProviderDetails(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_providerName = ::zserio::string<>,
            typename ZSERIO_T_locationVersion = ::zserio::string<>,
            typename ZSERIO_T_creationTime = ::nds::core::types::TimeStamp,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_providerName, RoadLocationProviderDetails, allocator_type> = 0>
    RoadLocationProviderDetails(
            ZSERIO_T_providerName&& providerName_,
            ZSERIO_T_locationVersion&& locationVersion_,
            ZSERIO_T_creationTime&& creationTime_,
            const allocator_type& allocator = allocator_type()) :
            RoadLocationProviderDetails(allocator)
    {
        m_providerName_ = ::std::forward<ZSERIO_T_providerName>(providerName_);
        m_locationVersion_ = ::std::forward<ZSERIO_T_locationVersion>(locationVersion_);
        m_creationTime_ = ::std::forward<ZSERIO_T_creationTime>(creationTime_);
    }

    explicit RoadLocationProviderDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadLocationProviderDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadLocationProviderDetails() = default;

    RoadLocationProviderDetails(const RoadLocationProviderDetails&) = default;
    RoadLocationProviderDetails& operator=(const RoadLocationProviderDetails&) = default;

    RoadLocationProviderDetails(RoadLocationProviderDetails&&) = default;
    RoadLocationProviderDetails& operator=(RoadLocationProviderDetails&&) = default;

    RoadLocationProviderDetails(::zserio::PropagateAllocatorT,
            const RoadLocationProviderDetails& other, const allocator_type& allocator);

    const ::zserio::string<>& getProviderName() const;
    ::zserio::string<>& getProviderName();
    void setProviderName(const ::zserio::string<>& providerName_);
    void setProviderName(::zserio::string<>&& providerName_);

    const ::zserio::string<>& getLocationVersion() const;
    ::zserio::string<>& getLocationVersion();
    void setLocationVersion(const ::zserio::string<>& locationVersion_);
    void setLocationVersion(::zserio::string<>&& locationVersion_);

    const ::nds::core::types::TimeStamp& getCreationTime() const;
    ::nds::core::types::TimeStamp& getCreationTime();
    void setCreationTime(const ::nds::core::types::TimeStamp& creationTime_);
    void setCreationTime(::nds::core::types::TimeStamp&& creationTime_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadLocationProviderDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readProviderName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readLocationVersion(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::TimeStamp readCreationTime(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::TimeStamp readCreationTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::zserio::string<> m_providerName_;
    ::zserio::string<> m_locationVersion_;
    ::nds::core::types::TimeStamp m_creationTime_;
};

} // namespace metadata
} // namespace characteristics
} // namespace nds

#endif // NDS_CHARACTERISTICS_METADATA_ROAD_LOCATION_PROVIDER_DETAILS_H
