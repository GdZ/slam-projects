/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_METADATA_LANE_CHARACTERISTICS_LAYER_METADATA_H
#define NDS_CHARACTERISTICS_METADATA_LANE_CHARACTERISTICS_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/characteristics/instantiations/CharacsLanePositionAttributeMetadata.h>
#include <nds/characteristics/instantiations/CharacsLaneRangeAttributeMetadata.h>
#include <nds/characteristics/metadata/LaneCharacsLayerContent.h>
#include <nds/characteristics/metadata/RoadLocationProviderDetails.h>
#include <nds/core/types/LaneType.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

class LaneCharacteristicsLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata::ZserioPackingContext& getLaneRangeAttributeMetadata()
        {
            return m_laneRangeAttributeMetadata_;
        }

        ::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata::ZserioPackingContext& getLanePositionAttributeMetadata()
        {
            return m_lanePositionAttributeMetadata_;
        }

        ::nds::characteristics::metadata::RoadLocationProviderDetails::ZserioPackingContext& getRoadLocationProviderDetails()
        {
            return m_roadLocationProviderDetails_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata::ZserioPackingContext m_laneRangeAttributeMetadata_;
        ::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata::ZserioPackingContext m_lanePositionAttributeMetadata_;
        ::nds::characteristics::metadata::RoadLocationProviderDetails::ZserioPackingContext m_roadLocationProviderDetails_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneCharacteristicsLayerMetadata() noexcept :
            LaneCharacteristicsLayerMetadata(allocator_type())
    {}

    explicit LaneCharacteristicsLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneRangeAttributeMetadata = ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata,
            typename ZSERIO_T_lanePositionAttributeMetadata = ::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata,
            typename ZSERIO_T_coveredLaneTypes = ::zserio::vector<::nds::core::types::LaneType>,
            typename ZSERIO_T_roadLocationProviderDetails = ::nds::characteristics::metadata::RoadLocationProviderDetails>
    LaneCharacteristicsLayerMetadata(
            ::nds::characteristics::metadata::LaneCharacsLayerContent content_,
            ZSERIO_T_laneRangeAttributeMetadata&& laneRangeAttributeMetadata_,
            ZSERIO_T_lanePositionAttributeMetadata&& lanePositionAttributeMetadata_,
            ZSERIO_T_coveredLaneTypes&& coveredLaneTypes_,
            ZSERIO_T_roadLocationProviderDetails&& roadLocationProviderDetails_,
            const allocator_type& allocator = allocator_type()) :
            LaneCharacteristicsLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_laneRangeAttributeMetadata_ = ::std::forward<ZSERIO_T_laneRangeAttributeMetadata>(laneRangeAttributeMetadata_);
        m_lanePositionAttributeMetadata_ = ::std::forward<ZSERIO_T_lanePositionAttributeMetadata>(lanePositionAttributeMetadata_);
        m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(::std::forward<ZSERIO_T_coveredLaneTypes>(coveredLaneTypes_));
        m_roadLocationProviderDetails_ = ::std::forward<ZSERIO_T_roadLocationProviderDetails>(roadLocationProviderDetails_);
    }

    explicit LaneCharacteristicsLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneCharacteristicsLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneCharacteristicsLayerMetadata() = default;

    LaneCharacteristicsLayerMetadata(const LaneCharacteristicsLayerMetadata&) = default;
    LaneCharacteristicsLayerMetadata& operator=(const LaneCharacteristicsLayerMetadata&) = default;

    LaneCharacteristicsLayerMetadata(LaneCharacteristicsLayerMetadata&&) = default;
    LaneCharacteristicsLayerMetadata& operator=(LaneCharacteristicsLayerMetadata&&) = default;

    LaneCharacteristicsLayerMetadata(::zserio::PropagateAllocatorT,
            const LaneCharacteristicsLayerMetadata& other, const allocator_type& allocator);

    ::nds::characteristics::metadata::LaneCharacsLayerContent getContent() const;
    void setContent(::nds::characteristics::metadata::LaneCharacsLayerContent content_);

    const ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata& getLaneRangeAttributeMetadata() const;
    ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata& getLaneRangeAttributeMetadata();
    void setLaneRangeAttributeMetadata(const ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata& laneRangeAttributeMetadata_);
    void setLaneRangeAttributeMetadata(::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_);
    bool isLaneRangeAttributeMetadataUsed() const;
    bool isLaneRangeAttributeMetadataSet() const;
    void resetLaneRangeAttributeMetadata();

    const ::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata& getLanePositionAttributeMetadata() const;
    ::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata& getLanePositionAttributeMetadata();
    void setLanePositionAttributeMetadata(const ::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata& lanePositionAttributeMetadata_);
    void setLanePositionAttributeMetadata(::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata&& lanePositionAttributeMetadata_);
    bool isLanePositionAttributeMetadataUsed() const;
    bool isLanePositionAttributeMetadataSet() const;
    void resetLanePositionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::LaneType>& getCoveredLaneTypes() const;
    ::zserio::vector<::nds::core::types::LaneType>& getCoveredLaneTypes();
    void setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_);
    void setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_);

    const ::nds::characteristics::metadata::RoadLocationProviderDetails& getRoadLocationProviderDetails() const;
    ::nds::characteristics::metadata::RoadLocationProviderDetails& getRoadLocationProviderDetails();
    void setRoadLocationProviderDetails(const ::nds::characteristics::metadata::RoadLocationProviderDetails& roadLocationProviderDetails_);
    void setRoadLocationProviderDetails(::nds::characteristics::metadata::RoadLocationProviderDetails&& roadLocationProviderDetails_);
    bool isRoadLocationProviderDetailsUsed() const;
    bool isRoadLocationProviderDetailsSet() const;
    void resetRoadLocationProviderDetails();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneCharacteristicsLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredLaneTypes
    {
    public:
        using OwnerType = LaneCharacteristicsLayerMetadata;

        static void create(LaneCharacteristicsLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::LaneType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneCharacteristicsLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::LaneType>& array,
                ::nds::core::types::LaneType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredLaneTypes = ::zserio::Array<::zserio::vector<::nds::core::types::LaneType>, ::zserio::ObjectArrayTraits<::nds::core::types::LaneType, ZserioElementFactory_coveredLaneTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::characteristics::metadata::LaneCharacsLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::characteristics::metadata::LaneCharacsLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata> readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata> readLaneRangeAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata> readLanePositionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata> readLanePositionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredLaneTypes readCoveredLaneTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredLaneTypes readCoveredLaneTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> readRoadLocationProviderDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> readRoadLocationProviderDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::characteristics::metadata::LaneCharacsLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata> m_laneRangeAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata> m_lanePositionAttributeMetadata_;
    ZserioArrayType_coveredLaneTypes m_coveredLaneTypes_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> m_roadLocationProviderDetails_;
};

} // namespace metadata
} // namespace characteristics
} // namespace nds

#endif // NDS_CHARACTERISTICS_METADATA_LANE_CHARACTERISTICS_LAYER_METADATA_H
