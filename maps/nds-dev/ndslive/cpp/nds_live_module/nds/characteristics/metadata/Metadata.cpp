/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/metadata/RoadCharacsLayerContent.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

RoadCharacsLayerContent::RoadCharacsLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RoadCharacsLayerContent::RoadCharacsLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RoadCharacsLayerContent::RoadCharacsLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RoadCharacsLayerContent' out of bounds: ") << value << "!";
}

void RoadCharacsLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::RoadCharacsLayerContent::underlying_type>>(m_value);
}

size_t RoadCharacsLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t RoadCharacsLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::RoadCharacsLayerContent::underlying_type>>(m_value);
}

size_t RoadCharacsLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RoadCharacsLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RoadCharacsLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RoadCharacsLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void RoadCharacsLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::RoadCharacsLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RoadCharacsLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS)
        result += result.empty() ? "ROAD_RANGE_MAPS" : " | ROAD_RANGE_MAPS";
    if ((*this & RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
        result += result.empty() ? "ROAD_RANGE_SETS" : " | ROAD_RANGE_SETS";
    if ((*this & RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS)
        result += result.empty() ? "ROAD_POSITION_MAPS" : " | ROAD_POSITION_MAPS";
    if ((*this & RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
        result += result.empty() ? "ROAD_POSITION_SETS" : " | ROAD_POSITION_SETS";
    if ((*this & RoadCharacsLayerContent::Values::TRANSITION_MAPS) == RoadCharacsLayerContent::Values::TRANSITION_MAPS)
        result += result.empty() ? "TRANSITION_MAPS" : " | TRANSITION_MAPS";
    if ((*this & RoadCharacsLayerContent::Values::TRANSITION_SETS) == RoadCharacsLayerContent::Values::TRANSITION_SETS)
        result += result.empty() ? "TRANSITION_SETS" : " | TRANSITION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RoadCharacsLayerContent::underlying_type RoadCharacsLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

RoadCharacsLayerContent::underlying_type RoadCharacsLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::RoadCharacsLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/metadata/RoadLocationCharacsLayerContent.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

RoadLocationCharacsLayerContent::RoadLocationCharacsLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RoadLocationCharacsLayerContent::RoadLocationCharacsLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RoadLocationCharacsLayerContent::RoadLocationCharacsLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RoadLocationCharacsLayerContent' out of bounds: ") << value << "!";
}

void RoadLocationCharacsLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::RoadLocationCharacsLayerContent::underlying_type>>(m_value);
}

size_t RoadLocationCharacsLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t RoadLocationCharacsLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::RoadLocationCharacsLayerContent::underlying_type>>(m_value);
}

size_t RoadLocationCharacsLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RoadLocationCharacsLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RoadLocationCharacsLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RoadLocationCharacsLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void RoadLocationCharacsLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::RoadLocationCharacsLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RoadLocationCharacsLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RoadLocationCharacsLayerContent::Values::ROAD_LOCATION_MAPS) == RoadLocationCharacsLayerContent::Values::ROAD_LOCATION_MAPS)
        result += result.empty() ? "ROAD_LOCATION_MAPS" : " | ROAD_LOCATION_MAPS";
    if ((*this & RoadLocationCharacsLayerContent::Values::ROAD_LOCATION_SETS) == RoadLocationCharacsLayerContent::Values::ROAD_LOCATION_SETS)
        result += result.empty() ? "ROAD_LOCATION_SETS" : " | ROAD_LOCATION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RoadLocationCharacsLayerContent::underlying_type RoadLocationCharacsLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

RoadLocationCharacsLayerContent::underlying_type RoadLocationCharacsLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::RoadLocationCharacsLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/metadata/LaneCharacsLayerContent.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

LaneCharacsLayerContent::LaneCharacsLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

LaneCharacsLayerContent::LaneCharacsLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

LaneCharacsLayerContent::LaneCharacsLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'LaneCharacsLayerContent' out of bounds: ") << value << "!";
}

void LaneCharacsLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::LaneCharacsLayerContent::underlying_type>>(m_value);
}

size_t LaneCharacsLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t LaneCharacsLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::LaneCharacsLayerContent::underlying_type>>(m_value);
}

size_t LaneCharacsLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t LaneCharacsLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t LaneCharacsLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void LaneCharacsLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void LaneCharacsLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::LaneCharacsLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> LaneCharacsLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == LaneCharacsLayerContent::Values::LANE_RANGE_MAPS)
        result += result.empty() ? "LANE_RANGE_MAPS" : " | LANE_RANGE_MAPS";
    if ((*this & LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
        result += result.empty() ? "LANE_RANGE_SETS" : " | LANE_RANGE_SETS";
    if ((*this & LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == LaneCharacsLayerContent::Values::LANE_POSITION_MAPS)
        result += result.empty() ? "LANE_POSITION_MAPS" : " | LANE_POSITION_MAPS";
    if ((*this & LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
        result += result.empty() ? "LANE_POSITION_SETS" : " | LANE_POSITION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

LaneCharacsLayerContent::underlying_type LaneCharacsLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

LaneCharacsLayerContent::underlying_type LaneCharacsLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::LaneCharacsLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/characteristics/metadata/DisplayLineCharacsLayerContent.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

DisplayLineCharacsLayerContent::DisplayLineCharacsLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

DisplayLineCharacsLayerContent::DisplayLineCharacsLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

DisplayLineCharacsLayerContent::DisplayLineCharacsLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'DisplayLineCharacsLayerContent' out of bounds: ") << value << "!";
}

void DisplayLineCharacsLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::DisplayLineCharacsLayerContent::underlying_type>>(m_value);
}

size_t DisplayLineCharacsLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t DisplayLineCharacsLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::DisplayLineCharacsLayerContent::underlying_type>>(m_value);
}

size_t DisplayLineCharacsLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t DisplayLineCharacsLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t DisplayLineCharacsLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void DisplayLineCharacsLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void DisplayLineCharacsLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::DisplayLineCharacsLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> DisplayLineCharacsLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
        result += result.empty() ? "DISPLAY_LINE_RANGE_MAPS" : " | DISPLAY_LINE_RANGE_MAPS";
    if ((*this & DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
        result += result.empty() ? "DISPLAY_LINE_RANGE_SETS" : " | DISPLAY_LINE_RANGE_SETS";
    if ((*this & DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
        result += result.empty() ? "DISPLAY_LINE_POSITION_MAPS" : " | DISPLAY_LINE_POSITION_MAPS";
    if ((*this & DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
        result += result.empty() ? "DISPLAY_LINE_POSITION_SETS" : " | DISPLAY_LINE_POSITION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

DisplayLineCharacsLayerContent::underlying_type DisplayLineCharacsLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

DisplayLineCharacsLayerContent::underlying_type DisplayLineCharacsLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::characteristics::metadata::DisplayLineCharacsLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/characteristics/metadata/RoadCharacteristicsLayerMetadata.h>
#include <nds/characteristics/metadata/RoadCharacsLayerContent.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

RoadCharacteristicsLayerMetadata::RoadCharacteristicsLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::characteristics::metadata::RoadCharacsLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_roadPositionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator),
        m_roadLocationProviderDetails_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt)
{
}

RoadCharacteristicsLayerMetadata::RoadCharacteristicsLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator)),
        m_roadLocationProviderDetails_(readRoadLocationProviderDetails(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator))
{
}

RoadCharacteristicsLayerMetadata::RoadCharacteristicsLayerMetadata(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator)),
        m_roadLocationProviderDetails_(readRoadLocationProviderDetails(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator))
{
}

RoadCharacteristicsLayerMetadata::RoadCharacteristicsLayerMetadata(::zserio::PropagateAllocatorT,
        const RoadCharacteristicsLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_roadPositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator)),
        m_roadLocationProviderDetails_(::zserio::allocatorPropagatingCopy(other.m_roadLocationProviderDetails_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator))
{
}

::nds::characteristics::metadata::RoadCharacsLayerContent RoadCharacteristicsLayerMetadata::getContent() const
{
    return m_content_;
}

void RoadCharacteristicsLayerMetadata::setContent(::nds::characteristics::metadata::RoadCharacsLayerContent content_)
{
    m_content_ = content_;
}

::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& RoadCharacteristicsLayerMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& RoadCharacteristicsLayerMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadCharacteristicsLayerMetadata::setRoadRangeAttributeMetadata(const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadCharacteristicsLayerMetadata::setRoadRangeAttributeMetadata(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadCharacteristicsLayerMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadCharacteristicsLayerMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadCharacteristicsLayerMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& RoadCharacteristicsLayerMetadata::getRoadPositionAttributeMetadata()
{
    return m_roadPositionAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& RoadCharacteristicsLayerMetadata::getRoadPositionAttributeMetadata() const
{
    return m_roadPositionAttributeMetadata_.value();
}

void RoadCharacteristicsLayerMetadata::setRoadPositionAttributeMetadata(const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = roadPositionAttributeMetadata_;
}

void RoadCharacteristicsLayerMetadata::setRoadPositionAttributeMetadata(::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata&& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = ::std::move(roadPositionAttributeMetadata_);
}

bool RoadCharacteristicsLayerMetadata::isRoadPositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS);
}

bool RoadCharacteristicsLayerMetadata::isRoadPositionAttributeMetadataSet() const
{
    return m_roadPositionAttributeMetadata_.hasValue();
}

void RoadCharacteristicsLayerMetadata::resetRoadPositionAttributeMetadata()
{
    m_roadPositionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadCharacteristicsLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadCharacteristicsLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadCharacteristicsLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadCharacteristicsLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

::nds::characteristics::metadata::RoadLocationProviderDetails& RoadCharacteristicsLayerMetadata::getRoadLocationProviderDetails()
{
    return m_roadLocationProviderDetails_.value();
}

const ::nds::characteristics::metadata::RoadLocationProviderDetails& RoadCharacteristicsLayerMetadata::getRoadLocationProviderDetails() const
{
    return m_roadLocationProviderDetails_.value();
}

void RoadCharacteristicsLayerMetadata::setRoadLocationProviderDetails(const ::nds::characteristics::metadata::RoadLocationProviderDetails& roadLocationProviderDetails_)
{
    m_roadLocationProviderDetails_ = roadLocationProviderDetails_;
}

void RoadCharacteristicsLayerMetadata::setRoadLocationProviderDetails(::nds::characteristics::metadata::RoadLocationProviderDetails&& roadLocationProviderDetails_)
{
    m_roadLocationProviderDetails_ = ::std::move(roadLocationProviderDetails_);
}

bool RoadCharacteristicsLayerMetadata::isRoadLocationProviderDetailsUsed() const
{
    return (isRoadLocationProviderDetailsSet());
}

bool RoadCharacteristicsLayerMetadata::isRoadLocationProviderDetailsSet() const
{
    return m_roadLocationProviderDetails_.hasValue();
}

void RoadCharacteristicsLayerMetadata::resetRoadLocationProviderDetails()
{
    m_roadLocationProviderDetails_.reset();
}

::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata& RoadCharacteristicsLayerMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata& RoadCharacteristicsLayerMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void RoadCharacteristicsLayerMetadata::setTransitionAttributeMetadata(const ::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void RoadCharacteristicsLayerMetadata::setTransitionAttributeMetadata(::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool RoadCharacteristicsLayerMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS);
}

bool RoadCharacteristicsLayerMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void RoadCharacteristicsLayerMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

void RoadCharacteristicsLayerMetadata::initPackingContext(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().initPackingContext(context.getRoadPositionAttributeMetadata());
    }
    if (isRoadLocationProviderDetailsSet())
    {
        m_roadLocationProviderDetails_.value().initPackingContext(context.getRoadLocationProviderDetails());
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
}

size_t RoadCharacteristicsLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition += m_roadLocationProviderDetails_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadCharacteristicsLayerMetadata::bitSizeOf(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition += m_roadLocationProviderDetails_.value().bitSizeOf(context.getRoadLocationProviderDetails(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadCharacteristicsLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition = m_roadLocationProviderDetails_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadCharacteristicsLayerMetadata::initializeOffsets(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition = m_roadLocationProviderDetails_.value().initializeOffsets(context.getRoadLocationProviderDetails(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadCharacteristicsLayerMetadata::operator==(const RoadCharacteristicsLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isRoadPositionAttributeMetadataUsed() ? !other.isRoadPositionAttributeMetadataUsed() : (m_roadPositionAttributeMetadata_ == other.m_roadPositionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_) &&
                (!isRoadLocationProviderDetailsUsed() ? !other.isRoadLocationProviderDetailsUsed() : (m_roadLocationProviderDetails_ == other.m_roadLocationProviderDetails_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_));
    }

    return true;
}

uint32_t RoadCharacteristicsLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isRoadPositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);
    if (isRoadLocationProviderDetailsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationProviderDetails_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);

    return result;
}

void RoadCharacteristicsLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
    if (isRoadLocationProviderDetailsSet())
    {
        out.writeBool(true);
        m_roadLocationProviderDetails_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
}

void RoadCharacteristicsLayerMetadata::write(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(context.getRoadPositionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
    if (isRoadLocationProviderDetailsSet())
    {
        out.writeBool(true);
        m_roadLocationProviderDetails_.value().write(context.getRoadLocationProviderDetails(), out);
    }
    else
    {
        out.writeBool(false);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
}

void RoadCharacteristicsLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadCharacteristicsLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadCharacteristicsLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadCharacteristicsLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::characteristics::metadata::RoadCharacsLayerContent RoadCharacteristicsLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::RoadCharacsLayerContent(in);
}

::nds::characteristics::metadata::RoadCharacsLayerContent RoadCharacteristicsLayerMetadata::readContent(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::RoadCharacsLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata> RoadCharacteristicsLayerMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata>(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata> RoadCharacteristicsLayerMetadata::readRoadRangeAttributeMetadata(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata>(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata> RoadCharacteristicsLayerMetadata::readRoadPositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata>(::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata> RoadCharacteristicsLayerMetadata::readRoadPositionAttributeMetadata(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata>(::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata(context.getRoadPositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata>(::zserio::NullOpt);
}
RoadCharacteristicsLayerMetadata::ZserioArrayType_coveredRoadTypes RoadCharacteristicsLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadCharacteristicsLayerMetadata::ZserioArrayType_coveredRoadTypes RoadCharacteristicsLayerMetadata::readCoveredRoadTypes(RoadCharacteristicsLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> RoadCharacteristicsLayerMetadata::readRoadLocationProviderDetails(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::nds::characteristics::metadata::RoadLocationProviderDetails(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> RoadCharacteristicsLayerMetadata::readRoadLocationProviderDetails(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::nds::characteristics::metadata::RoadLocationProviderDetails(context.getRoadLocationProviderDetails(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata> RoadCharacteristicsLayerMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata>(::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata> RoadCharacteristicsLayerMetadata::readTransitionAttributeMetadata(RoadCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata>(::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/characteristics/metadata/RoadCharacteristicsLayerIndirectMetadata.h>
#include <nds/characteristics/metadata/RoadCharacsLayerContent.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

RoadCharacteristicsLayerIndirectMetadata::RoadCharacteristicsLayerIndirectMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::characteristics::metadata::RoadCharacsLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_roadPositionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator),
        m_roadLocationProviderDetails_(::zserio::NullOpt)
{
}

RoadCharacteristicsLayerIndirectMetadata::RoadCharacteristicsLayerIndirectMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator)),
        m_roadLocationProviderDetails_(readRoadLocationProviderDetails(in, allocator))
{
}

RoadCharacteristicsLayerIndirectMetadata::RoadCharacteristicsLayerIndirectMetadata(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator)),
        m_roadLocationProviderDetails_(readRoadLocationProviderDetails(context, in, allocator))
{
}

RoadCharacteristicsLayerIndirectMetadata::RoadCharacteristicsLayerIndirectMetadata(::zserio::PropagateAllocatorT,
        const RoadCharacteristicsLayerIndirectMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_roadPositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator)),
        m_roadLocationProviderDetails_(::zserio::allocatorPropagatingCopy(other.m_roadLocationProviderDetails_, allocator))
{
}

::nds::characteristics::metadata::RoadCharacsLayerContent RoadCharacteristicsLayerIndirectMetadata::getContent() const
{
    return m_content_;
}

void RoadCharacteristicsLayerIndirectMetadata::setContent(::nds::characteristics::metadata::RoadCharacsLayerContent content_)
{
    m_content_ = content_;
}

::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& RoadCharacteristicsLayerIndirectMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& RoadCharacteristicsLayerIndirectMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadCharacteristicsLayerIndirectMetadata::setRoadRangeAttributeMetadata(const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadCharacteristicsLayerIndirectMetadata::setRoadRangeAttributeMetadata(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadCharacteristicsLayerIndirectMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadCharacteristicsLayerIndirectMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadCharacteristicsLayerIndirectMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& RoadCharacteristicsLayerIndirectMetadata::getRoadPositionAttributeMetadata()
{
    return m_roadPositionAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& RoadCharacteristicsLayerIndirectMetadata::getRoadPositionAttributeMetadata() const
{
    return m_roadPositionAttributeMetadata_.value();
}

void RoadCharacteristicsLayerIndirectMetadata::setRoadPositionAttributeMetadata(const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = roadPositionAttributeMetadata_;
}

void RoadCharacteristicsLayerIndirectMetadata::setRoadPositionAttributeMetadata(::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata&& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = ::std::move(roadPositionAttributeMetadata_);
}

bool RoadCharacteristicsLayerIndirectMetadata::isRoadPositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS);
}

bool RoadCharacteristicsLayerIndirectMetadata::isRoadPositionAttributeMetadataSet() const
{
    return m_roadPositionAttributeMetadata_.hasValue();
}

void RoadCharacteristicsLayerIndirectMetadata::resetRoadPositionAttributeMetadata()
{
    m_roadPositionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadCharacteristicsLayerIndirectMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadCharacteristicsLayerIndirectMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadCharacteristicsLayerIndirectMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadCharacteristicsLayerIndirectMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

::nds::characteristics::metadata::RoadLocationProviderDetails& RoadCharacteristicsLayerIndirectMetadata::getRoadLocationProviderDetails()
{
    return m_roadLocationProviderDetails_.value();
}

const ::nds::characteristics::metadata::RoadLocationProviderDetails& RoadCharacteristicsLayerIndirectMetadata::getRoadLocationProviderDetails() const
{
    return m_roadLocationProviderDetails_.value();
}

void RoadCharacteristicsLayerIndirectMetadata::setRoadLocationProviderDetails(const ::nds::characteristics::metadata::RoadLocationProviderDetails& roadLocationProviderDetails_)
{
    m_roadLocationProviderDetails_ = roadLocationProviderDetails_;
}

void RoadCharacteristicsLayerIndirectMetadata::setRoadLocationProviderDetails(::nds::characteristics::metadata::RoadLocationProviderDetails&& roadLocationProviderDetails_)
{
    m_roadLocationProviderDetails_ = ::std::move(roadLocationProviderDetails_);
}

bool RoadCharacteristicsLayerIndirectMetadata::isRoadLocationProviderDetailsUsed() const
{
    return (isRoadLocationProviderDetailsSet());
}

bool RoadCharacteristicsLayerIndirectMetadata::isRoadLocationProviderDetailsSet() const
{
    return m_roadLocationProviderDetails_.hasValue();
}

void RoadCharacteristicsLayerIndirectMetadata::resetRoadLocationProviderDetails()
{
    m_roadLocationProviderDetails_.reset();
}

void RoadCharacteristicsLayerIndirectMetadata::initPackingContext(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().initPackingContext(context.getRoadPositionAttributeMetadata());
    }
    if (isRoadLocationProviderDetailsSet())
    {
        m_roadLocationProviderDetails_.value().initPackingContext(context.getRoadLocationProviderDetails());
    }
}

size_t RoadCharacteristicsLayerIndirectMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition += m_roadLocationProviderDetails_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadCharacteristicsLayerIndirectMetadata::bitSizeOf(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition += m_roadLocationProviderDetails_.value().bitSizeOf(context.getRoadLocationProviderDetails(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadCharacteristicsLayerIndirectMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition = m_roadLocationProviderDetails_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadCharacteristicsLayerIndirectMetadata::initializeOffsets(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition = m_roadLocationProviderDetails_.value().initializeOffsets(context.getRoadLocationProviderDetails(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadCharacteristicsLayerIndirectMetadata::operator==(const RoadCharacteristicsLayerIndirectMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isRoadPositionAttributeMetadataUsed() ? !other.isRoadPositionAttributeMetadataUsed() : (m_roadPositionAttributeMetadata_ == other.m_roadPositionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_) &&
                (!isRoadLocationProviderDetailsUsed() ? !other.isRoadLocationProviderDetailsUsed() : (m_roadLocationProviderDetails_ == other.m_roadLocationProviderDetails_));
    }

    return true;
}

uint32_t RoadCharacteristicsLayerIndirectMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isRoadPositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);
    if (isRoadLocationProviderDetailsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationProviderDetails_);

    return result;
}

void RoadCharacteristicsLayerIndirectMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
    if (isRoadLocationProviderDetailsSet())
    {
        out.writeBool(true);
        m_roadLocationProviderDetails_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
}

void RoadCharacteristicsLayerIndirectMetadata::write(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(context.getRoadPositionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
    if (isRoadLocationProviderDetailsSet())
    {
        out.writeBool(true);
        m_roadLocationProviderDetails_.value().write(context.getRoadLocationProviderDetails(), out);
    }
    else
    {
        out.writeBool(false);
    }
}

void RoadCharacteristicsLayerIndirectMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadCharacteristicsLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadCharacteristicsLayerIndirectMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadCharacteristicsLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::characteristics::metadata::RoadCharacsLayerContent RoadCharacteristicsLayerIndirectMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::RoadCharacsLayerContent(in);
}

::nds::characteristics::metadata::RoadCharacsLayerContent RoadCharacteristicsLayerIndirectMetadata::readContent(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::RoadCharacsLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata> RoadCharacteristicsLayerIndirectMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata>(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata> RoadCharacteristicsLayerIndirectMetadata::readRoadRangeAttributeMetadata(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata>(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata> RoadCharacteristicsLayerIndirectMetadata::readRoadPositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata>(::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata> RoadCharacteristicsLayerIndirectMetadata::readRoadPositionAttributeMetadata(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS) == ::nds::characteristics::metadata::RoadCharacsLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata>(::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata(context.getRoadPositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata>(::zserio::NullOpt);
}
RoadCharacteristicsLayerIndirectMetadata::ZserioArrayType_coveredRoadTypes RoadCharacteristicsLayerIndirectMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadCharacteristicsLayerIndirectMetadata::ZserioArrayType_coveredRoadTypes RoadCharacteristicsLayerIndirectMetadata::readCoveredRoadTypes(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> RoadCharacteristicsLayerIndirectMetadata::readRoadLocationProviderDetails(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::nds::characteristics::metadata::RoadLocationProviderDetails(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> RoadCharacteristicsLayerIndirectMetadata::readRoadLocationProviderDetails(RoadCharacteristicsLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::nds::characteristics::metadata::RoadLocationProviderDetails(context.getRoadLocationProviderDetails(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/metadata/RoadLocationCharacteristicsLayerMetadata.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

RoadLocationCharacteristicsLayerMetadata::RoadLocationCharacteristicsLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::characteristics::metadata::RoadLocationCharacsLayerContent()),
        m_roadLocationAttributeMetadata_(allocator),
        m_coveredRoadTypes_(allocator)
{
}

RoadLocationCharacteristicsLayerMetadata::RoadLocationCharacteristicsLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadLocationAttributeMetadata_(readRoadLocationAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator))
{
}

RoadLocationCharacteristicsLayerMetadata::RoadLocationCharacteristicsLayerMetadata(RoadLocationCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadLocationAttributeMetadata_(readRoadLocationAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator))
{
}

RoadLocationCharacteristicsLayerMetadata::RoadLocationCharacteristicsLayerMetadata(::zserio::PropagateAllocatorT,
        const RoadLocationCharacteristicsLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadLocationAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadLocationAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator))
{
}

::nds::characteristics::metadata::RoadLocationCharacsLayerContent RoadLocationCharacteristicsLayerMetadata::getContent() const
{
    return m_content_;
}

void RoadLocationCharacteristicsLayerMetadata::setContent(::nds::characteristics::metadata::RoadLocationCharacsLayerContent content_)
{
    m_content_ = content_;
}

::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& RoadLocationCharacteristicsLayerMetadata::getRoadLocationAttributeMetadata()
{
    return m_roadLocationAttributeMetadata_;
}

const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& RoadLocationCharacteristicsLayerMetadata::getRoadLocationAttributeMetadata() const
{
    return m_roadLocationAttributeMetadata_;
}

void RoadLocationCharacteristicsLayerMetadata::setRoadLocationAttributeMetadata(const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& roadLocationAttributeMetadata_)
{
    m_roadLocationAttributeMetadata_ = roadLocationAttributeMetadata_;
}

void RoadLocationCharacteristicsLayerMetadata::setRoadLocationAttributeMetadata(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata&& roadLocationAttributeMetadata_)
{
    m_roadLocationAttributeMetadata_ = ::std::move(roadLocationAttributeMetadata_);
}

::zserio::vector<::nds::core::types::RoadType>& RoadLocationCharacteristicsLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadLocationCharacteristicsLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadLocationCharacteristicsLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadLocationCharacteristicsLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

void RoadLocationCharacteristicsLayerMetadata::initPackingContext(RoadLocationCharacteristicsLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    m_roadLocationAttributeMetadata_.initPackingContext(context.getRoadLocationAttributeMetadata());
}

size_t RoadLocationCharacteristicsLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += m_roadLocationAttributeMetadata_.bitSizeOf(endBitPosition);
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadLocationCharacteristicsLayerMetadata::bitSizeOf(RoadLocationCharacteristicsLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += m_roadLocationAttributeMetadata_.bitSizeOf(context.getRoadLocationAttributeMetadata(), endBitPosition);
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadLocationCharacteristicsLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition = m_roadLocationAttributeMetadata_.initializeOffsets(endBitPosition);
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t RoadLocationCharacteristicsLayerMetadata::initializeOffsets(RoadLocationCharacteristicsLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition = m_roadLocationAttributeMetadata_.initializeOffsets(context.getRoadLocationAttributeMetadata(), endBitPosition);
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool RoadLocationCharacteristicsLayerMetadata::operator==(const RoadLocationCharacteristicsLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_roadLocationAttributeMetadata_ == other.m_roadLocationAttributeMetadata_) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_);
    }

    return true;
}

uint32_t RoadLocationCharacteristicsLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_roadLocationAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);

    return result;
}

void RoadLocationCharacteristicsLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    m_roadLocationAttributeMetadata_.write(out);
    m_coveredRoadTypes_.write(*this, out);
}

void RoadLocationCharacteristicsLayerMetadata::write(RoadLocationCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    m_roadLocationAttributeMetadata_.write(context.getRoadLocationAttributeMetadata(), out);
    m_coveredRoadTypes_.writePacked(*this, out);
}

void RoadLocationCharacteristicsLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadLocationCharacteristicsLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadLocationCharacteristicsLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadLocationCharacteristicsLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::characteristics::metadata::RoadLocationCharacsLayerContent RoadLocationCharacteristicsLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::RoadLocationCharacsLayerContent(in);
}

::nds::characteristics::metadata::RoadLocationCharacsLayerContent RoadLocationCharacteristicsLayerMetadata::readContent(RoadLocationCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::RoadLocationCharacsLayerContent(context.getContent(), in);
}
::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata RoadLocationCharacteristicsLayerMetadata::readRoadLocationAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata(in, allocator);
}

::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata RoadLocationCharacteristicsLayerMetadata::readRoadLocationAttributeMetadata(RoadLocationCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata(context.getRoadLocationAttributeMetadata(), in, allocator);
}
RoadLocationCharacteristicsLayerMetadata::ZserioArrayType_coveredRoadTypes RoadLocationCharacteristicsLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadLocationCharacteristicsLayerMetadata::ZserioArrayType_coveredRoadTypes RoadLocationCharacteristicsLayerMetadata::readCoveredRoadTypes(RoadLocationCharacteristicsLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/characteristics/metadata/LaneCharacteristicsLayerMetadata.h>
#include <nds/characteristics/metadata/LaneCharacsLayerContent.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

LaneCharacteristicsLayerMetadata::LaneCharacteristicsLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::characteristics::metadata::LaneCharacsLayerContent()),
        m_laneRangeAttributeMetadata_(::zserio::NullOpt),
        m_lanePositionAttributeMetadata_(::zserio::NullOpt),
        m_coveredLaneTypes_(allocator),
        m_roadLocationProviderDetails_(::zserio::NullOpt)
{
}

LaneCharacteristicsLayerMetadata::LaneCharacteristicsLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(in, allocator)),
        m_lanePositionAttributeMetadata_(readLanePositionAttributeMetadata(in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(in, allocator)),
        m_roadLocationProviderDetails_(readRoadLocationProviderDetails(in, allocator))
{
}

LaneCharacteristicsLayerMetadata::LaneCharacteristicsLayerMetadata(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(context, in, allocator)),
        m_lanePositionAttributeMetadata_(readLanePositionAttributeMetadata(context, in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(context, in, allocator)),
        m_roadLocationProviderDetails_(readRoadLocationProviderDetails(context, in, allocator))
{
}

LaneCharacteristicsLayerMetadata::LaneCharacteristicsLayerMetadata(::zserio::PropagateAllocatorT,
        const LaneCharacteristicsLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMetadata_, allocator)),
        m_lanePositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeMetadata_, allocator)),
        m_coveredLaneTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredLaneTypes_, allocator)),
        m_roadLocationProviderDetails_(::zserio::allocatorPropagatingCopy(other.m_roadLocationProviderDetails_, allocator))
{
}

::nds::characteristics::metadata::LaneCharacsLayerContent LaneCharacteristicsLayerMetadata::getContent() const
{
    return m_content_;
}

void LaneCharacteristicsLayerMetadata::setContent(::nds::characteristics::metadata::LaneCharacsLayerContent content_)
{
    m_content_ = content_;
}

::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata& LaneCharacteristicsLayerMetadata::getLaneRangeAttributeMetadata()
{
    return m_laneRangeAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata& LaneCharacteristicsLayerMetadata::getLaneRangeAttributeMetadata() const
{
    return m_laneRangeAttributeMetadata_.value();
}

void LaneCharacteristicsLayerMetadata::setLaneRangeAttributeMetadata(const ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = laneRangeAttributeMetadata_;
}

void LaneCharacteristicsLayerMetadata::setLaneRangeAttributeMetadata(::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = ::std::move(laneRangeAttributeMetadata_);
}

bool LaneCharacteristicsLayerMetadata::isLaneRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneCharacteristicsLayerMetadata::isLaneRangeAttributeMetadataSet() const
{
    return m_laneRangeAttributeMetadata_.hasValue();
}

void LaneCharacteristicsLayerMetadata::resetLaneRangeAttributeMetadata()
{
    m_laneRangeAttributeMetadata_.reset();
}

::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata& LaneCharacteristicsLayerMetadata::getLanePositionAttributeMetadata()
{
    return m_lanePositionAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata& LaneCharacteristicsLayerMetadata::getLanePositionAttributeMetadata() const
{
    return m_lanePositionAttributeMetadata_.value();
}

void LaneCharacteristicsLayerMetadata::setLanePositionAttributeMetadata(const ::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata& lanePositionAttributeMetadata_)
{
    m_lanePositionAttributeMetadata_ = lanePositionAttributeMetadata_;
}

void LaneCharacteristicsLayerMetadata::setLanePositionAttributeMetadata(::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata&& lanePositionAttributeMetadata_)
{
    m_lanePositionAttributeMetadata_ = ::std::move(lanePositionAttributeMetadata_);
}

bool LaneCharacteristicsLayerMetadata::isLanePositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS);
}

bool LaneCharacteristicsLayerMetadata::isLanePositionAttributeMetadataSet() const
{
    return m_lanePositionAttributeMetadata_.hasValue();
}

void LaneCharacteristicsLayerMetadata::resetLanePositionAttributeMetadata()
{
    m_lanePositionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::LaneType>& LaneCharacteristicsLayerMetadata::getCoveredLaneTypes()
{
    return m_coveredLaneTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::LaneType>& LaneCharacteristicsLayerMetadata::getCoveredLaneTypes() const
{
    return m_coveredLaneTypes_.getRawArray();
}

void LaneCharacteristicsLayerMetadata::setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(coveredLaneTypes_);
}

void LaneCharacteristicsLayerMetadata::setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(std::move(coveredLaneTypes_));
}

::nds::characteristics::metadata::RoadLocationProviderDetails& LaneCharacteristicsLayerMetadata::getRoadLocationProviderDetails()
{
    return m_roadLocationProviderDetails_.value();
}

const ::nds::characteristics::metadata::RoadLocationProviderDetails& LaneCharacteristicsLayerMetadata::getRoadLocationProviderDetails() const
{
    return m_roadLocationProviderDetails_.value();
}

void LaneCharacteristicsLayerMetadata::setRoadLocationProviderDetails(const ::nds::characteristics::metadata::RoadLocationProviderDetails& roadLocationProviderDetails_)
{
    m_roadLocationProviderDetails_ = roadLocationProviderDetails_;
}

void LaneCharacteristicsLayerMetadata::setRoadLocationProviderDetails(::nds::characteristics::metadata::RoadLocationProviderDetails&& roadLocationProviderDetails_)
{
    m_roadLocationProviderDetails_ = ::std::move(roadLocationProviderDetails_);
}

bool LaneCharacteristicsLayerMetadata::isRoadLocationProviderDetailsUsed() const
{
    return (isRoadLocationProviderDetailsSet());
}

bool LaneCharacteristicsLayerMetadata::isRoadLocationProviderDetailsSet() const
{
    return m_roadLocationProviderDetails_.hasValue();
}

void LaneCharacteristicsLayerMetadata::resetRoadLocationProviderDetails()
{
    m_roadLocationProviderDetails_.reset();
}

void LaneCharacteristicsLayerMetadata::initPackingContext(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().initPackingContext(context.getLaneRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().initPackingContext(context.getLanePositionAttributeMetadata());
    }
    if (isRoadLocationProviderDetailsSet())
    {
        m_roadLocationProviderDetails_.value().initPackingContext(context.getRoadLocationProviderDetails());
    }
}

size_t LaneCharacteristicsLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOf(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition += m_roadLocationProviderDetails_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneCharacteristicsLayerMetadata::bitSizeOf(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeMetadata_.value().bitSizeOf(context.getLanePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition += m_roadLocationProviderDetails_.value().bitSizeOf(context.getRoadLocationProviderDetails(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneCharacteristicsLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsets(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition = m_roadLocationProviderDetails_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneCharacteristicsLayerMetadata::initializeOffsets(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeMetadata_.value().initializeOffsets(context.getLanePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition = m_roadLocationProviderDetails_.value().initializeOffsets(context.getRoadLocationProviderDetails(), endBitPosition);
    }

    return endBitPosition;
}

bool LaneCharacteristicsLayerMetadata::operator==(const LaneCharacteristicsLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMetadataUsed() ? !other.isLaneRangeAttributeMetadataUsed() : (m_laneRangeAttributeMetadata_ == other.m_laneRangeAttributeMetadata_)) &&
                (!isLanePositionAttributeMetadataUsed() ? !other.isLanePositionAttributeMetadataUsed() : (m_lanePositionAttributeMetadata_ == other.m_lanePositionAttributeMetadata_)) &&
                (m_coveredLaneTypes_ == other.m_coveredLaneTypes_) &&
                (!isRoadLocationProviderDetailsUsed() ? !other.isRoadLocationProviderDetailsUsed() : (m_roadLocationProviderDetails_ == other.m_roadLocationProviderDetails_));
    }

    return true;
}

uint32_t LaneCharacteristicsLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMetadata_);
    if (isLanePositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredLaneTypes_);
    if (isRoadLocationProviderDetailsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationProviderDetails_);

    return result;
}

void LaneCharacteristicsLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().write(out);
    }
    m_coveredLaneTypes_.write(*this, out);
    if (isRoadLocationProviderDetailsSet())
    {
        out.writeBool(true);
        m_roadLocationProviderDetails_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
}

void LaneCharacteristicsLayerMetadata::write(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(context.getLaneRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().write(context.getLanePositionAttributeMetadata(), out);
    }
    m_coveredLaneTypes_.writePacked(*this, out);
    if (isRoadLocationProviderDetailsSet())
    {
        out.writeBool(true);
        m_roadLocationProviderDetails_.value().write(context.getRoadLocationProviderDetails(), out);
    }
    else
    {
        out.writeBool(false);
    }
}

void LaneCharacteristicsLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneCharacteristicsLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneCharacteristicsLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneCharacteristicsLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::nds::core::types::LaneType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::characteristics::metadata::LaneCharacsLayerContent LaneCharacteristicsLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::LaneCharacsLayerContent(in);
}

::nds::characteristics::metadata::LaneCharacsLayerContent LaneCharacteristicsLayerMetadata::readContent(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::LaneCharacsLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata> LaneCharacteristicsLayerMetadata::readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata>(::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata> LaneCharacteristicsLayerMetadata::readLaneRangeAttributeMetadata(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata>(::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata(context.getLaneRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata> LaneCharacteristicsLayerMetadata::readLanePositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata>(::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata> LaneCharacteristicsLayerMetadata::readLanePositionAttributeMetadata(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS) == ::nds::characteristics::metadata::LaneCharacsLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata>(::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata(context.getLanePositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMetadata>(::zserio::NullOpt);
}
LaneCharacteristicsLayerMetadata::ZserioArrayType_coveredLaneTypes LaneCharacteristicsLayerMetadata::readCoveredLaneTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

LaneCharacteristicsLayerMetadata::ZserioArrayType_coveredLaneTypes LaneCharacteristicsLayerMetadata::readCoveredLaneTypes(LaneCharacteristicsLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> LaneCharacteristicsLayerMetadata::readRoadLocationProviderDetails(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::nds::characteristics::metadata::RoadLocationProviderDetails(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> LaneCharacteristicsLayerMetadata::readRoadLocationProviderDetails(LaneCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::nds::characteristics::metadata::RoadLocationProviderDetails(context.getRoadLocationProviderDetails(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/characteristics/metadata/DisplayLineCharacteristicsLayerMetadata.h>
#include <nds/characteristics/metadata/DisplayLineCharacsLayerContent.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

DisplayLineCharacteristicsLayerMetadata::DisplayLineCharacteristicsLayerMetadata(const allocator_type&) noexcept :
        m_content_(::nds::characteristics::metadata::DisplayLineCharacsLayerContent()),
        m_displayLineRangeAttributeMetadata_(::zserio::NullOpt),
        m_displayLinePositionAttributeMetadata_(::zserio::NullOpt),
        m_roadLocationProviderDetails_(::zserio::NullOpt)
{
}

DisplayLineCharacteristicsLayerMetadata::DisplayLineCharacteristicsLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_displayLineRangeAttributeMetadata_(readDisplayLineRangeAttributeMetadata(in, allocator)),
        m_displayLinePositionAttributeMetadata_(readDisplayLinePositionAttributeMetadata(in, allocator)),
        m_roadLocationProviderDetails_(readRoadLocationProviderDetails(in, allocator))
{
}

DisplayLineCharacteristicsLayerMetadata::DisplayLineCharacteristicsLayerMetadata(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_displayLineRangeAttributeMetadata_(readDisplayLineRangeAttributeMetadata(context, in, allocator)),
        m_displayLinePositionAttributeMetadata_(readDisplayLinePositionAttributeMetadata(context, in, allocator)),
        m_roadLocationProviderDetails_(readRoadLocationProviderDetails(context, in, allocator))
{
}

DisplayLineCharacteristicsLayerMetadata::DisplayLineCharacteristicsLayerMetadata(::zserio::PropagateAllocatorT,
        const DisplayLineCharacteristicsLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_displayLineRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeMetadata_, allocator)),
        m_displayLinePositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayLinePositionAttributeMetadata_, allocator)),
        m_roadLocationProviderDetails_(::zserio::allocatorPropagatingCopy(other.m_roadLocationProviderDetails_, allocator))
{
}

::nds::characteristics::metadata::DisplayLineCharacsLayerContent DisplayLineCharacteristicsLayerMetadata::getContent() const
{
    return m_content_;
}

void DisplayLineCharacteristicsLayerMetadata::setContent(::nds::characteristics::metadata::DisplayLineCharacsLayerContent content_)
{
    m_content_ = content_;
}

::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata& DisplayLineCharacteristicsLayerMetadata::getDisplayLineRangeAttributeMetadata()
{
    return m_displayLineRangeAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata& DisplayLineCharacteristicsLayerMetadata::getDisplayLineRangeAttributeMetadata() const
{
    return m_displayLineRangeAttributeMetadata_.value();
}

void DisplayLineCharacteristicsLayerMetadata::setDisplayLineRangeAttributeMetadata(const ::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata& displayLineRangeAttributeMetadata_)
{
    m_displayLineRangeAttributeMetadata_ = displayLineRangeAttributeMetadata_;
}

void DisplayLineCharacteristicsLayerMetadata::setDisplayLineRangeAttributeMetadata(::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata&& displayLineRangeAttributeMetadata_)
{
    m_displayLineRangeAttributeMetadata_ = ::std::move(displayLineRangeAttributeMetadata_);
}

bool DisplayLineCharacteristicsLayerMetadata::isDisplayLineRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS);
}

bool DisplayLineCharacteristicsLayerMetadata::isDisplayLineRangeAttributeMetadataSet() const
{
    return m_displayLineRangeAttributeMetadata_.hasValue();
}

void DisplayLineCharacteristicsLayerMetadata::resetDisplayLineRangeAttributeMetadata()
{
    m_displayLineRangeAttributeMetadata_.reset();
}

::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata& DisplayLineCharacteristicsLayerMetadata::getDisplayLinePositionAttributeMetadata()
{
    return m_displayLinePositionAttributeMetadata_.value();
}

const ::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata& DisplayLineCharacteristicsLayerMetadata::getDisplayLinePositionAttributeMetadata() const
{
    return m_displayLinePositionAttributeMetadata_.value();
}

void DisplayLineCharacteristicsLayerMetadata::setDisplayLinePositionAttributeMetadata(const ::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata& displayLinePositionAttributeMetadata_)
{
    m_displayLinePositionAttributeMetadata_ = displayLinePositionAttributeMetadata_;
}

void DisplayLineCharacteristicsLayerMetadata::setDisplayLinePositionAttributeMetadata(::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata&& displayLinePositionAttributeMetadata_)
{
    m_displayLinePositionAttributeMetadata_ = ::std::move(displayLinePositionAttributeMetadata_);
}

bool DisplayLineCharacteristicsLayerMetadata::isDisplayLinePositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS);
}

bool DisplayLineCharacteristicsLayerMetadata::isDisplayLinePositionAttributeMetadataSet() const
{
    return m_displayLinePositionAttributeMetadata_.hasValue();
}

void DisplayLineCharacteristicsLayerMetadata::resetDisplayLinePositionAttributeMetadata()
{
    m_displayLinePositionAttributeMetadata_.reset();
}

::nds::characteristics::metadata::RoadLocationProviderDetails& DisplayLineCharacteristicsLayerMetadata::getRoadLocationProviderDetails()
{
    return m_roadLocationProviderDetails_.value();
}

const ::nds::characteristics::metadata::RoadLocationProviderDetails& DisplayLineCharacteristicsLayerMetadata::getRoadLocationProviderDetails() const
{
    return m_roadLocationProviderDetails_.value();
}

void DisplayLineCharacteristicsLayerMetadata::setRoadLocationProviderDetails(const ::nds::characteristics::metadata::RoadLocationProviderDetails& roadLocationProviderDetails_)
{
    m_roadLocationProviderDetails_ = roadLocationProviderDetails_;
}

void DisplayLineCharacteristicsLayerMetadata::setRoadLocationProviderDetails(::nds::characteristics::metadata::RoadLocationProviderDetails&& roadLocationProviderDetails_)
{
    m_roadLocationProviderDetails_ = ::std::move(roadLocationProviderDetails_);
}

bool DisplayLineCharacteristicsLayerMetadata::isRoadLocationProviderDetailsUsed() const
{
    return (isRoadLocationProviderDetailsSet());
}

bool DisplayLineCharacteristicsLayerMetadata::isRoadLocationProviderDetailsSet() const
{
    return m_roadLocationProviderDetails_.hasValue();
}

void DisplayLineCharacteristicsLayerMetadata::resetRoadLocationProviderDetails()
{
    m_roadLocationProviderDetails_.reset();
}

void DisplayLineCharacteristicsLayerMetadata::initPackingContext(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().initPackingContext(context.getDisplayLineRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        m_displayLinePositionAttributeMetadata_.value().initPackingContext(context.getDisplayLinePositionAttributeMetadata());
    }
    if (isRoadLocationProviderDetailsSet())
    {
        m_roadLocationProviderDetails_.value().initPackingContext(context.getRoadLocationProviderDetails());
    }
}

size_t DisplayLineCharacteristicsLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition += m_displayLinePositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition += m_roadLocationProviderDetails_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineCharacteristicsLayerMetadata::bitSizeOf(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeMetadata_.value().bitSizeOf(context.getDisplayLineRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition += m_displayLinePositionAttributeMetadata_.value().bitSizeOf(context.getDisplayLinePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition += m_roadLocationProviderDetails_.value().bitSizeOf(context.getRoadLocationProviderDetails(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineCharacteristicsLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition = m_displayLinePositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition = m_roadLocationProviderDetails_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t DisplayLineCharacteristicsLayerMetadata::initializeOffsets(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeMetadata_.value().initializeOffsets(context.getDisplayLineRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition = m_displayLinePositionAttributeMetadata_.value().initializeOffsets(context.getDisplayLinePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += 1;
    if (isRoadLocationProviderDetailsSet())
    {
        endBitPosition = m_roadLocationProviderDetails_.value().initializeOffsets(context.getRoadLocationProviderDetails(), endBitPosition);
    }

    return endBitPosition;
}

bool DisplayLineCharacteristicsLayerMetadata::operator==(const DisplayLineCharacteristicsLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isDisplayLineRangeAttributeMetadataUsed() ? !other.isDisplayLineRangeAttributeMetadataUsed() : (m_displayLineRangeAttributeMetadata_ == other.m_displayLineRangeAttributeMetadata_)) &&
                (!isDisplayLinePositionAttributeMetadataUsed() ? !other.isDisplayLinePositionAttributeMetadataUsed() : (m_displayLinePositionAttributeMetadata_ == other.m_displayLinePositionAttributeMetadata_)) &&
                (!isRoadLocationProviderDetailsUsed() ? !other.isRoadLocationProviderDetailsUsed() : (m_roadLocationProviderDetails_ == other.m_roadLocationProviderDetails_));
    }

    return true;
}

uint32_t DisplayLineCharacteristicsLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isDisplayLineRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeMetadata_);
    if (isDisplayLinePositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayLinePositionAttributeMetadata_);
    if (isRoadLocationProviderDetailsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationProviderDetails_);

    return result;
}

void DisplayLineCharacteristicsLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        m_displayLinePositionAttributeMetadata_.value().write(out);
    }
    if (isRoadLocationProviderDetailsSet())
    {
        out.writeBool(true);
        m_roadLocationProviderDetails_.value().write(out);
    }
    else
    {
        out.writeBool(false);
    }
}

void DisplayLineCharacteristicsLayerMetadata::write(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().write(context.getDisplayLineRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        m_displayLinePositionAttributeMetadata_.value().write(context.getDisplayLinePositionAttributeMetadata(), out);
    }
    if (isRoadLocationProviderDetailsSet())
    {
        out.writeBool(true);
        m_roadLocationProviderDetails_.value().write(context.getRoadLocationProviderDetails(), out);
    }
    else
    {
        out.writeBool(false);
    }
}

::nds::characteristics::metadata::DisplayLineCharacsLayerContent DisplayLineCharacteristicsLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::DisplayLineCharacsLayerContent(in);
}

::nds::characteristics::metadata::DisplayLineCharacsLayerContent DisplayLineCharacteristicsLayerMetadata::readContent(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::characteristics::metadata::DisplayLineCharacsLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata> DisplayLineCharacteristicsLayerMetadata::readDisplayLineRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata>(::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata> DisplayLineCharacteristicsLayerMetadata::readDisplayLineRangeAttributeMetadata(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata>(::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata(context.getDisplayLineRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLineRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata> DisplayLineCharacteristicsLayerMetadata::readDisplayLinePositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata>(::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata> DisplayLineCharacteristicsLayerMetadata::readDisplayLinePositionAttributeMetadata(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::characteristics::metadata::DisplayLineCharacsLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata>(::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata(context.getDisplayLinePositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsDisplayLinePositionAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> DisplayLineCharacteristicsLayerMetadata::readRoadLocationProviderDetails(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::nds::characteristics::metadata::RoadLocationProviderDetails(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> DisplayLineCharacteristicsLayerMetadata::readRoadLocationProviderDetails(DisplayLineCharacteristicsLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::nds::characteristics::metadata::RoadLocationProviderDetails(context.getRoadLocationProviderDetails(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/characteristics/metadata/RoadLocationProviderDetails.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

RoadLocationProviderDetails::RoadLocationProviderDetails(const allocator_type& allocator) noexcept :
        m_providerName_(allocator),
        m_locationVersion_(allocator),
        m_creationTime_(allocator)
{
}

RoadLocationProviderDetails::RoadLocationProviderDetails(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_providerName_(readProviderName(in, allocator)),
        m_locationVersion_(readLocationVersion(in, allocator)),
        m_creationTime_(readCreationTime(in, allocator))
{
}

RoadLocationProviderDetails::RoadLocationProviderDetails(RoadLocationProviderDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_providerName_(readProviderName(in, allocator)),
        m_locationVersion_(readLocationVersion(in, allocator)),
        m_creationTime_(readCreationTime(context, in, allocator))
{
}

RoadLocationProviderDetails::RoadLocationProviderDetails(::zserio::PropagateAllocatorT,
        const RoadLocationProviderDetails& other, const allocator_type& allocator) :
        m_providerName_(::zserio::allocatorPropagatingCopy(other.m_providerName_, allocator)),
        m_locationVersion_(::zserio::allocatorPropagatingCopy(other.m_locationVersion_, allocator)),
        m_creationTime_(::zserio::allocatorPropagatingCopy(other.m_creationTime_, allocator))
{
}

::zserio::string<>& RoadLocationProviderDetails::getProviderName()
{
    return m_providerName_;
}

const ::zserio::string<>& RoadLocationProviderDetails::getProviderName() const
{
    return m_providerName_;
}

void RoadLocationProviderDetails::setProviderName(const ::zserio::string<>& providerName_)
{
    m_providerName_ = providerName_;
}

void RoadLocationProviderDetails::setProviderName(::zserio::string<>&& providerName_)
{
    m_providerName_ = ::std::move(providerName_);
}

::zserio::string<>& RoadLocationProviderDetails::getLocationVersion()
{
    return m_locationVersion_;
}

const ::zserio::string<>& RoadLocationProviderDetails::getLocationVersion() const
{
    return m_locationVersion_;
}

void RoadLocationProviderDetails::setLocationVersion(const ::zserio::string<>& locationVersion_)
{
    m_locationVersion_ = locationVersion_;
}

void RoadLocationProviderDetails::setLocationVersion(::zserio::string<>&& locationVersion_)
{
    m_locationVersion_ = ::std::move(locationVersion_);
}

::nds::core::types::TimeStamp& RoadLocationProviderDetails::getCreationTime()
{
    return m_creationTime_;
}

const ::nds::core::types::TimeStamp& RoadLocationProviderDetails::getCreationTime() const
{
    return m_creationTime_;
}

void RoadLocationProviderDetails::setCreationTime(const ::nds::core::types::TimeStamp& creationTime_)
{
    m_creationTime_ = creationTime_;
}

void RoadLocationProviderDetails::setCreationTime(::nds::core::types::TimeStamp&& creationTime_)
{
    m_creationTime_ = ::std::move(creationTime_);
}

void RoadLocationProviderDetails::initPackingContext(RoadLocationProviderDetails::ZserioPackingContext& context) const
{
    m_creationTime_.initPackingContext(context.getCreationTime());
}

size_t RoadLocationProviderDetails::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfString(m_providerName_);
    endBitPosition += ::zserio::bitSizeOfString(m_locationVersion_);
    endBitPosition += m_creationTime_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadLocationProviderDetails::bitSizeOf(RoadLocationProviderDetails::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfString(m_providerName_);
    endBitPosition += ::zserio::bitSizeOfString(m_locationVersion_);
    endBitPosition += m_creationTime_.bitSizeOf(context.getCreationTime(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RoadLocationProviderDetails::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfString(m_providerName_);
    endBitPosition += ::zserio::bitSizeOfString(m_locationVersion_);
    endBitPosition = m_creationTime_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t RoadLocationProviderDetails::initializeOffsets(RoadLocationProviderDetails::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfString(m_providerName_);
    endBitPosition += ::zserio::bitSizeOfString(m_locationVersion_);
    endBitPosition = m_creationTime_.initializeOffsets(context.getCreationTime(), endBitPosition);

    return endBitPosition;
}

bool RoadLocationProviderDetails::operator==(const RoadLocationProviderDetails& other) const
{
    if (this != &other)
    {
        return
                (m_providerName_ == other.m_providerName_) &&
                (m_locationVersion_ == other.m_locationVersion_) &&
                (m_creationTime_ == other.m_creationTime_);
    }

    return true;
}

uint32_t RoadLocationProviderDetails::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_providerName_);
    result = ::zserio::calcHashCode(result, m_locationVersion_);
    result = ::zserio::calcHashCode(result, m_creationTime_);

    return result;
}

void RoadLocationProviderDetails::write(::zserio::BitStreamWriter& out) const
{
    out.writeString(m_providerName_);
    out.writeString(m_locationVersion_);
    m_creationTime_.write(out);
}

void RoadLocationProviderDetails::write(RoadLocationProviderDetails::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    out.writeString(m_providerName_);
    out.writeString(m_locationVersion_);
    m_creationTime_.write(context.getCreationTime(), out);
}

::zserio::string<> RoadLocationProviderDetails::readProviderName(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::string<>>(in.readString(allocator));
}
::zserio::string<> RoadLocationProviderDetails::readLocationVersion(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::string<>>(in.readString(allocator));
}
::nds::core::types::TimeStamp RoadLocationProviderDetails::readCreationTime(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::types::TimeStamp(in, allocator);
}

::nds::core::types::TimeStamp RoadLocationProviderDetails::readCreationTime(RoadLocationProviderDetails::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::types::TimeStamp(context.getCreationTime(), in, allocator);
}

} // namespace metadata
} // namespace characteristics
} // namespace nds
