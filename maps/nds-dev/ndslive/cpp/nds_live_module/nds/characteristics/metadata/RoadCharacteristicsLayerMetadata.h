/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_METADATA_ROAD_CHARACTERISTICS_LAYER_METADATA_H
#define NDS_CHARACTERISTICS_METADATA_ROAD_CHARACTERISTICS_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/characteristics/instantiations/CharacsRoadPositionAttributeMetadata.h>
#include <nds/characteristics/instantiations/CharacsRoadRangeAttributeMetadata.h>
#include <nds/characteristics/instantiations/CharacsTransitionAttributeMetadata.h>
#include <nds/characteristics/metadata/RoadCharacsLayerContent.h>
#include <nds/characteristics/metadata/RoadLocationProviderDetails.h>
#include <nds/core/types/RoadType.h>

namespace nds
{
namespace characteristics
{
namespace metadata
{

class RoadCharacteristicsLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata::ZserioPackingContext& getRoadRangeAttributeMetadata()
        {
            return m_roadRangeAttributeMetadata_;
        }

        ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata::ZserioPackingContext& getRoadPositionAttributeMetadata()
        {
            return m_roadPositionAttributeMetadata_;
        }

        ::nds::characteristics::metadata::RoadLocationProviderDetails::ZserioPackingContext& getRoadLocationProviderDetails()
        {
            return m_roadLocationProviderDetails_;
        }

        ::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata::ZserioPackingContext& getTransitionAttributeMetadata()
        {
            return m_transitionAttributeMetadata_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata::ZserioPackingContext m_roadRangeAttributeMetadata_;
        ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata::ZserioPackingContext m_roadPositionAttributeMetadata_;
        ::nds::characteristics::metadata::RoadLocationProviderDetails::ZserioPackingContext m_roadLocationProviderDetails_;
        ::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata::ZserioPackingContext m_transitionAttributeMetadata_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadCharacteristicsLayerMetadata() noexcept :
            RoadCharacteristicsLayerMetadata(allocator_type())
    {}

    explicit RoadCharacteristicsLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadRangeAttributeMetadata = ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata,
            typename ZSERIO_T_roadPositionAttributeMetadata = ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata,
            typename ZSERIO_T_coveredRoadTypes = ::zserio::vector<::nds::core::types::RoadType>,
            typename ZSERIO_T_roadLocationProviderDetails = ::nds::characteristics::metadata::RoadLocationProviderDetails,
            typename ZSERIO_T_transitionAttributeMetadata = ::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata>
    RoadCharacteristicsLayerMetadata(
            ::nds::characteristics::metadata::RoadCharacsLayerContent content_,
            ZSERIO_T_roadRangeAttributeMetadata&& roadRangeAttributeMetadata_,
            ZSERIO_T_roadPositionAttributeMetadata&& roadPositionAttributeMetadata_,
            ZSERIO_T_coveredRoadTypes&& coveredRoadTypes_,
            ZSERIO_T_roadLocationProviderDetails&& roadLocationProviderDetails_,
            ZSERIO_T_transitionAttributeMetadata&& transitionAttributeMetadata_,
            const allocator_type& allocator = allocator_type()) :
            RoadCharacteristicsLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_roadRangeAttributeMetadata_ = ::std::forward<ZSERIO_T_roadRangeAttributeMetadata>(roadRangeAttributeMetadata_);
        m_roadPositionAttributeMetadata_ = ::std::forward<ZSERIO_T_roadPositionAttributeMetadata>(roadPositionAttributeMetadata_);
        m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(::std::forward<ZSERIO_T_coveredRoadTypes>(coveredRoadTypes_));
        m_roadLocationProviderDetails_ = ::std::forward<ZSERIO_T_roadLocationProviderDetails>(roadLocationProviderDetails_);
        m_transitionAttributeMetadata_ = ::std::forward<ZSERIO_T_transitionAttributeMetadata>(transitionAttributeMetadata_);
    }

    explicit RoadCharacteristicsLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadCharacteristicsLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadCharacteristicsLayerMetadata() = default;

    RoadCharacteristicsLayerMetadata(const RoadCharacteristicsLayerMetadata&) = default;
    RoadCharacteristicsLayerMetadata& operator=(const RoadCharacteristicsLayerMetadata&) = default;

    RoadCharacteristicsLayerMetadata(RoadCharacteristicsLayerMetadata&&) = default;
    RoadCharacteristicsLayerMetadata& operator=(RoadCharacteristicsLayerMetadata&&) = default;

    RoadCharacteristicsLayerMetadata(::zserio::PropagateAllocatorT,
            const RoadCharacteristicsLayerMetadata& other, const allocator_type& allocator);

    ::nds::characteristics::metadata::RoadCharacsLayerContent getContent() const;
    void setContent(::nds::characteristics::metadata::RoadCharacsLayerContent content_);

    const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& getRoadRangeAttributeMetadata() const;
    ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& getRoadRangeAttributeMetadata();
    void setRoadRangeAttributeMetadata(const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata& roadRangeAttributeMetadata_);
    void setRoadRangeAttributeMetadata(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_);
    bool isRoadRangeAttributeMetadataUsed() const;
    bool isRoadRangeAttributeMetadataSet() const;
    void resetRoadRangeAttributeMetadata();

    const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& getRoadPositionAttributeMetadata() const;
    ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& getRoadPositionAttributeMetadata();
    void setRoadPositionAttributeMetadata(const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata& roadPositionAttributeMetadata_);
    void setRoadPositionAttributeMetadata(::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata&& roadPositionAttributeMetadata_);
    bool isRoadPositionAttributeMetadataUsed() const;
    bool isRoadPositionAttributeMetadataSet() const;
    void resetRoadPositionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes() const;
    ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes();
    void setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_);
    void setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_);

    const ::nds::characteristics::metadata::RoadLocationProviderDetails& getRoadLocationProviderDetails() const;
    ::nds::characteristics::metadata::RoadLocationProviderDetails& getRoadLocationProviderDetails();
    void setRoadLocationProviderDetails(const ::nds::characteristics::metadata::RoadLocationProviderDetails& roadLocationProviderDetails_);
    void setRoadLocationProviderDetails(::nds::characteristics::metadata::RoadLocationProviderDetails&& roadLocationProviderDetails_);
    bool isRoadLocationProviderDetailsUsed() const;
    bool isRoadLocationProviderDetailsSet() const;
    void resetRoadLocationProviderDetails();

    const ::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata& getTransitionAttributeMetadata() const;
    ::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata& getTransitionAttributeMetadata();
    void setTransitionAttributeMetadata(const ::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata& transitionAttributeMetadata_);
    void setTransitionAttributeMetadata(::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata&& transitionAttributeMetadata_);
    bool isTransitionAttributeMetadataUsed() const;
    bool isTransitionAttributeMetadataSet() const;
    void resetTransitionAttributeMetadata();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadCharacteristicsLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredRoadTypes
    {
    public:
        using OwnerType = RoadCharacteristicsLayerMetadata;

        static void create(RoadCharacteristicsLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadCharacteristicsLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::nds::core::types::RoadType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredRoadTypes = ::zserio::Array<::zserio::vector<::nds::core::types::RoadType>, ::zserio::ObjectArrayTraits<::nds::core::types::RoadType, ZserioElementFactory_coveredRoadTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::characteristics::metadata::RoadCharacsLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::characteristics::metadata::RoadCharacsLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata> readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata> readRoadRangeAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata> readRoadPositionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata> readRoadPositionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> readRoadLocationProviderDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> readRoadLocationProviderDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata> readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata> readTransitionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::characteristics::metadata::RoadCharacsLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMetadata> m_roadRangeAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMetadata> m_roadPositionAttributeMetadata_;
    ZserioArrayType_coveredRoadTypes m_coveredRoadTypes_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::metadata::RoadLocationProviderDetails> m_roadLocationProviderDetails_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMetadata> m_transitionAttributeMetadata_;
};

} // namespace metadata
} // namespace characteristics
} // namespace nds

#endif // NDS_CHARACTERISTICS_METADATA_ROAD_CHARACTERISTICS_LAYER_METADATA_H
