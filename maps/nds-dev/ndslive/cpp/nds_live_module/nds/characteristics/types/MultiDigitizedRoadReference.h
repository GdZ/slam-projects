/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_TYPES_MULTI_DIGITIZED_ROAD_REFERENCE_H
#define NDS_CHARACTERISTICS_TYPES_MULTI_DIGITIZED_ROAD_REFERENCE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/road/reference/types/RoadReference.h>
#include <nds/road/reference/types/RoadReferenceIndirect.h>

namespace nds
{
namespace characteristics
{
namespace types
{

class MultiDigitizedRoadReference
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::road::reference::types::RoadReference::ZserioPackingContext& getCounterpartReference()
        {
            return m_counterpartReference_;
        }

        ::nds::road::reference::types::RoadReferenceIndirect::ZserioPackingContext& getCounterpartReferenceIndirect()
        {
            return m_counterpartReferenceIndirect_;
        }

    private:
        ::nds::road::reference::types::RoadReference::ZserioPackingContext m_counterpartReference_;
        ::nds::road::reference::types::RoadReferenceIndirect::ZserioPackingContext m_counterpartReferenceIndirect_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    MultiDigitizedRoadReference() noexcept :
            MultiDigitizedRoadReference(allocator_type())
    {}

    explicit MultiDigitizedRoadReference(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_counterpartReference = ::nds::road::reference::types::RoadReference,
            typename ZSERIO_T_counterpartReferenceIndirect = ::nds::road::reference::types::RoadReferenceIndirect>
    MultiDigitizedRoadReference(
            bool isDirectReference_,
            ZSERIO_T_counterpartReference&& counterpartReference_,
            ZSERIO_T_counterpartReferenceIndirect&& counterpartReferenceIndirect_,
            const allocator_type& allocator = allocator_type()) :
            MultiDigitizedRoadReference(allocator)
    {
        m_isDirectReference_ = isDirectReference_;
        m_counterpartReference_ = ::std::forward<ZSERIO_T_counterpartReference>(counterpartReference_);
        m_counterpartReferenceIndirect_ = ::std::forward<ZSERIO_T_counterpartReferenceIndirect>(counterpartReferenceIndirect_);
    }

    explicit MultiDigitizedRoadReference(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit MultiDigitizedRoadReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~MultiDigitizedRoadReference() = default;

    MultiDigitizedRoadReference(const MultiDigitizedRoadReference&) = default;
    MultiDigitizedRoadReference& operator=(const MultiDigitizedRoadReference&) = default;

    MultiDigitizedRoadReference(MultiDigitizedRoadReference&&) = default;
    MultiDigitizedRoadReference& operator=(MultiDigitizedRoadReference&&) = default;

    MultiDigitizedRoadReference(::zserio::PropagateAllocatorT,
            const MultiDigitizedRoadReference& other, const allocator_type& allocator);

    void initializeChildren();

    bool getIsDirectReference() const;
    void setIsDirectReference(bool isDirectReference_);

    const ::nds::road::reference::types::RoadReference& getCounterpartReference() const;
    ::nds::road::reference::types::RoadReference& getCounterpartReference();
    void setCounterpartReference(const ::nds::road::reference::types::RoadReference& counterpartReference_);
    void setCounterpartReference(::nds::road::reference::types::RoadReference&& counterpartReference_);
    bool isCounterpartReferenceUsed() const;
    bool isCounterpartReferenceSet() const;
    void resetCounterpartReference();

    const ::nds::road::reference::types::RoadReferenceIndirect& getCounterpartReferenceIndirect() const;
    ::nds::road::reference::types::RoadReferenceIndirect& getCounterpartReferenceIndirect();
    void setCounterpartReferenceIndirect(const ::nds::road::reference::types::RoadReferenceIndirect& counterpartReferenceIndirect_);
    void setCounterpartReferenceIndirect(::nds::road::reference::types::RoadReferenceIndirect&& counterpartReferenceIndirect_);
    bool isCounterpartReferenceIndirectUsed() const;
    bool isCounterpartReferenceIndirectSet() const;
    void resetCounterpartReferenceIndirect();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const MultiDigitizedRoadReference& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    bool readIsDirectReference(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadReference> readCounterpartReference(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadReference> readCounterpartReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadReferenceIndirect> readCounterpartReferenceIndirect(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadReferenceIndirect> readCounterpartReferenceIndirect(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_isDirectReference_;
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadReference> m_counterpartReference_;
    ::zserio::InplaceOptionalHolder<::nds::road::reference::types::RoadReferenceIndirect> m_counterpartReferenceIndirect_;
};

} // namespace types
} // namespace characteristics
} // namespace nds

#endif // NDS_CHARACTERISTICS_TYPES_MULTI_DIGITIZED_ROAD_REFERENCE_H
