/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_TYPES_ROAD_LOCATION_ASSIGNMENT_H
#define NDS_CHARACTERISTICS_TYPES_ROAD_LOCATION_ASSIGNMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/location/RoadLocationId.h>
#include <nds/core/types/LengthCentimeters.h>

namespace nds
{
namespace characteristics
{
namespace types
{

class RoadLocationAssignment
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::location::RoadLocationId::ZserioPackingContext& getLocationId()
        {
            return m_locationId_;
        }

        ::zserio::DeltaContext& getStartOnLocation()
        {
            return m_startOnLocation_;
        }

        ::zserio::DeltaContext& getEndOnLocation()
        {
            return m_endOnLocation_;
        }

    private:
        ::nds::core::location::RoadLocationId::ZserioPackingContext m_locationId_;
        ::zserio::DeltaContext m_startOnLocation_;
        ::zserio::DeltaContext m_endOnLocation_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadLocationAssignment() noexcept :
            RoadLocationAssignment(allocator_type())
    {}

    explicit RoadLocationAssignment(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_locationId = ::nds::core::location::RoadLocationId,
            typename ZSERIO_T_startOnLocation = ::nds::core::types::LengthCentimeters,
            typename ZSERIO_T_endOnLocation = ::nds::core::types::LengthCentimeters,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_locationId, RoadLocationAssignment, allocator_type> = 0>
    RoadLocationAssignment(
            ZSERIO_T_locationId&& locationId_,
            bool sameDirectionAsSource_,
            bool completeLocation_,
            ZSERIO_T_startOnLocation&& startOnLocation_,
            ZSERIO_T_endOnLocation&& endOnLocation_,
            const allocator_type& allocator = allocator_type()) :
            RoadLocationAssignment(allocator)
    {
        m_locationId_ = ::std::forward<ZSERIO_T_locationId>(locationId_);
        m_sameDirectionAsSource_ = sameDirectionAsSource_;
        m_completeLocation_ = completeLocation_;
        m_startOnLocation_ = ::std::forward<ZSERIO_T_startOnLocation>(startOnLocation_);
        m_endOnLocation_ = ::std::forward<ZSERIO_T_endOnLocation>(endOnLocation_);
    }

    explicit RoadLocationAssignment(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadLocationAssignment(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadLocationAssignment() = default;

    RoadLocationAssignment(const RoadLocationAssignment&) = default;
    RoadLocationAssignment& operator=(const RoadLocationAssignment&) = default;

    RoadLocationAssignment(RoadLocationAssignment&&) = default;
    RoadLocationAssignment& operator=(RoadLocationAssignment&&) = default;

    RoadLocationAssignment(::zserio::PropagateAllocatorT,
            const RoadLocationAssignment& other, const allocator_type& allocator);

    const ::nds::core::location::RoadLocationId& getLocationId() const;
    ::nds::core::location::RoadLocationId& getLocationId();
    void setLocationId(const ::nds::core::location::RoadLocationId& locationId_);
    void setLocationId(::nds::core::location::RoadLocationId&& locationId_);

    bool getSameDirectionAsSource() const;
    void setSameDirectionAsSource(bool sameDirectionAsSource_);

    bool getCompleteLocation() const;
    void setCompleteLocation(bool completeLocation_);

    ::nds::core::types::LengthCentimeters getStartOnLocation() const;
    void setStartOnLocation(::nds::core::types::LengthCentimeters startOnLocation_);
    bool isStartOnLocationUsed() const;
    bool isStartOnLocationSet() const;
    void resetStartOnLocation();

    ::nds::core::types::LengthCentimeters getEndOnLocation() const;
    void setEndOnLocation(::nds::core::types::LengthCentimeters endOnLocation_);
    bool isEndOnLocationUsed() const;
    bool isEndOnLocationSet() const;
    void resetEndOnLocation();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadLocationAssignment& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::location::RoadLocationId readLocationId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::location::RoadLocationId readLocationId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readSameDirectionAsSource(::zserio::BitStreamReader& in);
    bool readCompleteLocation(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::LengthCentimeters> readStartOnLocation(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::LengthCentimeters> readStartOnLocation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::LengthCentimeters> readEndOnLocation(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::LengthCentimeters> readEndOnLocation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::location::RoadLocationId m_locationId_;
    bool m_sameDirectionAsSource_;
    bool m_completeLocation_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::LengthCentimeters> m_startOnLocation_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::LengthCentimeters> m_endOnLocation_;
};

} // namespace types
} // namespace characteristics
} // namespace nds

#endif // NDS_CHARACTERISTICS_TYPES_ROAD_LOCATION_ASSIGNMENT_H
