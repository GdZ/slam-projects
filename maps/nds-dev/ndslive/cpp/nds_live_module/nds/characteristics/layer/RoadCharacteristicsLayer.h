/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_LAYER_ROAD_CHARACTERISTICS_LAYER_H
#define NDS_CHARACTERISTICS_LAYER_ROAD_CHARACTERISTICS_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/characteristics/instantiations/CharacsRoadPositionAttributeMapList.h>
#include <nds/characteristics/instantiations/CharacsRoadPositionAttributeSetList.h>
#include <nds/characteristics/instantiations/CharacsRoadRangeAttributeMapList.h>
#include <nds/characteristics/instantiations/CharacsRoadRangeAttributeSetList.h>
#include <nds/characteristics/instantiations/CharacsTransitionAttributeMapList.h>
#include <nds/characteristics/instantiations/CharacsTransitionAttributeSetList.h>
#include <nds/characteristics/metadata/RoadCharacsLayerContent.h>
#include <nds/core/geometry/CoordShift.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace characteristics
{
namespace layer
{

class RoadCharacteristicsLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList::ZserioPackingContext& getCharacsRoadRangeMaps()
        {
            return m_characsRoadRangeMaps_;
        }

        ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList::ZserioPackingContext& getCharacsRoadPositionMaps()
        {
            return m_characsRoadPositionMaps_;
        }

        ::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList::ZserioPackingContext& getCharacsRoadRangeSets()
        {
            return m_characsRoadRangeSets_;
        }

        ::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList::ZserioPackingContext& getCharacsRoadPositionSets()
        {
            return m_characsRoadPositionSets_;
        }

        ::nds::characteristics::instantiations::CharacsTransitionAttributeMapList::ZserioPackingContext& getCharacsTransitionMaps()
        {
            return m_characsTransitionMaps_;
        }

        ::nds::characteristics::instantiations::CharacsTransitionAttributeSetList::ZserioPackingContext& getCharacsTransitionSets()
        {
            return m_characsTransitionSets_;
        }

    private:
        ::zserio::DeltaContext m_shift_;
        ::zserio::DeltaContext m_content_;
        ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList::ZserioPackingContext m_characsRoadRangeMaps_;
        ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList::ZserioPackingContext m_characsRoadPositionMaps_;
        ::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList::ZserioPackingContext m_characsRoadRangeSets_;
        ::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList::ZserioPackingContext m_characsRoadPositionSets_;
        ::nds::characteristics::instantiations::CharacsTransitionAttributeMapList::ZserioPackingContext m_characsTransitionMaps_;
        ::nds::characteristics::instantiations::CharacsTransitionAttributeSetList::ZserioPackingContext m_characsTransitionSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadCharacteristicsLayer() noexcept :
            RoadCharacteristicsLayer(allocator_type())
    {}

    explicit RoadCharacteristicsLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_characsRoadRangeMaps = ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList,
            typename ZSERIO_T_characsRoadPositionMaps = ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList,
            typename ZSERIO_T_characsRoadRangeSets = ::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList,
            typename ZSERIO_T_characsRoadPositionSets = ::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList,
            typename ZSERIO_T_characsTransitionMaps = ::nds::characteristics::instantiations::CharacsTransitionAttributeMapList,
            typename ZSERIO_T_characsTransitionSets = ::nds::characteristics::instantiations::CharacsTransitionAttributeSetList>
    RoadCharacteristicsLayer(
            ::nds::core::geometry::CoordShift shift_,
            ::nds::characteristics::metadata::RoadCharacsLayerContent content_,
            ZSERIO_T_characsRoadRangeMaps&& characsRoadRangeMaps_,
            ZSERIO_T_characsRoadPositionMaps&& characsRoadPositionMaps_,
            ZSERIO_T_characsRoadRangeSets&& characsRoadRangeSets_,
            ZSERIO_T_characsRoadPositionSets&& characsRoadPositionSets_,
            ZSERIO_T_characsTransitionMaps&& characsTransitionMaps_,
            ZSERIO_T_characsTransitionSets&& characsTransitionSets_,
            const allocator_type& allocator = allocator_type()) :
            RoadCharacteristicsLayer(allocator)
    {
        m_shift_ = shift_;
        m_content_ = content_;
        m_characsRoadRangeMaps_ = ::std::forward<ZSERIO_T_characsRoadRangeMaps>(characsRoadRangeMaps_);
        m_characsRoadPositionMaps_ = ::std::forward<ZSERIO_T_characsRoadPositionMaps>(characsRoadPositionMaps_);
        m_characsRoadRangeSets_ = ::std::forward<ZSERIO_T_characsRoadRangeSets>(characsRoadRangeSets_);
        m_characsRoadPositionSets_ = ::std::forward<ZSERIO_T_characsRoadPositionSets>(characsRoadPositionSets_);
        m_characsTransitionMaps_ = ::std::forward<ZSERIO_T_characsTransitionMaps>(characsTransitionMaps_);
        m_characsTransitionSets_ = ::std::forward<ZSERIO_T_characsTransitionSets>(characsTransitionSets_);
    }

    explicit RoadCharacteristicsLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadCharacteristicsLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadCharacteristicsLayer() = default;

    RoadCharacteristicsLayer(const RoadCharacteristicsLayer& other);
    RoadCharacteristicsLayer& operator=(const RoadCharacteristicsLayer& other);

    RoadCharacteristicsLayer(RoadCharacteristicsLayer&& other);
    RoadCharacteristicsLayer& operator=(RoadCharacteristicsLayer&& other);

    RoadCharacteristicsLayer(::zserio::PropagateAllocatorT,
            const RoadCharacteristicsLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    ::nds::characteristics::metadata::RoadCharacsLayerContent getContent() const;
    void setContent(::nds::characteristics::metadata::RoadCharacsLayerContent content_);

    const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList& getCharacsRoadRangeMaps() const;
    ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList& getCharacsRoadRangeMaps();
    void setCharacsRoadRangeMaps(const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList& characsRoadRangeMaps_);
    void setCharacsRoadRangeMaps(::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList&& characsRoadRangeMaps_);
    bool isCharacsRoadRangeMapsUsed() const;
    bool isCharacsRoadRangeMapsSet() const;
    void resetCharacsRoadRangeMaps();

    const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList& getCharacsRoadPositionMaps() const;
    ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList& getCharacsRoadPositionMaps();
    void setCharacsRoadPositionMaps(const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList& characsRoadPositionMaps_);
    void setCharacsRoadPositionMaps(::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList&& characsRoadPositionMaps_);
    bool isCharacsRoadPositionMapsUsed() const;
    bool isCharacsRoadPositionMapsSet() const;
    void resetCharacsRoadPositionMaps();

    const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList& getCharacsRoadRangeSets() const;
    ::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList& getCharacsRoadRangeSets();
    void setCharacsRoadRangeSets(const ::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList& characsRoadRangeSets_);
    void setCharacsRoadRangeSets(::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList&& characsRoadRangeSets_);
    bool isCharacsRoadRangeSetsUsed() const;
    bool isCharacsRoadRangeSetsSet() const;
    void resetCharacsRoadRangeSets();

    const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList& getCharacsRoadPositionSets() const;
    ::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList& getCharacsRoadPositionSets();
    void setCharacsRoadPositionSets(const ::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList& characsRoadPositionSets_);
    void setCharacsRoadPositionSets(::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList&& characsRoadPositionSets_);
    bool isCharacsRoadPositionSetsUsed() const;
    bool isCharacsRoadPositionSetsSet() const;
    void resetCharacsRoadPositionSets();

    const ::nds::characteristics::instantiations::CharacsTransitionAttributeMapList& getCharacsTransitionMaps() const;
    ::nds::characteristics::instantiations::CharacsTransitionAttributeMapList& getCharacsTransitionMaps();
    void setCharacsTransitionMaps(const ::nds::characteristics::instantiations::CharacsTransitionAttributeMapList& characsTransitionMaps_);
    void setCharacsTransitionMaps(::nds::characteristics::instantiations::CharacsTransitionAttributeMapList&& characsTransitionMaps_);
    bool isCharacsTransitionMapsUsed() const;
    bool isCharacsTransitionMapsSet() const;
    void resetCharacsTransitionMaps();

    const ::nds::characteristics::instantiations::CharacsTransitionAttributeSetList& getCharacsTransitionSets() const;
    ::nds::characteristics::instantiations::CharacsTransitionAttributeSetList& getCharacsTransitionSets();
    void setCharacsTransitionSets(const ::nds::characteristics::instantiations::CharacsTransitionAttributeSetList& characsTransitionSets_);
    void setCharacsTransitionSets(::nds::characteristics::instantiations::CharacsTransitionAttributeSetList&& characsTransitionSets_);
    bool isCharacsTransitionSetsUsed() const;
    bool isCharacsTransitionSetsSet() const;
    void resetCharacsTransitionSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadCharacteristicsLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::characteristics::metadata::RoadCharacsLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::characteristics::metadata::RoadCharacsLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList> readCharacsRoadRangeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList> readCharacsRoadRangeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList> readCharacsRoadPositionMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList> readCharacsRoadPositionMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList> readCharacsRoadRangeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList> readCharacsRoadRangeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList> readCharacsRoadPositionSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList> readCharacsRoadPositionSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMapList> readCharacsTransitionMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMapList> readCharacsTransitionMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeSetList> readCharacsTransitionSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeSetList> readCharacsTransitionSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::core::geometry::CoordShift m_shift_;
    ::nds::characteristics::metadata::RoadCharacsLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeMapList> m_characsRoadRangeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeMapList> m_characsRoadPositionMaps_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadRangeAttributeSetList> m_characsRoadRangeSets_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsRoadPositionAttributeSetList> m_characsRoadPositionSets_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeMapList> m_characsTransitionMaps_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsTransitionAttributeSetList> m_characsTransitionSets_;
};

} // namespace layer
} // namespace characteristics
} // namespace nds

#endif // NDS_CHARACTERISTICS_LAYER_ROAD_CHARACTERISTICS_LAYER_H
