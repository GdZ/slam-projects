/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CHARACTERISTICS_LAYER_LANE_CHARACTERISTICS_LAYER_H
#define NDS_CHARACTERISTICS_LAYER_LANE_CHARACTERISTICS_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/characteristics/instantiations/CharacsLanePositionAttributeMapList.h>
#include <nds/characteristics/instantiations/CharacsLanePositionAttributeSetList.h>
#include <nds/characteristics/instantiations/CharacsLaneRangeAttributeMapList.h>
#include <nds/characteristics/instantiations/CharacsLaneRangeAttributeSetList.h>
#include <nds/characteristics/metadata/LaneCharacsLayerContent.h>
#include <nds/core/geometry/CoordShift.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace characteristics
{
namespace layer
{

class LaneCharacteristicsLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList::ZserioPackingContext& getCharacsLaneRangeMaps()
        {
            return m_characsLaneRangeMaps_;
        }

        ::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList::ZserioPackingContext& getCharacsLanePositionMaps()
        {
            return m_characsLanePositionMaps_;
        }

        ::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList::ZserioPackingContext& getCharacsLaneRangeSets()
        {
            return m_characsLaneRangeSets_;
        }

        ::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList::ZserioPackingContext& getCharacsLanePositionSets()
        {
            return m_characsLanePositionSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList::ZserioPackingContext m_characsLaneRangeMaps_;
        ::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList::ZserioPackingContext m_characsLanePositionMaps_;
        ::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList::ZserioPackingContext m_characsLaneRangeSets_;
        ::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList::ZserioPackingContext m_characsLanePositionSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneCharacteristicsLayer() noexcept :
            LaneCharacteristicsLayer(allocator_type())
    {}

    explicit LaneCharacteristicsLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_characsLaneRangeMaps = ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList,
            typename ZSERIO_T_characsLanePositionMaps = ::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList,
            typename ZSERIO_T_characsLaneRangeSets = ::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList,
            typename ZSERIO_T_characsLanePositionSets = ::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList>
    LaneCharacteristicsLayer(
            ::nds::characteristics::metadata::LaneCharacsLayerContent content_,
            ZSERIO_T_characsLaneRangeMaps&& characsLaneRangeMaps_,
            ZSERIO_T_characsLanePositionMaps&& characsLanePositionMaps_,
            ZSERIO_T_characsLaneRangeSets&& characsLaneRangeSets_,
            ZSERIO_T_characsLanePositionSets&& characsLanePositionSets_,
            const allocator_type& allocator = allocator_type()) :
            LaneCharacteristicsLayer(allocator)
    {
        m_content_ = content_;
        m_characsLaneRangeMaps_ = ::std::forward<ZSERIO_T_characsLaneRangeMaps>(characsLaneRangeMaps_);
        m_characsLanePositionMaps_ = ::std::forward<ZSERIO_T_characsLanePositionMaps>(characsLanePositionMaps_);
        m_characsLaneRangeSets_ = ::std::forward<ZSERIO_T_characsLaneRangeSets>(characsLaneRangeSets_);
        m_characsLanePositionSets_ = ::std::forward<ZSERIO_T_characsLanePositionSets>(characsLanePositionSets_);
    }

    explicit LaneCharacteristicsLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneCharacteristicsLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneCharacteristicsLayer() = default;

    LaneCharacteristicsLayer(const LaneCharacteristicsLayer& other);
    LaneCharacteristicsLayer& operator=(const LaneCharacteristicsLayer& other);

    LaneCharacteristicsLayer(LaneCharacteristicsLayer&& other);
    LaneCharacteristicsLayer& operator=(LaneCharacteristicsLayer&& other);

    LaneCharacteristicsLayer(::zserio::PropagateAllocatorT,
            const LaneCharacteristicsLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::characteristics::metadata::LaneCharacsLayerContent getContent() const;
    void setContent(::nds::characteristics::metadata::LaneCharacsLayerContent content_);

    const ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList& getCharacsLaneRangeMaps() const;
    ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList& getCharacsLaneRangeMaps();
    void setCharacsLaneRangeMaps(const ::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList& characsLaneRangeMaps_);
    void setCharacsLaneRangeMaps(::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList&& characsLaneRangeMaps_);
    bool isCharacsLaneRangeMapsUsed() const;
    bool isCharacsLaneRangeMapsSet() const;
    void resetCharacsLaneRangeMaps();

    const ::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList& getCharacsLanePositionMaps() const;
    ::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList& getCharacsLanePositionMaps();
    void setCharacsLanePositionMaps(const ::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList& characsLanePositionMaps_);
    void setCharacsLanePositionMaps(::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList&& characsLanePositionMaps_);
    bool isCharacsLanePositionMapsUsed() const;
    bool isCharacsLanePositionMapsSet() const;
    void resetCharacsLanePositionMaps();

    const ::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList& getCharacsLaneRangeSets() const;
    ::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList& getCharacsLaneRangeSets();
    void setCharacsLaneRangeSets(const ::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList& characsLaneRangeSets_);
    void setCharacsLaneRangeSets(::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList&& characsLaneRangeSets_);
    bool isCharacsLaneRangeSetsUsed() const;
    bool isCharacsLaneRangeSetsSet() const;
    void resetCharacsLaneRangeSets();

    const ::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList& getCharacsLanePositionSets() const;
    ::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList& getCharacsLanePositionSets();
    void setCharacsLanePositionSets(const ::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList& characsLanePositionSets_);
    void setCharacsLanePositionSets(::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList&& characsLanePositionSets_);
    bool isCharacsLanePositionSetsUsed() const;
    bool isCharacsLanePositionSetsSet() const;
    void resetCharacsLanePositionSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneCharacteristicsLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::characteristics::metadata::LaneCharacsLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::characteristics::metadata::LaneCharacsLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList> readCharacsLaneRangeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList> readCharacsLaneRangeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList> readCharacsLanePositionMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList> readCharacsLanePositionMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList> readCharacsLaneRangeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList> readCharacsLaneRangeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList> readCharacsLanePositionSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList> readCharacsLanePositionSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::characteristics::metadata::LaneCharacsLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeMapList> m_characsLaneRangeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeMapList> m_characsLanePositionMaps_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLaneRangeAttributeSetList> m_characsLaneRangeSets_;
    ::zserio::InplaceOptionalHolder<::nds::characteristics::instantiations::CharacsLanePositionAttributeSetList> m_characsLanePositionSets_;
};

} // namespace layer
} // namespace characteristics
} // namespace nds

#endif // NDS_CHARACTERISTICS_LAYER_LANE_CHARACTERISTICS_LAYER_H
