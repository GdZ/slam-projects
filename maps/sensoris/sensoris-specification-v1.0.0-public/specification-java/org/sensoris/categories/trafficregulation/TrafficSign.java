// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_regulation.proto

// Protobuf Java Version: 3.25.1
package org.sensoris.categories.trafficregulation;

/**
 * <pre>
 * TrafficSign.
 *
 * A TrafficSign includes the subcategories traffic signs, rectangular signboards, and advertisement signs.
 *
 * &#64;relation 1 sensoris.protobuf.categories.trafficregulation.TrafficSign CONTAIN 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign
 * &#64;relation 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign GROUP
 * &#64;relation 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign IMPACT 1 sensoris.protobuf.categories.roadattribution.Lane
 * &#64;relation 1..* sensoris.protobuf.categories.objectdetection CONTAIN 1 sensoris.protobuf.categories.roadattribution.Lane
 * &#64;relation 1 sensoris.protobuf.categories.trafficregulation.TrafficSign MAP_REFERENCE 1 sensoris.protobuf.categories.map.MapReference
 * &#64;relation 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign IMPACT 1 sensoris.protobuf.categories.drivingbehavior.ParkingStatus
 * &#64;relation 1 sensoris.protobuf.categories.objectdetection.MovableObject CONTAIN 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign
 * &#64;relation 1 sensoris.protobuf.categories.objectdetection.StaticObject CONTAIN 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign
 * &#64;relation 1 sensoris.protobuf.categories.roadattribution.SurfaceMarking EQUAL 1 sensoris.protobuf.categories.trafficregulation.TrafficSign
 * &#64;relation 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign IMPACT 1 sensoris.protobuf.categories.trafficevents.RoadWorks
 * </pre>
 *
 * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign}
 */
public final class TrafficSign extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign)
    TrafficSignOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TrafficSign.newBuilder() to construct.
  private TrafficSign(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TrafficSign() {
    supplementarySignAndConfidence_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TrafficSign();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.sensoris.categories.trafficregulation.TrafficSign.class, org.sensoris.categories.trafficregulation.TrafficSign.Builder.class);
  }

  public interface ShapeAndConfidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type getType();

    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    boolean hasConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    org.sensoris.types.base.Confidence getConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder();
  }
  /**
   * <pre>
   * Shape and confidence.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence}
   */
  public static final class ShapeAndConfidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
      ShapeAndConfidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ShapeAndConfidence.newBuilder() to construct.
    private ShapeAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ShapeAndConfidence() {
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ShapeAndConfidence();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ShapeAndConfidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ShapeAndConfidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Builder.class);
    }

    /**
     * <pre>
     * Type of the traffic sign shape.
     * </pre>
     *
     * Protobuf enum {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      UNKNOWN_TYPE(0),
      /**
       * <pre>
       * Other, i.e. none of the listed enum values.
       * </pre>
       *
       * <code>OTHER = 1;</code>
       */
      OTHER(1),
      /**
       * <pre>
       * Rectangle.
       * </pre>
       *
       * <code>RECTANGLE = 2;</code>
       */
      RECTANGLE(2),
      /**
       * <pre>
       * Square.
       * </pre>
       *
       * <code>SQUARE = 3;</code>
       */
      SQUARE(3),
      /**
       * <pre>
       * Triangle pointing up.
       * </pre>
       *
       * <code>TRIANGLE_UP = 4;</code>
       */
      TRIANGLE_UP(4),
      /**
       * <pre>
       * Triangle pointing down.
       * </pre>
       *
       * <code>TRIANGLE_DOWN = 5;</code>
       */
      TRIANGLE_DOWN(5),
      /**
       * <pre>
       * Diamond.
       * </pre>
       *
       * <code>DIAMOND = 6;</code>
       */
      DIAMOND(6),
      /**
       * <pre>
       * Hexagon.
       * </pre>
       *
       * <code>HEXAGON = 7;</code>
       */
      HEXAGON(7),
      /**
       * <pre>
       * Round.
       * </pre>
       *
       * <code>ROUND = 8;</code>
       */
      ROUND(8),
      /**
       * <pre>
       * Crossbuck, e.g. at railway crossings.
       * </pre>
       *
       * <code>CROSS_BUCK = 9;</code>
       */
      CROSS_BUCK(9),
      /**
       * <pre>
       * Octagon.
       * </pre>
       *
       * <code>OCTAGON = 10;</code>
       */
      OCTAGON(10),
      /**
       * <pre>
       * Ellipse.
       * </pre>
       *
       * <code>ELLIPSE = 11;</code>
       */
      ELLIPSE(11),
      /**
       * <pre>
       * Pentagon.
       * </pre>
       *
       * <code>PENTAGON = 12;</code>
       */
      PENTAGON(12),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      public static final int UNKNOWN_TYPE_VALUE = 0;
      /**
       * <pre>
       * Other, i.e. none of the listed enum values.
       * </pre>
       *
       * <code>OTHER = 1;</code>
       */
      public static final int OTHER_VALUE = 1;
      /**
       * <pre>
       * Rectangle.
       * </pre>
       *
       * <code>RECTANGLE = 2;</code>
       */
      public static final int RECTANGLE_VALUE = 2;
      /**
       * <pre>
       * Square.
       * </pre>
       *
       * <code>SQUARE = 3;</code>
       */
      public static final int SQUARE_VALUE = 3;
      /**
       * <pre>
       * Triangle pointing up.
       * </pre>
       *
       * <code>TRIANGLE_UP = 4;</code>
       */
      public static final int TRIANGLE_UP_VALUE = 4;
      /**
       * <pre>
       * Triangle pointing down.
       * </pre>
       *
       * <code>TRIANGLE_DOWN = 5;</code>
       */
      public static final int TRIANGLE_DOWN_VALUE = 5;
      /**
       * <pre>
       * Diamond.
       * </pre>
       *
       * <code>DIAMOND = 6;</code>
       */
      public static final int DIAMOND_VALUE = 6;
      /**
       * <pre>
       * Hexagon.
       * </pre>
       *
       * <code>HEXAGON = 7;</code>
       */
      public static final int HEXAGON_VALUE = 7;
      /**
       * <pre>
       * Round.
       * </pre>
       *
       * <code>ROUND = 8;</code>
       */
      public static final int ROUND_VALUE = 8;
      /**
       * <pre>
       * Crossbuck, e.g. at railway crossings.
       * </pre>
       *
       * <code>CROSS_BUCK = 9;</code>
       */
      public static final int CROSS_BUCK_VALUE = 9;
      /**
       * <pre>
       * Octagon.
       * </pre>
       *
       * <code>OCTAGON = 10;</code>
       */
      public static final int OCTAGON_VALUE = 10;
      /**
       * <pre>
       * Ellipse.
       * </pre>
       *
       * <code>ELLIPSE = 11;</code>
       */
      public static final int ELLIPSE_VALUE = 11;
      /**
       * <pre>
       * Pentagon.
       * </pre>
       *
       * <code>PENTAGON = 12;</code>
       */
      public static final int PENTAGON_VALUE = 12;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_TYPE;
          case 1: return OTHER;
          case 2: return RECTANGLE;
          case 3: return SQUARE;
          case 4: return TRIANGLE_UP;
          case 5: return TRIANGLE_DOWN;
          case 6: return DIAMOND;
          case 7: return HEXAGON;
          case 8: return ROUND;
          case 9: return CROSS_BUCK;
          case 10: return OCTAGON;
          case 11: return ELLIPSE;
          case 12: return PENTAGON;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type getType() {
      org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type.forNumber(type_);
      return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type.UNRECOGNIZED : result;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 2;
    private org.sensoris.types.base.Confidence confidence_;
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    @java.lang.Override
    public boolean hasConfidence() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    @java.lang.Override
    public org.sensoris.types.base.Confidence getConfidence() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    @java.lang.Override
    public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getConfidence());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConfidence());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence)) {
        return super.equals(obj);
      }
      org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence other = (org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence) obj;

      if (type_ != other.type_) return false;
      if (hasConfidence() != other.hasConfidence()) return false;
      if (hasConfidence()) {
        if (!getConfidence()
            .equals(other.getConfidence())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasConfidence()) {
        hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getConfidence().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Shape and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
        org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ShapeAndConfidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ShapeAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Builder.class);
      }

      // Construct using org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getConfidenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ShapeAndConfidence_descriptor;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence getDefaultInstanceForType() {
        return org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.getDefaultInstance();
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence build() {
        org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence buildPartial() {
        org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence result = new org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.confidence_ = confidenceBuilder_ == null
              ? confidence_
              : confidenceBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence) {
          return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence other) {
        if (other == org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasConfidence()) {
          mergeConfidence(other.getConfidence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type getType() {
        org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type.forNumber(type_);
        return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private org.sensoris.types.base.Confidence confidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> confidenceBuilder_;
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return Whether the confidence field is set.
       */
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return The confidence.
       */
      public org.sensoris.types.base.Confidence getConfidence() {
        if (confidenceBuilder_ == null) {
          return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        } else {
          return confidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          confidence_ = value;
        } else {
          confidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(
          org.sensoris.types.base.Confidence.Builder builderForValue) {
        if (confidenceBuilder_ == null) {
          confidence_ = builderForValue.build();
        } else {
          confidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder mergeConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            confidence_ != null &&
            confidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
            getConfidenceBuilder().mergeFrom(value);
          } else {
            confidence_ = value;
          }
        } else {
          confidenceBuilder_.mergeFrom(value);
        }
        if (confidence_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder clearConfidence() {
        bitField0_ = (bitField0_ & ~0x00000002);
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.Confidence.Builder getConfidenceBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
        if (confidenceBuilder_ != null) {
          return confidenceBuilder_.getMessageOrBuilder();
        } else {
          return confidence_ == null ?
              org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
          getConfidenceFieldBuilder() {
        if (confidenceBuilder_ == null) {
          confidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                  getConfidence(),
                  getParentForChildren(),
                  isClean());
          confidence_ = null;
        }
        return confidenceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
    private static final org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence();
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ShapeAndConfidence>
        PARSER = new com.google.protobuf.AbstractParser<ShapeAndConfidence>() {
      @java.lang.Override
      public ShapeAndConfidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ShapeAndConfidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ShapeAndConfidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TypeAndConfidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type getType();

    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    boolean hasConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    org.sensoris.types.base.Confidence getConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder();

    /**
     * <pre>
     * If the type or additional information is known by the sensor, then it may be provided as string.
     * </pre>
     *
     * <code>.google.protobuf.StringValue other_text = 3;</code>
     * @return Whether the otherText field is set.
     */
    boolean hasOtherText();
    /**
     * <pre>
     * If the type or additional information is known by the sensor, then it may be provided as string.
     * </pre>
     *
     * <code>.google.protobuf.StringValue other_text = 3;</code>
     * @return The otherText.
     */
    com.google.protobuf.StringValue getOtherText();
    /**
     * <pre>
     * If the type or additional information is known by the sensor, then it may be provided as string.
     * </pre>
     *
     * <code>.google.protobuf.StringValue other_text = 3;</code>
     */
    com.google.protobuf.StringValueOrBuilder getOtherTextOrBuilder();
  }
  /**
   * <pre>
   * Type and confidence.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence}
   */
  public static final class TypeAndConfidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
      TypeAndConfidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TypeAndConfidence.newBuilder() to construct.
    private TypeAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TypeAndConfidence() {
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TypeAndConfidence();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_TypeAndConfidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_TypeAndConfidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Builder.class);
    }

    /**
     * <pre>
     * Type of the traffic sign face.
     * </pre>
     *
     * Protobuf enum {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      UNKNOWN_TYPE(0),
      /**
       * <pre>
       * Other, i.e. none of the listed enum values. The type, if known by the sensor, may be provided as string in the field other_text.
       * </pre>
       *
       * <code>OTHER_AS_TEXT = 1;</code>
       */
      OTHER_AS_TEXT(1),
      /**
       * <pre>
       * The specific speed limit value may be provided in the field value_and_confidence.
       * &#64;img SPEED_LIMIT_de1.png &#64;img SPEED_LIMIT_us1.png
       * </pre>
       *
       * <code>SPEED_LIMIT = 2;</code>
       */
      SPEED_LIMIT(2),
      /**
       * <pre>
       * The specific speed limit value may be provided in the field value_and_confidence.
       * &#64;img SPEED_LIMIT_END_de1.png &#64;img SPEED_LIMIT_END_us1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_END = 3;</code>
       */
      SPEED_LIMIT_END(3),
      /**
       * <pre>
       * &#64;img SPEED_LIMIT_CHANGE_UPCOMING_us1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_CHANGE_UPCOMING = 4;</code>
       */
      SPEED_LIMIT_CHANGE_UPCOMING(4),
      /**
       * <pre>
       * The specific speed limit value may be provided in the field value_and_confidence.
       * &#64;img ADVISORY_SPEED_LIMIT_de1.png
       * </pre>
       *
       * <code>ADVISORY_SPEED_LIMIT = 5;</code>
       */
      ADVISORY_SPEED_LIMIT(5),
      /**
       * <pre>
       * The specific speed limit value may be provided in the field value_and_confidence.
       * &#64;img ADVISORY_SPEED_LIMIT_END_de1.png
       * </pre>
       *
       * <code>ADVISORY_SPEED_LIMIT_END = 6;</code>
       */
      ADVISORY_SPEED_LIMIT_END(6),
      /**
       * <pre>
       * &#64;img NO_OVERTAKING_de1.png
       * </pre>
       *
       * <code>NO_OVERTAKING = 7;</code>
       */
      NO_OVERTAKING(7),
      /**
       * <pre>
       * &#64;img NO_OVERTAKING_END_de1.png
       * </pre>
       *
       * <code>NO_OVERTAKING_END = 8;</code>
       */
      NO_OVERTAKING_END(8),
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>PROTECTED_PASSING_START = 9;</code>
       */
      PROTECTED_PASSING_START(9),
      /**
       * <code>PROTECTED_PASSING_END = 10;</code>
       */
      PROTECTED_PASSING_END(10),
      /**
       * <pre>
       * &#64;img PROTECTED_PASSING_LEFT_START_de1.png
       * </pre>
       *
       * <code>PROTECTED_PASSING_LEFT_START = 11;</code>
       */
      PROTECTED_PASSING_LEFT_START(11),
      /**
       * <pre>
       * &#64;img PROTECTED_PASSING_RIGHT_START_de1.png
       * </pre>
       *
       * <code>PROTECTED_PASSING_RIGHT_START = 12;</code>
       */
      PROTECTED_PASSING_RIGHT_START(12),
      /**
       * <code>PROTECTED_PASSING_LEFT_END = 13;</code>
       */
      PROTECTED_PASSING_LEFT_END(13),
      /**
       * <pre>
       * &#64;img PROTECTED_PASSING_RIGHT_END_de1.png
       * </pre>
       *
       * <code>PROTECTED_PASSING_RIGHT_END = 14;</code>
       */
      PROTECTED_PASSING_RIGHT_END(14),
      /**
       * <pre>
       * &#64;img NO_OVERTAKING_TRUCK_de1.png
       * </pre>
       *
       * <code>NO_OVERTAKING_TRUCK = 15;</code>
       */
      NO_OVERTAKING_TRUCK(15),
      /**
       * <pre>
       * &#64;img NO_OVERTAKING_TRUCK_END_de1.png
       * </pre>
       *
       * <code>NO_OVERTAKING_TRUCK_END = 16;</code>
       */
      NO_OVERTAKING_TRUCK_END(16),
      /**
       * <pre>
       * &#64;img ALL_RESTRICTIONS_END_de1.png
       * </pre>
       *
       * <code>ALL_RESTRICTIONS_END = 17;</code>
       */
      ALL_RESTRICTIONS_END(17),
      /**
       * <pre>
       * &#64;img CITY_START_de1.png
       * </pre>
       *
       * <code>CITY_START = 18;</code>
       */
      CITY_START(18),
      /**
       * <pre>
       * &#64;img CITY_END_de1.png
       * </pre>
       *
       * <code>CITY_END = 19;</code>
       */
      CITY_END(19),
      /**
       * <pre>
       * Highway is a major road (e.g. US Highway, German Bundesstrasse).
       * &#64;img HIGHWAY_de1.png
       * </pre>
       *
       * <code>HIGHWAY = 20;</code>
       */
      HIGHWAY(20),
      /**
       * <pre>
       * &#64;img HIGHWAY_END_de1.png
       * </pre>
       *
       * <code>HIGHWAY_END = 21;</code>
       */
      HIGHWAY_END(21),
      /**
       * <pre>
       * These roads are Class-A roads connecting cities or states (e.g. US Interstate, European E-road or German Autobahn) and in many countries have the rule of limited access.
       * &#64;img MOTORWAY_de1.png
       * </pre>
       *
       * <code>MOTORWAY = 22;</code>
       */
      MOTORWAY(22),
      /**
       * <pre>
       * &#64;img MOTORWAY_END_de1.png
       * </pre>
       *
       * <code>MOTORWAY_END = 23;</code>
       */
      MOTORWAY_END(23),
      /**
       * <pre>
       * &#64;img CONSTRUCTION_de1.png &#64;img CONSTRUCTION_us1.png
       * </pre>
       *
       * <code>CONSTRUCTION = 24;</code>
       */
      CONSTRUCTION(24),
      /**
       * <pre>
       * &#64;img CONSTRUCTION_END_us1.png
       * </pre>
       *
       * <code>CONSTRUCTION_END = 25;</code>
       */
      CONSTRUCTION_END(25),
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>LANE_MERGE = 26;</code>
       */
      LANE_MERGE(26),
      /**
       * <pre>
       * A lane right merge can also be described as a lane ending on the right side.
       * &#64;img LANE_MERGE_ON_RIGHT_us1.png
       * </pre>
       *
       * <code>LANE_MERGE_ON_RIGHT = 27;</code>
       */
      LANE_MERGE_ON_RIGHT(27),
      /**
       * <pre>
       * A lane left merge can also be described as a lane ending on the left side.
       * &#64;img LANE_MERGE_ON_LEFT_us1.png
       * </pre>
       *
       * <code>LANE_MERGE_ON_LEFT = 28;</code>
       */
      LANE_MERGE_ON_LEFT(28),
      /**
       * <pre>
       * A lane merge center can also be described as a lane ending on both sides left and right.
       * &#64;img LANE_MERGE_CENTER_de1.png
       * </pre>
       *
       * <code>LANE_MERGE_CENTER = 29;</code>
       */
      LANE_MERGE_CENTER(29),
      /**
       * <pre>
       * &#64;img RAILWAY_CROSSING_GENERAL_de1.png &#64;img RAILWAY_CROSSING_GENERAL_us1.png
       * </pre>
       *
       * <code>RAILWAY_CROSSING_GENERAL = 30;</code>
       */
      RAILWAY_CROSSING_GENERAL(30),
      /**
       * <pre>
       * &#64;img RAILWAY_CROSSING_PROTECTED_de1.png
       * </pre>
       *
       * <code>RAILWAY_CROSSING_PROTECTED = 31;</code>
       */
      RAILWAY_CROSSING_PROTECTED(31),
      /**
       * <pre>
       * &#64;img RAILWAY_CROSSING_UNPROTECTED_de1.png
       * </pre>
       *
       * <code>RAILWAY_CROSSING_UNPROTECTED = 32;</code>
       */
      RAILWAY_CROSSING_UNPROTECTED(32),
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>ROAD_NARROWS = 33;</code>
       */
      ROAD_NARROWS(33),
      /**
       * <pre>
       * &#64;img ROAD_NARROWS_LEFT_de1.png
       * </pre>
       *
       * <code>ROAD_NARROWS_LEFT = 34;</code>
       */
      ROAD_NARROWS_LEFT(34),
      /**
       * <pre>
       * &#64;img ROAD_NARROWS_RIGHT_de1.png
       * </pre>
       *
       * <code>ROAD_NARROWS_RIGHT = 35;</code>
       */
      ROAD_NARROWS_RIGHT(35),
      /**
       * <pre>
       * &#64;img ROAD_NARROWS_CENTER_de1.png
       * </pre>
       *
       * <code>ROAD_NARROWS_CENTER = 36;</code>
       */
      ROAD_NARROWS_CENTER(36),
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>SHARP_CURVE = 37;</code>
       */
      SHARP_CURVE(37),
      /**
       * <pre>
       * &#64;img SHARP_CURVE_LEFT_de1.png &#64;img SHARP_CURVE_LEFT_us1.png
       * </pre>
       *
       * <code>SHARP_CURVE_LEFT = 38;</code>
       */
      SHARP_CURVE_LEFT(38),
      /**
       * <pre>
       * &#64;img SHARP_CURVE_RIGHT_de1.png &#64;img SHARP_CURVE_RIGHT_us1.png
       * </pre>
       *
       * <code>SHARP_CURVE_RIGHT = 39;</code>
       */
      SHARP_CURVE_RIGHT(39),
      /**
       * <code>WINDING_ROAD = 40;</code>
       */
      WINDING_ROAD(40),
      /**
       * <pre>
       * &#64;img WINDING_ROAD_STARTING_LEFT_us1.png
       * </pre>
       *
       * <code>WINDING_ROAD_STARTING_LEFT = 41;</code>
       */
      WINDING_ROAD_STARTING_LEFT(41),
      /**
       * <pre>
       * &#64;img WINDING_ROAD_STARTING_RIGHT_us1.png
       * </pre>
       *
       * <code>WINDING_ROAD_STARTING_RIGHT = 42;</code>
       */
      WINDING_ROAD_STARTING_RIGHT(42),
      /**
       * <pre>
       * &#64;img STEEP_HILL_us1.png
       * </pre>
       *
       * <code>STEEP_HILL = 43;</code>
       */
      STEEP_HILL(43),
      /**
       * <pre>
       * The percentage of the slope may be provided in the field value_and_confidence. The format is to be provided in "xx %" defining the percent of inclination per 100 meter.
       * &#64;img STEEP_HILL_UPWARDS_de1.png
       * </pre>
       *
       * <code>STEEP_HILL_UPWARDS = 44;</code>
       */
      STEEP_HILL_UPWARDS(44),
      /**
       * <pre>
       * The percentage of the slope may be provided in the field value_and_confidence. The format is to be provided in "xx %" defining the percent of declination per 100 meter.
       * &#64;img STEEP_HILL_DOWNWARDS_de1.png
       * </pre>
       *
       * <code>STEEP_HILL_DOWNWARDS = 45;</code>
       */
      STEEP_HILL_DOWNWARDS(45),
      /**
       * <pre>
       * &#64;img STOP_SIGN_de1.png
       * </pre>
       *
       * <code>STOP_SIGN = 46;</code>
       */
      STOP_SIGN(46),
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>LATERAL_WIND = 47;</code>
       */
      LATERAL_WIND(47),
      /**
       * <pre>
       * &#64;img LATERAL_WIND_FROM_RIGHT_de1.png
       * </pre>
       *
       * <code>LATERAL_WIND_FROM_RIGHT = 48;</code>
       */
      LATERAL_WIND_FROM_RIGHT(48),
      /**
       * <pre>
       * &#64;img LATERAL_WIND_FROM_LEFT_de1.png
       * </pre>
       *
       * <code>LATERAL_WIND_FROM_LEFT = 49;</code>
       */
      LATERAL_WIND_FROM_LEFT(49),
      /**
       * <pre>
       * If information about the text of the warning is available, it may be provided in the field value_and_confidence.
       * &#64;img GENERAL_WARNING_de1.png
       * </pre>
       *
       * <code>GENERAL_WARNING = 50;</code>
       */
      GENERAL_WARNING(50),
      /**
       * <pre>
       * &#64;img RISK_OF_GROUNDING_de1.png
       * </pre>
       *
       * <code>RISK_OF_GROUNDING = 51;</code>
       */
      RISK_OF_GROUNDING(51),
      /**
       * <pre>
       * &#64;img ANIMAL_de1.png
       * </pre>
       *
       * <code>ANIMAL = 52;</code>
       */
      ANIMAL(52),
      /**
       * <pre>
       * &#64;img ICY_CONDITIONS_de1.png
       * </pre>
       *
       * <code>ICY_CONDITIONS = 53;</code>
       */
      ICY_CONDITIONS(53),
      /**
       * <pre>
       * &#64;img SLIPPERY_ROAD_de1.png &#64;img SLIPPERY_ROAD_us1.png
       * </pre>
       *
       * <code>SLIPPERY_ROAD = 54;</code>
       */
      SLIPPERY_ROAD(54),
      /**
       * <pre>
       * &#64;img UNEVEN_ROAD_de1.png
       * </pre>
       *
       * <code>UNEVEN_ROAD = 55;</code>
       */
      UNEVEN_ROAD(55),
      /**
       * <pre>
       * &#64;img SCHOOL_ZONE_us1.png
       * </pre>
       *
       * <code>SCHOOL_ZONE = 56;</code>
       */
      SCHOOL_ZONE(56),
      /**
       * <pre>
       * &#64;img TRAMWAY_CROSSING_us1.png
       * </pre>
       *
       * <code>TRAMWAY_CROSSING = 57;</code>
       */
      TRAMWAY_CROSSING(57),
      /**
       * <pre>
       * &#64;img CONGESTION_HAZARD_de1.png
       * </pre>
       *
       * <code>CONGESTION_HAZARD = 58;</code>
       */
      CONGESTION_HAZARD(58),
      /**
       * <pre>
       * &#64;img ACCIDENT_HAZARD_de1.png &#64;img ACCIDENT_HAZARD_us1.png
       * </pre>
       *
       * <code>ACCIDENT_HAZARD = 59;</code>
       */
      ACCIDENT_HAZARD(59),
      /**
       * <pre>
       * &#64;img BICYCLE_CROSSING_us1.png
       * </pre>
       *
       * <code>BICYCLE_CROSSING = 60;</code>
       */
      BICYCLE_CROSSING(60),
      /**
       * <pre>
       * &#64;img PRIORITY_OVER_ONCOMING_TRAFFIC_de1.png
       * </pre>
       *
       * <code>PRIORITY_OVER_ONCOMING_TRAFFIC = 61;</code>
       */
      PRIORITY_OVER_ONCOMING_TRAFFIC(61),
      /**
       * <pre>
       * &#64;img YIELD_de1.png
       * </pre>
       *
       * <code>YIELD = 62;</code>
       */
      YIELD(62),
      /**
       * <pre>
       * &#64;img PRIORITY_ROAD_de1.png
       * </pre>
       *
       * <code>PRIORITY_ROAD = 63;</code>
       */
      PRIORITY_ROAD(63),
      /**
       * <pre>
       * &#64;img PRIORITY_ROAD_END_de1.png
       * </pre>
       *
       * <code>PRIORITY_ROAD_END = 64;</code>
       */
      PRIORITY_ROAD_END(64),
      /**
       * <pre>
       * &#64;img TRAFFIC_CALMING_de1.png
       * </pre>
       *
       * <code>TRAFFIC_CALMING = 65;</code>
       */
      TRAFFIC_CALMING(65),
      /**
       * <pre>
       * &#64;img TRAFFIC_CALMING_END_de1.png
       * </pre>
       *
       * <code>TRAFFIC_CALMING_END = 66;</code>
       */
      TRAFFIC_CALMING_END(66),
      /**
       * <pre>
       * Further specification of the sign, e.g. green zone in Germany, may be provided in the field value_and_confidence.
       * &#64;img ENVIRONMENTAL_AREA_de1.png
       * </pre>
       *
       * <code>ENVIRONMENTAL_AREA = 67;</code>
       */
      ENVIRONMENTAL_AREA(67),
      /**
       * <pre>
       * &#64;img ENVIRONMENTAL_AREA_END_de1.png
       * </pre>
       *
       * <code>ENVIRONMENTAL_AREA_END = 68;</code>
       */
      ENVIRONMENTAL_AREA_END(68),
      /**
       * <pre>
       * &#64;img INTERSECTION_de1.png
       * </pre>
       *
       * <code>INTERSECTION = 69;</code>
       */
      INTERSECTION(69),
      /**
       * <pre>
       * &#64;img ROUNDABOUT_de1.png
       * </pre>
       *
       * <code>ROUNDABOUT = 70;</code>
       */
      ROUNDABOUT(70),
      /**
       * <pre>
       * &#64;img PASSING_ON_LEFT_de1.png &#64;img PASSING_ON_LEFT_us1.png
       * </pre>
       *
       * <code>PASSING_ON_LEFT = 71;</code>
       */
      PASSING_ON_LEFT(71),
      /**
       * <pre>
       * &#64;img PASSING_ON_RIGHT_de1.png &#64;img PASSING_ON_RIGHT_us1.png
       * </pre>
       *
       * <code>PASSING_ON_RIGHT = 72;</code>
       */
      PASSING_ON_RIGHT(72),
      /**
       * <pre>
       * &#64;img PASSING_ON_LEFT_OR_RIGHT_us1.png &#64;img PASSING_ON_LEFT_OR_RIGHT_us2.png
       * </pre>
       *
       * <code>PASSING_ON_LEFT_OR_RIGHT = 73;</code>
       */
      PASSING_ON_LEFT_OR_RIGHT(73),
      /**
       * <pre>
       * &#64;img MANDATORY_TURN_RIGHT_ONLY_de1.png &#64;img MANDATORY_TURN_RIGHT_ONLY_us1.png
       * </pre>
       *
       * <code>MANDATORY_TURN_RIGHT_ONLY = 74;</code>
       */
      MANDATORY_TURN_RIGHT_ONLY(74),
      /**
       * <pre>
       * &#64;img MANDATORY_TURN_LEFT_ONLY_de1.png &#64;img MANDATORY_TURN_LEFT_ONLY_us1.png
       * </pre>
       *
       * <code>MANDATORY_TURN_LEFT_ONLY = 75;</code>
       */
      MANDATORY_TURN_LEFT_ONLY(75),
      /**
       * <pre>
       * &#64;img MANDATORY_STRAIGHT_ONLY_de1.png &#64;img MANDATORY_STRAIGHT_ONLY_us1.png
       * </pre>
       *
       * <code>MANDATORY_STRAIGHT_ONLY = 76;</code>
       */
      MANDATORY_STRAIGHT_ONLY(76),
      /**
       * <pre>
       * &#64;img TURN_LEFT_OR_RIGHT_de1.png
       * </pre>
       *
       * <code>MANDATORY_TURN_LEFT_OR_RIGHT = 77;</code>
       */
      MANDATORY_TURN_LEFT_OR_RIGHT(77),
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>MANDATORY_TURN_RESTRICTION = 78;</code>
       */
      MANDATORY_TURN_RESTRICTION(78),
      /**
       * <pre>
       * &#64;img MANDATORY_STRAIGHT_OR_LEFT_de1.png
       * </pre>
       *
       * <code>MANDATORY_STRAIGHT_OR_LEFT = 79;</code>
       */
      MANDATORY_STRAIGHT_OR_LEFT(79),
      /**
       * <pre>
       * &#64;img MANDATORY_STRAIGHT_OR_RIGHT_de1.png
       * </pre>
       *
       * <code>MANDATORY_STRAIGHT_OR_RIGHT = 80;</code>
       */
      MANDATORY_STRAIGHT_OR_RIGHT(80),
      /**
       * <pre>
       * &#64;img NO_LEFT_TURN_us1.png
       * </pre>
       *
       * <code>NO_LEFT_TURN = 81;</code>
       */
      NO_LEFT_TURN(81),
      /**
       * <pre>
       * &#64;img NO_RIGHT_TURN_us1.png
       * </pre>
       *
       * <code>NO_RIGHT_TURN = 82;</code>
       */
      NO_RIGHT_TURN(82),
      /**
       * <pre>
       * &#64;img NO_U_TURN_de1.png &#64;img NO_U_TURN_us1.png
       * </pre>
       *
       * <code>NO_U_TURN = 83;</code>
       */
      NO_U_TURN(83),
      /**
       * <pre>
       * &#64;img NO_U_OR_LEFT_TURN_us1.png
       * </pre>
       *
       * <code>NO_U_OR_LEFT_TURN = 84;</code>
       */
      NO_U_OR_LEFT_TURN(84),
      /**
       * <pre>
       * &#64;img U_TURN_ALLOWED_us1.jpg
       * </pre>
       *
       * <code>U_TURN_ALLOWED = 85;</code>
       */
      U_TURN_ALLOWED(85),
      /**
       * <pre>
       * This type is valid for trucks and other transportation vehicles.
       * &#64;img MANDATORY_LEFT_TRUCK_de1.png
       * </pre>
       *
       * <code>MANDATORY_LEFT_TRUCK = 86;</code>
       */
      MANDATORY_LEFT_TRUCK(86),
      /**
       * <pre>
       * This type is valid for trucks and other transportation vehicles.
       * &#64;img MANDATORY_RIGHT_TRUCK_de1.png
       * </pre>
       *
       * <code>MANDATORY_RIGHT_TRUCK = 87;</code>
       */
      MANDATORY_RIGHT_TRUCK(87),
      /**
       * <pre>
       * This type is valid for trucks and other transportation vehicles.
       * &#64;img MANDATORY_STRAIGHT_TRUCK_de1.png
       * </pre>
       *
       * <code>MANDATORY_STRAIGHT_TRUCK = 88;</code>
       */
      MANDATORY_STRAIGHT_TRUCK(88),
      /**
       * <pre>
       * &#64;img NO_ENTRY_de1.png &#64;img NO_ENTRY_us1.png
       * </pre>
       *
       * <code>NO_ENTRY = 89;</code>
       */
      NO_ENTRY(89),
      /**
       * <pre>
       * &#64;img DEAD_END_de1.png &#64;img DEAD_END_us1.png
       * </pre>
       *
       * <code>DEAD_END = 90;</code>
       */
      DEAD_END(90),
      /**
       * <pre>
       * &#64;img HIGH_OCCUPANCY_VEHICLE_LANE_us1.png
       * </pre>
       *
       * <code>HIGH_OCCUPANCY_VEHICLE_LANE = 91;</code>
       */
      HIGH_OCCUPANCY_VEHICLE_LANE(91),
      /**
       * <pre>
       * &#64;img TOLL_de1.png
       * </pre>
       *
       * <code>TOLL = 92;</code>
       */
      TOLL(92),
      /**
       * <code>TOLL_CAR = 93;</code>
       */
      TOLL_CAR(93),
      /**
       * <pre>
       * &#64;img TOLL_LANE_us1.jpg
       * </pre>
       *
       * <code>TOLL_LANE = 94;</code>
       */
      TOLL_LANE(94),
      /**
       * <pre>
       * &#64;img EXPRESS_LANE_us1.jpg
       * </pre>
       *
       * <code>EXPRESS_LANE = 95;</code>
       */
      EXPRESS_LANE(95),
      /**
       * <pre>
       * &#64;img SHOULDER_OPEN_FOR_TRAFFIC_de1.png
       * </pre>
       *
       * <code>SHOULDER_OPEN_FOR_TRAFFIC = 96;</code>
       */
      SHOULDER_OPEN_FOR_TRAFFIC(96),
      /**
       * <pre>
       * &#64;img SHOULDER_CLOSED_FOR_TRAFFIC_de1.png
       * </pre>
       *
       * <code>SHOULDER_CLOSED_FOR_TRAFFIC = 97;</code>
       */
      SHOULDER_CLOSED_FOR_TRAFFIC(97),
      /**
       * <pre>
       * &#64;img LANE_CLOSED_us1.jpg
       * </pre>
       *
       * <code>LANE_CLOSED = 98;</code>
       */
      LANE_CLOSED(98),
      /**
       * <pre>
       * &#64;img LANE_CLOSED_RIGHT_MOST_LANE_us1.png
       * </pre>
       *
       * <code>LANE_CLOSED_RIGHT_MOST_LANE = 99;</code>
       */
      LANE_CLOSED_RIGHT_MOST_LANE(99),
      /**
       * <code>LANE_CLOSED_LEFT_MOST_LANE = 100;</code>
       */
      LANE_CLOSED_LEFT_MOST_LANE(100),
      /**
       * <pre>
       * &#64;img WARNING_PEDESTRIAN_de1.png &#64;img WARNING_PEDESTRIAN_us1.png
       * </pre>
       *
       * <code>WARNING_PEDESTRIAN = 101;</code>
       */
      WARNING_PEDESTRIAN(101),
      /**
       * <pre>
       * &#64;img WARNING_CHILDREN_de1.png
       * </pre>
       *
       * <code>WARNING_CHILDREN = 102;</code>
       */
      WARNING_CHILDREN(102),
      /**
       * <pre>
       * &#64;img WARNING_BICYCLE_de1.png
       * </pre>
       *
       * <code>WARNING_BICYCLE = 103;</code>
       */
      WARNING_BICYCLE(103),
      /**
       * <pre>
       * &#64;img WARNING_BUS_de1.png
       * </pre>
       *
       * <code>WARNING_BUS = 104;</code>
       */
      WARNING_BUS(104),
      /**
       * <pre>
       * &#64;img PUBLIC_TRANSPORTATION_STOP_de1.png
       * </pre>
       *
       * <code>PUBLIC_TRANSPORTATION_STOP = 105;</code>
       */
      PUBLIC_TRANSPORTATION_STOP(105),
      /**
       * <pre>
       * Directly at the sign, not the "warning of crossing ahead".
       * &#64;img PEDESTRIAN_CROSSING_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_CROSSING = 106;</code>
       */
      PEDESTRIAN_CROSSING(106),
      /**
       * <pre>
       * The weight limitation may be provided in the field value_and_confidence. The format is to be provided in "xx t" defining the weight in xx tons or "xxxxxx lbs" defining the weight in x pounds.
       * &#64;img WEIGHT_RESTRICTION_de1.png
       * </pre>
       *
       * <code>WEIGHT_RESTRICTION = 107;</code>
       */
      WEIGHT_RESTRICTION(107),
      /**
       * <pre>
       * The height limitation, e.g. when driving under a bridge, may be provided in the field value_and_confidence. The format is to be provided in "xx.x m" defining the height in xx.x meter or "xx f yy in" defining the height in xx foot and yy inches.
       * &#64;img HEIGHT_RESTRICTION_de1.png
       * </pre>
       *
       * <code>HEIGHT_RESTRICTION = 108;</code>
       */
      HEIGHT_RESTRICTION(108),
      /**
       * <pre>
       * The length limitation may be provided in the field value_and_confidence. The format is to be provided in "xx.x m" defining the length in xx.x meter or "xx f yy in" defining the height in xx foot and yy inches.
       * &#64;img LENGTH_RESTRICTION_de1.png
       * </pre>
       *
       * <code>LENGTH_RESTRICTION = 109;</code>
       */
      LENGTH_RESTRICTION(109),
      /**
       * <pre>
       * The width limitation may be provided in the field value_and_confidence. The format is to be provided in "xx.x m" defining the width in xx.x meter or "xx f yy in" defining the height in xx foot and yy inches.
       * &#64;img WIDTH_RESTRICTION_de1.png
       * </pre>
       *
       * <code>WIDTH_RESTRICTION = 110;</code>
       */
      WIDTH_RESTRICTION(110),
      /**
       * <pre>
       * &#64;img WARNING_TRUCK_ROLLOVER_us1.png &#64;img WARNING_TRUCK_ROLLOVER_us2.png
       * </pre>
       *
       * <code>WARNING_TRUCK_ROLLOVER = 111;</code>
       */
      WARNING_TRUCK_ROLLOVER(111),
      /**
       * <pre>
       * &#64;img SIGNAL_AHEAD_de1.png &#64;img SIGNAL_AHEAD_us1.png
       * </pre>
       *
       * <code>SIGNAL_AHEAD = 112;</code>
       */
      SIGNAL_AHEAD(112),
      /**
       * <pre>
       * &#64;img SKI_CROSSING_us1.jpg
       * </pre>
       *
       * <code>SKI_CROSSING = 113;</code>
       */
      SKI_CROSSING(113),
      /**
       * <pre>
       * &#64;img NO_AGRICULTUR_VEHICLE_de1.png &#64;img NO_AGRICULTUR_VEHICLE_us1.png
       * </pre>
       *
       * <code>NO_AGRICULTUR_VEHICLE = 114;</code>
       */
      NO_AGRICULTUR_VEHICLE(114),
      /**
       * <pre>
       * &#64;img NO_BICYCLE_de1.png
       * </pre>
       *
       * <code>NO_BICYCLE = 115;</code>
       */
      NO_BICYCLE(115),
      /**
       * <pre>
       * &#64;img NO_BUS_de1.png
       * </pre>
       *
       * <code>NO_BUS = 116;</code>
       */
      NO_BUS(116),
      /**
       * <code>NO_HAUL_EXPLOSIVES = 117;</code>
       */
      NO_HAUL_EXPLOSIVES(117),
      /**
       * <code>NO_HAUL_HARMFUL_TO_WATER = 118;</code>
       */
      NO_HAUL_HARMFUL_TO_WATER(118),
      /**
       * <pre>
       * &#64;img NO_HAUL_HAZARDOUS_MATERIAL_de1.png
       * </pre>
       *
       * <code>NO_HAUL_HAZARDOUS_MATERIAL = 119;</code>
       */
      NO_HAUL_HAZARDOUS_MATERIAL(119),
      /**
       * <pre>
       * &#64;img NO_MOTORCYCLE_de1.png
       * </pre>
       *
       * <code>NO_MOTORCYCLE = 120;</code>
       */
      NO_MOTORCYCLE(120),
      /**
       * <pre>
       * &#64;img NO_TRAILER_de1.png
       * </pre>
       *
       * <code>NO_TRAILER = 121;</code>
       */
      NO_TRAILER(121),
      /**
       * <pre>
       * &#64;img NO_TRUCK_WITH_TRAILER_de1.png
       * </pre>
       *
       * <code>NO_TRUCK_WITH_TRAILER = 122;</code>
       */
      NO_TRUCK_WITH_TRAILER(122),
      /**
       * <pre>
       * &#64;img PARK_AND_RIDE_de1.png
       * </pre>
       *
       * <code>PARK_AND_RIDE = 123;</code>
       */
      PARK_AND_RIDE(123),
      /**
       * <pre>
       * These signs are typical mounted on a periodical distance. The distance value itself may be provided in the field value_and_confidence. The format is to be provided in "xxx.x" defining the distance offset value in xxx.x, which is to be used without units to represent both kilometer and miles.
       * &#64;img ROAD_DISTANCE_de1.jpg
       * </pre>
       *
       * <code>ROAD_DISTANCE = 124;</code>
       */
      ROAD_DISTANCE(124),
      /**
       * <pre>
       * &#64;img EMERGENCY_PHONE_de1.png
       * </pre>
       *
       * <code>EMERGENCY_PHONE = 125;</code>
       */
      EMERGENCY_PHONE(125),
      /**
       * <pre>
       * &#64;img SPEED_LIMIT_ENFORCEMENT_de1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_ENFORCEMENT = 126;</code>
       */
      SPEED_LIMIT_ENFORCEMENT(126),
      /**
       * <pre>
       * &#64;img TRAFFIC_LIGHT_ENFORCEMENT_us1.png
       * </pre>
       *
       * <code>TRAFFIC_LIGHT_ENFORCEMENT = 127;</code>
       */
      TRAFFIC_LIGHT_ENFORCEMENT(127),
      /**
       * <pre>
       * Sign board showing direction or distance to a city, location or exit.
       * &#64;img BOARD_DIRECTION_de1.png
       * </pre>
       *
       * <code>BOARD_DIRECTION = 128;</code>
       */
      BOARD_DIRECTION(128),
      /**
       * <pre>
       * Street name - street name text provided on sign can be specified in value_and_confidence.
       * &#64;img STREET_NAME_us1.png
       * </pre>
       *
       * <code>STREET_NAME = 129;</code>
       */
      STREET_NAME(129),
      /**
       * <pre>
       * Speed limit only valid for trucks. The specific speed limit value may be provided in the field value_and_confidence. However, speed limit start and supplementary sign TRUCK should be preferred if two signs are mounted on sign post.
       * &#64;img TRUCK_SPEED_LIMIT_us1.png
       * </pre>
       *
       * <code>TRUCK_SPEED_LIMIT = 130;</code>
       */
      TRUCK_SPEED_LIMIT(130),
      /**
       * <pre>
       * Speed limit only valid for trucks. The specific speed limit value may be provided in the field value_and_confidence. However, speed limit start and supplementary sign TRUCK should be preferred if two signs are mounted on sign post.
       * </pre>
       *
       * <code>TRUCK_SPEED_LIMIT_END = 131;</code>
       */
      TRUCK_SPEED_LIMIT_END(131),
      /**
       * <pre>
       * Speed limit only valid at night. The specific speed limit value may be provided in the field value_and_confidence. However, speed limit start and supplementary type NIGHT should be preferred if two signs are mounted on sign post.
       * &#64;img SPEED_LIMIT_NIGHT_us1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_NIGHT = 132;</code>
       */
      SPEED_LIMIT_NIGHT(132),
      /**
       * <pre>
       * Speed limit only valid at night. The specific speed limit value may be provided in the field value_and_confidence. However, speed limit start and supplementary type NIGHT should be preferred if two signs are mounted on sign post.
       * </pre>
       *
       * <code>SPEED_LIMIT_NIGHT_END = 133;</code>
       */
      SPEED_LIMIT_NIGHT_END(133),
      /**
       * <pre>
       * &#64;img MINIMUM_SPEED_de1.png &#64;img MINIMUM_SPEED_us1.png
       * </pre>
       *
       * <code>MINIMUM_SPEED = 134;</code>
       */
      MINIMUM_SPEED(134),
      /**
       * <pre>
       * &#64;img MINIMUM_SPEED_END_de1.png
       * </pre>
       *
       * <code>MINIMUM_SPEED_END = 135;</code>
       */
      MINIMUM_SPEED_END(135),
      /**
       * <pre>
       * &#64;img PEDESTRIAN_ZONE_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_ZONE = 136;</code>
       */
      PEDESTRIAN_ZONE(136),
      /**
       * <pre>
       * &#64;img PEDESTRIAN_ZONE_END_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_ZONE_END = 137;</code>
       */
      PEDESTRIAN_ZONE_END(137),
      /**
       * <pre>
       * &#64;img PEDESTRIAN_PATH_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_PATH = 138;</code>
       */
      PEDESTRIAN_PATH(138),
      /**
       * <code>PEDESTRIAN_PATH_END = 139;</code>
       */
      PEDESTRIAN_PATH_END(139),
      /**
       * <pre>
       * &#64;img PEDESTRIAN_BICYCLE_PATH_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_BICYCLE_PATH = 140;</code>
       */
      PEDESTRIAN_BICYCLE_PATH(140),
      /**
       * <code>PEDESTRIAN_BICYCLE_PATH_END = 141;</code>
       */
      PEDESTRIAN_BICYCLE_PATH_END(141),
      /**
       * <pre>
       * &#64;img BICYCLE_PATH_de1.png
       * </pre>
       *
       * <code>BICYCLE_PATH = 142;</code>
       */
      BICYCLE_PATH(142),
      /**
       * <code>BICYCLE_PATH_END = 143;</code>
       */
      BICYCLE_PATH_END(143),
      /**
       * <pre>
       * &#64;img BICYCLE_STREET_de1.png
       * </pre>
       *
       * <code>BICYCLE_STREET = 144;</code>
       */
      BICYCLE_STREET(144),
      /**
       * <code>BICYCLE_STREET_END = 145;</code>
       */
      BICYCLE_STREET_END(145),
      /**
       * <pre>
       * &#64;img CURVE_LEFT_THEN_RIGHT_de1.png &#64;img CURVE_LEFT_THEN_RIGHT_us1.png
       * </pre>
       *
       * <code>CURVE_LEFT_THEN_RIGHT = 146;</code>
       */
      CURVE_LEFT_THEN_RIGHT(146),
      /**
       * <pre>
       * &#64;img CURVE_RIGHT_THEN_LEFT_de1.png &#64;img CURVE_RIGHT_THEN_LEFT_us1.png
       * </pre>
       *
       * <code>CURVE_RIGHT_THEN_LEFT = 147;</code>
       */
      CURVE_RIGHT_THEN_LEFT(147),
      /**
       * <pre>
       * &#64;img CURVE_TRIPLE_HAIRPIN_cn1.png
       * </pre>
       *
       * <code>CURVE_TRIPLE_HAIRPIN = 148;</code>
       */
      CURVE_TRIPLE_HAIRPIN(148),
      /**
       * <code>STEEP_DROP = 149;</code>
       */
      STEEP_DROP(149),
      /**
       * <pre>
       * &#64;img STEEP_DROP_ON_LEFT_cn1.png
       * </pre>
       *
       * <code>STEEP_DROP_ON_LEFT = 150;</code>
       */
      STEEP_DROP_ON_LEFT(150),
      /**
       * <pre>
       * &#64;img STEEP_DROP_ON_RIGHT_cn1.png
       * </pre>
       *
       * <code>STEEP_DROP_ON_RIGHT = 151;</code>
       */
      STEEP_DROP_ON_RIGHT(151),
      /**
       * <pre>
       * &#64;img NO_ANIMAL_CATTLE_de1.png
       * </pre>
       *
       * <code>NO_ANIMAL_CATTLE = 152;</code>
       */
      NO_ANIMAL_CATTLE(152),
      /**
       * <code>ANIMAL_DEER = 153;</code>
       */
      ANIMAL_DEER(153),
      /**
       * <code>ANIMAL_MOOSE = 154;</code>
       */
      ANIMAL_MOOSE(154),
      /**
       * <pre>
       * &#64;img NO_HORSE_RIDING_de1.png
       * </pre>
       *
       * <code>NO_HORSE_RIDING = 155;</code>
       */
      NO_HORSE_RIDING(155),
      /**
       * <pre>
       * &#64;img FALLING_ROCKS_us1.png
       * </pre>
       *
       * <code>FALLING_ROCKS = 156;</code>
       */
      FALLING_ROCKS(156),
      /**
       * <pre>
       * &#64;img FALLING_ROCKS_LEFT_us1.png
       * </pre>
       *
       * <code>FALLING_ROCKS_LEFT = 157;</code>
       */
      FALLING_ROCKS_LEFT(157),
      /**
       * <pre>
       * &#64;img FALLING_ROCKS_RIGHT_de1.png
       * </pre>
       *
       * <code>FALLING_ROCKS_RIGHT = 158;</code>
       */
      FALLING_ROCKS_RIGHT(158),
      /**
       * <pre>
       * &#64;img YIELD_TO_ONCOMING_TRAFFIC_de1.png
       * </pre>
       *
       * <code>YIELD_TO_ONCOMING_TRAFFIC = 159;</code>
       */
      YIELD_TO_ONCOMING_TRAFFIC(159),
      /**
       * <pre>
       * &#64;img UNPROTECTED_LEFT_TURN_us1.png
       * </pre>
       *
       * <code>UNPROTECTED_LEFT_TURN = 160;</code>
       */
      UNPROTECTED_LEFT_TURN(160),
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>ONEWAY_TRAFFIC = 161;</code>
       */
      ONEWAY_TRAFFIC(161),
      /**
       * <pre>
       * &#64;img ONEWAY_TRAFFIC_TO_LEFT_de1.png &#64;img ONEWAY_TRAFFIC_TO_LEFT_us1.png
       * </pre>
       *
       * <code>ONEWAY_TRAFFIC_TO_LEFT = 162;</code>
       */
      ONEWAY_TRAFFIC_TO_LEFT(162),
      /**
       * <pre>
       * &#64;img ONEWAY_TRAFFIC_TO_RIGHT_de1.png
       * </pre>
       *
       * <code>ONEWAY_TRAFFIC_TO_RIGHT = 163;</code>
       */
      ONEWAY_TRAFFIC_TO_RIGHT(163),
      /**
       * <pre>
       * &#64;img ONEWAY_TRAFFIC_TO_STRAIGHT_de1.png
       * </pre>
       *
       * <code>ONEWAY_TRAFFIC_TO_STRAIGHT = 164;</code>
       */
      ONEWAY_TRAFFIC_TO_STRAIGHT(164),
      /**
       * <pre>
       * &#64;img NO_VEHICLE_de1.png
       * </pre>
       *
       * <code>NO_VEHICLE = 165;</code>
       */
      NO_VEHICLE(165),
      /**
       * <pre>
       * &#64;img NO_MOTOR_VEHICLE_de1.png
       * </pre>
       *
       * <code>NO_MOTOR_VEHICLE = 166;</code>
       */
      NO_MOTOR_VEHICLE(166),
      /**
       * <pre>
       * &#64;img NO_TRUCK_de1.png
       * </pre>
       *
       * <code>NO_TRUCK = 167;</code>
       */
      NO_TRUCK(167),
      /**
       * <pre>
       * &#64;img NO_PEDESTRIAN_de1.png &#64;img NO_PEDESTRIAN_de2.png
       * </pre>
       *
       * <code>NO_PEDESTRIAN = 168;</code>
       */
      NO_PEDESTRIAN(168),
      /**
       * <pre>
       * &#64;img LANE_USED_IN_BOTH_DIRECTIONS_us1.png
       * </pre>
       *
       * <code>LANE_USED_IN_BOTH_DIRECTIONS = 169;</code>
       */
      LANE_USED_IN_BOTH_DIRECTIONS(169),
      /**
       * <pre>
       * &#64;img FOG_AREA_us1.png
       * </pre>
       *
       * <code>FOG_AREA = 170;</code>
       */
      FOG_AREA(170),
      /**
       * <pre>
       * &#64;img TIRE_CHAINS_MANDATORY_de1.png
       * </pre>
       *
       * <code>TIRE_CHAINS_MANDATORY = 171;</code>
       */
      TIRE_CHAINS_MANDATORY(171),
      /**
       * <pre>
       * &#64;img HIJACKING_HOTSPOT_us1.png
       * </pre>
       *
       * <code>HIJACKING_HOTSPOT = 172;</code>
       */
      HIJACKING_HOTSPOT(172),
      /**
       * <code>OVERPASS_AHEAD = 173;</code>
       */
      OVERPASS_AHEAD(173),
      /**
       * <pre>
       * &#64;img TUNNEL_de1.png &#64;img TUNNEL_us1.png
       * </pre>
       *
       * <code>TUNNEL = 174;</code>
       */
      TUNNEL(174),
      /**
       * <pre>
       * &#64;img FERRY_TERMINAL_us1.png
       * </pre>
       *
       * <code>FERRY_TERMINAL = 175;</code>
       */
      FERRY_TERMINAL(175),
      /**
       * <pre>
       * &#64;img NARROW_BRIDGE_us1.png
       * </pre>
       *
       * <code>NARROW_BRIDGE = 176;</code>
       */
      NARROW_BRIDGE(176),
      /**
       * <pre>
       * &#64;img NO_IDLING_de1.png &#64;img NO_IDLING_us1.png
       * </pre>
       *
       * <code>NO_IDLING = 177;</code>
       */
      NO_IDLING(177),
      /**
       * <pre>
       * &#64;img HUMPBACK_BRIDGE_us1.png
       * </pre>
       *
       * <code>HUMPBACK_BRIDGE = 178;</code>
       */
      HUMPBACK_BRIDGE(178),
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>EMBANKMENT = 179;</code>
       */
      EMBANKMENT(179),
      /**
       * <pre>
       * &#64;img EMBANKMENT_ON_THE_LEFT_us1.png
       * </pre>
       *
       * <code>EMBANKMENT_ON_THE_LEFT = 180;</code>
       */
      EMBANKMENT_ON_THE_LEFT(180),
      /**
       * <pre>
       * &#64;img EMBANKMENT_ON_THE_RIGHT_de1.png
       * </pre>
       *
       * <code>EMBANKMENT_ON_THE_RIGHT = 181;</code>
       */
      EMBANKMENT_ON_THE_RIGHT(181),
      /**
       * <pre>
       * &#64;img CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD_de1.png
       * </pre>
       *
       * <code>CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD = 182;</code>
       */
      CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD(182),
      /**
       * <pre>
       * &#64;img CROSSING_WITH_PRIORITY_TO_THE_RIGHT_us1.png
       * </pre>
       *
       * <code>CROSSING_WITH_PRIORITY_TO_THE_RIGHT = 183;</code>
       */
      CROSSING_WITH_PRIORITY_TO_THE_RIGHT(183),
      /**
       * <pre>
       * &#64;img BRANCH_TO_THE_LEFT_de1.png
       * </pre>
       *
       * <code>BRANCH_TO_THE_LEFT = 184;</code>
       */
      BRANCH_TO_THE_LEFT(184),
      /**
       * <pre>
       * &#64;img BRANCH_TO_THE_RIGHT_de1.png
       * </pre>
       *
       * <code>BRANCH_TO_THE_RIGHT = 185;</code>
       */
      BRANCH_TO_THE_RIGHT(185),
      /**
       * <pre>
       * &#64;img TWO_WAY_TRAFFIC_de1.png &#64;img TWO_WAY_TRAFFIC_us1.png
       * </pre>
       *
       * <code>TWO_WAY_TRAFFIC = 186;</code>
       */
      TWO_WAY_TRAFFIC(186),
      /**
       * <pre>
       * &#64;img BUMP_us1.png
       * </pre>
       *
       * <code>BUMP = 187;</code>
       */
      BUMP(187),
      /**
       * <pre>
       * &#64;img DIP_us1.png
       * </pre>
       *
       * <code>DIP = 188;</code>
       */
      DIP(188),
      /**
       * <pre>
       * &#64;img ROAD_FLOODED_us1.png
       * </pre>
       *
       * <code>ROAD_FLOODED = 189;</code>
       */
      ROAD_FLOODED(189),
      /**
       * <pre>
       * &#64;img AUDIBLE_WARNING_us1.png
       * </pre>
       *
       * <code>AUDIBLE_WARNING = 190;</code>
       */
      AUDIBLE_WARNING(190),
      /**
       * <pre>
       * &#64;img VILLAGE_AHEAD_us1.png
       * </pre>
       *
       * <code>VILLAGE_AHEAD = 191;</code>
       */
      VILLAGE_AHEAD(191),
      /**
       * <pre>
       * &#64;img MOVABLE_BRIDGE_de1.png
       * </pre>
       *
       * <code>MOVABLE_BRIDGE = 192;</code>
       */
      MOVABLE_BRIDGE(192),
      /**
       * <pre>
       * &#64;img SLOW_DOWN_us1.png
       * </pre>
       *
       * <code>SLOW_DOWN = 193;</code>
       */
      SLOW_DOWN(193),
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>INTERSECTION_T = 194;</code>
       */
      INTERSECTION_T(194),
      /**
       * <code>INTERSECTION_T_LEFT = 195;</code>
       */
      INTERSECTION_T_LEFT(195),
      /**
       * <pre>
       * &#64;img INTERSECTION_T_RIGHT_us1.png
       * </pre>
       *
       * <code>INTERSECTION_T_RIGHT = 196;</code>
       */
      INTERSECTION_T_RIGHT(196),
      /**
       * <pre>
       * &#64;img INTERSECTION_T_LEFT_RIGHT_us1.png
       * </pre>
       *
       * <code>INTERSECTION_T_LEFT_RIGHT = 197;</code>
       */
      INTERSECTION_T_LEFT_RIGHT(197),
      /**
       * <pre>
       * &#64;img INTERSECTION_Y_de1.png
       * </pre>
       *
       * <code>INTERSECTION_Y = 198;</code>
       */
      INTERSECTION_Y(198),
      /**
       * <pre>
       * &#64;img USE_LOW_GEAR_us1.png
       * </pre>
       *
       * <code>USE_LOW_GEAR = 199;</code>
       */
      USE_LOW_GEAR(199),
      /**
       * <pre>
       * &#64;img USE_LOW_GEAR_END_us1.png
       * </pre>
       *
       * <code>USE_LOW_GEAR_END = 200;</code>
       */
      USE_LOW_GEAR_END(200),
      /**
       * <pre>
       * &#64;img NO_COMPRESSION_BRAKING_us1.png
       * </pre>
       *
       * <code>NO_COMPRESSION_BRAKING = 201;</code>
       */
      NO_COMPRESSION_BRAKING(201),
      /**
       * <pre>
       * &#64;img NO_COMPRESSION_BRAKING_END_us1.png
       * </pre>
       *
       * <code>NO_COMPRESSION_BRAKING_END = 202;</code>
       */
      NO_COMPRESSION_BRAKING_END(202),
      /**
       * <pre>
       * &#64;img WAITING_LINE_us1.png
       * </pre>
       *
       * <code>WAITING_LINE = 203;</code>
       */
      WAITING_LINE(203),
      /**
       * <pre>
       * &#64;img DONT_STOP_ZONE_us1.png
       * </pre>
       *
       * <code>DONT_STOP_ZONE = 204;</code>
       */
      DONT_STOP_ZONE(204),
      /**
       * <pre>
       * &#64;img HONKING_PROHIBITED_us1.png
       * </pre>
       *
       * <code>HONKING_PROHIBITED = 205;</code>
       */
      HONKING_PROHIBITED(205),
      /**
       * <pre>
       * &#64;img FASTEN_SEAT_BELT_us1.png
       * </pre>
       *
       * <code>FASTEN_SEAT_BELT = 206;</code>
       */
      FASTEN_SEAT_BELT(206),
      /**
       * <pre>
       * &#64;img HAMLET_ENTRY_de1.png
       * </pre>
       *
       * <code>HAMLET_ENTRY = 207;</code>
       */
      HAMLET_ENTRY(207),
      /**
       * <pre>
       * &#64;img HAMLET_EXIT_de1.png
       * </pre>
       *
       * <code>HAMLET_EXIT = 208;</code>
       */
      HAMLET_EXIT(208),
      /**
       * <pre>
       * &#64;img HIGHWAY_MARKER_1_STRIPE_de1.png
       * </pre>
       *
       * <code>HIGHWAY_MARKER_1_STRIPE = 209;</code>
       */
      HIGHWAY_MARKER_1_STRIPE(209),
      /**
       * <pre>
       * &#64;img HIGHWAY_MARKER_2_STRIPES_de1.png
       * </pre>
       *
       * <code>HIGHWAY_MARKER_2_STRIPES = 210;</code>
       */
      HIGHWAY_MARKER_2_STRIPES(210),
      /**
       * <pre>
       * &#64;img HIGHWAY_MARKER_3_STRIPES_de1.png
       * </pre>
       *
       * <code>HIGHWAY_MARKER_3_STRIPES = 211;</code>
       */
      HIGHWAY_MARKER_3_STRIPES(211),
      /**
       * <pre>
       * &#64;img GUIDING_BEACON_de1.png
       * </pre>
       *
       * <code>GUIDING_BEACON = 212;</code>
       */
      GUIDING_BEACON(212),
      /**
       * <pre>
       * &#64;img COUNTDOWN_MARKER_1_STRIPE_de1.png
       * </pre>
       *
       * <code>COUNTDOWN_MARKER_1_STRIPE = 213;</code>
       */
      COUNTDOWN_MARKER_1_STRIPE(213),
      /**
       * <pre>
       * &#64;img COUNTDOWN_MARKER_2_STRIPES_de1.png
       * </pre>
       *
       * <code>COUNTDOWN_MARKER_2_STRIPES = 214;</code>
       */
      COUNTDOWN_MARKER_2_STRIPES(214),
      /**
       * <pre>
       * &#64;img COUNTDOWN_MARKER_3_STRIPES_de1.png
       * </pre>
       *
       * <code>COUNTDOWN_MARKER_3_STRIPES = 215;</code>
       */
      COUNTDOWN_MARKER_3_STRIPES(215),
      /**
       * <pre>
       * &#64;img DIVERSION_ROUTE_de1.png
       * </pre>
       *
       * <code>DIVERSION_ROUTE = 216;</code>
       */
      DIVERSION_ROUTE(216),
      /**
       * <pre>
       * &#64;img DIVERSION_ROUTE_END_de1.png
       * </pre>
       *
       * <code>DIVERSION_ROUTE_END = 217;</code>
       */
      DIVERSION_ROUTE_END(217),
      /**
       * <pre>
       * &#64;img NO_STOPPING_EXCEPT_TAXI_de1.png
       * </pre>
       *
       * <code>NO_STOPPING_EXCEPT_TAXI = 218;</code>
       */
      NO_STOPPING_EXCEPT_TAXI(218),
      /**
       * <pre>
       * &#64;img NO_STOPPING_de1.png
       * </pre>
       *
       * <code>NO_STOPPING = 219;</code>
       */
      NO_STOPPING(219),
      /**
       * <code>NO_STOPPING_LEFT = 220;</code>
       */
      NO_STOPPING_LEFT(220),
      /**
       * <code>NO_STOPPING_RIGHT = 221;</code>
       */
      NO_STOPPING_RIGHT(221),
      /**
       * <pre>
       * &#64;img NO_STOPPING_LEFT_AND_RIGHT_de1.png
       * </pre>
       *
       * <code>NO_STOPPING_LEFT_AND_RIGHT = 222;</code>
       */
      NO_STOPPING_LEFT_AND_RIGHT(222),
      /**
       * <pre>
       * If sensor is not aware of left or right restriction, or was not present on sign.
       * &#64;img NO_PARKING_de1.png
       * </pre>
       *
       * <code>NO_PARKING = 223;</code>
       */
      NO_PARKING(223),
      /**
       * <pre>
       * &#64;img NO_PARKING_LEFT_de1.png
       * </pre>
       *
       * <code>NO_PARKING_LEFT = 224;</code>
       */
      NO_PARKING_LEFT(224),
      /**
       * <pre>
       * &#64;img NO_PARKING_RIGHT_de1.png
       * </pre>
       *
       * <code>NO_PARKING_RIGHT = 225;</code>
       */
      NO_PARKING_RIGHT(225),
      /**
       * <pre>
       * &#64;img NO_PARKING_LEFT_AND_RIGHT_de1.png
       * </pre>
       *
       * <code>NO_PARKING_LEFT_AND_RIGHT = 226;</code>
       */
      NO_PARKING_LEFT_AND_RIGHT(226),
      /**
       * <pre>
       * &#64;img RUNNAWAY_TRUCK_RAMP_us1.png
       * </pre>
       *
       * <code>RUNNAWAY_TRUCK_RAMP = 227;</code>
       */
      RUNNAWAY_TRUCK_RAMP(227),
      /**
       * <pre>
       * &#64;img TURN_ON_GREEN_de1.png
       * </pre>
       *
       * <code>TURN_ON_GREEN = 228;</code>
       */
      TURN_ON_GREEN(228),
      /**
       * <pre>
       * &#64;img NO_TURN_ON_RED_us1.jpg
       * </pre>
       *
       * <code>NO_TURN_ON_RED = 229;</code>
       */
      NO_TURN_ON_RED(229),
      /**
       * <pre>
       * &#64;img MOTORWAY_ROAD_NUMBER_de1.png
       * </pre>
       *
       * <code>MOTORWAY_ROAD_NUMBER = 230;</code>
       */
      MOTORWAY_ROAD_NUMBER(230),
      /**
       * <pre>
       * &#64;img HIGHWAY_ROAD_NUMBER_de1.png
       * </pre>
       *
       * <code>HIGHWAY_ROAD_NUMBER = 231;</code>
       */
      HIGHWAY_ROAD_NUMBER(231),
      /**
       * <pre>
       * &#64;img HIGHWAY_INTERCHANGE_NUMBER_de1.png
       * </pre>
       *
       * <code>HIGHWAY_INTERCHANGE_NUMBER = 232;</code>
       */
      HIGHWAY_INTERCHANGE_NUMBER(232),
      /**
       * <pre>
       * &#64;img EUROPEAN_ROAD_NUMBER_de1.png
       * </pre>
       *
       * <code>EUROPEAN_ROAD_NUMBER = 233;</code>
       */
      EUROPEAN_ROAD_NUMBER(233),
      /**
       * <pre>
       * &#64;img SPEED_LIMIT_ZONE_de1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_ZONE = 234;</code>
       */
      SPEED_LIMIT_ZONE(234),
      /**
       * <pre>
       * &#64;img SPEED_LIMIT_ZONE_END_de1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_ZONE_END = 235;</code>
       */
      SPEED_LIMIT_ZONE_END(235),
      /**
       * <pre>
       * &#64;img NO_PARKING_ZONE_de1.png
       * </pre>
       *
       * <code>NO_PARKING_ZONE = 236;</code>
       */
      NO_PARKING_ZONE(236),
      /**
       * <pre>
       * &#64;img NO_PARKING_ZONE_END_de1.png
       * </pre>
       *
       * <code>NO_PARKING_ZONE_END = 237;</code>
       */
      NO_PARKING_ZONE_END(237),
      /**
       * <pre>
       * &#64;img PARKING_ZONE_de1.png
       * </pre>
       *
       * <code>PARKING_ZONE = 238;</code>
       */
      PARKING_ZONE(238),
      /**
       * <pre>
       * &#64;img PARKING_ZONE_END_de1.png
       * </pre>
       *
       * <code>PARKING_ZONE_END = 239;</code>
       */
      PARKING_ZONE_END(239),
      /**
       * <pre>
       * If sensor is not aware of left or right restriction, or was not present on sign.
       * &#64;img PARKING_de1.png
       * </pre>
       *
       * <code>PARKING = 240;</code>
       */
      PARKING(240),
      /**
       * <pre>
       * &#64;img PARKING_TO_LEFT_de1.png
       * </pre>
       *
       * <code>PARKING_TO_LEFT = 241;</code>
       */
      PARKING_TO_LEFT(241),
      /**
       * <pre>
       * &#64;img PARKING_TO_RIGHT_de1.png
       * </pre>
       *
       * <code>PARKING_TO_RIGHT = 242;</code>
       */
      PARKING_TO_RIGHT(242),
      /**
       * <pre>
       * &#64;img PARKING_GARAGE_de1.png
       * </pre>
       *
       * <code>PARKING_GARAGE = 243;</code>
       */
      PARKING_GARAGE(243),
      /**
       * <pre>
       * &#64;img PARKING_ON_SIDEWAY_de1.png
       * </pre>
       *
       * <code>PARKING_ON_SIDEWAY = 244;</code>
       */
      PARKING_ON_SIDEWAY(244),
      /**
       * <code>SAFETY_DISTANCE = 245;</code>
       */
      SAFETY_DISTANCE(245),
      /**
       * <code>SAFETY_DISTANCE_VEHICLE = 246;</code>
       */
      SAFETY_DISTANCE_VEHICLE(246),
      /**
       * <pre>
       * &#64;img SAFETY_DISTANCE_TRUCK_de1.png
       * </pre>
       *
       * <code>SAFETY_DISTANCE_TRUCK = 247;</code>
       */
      SAFETY_DISTANCE_TRUCK(247),
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * &#64;img DETOUR_de1.png
       * </pre>
       *
       * <code>DETOUR = 248;</code>
       */
      DETOUR(248),
      /**
       * <pre>
       * &#64;img DETOUR_END_de1.png
       * </pre>
       *
       * <code>DETOUR_END = 249;</code>
       */
      DETOUR_END(249),
      /**
       * <code>DETOUR_LEFT = 250;</code>
       */
      DETOUR_LEFT(250),
      /**
       * <pre>
       * &#64;img DETOUR_RIGHT_de1.png
       * </pre>
       *
       * <code>DETOUR_RIGHT = 251;</code>
       */
      DETOUR_RIGHT(251),
      /**
       * <pre>
       * &#64;img STATION_GAS_de1.png
       * </pre>
       *
       * <code>STATION_GAS = 252;</code>
       */
      STATION_GAS(252),
      /**
       * <pre>
       * &#64;img STATION_LPG_de1.png
       * </pre>
       *
       * <code>STATION_LPG = 253;</code>
       */
      STATION_LPG(253),
      /**
       * <pre>
       * &#64;img STATION_CNG_de1.png
       * </pre>
       *
       * <code>STATION_CNG = 254;</code>
       */
      STATION_CNG(254),
      /**
       * <pre>
       * &#64;img STATION_H2_de1.png
       * </pre>
       *
       * <code>STATION_H2 = 255;</code>
       */
      STATION_H2(255),
      /**
       * <pre>
       * &#64;img STATION_ELECTRO_de1.png
       * </pre>
       *
       * <code>STATION_ELECTRO = 256;</code>
       */
      STATION_ELECTRO(256),
      /**
       * <pre>
       * &#64;img STATION_POLICE_de1.png
       * </pre>
       *
       * <code>STATION_POLICE = 257;</code>
       */
      STATION_POLICE(257),
      /**
       * <pre>
       * &#64;img CAMPING_SPOT_de1.png
       * </pre>
       *
       * <code>CAMPING_SPOT = 258;</code>
       */
      CAMPING_SPOT(258),
      /**
       * <pre>
       * &#64;img RESTROOMS_de1.png
       * </pre>
       *
       * <code>RESTROOMS = 259;</code>
       */
      RESTROOMS(259),
      /**
       * <pre>
       * &#64;img INFO_POINT_de1.png
       * </pre>
       *
       * <code>INFO_POINT = 260;</code>
       */
      INFO_POINT(260),
      /**
       * <pre>
       * &#64;img MOTORWAY_EXIT_AHEAD_de1.png
       * </pre>
       *
       * <code>MOTORWAY_EXIT_AHEAD = 261;</code>
       */
      MOTORWAY_EXIT_AHEAD(261),
      /**
       * <pre>
       * &#64;img HIGHWAY_EXIT_AHEAD_de1.png
       * </pre>
       *
       * <code>HIGHWAY_EXIT_AHEAD = 262;</code>
       */
      HIGHWAY_EXIT_AHEAD(262),
      /**
       * <pre>
       * &#64;img MOTORWAY_EXIT_de1.png
       * </pre>
       *
       * <code>MOTORWAY_EXIT = 263;</code>
       */
      MOTORWAY_EXIT(263),
      /**
       * <pre>
       * &#64;img HIGHWAY_EXIT_de1.png
       * </pre>
       *
       * <code>HIGHWAY_EXIT = 264;</code>
       */
      HIGHWAY_EXIT(264),
      /**
       * <pre>
       * &#64;img FIRST_AID_de1.png
       * </pre>
       *
       * <code>FIRST_AID = 265;</code>
       */
      FIRST_AID(265),
      /**
       * <pre>
       * &#64;img LOW_FLYING_de1.png
       * </pre>
       *
       * <code>LOW_FLYING = 266;</code>
       */
      LOW_FLYING(266),
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>LANE_SHIFT = 267;</code>
       */
      LANE_SHIFT(267),
      /**
       * <pre>
       * &#64;img LANE_SHIFT_TO_LEFT_de1.png
       * </pre>
       *
       * <code>LANE_SHIFT_TO_LEFT = 268;</code>
       */
      LANE_SHIFT_TO_LEFT(268),
      /**
       * <code>LANE_SHIFT_TO_RIGHT = 269;</code>
       */
      LANE_SHIFT_TO_RIGHT(269),
      /**
       * <pre>
       * &#64;img PEDESTRIAN_UNDERPASS_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_UNDERPASS = 270;</code>
       */
      PEDESTRIAN_UNDERPASS(270),
      /**
       * <pre>
       * &#64;img PEDESTRIAN_OVERPASS_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_OVERPASS = 271;</code>
       */
      PEDESTRIAN_OVERPASS(271),
      /**
       * <pre>
       * &#64;img BREAKDOWN_BAY_de1.png
       * </pre>
       *
       * <code>BREAKDOWN_BAY = 272;</code>
       */
      BREAKDOWN_BAY(272),
      /**
       * <pre>
       * &#64;img BUS_LANE_de1.png
       * </pre>
       *
       * <code>BUS_LANE = 273;</code>
       */
      BUS_LANE(273),
      /**
       * <pre>
       * &#64;img DOUBLE_HAIRPIN_cn1.png
       * </pre>
       *
       * <code>DOUBLE_HAIRPIN = 274;</code>
       */
      DOUBLE_HAIRPIN(274),
      /**
       * <pre>
       * &#64;img COUNTRY_SPECIFIC_INFORMATION_de1.png
       * </pre>
       *
       * <code>COUNTRY_SPECIFIC_INFORMATION = 275;</code>
       */
      COUNTRY_SPECIFIC_INFORMATION(275),
      /**
       * <pre>
       * &#64;img PEDESTRIAN_BICYCLE_SHARED_PATH_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_BICYCLE_SHARED_PATH = 276;</code>
       */
      PEDESTRIAN_BICYCLE_SHARED_PATH(276),
      /**
       * <pre>
       * &#64;img OVERHEAD_LANE_CONTROL_CLOSED_us1.png
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_CLOSED = 277;</code>
       */
      OVERHEAD_LANE_CONTROL_CLOSED(277),
      /**
       * <pre>
       * &#64;img OVERHEAD_LANE_CONTROL_OPEN_us1.png
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_OPEN = 278;</code>
       */
      OVERHEAD_LANE_CONTROL_OPEN(278),
      /**
       * <pre>
       * Left lane is closing, hence arrow points to the right.
       * &#64;img OVERHEAD_LANE_CONTROL_CLOSING_LEFT_de1.png
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_CLOSING_LEFT = 279;</code>
       */
      OVERHEAD_LANE_CONTROL_CLOSING_LEFT(279),
      /**
       * <pre>
       * Right lane is closing, hence arrow points to the left.
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_CLOSING_RIGHT = 280;</code>
       */
      OVERHEAD_LANE_CONTROL_CLOSING_RIGHT(280),
      /**
       * <pre>
       * Arrow pointing to left side and flashing.
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_FLASH_ARROW_LEFT = 281;</code>
       */
      OVERHEAD_LANE_CONTROL_FLASH_ARROW_LEFT(281),
      /**
       * <pre>
       * Arrow pointing to right side and flashing.
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_FLASH_ARROW_RIGHT = 282;</code>
       */
      OVERHEAD_LANE_CONTROL_FLASH_ARROW_RIGHT(282),
      /**
       * <pre>
       * &#64;img TRINATURE_de1.png
       * </pre>
       *
       * <code>TRINATURE = 283;</code>
       */
      TRINATURE(283),
      /**
       * <pre>
       * &#64;img ANIMAL_FROG_de1.png
       * </pre>
       *
       * <code>ANIMAL_FROG = 284;</code>
       */
      ANIMAL_FROG(284),
      /**
       * <pre>
       * &#64;img GRAVEL_de1.png
       * </pre>
       *
       * <code>GRAVEL = 285;</code>
       */
      GRAVEL(285),
      /**
       * <pre>
       * &#64;img WARNING_PEDESTRIAN_CROSSING_de1.png
       * </pre>
       *
       * <code>WARNING_PEDESTRIAN_CROSSING = 286;</code>
       */
      WARNING_PEDESTRIAN_CROSSING(286),
      /**
       * <pre>
       * &#64;img LOW_TREE_de1.png
       * </pre>
       *
       * <code>LOW_TREE = 287;</code>
       */
      LOW_TREE(287),
      /**
       * <pre>
       * &#64;img WARNING_RIDER_de1.png
       * </pre>
       *
       * <code>WARNING_RIDER = 288;</code>
       */
      WARNING_RIDER(288),
      /**
       * <pre>
       * &#64;img STOP_AHEAD_us1.png
       * </pre>
       *
       * <code>STOP_AHEAD = 289;</code>
       */
      STOP_AHEAD(289),
      /**
       * <pre>
       * &#64;img YIELD_AHEAD_us1.png
       * </pre>
       *
       * <code>YIELD_AHEAD = 290;</code>
       */
      YIELD_AHEAD(290),
      /**
       * <pre>
       * &#64;img WATER_PROTECTION_AREA_de1.png
       * </pre>
       *
       * <code>WATER_PROTECTION_AREA = 291;</code>
       */
      WATER_PROTECTION_AREA(291),
      /**
       * <pre>
       * &#64;img TOLL_DOUANE_de1.png
       * </pre>
       *
       * <code>TOLL_DOUANE = 292;</code>
       */
      TOLL_DOUANE(292),
      /**
       * <pre>
       * &#64;img NO_CAR_OR_BIKE_de1.png
       * </pre>
       *
       * <code>NO_CAR_OR_BIKE = 293;</code>
       */
      NO_CAR_OR_BIKE(293),
      /**
       * <pre>
       * &#64;img DRIVING_DIRECTION_ONLY_UP_de1.png
       * </pre>
       *
       * <code>DRIVING_DIRECTION_ONLY_UP = 294;</code>
       */
      DRIVING_DIRECTION_ONLY_UP(294),
      /**
       * <pre>
       * &#64;img DRIVING_DIRECTION_UP_AND_DOWN_de1.png
       * </pre>
       *
       * <code>DRIVING_DIRECTION_UP_AND_DOWN = 295;</code>
       */
      DRIVING_DIRECTION_UP_AND_DOWN(295),
      /**
       * <pre>
       * &#64;img MILITARY_SIGN_de1.png
       * </pre>
       *
       * <code>MILITARY_SIGN = 296;</code>
       */
      MILITARY_SIGN(296),
      /**
       * <pre>
       * &#64;img SMOG_de1.png
       * </pre>
       *
       * <code>SMOG = 297;</code>
       */
      SMOG(297),
      /**
       * <pre>
       * &#64;img ROUNDABOUT_AHEAD_de1.png
       * </pre>
       *
       * <code>ROUNDABOUT_AHEAD = 298;</code>
       */
      ROUNDABOUT_AHEAD(298),
      /**
       * <pre>
       * &#64;img MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT_de1.png
       * </pre>
       *
       * <code>MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT = 299;</code>
       */
      MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT(299),
      /**
       * <pre>
       * &#64;img DEAD_END_RIGHT_fr1.png
       * </pre>
       *
       * <code>DEAD_END_RIGHT = 300;</code>
       */
      DEAD_END_RIGHT(300),
      /**
       * <code>DEAD_END_LEFT = 301;</code>
       */
      DEAD_END_LEFT(301),
      /**
       * <pre>
       * &#64;img TOLL_TRUCK_de1.png
       * </pre>
       *
       * <code>TOLL_TRUCK = 302;</code>
       */
      TOLL_TRUCK(302),
      /**
       * <pre>
       * &#64;img TOLL_TRUCK_END_de1.png
       * </pre>
       *
       * <code>TOLL_TRUCK_END = 303;</code>
       */
      TOLL_TRUCK_END(303),
      /**
       * <pre>
       * &#64;img STAGGERED_JUNCTION_uk1.png &#64;img STAGGERED_JUNCTION_uk2.png
       * </pre>
       *
       * <code>STAGGERED_JUNCTION = 304;</code>
       */
      STAGGERED_JUNCTION(304),
      /**
       * <pre>
       * &#64;img AXLE_WEIGHT_RESTRICTION_de1.png
       * </pre>
       *
       * <code>AXLE_WEIGHT_RESTRICTION = 305;</code>
       */
      AXLE_WEIGHT_RESTRICTION(305),
      /**
       * <pre>
       * A sign notifying the general end of a toll-road.
       * </pre>
       *
       * <code>TOLL_END = 306;</code>
       */
      TOLL_END(306),
      /**
       * <pre>
       * A sign notifying the end of a toll-road for cars.
       * </pre>
       *
       * <code>TOLL_CAR_END = 307;</code>
       */
      TOLL_CAR_END(307),
      /**
       * <pre>
       * A sign notifying the end of a toll-lane.
       * </pre>
       *
       * <code>TOLL_LANE_END = 308;</code>
       */
      TOLL_LANE_END(308),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      public static final int UNKNOWN_TYPE_VALUE = 0;
      /**
       * <pre>
       * Other, i.e. none of the listed enum values. The type, if known by the sensor, may be provided as string in the field other_text.
       * </pre>
       *
       * <code>OTHER_AS_TEXT = 1;</code>
       */
      public static final int OTHER_AS_TEXT_VALUE = 1;
      /**
       * <pre>
       * The specific speed limit value may be provided in the field value_and_confidence.
       * &#64;img SPEED_LIMIT_de1.png &#64;img SPEED_LIMIT_us1.png
       * </pre>
       *
       * <code>SPEED_LIMIT = 2;</code>
       */
      public static final int SPEED_LIMIT_VALUE = 2;
      /**
       * <pre>
       * The specific speed limit value may be provided in the field value_and_confidence.
       * &#64;img SPEED_LIMIT_END_de1.png &#64;img SPEED_LIMIT_END_us1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_END = 3;</code>
       */
      public static final int SPEED_LIMIT_END_VALUE = 3;
      /**
       * <pre>
       * &#64;img SPEED_LIMIT_CHANGE_UPCOMING_us1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_CHANGE_UPCOMING = 4;</code>
       */
      public static final int SPEED_LIMIT_CHANGE_UPCOMING_VALUE = 4;
      /**
       * <pre>
       * The specific speed limit value may be provided in the field value_and_confidence.
       * &#64;img ADVISORY_SPEED_LIMIT_de1.png
       * </pre>
       *
       * <code>ADVISORY_SPEED_LIMIT = 5;</code>
       */
      public static final int ADVISORY_SPEED_LIMIT_VALUE = 5;
      /**
       * <pre>
       * The specific speed limit value may be provided in the field value_and_confidence.
       * &#64;img ADVISORY_SPEED_LIMIT_END_de1.png
       * </pre>
       *
       * <code>ADVISORY_SPEED_LIMIT_END = 6;</code>
       */
      public static final int ADVISORY_SPEED_LIMIT_END_VALUE = 6;
      /**
       * <pre>
       * &#64;img NO_OVERTAKING_de1.png
       * </pre>
       *
       * <code>NO_OVERTAKING = 7;</code>
       */
      public static final int NO_OVERTAKING_VALUE = 7;
      /**
       * <pre>
       * &#64;img NO_OVERTAKING_END_de1.png
       * </pre>
       *
       * <code>NO_OVERTAKING_END = 8;</code>
       */
      public static final int NO_OVERTAKING_END_VALUE = 8;
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>PROTECTED_PASSING_START = 9;</code>
       */
      public static final int PROTECTED_PASSING_START_VALUE = 9;
      /**
       * <code>PROTECTED_PASSING_END = 10;</code>
       */
      public static final int PROTECTED_PASSING_END_VALUE = 10;
      /**
       * <pre>
       * &#64;img PROTECTED_PASSING_LEFT_START_de1.png
       * </pre>
       *
       * <code>PROTECTED_PASSING_LEFT_START = 11;</code>
       */
      public static final int PROTECTED_PASSING_LEFT_START_VALUE = 11;
      /**
       * <pre>
       * &#64;img PROTECTED_PASSING_RIGHT_START_de1.png
       * </pre>
       *
       * <code>PROTECTED_PASSING_RIGHT_START = 12;</code>
       */
      public static final int PROTECTED_PASSING_RIGHT_START_VALUE = 12;
      /**
       * <code>PROTECTED_PASSING_LEFT_END = 13;</code>
       */
      public static final int PROTECTED_PASSING_LEFT_END_VALUE = 13;
      /**
       * <pre>
       * &#64;img PROTECTED_PASSING_RIGHT_END_de1.png
       * </pre>
       *
       * <code>PROTECTED_PASSING_RIGHT_END = 14;</code>
       */
      public static final int PROTECTED_PASSING_RIGHT_END_VALUE = 14;
      /**
       * <pre>
       * &#64;img NO_OVERTAKING_TRUCK_de1.png
       * </pre>
       *
       * <code>NO_OVERTAKING_TRUCK = 15;</code>
       */
      public static final int NO_OVERTAKING_TRUCK_VALUE = 15;
      /**
       * <pre>
       * &#64;img NO_OVERTAKING_TRUCK_END_de1.png
       * </pre>
       *
       * <code>NO_OVERTAKING_TRUCK_END = 16;</code>
       */
      public static final int NO_OVERTAKING_TRUCK_END_VALUE = 16;
      /**
       * <pre>
       * &#64;img ALL_RESTRICTIONS_END_de1.png
       * </pre>
       *
       * <code>ALL_RESTRICTIONS_END = 17;</code>
       */
      public static final int ALL_RESTRICTIONS_END_VALUE = 17;
      /**
       * <pre>
       * &#64;img CITY_START_de1.png
       * </pre>
       *
       * <code>CITY_START = 18;</code>
       */
      public static final int CITY_START_VALUE = 18;
      /**
       * <pre>
       * &#64;img CITY_END_de1.png
       * </pre>
       *
       * <code>CITY_END = 19;</code>
       */
      public static final int CITY_END_VALUE = 19;
      /**
       * <pre>
       * Highway is a major road (e.g. US Highway, German Bundesstrasse).
       * &#64;img HIGHWAY_de1.png
       * </pre>
       *
       * <code>HIGHWAY = 20;</code>
       */
      public static final int HIGHWAY_VALUE = 20;
      /**
       * <pre>
       * &#64;img HIGHWAY_END_de1.png
       * </pre>
       *
       * <code>HIGHWAY_END = 21;</code>
       */
      public static final int HIGHWAY_END_VALUE = 21;
      /**
       * <pre>
       * These roads are Class-A roads connecting cities or states (e.g. US Interstate, European E-road or German Autobahn) and in many countries have the rule of limited access.
       * &#64;img MOTORWAY_de1.png
       * </pre>
       *
       * <code>MOTORWAY = 22;</code>
       */
      public static final int MOTORWAY_VALUE = 22;
      /**
       * <pre>
       * &#64;img MOTORWAY_END_de1.png
       * </pre>
       *
       * <code>MOTORWAY_END = 23;</code>
       */
      public static final int MOTORWAY_END_VALUE = 23;
      /**
       * <pre>
       * &#64;img CONSTRUCTION_de1.png &#64;img CONSTRUCTION_us1.png
       * </pre>
       *
       * <code>CONSTRUCTION = 24;</code>
       */
      public static final int CONSTRUCTION_VALUE = 24;
      /**
       * <pre>
       * &#64;img CONSTRUCTION_END_us1.png
       * </pre>
       *
       * <code>CONSTRUCTION_END = 25;</code>
       */
      public static final int CONSTRUCTION_END_VALUE = 25;
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>LANE_MERGE = 26;</code>
       */
      public static final int LANE_MERGE_VALUE = 26;
      /**
       * <pre>
       * A lane right merge can also be described as a lane ending on the right side.
       * &#64;img LANE_MERGE_ON_RIGHT_us1.png
       * </pre>
       *
       * <code>LANE_MERGE_ON_RIGHT = 27;</code>
       */
      public static final int LANE_MERGE_ON_RIGHT_VALUE = 27;
      /**
       * <pre>
       * A lane left merge can also be described as a lane ending on the left side.
       * &#64;img LANE_MERGE_ON_LEFT_us1.png
       * </pre>
       *
       * <code>LANE_MERGE_ON_LEFT = 28;</code>
       */
      public static final int LANE_MERGE_ON_LEFT_VALUE = 28;
      /**
       * <pre>
       * A lane merge center can also be described as a lane ending on both sides left and right.
       * &#64;img LANE_MERGE_CENTER_de1.png
       * </pre>
       *
       * <code>LANE_MERGE_CENTER = 29;</code>
       */
      public static final int LANE_MERGE_CENTER_VALUE = 29;
      /**
       * <pre>
       * &#64;img RAILWAY_CROSSING_GENERAL_de1.png &#64;img RAILWAY_CROSSING_GENERAL_us1.png
       * </pre>
       *
       * <code>RAILWAY_CROSSING_GENERAL = 30;</code>
       */
      public static final int RAILWAY_CROSSING_GENERAL_VALUE = 30;
      /**
       * <pre>
       * &#64;img RAILWAY_CROSSING_PROTECTED_de1.png
       * </pre>
       *
       * <code>RAILWAY_CROSSING_PROTECTED = 31;</code>
       */
      public static final int RAILWAY_CROSSING_PROTECTED_VALUE = 31;
      /**
       * <pre>
       * &#64;img RAILWAY_CROSSING_UNPROTECTED_de1.png
       * </pre>
       *
       * <code>RAILWAY_CROSSING_UNPROTECTED = 32;</code>
       */
      public static final int RAILWAY_CROSSING_UNPROTECTED_VALUE = 32;
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>ROAD_NARROWS = 33;</code>
       */
      public static final int ROAD_NARROWS_VALUE = 33;
      /**
       * <pre>
       * &#64;img ROAD_NARROWS_LEFT_de1.png
       * </pre>
       *
       * <code>ROAD_NARROWS_LEFT = 34;</code>
       */
      public static final int ROAD_NARROWS_LEFT_VALUE = 34;
      /**
       * <pre>
       * &#64;img ROAD_NARROWS_RIGHT_de1.png
       * </pre>
       *
       * <code>ROAD_NARROWS_RIGHT = 35;</code>
       */
      public static final int ROAD_NARROWS_RIGHT_VALUE = 35;
      /**
       * <pre>
       * &#64;img ROAD_NARROWS_CENTER_de1.png
       * </pre>
       *
       * <code>ROAD_NARROWS_CENTER = 36;</code>
       */
      public static final int ROAD_NARROWS_CENTER_VALUE = 36;
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>SHARP_CURVE = 37;</code>
       */
      public static final int SHARP_CURVE_VALUE = 37;
      /**
       * <pre>
       * &#64;img SHARP_CURVE_LEFT_de1.png &#64;img SHARP_CURVE_LEFT_us1.png
       * </pre>
       *
       * <code>SHARP_CURVE_LEFT = 38;</code>
       */
      public static final int SHARP_CURVE_LEFT_VALUE = 38;
      /**
       * <pre>
       * &#64;img SHARP_CURVE_RIGHT_de1.png &#64;img SHARP_CURVE_RIGHT_us1.png
       * </pre>
       *
       * <code>SHARP_CURVE_RIGHT = 39;</code>
       */
      public static final int SHARP_CURVE_RIGHT_VALUE = 39;
      /**
       * <code>WINDING_ROAD = 40;</code>
       */
      public static final int WINDING_ROAD_VALUE = 40;
      /**
       * <pre>
       * &#64;img WINDING_ROAD_STARTING_LEFT_us1.png
       * </pre>
       *
       * <code>WINDING_ROAD_STARTING_LEFT = 41;</code>
       */
      public static final int WINDING_ROAD_STARTING_LEFT_VALUE = 41;
      /**
       * <pre>
       * &#64;img WINDING_ROAD_STARTING_RIGHT_us1.png
       * </pre>
       *
       * <code>WINDING_ROAD_STARTING_RIGHT = 42;</code>
       */
      public static final int WINDING_ROAD_STARTING_RIGHT_VALUE = 42;
      /**
       * <pre>
       * &#64;img STEEP_HILL_us1.png
       * </pre>
       *
       * <code>STEEP_HILL = 43;</code>
       */
      public static final int STEEP_HILL_VALUE = 43;
      /**
       * <pre>
       * The percentage of the slope may be provided in the field value_and_confidence. The format is to be provided in "xx %" defining the percent of inclination per 100 meter.
       * &#64;img STEEP_HILL_UPWARDS_de1.png
       * </pre>
       *
       * <code>STEEP_HILL_UPWARDS = 44;</code>
       */
      public static final int STEEP_HILL_UPWARDS_VALUE = 44;
      /**
       * <pre>
       * The percentage of the slope may be provided in the field value_and_confidence. The format is to be provided in "xx %" defining the percent of declination per 100 meter.
       * &#64;img STEEP_HILL_DOWNWARDS_de1.png
       * </pre>
       *
       * <code>STEEP_HILL_DOWNWARDS = 45;</code>
       */
      public static final int STEEP_HILL_DOWNWARDS_VALUE = 45;
      /**
       * <pre>
       * &#64;img STOP_SIGN_de1.png
       * </pre>
       *
       * <code>STOP_SIGN = 46;</code>
       */
      public static final int STOP_SIGN_VALUE = 46;
      /**
       * <pre>
       * If direction cannot be provided by sensor.
       * </pre>
       *
       * <code>LATERAL_WIND = 47;</code>
       */
      public static final int LATERAL_WIND_VALUE = 47;
      /**
       * <pre>
       * &#64;img LATERAL_WIND_FROM_RIGHT_de1.png
       * </pre>
       *
       * <code>LATERAL_WIND_FROM_RIGHT = 48;</code>
       */
      public static final int LATERAL_WIND_FROM_RIGHT_VALUE = 48;
      /**
       * <pre>
       * &#64;img LATERAL_WIND_FROM_LEFT_de1.png
       * </pre>
       *
       * <code>LATERAL_WIND_FROM_LEFT = 49;</code>
       */
      public static final int LATERAL_WIND_FROM_LEFT_VALUE = 49;
      /**
       * <pre>
       * If information about the text of the warning is available, it may be provided in the field value_and_confidence.
       * &#64;img GENERAL_WARNING_de1.png
       * </pre>
       *
       * <code>GENERAL_WARNING = 50;</code>
       */
      public static final int GENERAL_WARNING_VALUE = 50;
      /**
       * <pre>
       * &#64;img RISK_OF_GROUNDING_de1.png
       * </pre>
       *
       * <code>RISK_OF_GROUNDING = 51;</code>
       */
      public static final int RISK_OF_GROUNDING_VALUE = 51;
      /**
       * <pre>
       * &#64;img ANIMAL_de1.png
       * </pre>
       *
       * <code>ANIMAL = 52;</code>
       */
      public static final int ANIMAL_VALUE = 52;
      /**
       * <pre>
       * &#64;img ICY_CONDITIONS_de1.png
       * </pre>
       *
       * <code>ICY_CONDITIONS = 53;</code>
       */
      public static final int ICY_CONDITIONS_VALUE = 53;
      /**
       * <pre>
       * &#64;img SLIPPERY_ROAD_de1.png &#64;img SLIPPERY_ROAD_us1.png
       * </pre>
       *
       * <code>SLIPPERY_ROAD = 54;</code>
       */
      public static final int SLIPPERY_ROAD_VALUE = 54;
      /**
       * <pre>
       * &#64;img UNEVEN_ROAD_de1.png
       * </pre>
       *
       * <code>UNEVEN_ROAD = 55;</code>
       */
      public static final int UNEVEN_ROAD_VALUE = 55;
      /**
       * <pre>
       * &#64;img SCHOOL_ZONE_us1.png
       * </pre>
       *
       * <code>SCHOOL_ZONE = 56;</code>
       */
      public static final int SCHOOL_ZONE_VALUE = 56;
      /**
       * <pre>
       * &#64;img TRAMWAY_CROSSING_us1.png
       * </pre>
       *
       * <code>TRAMWAY_CROSSING = 57;</code>
       */
      public static final int TRAMWAY_CROSSING_VALUE = 57;
      /**
       * <pre>
       * &#64;img CONGESTION_HAZARD_de1.png
       * </pre>
       *
       * <code>CONGESTION_HAZARD = 58;</code>
       */
      public static final int CONGESTION_HAZARD_VALUE = 58;
      /**
       * <pre>
       * &#64;img ACCIDENT_HAZARD_de1.png &#64;img ACCIDENT_HAZARD_us1.png
       * </pre>
       *
       * <code>ACCIDENT_HAZARD = 59;</code>
       */
      public static final int ACCIDENT_HAZARD_VALUE = 59;
      /**
       * <pre>
       * &#64;img BICYCLE_CROSSING_us1.png
       * </pre>
       *
       * <code>BICYCLE_CROSSING = 60;</code>
       */
      public static final int BICYCLE_CROSSING_VALUE = 60;
      /**
       * <pre>
       * &#64;img PRIORITY_OVER_ONCOMING_TRAFFIC_de1.png
       * </pre>
       *
       * <code>PRIORITY_OVER_ONCOMING_TRAFFIC = 61;</code>
       */
      public static final int PRIORITY_OVER_ONCOMING_TRAFFIC_VALUE = 61;
      /**
       * <pre>
       * &#64;img YIELD_de1.png
       * </pre>
       *
       * <code>YIELD = 62;</code>
       */
      public static final int YIELD_VALUE = 62;
      /**
       * <pre>
       * &#64;img PRIORITY_ROAD_de1.png
       * </pre>
       *
       * <code>PRIORITY_ROAD = 63;</code>
       */
      public static final int PRIORITY_ROAD_VALUE = 63;
      /**
       * <pre>
       * &#64;img PRIORITY_ROAD_END_de1.png
       * </pre>
       *
       * <code>PRIORITY_ROAD_END = 64;</code>
       */
      public static final int PRIORITY_ROAD_END_VALUE = 64;
      /**
       * <pre>
       * &#64;img TRAFFIC_CALMING_de1.png
       * </pre>
       *
       * <code>TRAFFIC_CALMING = 65;</code>
       */
      public static final int TRAFFIC_CALMING_VALUE = 65;
      /**
       * <pre>
       * &#64;img TRAFFIC_CALMING_END_de1.png
       * </pre>
       *
       * <code>TRAFFIC_CALMING_END = 66;</code>
       */
      public static final int TRAFFIC_CALMING_END_VALUE = 66;
      /**
       * <pre>
       * Further specification of the sign, e.g. green zone in Germany, may be provided in the field value_and_confidence.
       * &#64;img ENVIRONMENTAL_AREA_de1.png
       * </pre>
       *
       * <code>ENVIRONMENTAL_AREA = 67;</code>
       */
      public static final int ENVIRONMENTAL_AREA_VALUE = 67;
      /**
       * <pre>
       * &#64;img ENVIRONMENTAL_AREA_END_de1.png
       * </pre>
       *
       * <code>ENVIRONMENTAL_AREA_END = 68;</code>
       */
      public static final int ENVIRONMENTAL_AREA_END_VALUE = 68;
      /**
       * <pre>
       * &#64;img INTERSECTION_de1.png
       * </pre>
       *
       * <code>INTERSECTION = 69;</code>
       */
      public static final int INTERSECTION_VALUE = 69;
      /**
       * <pre>
       * &#64;img ROUNDABOUT_de1.png
       * </pre>
       *
       * <code>ROUNDABOUT = 70;</code>
       */
      public static final int ROUNDABOUT_VALUE = 70;
      /**
       * <pre>
       * &#64;img PASSING_ON_LEFT_de1.png &#64;img PASSING_ON_LEFT_us1.png
       * </pre>
       *
       * <code>PASSING_ON_LEFT = 71;</code>
       */
      public static final int PASSING_ON_LEFT_VALUE = 71;
      /**
       * <pre>
       * &#64;img PASSING_ON_RIGHT_de1.png &#64;img PASSING_ON_RIGHT_us1.png
       * </pre>
       *
       * <code>PASSING_ON_RIGHT = 72;</code>
       */
      public static final int PASSING_ON_RIGHT_VALUE = 72;
      /**
       * <pre>
       * &#64;img PASSING_ON_LEFT_OR_RIGHT_us1.png &#64;img PASSING_ON_LEFT_OR_RIGHT_us2.png
       * </pre>
       *
       * <code>PASSING_ON_LEFT_OR_RIGHT = 73;</code>
       */
      public static final int PASSING_ON_LEFT_OR_RIGHT_VALUE = 73;
      /**
       * <pre>
       * &#64;img MANDATORY_TURN_RIGHT_ONLY_de1.png &#64;img MANDATORY_TURN_RIGHT_ONLY_us1.png
       * </pre>
       *
       * <code>MANDATORY_TURN_RIGHT_ONLY = 74;</code>
       */
      public static final int MANDATORY_TURN_RIGHT_ONLY_VALUE = 74;
      /**
       * <pre>
       * &#64;img MANDATORY_TURN_LEFT_ONLY_de1.png &#64;img MANDATORY_TURN_LEFT_ONLY_us1.png
       * </pre>
       *
       * <code>MANDATORY_TURN_LEFT_ONLY = 75;</code>
       */
      public static final int MANDATORY_TURN_LEFT_ONLY_VALUE = 75;
      /**
       * <pre>
       * &#64;img MANDATORY_STRAIGHT_ONLY_de1.png &#64;img MANDATORY_STRAIGHT_ONLY_us1.png
       * </pre>
       *
       * <code>MANDATORY_STRAIGHT_ONLY = 76;</code>
       */
      public static final int MANDATORY_STRAIGHT_ONLY_VALUE = 76;
      /**
       * <pre>
       * &#64;img TURN_LEFT_OR_RIGHT_de1.png
       * </pre>
       *
       * <code>MANDATORY_TURN_LEFT_OR_RIGHT = 77;</code>
       */
      public static final int MANDATORY_TURN_LEFT_OR_RIGHT_VALUE = 77;
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>MANDATORY_TURN_RESTRICTION = 78;</code>
       */
      public static final int MANDATORY_TURN_RESTRICTION_VALUE = 78;
      /**
       * <pre>
       * &#64;img MANDATORY_STRAIGHT_OR_LEFT_de1.png
       * </pre>
       *
       * <code>MANDATORY_STRAIGHT_OR_LEFT = 79;</code>
       */
      public static final int MANDATORY_STRAIGHT_OR_LEFT_VALUE = 79;
      /**
       * <pre>
       * &#64;img MANDATORY_STRAIGHT_OR_RIGHT_de1.png
       * </pre>
       *
       * <code>MANDATORY_STRAIGHT_OR_RIGHT = 80;</code>
       */
      public static final int MANDATORY_STRAIGHT_OR_RIGHT_VALUE = 80;
      /**
       * <pre>
       * &#64;img NO_LEFT_TURN_us1.png
       * </pre>
       *
       * <code>NO_LEFT_TURN = 81;</code>
       */
      public static final int NO_LEFT_TURN_VALUE = 81;
      /**
       * <pre>
       * &#64;img NO_RIGHT_TURN_us1.png
       * </pre>
       *
       * <code>NO_RIGHT_TURN = 82;</code>
       */
      public static final int NO_RIGHT_TURN_VALUE = 82;
      /**
       * <pre>
       * &#64;img NO_U_TURN_de1.png &#64;img NO_U_TURN_us1.png
       * </pre>
       *
       * <code>NO_U_TURN = 83;</code>
       */
      public static final int NO_U_TURN_VALUE = 83;
      /**
       * <pre>
       * &#64;img NO_U_OR_LEFT_TURN_us1.png
       * </pre>
       *
       * <code>NO_U_OR_LEFT_TURN = 84;</code>
       */
      public static final int NO_U_OR_LEFT_TURN_VALUE = 84;
      /**
       * <pre>
       * &#64;img U_TURN_ALLOWED_us1.jpg
       * </pre>
       *
       * <code>U_TURN_ALLOWED = 85;</code>
       */
      public static final int U_TURN_ALLOWED_VALUE = 85;
      /**
       * <pre>
       * This type is valid for trucks and other transportation vehicles.
       * &#64;img MANDATORY_LEFT_TRUCK_de1.png
       * </pre>
       *
       * <code>MANDATORY_LEFT_TRUCK = 86;</code>
       */
      public static final int MANDATORY_LEFT_TRUCK_VALUE = 86;
      /**
       * <pre>
       * This type is valid for trucks and other transportation vehicles.
       * &#64;img MANDATORY_RIGHT_TRUCK_de1.png
       * </pre>
       *
       * <code>MANDATORY_RIGHT_TRUCK = 87;</code>
       */
      public static final int MANDATORY_RIGHT_TRUCK_VALUE = 87;
      /**
       * <pre>
       * This type is valid for trucks and other transportation vehicles.
       * &#64;img MANDATORY_STRAIGHT_TRUCK_de1.png
       * </pre>
       *
       * <code>MANDATORY_STRAIGHT_TRUCK = 88;</code>
       */
      public static final int MANDATORY_STRAIGHT_TRUCK_VALUE = 88;
      /**
       * <pre>
       * &#64;img NO_ENTRY_de1.png &#64;img NO_ENTRY_us1.png
       * </pre>
       *
       * <code>NO_ENTRY = 89;</code>
       */
      public static final int NO_ENTRY_VALUE = 89;
      /**
       * <pre>
       * &#64;img DEAD_END_de1.png &#64;img DEAD_END_us1.png
       * </pre>
       *
       * <code>DEAD_END = 90;</code>
       */
      public static final int DEAD_END_VALUE = 90;
      /**
       * <pre>
       * &#64;img HIGH_OCCUPANCY_VEHICLE_LANE_us1.png
       * </pre>
       *
       * <code>HIGH_OCCUPANCY_VEHICLE_LANE = 91;</code>
       */
      public static final int HIGH_OCCUPANCY_VEHICLE_LANE_VALUE = 91;
      /**
       * <pre>
       * &#64;img TOLL_de1.png
       * </pre>
       *
       * <code>TOLL = 92;</code>
       */
      public static final int TOLL_VALUE = 92;
      /**
       * <code>TOLL_CAR = 93;</code>
       */
      public static final int TOLL_CAR_VALUE = 93;
      /**
       * <pre>
       * &#64;img TOLL_LANE_us1.jpg
       * </pre>
       *
       * <code>TOLL_LANE = 94;</code>
       */
      public static final int TOLL_LANE_VALUE = 94;
      /**
       * <pre>
       * &#64;img EXPRESS_LANE_us1.jpg
       * </pre>
       *
       * <code>EXPRESS_LANE = 95;</code>
       */
      public static final int EXPRESS_LANE_VALUE = 95;
      /**
       * <pre>
       * &#64;img SHOULDER_OPEN_FOR_TRAFFIC_de1.png
       * </pre>
       *
       * <code>SHOULDER_OPEN_FOR_TRAFFIC = 96;</code>
       */
      public static final int SHOULDER_OPEN_FOR_TRAFFIC_VALUE = 96;
      /**
       * <pre>
       * &#64;img SHOULDER_CLOSED_FOR_TRAFFIC_de1.png
       * </pre>
       *
       * <code>SHOULDER_CLOSED_FOR_TRAFFIC = 97;</code>
       */
      public static final int SHOULDER_CLOSED_FOR_TRAFFIC_VALUE = 97;
      /**
       * <pre>
       * &#64;img LANE_CLOSED_us1.jpg
       * </pre>
       *
       * <code>LANE_CLOSED = 98;</code>
       */
      public static final int LANE_CLOSED_VALUE = 98;
      /**
       * <pre>
       * &#64;img LANE_CLOSED_RIGHT_MOST_LANE_us1.png
       * </pre>
       *
       * <code>LANE_CLOSED_RIGHT_MOST_LANE = 99;</code>
       */
      public static final int LANE_CLOSED_RIGHT_MOST_LANE_VALUE = 99;
      /**
       * <code>LANE_CLOSED_LEFT_MOST_LANE = 100;</code>
       */
      public static final int LANE_CLOSED_LEFT_MOST_LANE_VALUE = 100;
      /**
       * <pre>
       * &#64;img WARNING_PEDESTRIAN_de1.png &#64;img WARNING_PEDESTRIAN_us1.png
       * </pre>
       *
       * <code>WARNING_PEDESTRIAN = 101;</code>
       */
      public static final int WARNING_PEDESTRIAN_VALUE = 101;
      /**
       * <pre>
       * &#64;img WARNING_CHILDREN_de1.png
       * </pre>
       *
       * <code>WARNING_CHILDREN = 102;</code>
       */
      public static final int WARNING_CHILDREN_VALUE = 102;
      /**
       * <pre>
       * &#64;img WARNING_BICYCLE_de1.png
       * </pre>
       *
       * <code>WARNING_BICYCLE = 103;</code>
       */
      public static final int WARNING_BICYCLE_VALUE = 103;
      /**
       * <pre>
       * &#64;img WARNING_BUS_de1.png
       * </pre>
       *
       * <code>WARNING_BUS = 104;</code>
       */
      public static final int WARNING_BUS_VALUE = 104;
      /**
       * <pre>
       * &#64;img PUBLIC_TRANSPORTATION_STOP_de1.png
       * </pre>
       *
       * <code>PUBLIC_TRANSPORTATION_STOP = 105;</code>
       */
      public static final int PUBLIC_TRANSPORTATION_STOP_VALUE = 105;
      /**
       * <pre>
       * Directly at the sign, not the "warning of crossing ahead".
       * &#64;img PEDESTRIAN_CROSSING_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_CROSSING = 106;</code>
       */
      public static final int PEDESTRIAN_CROSSING_VALUE = 106;
      /**
       * <pre>
       * The weight limitation may be provided in the field value_and_confidence. The format is to be provided in "xx t" defining the weight in xx tons or "xxxxxx lbs" defining the weight in x pounds.
       * &#64;img WEIGHT_RESTRICTION_de1.png
       * </pre>
       *
       * <code>WEIGHT_RESTRICTION = 107;</code>
       */
      public static final int WEIGHT_RESTRICTION_VALUE = 107;
      /**
       * <pre>
       * The height limitation, e.g. when driving under a bridge, may be provided in the field value_and_confidence. The format is to be provided in "xx.x m" defining the height in xx.x meter or "xx f yy in" defining the height in xx foot and yy inches.
       * &#64;img HEIGHT_RESTRICTION_de1.png
       * </pre>
       *
       * <code>HEIGHT_RESTRICTION = 108;</code>
       */
      public static final int HEIGHT_RESTRICTION_VALUE = 108;
      /**
       * <pre>
       * The length limitation may be provided in the field value_and_confidence. The format is to be provided in "xx.x m" defining the length in xx.x meter or "xx f yy in" defining the height in xx foot and yy inches.
       * &#64;img LENGTH_RESTRICTION_de1.png
       * </pre>
       *
       * <code>LENGTH_RESTRICTION = 109;</code>
       */
      public static final int LENGTH_RESTRICTION_VALUE = 109;
      /**
       * <pre>
       * The width limitation may be provided in the field value_and_confidence. The format is to be provided in "xx.x m" defining the width in xx.x meter or "xx f yy in" defining the height in xx foot and yy inches.
       * &#64;img WIDTH_RESTRICTION_de1.png
       * </pre>
       *
       * <code>WIDTH_RESTRICTION = 110;</code>
       */
      public static final int WIDTH_RESTRICTION_VALUE = 110;
      /**
       * <pre>
       * &#64;img WARNING_TRUCK_ROLLOVER_us1.png &#64;img WARNING_TRUCK_ROLLOVER_us2.png
       * </pre>
       *
       * <code>WARNING_TRUCK_ROLLOVER = 111;</code>
       */
      public static final int WARNING_TRUCK_ROLLOVER_VALUE = 111;
      /**
       * <pre>
       * &#64;img SIGNAL_AHEAD_de1.png &#64;img SIGNAL_AHEAD_us1.png
       * </pre>
       *
       * <code>SIGNAL_AHEAD = 112;</code>
       */
      public static final int SIGNAL_AHEAD_VALUE = 112;
      /**
       * <pre>
       * &#64;img SKI_CROSSING_us1.jpg
       * </pre>
       *
       * <code>SKI_CROSSING = 113;</code>
       */
      public static final int SKI_CROSSING_VALUE = 113;
      /**
       * <pre>
       * &#64;img NO_AGRICULTUR_VEHICLE_de1.png &#64;img NO_AGRICULTUR_VEHICLE_us1.png
       * </pre>
       *
       * <code>NO_AGRICULTUR_VEHICLE = 114;</code>
       */
      public static final int NO_AGRICULTUR_VEHICLE_VALUE = 114;
      /**
       * <pre>
       * &#64;img NO_BICYCLE_de1.png
       * </pre>
       *
       * <code>NO_BICYCLE = 115;</code>
       */
      public static final int NO_BICYCLE_VALUE = 115;
      /**
       * <pre>
       * &#64;img NO_BUS_de1.png
       * </pre>
       *
       * <code>NO_BUS = 116;</code>
       */
      public static final int NO_BUS_VALUE = 116;
      /**
       * <code>NO_HAUL_EXPLOSIVES = 117;</code>
       */
      public static final int NO_HAUL_EXPLOSIVES_VALUE = 117;
      /**
       * <code>NO_HAUL_HARMFUL_TO_WATER = 118;</code>
       */
      public static final int NO_HAUL_HARMFUL_TO_WATER_VALUE = 118;
      /**
       * <pre>
       * &#64;img NO_HAUL_HAZARDOUS_MATERIAL_de1.png
       * </pre>
       *
       * <code>NO_HAUL_HAZARDOUS_MATERIAL = 119;</code>
       */
      public static final int NO_HAUL_HAZARDOUS_MATERIAL_VALUE = 119;
      /**
       * <pre>
       * &#64;img NO_MOTORCYCLE_de1.png
       * </pre>
       *
       * <code>NO_MOTORCYCLE = 120;</code>
       */
      public static final int NO_MOTORCYCLE_VALUE = 120;
      /**
       * <pre>
       * &#64;img NO_TRAILER_de1.png
       * </pre>
       *
       * <code>NO_TRAILER = 121;</code>
       */
      public static final int NO_TRAILER_VALUE = 121;
      /**
       * <pre>
       * &#64;img NO_TRUCK_WITH_TRAILER_de1.png
       * </pre>
       *
       * <code>NO_TRUCK_WITH_TRAILER = 122;</code>
       */
      public static final int NO_TRUCK_WITH_TRAILER_VALUE = 122;
      /**
       * <pre>
       * &#64;img PARK_AND_RIDE_de1.png
       * </pre>
       *
       * <code>PARK_AND_RIDE = 123;</code>
       */
      public static final int PARK_AND_RIDE_VALUE = 123;
      /**
       * <pre>
       * These signs are typical mounted on a periodical distance. The distance value itself may be provided in the field value_and_confidence. The format is to be provided in "xxx.x" defining the distance offset value in xxx.x, which is to be used without units to represent both kilometer and miles.
       * &#64;img ROAD_DISTANCE_de1.jpg
       * </pre>
       *
       * <code>ROAD_DISTANCE = 124;</code>
       */
      public static final int ROAD_DISTANCE_VALUE = 124;
      /**
       * <pre>
       * &#64;img EMERGENCY_PHONE_de1.png
       * </pre>
       *
       * <code>EMERGENCY_PHONE = 125;</code>
       */
      public static final int EMERGENCY_PHONE_VALUE = 125;
      /**
       * <pre>
       * &#64;img SPEED_LIMIT_ENFORCEMENT_de1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_ENFORCEMENT = 126;</code>
       */
      public static final int SPEED_LIMIT_ENFORCEMENT_VALUE = 126;
      /**
       * <pre>
       * &#64;img TRAFFIC_LIGHT_ENFORCEMENT_us1.png
       * </pre>
       *
       * <code>TRAFFIC_LIGHT_ENFORCEMENT = 127;</code>
       */
      public static final int TRAFFIC_LIGHT_ENFORCEMENT_VALUE = 127;
      /**
       * <pre>
       * Sign board showing direction or distance to a city, location or exit.
       * &#64;img BOARD_DIRECTION_de1.png
       * </pre>
       *
       * <code>BOARD_DIRECTION = 128;</code>
       */
      public static final int BOARD_DIRECTION_VALUE = 128;
      /**
       * <pre>
       * Street name - street name text provided on sign can be specified in value_and_confidence.
       * &#64;img STREET_NAME_us1.png
       * </pre>
       *
       * <code>STREET_NAME = 129;</code>
       */
      public static final int STREET_NAME_VALUE = 129;
      /**
       * <pre>
       * Speed limit only valid for trucks. The specific speed limit value may be provided in the field value_and_confidence. However, speed limit start and supplementary sign TRUCK should be preferred if two signs are mounted on sign post.
       * &#64;img TRUCK_SPEED_LIMIT_us1.png
       * </pre>
       *
       * <code>TRUCK_SPEED_LIMIT = 130;</code>
       */
      public static final int TRUCK_SPEED_LIMIT_VALUE = 130;
      /**
       * <pre>
       * Speed limit only valid for trucks. The specific speed limit value may be provided in the field value_and_confidence. However, speed limit start and supplementary sign TRUCK should be preferred if two signs are mounted on sign post.
       * </pre>
       *
       * <code>TRUCK_SPEED_LIMIT_END = 131;</code>
       */
      public static final int TRUCK_SPEED_LIMIT_END_VALUE = 131;
      /**
       * <pre>
       * Speed limit only valid at night. The specific speed limit value may be provided in the field value_and_confidence. However, speed limit start and supplementary type NIGHT should be preferred if two signs are mounted on sign post.
       * &#64;img SPEED_LIMIT_NIGHT_us1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_NIGHT = 132;</code>
       */
      public static final int SPEED_LIMIT_NIGHT_VALUE = 132;
      /**
       * <pre>
       * Speed limit only valid at night. The specific speed limit value may be provided in the field value_and_confidence. However, speed limit start and supplementary type NIGHT should be preferred if two signs are mounted on sign post.
       * </pre>
       *
       * <code>SPEED_LIMIT_NIGHT_END = 133;</code>
       */
      public static final int SPEED_LIMIT_NIGHT_END_VALUE = 133;
      /**
       * <pre>
       * &#64;img MINIMUM_SPEED_de1.png &#64;img MINIMUM_SPEED_us1.png
       * </pre>
       *
       * <code>MINIMUM_SPEED = 134;</code>
       */
      public static final int MINIMUM_SPEED_VALUE = 134;
      /**
       * <pre>
       * &#64;img MINIMUM_SPEED_END_de1.png
       * </pre>
       *
       * <code>MINIMUM_SPEED_END = 135;</code>
       */
      public static final int MINIMUM_SPEED_END_VALUE = 135;
      /**
       * <pre>
       * &#64;img PEDESTRIAN_ZONE_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_ZONE = 136;</code>
       */
      public static final int PEDESTRIAN_ZONE_VALUE = 136;
      /**
       * <pre>
       * &#64;img PEDESTRIAN_ZONE_END_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_ZONE_END = 137;</code>
       */
      public static final int PEDESTRIAN_ZONE_END_VALUE = 137;
      /**
       * <pre>
       * &#64;img PEDESTRIAN_PATH_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_PATH = 138;</code>
       */
      public static final int PEDESTRIAN_PATH_VALUE = 138;
      /**
       * <code>PEDESTRIAN_PATH_END = 139;</code>
       */
      public static final int PEDESTRIAN_PATH_END_VALUE = 139;
      /**
       * <pre>
       * &#64;img PEDESTRIAN_BICYCLE_PATH_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_BICYCLE_PATH = 140;</code>
       */
      public static final int PEDESTRIAN_BICYCLE_PATH_VALUE = 140;
      /**
       * <code>PEDESTRIAN_BICYCLE_PATH_END = 141;</code>
       */
      public static final int PEDESTRIAN_BICYCLE_PATH_END_VALUE = 141;
      /**
       * <pre>
       * &#64;img BICYCLE_PATH_de1.png
       * </pre>
       *
       * <code>BICYCLE_PATH = 142;</code>
       */
      public static final int BICYCLE_PATH_VALUE = 142;
      /**
       * <code>BICYCLE_PATH_END = 143;</code>
       */
      public static final int BICYCLE_PATH_END_VALUE = 143;
      /**
       * <pre>
       * &#64;img BICYCLE_STREET_de1.png
       * </pre>
       *
       * <code>BICYCLE_STREET = 144;</code>
       */
      public static final int BICYCLE_STREET_VALUE = 144;
      /**
       * <code>BICYCLE_STREET_END = 145;</code>
       */
      public static final int BICYCLE_STREET_END_VALUE = 145;
      /**
       * <pre>
       * &#64;img CURVE_LEFT_THEN_RIGHT_de1.png &#64;img CURVE_LEFT_THEN_RIGHT_us1.png
       * </pre>
       *
       * <code>CURVE_LEFT_THEN_RIGHT = 146;</code>
       */
      public static final int CURVE_LEFT_THEN_RIGHT_VALUE = 146;
      /**
       * <pre>
       * &#64;img CURVE_RIGHT_THEN_LEFT_de1.png &#64;img CURVE_RIGHT_THEN_LEFT_us1.png
       * </pre>
       *
       * <code>CURVE_RIGHT_THEN_LEFT = 147;</code>
       */
      public static final int CURVE_RIGHT_THEN_LEFT_VALUE = 147;
      /**
       * <pre>
       * &#64;img CURVE_TRIPLE_HAIRPIN_cn1.png
       * </pre>
       *
       * <code>CURVE_TRIPLE_HAIRPIN = 148;</code>
       */
      public static final int CURVE_TRIPLE_HAIRPIN_VALUE = 148;
      /**
       * <code>STEEP_DROP = 149;</code>
       */
      public static final int STEEP_DROP_VALUE = 149;
      /**
       * <pre>
       * &#64;img STEEP_DROP_ON_LEFT_cn1.png
       * </pre>
       *
       * <code>STEEP_DROP_ON_LEFT = 150;</code>
       */
      public static final int STEEP_DROP_ON_LEFT_VALUE = 150;
      /**
       * <pre>
       * &#64;img STEEP_DROP_ON_RIGHT_cn1.png
       * </pre>
       *
       * <code>STEEP_DROP_ON_RIGHT = 151;</code>
       */
      public static final int STEEP_DROP_ON_RIGHT_VALUE = 151;
      /**
       * <pre>
       * &#64;img NO_ANIMAL_CATTLE_de1.png
       * </pre>
       *
       * <code>NO_ANIMAL_CATTLE = 152;</code>
       */
      public static final int NO_ANIMAL_CATTLE_VALUE = 152;
      /**
       * <code>ANIMAL_DEER = 153;</code>
       */
      public static final int ANIMAL_DEER_VALUE = 153;
      /**
       * <code>ANIMAL_MOOSE = 154;</code>
       */
      public static final int ANIMAL_MOOSE_VALUE = 154;
      /**
       * <pre>
       * &#64;img NO_HORSE_RIDING_de1.png
       * </pre>
       *
       * <code>NO_HORSE_RIDING = 155;</code>
       */
      public static final int NO_HORSE_RIDING_VALUE = 155;
      /**
       * <pre>
       * &#64;img FALLING_ROCKS_us1.png
       * </pre>
       *
       * <code>FALLING_ROCKS = 156;</code>
       */
      public static final int FALLING_ROCKS_VALUE = 156;
      /**
       * <pre>
       * &#64;img FALLING_ROCKS_LEFT_us1.png
       * </pre>
       *
       * <code>FALLING_ROCKS_LEFT = 157;</code>
       */
      public static final int FALLING_ROCKS_LEFT_VALUE = 157;
      /**
       * <pre>
       * &#64;img FALLING_ROCKS_RIGHT_de1.png
       * </pre>
       *
       * <code>FALLING_ROCKS_RIGHT = 158;</code>
       */
      public static final int FALLING_ROCKS_RIGHT_VALUE = 158;
      /**
       * <pre>
       * &#64;img YIELD_TO_ONCOMING_TRAFFIC_de1.png
       * </pre>
       *
       * <code>YIELD_TO_ONCOMING_TRAFFIC = 159;</code>
       */
      public static final int YIELD_TO_ONCOMING_TRAFFIC_VALUE = 159;
      /**
       * <pre>
       * &#64;img UNPROTECTED_LEFT_TURN_us1.png
       * </pre>
       *
       * <code>UNPROTECTED_LEFT_TURN = 160;</code>
       */
      public static final int UNPROTECTED_LEFT_TURN_VALUE = 160;
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>ONEWAY_TRAFFIC = 161;</code>
       */
      public static final int ONEWAY_TRAFFIC_VALUE = 161;
      /**
       * <pre>
       * &#64;img ONEWAY_TRAFFIC_TO_LEFT_de1.png &#64;img ONEWAY_TRAFFIC_TO_LEFT_us1.png
       * </pre>
       *
       * <code>ONEWAY_TRAFFIC_TO_LEFT = 162;</code>
       */
      public static final int ONEWAY_TRAFFIC_TO_LEFT_VALUE = 162;
      /**
       * <pre>
       * &#64;img ONEWAY_TRAFFIC_TO_RIGHT_de1.png
       * </pre>
       *
       * <code>ONEWAY_TRAFFIC_TO_RIGHT = 163;</code>
       */
      public static final int ONEWAY_TRAFFIC_TO_RIGHT_VALUE = 163;
      /**
       * <pre>
       * &#64;img ONEWAY_TRAFFIC_TO_STRAIGHT_de1.png
       * </pre>
       *
       * <code>ONEWAY_TRAFFIC_TO_STRAIGHT = 164;</code>
       */
      public static final int ONEWAY_TRAFFIC_TO_STRAIGHT_VALUE = 164;
      /**
       * <pre>
       * &#64;img NO_VEHICLE_de1.png
       * </pre>
       *
       * <code>NO_VEHICLE = 165;</code>
       */
      public static final int NO_VEHICLE_VALUE = 165;
      /**
       * <pre>
       * &#64;img NO_MOTOR_VEHICLE_de1.png
       * </pre>
       *
       * <code>NO_MOTOR_VEHICLE = 166;</code>
       */
      public static final int NO_MOTOR_VEHICLE_VALUE = 166;
      /**
       * <pre>
       * &#64;img NO_TRUCK_de1.png
       * </pre>
       *
       * <code>NO_TRUCK = 167;</code>
       */
      public static final int NO_TRUCK_VALUE = 167;
      /**
       * <pre>
       * &#64;img NO_PEDESTRIAN_de1.png &#64;img NO_PEDESTRIAN_de2.png
       * </pre>
       *
       * <code>NO_PEDESTRIAN = 168;</code>
       */
      public static final int NO_PEDESTRIAN_VALUE = 168;
      /**
       * <pre>
       * &#64;img LANE_USED_IN_BOTH_DIRECTIONS_us1.png
       * </pre>
       *
       * <code>LANE_USED_IN_BOTH_DIRECTIONS = 169;</code>
       */
      public static final int LANE_USED_IN_BOTH_DIRECTIONS_VALUE = 169;
      /**
       * <pre>
       * &#64;img FOG_AREA_us1.png
       * </pre>
       *
       * <code>FOG_AREA = 170;</code>
       */
      public static final int FOG_AREA_VALUE = 170;
      /**
       * <pre>
       * &#64;img TIRE_CHAINS_MANDATORY_de1.png
       * </pre>
       *
       * <code>TIRE_CHAINS_MANDATORY = 171;</code>
       */
      public static final int TIRE_CHAINS_MANDATORY_VALUE = 171;
      /**
       * <pre>
       * &#64;img HIJACKING_HOTSPOT_us1.png
       * </pre>
       *
       * <code>HIJACKING_HOTSPOT = 172;</code>
       */
      public static final int HIJACKING_HOTSPOT_VALUE = 172;
      /**
       * <code>OVERPASS_AHEAD = 173;</code>
       */
      public static final int OVERPASS_AHEAD_VALUE = 173;
      /**
       * <pre>
       * &#64;img TUNNEL_de1.png &#64;img TUNNEL_us1.png
       * </pre>
       *
       * <code>TUNNEL = 174;</code>
       */
      public static final int TUNNEL_VALUE = 174;
      /**
       * <pre>
       * &#64;img FERRY_TERMINAL_us1.png
       * </pre>
       *
       * <code>FERRY_TERMINAL = 175;</code>
       */
      public static final int FERRY_TERMINAL_VALUE = 175;
      /**
       * <pre>
       * &#64;img NARROW_BRIDGE_us1.png
       * </pre>
       *
       * <code>NARROW_BRIDGE = 176;</code>
       */
      public static final int NARROW_BRIDGE_VALUE = 176;
      /**
       * <pre>
       * &#64;img NO_IDLING_de1.png &#64;img NO_IDLING_us1.png
       * </pre>
       *
       * <code>NO_IDLING = 177;</code>
       */
      public static final int NO_IDLING_VALUE = 177;
      /**
       * <pre>
       * &#64;img HUMPBACK_BRIDGE_us1.png
       * </pre>
       *
       * <code>HUMPBACK_BRIDGE = 178;</code>
       */
      public static final int HUMPBACK_BRIDGE_VALUE = 178;
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>EMBANKMENT = 179;</code>
       */
      public static final int EMBANKMENT_VALUE = 179;
      /**
       * <pre>
       * &#64;img EMBANKMENT_ON_THE_LEFT_us1.png
       * </pre>
       *
       * <code>EMBANKMENT_ON_THE_LEFT = 180;</code>
       */
      public static final int EMBANKMENT_ON_THE_LEFT_VALUE = 180;
      /**
       * <pre>
       * &#64;img EMBANKMENT_ON_THE_RIGHT_de1.png
       * </pre>
       *
       * <code>EMBANKMENT_ON_THE_RIGHT = 181;</code>
       */
      public static final int EMBANKMENT_ON_THE_RIGHT_VALUE = 181;
      /**
       * <pre>
       * &#64;img CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD_de1.png
       * </pre>
       *
       * <code>CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD = 182;</code>
       */
      public static final int CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD_VALUE = 182;
      /**
       * <pre>
       * &#64;img CROSSING_WITH_PRIORITY_TO_THE_RIGHT_us1.png
       * </pre>
       *
       * <code>CROSSING_WITH_PRIORITY_TO_THE_RIGHT = 183;</code>
       */
      public static final int CROSSING_WITH_PRIORITY_TO_THE_RIGHT_VALUE = 183;
      /**
       * <pre>
       * &#64;img BRANCH_TO_THE_LEFT_de1.png
       * </pre>
       *
       * <code>BRANCH_TO_THE_LEFT = 184;</code>
       */
      public static final int BRANCH_TO_THE_LEFT_VALUE = 184;
      /**
       * <pre>
       * &#64;img BRANCH_TO_THE_RIGHT_de1.png
       * </pre>
       *
       * <code>BRANCH_TO_THE_RIGHT = 185;</code>
       */
      public static final int BRANCH_TO_THE_RIGHT_VALUE = 185;
      /**
       * <pre>
       * &#64;img TWO_WAY_TRAFFIC_de1.png &#64;img TWO_WAY_TRAFFIC_us1.png
       * </pre>
       *
       * <code>TWO_WAY_TRAFFIC = 186;</code>
       */
      public static final int TWO_WAY_TRAFFIC_VALUE = 186;
      /**
       * <pre>
       * &#64;img BUMP_us1.png
       * </pre>
       *
       * <code>BUMP = 187;</code>
       */
      public static final int BUMP_VALUE = 187;
      /**
       * <pre>
       * &#64;img DIP_us1.png
       * </pre>
       *
       * <code>DIP = 188;</code>
       */
      public static final int DIP_VALUE = 188;
      /**
       * <pre>
       * &#64;img ROAD_FLOODED_us1.png
       * </pre>
       *
       * <code>ROAD_FLOODED = 189;</code>
       */
      public static final int ROAD_FLOODED_VALUE = 189;
      /**
       * <pre>
       * &#64;img AUDIBLE_WARNING_us1.png
       * </pre>
       *
       * <code>AUDIBLE_WARNING = 190;</code>
       */
      public static final int AUDIBLE_WARNING_VALUE = 190;
      /**
       * <pre>
       * &#64;img VILLAGE_AHEAD_us1.png
       * </pre>
       *
       * <code>VILLAGE_AHEAD = 191;</code>
       */
      public static final int VILLAGE_AHEAD_VALUE = 191;
      /**
       * <pre>
       * &#64;img MOVABLE_BRIDGE_de1.png
       * </pre>
       *
       * <code>MOVABLE_BRIDGE = 192;</code>
       */
      public static final int MOVABLE_BRIDGE_VALUE = 192;
      /**
       * <pre>
       * &#64;img SLOW_DOWN_us1.png
       * </pre>
       *
       * <code>SLOW_DOWN = 193;</code>
       */
      public static final int SLOW_DOWN_VALUE = 193;
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>INTERSECTION_T = 194;</code>
       */
      public static final int INTERSECTION_T_VALUE = 194;
      /**
       * <code>INTERSECTION_T_LEFT = 195;</code>
       */
      public static final int INTERSECTION_T_LEFT_VALUE = 195;
      /**
       * <pre>
       * &#64;img INTERSECTION_T_RIGHT_us1.png
       * </pre>
       *
       * <code>INTERSECTION_T_RIGHT = 196;</code>
       */
      public static final int INTERSECTION_T_RIGHT_VALUE = 196;
      /**
       * <pre>
       * &#64;img INTERSECTION_T_LEFT_RIGHT_us1.png
       * </pre>
       *
       * <code>INTERSECTION_T_LEFT_RIGHT = 197;</code>
       */
      public static final int INTERSECTION_T_LEFT_RIGHT_VALUE = 197;
      /**
       * <pre>
       * &#64;img INTERSECTION_Y_de1.png
       * </pre>
       *
       * <code>INTERSECTION_Y = 198;</code>
       */
      public static final int INTERSECTION_Y_VALUE = 198;
      /**
       * <pre>
       * &#64;img USE_LOW_GEAR_us1.png
       * </pre>
       *
       * <code>USE_LOW_GEAR = 199;</code>
       */
      public static final int USE_LOW_GEAR_VALUE = 199;
      /**
       * <pre>
       * &#64;img USE_LOW_GEAR_END_us1.png
       * </pre>
       *
       * <code>USE_LOW_GEAR_END = 200;</code>
       */
      public static final int USE_LOW_GEAR_END_VALUE = 200;
      /**
       * <pre>
       * &#64;img NO_COMPRESSION_BRAKING_us1.png
       * </pre>
       *
       * <code>NO_COMPRESSION_BRAKING = 201;</code>
       */
      public static final int NO_COMPRESSION_BRAKING_VALUE = 201;
      /**
       * <pre>
       * &#64;img NO_COMPRESSION_BRAKING_END_us1.png
       * </pre>
       *
       * <code>NO_COMPRESSION_BRAKING_END = 202;</code>
       */
      public static final int NO_COMPRESSION_BRAKING_END_VALUE = 202;
      /**
       * <pre>
       * &#64;img WAITING_LINE_us1.png
       * </pre>
       *
       * <code>WAITING_LINE = 203;</code>
       */
      public static final int WAITING_LINE_VALUE = 203;
      /**
       * <pre>
       * &#64;img DONT_STOP_ZONE_us1.png
       * </pre>
       *
       * <code>DONT_STOP_ZONE = 204;</code>
       */
      public static final int DONT_STOP_ZONE_VALUE = 204;
      /**
       * <pre>
       * &#64;img HONKING_PROHIBITED_us1.png
       * </pre>
       *
       * <code>HONKING_PROHIBITED = 205;</code>
       */
      public static final int HONKING_PROHIBITED_VALUE = 205;
      /**
       * <pre>
       * &#64;img FASTEN_SEAT_BELT_us1.png
       * </pre>
       *
       * <code>FASTEN_SEAT_BELT = 206;</code>
       */
      public static final int FASTEN_SEAT_BELT_VALUE = 206;
      /**
       * <pre>
       * &#64;img HAMLET_ENTRY_de1.png
       * </pre>
       *
       * <code>HAMLET_ENTRY = 207;</code>
       */
      public static final int HAMLET_ENTRY_VALUE = 207;
      /**
       * <pre>
       * &#64;img HAMLET_EXIT_de1.png
       * </pre>
       *
       * <code>HAMLET_EXIT = 208;</code>
       */
      public static final int HAMLET_EXIT_VALUE = 208;
      /**
       * <pre>
       * &#64;img HIGHWAY_MARKER_1_STRIPE_de1.png
       * </pre>
       *
       * <code>HIGHWAY_MARKER_1_STRIPE = 209;</code>
       */
      public static final int HIGHWAY_MARKER_1_STRIPE_VALUE = 209;
      /**
       * <pre>
       * &#64;img HIGHWAY_MARKER_2_STRIPES_de1.png
       * </pre>
       *
       * <code>HIGHWAY_MARKER_2_STRIPES = 210;</code>
       */
      public static final int HIGHWAY_MARKER_2_STRIPES_VALUE = 210;
      /**
       * <pre>
       * &#64;img HIGHWAY_MARKER_3_STRIPES_de1.png
       * </pre>
       *
       * <code>HIGHWAY_MARKER_3_STRIPES = 211;</code>
       */
      public static final int HIGHWAY_MARKER_3_STRIPES_VALUE = 211;
      /**
       * <pre>
       * &#64;img GUIDING_BEACON_de1.png
       * </pre>
       *
       * <code>GUIDING_BEACON = 212;</code>
       */
      public static final int GUIDING_BEACON_VALUE = 212;
      /**
       * <pre>
       * &#64;img COUNTDOWN_MARKER_1_STRIPE_de1.png
       * </pre>
       *
       * <code>COUNTDOWN_MARKER_1_STRIPE = 213;</code>
       */
      public static final int COUNTDOWN_MARKER_1_STRIPE_VALUE = 213;
      /**
       * <pre>
       * &#64;img COUNTDOWN_MARKER_2_STRIPES_de1.png
       * </pre>
       *
       * <code>COUNTDOWN_MARKER_2_STRIPES = 214;</code>
       */
      public static final int COUNTDOWN_MARKER_2_STRIPES_VALUE = 214;
      /**
       * <pre>
       * &#64;img COUNTDOWN_MARKER_3_STRIPES_de1.png
       * </pre>
       *
       * <code>COUNTDOWN_MARKER_3_STRIPES = 215;</code>
       */
      public static final int COUNTDOWN_MARKER_3_STRIPES_VALUE = 215;
      /**
       * <pre>
       * &#64;img DIVERSION_ROUTE_de1.png
       * </pre>
       *
       * <code>DIVERSION_ROUTE = 216;</code>
       */
      public static final int DIVERSION_ROUTE_VALUE = 216;
      /**
       * <pre>
       * &#64;img DIVERSION_ROUTE_END_de1.png
       * </pre>
       *
       * <code>DIVERSION_ROUTE_END = 217;</code>
       */
      public static final int DIVERSION_ROUTE_END_VALUE = 217;
      /**
       * <pre>
       * &#64;img NO_STOPPING_EXCEPT_TAXI_de1.png
       * </pre>
       *
       * <code>NO_STOPPING_EXCEPT_TAXI = 218;</code>
       */
      public static final int NO_STOPPING_EXCEPT_TAXI_VALUE = 218;
      /**
       * <pre>
       * &#64;img NO_STOPPING_de1.png
       * </pre>
       *
       * <code>NO_STOPPING = 219;</code>
       */
      public static final int NO_STOPPING_VALUE = 219;
      /**
       * <code>NO_STOPPING_LEFT = 220;</code>
       */
      public static final int NO_STOPPING_LEFT_VALUE = 220;
      /**
       * <code>NO_STOPPING_RIGHT = 221;</code>
       */
      public static final int NO_STOPPING_RIGHT_VALUE = 221;
      /**
       * <pre>
       * &#64;img NO_STOPPING_LEFT_AND_RIGHT_de1.png
       * </pre>
       *
       * <code>NO_STOPPING_LEFT_AND_RIGHT = 222;</code>
       */
      public static final int NO_STOPPING_LEFT_AND_RIGHT_VALUE = 222;
      /**
       * <pre>
       * If sensor is not aware of left or right restriction, or was not present on sign.
       * &#64;img NO_PARKING_de1.png
       * </pre>
       *
       * <code>NO_PARKING = 223;</code>
       */
      public static final int NO_PARKING_VALUE = 223;
      /**
       * <pre>
       * &#64;img NO_PARKING_LEFT_de1.png
       * </pre>
       *
       * <code>NO_PARKING_LEFT = 224;</code>
       */
      public static final int NO_PARKING_LEFT_VALUE = 224;
      /**
       * <pre>
       * &#64;img NO_PARKING_RIGHT_de1.png
       * </pre>
       *
       * <code>NO_PARKING_RIGHT = 225;</code>
       */
      public static final int NO_PARKING_RIGHT_VALUE = 225;
      /**
       * <pre>
       * &#64;img NO_PARKING_LEFT_AND_RIGHT_de1.png
       * </pre>
       *
       * <code>NO_PARKING_LEFT_AND_RIGHT = 226;</code>
       */
      public static final int NO_PARKING_LEFT_AND_RIGHT_VALUE = 226;
      /**
       * <pre>
       * &#64;img RUNNAWAY_TRUCK_RAMP_us1.png
       * </pre>
       *
       * <code>RUNNAWAY_TRUCK_RAMP = 227;</code>
       */
      public static final int RUNNAWAY_TRUCK_RAMP_VALUE = 227;
      /**
       * <pre>
       * &#64;img TURN_ON_GREEN_de1.png
       * </pre>
       *
       * <code>TURN_ON_GREEN = 228;</code>
       */
      public static final int TURN_ON_GREEN_VALUE = 228;
      /**
       * <pre>
       * &#64;img NO_TURN_ON_RED_us1.jpg
       * </pre>
       *
       * <code>NO_TURN_ON_RED = 229;</code>
       */
      public static final int NO_TURN_ON_RED_VALUE = 229;
      /**
       * <pre>
       * &#64;img MOTORWAY_ROAD_NUMBER_de1.png
       * </pre>
       *
       * <code>MOTORWAY_ROAD_NUMBER = 230;</code>
       */
      public static final int MOTORWAY_ROAD_NUMBER_VALUE = 230;
      /**
       * <pre>
       * &#64;img HIGHWAY_ROAD_NUMBER_de1.png
       * </pre>
       *
       * <code>HIGHWAY_ROAD_NUMBER = 231;</code>
       */
      public static final int HIGHWAY_ROAD_NUMBER_VALUE = 231;
      /**
       * <pre>
       * &#64;img HIGHWAY_INTERCHANGE_NUMBER_de1.png
       * </pre>
       *
       * <code>HIGHWAY_INTERCHANGE_NUMBER = 232;</code>
       */
      public static final int HIGHWAY_INTERCHANGE_NUMBER_VALUE = 232;
      /**
       * <pre>
       * &#64;img EUROPEAN_ROAD_NUMBER_de1.png
       * </pre>
       *
       * <code>EUROPEAN_ROAD_NUMBER = 233;</code>
       */
      public static final int EUROPEAN_ROAD_NUMBER_VALUE = 233;
      /**
       * <pre>
       * &#64;img SPEED_LIMIT_ZONE_de1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_ZONE = 234;</code>
       */
      public static final int SPEED_LIMIT_ZONE_VALUE = 234;
      /**
       * <pre>
       * &#64;img SPEED_LIMIT_ZONE_END_de1.png
       * </pre>
       *
       * <code>SPEED_LIMIT_ZONE_END = 235;</code>
       */
      public static final int SPEED_LIMIT_ZONE_END_VALUE = 235;
      /**
       * <pre>
       * &#64;img NO_PARKING_ZONE_de1.png
       * </pre>
       *
       * <code>NO_PARKING_ZONE = 236;</code>
       */
      public static final int NO_PARKING_ZONE_VALUE = 236;
      /**
       * <pre>
       * &#64;img NO_PARKING_ZONE_END_de1.png
       * </pre>
       *
       * <code>NO_PARKING_ZONE_END = 237;</code>
       */
      public static final int NO_PARKING_ZONE_END_VALUE = 237;
      /**
       * <pre>
       * &#64;img PARKING_ZONE_de1.png
       * </pre>
       *
       * <code>PARKING_ZONE = 238;</code>
       */
      public static final int PARKING_ZONE_VALUE = 238;
      /**
       * <pre>
       * &#64;img PARKING_ZONE_END_de1.png
       * </pre>
       *
       * <code>PARKING_ZONE_END = 239;</code>
       */
      public static final int PARKING_ZONE_END_VALUE = 239;
      /**
       * <pre>
       * If sensor is not aware of left or right restriction, or was not present on sign.
       * &#64;img PARKING_de1.png
       * </pre>
       *
       * <code>PARKING = 240;</code>
       */
      public static final int PARKING_VALUE = 240;
      /**
       * <pre>
       * &#64;img PARKING_TO_LEFT_de1.png
       * </pre>
       *
       * <code>PARKING_TO_LEFT = 241;</code>
       */
      public static final int PARKING_TO_LEFT_VALUE = 241;
      /**
       * <pre>
       * &#64;img PARKING_TO_RIGHT_de1.png
       * </pre>
       *
       * <code>PARKING_TO_RIGHT = 242;</code>
       */
      public static final int PARKING_TO_RIGHT_VALUE = 242;
      /**
       * <pre>
       * &#64;img PARKING_GARAGE_de1.png
       * </pre>
       *
       * <code>PARKING_GARAGE = 243;</code>
       */
      public static final int PARKING_GARAGE_VALUE = 243;
      /**
       * <pre>
       * &#64;img PARKING_ON_SIDEWAY_de1.png
       * </pre>
       *
       * <code>PARKING_ON_SIDEWAY = 244;</code>
       */
      public static final int PARKING_ON_SIDEWAY_VALUE = 244;
      /**
       * <code>SAFETY_DISTANCE = 245;</code>
       */
      public static final int SAFETY_DISTANCE_VALUE = 245;
      /**
       * <code>SAFETY_DISTANCE_VEHICLE = 246;</code>
       */
      public static final int SAFETY_DISTANCE_VEHICLE_VALUE = 246;
      /**
       * <pre>
       * &#64;img SAFETY_DISTANCE_TRUCK_de1.png
       * </pre>
       *
       * <code>SAFETY_DISTANCE_TRUCK = 247;</code>
       */
      public static final int SAFETY_DISTANCE_TRUCK_VALUE = 247;
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * &#64;img DETOUR_de1.png
       * </pre>
       *
       * <code>DETOUR = 248;</code>
       */
      public static final int DETOUR_VALUE = 248;
      /**
       * <pre>
       * &#64;img DETOUR_END_de1.png
       * </pre>
       *
       * <code>DETOUR_END = 249;</code>
       */
      public static final int DETOUR_END_VALUE = 249;
      /**
       * <code>DETOUR_LEFT = 250;</code>
       */
      public static final int DETOUR_LEFT_VALUE = 250;
      /**
       * <pre>
       * &#64;img DETOUR_RIGHT_de1.png
       * </pre>
       *
       * <code>DETOUR_RIGHT = 251;</code>
       */
      public static final int DETOUR_RIGHT_VALUE = 251;
      /**
       * <pre>
       * &#64;img STATION_GAS_de1.png
       * </pre>
       *
       * <code>STATION_GAS = 252;</code>
       */
      public static final int STATION_GAS_VALUE = 252;
      /**
       * <pre>
       * &#64;img STATION_LPG_de1.png
       * </pre>
       *
       * <code>STATION_LPG = 253;</code>
       */
      public static final int STATION_LPG_VALUE = 253;
      /**
       * <pre>
       * &#64;img STATION_CNG_de1.png
       * </pre>
       *
       * <code>STATION_CNG = 254;</code>
       */
      public static final int STATION_CNG_VALUE = 254;
      /**
       * <pre>
       * &#64;img STATION_H2_de1.png
       * </pre>
       *
       * <code>STATION_H2 = 255;</code>
       */
      public static final int STATION_H2_VALUE = 255;
      /**
       * <pre>
       * &#64;img STATION_ELECTRO_de1.png
       * </pre>
       *
       * <code>STATION_ELECTRO = 256;</code>
       */
      public static final int STATION_ELECTRO_VALUE = 256;
      /**
       * <pre>
       * &#64;img STATION_POLICE_de1.png
       * </pre>
       *
       * <code>STATION_POLICE = 257;</code>
       */
      public static final int STATION_POLICE_VALUE = 257;
      /**
       * <pre>
       * &#64;img CAMPING_SPOT_de1.png
       * </pre>
       *
       * <code>CAMPING_SPOT = 258;</code>
       */
      public static final int CAMPING_SPOT_VALUE = 258;
      /**
       * <pre>
       * &#64;img RESTROOMS_de1.png
       * </pre>
       *
       * <code>RESTROOMS = 259;</code>
       */
      public static final int RESTROOMS_VALUE = 259;
      /**
       * <pre>
       * &#64;img INFO_POINT_de1.png
       * </pre>
       *
       * <code>INFO_POINT = 260;</code>
       */
      public static final int INFO_POINT_VALUE = 260;
      /**
       * <pre>
       * &#64;img MOTORWAY_EXIT_AHEAD_de1.png
       * </pre>
       *
       * <code>MOTORWAY_EXIT_AHEAD = 261;</code>
       */
      public static final int MOTORWAY_EXIT_AHEAD_VALUE = 261;
      /**
       * <pre>
       * &#64;img HIGHWAY_EXIT_AHEAD_de1.png
       * </pre>
       *
       * <code>HIGHWAY_EXIT_AHEAD = 262;</code>
       */
      public static final int HIGHWAY_EXIT_AHEAD_VALUE = 262;
      /**
       * <pre>
       * &#64;img MOTORWAY_EXIT_de1.png
       * </pre>
       *
       * <code>MOTORWAY_EXIT = 263;</code>
       */
      public static final int MOTORWAY_EXIT_VALUE = 263;
      /**
       * <pre>
       * &#64;img HIGHWAY_EXIT_de1.png
       * </pre>
       *
       * <code>HIGHWAY_EXIT = 264;</code>
       */
      public static final int HIGHWAY_EXIT_VALUE = 264;
      /**
       * <pre>
       * &#64;img FIRST_AID_de1.png
       * </pre>
       *
       * <code>FIRST_AID = 265;</code>
       */
      public static final int FIRST_AID_VALUE = 265;
      /**
       * <pre>
       * &#64;img LOW_FLYING_de1.png
       * </pre>
       *
       * <code>LOW_FLYING = 266;</code>
       */
      public static final int LOW_FLYING_VALUE = 266;
      /**
       * <pre>
       * If sensor is not aware of left or right restriction.
       * </pre>
       *
       * <code>LANE_SHIFT = 267;</code>
       */
      public static final int LANE_SHIFT_VALUE = 267;
      /**
       * <pre>
       * &#64;img LANE_SHIFT_TO_LEFT_de1.png
       * </pre>
       *
       * <code>LANE_SHIFT_TO_LEFT = 268;</code>
       */
      public static final int LANE_SHIFT_TO_LEFT_VALUE = 268;
      /**
       * <code>LANE_SHIFT_TO_RIGHT = 269;</code>
       */
      public static final int LANE_SHIFT_TO_RIGHT_VALUE = 269;
      /**
       * <pre>
       * &#64;img PEDESTRIAN_UNDERPASS_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_UNDERPASS = 270;</code>
       */
      public static final int PEDESTRIAN_UNDERPASS_VALUE = 270;
      /**
       * <pre>
       * &#64;img PEDESTRIAN_OVERPASS_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_OVERPASS = 271;</code>
       */
      public static final int PEDESTRIAN_OVERPASS_VALUE = 271;
      /**
       * <pre>
       * &#64;img BREAKDOWN_BAY_de1.png
       * </pre>
       *
       * <code>BREAKDOWN_BAY = 272;</code>
       */
      public static final int BREAKDOWN_BAY_VALUE = 272;
      /**
       * <pre>
       * &#64;img BUS_LANE_de1.png
       * </pre>
       *
       * <code>BUS_LANE = 273;</code>
       */
      public static final int BUS_LANE_VALUE = 273;
      /**
       * <pre>
       * &#64;img DOUBLE_HAIRPIN_cn1.png
       * </pre>
       *
       * <code>DOUBLE_HAIRPIN = 274;</code>
       */
      public static final int DOUBLE_HAIRPIN_VALUE = 274;
      /**
       * <pre>
       * &#64;img COUNTRY_SPECIFIC_INFORMATION_de1.png
       * </pre>
       *
       * <code>COUNTRY_SPECIFIC_INFORMATION = 275;</code>
       */
      public static final int COUNTRY_SPECIFIC_INFORMATION_VALUE = 275;
      /**
       * <pre>
       * &#64;img PEDESTRIAN_BICYCLE_SHARED_PATH_de1.png
       * </pre>
       *
       * <code>PEDESTRIAN_BICYCLE_SHARED_PATH = 276;</code>
       */
      public static final int PEDESTRIAN_BICYCLE_SHARED_PATH_VALUE = 276;
      /**
       * <pre>
       * &#64;img OVERHEAD_LANE_CONTROL_CLOSED_us1.png
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_CLOSED = 277;</code>
       */
      public static final int OVERHEAD_LANE_CONTROL_CLOSED_VALUE = 277;
      /**
       * <pre>
       * &#64;img OVERHEAD_LANE_CONTROL_OPEN_us1.png
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_OPEN = 278;</code>
       */
      public static final int OVERHEAD_LANE_CONTROL_OPEN_VALUE = 278;
      /**
       * <pre>
       * Left lane is closing, hence arrow points to the right.
       * &#64;img OVERHEAD_LANE_CONTROL_CLOSING_LEFT_de1.png
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_CLOSING_LEFT = 279;</code>
       */
      public static final int OVERHEAD_LANE_CONTROL_CLOSING_LEFT_VALUE = 279;
      /**
       * <pre>
       * Right lane is closing, hence arrow points to the left.
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_CLOSING_RIGHT = 280;</code>
       */
      public static final int OVERHEAD_LANE_CONTROL_CLOSING_RIGHT_VALUE = 280;
      /**
       * <pre>
       * Arrow pointing to left side and flashing.
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_FLASH_ARROW_LEFT = 281;</code>
       */
      public static final int OVERHEAD_LANE_CONTROL_FLASH_ARROW_LEFT_VALUE = 281;
      /**
       * <pre>
       * Arrow pointing to right side and flashing.
       * </pre>
       *
       * <code>OVERHEAD_LANE_CONTROL_FLASH_ARROW_RIGHT = 282;</code>
       */
      public static final int OVERHEAD_LANE_CONTROL_FLASH_ARROW_RIGHT_VALUE = 282;
      /**
       * <pre>
       * &#64;img TRINATURE_de1.png
       * </pre>
       *
       * <code>TRINATURE = 283;</code>
       */
      public static final int TRINATURE_VALUE = 283;
      /**
       * <pre>
       * &#64;img ANIMAL_FROG_de1.png
       * </pre>
       *
       * <code>ANIMAL_FROG = 284;</code>
       */
      public static final int ANIMAL_FROG_VALUE = 284;
      /**
       * <pre>
       * &#64;img GRAVEL_de1.png
       * </pre>
       *
       * <code>GRAVEL = 285;</code>
       */
      public static final int GRAVEL_VALUE = 285;
      /**
       * <pre>
       * &#64;img WARNING_PEDESTRIAN_CROSSING_de1.png
       * </pre>
       *
       * <code>WARNING_PEDESTRIAN_CROSSING = 286;</code>
       */
      public static final int WARNING_PEDESTRIAN_CROSSING_VALUE = 286;
      /**
       * <pre>
       * &#64;img LOW_TREE_de1.png
       * </pre>
       *
       * <code>LOW_TREE = 287;</code>
       */
      public static final int LOW_TREE_VALUE = 287;
      /**
       * <pre>
       * &#64;img WARNING_RIDER_de1.png
       * </pre>
       *
       * <code>WARNING_RIDER = 288;</code>
       */
      public static final int WARNING_RIDER_VALUE = 288;
      /**
       * <pre>
       * &#64;img STOP_AHEAD_us1.png
       * </pre>
       *
       * <code>STOP_AHEAD = 289;</code>
       */
      public static final int STOP_AHEAD_VALUE = 289;
      /**
       * <pre>
       * &#64;img YIELD_AHEAD_us1.png
       * </pre>
       *
       * <code>YIELD_AHEAD = 290;</code>
       */
      public static final int YIELD_AHEAD_VALUE = 290;
      /**
       * <pre>
       * &#64;img WATER_PROTECTION_AREA_de1.png
       * </pre>
       *
       * <code>WATER_PROTECTION_AREA = 291;</code>
       */
      public static final int WATER_PROTECTION_AREA_VALUE = 291;
      /**
       * <pre>
       * &#64;img TOLL_DOUANE_de1.png
       * </pre>
       *
       * <code>TOLL_DOUANE = 292;</code>
       */
      public static final int TOLL_DOUANE_VALUE = 292;
      /**
       * <pre>
       * &#64;img NO_CAR_OR_BIKE_de1.png
       * </pre>
       *
       * <code>NO_CAR_OR_BIKE = 293;</code>
       */
      public static final int NO_CAR_OR_BIKE_VALUE = 293;
      /**
       * <pre>
       * &#64;img DRIVING_DIRECTION_ONLY_UP_de1.png
       * </pre>
       *
       * <code>DRIVING_DIRECTION_ONLY_UP = 294;</code>
       */
      public static final int DRIVING_DIRECTION_ONLY_UP_VALUE = 294;
      /**
       * <pre>
       * &#64;img DRIVING_DIRECTION_UP_AND_DOWN_de1.png
       * </pre>
       *
       * <code>DRIVING_DIRECTION_UP_AND_DOWN = 295;</code>
       */
      public static final int DRIVING_DIRECTION_UP_AND_DOWN_VALUE = 295;
      /**
       * <pre>
       * &#64;img MILITARY_SIGN_de1.png
       * </pre>
       *
       * <code>MILITARY_SIGN = 296;</code>
       */
      public static final int MILITARY_SIGN_VALUE = 296;
      /**
       * <pre>
       * &#64;img SMOG_de1.png
       * </pre>
       *
       * <code>SMOG = 297;</code>
       */
      public static final int SMOG_VALUE = 297;
      /**
       * <pre>
       * &#64;img ROUNDABOUT_AHEAD_de1.png
       * </pre>
       *
       * <code>ROUNDABOUT_AHEAD = 298;</code>
       */
      public static final int ROUNDABOUT_AHEAD_VALUE = 298;
      /**
       * <pre>
       * &#64;img MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT_de1.png
       * </pre>
       *
       * <code>MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT = 299;</code>
       */
      public static final int MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT_VALUE = 299;
      /**
       * <pre>
       * &#64;img DEAD_END_RIGHT_fr1.png
       * </pre>
       *
       * <code>DEAD_END_RIGHT = 300;</code>
       */
      public static final int DEAD_END_RIGHT_VALUE = 300;
      /**
       * <code>DEAD_END_LEFT = 301;</code>
       */
      public static final int DEAD_END_LEFT_VALUE = 301;
      /**
       * <pre>
       * &#64;img TOLL_TRUCK_de1.png
       * </pre>
       *
       * <code>TOLL_TRUCK = 302;</code>
       */
      public static final int TOLL_TRUCK_VALUE = 302;
      /**
       * <pre>
       * &#64;img TOLL_TRUCK_END_de1.png
       * </pre>
       *
       * <code>TOLL_TRUCK_END = 303;</code>
       */
      public static final int TOLL_TRUCK_END_VALUE = 303;
      /**
       * <pre>
       * &#64;img STAGGERED_JUNCTION_uk1.png &#64;img STAGGERED_JUNCTION_uk2.png
       * </pre>
       *
       * <code>STAGGERED_JUNCTION = 304;</code>
       */
      public static final int STAGGERED_JUNCTION_VALUE = 304;
      /**
       * <pre>
       * &#64;img AXLE_WEIGHT_RESTRICTION_de1.png
       * </pre>
       *
       * <code>AXLE_WEIGHT_RESTRICTION = 305;</code>
       */
      public static final int AXLE_WEIGHT_RESTRICTION_VALUE = 305;
      /**
       * <pre>
       * A sign notifying the general end of a toll-road.
       * </pre>
       *
       * <code>TOLL_END = 306;</code>
       */
      public static final int TOLL_END_VALUE = 306;
      /**
       * <pre>
       * A sign notifying the end of a toll-road for cars.
       * </pre>
       *
       * <code>TOLL_CAR_END = 307;</code>
       */
      public static final int TOLL_CAR_END_VALUE = 307;
      /**
       * <pre>
       * A sign notifying the end of a toll-lane.
       * </pre>
       *
       * <code>TOLL_LANE_END = 308;</code>
       */
      public static final int TOLL_LANE_END_VALUE = 308;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_TYPE;
          case 1: return OTHER_AS_TEXT;
          case 2: return SPEED_LIMIT;
          case 3: return SPEED_LIMIT_END;
          case 4: return SPEED_LIMIT_CHANGE_UPCOMING;
          case 5: return ADVISORY_SPEED_LIMIT;
          case 6: return ADVISORY_SPEED_LIMIT_END;
          case 7: return NO_OVERTAKING;
          case 8: return NO_OVERTAKING_END;
          case 9: return PROTECTED_PASSING_START;
          case 10: return PROTECTED_PASSING_END;
          case 11: return PROTECTED_PASSING_LEFT_START;
          case 12: return PROTECTED_PASSING_RIGHT_START;
          case 13: return PROTECTED_PASSING_LEFT_END;
          case 14: return PROTECTED_PASSING_RIGHT_END;
          case 15: return NO_OVERTAKING_TRUCK;
          case 16: return NO_OVERTAKING_TRUCK_END;
          case 17: return ALL_RESTRICTIONS_END;
          case 18: return CITY_START;
          case 19: return CITY_END;
          case 20: return HIGHWAY;
          case 21: return HIGHWAY_END;
          case 22: return MOTORWAY;
          case 23: return MOTORWAY_END;
          case 24: return CONSTRUCTION;
          case 25: return CONSTRUCTION_END;
          case 26: return LANE_MERGE;
          case 27: return LANE_MERGE_ON_RIGHT;
          case 28: return LANE_MERGE_ON_LEFT;
          case 29: return LANE_MERGE_CENTER;
          case 30: return RAILWAY_CROSSING_GENERAL;
          case 31: return RAILWAY_CROSSING_PROTECTED;
          case 32: return RAILWAY_CROSSING_UNPROTECTED;
          case 33: return ROAD_NARROWS;
          case 34: return ROAD_NARROWS_LEFT;
          case 35: return ROAD_NARROWS_RIGHT;
          case 36: return ROAD_NARROWS_CENTER;
          case 37: return SHARP_CURVE;
          case 38: return SHARP_CURVE_LEFT;
          case 39: return SHARP_CURVE_RIGHT;
          case 40: return WINDING_ROAD;
          case 41: return WINDING_ROAD_STARTING_LEFT;
          case 42: return WINDING_ROAD_STARTING_RIGHT;
          case 43: return STEEP_HILL;
          case 44: return STEEP_HILL_UPWARDS;
          case 45: return STEEP_HILL_DOWNWARDS;
          case 46: return STOP_SIGN;
          case 47: return LATERAL_WIND;
          case 48: return LATERAL_WIND_FROM_RIGHT;
          case 49: return LATERAL_WIND_FROM_LEFT;
          case 50: return GENERAL_WARNING;
          case 51: return RISK_OF_GROUNDING;
          case 52: return ANIMAL;
          case 53: return ICY_CONDITIONS;
          case 54: return SLIPPERY_ROAD;
          case 55: return UNEVEN_ROAD;
          case 56: return SCHOOL_ZONE;
          case 57: return TRAMWAY_CROSSING;
          case 58: return CONGESTION_HAZARD;
          case 59: return ACCIDENT_HAZARD;
          case 60: return BICYCLE_CROSSING;
          case 61: return PRIORITY_OVER_ONCOMING_TRAFFIC;
          case 62: return YIELD;
          case 63: return PRIORITY_ROAD;
          case 64: return PRIORITY_ROAD_END;
          case 65: return TRAFFIC_CALMING;
          case 66: return TRAFFIC_CALMING_END;
          case 67: return ENVIRONMENTAL_AREA;
          case 68: return ENVIRONMENTAL_AREA_END;
          case 69: return INTERSECTION;
          case 70: return ROUNDABOUT;
          case 71: return PASSING_ON_LEFT;
          case 72: return PASSING_ON_RIGHT;
          case 73: return PASSING_ON_LEFT_OR_RIGHT;
          case 74: return MANDATORY_TURN_RIGHT_ONLY;
          case 75: return MANDATORY_TURN_LEFT_ONLY;
          case 76: return MANDATORY_STRAIGHT_ONLY;
          case 77: return MANDATORY_TURN_LEFT_OR_RIGHT;
          case 78: return MANDATORY_TURN_RESTRICTION;
          case 79: return MANDATORY_STRAIGHT_OR_LEFT;
          case 80: return MANDATORY_STRAIGHT_OR_RIGHT;
          case 81: return NO_LEFT_TURN;
          case 82: return NO_RIGHT_TURN;
          case 83: return NO_U_TURN;
          case 84: return NO_U_OR_LEFT_TURN;
          case 85: return U_TURN_ALLOWED;
          case 86: return MANDATORY_LEFT_TRUCK;
          case 87: return MANDATORY_RIGHT_TRUCK;
          case 88: return MANDATORY_STRAIGHT_TRUCK;
          case 89: return NO_ENTRY;
          case 90: return DEAD_END;
          case 91: return HIGH_OCCUPANCY_VEHICLE_LANE;
          case 92: return TOLL;
          case 93: return TOLL_CAR;
          case 94: return TOLL_LANE;
          case 95: return EXPRESS_LANE;
          case 96: return SHOULDER_OPEN_FOR_TRAFFIC;
          case 97: return SHOULDER_CLOSED_FOR_TRAFFIC;
          case 98: return LANE_CLOSED;
          case 99: return LANE_CLOSED_RIGHT_MOST_LANE;
          case 100: return LANE_CLOSED_LEFT_MOST_LANE;
          case 101: return WARNING_PEDESTRIAN;
          case 102: return WARNING_CHILDREN;
          case 103: return WARNING_BICYCLE;
          case 104: return WARNING_BUS;
          case 105: return PUBLIC_TRANSPORTATION_STOP;
          case 106: return PEDESTRIAN_CROSSING;
          case 107: return WEIGHT_RESTRICTION;
          case 108: return HEIGHT_RESTRICTION;
          case 109: return LENGTH_RESTRICTION;
          case 110: return WIDTH_RESTRICTION;
          case 111: return WARNING_TRUCK_ROLLOVER;
          case 112: return SIGNAL_AHEAD;
          case 113: return SKI_CROSSING;
          case 114: return NO_AGRICULTUR_VEHICLE;
          case 115: return NO_BICYCLE;
          case 116: return NO_BUS;
          case 117: return NO_HAUL_EXPLOSIVES;
          case 118: return NO_HAUL_HARMFUL_TO_WATER;
          case 119: return NO_HAUL_HAZARDOUS_MATERIAL;
          case 120: return NO_MOTORCYCLE;
          case 121: return NO_TRAILER;
          case 122: return NO_TRUCK_WITH_TRAILER;
          case 123: return PARK_AND_RIDE;
          case 124: return ROAD_DISTANCE;
          case 125: return EMERGENCY_PHONE;
          case 126: return SPEED_LIMIT_ENFORCEMENT;
          case 127: return TRAFFIC_LIGHT_ENFORCEMENT;
          case 128: return BOARD_DIRECTION;
          case 129: return STREET_NAME;
          case 130: return TRUCK_SPEED_LIMIT;
          case 131: return TRUCK_SPEED_LIMIT_END;
          case 132: return SPEED_LIMIT_NIGHT;
          case 133: return SPEED_LIMIT_NIGHT_END;
          case 134: return MINIMUM_SPEED;
          case 135: return MINIMUM_SPEED_END;
          case 136: return PEDESTRIAN_ZONE;
          case 137: return PEDESTRIAN_ZONE_END;
          case 138: return PEDESTRIAN_PATH;
          case 139: return PEDESTRIAN_PATH_END;
          case 140: return PEDESTRIAN_BICYCLE_PATH;
          case 141: return PEDESTRIAN_BICYCLE_PATH_END;
          case 142: return BICYCLE_PATH;
          case 143: return BICYCLE_PATH_END;
          case 144: return BICYCLE_STREET;
          case 145: return BICYCLE_STREET_END;
          case 146: return CURVE_LEFT_THEN_RIGHT;
          case 147: return CURVE_RIGHT_THEN_LEFT;
          case 148: return CURVE_TRIPLE_HAIRPIN;
          case 149: return STEEP_DROP;
          case 150: return STEEP_DROP_ON_LEFT;
          case 151: return STEEP_DROP_ON_RIGHT;
          case 152: return NO_ANIMAL_CATTLE;
          case 153: return ANIMAL_DEER;
          case 154: return ANIMAL_MOOSE;
          case 155: return NO_HORSE_RIDING;
          case 156: return FALLING_ROCKS;
          case 157: return FALLING_ROCKS_LEFT;
          case 158: return FALLING_ROCKS_RIGHT;
          case 159: return YIELD_TO_ONCOMING_TRAFFIC;
          case 160: return UNPROTECTED_LEFT_TURN;
          case 161: return ONEWAY_TRAFFIC;
          case 162: return ONEWAY_TRAFFIC_TO_LEFT;
          case 163: return ONEWAY_TRAFFIC_TO_RIGHT;
          case 164: return ONEWAY_TRAFFIC_TO_STRAIGHT;
          case 165: return NO_VEHICLE;
          case 166: return NO_MOTOR_VEHICLE;
          case 167: return NO_TRUCK;
          case 168: return NO_PEDESTRIAN;
          case 169: return LANE_USED_IN_BOTH_DIRECTIONS;
          case 170: return FOG_AREA;
          case 171: return TIRE_CHAINS_MANDATORY;
          case 172: return HIJACKING_HOTSPOT;
          case 173: return OVERPASS_AHEAD;
          case 174: return TUNNEL;
          case 175: return FERRY_TERMINAL;
          case 176: return NARROW_BRIDGE;
          case 177: return NO_IDLING;
          case 178: return HUMPBACK_BRIDGE;
          case 179: return EMBANKMENT;
          case 180: return EMBANKMENT_ON_THE_LEFT;
          case 181: return EMBANKMENT_ON_THE_RIGHT;
          case 182: return CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD;
          case 183: return CROSSING_WITH_PRIORITY_TO_THE_RIGHT;
          case 184: return BRANCH_TO_THE_LEFT;
          case 185: return BRANCH_TO_THE_RIGHT;
          case 186: return TWO_WAY_TRAFFIC;
          case 187: return BUMP;
          case 188: return DIP;
          case 189: return ROAD_FLOODED;
          case 190: return AUDIBLE_WARNING;
          case 191: return VILLAGE_AHEAD;
          case 192: return MOVABLE_BRIDGE;
          case 193: return SLOW_DOWN;
          case 194: return INTERSECTION_T;
          case 195: return INTERSECTION_T_LEFT;
          case 196: return INTERSECTION_T_RIGHT;
          case 197: return INTERSECTION_T_LEFT_RIGHT;
          case 198: return INTERSECTION_Y;
          case 199: return USE_LOW_GEAR;
          case 200: return USE_LOW_GEAR_END;
          case 201: return NO_COMPRESSION_BRAKING;
          case 202: return NO_COMPRESSION_BRAKING_END;
          case 203: return WAITING_LINE;
          case 204: return DONT_STOP_ZONE;
          case 205: return HONKING_PROHIBITED;
          case 206: return FASTEN_SEAT_BELT;
          case 207: return HAMLET_ENTRY;
          case 208: return HAMLET_EXIT;
          case 209: return HIGHWAY_MARKER_1_STRIPE;
          case 210: return HIGHWAY_MARKER_2_STRIPES;
          case 211: return HIGHWAY_MARKER_3_STRIPES;
          case 212: return GUIDING_BEACON;
          case 213: return COUNTDOWN_MARKER_1_STRIPE;
          case 214: return COUNTDOWN_MARKER_2_STRIPES;
          case 215: return COUNTDOWN_MARKER_3_STRIPES;
          case 216: return DIVERSION_ROUTE;
          case 217: return DIVERSION_ROUTE_END;
          case 218: return NO_STOPPING_EXCEPT_TAXI;
          case 219: return NO_STOPPING;
          case 220: return NO_STOPPING_LEFT;
          case 221: return NO_STOPPING_RIGHT;
          case 222: return NO_STOPPING_LEFT_AND_RIGHT;
          case 223: return NO_PARKING;
          case 224: return NO_PARKING_LEFT;
          case 225: return NO_PARKING_RIGHT;
          case 226: return NO_PARKING_LEFT_AND_RIGHT;
          case 227: return RUNNAWAY_TRUCK_RAMP;
          case 228: return TURN_ON_GREEN;
          case 229: return NO_TURN_ON_RED;
          case 230: return MOTORWAY_ROAD_NUMBER;
          case 231: return HIGHWAY_ROAD_NUMBER;
          case 232: return HIGHWAY_INTERCHANGE_NUMBER;
          case 233: return EUROPEAN_ROAD_NUMBER;
          case 234: return SPEED_LIMIT_ZONE;
          case 235: return SPEED_LIMIT_ZONE_END;
          case 236: return NO_PARKING_ZONE;
          case 237: return NO_PARKING_ZONE_END;
          case 238: return PARKING_ZONE;
          case 239: return PARKING_ZONE_END;
          case 240: return PARKING;
          case 241: return PARKING_TO_LEFT;
          case 242: return PARKING_TO_RIGHT;
          case 243: return PARKING_GARAGE;
          case 244: return PARKING_ON_SIDEWAY;
          case 245: return SAFETY_DISTANCE;
          case 246: return SAFETY_DISTANCE_VEHICLE;
          case 247: return SAFETY_DISTANCE_TRUCK;
          case 248: return DETOUR;
          case 249: return DETOUR_END;
          case 250: return DETOUR_LEFT;
          case 251: return DETOUR_RIGHT;
          case 252: return STATION_GAS;
          case 253: return STATION_LPG;
          case 254: return STATION_CNG;
          case 255: return STATION_H2;
          case 256: return STATION_ELECTRO;
          case 257: return STATION_POLICE;
          case 258: return CAMPING_SPOT;
          case 259: return RESTROOMS;
          case 260: return INFO_POINT;
          case 261: return MOTORWAY_EXIT_AHEAD;
          case 262: return HIGHWAY_EXIT_AHEAD;
          case 263: return MOTORWAY_EXIT;
          case 264: return HIGHWAY_EXIT;
          case 265: return FIRST_AID;
          case 266: return LOW_FLYING;
          case 267: return LANE_SHIFT;
          case 268: return LANE_SHIFT_TO_LEFT;
          case 269: return LANE_SHIFT_TO_RIGHT;
          case 270: return PEDESTRIAN_UNDERPASS;
          case 271: return PEDESTRIAN_OVERPASS;
          case 272: return BREAKDOWN_BAY;
          case 273: return BUS_LANE;
          case 274: return DOUBLE_HAIRPIN;
          case 275: return COUNTRY_SPECIFIC_INFORMATION;
          case 276: return PEDESTRIAN_BICYCLE_SHARED_PATH;
          case 277: return OVERHEAD_LANE_CONTROL_CLOSED;
          case 278: return OVERHEAD_LANE_CONTROL_OPEN;
          case 279: return OVERHEAD_LANE_CONTROL_CLOSING_LEFT;
          case 280: return OVERHEAD_LANE_CONTROL_CLOSING_RIGHT;
          case 281: return OVERHEAD_LANE_CONTROL_FLASH_ARROW_LEFT;
          case 282: return OVERHEAD_LANE_CONTROL_FLASH_ARROW_RIGHT;
          case 283: return TRINATURE;
          case 284: return ANIMAL_FROG;
          case 285: return GRAVEL;
          case 286: return WARNING_PEDESTRIAN_CROSSING;
          case 287: return LOW_TREE;
          case 288: return WARNING_RIDER;
          case 289: return STOP_AHEAD;
          case 290: return YIELD_AHEAD;
          case 291: return WATER_PROTECTION_AREA;
          case 292: return TOLL_DOUANE;
          case 293: return NO_CAR_OR_BIKE;
          case 294: return DRIVING_DIRECTION_ONLY_UP;
          case 295: return DRIVING_DIRECTION_UP_AND_DOWN;
          case 296: return MILITARY_SIGN;
          case 297: return SMOG;
          case 298: return ROUNDABOUT_AHEAD;
          case 299: return MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT;
          case 300: return DEAD_END_RIGHT;
          case 301: return DEAD_END_LEFT;
          case 302: return TOLL_TRUCK;
          case 303: return TOLL_TRUCK_END;
          case 304: return STAGGERED_JUNCTION;
          case 305: return AXLE_WEIGHT_RESTRICTION;
          case 306: return TOLL_END;
          case 307: return TOLL_CAR_END;
          case 308: return TOLL_LANE_END;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type getType() {
      org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type.forNumber(type_);
      return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type.UNRECOGNIZED : result;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 2;
    private org.sensoris.types.base.Confidence confidence_;
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    @java.lang.Override
    public boolean hasConfidence() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    @java.lang.Override
    public org.sensoris.types.base.Confidence getConfidence() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    @java.lang.Override
    public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }

    public static final int OTHER_TEXT_FIELD_NUMBER = 3;
    private com.google.protobuf.StringValue otherText_;
    /**
     * <pre>
     * If the type or additional information is known by the sensor, then it may be provided as string.
     * </pre>
     *
     * <code>.google.protobuf.StringValue other_text = 3;</code>
     * @return Whether the otherText field is set.
     */
    @java.lang.Override
    public boolean hasOtherText() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If the type or additional information is known by the sensor, then it may be provided as string.
     * </pre>
     *
     * <code>.google.protobuf.StringValue other_text = 3;</code>
     * @return The otherText.
     */
    @java.lang.Override
    public com.google.protobuf.StringValue getOtherText() {
      return otherText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : otherText_;
    }
    /**
     * <pre>
     * If the type or additional information is known by the sensor, then it may be provided as string.
     * </pre>
     *
     * <code>.google.protobuf.StringValue other_text = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.StringValueOrBuilder getOtherTextOrBuilder() {
      return otherText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : otherText_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getConfidence());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(3, getOtherText());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConfidence());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getOtherText());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence)) {
        return super.equals(obj);
      }
      org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence other = (org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence) obj;

      if (type_ != other.type_) return false;
      if (hasConfidence() != other.hasConfidence()) return false;
      if (hasConfidence()) {
        if (!getConfidence()
            .equals(other.getConfidence())) return false;
      }
      if (hasOtherText() != other.hasOtherText()) return false;
      if (hasOtherText()) {
        if (!getOtherText()
            .equals(other.getOtherText())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasConfidence()) {
        hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getConfidence().hashCode();
      }
      if (hasOtherText()) {
        hash = (37 * hash) + OTHER_TEXT_FIELD_NUMBER;
        hash = (53 * hash) + getOtherText().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
        org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_TypeAndConfidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_TypeAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Builder.class);
      }

      // Construct using org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getConfidenceFieldBuilder();
          getOtherTextFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        otherText_ = null;
        if (otherTextBuilder_ != null) {
          otherTextBuilder_.dispose();
          otherTextBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_TypeAndConfidence_descriptor;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence getDefaultInstanceForType() {
        return org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.getDefaultInstance();
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence build() {
        org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence buildPartial() {
        org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence result = new org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.confidence_ = confidenceBuilder_ == null
              ? confidence_
              : confidenceBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.otherText_ = otherTextBuilder_ == null
              ? otherText_
              : otherTextBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence) {
          return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence other) {
        if (other == org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasConfidence()) {
          mergeConfidence(other.getConfidence());
        }
        if (other.hasOtherText()) {
          mergeOtherText(other.getOtherText());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getOtherTextFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type getType() {
        org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type.forNumber(type_);
        return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private org.sensoris.types.base.Confidence confidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> confidenceBuilder_;
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return Whether the confidence field is set.
       */
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return The confidence.
       */
      public org.sensoris.types.base.Confidence getConfidence() {
        if (confidenceBuilder_ == null) {
          return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        } else {
          return confidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          confidence_ = value;
        } else {
          confidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(
          org.sensoris.types.base.Confidence.Builder builderForValue) {
        if (confidenceBuilder_ == null) {
          confidence_ = builderForValue.build();
        } else {
          confidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder mergeConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            confidence_ != null &&
            confidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
            getConfidenceBuilder().mergeFrom(value);
          } else {
            confidence_ = value;
          }
        } else {
          confidenceBuilder_.mergeFrom(value);
        }
        if (confidence_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder clearConfidence() {
        bitField0_ = (bitField0_ & ~0x00000002);
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.Confidence.Builder getConfidenceBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
        if (confidenceBuilder_ != null) {
          return confidenceBuilder_.getMessageOrBuilder();
        } else {
          return confidence_ == null ?
              org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
          getConfidenceFieldBuilder() {
        if (confidenceBuilder_ == null) {
          confidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                  getConfidence(),
                  getParentForChildren(),
                  isClean());
          confidence_ = null;
        }
        return confidenceBuilder_;
      }

      private com.google.protobuf.StringValue otherText_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> otherTextBuilder_;
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       * @return Whether the otherText field is set.
       */
      public boolean hasOtherText() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       * @return The otherText.
       */
      public com.google.protobuf.StringValue getOtherText() {
        if (otherTextBuilder_ == null) {
          return otherText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : otherText_;
        } else {
          return otherTextBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      public Builder setOtherText(com.google.protobuf.StringValue value) {
        if (otherTextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          otherText_ = value;
        } else {
          otherTextBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      public Builder setOtherText(
          com.google.protobuf.StringValue.Builder builderForValue) {
        if (otherTextBuilder_ == null) {
          otherText_ = builderForValue.build();
        } else {
          otherTextBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      public Builder mergeOtherText(com.google.protobuf.StringValue value) {
        if (otherTextBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            otherText_ != null &&
            otherText_ != com.google.protobuf.StringValue.getDefaultInstance()) {
            getOtherTextBuilder().mergeFrom(value);
          } else {
            otherText_ = value;
          }
        } else {
          otherTextBuilder_.mergeFrom(value);
        }
        if (otherText_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      public Builder clearOtherText() {
        bitField0_ = (bitField0_ & ~0x00000004);
        otherText_ = null;
        if (otherTextBuilder_ != null) {
          otherTextBuilder_.dispose();
          otherTextBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      public com.google.protobuf.StringValue.Builder getOtherTextBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getOtherTextFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      public com.google.protobuf.StringValueOrBuilder getOtherTextOrBuilder() {
        if (otherTextBuilder_ != null) {
          return otherTextBuilder_.getMessageOrBuilder();
        } else {
          return otherText_ == null ?
              com.google.protobuf.StringValue.getDefaultInstance() : otherText_;
        }
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> 
          getOtherTextFieldBuilder() {
        if (otherTextBuilder_ == null) {
          otherTextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder>(
                  getOtherText(),
                  getParentForChildren(),
                  isClean());
          otherText_ = null;
        }
        return otherTextBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
    private static final org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence();
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TypeAndConfidence>
        PARSER = new com.google.protobuf.AbstractParser<TypeAndConfidence>() {
      @java.lang.Override
      public TypeAndConfidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TypeAndConfidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TypeAndConfidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValueAndConfidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * All classified sign values which are not defined or not fully defined in type may be provided as value.
     *
     * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
     * </pre>
     *
     * <code>.google.protobuf.StringValue value = 1;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <pre>
     * All classified sign values which are not defined or not fully defined in type may be provided as value.
     *
     * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
     * </pre>
     *
     * <code>.google.protobuf.StringValue value = 1;</code>
     * @return The value.
     */
    com.google.protobuf.StringValue getValue();
    /**
     * <pre>
     * All classified sign values which are not defined or not fully defined in type may be provided as value.
     *
     * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
     * </pre>
     *
     * <code>.google.protobuf.StringValue value = 1;</code>
     */
    com.google.protobuf.StringValueOrBuilder getValueOrBuilder();

    /**
     * <pre>
     * Confidence of value.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    boolean hasConfidence();
    /**
     * <pre>
     * Confidence of value.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    org.sensoris.types.base.Confidence getConfidence();
    /**
     * <pre>
     * Confidence of value.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder();
  }
  /**
   * <pre>
   * Value and confidence.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence}
   */
  public static final class ValueAndConfidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
      ValueAndConfidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ValueAndConfidence.newBuilder() to construct.
    private ValueAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ValueAndConfidence() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ValueAndConfidence();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValueAndConfidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValueAndConfidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder.class);
    }

    private int bitField0_;
    public static final int VALUE_FIELD_NUMBER = 1;
    private com.google.protobuf.StringValue value_;
    /**
     * <pre>
     * All classified sign values which are not defined or not fully defined in type may be provided as value.
     *
     * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
     * </pre>
     *
     * <code>.google.protobuf.StringValue value = 1;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * All classified sign values which are not defined or not fully defined in type may be provided as value.
     *
     * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
     * </pre>
     *
     * <code>.google.protobuf.StringValue value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public com.google.protobuf.StringValue getValue() {
      return value_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : value_;
    }
    /**
     * <pre>
     * All classified sign values which are not defined or not fully defined in type may be provided as value.
     *
     * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
     * </pre>
     *
     * <code>.google.protobuf.StringValue value = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.StringValueOrBuilder getValueOrBuilder() {
      return value_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : value_;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 2;
    private org.sensoris.types.base.Confidence confidence_;
    /**
     * <pre>
     * Confidence of value.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    @java.lang.Override
    public boolean hasConfidence() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Confidence of value.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    @java.lang.Override
    public org.sensoris.types.base.Confidence getConfidence() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }
    /**
     * <pre>
     * Confidence of value.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    @java.lang.Override
    public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getValue());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getConfidence());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getValue());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConfidence());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence)) {
        return super.equals(obj);
      }
      org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence other = (org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence) obj;

      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (!getValue()
            .equals(other.getValue())) return false;
      }
      if (hasConfidence() != other.hasConfidence()) return false;
      if (hasConfidence()) {
        if (!getConfidence()
            .equals(other.getConfidence())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      if (hasConfidence()) {
        hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getConfidence().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Value and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
        org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValueAndConfidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValueAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder.class);
      }

      // Construct using org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getValueFieldBuilder();
          getConfidenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValueAndConfidence_descriptor;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getDefaultInstanceForType() {
        return org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance();
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence build() {
        org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence buildPartial() {
        org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence result = new org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.value_ = valueBuilder_ == null
              ? value_
              : valueBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.confidence_ = confidenceBuilder_ == null
              ? confidence_
              : confidenceBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence) {
          return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence other) {
        if (other == org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance()) return this;
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        if (other.hasConfidence()) {
          mergeConfidence(other.getConfidence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.StringValue value_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> valueBuilder_;
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       * @return Whether the value field is set.
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       * @return The value.
       */
      public com.google.protobuf.StringValue getValue() {
        if (valueBuilder_ == null) {
          return value_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       */
      public Builder setValue(com.google.protobuf.StringValue value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       */
      public Builder setValue(
          com.google.protobuf.StringValue.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       */
      public Builder mergeValue(com.google.protobuf.StringValue value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            value_ != null &&
            value_ != com.google.protobuf.StringValue.getDefaultInstance()) {
            getValueBuilder().mergeFrom(value);
          } else {
            value_ = value;
          }
        } else {
          valueBuilder_.mergeFrom(value);
        }
        if (value_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       */
      public com.google.protobuf.StringValue.Builder getValueBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       */
      public com.google.protobuf.StringValueOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_ == null ?
              com.google.protobuf.StringValue.getDefaultInstance() : value_;
        }
      }
      /**
       * <pre>
       * All classified sign values which are not defined or not fully defined in type may be provided as value.
       *
       * &#64;example Value 70 for traffic sign type SPEED_LIMIT for a speed limit sign with a limit of 70.
       * </pre>
       *
       * <code>.google.protobuf.StringValue value = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      private org.sensoris.types.base.Confidence confidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> confidenceBuilder_;
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return Whether the confidence field is set.
       */
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return The confidence.
       */
      public org.sensoris.types.base.Confidence getConfidence() {
        if (confidenceBuilder_ == null) {
          return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        } else {
          return confidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          confidence_ = value;
        } else {
          confidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(
          org.sensoris.types.base.Confidence.Builder builderForValue) {
        if (confidenceBuilder_ == null) {
          confidence_ = builderForValue.build();
        } else {
          confidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder mergeConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            confidence_ != null &&
            confidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
            getConfidenceBuilder().mergeFrom(value);
          } else {
            confidence_ = value;
          }
        } else {
          confidenceBuilder_.mergeFrom(value);
        }
        if (confidence_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder clearConfidence() {
        bitField0_ = (bitField0_ & ~0x00000002);
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.Confidence.Builder getConfidenceBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
        if (confidenceBuilder_ != null) {
          return confidenceBuilder_.getMessageOrBuilder();
        } else {
          return confidence_ == null ?
              org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        }
      }
      /**
       * <pre>
       * Confidence of value.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
          getConfidenceFieldBuilder() {
        if (confidenceBuilder_ == null) {
          confidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                  getConfidence(),
                  getParentForChildren(),
                  isClean());
          confidence_ = null;
        }
        return confidenceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
    private static final org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence();
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ValueAndConfidence>
        PARSER = new com.google.protobuf.AbstractParser<ValueAndConfidence>() {
      @java.lang.Override
      public ValueAndConfidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ValueAndConfidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ValueAndConfidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PermanencyAndConfidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type getType();

    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    boolean hasConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    org.sensoris.types.base.Confidence getConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder();
  }
  /**
   * <pre>
   * Permanency and confidence.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence}
   */
  public static final class PermanencyAndConfidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
      PermanencyAndConfidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PermanencyAndConfidence.newBuilder() to construct.
    private PermanencyAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PermanencyAndConfidence() {
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PermanencyAndConfidence();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_PermanencyAndConfidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_PermanencyAndConfidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Builder.class);
    }

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * Protobuf enum {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      UNKNOWN_TYPE(0),
      /**
       * <pre>
       * Traffic sign is static and not variable.
       * </pre>
       *
       * <code>STATIC = 1;</code>
       */
      STATIC(1),
      /**
       * <pre>
       * Any variable traffic sign, e.g. LED sign or flip sign.
       * </pre>
       *
       * <code>VARIABLE = 2;</code>
       */
      VARIABLE(2),
      /**
       * <pre>
       * Traffic sign is a variable LED sign (this should be preferred over VARIABLE if known).
       * </pre>
       *
       * <code>VARIABLE_ELECTRONICALLY = 3;</code>
       */
      VARIABLE_ELECTRONICALLY(3),
      /**
       * <pre>
       * Traffic sign is a variable flip sign (this should be preferred over VARIABLE if known).
       * </pre>
       *
       * <code>VARIABLE_MECHANICALLY = 4;</code>
       */
      VARIABLE_MECHANICALLY(4),
      /**
       * <pre>
       * Traffic sign is variable and deactivated (e.g. LED panel switched off).
       * </pre>
       *
       * <code>VARIABLE_DEACTIVATED = 5;</code>
       */
      VARIABLE_DEACTIVATED(5),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      public static final int UNKNOWN_TYPE_VALUE = 0;
      /**
       * <pre>
       * Traffic sign is static and not variable.
       * </pre>
       *
       * <code>STATIC = 1;</code>
       */
      public static final int STATIC_VALUE = 1;
      /**
       * <pre>
       * Any variable traffic sign, e.g. LED sign or flip sign.
       * </pre>
       *
       * <code>VARIABLE = 2;</code>
       */
      public static final int VARIABLE_VALUE = 2;
      /**
       * <pre>
       * Traffic sign is a variable LED sign (this should be preferred over VARIABLE if known).
       * </pre>
       *
       * <code>VARIABLE_ELECTRONICALLY = 3;</code>
       */
      public static final int VARIABLE_ELECTRONICALLY_VALUE = 3;
      /**
       * <pre>
       * Traffic sign is a variable flip sign (this should be preferred over VARIABLE if known).
       * </pre>
       *
       * <code>VARIABLE_MECHANICALLY = 4;</code>
       */
      public static final int VARIABLE_MECHANICALLY_VALUE = 4;
      /**
       * <pre>
       * Traffic sign is variable and deactivated (e.g. LED panel switched off).
       * </pre>
       *
       * <code>VARIABLE_DEACTIVATED = 5;</code>
       */
      public static final int VARIABLE_DEACTIVATED_VALUE = 5;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_TYPE;
          case 1: return STATIC;
          case 2: return VARIABLE;
          case 3: return VARIABLE_ELECTRONICALLY;
          case 4: return VARIABLE_MECHANICALLY;
          case 5: return VARIABLE_DEACTIVATED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type getType() {
      org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type.forNumber(type_);
      return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type.UNRECOGNIZED : result;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 2;
    private org.sensoris.types.base.Confidence confidence_;
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    @java.lang.Override
    public boolean hasConfidence() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    @java.lang.Override
    public org.sensoris.types.base.Confidence getConfidence() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    @java.lang.Override
    public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getConfidence());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConfidence());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)) {
        return super.equals(obj);
      }
      org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence other = (org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence) obj;

      if (type_ != other.type_) return false;
      if (hasConfidence() != other.hasConfidence()) return false;
      if (hasConfidence()) {
        if (!getConfidence()
            .equals(other.getConfidence())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasConfidence()) {
        hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getConfidence().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Permanency and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
        org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_PermanencyAndConfidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_PermanencyAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Builder.class);
      }

      // Construct using org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getConfidenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_PermanencyAndConfidence_descriptor;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence getDefaultInstanceForType() {
        return org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.getDefaultInstance();
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence build() {
        org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence buildPartial() {
        org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence result = new org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.confidence_ = confidenceBuilder_ == null
              ? confidence_
              : confidenceBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence) {
          return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence other) {
        if (other == org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasConfidence()) {
          mergeConfidence(other.getConfidence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type getType() {
        org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type.forNumber(type_);
        return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private org.sensoris.types.base.Confidence confidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> confidenceBuilder_;
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return Whether the confidence field is set.
       */
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return The confidence.
       */
      public org.sensoris.types.base.Confidence getConfidence() {
        if (confidenceBuilder_ == null) {
          return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        } else {
          return confidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          confidence_ = value;
        } else {
          confidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(
          org.sensoris.types.base.Confidence.Builder builderForValue) {
        if (confidenceBuilder_ == null) {
          confidence_ = builderForValue.build();
        } else {
          confidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder mergeConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            confidence_ != null &&
            confidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
            getConfidenceBuilder().mergeFrom(value);
          } else {
            confidence_ = value;
          }
        } else {
          confidenceBuilder_.mergeFrom(value);
        }
        if (confidence_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder clearConfidence() {
        bitField0_ = (bitField0_ & ~0x00000002);
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.Confidence.Builder getConfidenceBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
        if (confidenceBuilder_ != null) {
          return confidenceBuilder_.getMessageOrBuilder();
        } else {
          return confidence_ == null ?
              org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
          getConfidenceFieldBuilder() {
        if (confidenceBuilder_ == null) {
          confidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                  getConfidence(),
                  getParentForChildren(),
                  isClean());
          confidence_ = null;
        }
        return confidenceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
    private static final org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence();
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PermanencyAndConfidence>
        PARSER = new com.google.protobuf.AbstractParser<PermanencyAndConfidence>() {
      @java.lang.Override
      public PermanencyAndConfidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<PermanencyAndConfidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PermanencyAndConfidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValidationAndConfidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type getType();

    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    boolean hasConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    org.sensoris.types.base.Confidence getConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder();
  }
  /**
   * <pre>
   * Validation and confidence.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence}
   */
  public static final class ValidationAndConfidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
      ValidationAndConfidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ValidationAndConfidence.newBuilder() to construct.
    private ValidationAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ValidationAndConfidence() {
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ValidationAndConfidence();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValidationAndConfidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValidationAndConfidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Builder.class);
    }

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * Protobuf enum {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      UNKNOWN_TYPE(0),
      /**
       * <pre>
       * Traffic sign is observed as valid, i.e. traffic sign is not temporary invalidated due to road construction (e.g. crossed out by red marker).
       * </pre>
       *
       * <code>VALID = 1;</code>
       */
      VALID(1),
      /**
       * <pre>
       * Traffic sign is observed as invalid, i.e. if the sign is temporary invalidated due to a road construction (e.g. crossed out by red marker).
       * </pre>
       *
       * <code>INVALID = 2;</code>
       */
      INVALID(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      public static final int UNKNOWN_TYPE_VALUE = 0;
      /**
       * <pre>
       * Traffic sign is observed as valid, i.e. traffic sign is not temporary invalidated due to road construction (e.g. crossed out by red marker).
       * </pre>
       *
       * <code>VALID = 1;</code>
       */
      public static final int VALID_VALUE = 1;
      /**
       * <pre>
       * Traffic sign is observed as invalid, i.e. if the sign is temporary invalidated due to a road construction (e.g. crossed out by red marker).
       * </pre>
       *
       * <code>INVALID = 2;</code>
       */
      public static final int INVALID_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_TYPE;
          case 1: return VALID;
          case 2: return INVALID;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type getType() {
      org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type.forNumber(type_);
      return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type.UNRECOGNIZED : result;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 2;
    private org.sensoris.types.base.Confidence confidence_;
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    @java.lang.Override
    public boolean hasConfidence() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    @java.lang.Override
    public org.sensoris.types.base.Confidence getConfidence() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    @java.lang.Override
    public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getConfidence());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConfidence());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence)) {
        return super.equals(obj);
      }
      org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence other = (org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence) obj;

      if (type_ != other.type_) return false;
      if (hasConfidence() != other.hasConfidence()) return false;
      if (hasConfidence()) {
        if (!getConfidence()
            .equals(other.getConfidence())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasConfidence()) {
        hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getConfidence().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Validation and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
        org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValidationAndConfidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValidationAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Builder.class);
      }

      // Construct using org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getConfidenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_ValidationAndConfidence_descriptor;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence getDefaultInstanceForType() {
        return org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.getDefaultInstance();
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence build() {
        org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence buildPartial() {
        org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence result = new org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.confidence_ = confidenceBuilder_ == null
              ? confidence_
              : confidenceBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence) {
          return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence other) {
        if (other == org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasConfidence()) {
          mergeConfidence(other.getConfidence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type getType() {
        org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type.forNumber(type_);
        return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private org.sensoris.types.base.Confidence confidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> confidenceBuilder_;
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return Whether the confidence field is set.
       */
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return The confidence.
       */
      public org.sensoris.types.base.Confidence getConfidence() {
        if (confidenceBuilder_ == null) {
          return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        } else {
          return confidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          confidence_ = value;
        } else {
          confidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(
          org.sensoris.types.base.Confidence.Builder builderForValue) {
        if (confidenceBuilder_ == null) {
          confidence_ = builderForValue.build();
        } else {
          confidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder mergeConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            confidence_ != null &&
            confidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
            getConfidenceBuilder().mergeFrom(value);
          } else {
            confidence_ = value;
          }
        } else {
          confidenceBuilder_.mergeFrom(value);
        }
        if (confidence_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder clearConfidence() {
        bitField0_ = (bitField0_ & ~0x00000002);
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.Confidence.Builder getConfidenceBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
        if (confidenceBuilder_ != null) {
          return confidenceBuilder_.getMessageOrBuilder();
        } else {
          return confidence_ == null ?
              org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
          getConfidenceFieldBuilder() {
        if (confidenceBuilder_ == null) {
          confidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                  getConfidence(),
                  getParentForChildren(),
                  isClean());
          confidence_ = null;
        }
        return confidenceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
    private static final org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence();
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ValidationAndConfidence>
        PARSER = new com.google.protobuf.AbstractParser<ValidationAndConfidence>() {
      @java.lang.Override
      public ValidationAndConfidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ValidationAndConfidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ValidationAndConfidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DominantBackgroundColorAndConfidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type getType();

    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    boolean hasConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    org.sensoris.types.base.Confidence getConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder();
  }
  /**
   * <pre>
   * Dominant background color and confidence.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence}
   */
  public static final class DominantBackgroundColorAndConfidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
      DominantBackgroundColorAndConfidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DominantBackgroundColorAndConfidence.newBuilder() to construct.
    private DominantBackgroundColorAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DominantBackgroundColorAndConfidence() {
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DominantBackgroundColorAndConfidence();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_DominantBackgroundColorAndConfidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_DominantBackgroundColorAndConfidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Builder.class);
    }

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * Protobuf enum {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      UNKNOWN_TYPE(0),
      /**
       * <pre>
       * Other, i.e. none of the listed enum values.
       * </pre>
       *
       * <code>OTHER = 1;</code>
       */
      OTHER(1),
      /**
       * <pre>
       * White.
       * </pre>
       *
       * <code>WHITE = 2;</code>
       */
      WHITE(2),
      /**
       * <pre>
       * Red.
       * </pre>
       *
       * <code>RED = 3;</code>
       */
      RED(3),
      /**
       * <pre>
       * Green.
       * </pre>
       *
       * <code>GREEN = 4;</code>
       */
      GREEN(4),
      /**
       * <pre>
       * Blue.
       * </pre>
       *
       * <code>BLUE = 5;</code>
       */
      BLUE(5),
      /**
       * <pre>
       * Yellow.
       * </pre>
       *
       * <code>YELLOW = 6;</code>
       */
      YELLOW(6),
      /**
       * <pre>
       * Black.
       * </pre>
       *
       * <code>BLACK = 7;</code>
       */
      BLACK(7),
      /**
       * <pre>
       * Brown.
       * </pre>
       *
       * <code>BROWN = 8;</code>
       */
      BROWN(8),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      public static final int UNKNOWN_TYPE_VALUE = 0;
      /**
       * <pre>
       * Other, i.e. none of the listed enum values.
       * </pre>
       *
       * <code>OTHER = 1;</code>
       */
      public static final int OTHER_VALUE = 1;
      /**
       * <pre>
       * White.
       * </pre>
       *
       * <code>WHITE = 2;</code>
       */
      public static final int WHITE_VALUE = 2;
      /**
       * <pre>
       * Red.
       * </pre>
       *
       * <code>RED = 3;</code>
       */
      public static final int RED_VALUE = 3;
      /**
       * <pre>
       * Green.
       * </pre>
       *
       * <code>GREEN = 4;</code>
       */
      public static final int GREEN_VALUE = 4;
      /**
       * <pre>
       * Blue.
       * </pre>
       *
       * <code>BLUE = 5;</code>
       */
      public static final int BLUE_VALUE = 5;
      /**
       * <pre>
       * Yellow.
       * </pre>
       *
       * <code>YELLOW = 6;</code>
       */
      public static final int YELLOW_VALUE = 6;
      /**
       * <pre>
       * Black.
       * </pre>
       *
       * <code>BLACK = 7;</code>
       */
      public static final int BLACK_VALUE = 7;
      /**
       * <pre>
       * Brown.
       * </pre>
       *
       * <code>BROWN = 8;</code>
       */
      public static final int BROWN_VALUE = 8;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_TYPE;
          case 1: return OTHER;
          case 2: return WHITE;
          case 3: return RED;
          case 4: return GREEN;
          case 5: return BLUE;
          case 6: return YELLOW;
          case 7: return BLACK;
          case 8: return BROWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type getType() {
      org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type.forNumber(type_);
      return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type.UNRECOGNIZED : result;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 2;
    private org.sensoris.types.base.Confidence confidence_;
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return Whether the confidence field is set.
     */
    @java.lang.Override
    public boolean hasConfidence() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     * @return The confidence.
     */
    @java.lang.Override
    public org.sensoris.types.base.Confidence getConfidence() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    @java.lang.Override
    public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getConfidence());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConfidence());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)) {
        return super.equals(obj);
      }
      org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence other = (org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence) obj;

      if (type_ != other.type_) return false;
      if (hasConfidence() != other.hasConfidence()) return false;
      if (hasConfidence()) {
        if (!getConfidence()
            .equals(other.getConfidence())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasConfidence()) {
        hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getConfidence().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Dominant background color and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
        org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_DominantBackgroundColorAndConfidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_DominantBackgroundColorAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Builder.class);
      }

      // Construct using org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getConfidenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_DominantBackgroundColorAndConfidence_descriptor;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence getDefaultInstanceForType() {
        return org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.getDefaultInstance();
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence build() {
        org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence buildPartial() {
        org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence result = new org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.confidence_ = confidenceBuilder_ == null
              ? confidence_
              : confidenceBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence) {
          return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence other) {
        if (other == org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasConfidence()) {
          mergeConfidence(other.getConfidence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type getType() {
        org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type.forNumber(type_);
        return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private org.sensoris.types.base.Confidence confidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> confidenceBuilder_;
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return Whether the confidence field is set.
       */
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return The confidence.
       */
      public org.sensoris.types.base.Confidence getConfidence() {
        if (confidenceBuilder_ == null) {
          return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        } else {
          return confidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          confidence_ = value;
        } else {
          confidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(
          org.sensoris.types.base.Confidence.Builder builderForValue) {
        if (confidenceBuilder_ == null) {
          confidence_ = builderForValue.build();
        } else {
          confidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder mergeConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            confidence_ != null &&
            confidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
            getConfidenceBuilder().mergeFrom(value);
          } else {
            confidence_ = value;
          }
        } else {
          confidenceBuilder_.mergeFrom(value);
        }
        if (confidence_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder clearConfidence() {
        bitField0_ = (bitField0_ & ~0x00000002);
        confidence_ = null;
        if (confidenceBuilder_ != null) {
          confidenceBuilder_.dispose();
          confidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.Confidence.Builder getConfidenceBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
        if (confidenceBuilder_ != null) {
          return confidenceBuilder_.getMessageOrBuilder();
        } else {
          return confidence_ == null ?
              org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
          getConfidenceFieldBuilder() {
        if (confidenceBuilder_ == null) {
          confidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                  getConfidence(),
                  getParentForChildren(),
                  isClean());
          confidence_ = null;
        }
        return confidenceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
    private static final org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence();
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DominantBackgroundColorAndConfidence>
        PARSER = new com.google.protobuf.AbstractParser<DominantBackgroundColorAndConfidence>() {
      @java.lang.Override
      public DominantBackgroundColorAndConfidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<DominantBackgroundColorAndConfidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DominantBackgroundColorAndConfidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SupplementarySignAndConfidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Confidence that a supplementary sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
     * @return Whether the existenceConfidence field is set.
     */
    boolean hasExistenceConfidence();
    /**
     * <pre>
     * Confidence that a supplementary sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
     * @return The existenceConfidence.
     */
    org.sensoris.types.base.Confidence getExistenceConfidence();
    /**
     * <pre>
     * Confidence that a supplementary sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
     */
    org.sensoris.types.base.ConfidenceOrBuilder getExistenceConfidenceOrBuilder();

    /**
     * <pre>
     * Event detection status of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
     * @return Whether the detectionStatus field is set.
     */
    boolean hasDetectionStatus();
    /**
     * <pre>
     * Event detection status of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
     * @return The detectionStatus.
     */
    org.sensoris.types.base.EventDetectionStatus getDetectionStatus();
    /**
     * <pre>
     * Event detection status of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
     */
    org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder();

    /**
     * <pre>
     * Type and confidence of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
     * @return Whether the typeAndConfidence field is set.
     */
    boolean hasTypeAndConfidence();
    /**
     * <pre>
     * Type and confidence of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
     * @return The typeAndConfidence.
     */
    org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence getTypeAndConfidence();
    /**
     * <pre>
     * Type and confidence of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
     */
    org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder();

    /**
     * <pre>
     * Value of supplementary sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
     * @return Whether the valueAndConfidence field is set.
     */
    boolean hasValueAndConfidence();
    /**
     * <pre>
     * Value of supplementary sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
     * @return The valueAndConfidence.
     */
    org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getValueAndConfidence();
    /**
     * <pre>
     * Value of supplementary sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
     */
    org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder getValueAndConfidenceOrBuilder();
  }
  /**
   * <pre>
   * Supplementary sign and confidence.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence}
   */
  public static final class SupplementarySignAndConfidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
      SupplementarySignAndConfidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SupplementarySignAndConfidence.newBuilder() to construct.
    private SupplementarySignAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SupplementarySignAndConfidence() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SupplementarySignAndConfidence();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder.class);
    }

    public interface TypeAndConfidenceOrBuilder extends
        // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      int getTypeValue();
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
       * @return The type.
       */
      org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type getType();

      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return Whether the confidence field is set.
       */
      boolean hasConfidence();
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return The confidence.
       */
      org.sensoris.types.base.Confidence getConfidence();
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder();

      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       * @return Whether the otherText field is set.
       */
      boolean hasOtherText();
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       * @return The otherText.
       */
      com.google.protobuf.StringValue getOtherText();
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      com.google.protobuf.StringValueOrBuilder getOtherTextOrBuilder();
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence}
     */
    public static final class TypeAndConfidence extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
        TypeAndConfidenceOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TypeAndConfidence.newBuilder() to construct.
      private TypeAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TypeAndConfidence() {
        type_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TypeAndConfidence();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Builder.class);
      }

      /**
       * <pre>
       * Type of the supplementary traffic sign face.
       * </pre>
       *
       * Protobuf enum {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type}
       */
      public enum Type
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>UNKNOWN_TYPE = 0;</code>
         */
        UNKNOWN_TYPE(0),
        /**
         * <pre>
         * Other, i.e. none of the listed enum values. However, if the type is known by the sensor, then it may be provided as string in the field other_text.
         * </pre>
         *
         * <code>SUP_OTHER_AS_TEXT = 1;</code>
         */
        SUP_OTHER_AS_TEXT(1),
        /**
         * <pre>
         * &#64;img SUP_WET_de1.png
         * </pre>
         *
         * <code>SUP_WET = 2;</code>
         */
        SUP_WET(2),
        /**
         * <pre>
         * &#64;img SUP_RAIN_de1.png
         * </pre>
         *
         * <code>SUP_RAIN = 3;</code>
         */
        SUP_RAIN(3),
        /**
         * <pre>
         * &#64;img SUP_SNOW_de1.png
         * </pre>
         *
         * <code>SUP_SNOW = 4;</code>
         */
        SUP_SNOW(4),
        /**
         * <code>SUP_SNOW_OR_RAIN = 5;</code>
         */
        SUP_SNOW_OR_RAIN(5),
        /**
         * <pre>
         * &#64;img SUP_FOG_de1.png
         * </pre>
         *
         * <code>SUP_FOG = 6;</code>
         */
        SUP_FOG(6),
        /**
         * <pre>
         * The specific time may be provided in the field value_and_confidence.
         * &#64;img SUP_TIME_de1.png
         * </pre>
         *
         * <code>SUP_TIME = 7;</code>
         */
        SUP_TIME(7),
        /**
         * <pre>
         * The specific time may be provided in the field value_and_confidence. The format should be "Mo-Fr 16-18 h" or if available exact text format of sign.
         * &#64;img SUP_DAY_AND_TIME_de1.png
         * </pre>
         *
         * <code>SUP_DAY_AND_TIME = 8;</code>
         */
        SUP_DAY_AND_TIME(8),
        /**
         * <pre>
         * The specific time may be provided in the field value_and_confidence.
         * </pre>
         *
         * <code>SUP_NIGHT = 9;</code>
         */
        SUP_NIGHT(9),
        /**
         * <code>SUP_SEASON = 10;</code>
         */
        SUP_SEASON(10),
        /**
         * <code>SUP_WORKDAYS = 11;</code>
         */
        SUP_WORKDAYS(11),
        /**
         * <pre>
         * The specific time may be provided in the field value_and_confidence.
         * </pre>
         *
         * <code>SUP_WORKDAYS_AND_TIME = 12;</code>
         */
        SUP_WORKDAYS_AND_TIME(12),
        /**
         * <pre>
         * &#64;img SUP_SCHOOL_de1.png
         * </pre>
         *
         * <code>SUP_SCHOOL = 13;</code>
         */
        SUP_SCHOOL(13),
        /**
         * <code>SUP_RAMP = 14;</code>
         */
        SUP_RAMP(14),
        /**
         * <pre>
         * &#64;img SUP_TRUCK_de1.png
         * </pre>
         *
         * <code>SUP_TRUCK = 15;</code>
         */
        SUP_TRUCK(15),
        /**
         * <pre>
         * &#64;img SUP_TRUCK_WITH_TRAILER_de1.png
         * </pre>
         *
         * <code>SUP_TRUCK_WITH_TRAILER = 16;</code>
         */
        SUP_TRUCK_WITH_TRAILER(16),
        /**
         * <pre>
         * &#64;img SUP_PASSENGER_CAR_de1.png
         * </pre>
         *
         * <code>SUP_PASSENGER_CAR = 17;</code>
         */
        SUP_PASSENGER_CAR(17),
        /**
         * <pre>
         * &#64;img SUP_PASSENGER_CAR_WITH_TAILER_de1.png
         * </pre>
         *
         * <code>SUP_PASSENGER_CAR_WITH_TAILER = 18;</code>
         */
        SUP_PASSENGER_CAR_WITH_TAILER(18),
        /**
         * <pre>
         * &#64;img SUP_TRACTOR_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_TRACTOR_EXCEPT = 19;</code>
         */
        SUP_TRACTOR_EXCEPT(19),
        /**
         * <pre>
         * &#64;img SUP_BUS_de1.png
         * </pre>
         *
         * <code>SUP_BUS = 20;</code>
         */
        SUP_BUS(20),
        /**
         * <code>SUP_TRUCKS_AND_BUS = 21;</code>
         */
        SUP_TRUCKS_AND_BUS(21),
        /**
         * <code>SUP_CARS_TRUCKS_BUS = 22;</code>
         */
        SUP_CARS_TRUCKS_BUS(22),
        /**
         * <pre>
         * &#64;img SUP_TAXI_de1.png
         * </pre>
         *
         * <code>SUP_TAXI = 23;</code>
         */
        SUP_TAXI(23),
        /**
         * <pre>
         * &#64;img SUP_TANK_de1.png
         * </pre>
         *
         * <code>SUP_TANK = 24;</code>
         */
        SUP_TANK(24),
        /**
         * <pre>
         * &#64;img SUP_ROADSIDE_de1.png
         * </pre>
         *
         * <code>SUP_ROADSIDE = 25;</code>
         */
        SUP_ROADSIDE(25),
        /**
         * <pre>
         * The weight limitation may be provided in the field value_and_confidence. The format is to be provided in "xx.x t" defining the weight in xx.x tons or "xxxxxx.x lbs" defining the weight in x pounds.
         * &#64;img SUP_WEIGHT_de1.png
         * </pre>
         *
         * <code>SUP_WEIGHT = 26;</code>
         */
        SUP_WEIGHT(26),
        /**
         * <pre>
         * The start of the validity may be provided in the field value_and_confidence. The format should be "xxx m" or if available exact text format of sign.
         * &#64;img SUP_STARTING_IN_de1.png
         * </pre>
         *
         * <code>SUP_STARTING_IN = 27;</code>
         */
        SUP_STARTING_IN(27),
        /**
         * <pre>
         * The end of the validity may be provided in the field value_and_confidence. The format should be "xxx m" or if available exact text format of sign.
         * &#64;img SUP_VALID_FOR_de1.png
         * </pre>
         *
         * <code>SUP_VALID_FOR = 28;</code>
         */
        SUP_VALID_FOR(28),
        /**
         * <pre>
         * The sign is valid for turning lane(s) to the right side.
         * &#64;img SUP_IN_RIGHT_DIRECTION_de1.png
         * </pre>
         *
         * <code>SUP_IN_RIGHT_DIRECTION = 29;</code>
         */
        SUP_IN_RIGHT_DIRECTION(29),
        /**
         * <pre>
         * The sign is valid for turning lane(s) to the left side.
         * &#64;img SUP_IN_LEFT_DIRECTION_de1.png
         * </pre>
         *
         * <code>SUP_IN_LEFT_DIRECTION = 30;</code>
         */
        SUP_IN_LEFT_DIRECTION(30),
        /**
         * <code>SUP_ZONE = 31;</code>
         */
        SUP_ZONE(31),
        /**
         * <code>SUP_ZONE_START = 32;</code>
         */
        SUP_ZONE_START(32),
        /**
         * <code>SUP_ZONE_END = 33;</code>
         */
        SUP_ZONE_END(33),
        /**
         * <pre>
         * The validity of the traffic signs begins at the sign (no further distance information required).
         * </pre>
         *
         * <code>SUP_BEGIN_OF_VALIDITY = 34;</code>
         */
        SUP_BEGIN_OF_VALIDITY(34),
        /**
         * <pre>
         * The validity of the traffic signs ends at the sign (no further distance information required).
         * </pre>
         *
         * <code>SUP_END_OF_VALIDITY = 35;</code>
         */
        SUP_END_OF_VALIDITY(35),
        /**
         * <pre>
         * &#64;img SUP_FROG_de1.png
         * </pre>
         *
         * <code>SUP_FROG = 36;</code>
         */
        SUP_FROG(36),
        /**
         * <pre>
         * &#64;img SUP_ALL_WAY_de1.png
         * </pre>
         *
         * <code>SUP_ALL_WAY = 37;</code>
         */
        SUP_ALL_WAY(37),
        /**
         * <pre>
         * &#64;img SUP_BIKE_de1.png
         * </pre>
         *
         * <code>SUP_BIKE = 38;</code>
         */
        SUP_BIKE(38),
        /**
         * <pre>
         * &#64;img SUP_BIKE_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_BIKE_EXCEPT = 39;</code>
         */
        SUP_BIKE_EXCEPT(39),
        /**
         * <pre>
         * &#64;img SUP_BUS_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_BUS_EXCEPT = 40;</code>
         */
        SUP_BUS_EXCEPT(40),
        /**
         * <pre>
         * &#64;img SUP_CAMPER_de1.png
         * </pre>
         *
         * <code>SUP_CAMPER = 41;</code>
         */
        SUP_CAMPER(41),
        /**
         * <pre>
         * &#64;img SUP_CARAVAN_de1.png
         * </pre>
         *
         * <code>SUP_CARAVAN = 42;</code>
         */
        SUP_CARAVAN(42),
        /**
         * <pre>
         * &#64;img SUP_CONSTRUCTION_GATEWAY_de1.png
         * </pre>
         *
         * <code>SUP_CONSTRUCTION_GATEWAY = 43;</code>
         */
        SUP_CONSTRUCTION_GATEWAY(43),
        /**
         * <pre>
         * &#64;img SUP_CROSS_WAY_de1.png
         * </pre>
         *
         * <code>SUP_CROSS_WAY = 44;</code>
         */
        SUP_CROSS_WAY(44),
        /**
         * <pre>
         * &#64;img SUP_DELIVERY_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_DELIVERY_EXCEPT = 45;</code>
         */
        SUP_DELIVERY_EXCEPT(45),
        /**
         * <pre>
         * &#64;img SUP_ELECTRONIC_CAR_de1.png
         * </pre>
         *
         * <code>SUP_ELECTRONIC_CAR = 46;</code>
         */
        SUP_ELECTRONIC_CAR(46),
        /**
         * <pre>
         * &#64;img SUP_GATEWAY_de1.png
         * </pre>
         *
         * <code>SUP_GATEWAY = 47;</code>
         */
        SUP_GATEWAY(47),
        /**
         * <pre>
         * &#64;img SUP_GIVE_WAY_LEFT_de1.png
         * </pre>
         *
         * <code>SUP_GIVE_WAY_LEFT = 48;</code>
         */
        SUP_GIVE_WAY_LEFT(48),
        /**
         * <pre>
         * &#64;img SUP_GIVE_WAY_RIGHT_de1.png
         * </pre>
         *
         * <code>SUP_GIVE_WAY_RIGHT = 49;</code>
         */
        SUP_GIVE_WAY_RIGHT(49),
        /**
         * <pre>
         * &#64;img SUP_GRAVEL_de1.png
         * </pre>
         *
         * <code>SUP_GRAVEL = 50;</code>
         */
        SUP_GRAVEL(50),
        /**
         * <pre>
         * &#64;img SUP_HAZMAT_de1.png
         * </pre>
         *
         * <code>SUP_HAZMAT = 51;</code>
         */
        SUP_HAZMAT(51),
        /**
         * <pre>
         * &#64;img SUP_HAZ_WATER_de1.png
         * </pre>
         *
         * <code>SUP_HAZ_WATER = 52;</code>
         */
        SUP_HAZ_WATER(52),
        /**
         * <pre>
         * &#64;img SUP_KIDS_de1.png
         * </pre>
         *
         * <code>SUP_KIDS = 53;</code>
         */
        SUP_KIDS(53),
        /**
         * <pre>
         * &#64;img SUP_LOCAL_EXCEP_de1.png
         * </pre>
         *
         * <code>SUP_LOCAL_EXCEP = 54;</code>
         */
        SUP_LOCAL_EXCEP(54),
        /**
         * <pre>
         * &#64;img SUP_LOW_TREE_de1.png
         * </pre>
         *
         * <code>SUP_LOW_TREE = 55;</code>
         */
        SUP_LOW_TREE(55),
        /**
         * <pre>
         * &#64;img SUP_MOTORCYCLE_de1.png
         * </pre>
         *
         * <code>SUP_MOTORCYCLE = 56;</code>
         */
        SUP_MOTORCYCLE(56),
        /**
         * <pre>
         * &#64;img SUP_MOTORCYCLE_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_MOTORCYCLE_EXCEPT = 57;</code>
         */
        SUP_MOTORCYCLE_EXCEPT(57),
        /**
         * <pre>
         * &#64;img SUP_NEW_ROAD_BED_de1.png
         * </pre>
         *
         * <code>SUP_NEW_ROAD_BED = 58;</code>
         */
        SUP_NEW_ROAD_BED(58),
        /**
         * <pre>
         * &#64;img SUP_NO_STOP_SHOULDER_de1.png
         * </pre>
         *
         * <code>SUP_NO_STOP_SHOULDER = 59;</code>
         */
        SUP_NO_STOP_SHOULDER(59),
        /**
         * <pre>
         * &#64;img SUP_OIL_TRAIL_de1.png
         * </pre>
         *
         * <code>SUP_OIL_TRAIL = 60;</code>
         */
        SUP_OIL_TRAIL(60),
        /**
         * <pre>
         * &#64;img SUP_PASSENGER_CAR_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_PASSENGER_CAR_EXCEPT = 61;</code>
         */
        SUP_PASSENGER_CAR_EXCEPT(61),
        /**
         * <pre>
         * &#64;img SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT = 62;</code>
         */
        SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT(62),
        /**
         * <pre>
         * &#64;img SUP_PEDESTRIAN_de1.png
         * </pre>
         *
         * <code>SUP_PEDESTRIAN = 63;</code>
         */
        SUP_PEDESTRIAN(63),
        /**
         * <pre>
         * &#64;img SUP_PRIORITY_TURN_LEFT_de1.png
         * </pre>
         *
         * <code>SUP_PRIORITY_TURN_LEFT = 64;</code>
         */
        SUP_PRIORITY_TURN_LEFT(64),
        /**
         * <pre>
         * &#64;img SUP_PRIORITY_TURN_RIGHT_de1.png
         * </pre>
         *
         * <code>SUP_PRIORITY_TURN_RIGHT = 65;</code>
         */
        SUP_PRIORITY_TURN_RIGHT(65),
        /**
         * <pre>
         * &#64;img SUP_ROAD_DAMAGE_de1.png
         * </pre>
         *
         * <code>SUP_ROAD_DAMAGE = 66;</code>
         */
        SUP_ROAD_DAMAGE(66),
        /**
         * <pre>
         * &#64;img SUP_RUTS_de1.png
         * </pre>
         *
         * <code>SUP_RUTS = 67;</code>
         */
        SUP_RUTS(67),
        /**
         * <pre>
         * &#64;img SUP_TRACTOR_de1.png
         * </pre>
         *
         * <code>SUP_TRACTOR = 68;</code>
         */
        SUP_TRACTOR(68),
        /**
         * <pre>
         * &#64;img SUP_TRACTOR_MAY_BE_OVERTAKEN_de1.png
         * </pre>
         *
         * <code>SUP_TRACTOR_MAY_BE_OVERTAKEN = 69;</code>
         */
        SUP_TRACTOR_MAY_BE_OVERTAKEN(69),
        /**
         * <pre>
         * &#64;img SUP_TRAFFIC_JAM_de1.png
         * </pre>
         *
         * <code>SUP_TRAFFIC_JAM = 70;</code>
         */
        SUP_TRAFFIC_JAM(70),
        /**
         * <pre>
         * &#64;img SUP_TRAIN_de1.png
         * </pre>
         *
         * <code>SUP_TRAIN = 71;</code>
         */
        SUP_TRAIN(71),
        /**
         * <pre>
         * &#64;img SUP_TRAM_de1.png
         * </pre>
         *
         * <code>SUP_TRAM = 72;</code>
         */
        SUP_TRAM(72),
        /**
         * <pre>
         * &#64;img SUP_TRUCK_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_TRUCK_EXCEPT = 73;</code>
         */
        SUP_TRUCK_EXCEPT(73),
        /**
         * <pre>
         * &#64;img SUP_TRUCK_WITH_TRAILER_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_TRUCK_WITH_TRAILER_EXCEPT = 74;</code>
         */
        SUP_TRUCK_WITH_TRAILER_EXCEPT(74),
        /**
         * <pre>
         * &#64;img SUP_GET_IN_PROPER_LANE_de1.png
         * </pre>
         *
         * <code>SUP_GET_IN_PROPER_LANE = 75;</code>
         */
        SUP_GET_IN_PROPER_LANE(75),
        /**
         * <pre>
         * &#64;img SUP_ROADSIDE_TRUCK_de1.png
         * </pre>
         *
         * <code>SUP_ROADSIDE_TRUCK = 76;</code>
         */
        SUP_ROADSIDE_TRUCK(76),
        /**
         * <pre>
         * &#64;img SUP_RAPPEL_fr1.jpg
         * </pre>
         *
         * <code>SUP_RAPPEL = 77;</code>
         */
        SUP_RAPPEL(77),
        /**
         * <pre>
         * &#64;img SUP_RADAR_ENFORCED_de1.jpg
         * </pre>
         *
         * <code>SUP_RADAR_ENFORCED = 78;</code>
         */
        SUP_RADAR_ENFORCED(78),
        /**
         * <pre>
         * The distance may be provided in the field value_and_confidence. The format should be "xxx m" or if available exact text format of sign.
         * &#64;img SUP_STOP_IN_DISTANCE_de1.png
         * </pre>
         *
         * <code>SUP_STOP_IN_DISTANCE = 79;</code>
         */
        SUP_STOP_IN_DISTANCE(79),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>UNKNOWN_TYPE = 0;</code>
         */
        public static final int UNKNOWN_TYPE_VALUE = 0;
        /**
         * <pre>
         * Other, i.e. none of the listed enum values. However, if the type is known by the sensor, then it may be provided as string in the field other_text.
         * </pre>
         *
         * <code>SUP_OTHER_AS_TEXT = 1;</code>
         */
        public static final int SUP_OTHER_AS_TEXT_VALUE = 1;
        /**
         * <pre>
         * &#64;img SUP_WET_de1.png
         * </pre>
         *
         * <code>SUP_WET = 2;</code>
         */
        public static final int SUP_WET_VALUE = 2;
        /**
         * <pre>
         * &#64;img SUP_RAIN_de1.png
         * </pre>
         *
         * <code>SUP_RAIN = 3;</code>
         */
        public static final int SUP_RAIN_VALUE = 3;
        /**
         * <pre>
         * &#64;img SUP_SNOW_de1.png
         * </pre>
         *
         * <code>SUP_SNOW = 4;</code>
         */
        public static final int SUP_SNOW_VALUE = 4;
        /**
         * <code>SUP_SNOW_OR_RAIN = 5;</code>
         */
        public static final int SUP_SNOW_OR_RAIN_VALUE = 5;
        /**
         * <pre>
         * &#64;img SUP_FOG_de1.png
         * </pre>
         *
         * <code>SUP_FOG = 6;</code>
         */
        public static final int SUP_FOG_VALUE = 6;
        /**
         * <pre>
         * The specific time may be provided in the field value_and_confidence.
         * &#64;img SUP_TIME_de1.png
         * </pre>
         *
         * <code>SUP_TIME = 7;</code>
         */
        public static final int SUP_TIME_VALUE = 7;
        /**
         * <pre>
         * The specific time may be provided in the field value_and_confidence. The format should be "Mo-Fr 16-18 h" or if available exact text format of sign.
         * &#64;img SUP_DAY_AND_TIME_de1.png
         * </pre>
         *
         * <code>SUP_DAY_AND_TIME = 8;</code>
         */
        public static final int SUP_DAY_AND_TIME_VALUE = 8;
        /**
         * <pre>
         * The specific time may be provided in the field value_and_confidence.
         * </pre>
         *
         * <code>SUP_NIGHT = 9;</code>
         */
        public static final int SUP_NIGHT_VALUE = 9;
        /**
         * <code>SUP_SEASON = 10;</code>
         */
        public static final int SUP_SEASON_VALUE = 10;
        /**
         * <code>SUP_WORKDAYS = 11;</code>
         */
        public static final int SUP_WORKDAYS_VALUE = 11;
        /**
         * <pre>
         * The specific time may be provided in the field value_and_confidence.
         * </pre>
         *
         * <code>SUP_WORKDAYS_AND_TIME = 12;</code>
         */
        public static final int SUP_WORKDAYS_AND_TIME_VALUE = 12;
        /**
         * <pre>
         * &#64;img SUP_SCHOOL_de1.png
         * </pre>
         *
         * <code>SUP_SCHOOL = 13;</code>
         */
        public static final int SUP_SCHOOL_VALUE = 13;
        /**
         * <code>SUP_RAMP = 14;</code>
         */
        public static final int SUP_RAMP_VALUE = 14;
        /**
         * <pre>
         * &#64;img SUP_TRUCK_de1.png
         * </pre>
         *
         * <code>SUP_TRUCK = 15;</code>
         */
        public static final int SUP_TRUCK_VALUE = 15;
        /**
         * <pre>
         * &#64;img SUP_TRUCK_WITH_TRAILER_de1.png
         * </pre>
         *
         * <code>SUP_TRUCK_WITH_TRAILER = 16;</code>
         */
        public static final int SUP_TRUCK_WITH_TRAILER_VALUE = 16;
        /**
         * <pre>
         * &#64;img SUP_PASSENGER_CAR_de1.png
         * </pre>
         *
         * <code>SUP_PASSENGER_CAR = 17;</code>
         */
        public static final int SUP_PASSENGER_CAR_VALUE = 17;
        /**
         * <pre>
         * &#64;img SUP_PASSENGER_CAR_WITH_TAILER_de1.png
         * </pre>
         *
         * <code>SUP_PASSENGER_CAR_WITH_TAILER = 18;</code>
         */
        public static final int SUP_PASSENGER_CAR_WITH_TAILER_VALUE = 18;
        /**
         * <pre>
         * &#64;img SUP_TRACTOR_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_TRACTOR_EXCEPT = 19;</code>
         */
        public static final int SUP_TRACTOR_EXCEPT_VALUE = 19;
        /**
         * <pre>
         * &#64;img SUP_BUS_de1.png
         * </pre>
         *
         * <code>SUP_BUS = 20;</code>
         */
        public static final int SUP_BUS_VALUE = 20;
        /**
         * <code>SUP_TRUCKS_AND_BUS = 21;</code>
         */
        public static final int SUP_TRUCKS_AND_BUS_VALUE = 21;
        /**
         * <code>SUP_CARS_TRUCKS_BUS = 22;</code>
         */
        public static final int SUP_CARS_TRUCKS_BUS_VALUE = 22;
        /**
         * <pre>
         * &#64;img SUP_TAXI_de1.png
         * </pre>
         *
         * <code>SUP_TAXI = 23;</code>
         */
        public static final int SUP_TAXI_VALUE = 23;
        /**
         * <pre>
         * &#64;img SUP_TANK_de1.png
         * </pre>
         *
         * <code>SUP_TANK = 24;</code>
         */
        public static final int SUP_TANK_VALUE = 24;
        /**
         * <pre>
         * &#64;img SUP_ROADSIDE_de1.png
         * </pre>
         *
         * <code>SUP_ROADSIDE = 25;</code>
         */
        public static final int SUP_ROADSIDE_VALUE = 25;
        /**
         * <pre>
         * The weight limitation may be provided in the field value_and_confidence. The format is to be provided in "xx.x t" defining the weight in xx.x tons or "xxxxxx.x lbs" defining the weight in x pounds.
         * &#64;img SUP_WEIGHT_de1.png
         * </pre>
         *
         * <code>SUP_WEIGHT = 26;</code>
         */
        public static final int SUP_WEIGHT_VALUE = 26;
        /**
         * <pre>
         * The start of the validity may be provided in the field value_and_confidence. The format should be "xxx m" or if available exact text format of sign.
         * &#64;img SUP_STARTING_IN_de1.png
         * </pre>
         *
         * <code>SUP_STARTING_IN = 27;</code>
         */
        public static final int SUP_STARTING_IN_VALUE = 27;
        /**
         * <pre>
         * The end of the validity may be provided in the field value_and_confidence. The format should be "xxx m" or if available exact text format of sign.
         * &#64;img SUP_VALID_FOR_de1.png
         * </pre>
         *
         * <code>SUP_VALID_FOR = 28;</code>
         */
        public static final int SUP_VALID_FOR_VALUE = 28;
        /**
         * <pre>
         * The sign is valid for turning lane(s) to the right side.
         * &#64;img SUP_IN_RIGHT_DIRECTION_de1.png
         * </pre>
         *
         * <code>SUP_IN_RIGHT_DIRECTION = 29;</code>
         */
        public static final int SUP_IN_RIGHT_DIRECTION_VALUE = 29;
        /**
         * <pre>
         * The sign is valid for turning lane(s) to the left side.
         * &#64;img SUP_IN_LEFT_DIRECTION_de1.png
         * </pre>
         *
         * <code>SUP_IN_LEFT_DIRECTION = 30;</code>
         */
        public static final int SUP_IN_LEFT_DIRECTION_VALUE = 30;
        /**
         * <code>SUP_ZONE = 31;</code>
         */
        public static final int SUP_ZONE_VALUE = 31;
        /**
         * <code>SUP_ZONE_START = 32;</code>
         */
        public static final int SUP_ZONE_START_VALUE = 32;
        /**
         * <code>SUP_ZONE_END = 33;</code>
         */
        public static final int SUP_ZONE_END_VALUE = 33;
        /**
         * <pre>
         * The validity of the traffic signs begins at the sign (no further distance information required).
         * </pre>
         *
         * <code>SUP_BEGIN_OF_VALIDITY = 34;</code>
         */
        public static final int SUP_BEGIN_OF_VALIDITY_VALUE = 34;
        /**
         * <pre>
         * The validity of the traffic signs ends at the sign (no further distance information required).
         * </pre>
         *
         * <code>SUP_END_OF_VALIDITY = 35;</code>
         */
        public static final int SUP_END_OF_VALIDITY_VALUE = 35;
        /**
         * <pre>
         * &#64;img SUP_FROG_de1.png
         * </pre>
         *
         * <code>SUP_FROG = 36;</code>
         */
        public static final int SUP_FROG_VALUE = 36;
        /**
         * <pre>
         * &#64;img SUP_ALL_WAY_de1.png
         * </pre>
         *
         * <code>SUP_ALL_WAY = 37;</code>
         */
        public static final int SUP_ALL_WAY_VALUE = 37;
        /**
         * <pre>
         * &#64;img SUP_BIKE_de1.png
         * </pre>
         *
         * <code>SUP_BIKE = 38;</code>
         */
        public static final int SUP_BIKE_VALUE = 38;
        /**
         * <pre>
         * &#64;img SUP_BIKE_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_BIKE_EXCEPT = 39;</code>
         */
        public static final int SUP_BIKE_EXCEPT_VALUE = 39;
        /**
         * <pre>
         * &#64;img SUP_BUS_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_BUS_EXCEPT = 40;</code>
         */
        public static final int SUP_BUS_EXCEPT_VALUE = 40;
        /**
         * <pre>
         * &#64;img SUP_CAMPER_de1.png
         * </pre>
         *
         * <code>SUP_CAMPER = 41;</code>
         */
        public static final int SUP_CAMPER_VALUE = 41;
        /**
         * <pre>
         * &#64;img SUP_CARAVAN_de1.png
         * </pre>
         *
         * <code>SUP_CARAVAN = 42;</code>
         */
        public static final int SUP_CARAVAN_VALUE = 42;
        /**
         * <pre>
         * &#64;img SUP_CONSTRUCTION_GATEWAY_de1.png
         * </pre>
         *
         * <code>SUP_CONSTRUCTION_GATEWAY = 43;</code>
         */
        public static final int SUP_CONSTRUCTION_GATEWAY_VALUE = 43;
        /**
         * <pre>
         * &#64;img SUP_CROSS_WAY_de1.png
         * </pre>
         *
         * <code>SUP_CROSS_WAY = 44;</code>
         */
        public static final int SUP_CROSS_WAY_VALUE = 44;
        /**
         * <pre>
         * &#64;img SUP_DELIVERY_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_DELIVERY_EXCEPT = 45;</code>
         */
        public static final int SUP_DELIVERY_EXCEPT_VALUE = 45;
        /**
         * <pre>
         * &#64;img SUP_ELECTRONIC_CAR_de1.png
         * </pre>
         *
         * <code>SUP_ELECTRONIC_CAR = 46;</code>
         */
        public static final int SUP_ELECTRONIC_CAR_VALUE = 46;
        /**
         * <pre>
         * &#64;img SUP_GATEWAY_de1.png
         * </pre>
         *
         * <code>SUP_GATEWAY = 47;</code>
         */
        public static final int SUP_GATEWAY_VALUE = 47;
        /**
         * <pre>
         * &#64;img SUP_GIVE_WAY_LEFT_de1.png
         * </pre>
         *
         * <code>SUP_GIVE_WAY_LEFT = 48;</code>
         */
        public static final int SUP_GIVE_WAY_LEFT_VALUE = 48;
        /**
         * <pre>
         * &#64;img SUP_GIVE_WAY_RIGHT_de1.png
         * </pre>
         *
         * <code>SUP_GIVE_WAY_RIGHT = 49;</code>
         */
        public static final int SUP_GIVE_WAY_RIGHT_VALUE = 49;
        /**
         * <pre>
         * &#64;img SUP_GRAVEL_de1.png
         * </pre>
         *
         * <code>SUP_GRAVEL = 50;</code>
         */
        public static final int SUP_GRAVEL_VALUE = 50;
        /**
         * <pre>
         * &#64;img SUP_HAZMAT_de1.png
         * </pre>
         *
         * <code>SUP_HAZMAT = 51;</code>
         */
        public static final int SUP_HAZMAT_VALUE = 51;
        /**
         * <pre>
         * &#64;img SUP_HAZ_WATER_de1.png
         * </pre>
         *
         * <code>SUP_HAZ_WATER = 52;</code>
         */
        public static final int SUP_HAZ_WATER_VALUE = 52;
        /**
         * <pre>
         * &#64;img SUP_KIDS_de1.png
         * </pre>
         *
         * <code>SUP_KIDS = 53;</code>
         */
        public static final int SUP_KIDS_VALUE = 53;
        /**
         * <pre>
         * &#64;img SUP_LOCAL_EXCEP_de1.png
         * </pre>
         *
         * <code>SUP_LOCAL_EXCEP = 54;</code>
         */
        public static final int SUP_LOCAL_EXCEP_VALUE = 54;
        /**
         * <pre>
         * &#64;img SUP_LOW_TREE_de1.png
         * </pre>
         *
         * <code>SUP_LOW_TREE = 55;</code>
         */
        public static final int SUP_LOW_TREE_VALUE = 55;
        /**
         * <pre>
         * &#64;img SUP_MOTORCYCLE_de1.png
         * </pre>
         *
         * <code>SUP_MOTORCYCLE = 56;</code>
         */
        public static final int SUP_MOTORCYCLE_VALUE = 56;
        /**
         * <pre>
         * &#64;img SUP_MOTORCYCLE_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_MOTORCYCLE_EXCEPT = 57;</code>
         */
        public static final int SUP_MOTORCYCLE_EXCEPT_VALUE = 57;
        /**
         * <pre>
         * &#64;img SUP_NEW_ROAD_BED_de1.png
         * </pre>
         *
         * <code>SUP_NEW_ROAD_BED = 58;</code>
         */
        public static final int SUP_NEW_ROAD_BED_VALUE = 58;
        /**
         * <pre>
         * &#64;img SUP_NO_STOP_SHOULDER_de1.png
         * </pre>
         *
         * <code>SUP_NO_STOP_SHOULDER = 59;</code>
         */
        public static final int SUP_NO_STOP_SHOULDER_VALUE = 59;
        /**
         * <pre>
         * &#64;img SUP_OIL_TRAIL_de1.png
         * </pre>
         *
         * <code>SUP_OIL_TRAIL = 60;</code>
         */
        public static final int SUP_OIL_TRAIL_VALUE = 60;
        /**
         * <pre>
         * &#64;img SUP_PASSENGER_CAR_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_PASSENGER_CAR_EXCEPT = 61;</code>
         */
        public static final int SUP_PASSENGER_CAR_EXCEPT_VALUE = 61;
        /**
         * <pre>
         * &#64;img SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT = 62;</code>
         */
        public static final int SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT_VALUE = 62;
        /**
         * <pre>
         * &#64;img SUP_PEDESTRIAN_de1.png
         * </pre>
         *
         * <code>SUP_PEDESTRIAN = 63;</code>
         */
        public static final int SUP_PEDESTRIAN_VALUE = 63;
        /**
         * <pre>
         * &#64;img SUP_PRIORITY_TURN_LEFT_de1.png
         * </pre>
         *
         * <code>SUP_PRIORITY_TURN_LEFT = 64;</code>
         */
        public static final int SUP_PRIORITY_TURN_LEFT_VALUE = 64;
        /**
         * <pre>
         * &#64;img SUP_PRIORITY_TURN_RIGHT_de1.png
         * </pre>
         *
         * <code>SUP_PRIORITY_TURN_RIGHT = 65;</code>
         */
        public static final int SUP_PRIORITY_TURN_RIGHT_VALUE = 65;
        /**
         * <pre>
         * &#64;img SUP_ROAD_DAMAGE_de1.png
         * </pre>
         *
         * <code>SUP_ROAD_DAMAGE = 66;</code>
         */
        public static final int SUP_ROAD_DAMAGE_VALUE = 66;
        /**
         * <pre>
         * &#64;img SUP_RUTS_de1.png
         * </pre>
         *
         * <code>SUP_RUTS = 67;</code>
         */
        public static final int SUP_RUTS_VALUE = 67;
        /**
         * <pre>
         * &#64;img SUP_TRACTOR_de1.png
         * </pre>
         *
         * <code>SUP_TRACTOR = 68;</code>
         */
        public static final int SUP_TRACTOR_VALUE = 68;
        /**
         * <pre>
         * &#64;img SUP_TRACTOR_MAY_BE_OVERTAKEN_de1.png
         * </pre>
         *
         * <code>SUP_TRACTOR_MAY_BE_OVERTAKEN = 69;</code>
         */
        public static final int SUP_TRACTOR_MAY_BE_OVERTAKEN_VALUE = 69;
        /**
         * <pre>
         * &#64;img SUP_TRAFFIC_JAM_de1.png
         * </pre>
         *
         * <code>SUP_TRAFFIC_JAM = 70;</code>
         */
        public static final int SUP_TRAFFIC_JAM_VALUE = 70;
        /**
         * <pre>
         * &#64;img SUP_TRAIN_de1.png
         * </pre>
         *
         * <code>SUP_TRAIN = 71;</code>
         */
        public static final int SUP_TRAIN_VALUE = 71;
        /**
         * <pre>
         * &#64;img SUP_TRAM_de1.png
         * </pre>
         *
         * <code>SUP_TRAM = 72;</code>
         */
        public static final int SUP_TRAM_VALUE = 72;
        /**
         * <pre>
         * &#64;img SUP_TRUCK_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_TRUCK_EXCEPT = 73;</code>
         */
        public static final int SUP_TRUCK_EXCEPT_VALUE = 73;
        /**
         * <pre>
         * &#64;img SUP_TRUCK_WITH_TRAILER_EXCEPT_de1.png
         * </pre>
         *
         * <code>SUP_TRUCK_WITH_TRAILER_EXCEPT = 74;</code>
         */
        public static final int SUP_TRUCK_WITH_TRAILER_EXCEPT_VALUE = 74;
        /**
         * <pre>
         * &#64;img SUP_GET_IN_PROPER_LANE_de1.png
         * </pre>
         *
         * <code>SUP_GET_IN_PROPER_LANE = 75;</code>
         */
        public static final int SUP_GET_IN_PROPER_LANE_VALUE = 75;
        /**
         * <pre>
         * &#64;img SUP_ROADSIDE_TRUCK_de1.png
         * </pre>
         *
         * <code>SUP_ROADSIDE_TRUCK = 76;</code>
         */
        public static final int SUP_ROADSIDE_TRUCK_VALUE = 76;
        /**
         * <pre>
         * &#64;img SUP_RAPPEL_fr1.jpg
         * </pre>
         *
         * <code>SUP_RAPPEL = 77;</code>
         */
        public static final int SUP_RAPPEL_VALUE = 77;
        /**
         * <pre>
         * &#64;img SUP_RADAR_ENFORCED_de1.jpg
         * </pre>
         *
         * <code>SUP_RADAR_ENFORCED = 78;</code>
         */
        public static final int SUP_RADAR_ENFORCED_VALUE = 78;
        /**
         * <pre>
         * The distance may be provided in the field value_and_confidence. The format should be "xxx m" or if available exact text format of sign.
         * &#64;img SUP_STOP_IN_DISTANCE_de1.png
         * </pre>
         *
         * <code>SUP_STOP_IN_DISTANCE = 79;</code>
         */
        public static final int SUP_STOP_IN_DISTANCE_VALUE = 79;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Type valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static Type forNumber(int value) {
          switch (value) {
            case 0: return UNKNOWN_TYPE;
            case 1: return SUP_OTHER_AS_TEXT;
            case 2: return SUP_WET;
            case 3: return SUP_RAIN;
            case 4: return SUP_SNOW;
            case 5: return SUP_SNOW_OR_RAIN;
            case 6: return SUP_FOG;
            case 7: return SUP_TIME;
            case 8: return SUP_DAY_AND_TIME;
            case 9: return SUP_NIGHT;
            case 10: return SUP_SEASON;
            case 11: return SUP_WORKDAYS;
            case 12: return SUP_WORKDAYS_AND_TIME;
            case 13: return SUP_SCHOOL;
            case 14: return SUP_RAMP;
            case 15: return SUP_TRUCK;
            case 16: return SUP_TRUCK_WITH_TRAILER;
            case 17: return SUP_PASSENGER_CAR;
            case 18: return SUP_PASSENGER_CAR_WITH_TAILER;
            case 19: return SUP_TRACTOR_EXCEPT;
            case 20: return SUP_BUS;
            case 21: return SUP_TRUCKS_AND_BUS;
            case 22: return SUP_CARS_TRUCKS_BUS;
            case 23: return SUP_TAXI;
            case 24: return SUP_TANK;
            case 25: return SUP_ROADSIDE;
            case 26: return SUP_WEIGHT;
            case 27: return SUP_STARTING_IN;
            case 28: return SUP_VALID_FOR;
            case 29: return SUP_IN_RIGHT_DIRECTION;
            case 30: return SUP_IN_LEFT_DIRECTION;
            case 31: return SUP_ZONE;
            case 32: return SUP_ZONE_START;
            case 33: return SUP_ZONE_END;
            case 34: return SUP_BEGIN_OF_VALIDITY;
            case 35: return SUP_END_OF_VALIDITY;
            case 36: return SUP_FROG;
            case 37: return SUP_ALL_WAY;
            case 38: return SUP_BIKE;
            case 39: return SUP_BIKE_EXCEPT;
            case 40: return SUP_BUS_EXCEPT;
            case 41: return SUP_CAMPER;
            case 42: return SUP_CARAVAN;
            case 43: return SUP_CONSTRUCTION_GATEWAY;
            case 44: return SUP_CROSS_WAY;
            case 45: return SUP_DELIVERY_EXCEPT;
            case 46: return SUP_ELECTRONIC_CAR;
            case 47: return SUP_GATEWAY;
            case 48: return SUP_GIVE_WAY_LEFT;
            case 49: return SUP_GIVE_WAY_RIGHT;
            case 50: return SUP_GRAVEL;
            case 51: return SUP_HAZMAT;
            case 52: return SUP_HAZ_WATER;
            case 53: return SUP_KIDS;
            case 54: return SUP_LOCAL_EXCEP;
            case 55: return SUP_LOW_TREE;
            case 56: return SUP_MOTORCYCLE;
            case 57: return SUP_MOTORCYCLE_EXCEPT;
            case 58: return SUP_NEW_ROAD_BED;
            case 59: return SUP_NO_STOP_SHOULDER;
            case 60: return SUP_OIL_TRAIL;
            case 61: return SUP_PASSENGER_CAR_EXCEPT;
            case 62: return SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT;
            case 63: return SUP_PEDESTRIAN;
            case 64: return SUP_PRIORITY_TURN_LEFT;
            case 65: return SUP_PRIORITY_TURN_RIGHT;
            case 66: return SUP_ROAD_DAMAGE;
            case 67: return SUP_RUTS;
            case 68: return SUP_TRACTOR;
            case 69: return SUP_TRACTOR_MAY_BE_OVERTAKEN;
            case 70: return SUP_TRAFFIC_JAM;
            case 71: return SUP_TRAIN;
            case 72: return SUP_TRAM;
            case 73: return SUP_TRUCK_EXCEPT;
            case 74: return SUP_TRUCK_WITH_TRAILER_EXCEPT;
            case 75: return SUP_GET_IN_PROPER_LANE;
            case 76: return SUP_ROADSIDE_TRUCK;
            case 77: return SUP_RAPPEL;
            case 78: return SUP_RADAR_ENFORCED;
            case 79: return SUP_STOP_IN_DISTANCE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Type>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Type> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                public Type findValueByNumber(int number) {
                  return Type.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException(
                "Can't get the descriptor of an unrecognized enum value.");
          }
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.getDescriptor().getEnumTypes().get(0);
        }

        private static final Type[] VALUES = values();

        public static Type valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Type(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type)
      }

      private int bitField0_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_ = 0;
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type getType() {
        org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type.forNumber(type_);
        return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type.UNRECOGNIZED : result;
      }

      public static final int CONFIDENCE_FIELD_NUMBER = 2;
      private org.sensoris.types.base.Confidence confidence_;
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return Whether the confidence field is set.
       */
      @java.lang.Override
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       * @return The confidence.
       */
      @java.lang.Override
      public org.sensoris.types.base.Confidence getConfidence() {
        return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      @java.lang.Override
      public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
        return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
      }

      public static final int OTHER_TEXT_FIELD_NUMBER = 3;
      private com.google.protobuf.StringValue otherText_;
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       * @return Whether the otherText field is set.
       */
      @java.lang.Override
      public boolean hasOtherText() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       * @return The otherText.
       */
      @java.lang.Override
      public com.google.protobuf.StringValue getOtherText() {
        return otherText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : otherText_;
      }
      /**
       * <pre>
       * If the type or additional information is known by the sensor, then it may be provided as string.
       * </pre>
       *
       * <code>.google.protobuf.StringValue other_text = 3;</code>
       */
      @java.lang.Override
      public com.google.protobuf.StringValueOrBuilder getOtherTextOrBuilder() {
        return otherText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : otherText_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
          output.writeEnum(1, type_);
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(2, getConfidence());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(3, getOtherText());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (type_ != org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, type_);
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getConfidence());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getOtherText());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)) {
          return super.equals(obj);
        }
        org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence other = (org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence) obj;

        if (type_ != other.type_) return false;
        if (hasConfidence() != other.hasConfidence()) return false;
        if (hasConfidence()) {
          if (!getConfidence()
              .equals(other.getConfidence())) return false;
        }
        if (hasOtherText() != other.hasOtherText()) return false;
        if (hasOtherText()) {
          if (!getOtherText()
              .equals(other.getOtherText())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
        if (hasConfidence()) {
          hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
          hash = (53 * hash) + getConfidence().hashCode();
        }
        if (hasOtherText()) {
          hash = (37 * hash) + OTHER_TEXT_FIELD_NUMBER;
          hash = (53 * hash) + getOtherText().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Type and confidence.
       * </pre>
       *
       * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
          org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidenceOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Builder.class);
        }

        // Construct using org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getConfidenceFieldBuilder();
            getOtherTextFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          type_ = 0;
          confidence_ = null;
          if (confidenceBuilder_ != null) {
            confidenceBuilder_.dispose();
            confidenceBuilder_ = null;
          }
          otherText_ = null;
          if (otherTextBuilder_ != null) {
            otherTextBuilder_.dispose();
            otherTextBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_descriptor;
        }

        @java.lang.Override
        public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence getDefaultInstanceForType() {
          return org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.getDefaultInstance();
        }

        @java.lang.Override
        public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence build() {
          org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence buildPartial() {
          org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence result = new org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.type_ = type_;
          }
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.confidence_ = confidenceBuilder_ == null
                ? confidence_
                : confidenceBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.otherText_ = otherTextBuilder_ == null
                ? otherText_
                : otherTextBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence) {
            return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence other) {
          if (other == org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.getDefaultInstance()) return this;
          if (other.type_ != 0) {
            setTypeValue(other.getTypeValue());
          }
          if (other.hasConfidence()) {
            mergeConfidence(other.getConfidence());
          }
          if (other.hasOtherText()) {
            mergeOtherText(other.getOtherText());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  type_ = input.readEnum();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 18: {
                  input.readMessage(
                      getConfidenceFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getOtherTextFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int type_ = 0;
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
         * @return The enum numeric value on the wire for type.
         */
        @java.lang.Override public int getTypeValue() {
          return type_;
        }
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
         * @param value The enum numeric value on the wire for type to set.
         * @return This builder for chaining.
         */
        public Builder setTypeValue(int value) {
          type_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
         * @return The type.
         */
        @java.lang.Override
        public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type getType() {
          org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type result = org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type.forNumber(type_);
          return result == null ? org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
         * @param value The type to set.
         * @return This builder for chaining.
         */
        public Builder setType(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          type_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }

        private org.sensoris.types.base.Confidence confidence_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> confidenceBuilder_;
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         * @return Whether the confidence field is set.
         */
        public boolean hasConfidence() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         * @return The confidence.
         */
        public org.sensoris.types.base.Confidence getConfidence() {
          if (confidenceBuilder_ == null) {
            return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
          } else {
            return confidenceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         */
        public Builder setConfidence(org.sensoris.types.base.Confidence value) {
          if (confidenceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            confidence_ = value;
          } else {
            confidenceBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         */
        public Builder setConfidence(
            org.sensoris.types.base.Confidence.Builder builderForValue) {
          if (confidenceBuilder_ == null) {
            confidence_ = builderForValue.build();
          } else {
            confidenceBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         */
        public Builder mergeConfidence(org.sensoris.types.base.Confidence value) {
          if (confidenceBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
              confidence_ != null &&
              confidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
              getConfidenceBuilder().mergeFrom(value);
            } else {
              confidence_ = value;
            }
          } else {
            confidenceBuilder_.mergeFrom(value);
          }
          if (confidence_ != null) {
            bitField0_ |= 0x00000002;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         */
        public Builder clearConfidence() {
          bitField0_ = (bitField0_ & ~0x00000002);
          confidence_ = null;
          if (confidenceBuilder_ != null) {
            confidenceBuilder_.dispose();
            confidenceBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         */
        public org.sensoris.types.base.Confidence.Builder getConfidenceBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getConfidenceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         */
        public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
          if (confidenceBuilder_ != null) {
            return confidenceBuilder_.getMessageOrBuilder();
          } else {
            return confidence_ == null ?
                org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
          }
        }
        /**
         * <pre>
         * Confidence of type.
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
            getConfidenceFieldBuilder() {
          if (confidenceBuilder_ == null) {
            confidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                    getConfidence(),
                    getParentForChildren(),
                    isClean());
            confidence_ = null;
          }
          return confidenceBuilder_;
        }

        private com.google.protobuf.StringValue otherText_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> otherTextBuilder_;
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         * @return Whether the otherText field is set.
         */
        public boolean hasOtherText() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         * @return The otherText.
         */
        public com.google.protobuf.StringValue getOtherText() {
          if (otherTextBuilder_ == null) {
            return otherText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : otherText_;
          } else {
            return otherTextBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         */
        public Builder setOtherText(com.google.protobuf.StringValue value) {
          if (otherTextBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            otherText_ = value;
          } else {
            otherTextBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         */
        public Builder setOtherText(
            com.google.protobuf.StringValue.Builder builderForValue) {
          if (otherTextBuilder_ == null) {
            otherText_ = builderForValue.build();
          } else {
            otherTextBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         */
        public Builder mergeOtherText(com.google.protobuf.StringValue value) {
          if (otherTextBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0) &&
              otherText_ != null &&
              otherText_ != com.google.protobuf.StringValue.getDefaultInstance()) {
              getOtherTextBuilder().mergeFrom(value);
            } else {
              otherText_ = value;
            }
          } else {
            otherTextBuilder_.mergeFrom(value);
          }
          if (otherText_ != null) {
            bitField0_ |= 0x00000004;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         */
        public Builder clearOtherText() {
          bitField0_ = (bitField0_ & ~0x00000004);
          otherText_ = null;
          if (otherTextBuilder_ != null) {
            otherTextBuilder_.dispose();
            otherTextBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         */
        public com.google.protobuf.StringValue.Builder getOtherTextBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getOtherTextFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         */
        public com.google.protobuf.StringValueOrBuilder getOtherTextOrBuilder() {
          if (otherTextBuilder_ != null) {
            return otherTextBuilder_.getMessageOrBuilder();
          } else {
            return otherText_ == null ?
                com.google.protobuf.StringValue.getDefaultInstance() : otherText_;
          }
        }
        /**
         * <pre>
         * If the type or additional information is known by the sensor, then it may be provided as string.
         * </pre>
         *
         * <code>.google.protobuf.StringValue other_text = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> 
            getOtherTextFieldBuilder() {
          if (otherTextBuilder_ == null) {
            otherTextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder>(
                    getOtherText(),
                    getParentForChildren(),
                    isClean());
            otherText_ = null;
          }
          return otherTextBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
      }

      // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
      private static final org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence();
      }

      public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TypeAndConfidence>
          PARSER = new com.google.protobuf.AbstractParser<TypeAndConfidence>() {
        @java.lang.Override
        public TypeAndConfidence parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TypeAndConfidence> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TypeAndConfidence> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int EXISTENCE_CONFIDENCE_FIELD_NUMBER = 1;
    private org.sensoris.types.base.Confidence existenceConfidence_;
    /**
     * <pre>
     * Confidence that a supplementary sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
     * @return Whether the existenceConfidence field is set.
     */
    @java.lang.Override
    public boolean hasExistenceConfidence() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Confidence that a supplementary sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
     * @return The existenceConfidence.
     */
    @java.lang.Override
    public org.sensoris.types.base.Confidence getExistenceConfidence() {
      return existenceConfidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
    }
    /**
     * <pre>
     * Confidence that a supplementary sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
     */
    @java.lang.Override
    public org.sensoris.types.base.ConfidenceOrBuilder getExistenceConfidenceOrBuilder() {
      return existenceConfidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
    }

    public static final int DETECTION_STATUS_FIELD_NUMBER = 2;
    private org.sensoris.types.base.EventDetectionStatus detectionStatus_;
    /**
     * <pre>
     * Event detection status of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
     * @return Whether the detectionStatus field is set.
     */
    @java.lang.Override
    public boolean hasDetectionStatus() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Event detection status of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
     * @return The detectionStatus.
     */
    @java.lang.Override
    public org.sensoris.types.base.EventDetectionStatus getDetectionStatus() {
      return detectionStatus_ == null ? org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
    }
    /**
     * <pre>
     * Event detection status of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
     */
    @java.lang.Override
    public org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder() {
      return detectionStatus_ == null ? org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
    }

    public static final int TYPE_AND_CONFIDENCE_FIELD_NUMBER = 3;
    private org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence typeAndConfidence_;
    /**
     * <pre>
     * Type and confidence of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
     * @return Whether the typeAndConfidence field is set.
     */
    @java.lang.Override
    public boolean hasTypeAndConfidence() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Type and confidence of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
     * @return The typeAndConfidence.
     */
    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence getTypeAndConfidence() {
      return typeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
    }
    /**
     * <pre>
     * Type and confidence of supplementary sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
     */
    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder() {
      return typeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
    }

    public static final int VALUE_AND_CONFIDENCE_FIELD_NUMBER = 4;
    private org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence valueAndConfidence_;
    /**
     * <pre>
     * Value of supplementary sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
     * @return Whether the valueAndConfidence field is set.
     */
    @java.lang.Override
    public boolean hasValueAndConfidence() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Value of supplementary sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
     * @return The valueAndConfidence.
     */
    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getValueAndConfidence() {
      return valueAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance() : valueAndConfidence_;
    }
    /**
     * <pre>
     * Value of supplementary sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
     */
    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder getValueAndConfidenceOrBuilder() {
      return valueAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance() : valueAndConfidence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getExistenceConfidence());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getDetectionStatus());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getTypeAndConfidence());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getValueAndConfidence());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getExistenceConfidence());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDetectionStatus());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTypeAndConfidence());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getValueAndConfidence());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)) {
        return super.equals(obj);
      }
      org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence other = (org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence) obj;

      if (hasExistenceConfidence() != other.hasExistenceConfidence()) return false;
      if (hasExistenceConfidence()) {
        if (!getExistenceConfidence()
            .equals(other.getExistenceConfidence())) return false;
      }
      if (hasDetectionStatus() != other.hasDetectionStatus()) return false;
      if (hasDetectionStatus()) {
        if (!getDetectionStatus()
            .equals(other.getDetectionStatus())) return false;
      }
      if (hasTypeAndConfidence() != other.hasTypeAndConfidence()) return false;
      if (hasTypeAndConfidence()) {
        if (!getTypeAndConfidence()
            .equals(other.getTypeAndConfidence())) return false;
      }
      if (hasValueAndConfidence() != other.hasValueAndConfidence()) return false;
      if (hasValueAndConfidence()) {
        if (!getValueAndConfidence()
            .equals(other.getValueAndConfidence())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExistenceConfidence()) {
        hash = (37 * hash) + EXISTENCE_CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getExistenceConfidence().hashCode();
      }
      if (hasDetectionStatus()) {
        hash = (37 * hash) + DETECTION_STATUS_FIELD_NUMBER;
        hash = (53 * hash) + getDetectionStatus().hashCode();
      }
      if (hasTypeAndConfidence()) {
        hash = (37 * hash) + TYPE_AND_CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getTypeAndConfidence().hashCode();
      }
      if (hasValueAndConfidence()) {
        hash = (37 * hash) + VALUE_AND_CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getValueAndConfidence().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Supplementary sign and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
        org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.class, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder.class);
      }

      // Construct using org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getExistenceConfidenceFieldBuilder();
          getDetectionStatusFieldBuilder();
          getTypeAndConfidenceFieldBuilder();
          getValueAndConfidenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        existenceConfidence_ = null;
        if (existenceConfidenceBuilder_ != null) {
          existenceConfidenceBuilder_.dispose();
          existenceConfidenceBuilder_ = null;
        }
        detectionStatus_ = null;
        if (detectionStatusBuilder_ != null) {
          detectionStatusBuilder_.dispose();
          detectionStatusBuilder_ = null;
        }
        typeAndConfidence_ = null;
        if (typeAndConfidenceBuilder_ != null) {
          typeAndConfidenceBuilder_.dispose();
          typeAndConfidenceBuilder_ = null;
        }
        valueAndConfidence_ = null;
        if (valueAndConfidenceBuilder_ != null) {
          valueAndConfidenceBuilder_.dispose();
          valueAndConfidenceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_SupplementarySignAndConfidence_descriptor;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence getDefaultInstanceForType() {
        return org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.getDefaultInstance();
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence build() {
        org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence buildPartial() {
        org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence result = new org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.existenceConfidence_ = existenceConfidenceBuilder_ == null
              ? existenceConfidence_
              : existenceConfidenceBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.detectionStatus_ = detectionStatusBuilder_ == null
              ? detectionStatus_
              : detectionStatusBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.typeAndConfidence_ = typeAndConfidenceBuilder_ == null
              ? typeAndConfidence_
              : typeAndConfidenceBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.valueAndConfidence_ = valueAndConfidenceBuilder_ == null
              ? valueAndConfidence_
              : valueAndConfidenceBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence) {
          return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence other) {
        if (other == org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.getDefaultInstance()) return this;
        if (other.hasExistenceConfidence()) {
          mergeExistenceConfidence(other.getExistenceConfidence());
        }
        if (other.hasDetectionStatus()) {
          mergeDetectionStatus(other.getDetectionStatus());
        }
        if (other.hasTypeAndConfidence()) {
          mergeTypeAndConfidence(other.getTypeAndConfidence());
        }
        if (other.hasValueAndConfidence()) {
          mergeValueAndConfidence(other.getValueAndConfidence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExistenceConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getDetectionStatusFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getTypeAndConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getValueAndConfidenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.sensoris.types.base.Confidence existenceConfidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> existenceConfidenceBuilder_;
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       * @return Whether the existenceConfidence field is set.
       */
      public boolean hasExistenceConfidence() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       * @return The existenceConfidence.
       */
      public org.sensoris.types.base.Confidence getExistenceConfidence() {
        if (existenceConfidenceBuilder_ == null) {
          return existenceConfidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
        } else {
          return existenceConfidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       */
      public Builder setExistenceConfidence(org.sensoris.types.base.Confidence value) {
        if (existenceConfidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          existenceConfidence_ = value;
        } else {
          existenceConfidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       */
      public Builder setExistenceConfidence(
          org.sensoris.types.base.Confidence.Builder builderForValue) {
        if (existenceConfidenceBuilder_ == null) {
          existenceConfidence_ = builderForValue.build();
        } else {
          existenceConfidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       */
      public Builder mergeExistenceConfidence(org.sensoris.types.base.Confidence value) {
        if (existenceConfidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            existenceConfidence_ != null &&
            existenceConfidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
            getExistenceConfidenceBuilder().mergeFrom(value);
          } else {
            existenceConfidence_ = value;
          }
        } else {
          existenceConfidenceBuilder_.mergeFrom(value);
        }
        if (existenceConfidence_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       */
      public Builder clearExistenceConfidence() {
        bitField0_ = (bitField0_ & ~0x00000001);
        existenceConfidence_ = null;
        if (existenceConfidenceBuilder_ != null) {
          existenceConfidenceBuilder_.dispose();
          existenceConfidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       */
      public org.sensoris.types.base.Confidence.Builder getExistenceConfidenceBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getExistenceConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       */
      public org.sensoris.types.base.ConfidenceOrBuilder getExistenceConfidenceOrBuilder() {
        if (existenceConfidenceBuilder_ != null) {
          return existenceConfidenceBuilder_.getMessageOrBuilder();
        } else {
          return existenceConfidence_ == null ?
              org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
        }
      }
      /**
       * <pre>
       * Confidence that a supplementary sign has been detected.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
          getExistenceConfidenceFieldBuilder() {
        if (existenceConfidenceBuilder_ == null) {
          existenceConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                  getExistenceConfidence(),
                  getParentForChildren(),
                  isClean());
          existenceConfidence_ = null;
        }
        return existenceConfidenceBuilder_;
      }

      private org.sensoris.types.base.EventDetectionStatus detectionStatus_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder> detectionStatusBuilder_;
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       * @return Whether the detectionStatus field is set.
       */
      public boolean hasDetectionStatus() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       * @return The detectionStatus.
       */
      public org.sensoris.types.base.EventDetectionStatus getDetectionStatus() {
        if (detectionStatusBuilder_ == null) {
          return detectionStatus_ == null ? org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
        } else {
          return detectionStatusBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       */
      public Builder setDetectionStatus(org.sensoris.types.base.EventDetectionStatus value) {
        if (detectionStatusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          detectionStatus_ = value;
        } else {
          detectionStatusBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       */
      public Builder setDetectionStatus(
          org.sensoris.types.base.EventDetectionStatus.Builder builderForValue) {
        if (detectionStatusBuilder_ == null) {
          detectionStatus_ = builderForValue.build();
        } else {
          detectionStatusBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       */
      public Builder mergeDetectionStatus(org.sensoris.types.base.EventDetectionStatus value) {
        if (detectionStatusBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            detectionStatus_ != null &&
            detectionStatus_ != org.sensoris.types.base.EventDetectionStatus.getDefaultInstance()) {
            getDetectionStatusBuilder().mergeFrom(value);
          } else {
            detectionStatus_ = value;
          }
        } else {
          detectionStatusBuilder_.mergeFrom(value);
        }
        if (detectionStatus_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       */
      public Builder clearDetectionStatus() {
        bitField0_ = (bitField0_ & ~0x00000002);
        detectionStatus_ = null;
        if (detectionStatusBuilder_ != null) {
          detectionStatusBuilder_.dispose();
          detectionStatusBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       */
      public org.sensoris.types.base.EventDetectionStatus.Builder getDetectionStatusBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getDetectionStatusFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       */
      public org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder() {
        if (detectionStatusBuilder_ != null) {
          return detectionStatusBuilder_.getMessageOrBuilder();
        } else {
          return detectionStatus_ == null ?
              org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
        }
      }
      /**
       * <pre>
       * Event detection status of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder> 
          getDetectionStatusFieldBuilder() {
        if (detectionStatusBuilder_ == null) {
          detectionStatusBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder>(
                  getDetectionStatus(),
                  getParentForChildren(),
                  isClean());
          detectionStatus_ = null;
        }
        return detectionStatusBuilder_;
      }

      private org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence typeAndConfidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidenceOrBuilder> typeAndConfidenceBuilder_;
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       * @return Whether the typeAndConfidence field is set.
       */
      public boolean hasTypeAndConfidence() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       * @return The typeAndConfidence.
       */
      public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence getTypeAndConfidence() {
        if (typeAndConfidenceBuilder_ == null) {
          return typeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
        } else {
          return typeAndConfidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       */
      public Builder setTypeAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence value) {
        if (typeAndConfidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeAndConfidence_ = value;
        } else {
          typeAndConfidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       */
      public Builder setTypeAndConfidence(
          org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Builder builderForValue) {
        if (typeAndConfidenceBuilder_ == null) {
          typeAndConfidence_ = builderForValue.build();
        } else {
          typeAndConfidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       */
      public Builder mergeTypeAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence value) {
        if (typeAndConfidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            typeAndConfidence_ != null &&
            typeAndConfidence_ != org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.getDefaultInstance()) {
            getTypeAndConfidenceBuilder().mergeFrom(value);
          } else {
            typeAndConfidence_ = value;
          }
        } else {
          typeAndConfidenceBuilder_.mergeFrom(value);
        }
        if (typeAndConfidence_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       */
      public Builder clearTypeAndConfidence() {
        bitField0_ = (bitField0_ & ~0x00000004);
        typeAndConfidence_ = null;
        if (typeAndConfidenceBuilder_ != null) {
          typeAndConfidenceBuilder_.dispose();
          typeAndConfidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       */
      public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Builder getTypeAndConfidenceBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTypeAndConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       */
      public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder() {
        if (typeAndConfidenceBuilder_ != null) {
          return typeAndConfidenceBuilder_.getMessageOrBuilder();
        } else {
          return typeAndConfidence_ == null ?
              org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
        }
      }
      /**
       * <pre>
       * Type and confidence of supplementary sign.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidenceOrBuilder> 
          getTypeAndConfidenceFieldBuilder() {
        if (typeAndConfidenceBuilder_ == null) {
          typeAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidenceOrBuilder>(
                  getTypeAndConfidence(),
                  getParentForChildren(),
                  isClean());
          typeAndConfidence_ = null;
        }
        return typeAndConfidenceBuilder_;
      }

      private org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence valueAndConfidence_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder> valueAndConfidenceBuilder_;
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       * @return Whether the valueAndConfidence field is set.
       */
      public boolean hasValueAndConfidence() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       * @return The valueAndConfidence.
       */
      public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getValueAndConfidence() {
        if (valueAndConfidenceBuilder_ == null) {
          return valueAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance() : valueAndConfidence_;
        } else {
          return valueAndConfidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       */
      public Builder setValueAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence value) {
        if (valueAndConfidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          valueAndConfidence_ = value;
        } else {
          valueAndConfidenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       */
      public Builder setValueAndConfidence(
          org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder builderForValue) {
        if (valueAndConfidenceBuilder_ == null) {
          valueAndConfidence_ = builderForValue.build();
        } else {
          valueAndConfidenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       */
      public Builder mergeValueAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence value) {
        if (valueAndConfidenceBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            valueAndConfidence_ != null &&
            valueAndConfidence_ != org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance()) {
            getValueAndConfidenceBuilder().mergeFrom(value);
          } else {
            valueAndConfidence_ = value;
          }
        } else {
          valueAndConfidenceBuilder_.mergeFrom(value);
        }
        if (valueAndConfidence_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       */
      public Builder clearValueAndConfidence() {
        bitField0_ = (bitField0_ & ~0x00000008);
        valueAndConfidence_ = null;
        if (valueAndConfidenceBuilder_ != null) {
          valueAndConfidenceBuilder_.dispose();
          valueAndConfidenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       */
      public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder getValueAndConfidenceBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getValueAndConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       */
      public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder getValueAndConfidenceOrBuilder() {
        if (valueAndConfidenceBuilder_ != null) {
          return valueAndConfidenceBuilder_.getMessageOrBuilder();
        } else {
          return valueAndConfidence_ == null ?
              org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance() : valueAndConfidence_;
        }
      }
      /**
       * <pre>
       * Value of supplementary sign in addition to type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder> 
          getValueAndConfidenceFieldBuilder() {
        if (valueAndConfidenceBuilder_ == null) {
          valueAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder>(
                  getValueAndConfidence(),
                  getParentForChildren(),
                  isClean());
          valueAndConfidence_ = null;
        }
        return valueAndConfidenceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
    private static final org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence();
    }

    public static org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SupplementarySignAndConfidence>
        PARSER = new com.google.protobuf.AbstractParser<SupplementarySignAndConfidence>() {
      @java.lang.Override
      public SupplementarySignAndConfidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SupplementarySignAndConfidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SupplementarySignAndConfidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int ENVELOPE_FIELD_NUMBER = 1;
  private org.sensoris.types.base.EventEnvelope envelope_;
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   * @return Whether the envelope field is set.
   */
  @java.lang.Override
  public boolean hasEnvelope() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   * @return The envelope.
   */
  @java.lang.Override
  public org.sensoris.types.base.EventEnvelope getEnvelope() {
    return envelope_ == null ? org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
  }
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  @java.lang.Override
  public org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder() {
    return envelope_ == null ? org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
  }

  public static final int EXISTENCE_CONFIDENCE_FIELD_NUMBER = 2;
  private org.sensoris.types.base.Confidence existenceConfidence_;
  /**
   * <pre>
   * Confidence that a main sign has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
   * @return Whether the existenceConfidence field is set.
   */
  @java.lang.Override
  public boolean hasExistenceConfidence() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Confidence that a main sign has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
   * @return The existenceConfidence.
   */
  @java.lang.Override
  public org.sensoris.types.base.Confidence getExistenceConfidence() {
    return existenceConfidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
  }
  /**
   * <pre>
   * Confidence that a main sign has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
   */
  @java.lang.Override
  public org.sensoris.types.base.ConfidenceOrBuilder getExistenceConfidenceOrBuilder() {
    return existenceConfidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
  }

  public static final int DETECTION_STATUS_FIELD_NUMBER = 3;
  private org.sensoris.types.base.EventDetectionStatus detectionStatus_;
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
   * @return Whether the detectionStatus field is set.
   */
  @java.lang.Override
  public boolean hasDetectionStatus() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
   * @return The detectionStatus.
   */
  @java.lang.Override
  public org.sensoris.types.base.EventDetectionStatus getDetectionStatus() {
    return detectionStatus_ == null ? org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
  }
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
   */
  @java.lang.Override
  public org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder() {
    return detectionStatus_ == null ? org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
  }

  public static final int RECTANGULAR_BOX_AND_ACCURACY_FIELD_NUMBER = 4;
  private org.sensoris.types.spatial.RectangularBoxAndAccuracy rectangularBoxAndAccuracy_;
  /**
   * <pre>
   * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
   * @return Whether the rectangularBoxAndAccuracy field is set.
   */
  @java.lang.Override
  public boolean hasRectangularBoxAndAccuracy() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
   * @return The rectangularBoxAndAccuracy.
   */
  @java.lang.Override
  public org.sensoris.types.spatial.RectangularBoxAndAccuracy getRectangularBoxAndAccuracy() {
    return rectangularBoxAndAccuracy_ == null ? org.sensoris.types.spatial.RectangularBoxAndAccuracy.getDefaultInstance() : rectangularBoxAndAccuracy_;
  }
  /**
   * <pre>
   * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
   */
  @java.lang.Override
  public org.sensoris.types.spatial.RectangularBoxAndAccuracyOrBuilder getRectangularBoxAndAccuracyOrBuilder() {
    return rectangularBoxAndAccuracy_ == null ? org.sensoris.types.spatial.RectangularBoxAndAccuracy.getDefaultInstance() : rectangularBoxAndAccuracy_;
  }

  public static final int SHAPE_AND_CONFIDENCE_FIELD_NUMBER = 5;
  private org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence shapeAndConfidence_;
  /**
   * <pre>
   * Shape and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
   * @return Whether the shapeAndConfidence field is set.
   */
  @java.lang.Override
  public boolean hasShapeAndConfidence() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Shape and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
   * @return The shapeAndConfidence.
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence getShapeAndConfidence() {
    return shapeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.getDefaultInstance() : shapeAndConfidence_;
  }
  /**
   * <pre>
   * Shape and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidenceOrBuilder getShapeAndConfidenceOrBuilder() {
    return shapeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.getDefaultInstance() : shapeAndConfidence_;
  }

  public static final int TYPE_AND_CONFIDENCE_FIELD_NUMBER = 6;
  private org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence typeAndConfidence_;
  /**
   * <pre>
   * Type and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
   * @return Whether the typeAndConfidence field is set.
   */
  @java.lang.Override
  public boolean hasTypeAndConfidence() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Type and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
   * @return The typeAndConfidence.
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence getTypeAndConfidence() {
    return typeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
  }
  /**
   * <pre>
   * Type and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder() {
    return typeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
  }

  public static final int VALUE_AND_CONFIDENCE_FIELD_NUMBER = 7;
  private org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence valueAndConfidence_;
  /**
   * <pre>
   * Value of main sign in addition to type.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
   * @return Whether the valueAndConfidence field is set.
   */
  @java.lang.Override
  public boolean hasValueAndConfidence() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Value of main sign in addition to type.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
   * @return The valueAndConfidence.
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getValueAndConfidence() {
    return valueAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance() : valueAndConfidence_;
  }
  /**
   * <pre>
   * Value of main sign in addition to type.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder getValueAndConfidenceOrBuilder() {
    return valueAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance() : valueAndConfidence_;
  }

  public static final int PERMANENCY_AND_CONFIDENCE_FIELD_NUMBER = 8;
  private org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanencyAndConfidence_;
  /**
   * <pre>
   * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
   * @return Whether the permanencyAndConfidence field is set.
   */
  @java.lang.Override
  public boolean hasPermanencyAndConfidence() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
   * @return The permanencyAndConfidence.
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence getPermanencyAndConfidence() {
    return permanencyAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.getDefaultInstance() : permanencyAndConfidence_;
  }
  /**
   * <pre>
   * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidenceOrBuilder getPermanencyAndConfidenceOrBuilder() {
    return permanencyAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.getDefaultInstance() : permanencyAndConfidence_;
  }

  public static final int VALIDATION_AND_CONFIDENCE_FIELD_NUMBER = 9;
  private org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence validationAndConfidence_;
  /**
   * <pre>
   * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
   * @return Whether the validationAndConfidence field is set.
   */
  @java.lang.Override
  public boolean hasValidationAndConfidence() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
   * @return The validationAndConfidence.
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence getValidationAndConfidence() {
    return validationAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.getDefaultInstance() : validationAndConfidence_;
  }
  /**
   * <pre>
   * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidenceOrBuilder getValidationAndConfidenceOrBuilder() {
    return validationAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.getDefaultInstance() : validationAndConfidence_;
  }

  public static final int BACKGROUND_COLOR_AND_CONFIDENCE_FIELD_NUMBER = 10;
  private org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence backgroundColorAndConfidence_;
  /**
   * <pre>
   * Dominant background color and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
   * @return Whether the backgroundColorAndConfidence field is set.
   */
  @java.lang.Override
  public boolean hasBackgroundColorAndConfidence() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * Dominant background color and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
   * @return The backgroundColorAndConfidence.
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence getBackgroundColorAndConfidence() {
    return backgroundColorAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.getDefaultInstance() : backgroundColorAndConfidence_;
  }
  /**
   * <pre>
   * Dominant background color and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidenceOrBuilder getBackgroundColorAndConfidenceOrBuilder() {
    return backgroundColorAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.getDefaultInstance() : backgroundColorAndConfidence_;
  }

  public static final int SUPPLEMENTARY_SIGN_AND_CONFIDENCE_FIELD_NUMBER = 11;
  @SuppressWarnings("serial")
  private java.util.List<org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence> supplementarySignAndConfidence_;
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  @java.lang.Override
  public java.util.List<org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence> getSupplementarySignAndConfidenceList() {
    return supplementarySignAndConfidence_;
  }
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder> 
      getSupplementarySignAndConfidenceOrBuilderList() {
    return supplementarySignAndConfidence_;
  }
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  @java.lang.Override
  public int getSupplementarySignAndConfidenceCount() {
    return supplementarySignAndConfidence_.size();
  }
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence getSupplementarySignAndConfidence(int index) {
    return supplementarySignAndConfidence_.get(index);
  }
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder getSupplementarySignAndConfidenceOrBuilder(
      int index) {
    return supplementarySignAndConfidence_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getEnvelope());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getExistenceConfidence());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getDetectionStatus());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(4, getRectangularBoxAndAccuracy());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeMessage(5, getShapeAndConfidence());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeMessage(6, getTypeAndConfidence());
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeMessage(7, getValueAndConfidence());
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeMessage(8, getPermanencyAndConfidence());
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeMessage(9, getValidationAndConfidence());
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeMessage(10, getBackgroundColorAndConfidence());
    }
    for (int i = 0; i < supplementarySignAndConfidence_.size(); i++) {
      output.writeMessage(11, supplementarySignAndConfidence_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getEnvelope());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getExistenceConfidence());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getDetectionStatus());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getRectangularBoxAndAccuracy());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getShapeAndConfidence());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getTypeAndConfidence());
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getValueAndConfidence());
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getPermanencyAndConfidence());
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getValidationAndConfidence());
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getBackgroundColorAndConfidence());
    }
    for (int i = 0; i < supplementarySignAndConfidence_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, supplementarySignAndConfidence_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.sensoris.categories.trafficregulation.TrafficSign)) {
      return super.equals(obj);
    }
    org.sensoris.categories.trafficregulation.TrafficSign other = (org.sensoris.categories.trafficregulation.TrafficSign) obj;

    if (hasEnvelope() != other.hasEnvelope()) return false;
    if (hasEnvelope()) {
      if (!getEnvelope()
          .equals(other.getEnvelope())) return false;
    }
    if (hasExistenceConfidence() != other.hasExistenceConfidence()) return false;
    if (hasExistenceConfidence()) {
      if (!getExistenceConfidence()
          .equals(other.getExistenceConfidence())) return false;
    }
    if (hasDetectionStatus() != other.hasDetectionStatus()) return false;
    if (hasDetectionStatus()) {
      if (!getDetectionStatus()
          .equals(other.getDetectionStatus())) return false;
    }
    if (hasRectangularBoxAndAccuracy() != other.hasRectangularBoxAndAccuracy()) return false;
    if (hasRectangularBoxAndAccuracy()) {
      if (!getRectangularBoxAndAccuracy()
          .equals(other.getRectangularBoxAndAccuracy())) return false;
    }
    if (hasShapeAndConfidence() != other.hasShapeAndConfidence()) return false;
    if (hasShapeAndConfidence()) {
      if (!getShapeAndConfidence()
          .equals(other.getShapeAndConfidence())) return false;
    }
    if (hasTypeAndConfidence() != other.hasTypeAndConfidence()) return false;
    if (hasTypeAndConfidence()) {
      if (!getTypeAndConfidence()
          .equals(other.getTypeAndConfidence())) return false;
    }
    if (hasValueAndConfidence() != other.hasValueAndConfidence()) return false;
    if (hasValueAndConfidence()) {
      if (!getValueAndConfidence()
          .equals(other.getValueAndConfidence())) return false;
    }
    if (hasPermanencyAndConfidence() != other.hasPermanencyAndConfidence()) return false;
    if (hasPermanencyAndConfidence()) {
      if (!getPermanencyAndConfidence()
          .equals(other.getPermanencyAndConfidence())) return false;
    }
    if (hasValidationAndConfidence() != other.hasValidationAndConfidence()) return false;
    if (hasValidationAndConfidence()) {
      if (!getValidationAndConfidence()
          .equals(other.getValidationAndConfidence())) return false;
    }
    if (hasBackgroundColorAndConfidence() != other.hasBackgroundColorAndConfidence()) return false;
    if (hasBackgroundColorAndConfidence()) {
      if (!getBackgroundColorAndConfidence()
          .equals(other.getBackgroundColorAndConfidence())) return false;
    }
    if (!getSupplementarySignAndConfidenceList()
        .equals(other.getSupplementarySignAndConfidenceList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasEnvelope()) {
      hash = (37 * hash) + ENVELOPE_FIELD_NUMBER;
      hash = (53 * hash) + getEnvelope().hashCode();
    }
    if (hasExistenceConfidence()) {
      hash = (37 * hash) + EXISTENCE_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getExistenceConfidence().hashCode();
    }
    if (hasDetectionStatus()) {
      hash = (37 * hash) + DETECTION_STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getDetectionStatus().hashCode();
    }
    if (hasRectangularBoxAndAccuracy()) {
      hash = (37 * hash) + RECTANGULAR_BOX_AND_ACCURACY_FIELD_NUMBER;
      hash = (53 * hash) + getRectangularBoxAndAccuracy().hashCode();
    }
    if (hasShapeAndConfidence()) {
      hash = (37 * hash) + SHAPE_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getShapeAndConfidence().hashCode();
    }
    if (hasTypeAndConfidence()) {
      hash = (37 * hash) + TYPE_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getTypeAndConfidence().hashCode();
    }
    if (hasValueAndConfidence()) {
      hash = (37 * hash) + VALUE_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getValueAndConfidence().hashCode();
    }
    if (hasPermanencyAndConfidence()) {
      hash = (37 * hash) + PERMANENCY_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getPermanencyAndConfidence().hashCode();
    }
    if (hasValidationAndConfidence()) {
      hash = (37 * hash) + VALIDATION_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getValidationAndConfidence().hashCode();
    }
    if (hasBackgroundColorAndConfidence()) {
      hash = (37 * hash) + BACKGROUND_COLOR_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getBackgroundColorAndConfidence().hashCode();
    }
    if (getSupplementarySignAndConfidenceCount() > 0) {
      hash = (37 * hash) + SUPPLEMENTARY_SIGN_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getSupplementarySignAndConfidenceList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.sensoris.categories.trafficregulation.TrafficSign parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.sensoris.categories.trafficregulation.TrafficSign parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.trafficregulation.TrafficSign parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.sensoris.categories.trafficregulation.TrafficSign prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * TrafficSign.
   *
   * A TrafficSign includes the subcategories traffic signs, rectangular signboards, and advertisement signs.
   *
   * &#64;relation 1 sensoris.protobuf.categories.trafficregulation.TrafficSign CONTAIN 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign
   * &#64;relation 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign GROUP
   * &#64;relation 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign IMPACT 1 sensoris.protobuf.categories.roadattribution.Lane
   * &#64;relation 1..* sensoris.protobuf.categories.objectdetection CONTAIN 1 sensoris.protobuf.categories.roadattribution.Lane
   * &#64;relation 1 sensoris.protobuf.categories.trafficregulation.TrafficSign MAP_REFERENCE 1 sensoris.protobuf.categories.map.MapReference
   * &#64;relation 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign IMPACT 1 sensoris.protobuf.categories.drivingbehavior.ParkingStatus
   * &#64;relation 1 sensoris.protobuf.categories.objectdetection.MovableObject CONTAIN 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign
   * &#64;relation 1 sensoris.protobuf.categories.objectdetection.StaticObject CONTAIN 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign
   * &#64;relation 1 sensoris.protobuf.categories.roadattribution.SurfaceMarking EQUAL 1 sensoris.protobuf.categories.trafficregulation.TrafficSign
   * &#64;relation 1..* sensoris.protobuf.categories.trafficregulation.TrafficSign IMPACT 1 sensoris.protobuf.categories.trafficevents.RoadWorks
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.trafficregulation.TrafficSign}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.trafficregulation.TrafficSign)
      org.sensoris.categories.trafficregulation.TrafficSignOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.trafficregulation.TrafficSign.class, org.sensoris.categories.trafficregulation.TrafficSign.Builder.class);
    }

    // Construct using org.sensoris.categories.trafficregulation.TrafficSign.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getEnvelopeFieldBuilder();
        getExistenceConfidenceFieldBuilder();
        getDetectionStatusFieldBuilder();
        getRectangularBoxAndAccuracyFieldBuilder();
        getShapeAndConfidenceFieldBuilder();
        getTypeAndConfidenceFieldBuilder();
        getValueAndConfidenceFieldBuilder();
        getPermanencyAndConfidenceFieldBuilder();
        getValidationAndConfidenceFieldBuilder();
        getBackgroundColorAndConfidenceFieldBuilder();
        getSupplementarySignAndConfidenceFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      envelope_ = null;
      if (envelopeBuilder_ != null) {
        envelopeBuilder_.dispose();
        envelopeBuilder_ = null;
      }
      existenceConfidence_ = null;
      if (existenceConfidenceBuilder_ != null) {
        existenceConfidenceBuilder_.dispose();
        existenceConfidenceBuilder_ = null;
      }
      detectionStatus_ = null;
      if (detectionStatusBuilder_ != null) {
        detectionStatusBuilder_.dispose();
        detectionStatusBuilder_ = null;
      }
      rectangularBoxAndAccuracy_ = null;
      if (rectangularBoxAndAccuracyBuilder_ != null) {
        rectangularBoxAndAccuracyBuilder_.dispose();
        rectangularBoxAndAccuracyBuilder_ = null;
      }
      shapeAndConfidence_ = null;
      if (shapeAndConfidenceBuilder_ != null) {
        shapeAndConfidenceBuilder_.dispose();
        shapeAndConfidenceBuilder_ = null;
      }
      typeAndConfidence_ = null;
      if (typeAndConfidenceBuilder_ != null) {
        typeAndConfidenceBuilder_.dispose();
        typeAndConfidenceBuilder_ = null;
      }
      valueAndConfidence_ = null;
      if (valueAndConfidenceBuilder_ != null) {
        valueAndConfidenceBuilder_.dispose();
        valueAndConfidenceBuilder_ = null;
      }
      permanencyAndConfidence_ = null;
      if (permanencyAndConfidenceBuilder_ != null) {
        permanencyAndConfidenceBuilder_.dispose();
        permanencyAndConfidenceBuilder_ = null;
      }
      validationAndConfidence_ = null;
      if (validationAndConfidenceBuilder_ != null) {
        validationAndConfidenceBuilder_.dispose();
        validationAndConfidenceBuilder_ = null;
      }
      backgroundColorAndConfidence_ = null;
      if (backgroundColorAndConfidenceBuilder_ != null) {
        backgroundColorAndConfidenceBuilder_.dispose();
        backgroundColorAndConfidenceBuilder_ = null;
      }
      if (supplementarySignAndConfidenceBuilder_ == null) {
        supplementarySignAndConfidence_ = java.util.Collections.emptyList();
      } else {
        supplementarySignAndConfidence_ = null;
        supplementarySignAndConfidenceBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000400);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.sensoris.categories.trafficregulation.SensorisTrafficRegulationCategory.internal_static_sensoris_protobuf_categories_trafficregulation_TrafficSign_descriptor;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign getDefaultInstanceForType() {
      return org.sensoris.categories.trafficregulation.TrafficSign.getDefaultInstance();
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign build() {
      org.sensoris.categories.trafficregulation.TrafficSign result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.sensoris.categories.trafficregulation.TrafficSign buildPartial() {
      org.sensoris.categories.trafficregulation.TrafficSign result = new org.sensoris.categories.trafficregulation.TrafficSign(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.sensoris.categories.trafficregulation.TrafficSign result) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0)) {
          supplementarySignAndConfidence_ = java.util.Collections.unmodifiableList(supplementarySignAndConfidence_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.supplementarySignAndConfidence_ = supplementarySignAndConfidence_;
      } else {
        result.supplementarySignAndConfidence_ = supplementarySignAndConfidenceBuilder_.build();
      }
    }

    private void buildPartial0(org.sensoris.categories.trafficregulation.TrafficSign result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.envelope_ = envelopeBuilder_ == null
            ? envelope_
            : envelopeBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.existenceConfidence_ = existenceConfidenceBuilder_ == null
            ? existenceConfidence_
            : existenceConfidenceBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.detectionStatus_ = detectionStatusBuilder_ == null
            ? detectionStatus_
            : detectionStatusBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.rectangularBoxAndAccuracy_ = rectangularBoxAndAccuracyBuilder_ == null
            ? rectangularBoxAndAccuracy_
            : rectangularBoxAndAccuracyBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.shapeAndConfidence_ = shapeAndConfidenceBuilder_ == null
            ? shapeAndConfidence_
            : shapeAndConfidenceBuilder_.build();
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.typeAndConfidence_ = typeAndConfidenceBuilder_ == null
            ? typeAndConfidence_
            : typeAndConfidenceBuilder_.build();
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.valueAndConfidence_ = valueAndConfidenceBuilder_ == null
            ? valueAndConfidence_
            : valueAndConfidenceBuilder_.build();
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.permanencyAndConfidence_ = permanencyAndConfidenceBuilder_ == null
            ? permanencyAndConfidence_
            : permanencyAndConfidenceBuilder_.build();
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.validationAndConfidence_ = validationAndConfidenceBuilder_ == null
            ? validationAndConfidence_
            : validationAndConfidenceBuilder_.build();
        to_bitField0_ |= 0x00000100;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.backgroundColorAndConfidence_ = backgroundColorAndConfidenceBuilder_ == null
            ? backgroundColorAndConfidence_
            : backgroundColorAndConfidenceBuilder_.build();
        to_bitField0_ |= 0x00000200;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.sensoris.categories.trafficregulation.TrafficSign) {
        return mergeFrom((org.sensoris.categories.trafficregulation.TrafficSign)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.sensoris.categories.trafficregulation.TrafficSign other) {
      if (other == org.sensoris.categories.trafficregulation.TrafficSign.getDefaultInstance()) return this;
      if (other.hasEnvelope()) {
        mergeEnvelope(other.getEnvelope());
      }
      if (other.hasExistenceConfidence()) {
        mergeExistenceConfidence(other.getExistenceConfidence());
      }
      if (other.hasDetectionStatus()) {
        mergeDetectionStatus(other.getDetectionStatus());
      }
      if (other.hasRectangularBoxAndAccuracy()) {
        mergeRectangularBoxAndAccuracy(other.getRectangularBoxAndAccuracy());
      }
      if (other.hasShapeAndConfidence()) {
        mergeShapeAndConfidence(other.getShapeAndConfidence());
      }
      if (other.hasTypeAndConfidence()) {
        mergeTypeAndConfidence(other.getTypeAndConfidence());
      }
      if (other.hasValueAndConfidence()) {
        mergeValueAndConfidence(other.getValueAndConfidence());
      }
      if (other.hasPermanencyAndConfidence()) {
        mergePermanencyAndConfidence(other.getPermanencyAndConfidence());
      }
      if (other.hasValidationAndConfidence()) {
        mergeValidationAndConfidence(other.getValidationAndConfidence());
      }
      if (other.hasBackgroundColorAndConfidence()) {
        mergeBackgroundColorAndConfidence(other.getBackgroundColorAndConfidence());
      }
      if (supplementarySignAndConfidenceBuilder_ == null) {
        if (!other.supplementarySignAndConfidence_.isEmpty()) {
          if (supplementarySignAndConfidence_.isEmpty()) {
            supplementarySignAndConfidence_ = other.supplementarySignAndConfidence_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureSupplementarySignAndConfidenceIsMutable();
            supplementarySignAndConfidence_.addAll(other.supplementarySignAndConfidence_);
          }
          onChanged();
        }
      } else {
        if (!other.supplementarySignAndConfidence_.isEmpty()) {
          if (supplementarySignAndConfidenceBuilder_.isEmpty()) {
            supplementarySignAndConfidenceBuilder_.dispose();
            supplementarySignAndConfidenceBuilder_ = null;
            supplementarySignAndConfidence_ = other.supplementarySignAndConfidence_;
            bitField0_ = (bitField0_ & ~0x00000400);
            supplementarySignAndConfidenceBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSupplementarySignAndConfidenceFieldBuilder() : null;
          } else {
            supplementarySignAndConfidenceBuilder_.addAllMessages(other.supplementarySignAndConfidence_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getEnvelopeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getExistenceConfidenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getDetectionStatusFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getRectangularBoxAndAccuracyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getShapeAndConfidenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getTypeAndConfidenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getValueAndConfidenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getPermanencyAndConfidenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getValidationAndConfidenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000100;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getBackgroundColorAndConfidenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000200;
              break;
            } // case 82
            case 90: {
              org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence m =
                  input.readMessage(
                      org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.parser(),
                      extensionRegistry);
              if (supplementarySignAndConfidenceBuilder_ == null) {
                ensureSupplementarySignAndConfidenceIsMutable();
                supplementarySignAndConfidence_.add(m);
              } else {
                supplementarySignAndConfidenceBuilder_.addMessage(m);
              }
              break;
            } // case 90
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.sensoris.types.base.EventEnvelope envelope_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder> envelopeBuilder_;
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     * @return Whether the envelope field is set.
     */
    public boolean hasEnvelope() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     * @return The envelope.
     */
    public org.sensoris.types.base.EventEnvelope getEnvelope() {
      if (envelopeBuilder_ == null) {
        return envelope_ == null ? org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
      } else {
        return envelopeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder setEnvelope(org.sensoris.types.base.EventEnvelope value) {
      if (envelopeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        envelope_ = value;
      } else {
        envelopeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder setEnvelope(
        org.sensoris.types.base.EventEnvelope.Builder builderForValue) {
      if (envelopeBuilder_ == null) {
        envelope_ = builderForValue.build();
      } else {
        envelopeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder mergeEnvelope(org.sensoris.types.base.EventEnvelope value) {
      if (envelopeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          envelope_ != null &&
          envelope_ != org.sensoris.types.base.EventEnvelope.getDefaultInstance()) {
          getEnvelopeBuilder().mergeFrom(value);
        } else {
          envelope_ = value;
        }
      } else {
        envelopeBuilder_.mergeFrom(value);
      }
      if (envelope_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder clearEnvelope() {
      bitField0_ = (bitField0_ & ~0x00000001);
      envelope_ = null;
      if (envelopeBuilder_ != null) {
        envelopeBuilder_.dispose();
        envelopeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public org.sensoris.types.base.EventEnvelope.Builder getEnvelopeBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getEnvelopeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder() {
      if (envelopeBuilder_ != null) {
        return envelopeBuilder_.getMessageOrBuilder();
      } else {
        return envelope_ == null ?
            org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
      }
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder> 
        getEnvelopeFieldBuilder() {
      if (envelopeBuilder_ == null) {
        envelopeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder>(
                getEnvelope(),
                getParentForChildren(),
                isClean());
        envelope_ = null;
      }
      return envelopeBuilder_;
    }

    private org.sensoris.types.base.Confidence existenceConfidence_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> existenceConfidenceBuilder_;
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     * @return Whether the existenceConfidence field is set.
     */
    public boolean hasExistenceConfidence() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     * @return The existenceConfidence.
     */
    public org.sensoris.types.base.Confidence getExistenceConfidence() {
      if (existenceConfidenceBuilder_ == null) {
        return existenceConfidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
      } else {
        return existenceConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     */
    public Builder setExistenceConfidence(org.sensoris.types.base.Confidence value) {
      if (existenceConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        existenceConfidence_ = value;
      } else {
        existenceConfidenceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     */
    public Builder setExistenceConfidence(
        org.sensoris.types.base.Confidence.Builder builderForValue) {
      if (existenceConfidenceBuilder_ == null) {
        existenceConfidence_ = builderForValue.build();
      } else {
        existenceConfidenceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     */
    public Builder mergeExistenceConfidence(org.sensoris.types.base.Confidence value) {
      if (existenceConfidenceBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          existenceConfidence_ != null &&
          existenceConfidence_ != org.sensoris.types.base.Confidence.getDefaultInstance()) {
          getExistenceConfidenceBuilder().mergeFrom(value);
        } else {
          existenceConfidence_ = value;
        }
      } else {
        existenceConfidenceBuilder_.mergeFrom(value);
      }
      if (existenceConfidence_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     */
    public Builder clearExistenceConfidence() {
      bitField0_ = (bitField0_ & ~0x00000002);
      existenceConfidence_ = null;
      if (existenceConfidenceBuilder_ != null) {
        existenceConfidenceBuilder_.dispose();
        existenceConfidenceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     */
    public org.sensoris.types.base.Confidence.Builder getExistenceConfidenceBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getExistenceConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     */
    public org.sensoris.types.base.ConfidenceOrBuilder getExistenceConfidenceOrBuilder() {
      if (existenceConfidenceBuilder_ != null) {
        return existenceConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return existenceConfidence_ == null ?
            org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
      }
    }
    /**
     * <pre>
     * Confidence that a main sign has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
        getExistenceConfidenceFieldBuilder() {
      if (existenceConfidenceBuilder_ == null) {
        existenceConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                getExistenceConfidence(),
                getParentForChildren(),
                isClean());
        existenceConfidence_ = null;
      }
      return existenceConfidenceBuilder_;
    }

    private org.sensoris.types.base.EventDetectionStatus detectionStatus_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder> detectionStatusBuilder_;
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     * @return Whether the detectionStatus field is set.
     */
    public boolean hasDetectionStatus() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     * @return The detectionStatus.
     */
    public org.sensoris.types.base.EventDetectionStatus getDetectionStatus() {
      if (detectionStatusBuilder_ == null) {
        return detectionStatus_ == null ? org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
      } else {
        return detectionStatusBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     */
    public Builder setDetectionStatus(org.sensoris.types.base.EventDetectionStatus value) {
      if (detectionStatusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        detectionStatus_ = value;
      } else {
        detectionStatusBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     */
    public Builder setDetectionStatus(
        org.sensoris.types.base.EventDetectionStatus.Builder builderForValue) {
      if (detectionStatusBuilder_ == null) {
        detectionStatus_ = builderForValue.build();
      } else {
        detectionStatusBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     */
    public Builder mergeDetectionStatus(org.sensoris.types.base.EventDetectionStatus value) {
      if (detectionStatusBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          detectionStatus_ != null &&
          detectionStatus_ != org.sensoris.types.base.EventDetectionStatus.getDefaultInstance()) {
          getDetectionStatusBuilder().mergeFrom(value);
        } else {
          detectionStatus_ = value;
        }
      } else {
        detectionStatusBuilder_.mergeFrom(value);
      }
      if (detectionStatus_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     */
    public Builder clearDetectionStatus() {
      bitField0_ = (bitField0_ & ~0x00000004);
      detectionStatus_ = null;
      if (detectionStatusBuilder_ != null) {
        detectionStatusBuilder_.dispose();
        detectionStatusBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     */
    public org.sensoris.types.base.EventDetectionStatus.Builder getDetectionStatusBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getDetectionStatusFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     */
    public org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder() {
      if (detectionStatusBuilder_ != null) {
        return detectionStatusBuilder_.getMessageOrBuilder();
      } else {
        return detectionStatus_ == null ?
            org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
      }
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder> 
        getDetectionStatusFieldBuilder() {
      if (detectionStatusBuilder_ == null) {
        detectionStatusBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder>(
                getDetectionStatus(),
                getParentForChildren(),
                isClean());
        detectionStatus_ = null;
      }
      return detectionStatusBuilder_;
    }

    private org.sensoris.types.spatial.RectangularBoxAndAccuracy rectangularBoxAndAccuracy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.spatial.RectangularBoxAndAccuracy, org.sensoris.types.spatial.RectangularBoxAndAccuracy.Builder, org.sensoris.types.spatial.RectangularBoxAndAccuracyOrBuilder> rectangularBoxAndAccuracyBuilder_;
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     * @return Whether the rectangularBoxAndAccuracy field is set.
     */
    public boolean hasRectangularBoxAndAccuracy() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     * @return The rectangularBoxAndAccuracy.
     */
    public org.sensoris.types.spatial.RectangularBoxAndAccuracy getRectangularBoxAndAccuracy() {
      if (rectangularBoxAndAccuracyBuilder_ == null) {
        return rectangularBoxAndAccuracy_ == null ? org.sensoris.types.spatial.RectangularBoxAndAccuracy.getDefaultInstance() : rectangularBoxAndAccuracy_;
      } else {
        return rectangularBoxAndAccuracyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     */
    public Builder setRectangularBoxAndAccuracy(org.sensoris.types.spatial.RectangularBoxAndAccuracy value) {
      if (rectangularBoxAndAccuracyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rectangularBoxAndAccuracy_ = value;
      } else {
        rectangularBoxAndAccuracyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     */
    public Builder setRectangularBoxAndAccuracy(
        org.sensoris.types.spatial.RectangularBoxAndAccuracy.Builder builderForValue) {
      if (rectangularBoxAndAccuracyBuilder_ == null) {
        rectangularBoxAndAccuracy_ = builderForValue.build();
      } else {
        rectangularBoxAndAccuracyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     */
    public Builder mergeRectangularBoxAndAccuracy(org.sensoris.types.spatial.RectangularBoxAndAccuracy value) {
      if (rectangularBoxAndAccuracyBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          rectangularBoxAndAccuracy_ != null &&
          rectangularBoxAndAccuracy_ != org.sensoris.types.spatial.RectangularBoxAndAccuracy.getDefaultInstance()) {
          getRectangularBoxAndAccuracyBuilder().mergeFrom(value);
        } else {
          rectangularBoxAndAccuracy_ = value;
        }
      } else {
        rectangularBoxAndAccuracyBuilder_.mergeFrom(value);
      }
      if (rectangularBoxAndAccuracy_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     */
    public Builder clearRectangularBoxAndAccuracy() {
      bitField0_ = (bitField0_ & ~0x00000008);
      rectangularBoxAndAccuracy_ = null;
      if (rectangularBoxAndAccuracyBuilder_ != null) {
        rectangularBoxAndAccuracyBuilder_.dispose();
        rectangularBoxAndAccuracyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     */
    public org.sensoris.types.spatial.RectangularBoxAndAccuracy.Builder getRectangularBoxAndAccuracyBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getRectangularBoxAndAccuracyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     */
    public org.sensoris.types.spatial.RectangularBoxAndAccuracyOrBuilder getRectangularBoxAndAccuracyOrBuilder() {
      if (rectangularBoxAndAccuracyBuilder_ != null) {
        return rectangularBoxAndAccuracyBuilder_.getMessageOrBuilder();
      } else {
        return rectangularBoxAndAccuracy_ == null ?
            org.sensoris.types.spatial.RectangularBoxAndAccuracy.getDefaultInstance() : rectangularBoxAndAccuracy_;
      }
    }
    /**
     * <pre>
     * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.spatial.RectangularBoxAndAccuracy, org.sensoris.types.spatial.RectangularBoxAndAccuracy.Builder, org.sensoris.types.spatial.RectangularBoxAndAccuracyOrBuilder> 
        getRectangularBoxAndAccuracyFieldBuilder() {
      if (rectangularBoxAndAccuracyBuilder_ == null) {
        rectangularBoxAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.spatial.RectangularBoxAndAccuracy, org.sensoris.types.spatial.RectangularBoxAndAccuracy.Builder, org.sensoris.types.spatial.RectangularBoxAndAccuracyOrBuilder>(
                getRectangularBoxAndAccuracy(),
                getParentForChildren(),
                isClean());
        rectangularBoxAndAccuracy_ = null;
      }
      return rectangularBoxAndAccuracyBuilder_;
    }

    private org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence shapeAndConfidence_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidenceOrBuilder> shapeAndConfidenceBuilder_;
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     * @return Whether the shapeAndConfidence field is set.
     */
    public boolean hasShapeAndConfidence() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     * @return The shapeAndConfidence.
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence getShapeAndConfidence() {
      if (shapeAndConfidenceBuilder_ == null) {
        return shapeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.getDefaultInstance() : shapeAndConfidence_;
      } else {
        return shapeAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     */
    public Builder setShapeAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence value) {
      if (shapeAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shapeAndConfidence_ = value;
      } else {
        shapeAndConfidenceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     */
    public Builder setShapeAndConfidence(
        org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Builder builderForValue) {
      if (shapeAndConfidenceBuilder_ == null) {
        shapeAndConfidence_ = builderForValue.build();
      } else {
        shapeAndConfidenceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     */
    public Builder mergeShapeAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence value) {
      if (shapeAndConfidenceBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          shapeAndConfidence_ != null &&
          shapeAndConfidence_ != org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.getDefaultInstance()) {
          getShapeAndConfidenceBuilder().mergeFrom(value);
        } else {
          shapeAndConfidence_ = value;
        }
      } else {
        shapeAndConfidenceBuilder_.mergeFrom(value);
      }
      if (shapeAndConfidence_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     */
    public Builder clearShapeAndConfidence() {
      bitField0_ = (bitField0_ & ~0x00000010);
      shapeAndConfidence_ = null;
      if (shapeAndConfidenceBuilder_ != null) {
        shapeAndConfidenceBuilder_.dispose();
        shapeAndConfidenceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Builder getShapeAndConfidenceBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getShapeAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidenceOrBuilder getShapeAndConfidenceOrBuilder() {
      if (shapeAndConfidenceBuilder_ != null) {
        return shapeAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return shapeAndConfidence_ == null ?
            org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.getDefaultInstance() : shapeAndConfidence_;
      }
    }
    /**
     * <pre>
     * Shape and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidenceOrBuilder> 
        getShapeAndConfidenceFieldBuilder() {
      if (shapeAndConfidenceBuilder_ == null) {
        shapeAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidenceOrBuilder>(
                getShapeAndConfidence(),
                getParentForChildren(),
                isClean());
        shapeAndConfidence_ = null;
      }
      return shapeAndConfidenceBuilder_;
    }

    private org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence typeAndConfidence_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidenceOrBuilder> typeAndConfidenceBuilder_;
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     * @return Whether the typeAndConfidence field is set.
     */
    public boolean hasTypeAndConfidence() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     * @return The typeAndConfidence.
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence getTypeAndConfidence() {
      if (typeAndConfidenceBuilder_ == null) {
        return typeAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
      } else {
        return typeAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     */
    public Builder setTypeAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence value) {
      if (typeAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        typeAndConfidence_ = value;
      } else {
        typeAndConfidenceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     */
    public Builder setTypeAndConfidence(
        org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Builder builderForValue) {
      if (typeAndConfidenceBuilder_ == null) {
        typeAndConfidence_ = builderForValue.build();
      } else {
        typeAndConfidenceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     */
    public Builder mergeTypeAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence value) {
      if (typeAndConfidenceBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          typeAndConfidence_ != null &&
          typeAndConfidence_ != org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.getDefaultInstance()) {
          getTypeAndConfidenceBuilder().mergeFrom(value);
        } else {
          typeAndConfidence_ = value;
        }
      } else {
        typeAndConfidenceBuilder_.mergeFrom(value);
      }
      if (typeAndConfidence_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     */
    public Builder clearTypeAndConfidence() {
      bitField0_ = (bitField0_ & ~0x00000020);
      typeAndConfidence_ = null;
      if (typeAndConfidenceBuilder_ != null) {
        typeAndConfidenceBuilder_.dispose();
        typeAndConfidenceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Builder getTypeAndConfidenceBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getTypeAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder() {
      if (typeAndConfidenceBuilder_ != null) {
        return typeAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return typeAndConfidence_ == null ?
            org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
      }
    }
    /**
     * <pre>
     * Type and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidenceOrBuilder> 
        getTypeAndConfidenceFieldBuilder() {
      if (typeAndConfidenceBuilder_ == null) {
        typeAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidenceOrBuilder>(
                getTypeAndConfidence(),
                getParentForChildren(),
                isClean());
        typeAndConfidence_ = null;
      }
      return typeAndConfidenceBuilder_;
    }

    private org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence valueAndConfidence_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder> valueAndConfidenceBuilder_;
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     * @return Whether the valueAndConfidence field is set.
     */
    public boolean hasValueAndConfidence() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     * @return The valueAndConfidence.
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getValueAndConfidence() {
      if (valueAndConfidenceBuilder_ == null) {
        return valueAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance() : valueAndConfidence_;
      } else {
        return valueAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     */
    public Builder setValueAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence value) {
      if (valueAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        valueAndConfidence_ = value;
      } else {
        valueAndConfidenceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     */
    public Builder setValueAndConfidence(
        org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder builderForValue) {
      if (valueAndConfidenceBuilder_ == null) {
        valueAndConfidence_ = builderForValue.build();
      } else {
        valueAndConfidenceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     */
    public Builder mergeValueAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence value) {
      if (valueAndConfidenceBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          valueAndConfidence_ != null &&
          valueAndConfidence_ != org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance()) {
          getValueAndConfidenceBuilder().mergeFrom(value);
        } else {
          valueAndConfidence_ = value;
        }
      } else {
        valueAndConfidenceBuilder_.mergeFrom(value);
      }
      if (valueAndConfidence_ != null) {
        bitField0_ |= 0x00000040;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     */
    public Builder clearValueAndConfidence() {
      bitField0_ = (bitField0_ & ~0x00000040);
      valueAndConfidence_ = null;
      if (valueAndConfidenceBuilder_ != null) {
        valueAndConfidenceBuilder_.dispose();
        valueAndConfidenceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder getValueAndConfidenceBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getValueAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder getValueAndConfidenceOrBuilder() {
      if (valueAndConfidenceBuilder_ != null) {
        return valueAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return valueAndConfidence_ == null ?
            org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.getDefaultInstance() : valueAndConfidence_;
      }
    }
    /**
     * <pre>
     * Value of main sign in addition to type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder> 
        getValueAndConfidenceFieldBuilder() {
      if (valueAndConfidenceBuilder_ == null) {
        valueAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder>(
                getValueAndConfidence(),
                getParentForChildren(),
                isClean());
        valueAndConfidence_ = null;
      }
      return valueAndConfidenceBuilder_;
    }

    private org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanencyAndConfidence_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidenceOrBuilder> permanencyAndConfidenceBuilder_;
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     * @return Whether the permanencyAndConfidence field is set.
     */
    public boolean hasPermanencyAndConfidence() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     * @return The permanencyAndConfidence.
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence getPermanencyAndConfidence() {
      if (permanencyAndConfidenceBuilder_ == null) {
        return permanencyAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.getDefaultInstance() : permanencyAndConfidence_;
      } else {
        return permanencyAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     */
    public Builder setPermanencyAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence value) {
      if (permanencyAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        permanencyAndConfidence_ = value;
      } else {
        permanencyAndConfidenceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     */
    public Builder setPermanencyAndConfidence(
        org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Builder builderForValue) {
      if (permanencyAndConfidenceBuilder_ == null) {
        permanencyAndConfidence_ = builderForValue.build();
      } else {
        permanencyAndConfidenceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     */
    public Builder mergePermanencyAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence value) {
      if (permanencyAndConfidenceBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          permanencyAndConfidence_ != null &&
          permanencyAndConfidence_ != org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.getDefaultInstance()) {
          getPermanencyAndConfidenceBuilder().mergeFrom(value);
        } else {
          permanencyAndConfidence_ = value;
        }
      } else {
        permanencyAndConfidenceBuilder_.mergeFrom(value);
      }
      if (permanencyAndConfidence_ != null) {
        bitField0_ |= 0x00000080;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     */
    public Builder clearPermanencyAndConfidence() {
      bitField0_ = (bitField0_ & ~0x00000080);
      permanencyAndConfidence_ = null;
      if (permanencyAndConfidenceBuilder_ != null) {
        permanencyAndConfidenceBuilder_.dispose();
        permanencyAndConfidenceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Builder getPermanencyAndConfidenceBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getPermanencyAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidenceOrBuilder getPermanencyAndConfidenceOrBuilder() {
      if (permanencyAndConfidenceBuilder_ != null) {
        return permanencyAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return permanencyAndConfidence_ == null ?
            org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.getDefaultInstance() : permanencyAndConfidence_;
      }
    }
    /**
     * <pre>
     * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidenceOrBuilder> 
        getPermanencyAndConfidenceFieldBuilder() {
      if (permanencyAndConfidenceBuilder_ == null) {
        permanencyAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidenceOrBuilder>(
                getPermanencyAndConfidence(),
                getParentForChildren(),
                isClean());
        permanencyAndConfidence_ = null;
      }
      return permanencyAndConfidenceBuilder_;
    }

    private org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence validationAndConfidence_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidenceOrBuilder> validationAndConfidenceBuilder_;
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     * @return Whether the validationAndConfidence field is set.
     */
    public boolean hasValidationAndConfidence() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     * @return The validationAndConfidence.
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence getValidationAndConfidence() {
      if (validationAndConfidenceBuilder_ == null) {
        return validationAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.getDefaultInstance() : validationAndConfidence_;
      } else {
        return validationAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     */
    public Builder setValidationAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence value) {
      if (validationAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationAndConfidence_ = value;
      } else {
        validationAndConfidenceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     */
    public Builder setValidationAndConfidence(
        org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Builder builderForValue) {
      if (validationAndConfidenceBuilder_ == null) {
        validationAndConfidence_ = builderForValue.build();
      } else {
        validationAndConfidenceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     */
    public Builder mergeValidationAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence value) {
      if (validationAndConfidenceBuilder_ == null) {
        if (((bitField0_ & 0x00000100) != 0) &&
          validationAndConfidence_ != null &&
          validationAndConfidence_ != org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.getDefaultInstance()) {
          getValidationAndConfidenceBuilder().mergeFrom(value);
        } else {
          validationAndConfidence_ = value;
        }
      } else {
        validationAndConfidenceBuilder_.mergeFrom(value);
      }
      if (validationAndConfidence_ != null) {
        bitField0_ |= 0x00000100;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     */
    public Builder clearValidationAndConfidence() {
      bitField0_ = (bitField0_ & ~0x00000100);
      validationAndConfidence_ = null;
      if (validationAndConfidenceBuilder_ != null) {
        validationAndConfidenceBuilder_.dispose();
        validationAndConfidenceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Builder getValidationAndConfidenceBuilder() {
      bitField0_ |= 0x00000100;
      onChanged();
      return getValidationAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidenceOrBuilder getValidationAndConfidenceOrBuilder() {
      if (validationAndConfidenceBuilder_ != null) {
        return validationAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return validationAndConfidence_ == null ?
            org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.getDefaultInstance() : validationAndConfidence_;
      }
    }
    /**
     * <pre>
     * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidenceOrBuilder> 
        getValidationAndConfidenceFieldBuilder() {
      if (validationAndConfidenceBuilder_ == null) {
        validationAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidenceOrBuilder>(
                getValidationAndConfidence(),
                getParentForChildren(),
                isClean());
        validationAndConfidence_ = null;
      }
      return validationAndConfidenceBuilder_;
    }

    private org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence backgroundColorAndConfidence_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidenceOrBuilder> backgroundColorAndConfidenceBuilder_;
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     * @return Whether the backgroundColorAndConfidence field is set.
     */
    public boolean hasBackgroundColorAndConfidence() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     * @return The backgroundColorAndConfidence.
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence getBackgroundColorAndConfidence() {
      if (backgroundColorAndConfidenceBuilder_ == null) {
        return backgroundColorAndConfidence_ == null ? org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.getDefaultInstance() : backgroundColorAndConfidence_;
      } else {
        return backgroundColorAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     */
    public Builder setBackgroundColorAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence value) {
      if (backgroundColorAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        backgroundColorAndConfidence_ = value;
      } else {
        backgroundColorAndConfidenceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     */
    public Builder setBackgroundColorAndConfidence(
        org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Builder builderForValue) {
      if (backgroundColorAndConfidenceBuilder_ == null) {
        backgroundColorAndConfidence_ = builderForValue.build();
      } else {
        backgroundColorAndConfidenceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     */
    public Builder mergeBackgroundColorAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence value) {
      if (backgroundColorAndConfidenceBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0) &&
          backgroundColorAndConfidence_ != null &&
          backgroundColorAndConfidence_ != org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.getDefaultInstance()) {
          getBackgroundColorAndConfidenceBuilder().mergeFrom(value);
        } else {
          backgroundColorAndConfidence_ = value;
        }
      } else {
        backgroundColorAndConfidenceBuilder_.mergeFrom(value);
      }
      if (backgroundColorAndConfidence_ != null) {
        bitField0_ |= 0x00000200;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     */
    public Builder clearBackgroundColorAndConfidence() {
      bitField0_ = (bitField0_ & ~0x00000200);
      backgroundColorAndConfidence_ = null;
      if (backgroundColorAndConfidenceBuilder_ != null) {
        backgroundColorAndConfidenceBuilder_.dispose();
        backgroundColorAndConfidenceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Builder getBackgroundColorAndConfidenceBuilder() {
      bitField0_ |= 0x00000200;
      onChanged();
      return getBackgroundColorAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidenceOrBuilder getBackgroundColorAndConfidenceOrBuilder() {
      if (backgroundColorAndConfidenceBuilder_ != null) {
        return backgroundColorAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return backgroundColorAndConfidence_ == null ?
            org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.getDefaultInstance() : backgroundColorAndConfidence_;
      }
    }
    /**
     * <pre>
     * Dominant background color and confidence of main sign.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidenceOrBuilder> 
        getBackgroundColorAndConfidenceFieldBuilder() {
      if (backgroundColorAndConfidenceBuilder_ == null) {
        backgroundColorAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidenceOrBuilder>(
                getBackgroundColorAndConfidence(),
                getParentForChildren(),
                isClean());
        backgroundColorAndConfidence_ = null;
      }
      return backgroundColorAndConfidenceBuilder_;
    }

    private java.util.List<org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence> supplementarySignAndConfidence_ =
      java.util.Collections.emptyList();
    private void ensureSupplementarySignAndConfidenceIsMutable() {
      if (!((bitField0_ & 0x00000400) != 0)) {
        supplementarySignAndConfidence_ = new java.util.ArrayList<org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence>(supplementarySignAndConfidence_);
        bitField0_ |= 0x00000400;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder> supplementarySignAndConfidenceBuilder_;

    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public java.util.List<org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence> getSupplementarySignAndConfidenceList() {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        return java.util.Collections.unmodifiableList(supplementarySignAndConfidence_);
      } else {
        return supplementarySignAndConfidenceBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public int getSupplementarySignAndConfidenceCount() {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        return supplementarySignAndConfidence_.size();
      } else {
        return supplementarySignAndConfidenceBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence getSupplementarySignAndConfidence(int index) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        return supplementarySignAndConfidence_.get(index);
      } else {
        return supplementarySignAndConfidenceBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder setSupplementarySignAndConfidence(
        int index, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence value) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSupplementarySignAndConfidenceIsMutable();
        supplementarySignAndConfidence_.set(index, value);
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder setSupplementarySignAndConfidence(
        int index, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder builderForValue) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        ensureSupplementarySignAndConfidenceIsMutable();
        supplementarySignAndConfidence_.set(index, builderForValue.build());
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder addSupplementarySignAndConfidence(org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence value) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSupplementarySignAndConfidenceIsMutable();
        supplementarySignAndConfidence_.add(value);
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder addSupplementarySignAndConfidence(
        int index, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence value) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSupplementarySignAndConfidenceIsMutable();
        supplementarySignAndConfidence_.add(index, value);
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder addSupplementarySignAndConfidence(
        org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder builderForValue) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        ensureSupplementarySignAndConfidenceIsMutable();
        supplementarySignAndConfidence_.add(builderForValue.build());
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder addSupplementarySignAndConfidence(
        int index, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder builderForValue) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        ensureSupplementarySignAndConfidenceIsMutable();
        supplementarySignAndConfidence_.add(index, builderForValue.build());
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder addAllSupplementarySignAndConfidence(
        java.lang.Iterable<? extends org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence> values) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        ensureSupplementarySignAndConfidenceIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, supplementarySignAndConfidence_);
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder clearSupplementarySignAndConfidence() {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        supplementarySignAndConfidence_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public Builder removeSupplementarySignAndConfidence(int index) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        ensureSupplementarySignAndConfidenceIsMutable();
        supplementarySignAndConfidence_.remove(index);
        onChanged();
      } else {
        supplementarySignAndConfidenceBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder getSupplementarySignAndConfidenceBuilder(
        int index) {
      return getSupplementarySignAndConfidenceFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder getSupplementarySignAndConfidenceOrBuilder(
        int index) {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        return supplementarySignAndConfidence_.get(index);  } else {
        return supplementarySignAndConfidenceBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public java.util.List<? extends org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder> 
         getSupplementarySignAndConfidenceOrBuilderList() {
      if (supplementarySignAndConfidenceBuilder_ != null) {
        return supplementarySignAndConfidenceBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(supplementarySignAndConfidence_);
      }
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder addSupplementarySignAndConfidenceBuilder() {
      return getSupplementarySignAndConfidenceFieldBuilder().addBuilder(
          org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.getDefaultInstance());
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder addSupplementarySignAndConfidenceBuilder(
        int index) {
      return getSupplementarySignAndConfidenceFieldBuilder().addBuilder(
          index, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.getDefaultInstance());
    }
    /**
     * <pre>
     * Supplementary sign, which is an attached sign in addition to main sign.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
     */
    public java.util.List<org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder> 
         getSupplementarySignAndConfidenceBuilderList() {
      return getSupplementarySignAndConfidenceFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder> 
        getSupplementarySignAndConfidenceFieldBuilder() {
      if (supplementarySignAndConfidenceBuilder_ == null) {
        supplementarySignAndConfidenceBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.Builder, org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder>(
                supplementarySignAndConfidence_,
                ((bitField0_ & 0x00000400) != 0),
                getParentForChildren(),
                isClean());
        supplementarySignAndConfidence_ = null;
      }
      return supplementarySignAndConfidenceBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  }

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  private static final org.sensoris.categories.trafficregulation.TrafficSign DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.sensoris.categories.trafficregulation.TrafficSign();
  }

  public static org.sensoris.categories.trafficregulation.TrafficSign getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TrafficSign>
      PARSER = new com.google.protobuf.AbstractParser<TrafficSign>() {
    @java.lang.Override
    public TrafficSign parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TrafficSign> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TrafficSign> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.sensoris.categories.trafficregulation.TrafficSign getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

