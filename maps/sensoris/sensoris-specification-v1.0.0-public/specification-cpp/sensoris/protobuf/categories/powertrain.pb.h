// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/powertrain.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace powertrain {
class CruiseControlStatus;
struct CruiseControlStatusDefaultTypeInternal;
extern CruiseControlStatusDefaultTypeInternal _CruiseControlStatus_default_instance_;
class EngineStatus;
struct EngineStatusDefaultTypeInternal;
extern EngineStatusDefaultTypeInternal _EngineStatus_default_instance_;
class PowertrainCategory;
struct PowertrainCategoryDefaultTypeInternal;
extern PowertrainCategoryDefaultTypeInternal _PowertrainCategory_default_instance_;
class TransmissionStatus;
struct TransmissionStatusDefaultTypeInternal;
extern TransmissionStatusDefaultTypeInternal _TransmissionStatus_default_instance_;
}  // namespace powertrain
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace categories {
namespace powertrain {
enum EngineStatus_IgnitionStatus : int {
  EngineStatus_IgnitionStatus_UNKNOWN_IGNITION_STATUS = 0,
  EngineStatus_IgnitionStatus_IGNITION_LOCK = 1,
  EngineStatus_IgnitionStatus_IGNITION_OFF = 2,
  EngineStatus_IgnitionStatus_IGNITION_ACCESSORIES = 3,
  EngineStatus_IgnitionStatus_IGNITION_ON = 4,
  EngineStatus_IgnitionStatus_IGNITION_START = 5,
  EngineStatus_IgnitionStatus_EngineStatus_IgnitionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EngineStatus_IgnitionStatus_EngineStatus_IgnitionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EngineStatus_IgnitionStatus_IsValid(int value);
extern const uint32_t EngineStatus_IgnitionStatus_internal_data_[];
constexpr EngineStatus_IgnitionStatus EngineStatus_IgnitionStatus_IgnitionStatus_MIN = static_cast<EngineStatus_IgnitionStatus>(0);
constexpr EngineStatus_IgnitionStatus EngineStatus_IgnitionStatus_IgnitionStatus_MAX = static_cast<EngineStatus_IgnitionStatus>(5);
constexpr int EngineStatus_IgnitionStatus_IgnitionStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
EngineStatus_IgnitionStatus_descriptor();
template <typename T>
const std::string& EngineStatus_IgnitionStatus_Name(T value) {
  static_assert(std::is_same<T, EngineStatus_IgnitionStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IgnitionStatus_Name().");
  return EngineStatus_IgnitionStatus_Name(static_cast<EngineStatus_IgnitionStatus>(value));
}
template <>
inline const std::string& EngineStatus_IgnitionStatus_Name(EngineStatus_IgnitionStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EngineStatus_IgnitionStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool EngineStatus_IgnitionStatus_Parse(absl::string_view name, EngineStatus_IgnitionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EngineStatus_IgnitionStatus>(
      EngineStatus_IgnitionStatus_descriptor(), name, value);
}
enum EngineStatus_PowertrainStatus : int {
  EngineStatus_PowertrainStatus_UNKNOWN_POWERTRAIN_STATUS = 0,
  EngineStatus_PowertrainStatus_POWERTRAIN_OFF = 1,
  EngineStatus_PowertrainStatus_POWERTRAIN_ECO_MODE = 2,
  EngineStatus_PowertrainStatus_POWERTRAIN_READY = 3,
  EngineStatus_PowertrainStatus_EngineStatus_PowertrainStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EngineStatus_PowertrainStatus_EngineStatus_PowertrainStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EngineStatus_PowertrainStatus_IsValid(int value);
extern const uint32_t EngineStatus_PowertrainStatus_internal_data_[];
constexpr EngineStatus_PowertrainStatus EngineStatus_PowertrainStatus_PowertrainStatus_MIN = static_cast<EngineStatus_PowertrainStatus>(0);
constexpr EngineStatus_PowertrainStatus EngineStatus_PowertrainStatus_PowertrainStatus_MAX = static_cast<EngineStatus_PowertrainStatus>(3);
constexpr int EngineStatus_PowertrainStatus_PowertrainStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
EngineStatus_PowertrainStatus_descriptor();
template <typename T>
const std::string& EngineStatus_PowertrainStatus_Name(T value) {
  static_assert(std::is_same<T, EngineStatus_PowertrainStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PowertrainStatus_Name().");
  return EngineStatus_PowertrainStatus_Name(static_cast<EngineStatus_PowertrainStatus>(value));
}
template <>
inline const std::string& EngineStatus_PowertrainStatus_Name(EngineStatus_PowertrainStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EngineStatus_PowertrainStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool EngineStatus_PowertrainStatus_Parse(absl::string_view name, EngineStatus_PowertrainStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EngineStatus_PowertrainStatus>(
      EngineStatus_PowertrainStatus_descriptor(), name, value);
}
enum TransmissionStatus_GearMode : int {
  TransmissionStatus_GearMode_UNKNOWN_GEAR_MODE = 0,
  TransmissionStatus_GearMode_DRIVE = 1,
  TransmissionStatus_GearMode_MANUAL = 2,
  TransmissionStatus_GearMode_REVERSE = 3,
  TransmissionStatus_GearMode_PARK = 4,
  TransmissionStatus_GearMode_NEUTRAL = 5,
  TransmissionStatus_GearMode_TransmissionStatus_GearMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TransmissionStatus_GearMode_TransmissionStatus_GearMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TransmissionStatus_GearMode_IsValid(int value);
extern const uint32_t TransmissionStatus_GearMode_internal_data_[];
constexpr TransmissionStatus_GearMode TransmissionStatus_GearMode_GearMode_MIN = static_cast<TransmissionStatus_GearMode>(0);
constexpr TransmissionStatus_GearMode TransmissionStatus_GearMode_GearMode_MAX = static_cast<TransmissionStatus_GearMode>(5);
constexpr int TransmissionStatus_GearMode_GearMode_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
TransmissionStatus_GearMode_descriptor();
template <typename T>
const std::string& TransmissionStatus_GearMode_Name(T value) {
  static_assert(std::is_same<T, TransmissionStatus_GearMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GearMode_Name().");
  return TransmissionStatus_GearMode_Name(static_cast<TransmissionStatus_GearMode>(value));
}
template <>
inline const std::string& TransmissionStatus_GearMode_Name(TransmissionStatus_GearMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TransmissionStatus_GearMode_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool TransmissionStatus_GearMode_Parse(absl::string_view name, TransmissionStatus_GearMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransmissionStatus_GearMode>(
      TransmissionStatus_GearMode_descriptor(), name, value);
}
enum TransmissionStatus_DriveMode : int {
  TransmissionStatus_DriveMode_UNKNOWN_DRIVE_MODE = 0,
  TransmissionStatus_DriveMode_ECO = 1,
  TransmissionStatus_DriveMode_COMFORT = 2,
  TransmissionStatus_DriveMode_SPORT = 3,
  TransmissionStatus_DriveMode_SUPER_SPORT = 4,
  TransmissionStatus_DriveMode_TransmissionStatus_DriveMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TransmissionStatus_DriveMode_TransmissionStatus_DriveMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TransmissionStatus_DriveMode_IsValid(int value);
extern const uint32_t TransmissionStatus_DriveMode_internal_data_[];
constexpr TransmissionStatus_DriveMode TransmissionStatus_DriveMode_DriveMode_MIN = static_cast<TransmissionStatus_DriveMode>(0);
constexpr TransmissionStatus_DriveMode TransmissionStatus_DriveMode_DriveMode_MAX = static_cast<TransmissionStatus_DriveMode>(4);
constexpr int TransmissionStatus_DriveMode_DriveMode_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
TransmissionStatus_DriveMode_descriptor();
template <typename T>
const std::string& TransmissionStatus_DriveMode_Name(T value) {
  static_assert(std::is_same<T, TransmissionStatus_DriveMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DriveMode_Name().");
  return TransmissionStatus_DriveMode_Name(static_cast<TransmissionStatus_DriveMode>(value));
}
template <>
inline const std::string& TransmissionStatus_DriveMode_Name(TransmissionStatus_DriveMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TransmissionStatus_DriveMode_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool TransmissionStatus_DriveMode_Parse(absl::string_view name, TransmissionStatus_DriveMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransmissionStatus_DriveMode>(
      TransmissionStatus_DriveMode_descriptor(), name, value);
}
enum CruiseControlStatus_Type : int {
  CruiseControlStatus_Type_UNKNOWN_TYPE = 0,
  CruiseControlStatus_Type_SPEED = 1,
  CruiseControlStatus_Type_SPEED_AND_DISTANCE = 2,
  CruiseControlStatus_Type_CruiseControlStatus_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CruiseControlStatus_Type_CruiseControlStatus_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CruiseControlStatus_Type_IsValid(int value);
extern const uint32_t CruiseControlStatus_Type_internal_data_[];
constexpr CruiseControlStatus_Type CruiseControlStatus_Type_Type_MIN = static_cast<CruiseControlStatus_Type>(0);
constexpr CruiseControlStatus_Type CruiseControlStatus_Type_Type_MAX = static_cast<CruiseControlStatus_Type>(2);
constexpr int CruiseControlStatus_Type_Type_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CruiseControlStatus_Type_descriptor();
template <typename T>
const std::string& CruiseControlStatus_Type_Name(T value) {
  static_assert(std::is_same<T, CruiseControlStatus_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return CruiseControlStatus_Type_Name(static_cast<CruiseControlStatus_Type>(value));
}
template <>
inline const std::string& CruiseControlStatus_Type_Name(CruiseControlStatus_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CruiseControlStatus_Type_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CruiseControlStatus_Type_Parse(absl::string_view name, CruiseControlStatus_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CruiseControlStatus_Type>(
      CruiseControlStatus_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class EngineStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.powertrain.EngineStatus) */ {
 public:
  inline EngineStatus() : EngineStatus(nullptr) {}
  ~EngineStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EngineStatus(::google::protobuf::internal::ConstantInitialized);

  inline EngineStatus(const EngineStatus& from)
      : EngineStatus(nullptr, from) {}
  EngineStatus(EngineStatus&& from) noexcept
    : EngineStatus() {
    *this = ::std::move(from);
  }

  inline EngineStatus& operator=(const EngineStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineStatus& operator=(EngineStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EngineStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const EngineStatus* internal_default_instance() {
    return reinterpret_cast<const EngineStatus*>(
               &_EngineStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EngineStatus& a, EngineStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EngineStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EngineStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EngineStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EngineStatus& from) {
    EngineStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EngineStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.powertrain.EngineStatus";
  }
  protected:
  explicit EngineStatus(::google::protobuf::Arena* arena);
  EngineStatus(::google::protobuf::Arena* arena, const EngineStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using IgnitionStatus = EngineStatus_IgnitionStatus;
  static constexpr IgnitionStatus UNKNOWN_IGNITION_STATUS = EngineStatus_IgnitionStatus_UNKNOWN_IGNITION_STATUS;
  static constexpr IgnitionStatus IGNITION_LOCK = EngineStatus_IgnitionStatus_IGNITION_LOCK;
  static constexpr IgnitionStatus IGNITION_OFF = EngineStatus_IgnitionStatus_IGNITION_OFF;
  static constexpr IgnitionStatus IGNITION_ACCESSORIES = EngineStatus_IgnitionStatus_IGNITION_ACCESSORIES;
  static constexpr IgnitionStatus IGNITION_ON = EngineStatus_IgnitionStatus_IGNITION_ON;
  static constexpr IgnitionStatus IGNITION_START = EngineStatus_IgnitionStatus_IGNITION_START;
  static inline bool IgnitionStatus_IsValid(int value) {
    return EngineStatus_IgnitionStatus_IsValid(value);
  }
  static constexpr IgnitionStatus IgnitionStatus_MIN = EngineStatus_IgnitionStatus_IgnitionStatus_MIN;
  static constexpr IgnitionStatus IgnitionStatus_MAX = EngineStatus_IgnitionStatus_IgnitionStatus_MAX;
  static constexpr int IgnitionStatus_ARRAYSIZE = EngineStatus_IgnitionStatus_IgnitionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* IgnitionStatus_descriptor() {
    return EngineStatus_IgnitionStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& IgnitionStatus_Name(T value) {
    return EngineStatus_IgnitionStatus_Name(value);
  }
  static inline bool IgnitionStatus_Parse(absl::string_view name, IgnitionStatus* value) {
    return EngineStatus_IgnitionStatus_Parse(name, value);
  }

  using PowertrainStatus = EngineStatus_PowertrainStatus;
  static constexpr PowertrainStatus UNKNOWN_POWERTRAIN_STATUS = EngineStatus_PowertrainStatus_UNKNOWN_POWERTRAIN_STATUS;
  static constexpr PowertrainStatus POWERTRAIN_OFF = EngineStatus_PowertrainStatus_POWERTRAIN_OFF;
  static constexpr PowertrainStatus POWERTRAIN_ECO_MODE = EngineStatus_PowertrainStatus_POWERTRAIN_ECO_MODE;
  static constexpr PowertrainStatus POWERTRAIN_READY = EngineStatus_PowertrainStatus_POWERTRAIN_READY;
  static inline bool PowertrainStatus_IsValid(int value) {
    return EngineStatus_PowertrainStatus_IsValid(value);
  }
  static constexpr PowertrainStatus PowertrainStatus_MIN = EngineStatus_PowertrainStatus_PowertrainStatus_MIN;
  static constexpr PowertrainStatus PowertrainStatus_MAX = EngineStatus_PowertrainStatus_PowertrainStatus_MAX;
  static constexpr int PowertrainStatus_ARRAYSIZE = EngineStatus_PowertrainStatus_PowertrainStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PowertrainStatus_descriptor() {
    return EngineStatus_PowertrainStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& PowertrainStatus_Name(T value) {
    return EngineStatus_PowertrainStatus_Name(value);
  }
  static inline bool PowertrainStatus_Parse(absl::string_view name, PowertrainStatus* value) {
    return EngineStatus_PowertrainStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kIgnitionStatusFieldNumber = 2,
    kPowertrainStatusFieldNumber = 3,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
  void clear_ignition_status() ;
  ::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus ignition_status() const;
  void set_ignition_status(::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus value);

  private:
  ::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus _internal_ignition_status() const;
  void _internal_set_ignition_status(::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus value);

  public:
  // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
  void clear_powertrain_status() ;
  ::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus powertrain_status() const;
  void set_powertrain_status(::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus value);

  private:
  ::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus _internal_powertrain_status() const;
  void _internal_set_powertrain_status(::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.powertrain.EngineStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    int ignition_status_;
    int powertrain_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto;
};// -------------------------------------------------------------------

class TransmissionStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.powertrain.TransmissionStatus) */ {
 public:
  inline TransmissionStatus() : TransmissionStatus(nullptr) {}
  ~TransmissionStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransmissionStatus(::google::protobuf::internal::ConstantInitialized);

  inline TransmissionStatus(const TransmissionStatus& from)
      : TransmissionStatus(nullptr, from) {}
  TransmissionStatus(TransmissionStatus&& from) noexcept
    : TransmissionStatus() {
    *this = ::std::move(from);
  }

  inline TransmissionStatus& operator=(const TransmissionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransmissionStatus& operator=(TransmissionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransmissionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransmissionStatus* internal_default_instance() {
    return reinterpret_cast<const TransmissionStatus*>(
               &_TransmissionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransmissionStatus& a, TransmissionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TransmissionStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransmissionStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransmissionStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransmissionStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransmissionStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TransmissionStatus& from) {
    TransmissionStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransmissionStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.powertrain.TransmissionStatus";
  }
  protected:
  explicit TransmissionStatus(::google::protobuf::Arena* arena);
  TransmissionStatus(::google::protobuf::Arena* arena, const TransmissionStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using GearMode = TransmissionStatus_GearMode;
  static constexpr GearMode UNKNOWN_GEAR_MODE = TransmissionStatus_GearMode_UNKNOWN_GEAR_MODE;
  static constexpr GearMode DRIVE = TransmissionStatus_GearMode_DRIVE;
  static constexpr GearMode MANUAL = TransmissionStatus_GearMode_MANUAL;
  static constexpr GearMode REVERSE = TransmissionStatus_GearMode_REVERSE;
  static constexpr GearMode PARK = TransmissionStatus_GearMode_PARK;
  static constexpr GearMode NEUTRAL = TransmissionStatus_GearMode_NEUTRAL;
  static inline bool GearMode_IsValid(int value) {
    return TransmissionStatus_GearMode_IsValid(value);
  }
  static constexpr GearMode GearMode_MIN = TransmissionStatus_GearMode_GearMode_MIN;
  static constexpr GearMode GearMode_MAX = TransmissionStatus_GearMode_GearMode_MAX;
  static constexpr int GearMode_ARRAYSIZE = TransmissionStatus_GearMode_GearMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* GearMode_descriptor() {
    return TransmissionStatus_GearMode_descriptor();
  }
  template <typename T>
  static inline const std::string& GearMode_Name(T value) {
    return TransmissionStatus_GearMode_Name(value);
  }
  static inline bool GearMode_Parse(absl::string_view name, GearMode* value) {
    return TransmissionStatus_GearMode_Parse(name, value);
  }

  using DriveMode = TransmissionStatus_DriveMode;
  static constexpr DriveMode UNKNOWN_DRIVE_MODE = TransmissionStatus_DriveMode_UNKNOWN_DRIVE_MODE;
  static constexpr DriveMode ECO = TransmissionStatus_DriveMode_ECO;
  static constexpr DriveMode COMFORT = TransmissionStatus_DriveMode_COMFORT;
  static constexpr DriveMode SPORT = TransmissionStatus_DriveMode_SPORT;
  static constexpr DriveMode SUPER_SPORT = TransmissionStatus_DriveMode_SUPER_SPORT;
  static inline bool DriveMode_IsValid(int value) {
    return TransmissionStatus_DriveMode_IsValid(value);
  }
  static constexpr DriveMode DriveMode_MIN = TransmissionStatus_DriveMode_DriveMode_MIN;
  static constexpr DriveMode DriveMode_MAX = TransmissionStatus_DriveMode_DriveMode_MAX;
  static constexpr int DriveMode_ARRAYSIZE = TransmissionStatus_DriveMode_DriveMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DriveMode_descriptor() {
    return TransmissionStatus_DriveMode_descriptor();
  }
  template <typename T>
  static inline const std::string& DriveMode_Name(T value) {
    return TransmissionStatus_DriveMode_Name(value);
  }
  static inline bool DriveMode_Parse(absl::string_view name, DriveMode* value) {
    return TransmissionStatus_DriveMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kCurrentGearFieldNumber = 4,
    kGearModeFieldNumber = 2,
    kDriveModeFieldNumber = 3,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
  bool has_current_gear() const;
  void clear_current_gear() ;
  const ::sensoris::protobuf::types::base::Int64Value& current_gear() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64Value* release_current_gear();
  ::sensoris::protobuf::types::base::Int64Value* mutable_current_gear();
  void set_allocated_current_gear(::sensoris::protobuf::types::base::Int64Value* value);
  void unsafe_arena_set_allocated_current_gear(::sensoris::protobuf::types::base::Int64Value* value);
  ::sensoris::protobuf::types::base::Int64Value* unsafe_arena_release_current_gear();

  private:
  const ::sensoris::protobuf::types::base::Int64Value& _internal_current_gear() const;
  ::sensoris::protobuf::types::base::Int64Value* _internal_mutable_current_gear();

  public:
  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
  void clear_gear_mode() ;
  ::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode gear_mode() const;
  void set_gear_mode(::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode value);

  private:
  ::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode _internal_gear_mode() const;
  void _internal_set_gear_mode(::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode value);

  public:
  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
  void clear_drive_mode() ;
  ::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode drive_mode() const;
  void set_drive_mode(::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode value);

  private:
  ::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode _internal_drive_mode() const;
  void _internal_set_drive_mode(::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.powertrain.TransmissionStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    ::sensoris::protobuf::types::base::Int64Value* current_gear_;
    int gear_mode_;
    int drive_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto;
};// -------------------------------------------------------------------

class CruiseControlStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.powertrain.CruiseControlStatus) */ {
 public:
  inline CruiseControlStatus() : CruiseControlStatus(nullptr) {}
  ~CruiseControlStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CruiseControlStatus(::google::protobuf::internal::ConstantInitialized);

  inline CruiseControlStatus(const CruiseControlStatus& from)
      : CruiseControlStatus(nullptr, from) {}
  CruiseControlStatus(CruiseControlStatus&& from) noexcept
    : CruiseControlStatus() {
    *this = ::std::move(from);
  }

  inline CruiseControlStatus& operator=(const CruiseControlStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CruiseControlStatus& operator=(CruiseControlStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CruiseControlStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CruiseControlStatus* internal_default_instance() {
    return reinterpret_cast<const CruiseControlStatus*>(
               &_CruiseControlStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CruiseControlStatus& a, CruiseControlStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CruiseControlStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CruiseControlStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CruiseControlStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CruiseControlStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CruiseControlStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CruiseControlStatus& from) {
    CruiseControlStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CruiseControlStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.powertrain.CruiseControlStatus";
  }
  protected:
  explicit CruiseControlStatus(::google::protobuf::Arena* arena);
  CruiseControlStatus(::google::protobuf::Arena* arena, const CruiseControlStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = CruiseControlStatus_Type;
  static constexpr Type UNKNOWN_TYPE = CruiseControlStatus_Type_UNKNOWN_TYPE;
  static constexpr Type SPEED = CruiseControlStatus_Type_SPEED;
  static constexpr Type SPEED_AND_DISTANCE = CruiseControlStatus_Type_SPEED_AND_DISTANCE;
  static inline bool Type_IsValid(int value) {
    return CruiseControlStatus_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = CruiseControlStatus_Type_Type_MIN;
  static constexpr Type Type_MAX = CruiseControlStatus_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = CruiseControlStatus_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return CruiseControlStatus_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return CruiseControlStatus_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return CruiseControlStatus_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kSelectedSpeedFieldNumber = 4,
    kSelectedTimeToLeadVehicleFieldNumber = 5,
    kTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_selected_speed() const;
  void clear_selected_speed() ;
  const ::sensoris::protobuf::types::base::Int64Value& selected_speed() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64Value* release_selected_speed();
  ::sensoris::protobuf::types::base::Int64Value* mutable_selected_speed();
  void set_allocated_selected_speed(::sensoris::protobuf::types::base::Int64Value* value);
  void unsafe_arena_set_allocated_selected_speed(::sensoris::protobuf::types::base::Int64Value* value);
  ::sensoris::protobuf::types::base::Int64Value* unsafe_arena_release_selected_speed();

  private:
  const ::sensoris::protobuf::types::base::Int64Value& _internal_selected_speed() const;
  ::sensoris::protobuf::types::base::Int64Value* _internal_mutable_selected_speed();

  public:
  // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_selected_time_to_lead_vehicle() const;
  void clear_selected_time_to_lead_vehicle() ;
  const ::sensoris::protobuf::types::base::Int64Value& selected_time_to_lead_vehicle() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64Value* release_selected_time_to_lead_vehicle();
  ::sensoris::protobuf::types::base::Int64Value* mutable_selected_time_to_lead_vehicle();
  void set_allocated_selected_time_to_lead_vehicle(::sensoris::protobuf::types::base::Int64Value* value);
  void unsafe_arena_set_allocated_selected_time_to_lead_vehicle(::sensoris::protobuf::types::base::Int64Value* value);
  ::sensoris::protobuf::types::base::Int64Value* unsafe_arena_release_selected_time_to_lead_vehicle();

  private:
  const ::sensoris::protobuf::types::base::Int64Value& _internal_selected_time_to_lead_vehicle() const;
  ::sensoris::protobuf::types::base::Int64Value* _internal_mutable_selected_time_to_lead_vehicle();

  public:
  // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
  void clear_type() ;
  ::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type type() const;
  void set_type(::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type value);

  private:
  ::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type value);

  public:
  // .sensoris.protobuf.types.base.SystemStatus status = 3;
  void clear_status() ;
  ::sensoris::protobuf::types::base::SystemStatus status() const;
  void set_status(::sensoris::protobuf::types::base::SystemStatus value);

  private:
  ::sensoris::protobuf::types::base::SystemStatus _internal_status() const;
  void _internal_set_status(::sensoris::protobuf::types::base::SystemStatus value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    ::sensoris::protobuf::types::base::Int64Value* selected_speed_;
    ::sensoris::protobuf::types::base::Int64Value* selected_time_to_lead_vehicle_;
    int type_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto;
};// -------------------------------------------------------------------

class PowertrainCategory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.powertrain.PowertrainCategory) */ {
 public:
  inline PowertrainCategory() : PowertrainCategory(nullptr) {}
  ~PowertrainCategory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PowertrainCategory(::google::protobuf::internal::ConstantInitialized);

  inline PowertrainCategory(const PowertrainCategory& from)
      : PowertrainCategory(nullptr, from) {}
  PowertrainCategory(PowertrainCategory&& from) noexcept
    : PowertrainCategory() {
    *this = ::std::move(from);
  }

  inline PowertrainCategory& operator=(const PowertrainCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowertrainCategory& operator=(PowertrainCategory&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PowertrainCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowertrainCategory* internal_default_instance() {
    return reinterpret_cast<const PowertrainCategory*>(
               &_PowertrainCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PowertrainCategory& a, PowertrainCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(PowertrainCategory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowertrainCategory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowertrainCategory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowertrainCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PowertrainCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PowertrainCategory& from) {
    PowertrainCategory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PowertrainCategory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.powertrain.PowertrainCategory";
  }
  protected:
  explicit PowertrainCategory(::google::protobuf::Arena* arena);
  PowertrainCategory(::google::protobuf::Arena* arena, const PowertrainCategory& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEngineStatusFieldNumber = 2,
    kTransmissionStatusFieldNumber = 3,
    kCruiseControlStatusFieldNumber = 4,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
  int engine_status_size() const;
  private:
  int _internal_engine_status_size() const;

  public:
  void clear_engine_status() ;
  ::sensoris::protobuf::categories::powertrain::EngineStatus* mutable_engine_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::EngineStatus >*
      mutable_engine_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::EngineStatus>& _internal_engine_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::EngineStatus>* _internal_mutable_engine_status();
  public:
  const ::sensoris::protobuf::categories::powertrain::EngineStatus& engine_status(int index) const;
  ::sensoris::protobuf::categories::powertrain::EngineStatus* add_engine_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::EngineStatus >&
      engine_status() const;
  // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
  int transmission_status_size() const;
  private:
  int _internal_transmission_status_size() const;

  public:
  void clear_transmission_status() ;
  ::sensoris::protobuf::categories::powertrain::TransmissionStatus* mutable_transmission_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::TransmissionStatus >*
      mutable_transmission_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::TransmissionStatus>& _internal_transmission_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::TransmissionStatus>* _internal_mutable_transmission_status();
  public:
  const ::sensoris::protobuf::categories::powertrain::TransmissionStatus& transmission_status(int index) const;
  ::sensoris::protobuf::categories::powertrain::TransmissionStatus* add_transmission_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::TransmissionStatus >&
      transmission_status() const;
  // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
  int cruise_control_status_size() const;
  private:
  int _internal_cruise_control_status_size() const;

  public:
  void clear_cruise_control_status() ;
  ::sensoris::protobuf::categories::powertrain::CruiseControlStatus* mutable_cruise_control_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::CruiseControlStatus >*
      mutable_cruise_control_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::CruiseControlStatus>& _internal_cruise_control_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::CruiseControlStatus>* _internal_mutable_cruise_control_status();
  public:
  const ::sensoris::protobuf::categories::powertrain::CruiseControlStatus& cruise_control_status(int index) const;
  ::sensoris::protobuf::categories::powertrain::CruiseControlStatus* add_cruise_control_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::CruiseControlStatus >&
      cruise_control_status() const;
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.powertrain.PowertrainCategory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::EngineStatus > engine_status_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::TransmissionStatus > transmission_status_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::powertrain::CruiseControlStatus > cruise_control_status_;
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EngineStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool EngineStatus::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& EngineStatus::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& EngineStatus::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.EngineStatus.envelope)
  return _internal_envelope();
}
inline void EngineStatus::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.EngineStatus.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* EngineStatus::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* EngineStatus::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.powertrain.EngineStatus.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* EngineStatus::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* EngineStatus::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.EngineStatus.envelope)
  return _msg;
}
inline void EngineStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.powertrain.EngineStatus.envelope)
}

// .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
inline void EngineStatus::clear_ignition_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ignition_status_ = 0;
}
inline ::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus EngineStatus::ignition_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.EngineStatus.ignition_status)
  return _internal_ignition_status();
}
inline void EngineStatus::set_ignition_status(::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus value) {
  _internal_set_ignition_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.powertrain.EngineStatus.ignition_status)
}
inline ::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus EngineStatus::_internal_ignition_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus>(_impl_.ignition_status_);
}
inline void EngineStatus::_internal_set_ignition_status(::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ignition_status_ = value;
}

// .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
inline void EngineStatus::clear_powertrain_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.powertrain_status_ = 0;
}
inline ::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus EngineStatus::powertrain_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.EngineStatus.powertrain_status)
  return _internal_powertrain_status();
}
inline void EngineStatus::set_powertrain_status(::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus value) {
  _internal_set_powertrain_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.powertrain.EngineStatus.powertrain_status)
}
inline ::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus EngineStatus::_internal_powertrain_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus>(_impl_.powertrain_status_);
}
inline void EngineStatus::_internal_set_powertrain_status(::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.powertrain_status_ = value;
}

// -------------------------------------------------------------------

// TransmissionStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool TransmissionStatus::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TransmissionStatus::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TransmissionStatus::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.TransmissionStatus.envelope)
  return _internal_envelope();
}
inline void TransmissionStatus::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.TransmissionStatus.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TransmissionStatus::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TransmissionStatus::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.powertrain.TransmissionStatus.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TransmissionStatus::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TransmissionStatus::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.TransmissionStatus.envelope)
  return _msg;
}
inline void TransmissionStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.powertrain.TransmissionStatus.envelope)
}

// .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
inline void TransmissionStatus::clear_gear_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gear_mode_ = 0;
}
inline ::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode TransmissionStatus::gear_mode() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.TransmissionStatus.gear_mode)
  return _internal_gear_mode();
}
inline void TransmissionStatus::set_gear_mode(::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode value) {
  _internal_set_gear_mode(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.powertrain.TransmissionStatus.gear_mode)
}
inline ::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode TransmissionStatus::_internal_gear_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode>(_impl_.gear_mode_);
}
inline void TransmissionStatus::_internal_set_gear_mode(::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gear_mode_ = value;
}

// .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
inline void TransmissionStatus::clear_drive_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.drive_mode_ = 0;
}
inline ::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode TransmissionStatus::drive_mode() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.TransmissionStatus.drive_mode)
  return _internal_drive_mode();
}
inline void TransmissionStatus::set_drive_mode(::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode value) {
  _internal_set_drive_mode(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.powertrain.TransmissionStatus.drive_mode)
}
inline ::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode TransmissionStatus::_internal_drive_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode>(_impl_.drive_mode_);
}
inline void TransmissionStatus::_internal_set_drive_mode(::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.drive_mode_ = value;
}

// .sensoris.protobuf.types.base.Int64Value current_gear = 4;
inline bool TransmissionStatus::has_current_gear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_gear_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64Value& TransmissionStatus::_internal_current_gear() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Int64Value* p = _impl_.current_gear_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64Value&>(::sensoris::protobuf::types::base::_Int64Value_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64Value& TransmissionStatus::current_gear() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.TransmissionStatus.current_gear)
  return _internal_current_gear();
}
inline void TransmissionStatus::unsafe_arena_set_allocated_current_gear(::sensoris::protobuf::types::base::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_gear_);
  }
  _impl_.current_gear_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.TransmissionStatus.current_gear)
}
inline ::sensoris::protobuf::types::base::Int64Value* TransmissionStatus::release_current_gear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64Value* released = _impl_.current_gear_;
  _impl_.current_gear_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Int64Value* TransmissionStatus::unsafe_arena_release_current_gear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.powertrain.TransmissionStatus.current_gear)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64Value* temp = _impl_.current_gear_;
  _impl_.current_gear_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64Value* TransmissionStatus::_internal_mutable_current_gear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.current_gear_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64Value>(GetArena());
    _impl_.current_gear_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(p);
  }
  return _impl_.current_gear_;
}
inline ::sensoris::protobuf::types::base::Int64Value* TransmissionStatus::mutable_current_gear() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64Value* _msg = _internal_mutable_current_gear();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.TransmissionStatus.current_gear)
  return _msg;
}
inline void TransmissionStatus::set_allocated_current_gear(::sensoris::protobuf::types::base::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_gear_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.current_gear_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.powertrain.TransmissionStatus.current_gear)
}

// -------------------------------------------------------------------

// CruiseControlStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool CruiseControlStatus::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& CruiseControlStatus::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& CruiseControlStatus::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.CruiseControlStatus.envelope)
  return _internal_envelope();
}
inline void CruiseControlStatus::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* CruiseControlStatus::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* CruiseControlStatus::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.powertrain.CruiseControlStatus.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* CruiseControlStatus::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* CruiseControlStatus::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.CruiseControlStatus.envelope)
  return _msg;
}
inline void CruiseControlStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.envelope)
}

// .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
inline void CruiseControlStatus::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type CruiseControlStatus::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.CruiseControlStatus.type)
  return _internal_type();
}
inline void CruiseControlStatus::set_type(::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.powertrain.CruiseControlStatus.type)
}
inline ::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type CruiseControlStatus::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type>(_impl_.type_);
}
inline void CruiseControlStatus::_internal_set_type(::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.SystemStatus status = 3;
inline void CruiseControlStatus::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus CruiseControlStatus::status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.CruiseControlStatus.status)
  return _internal_status();
}
inline void CruiseControlStatus::set_status(::sensoris::protobuf::types::base::SystemStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.powertrain.CruiseControlStatus.status)
}
inline ::sensoris::protobuf::types::base::SystemStatus CruiseControlStatus::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::SystemStatus>(_impl_.status_);
}
inline void CruiseControlStatus::_internal_set_status(::sensoris::protobuf::types::base::SystemStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool CruiseControlStatus::has_selected_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selected_speed_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64Value& CruiseControlStatus::_internal_selected_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Int64Value* p = _impl_.selected_speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64Value&>(::sensoris::protobuf::types::base::_Int64Value_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64Value& CruiseControlStatus::selected_speed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_speed)
  return _internal_selected_speed();
}
inline void CruiseControlStatus::unsafe_arena_set_allocated_selected_speed(::sensoris::protobuf::types::base::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.selected_speed_);
  }
  _impl_.selected_speed_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_speed)
}
inline ::sensoris::protobuf::types::base::Int64Value* CruiseControlStatus::release_selected_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64Value* released = _impl_.selected_speed_;
  _impl_.selected_speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Int64Value* CruiseControlStatus::unsafe_arena_release_selected_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_speed)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64Value* temp = _impl_.selected_speed_;
  _impl_.selected_speed_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64Value* CruiseControlStatus::_internal_mutable_selected_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selected_speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64Value>(GetArena());
    _impl_.selected_speed_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(p);
  }
  return _impl_.selected_speed_;
}
inline ::sensoris::protobuf::types::base::Int64Value* CruiseControlStatus::mutable_selected_speed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64Value* _msg = _internal_mutable_selected_speed();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_speed)
  return _msg;
}
inline void CruiseControlStatus::set_allocated_selected_speed(::sensoris::protobuf::types::base::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.selected_speed_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.selected_speed_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_speed)
}

// .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool CruiseControlStatus::has_selected_time_to_lead_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selected_time_to_lead_vehicle_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64Value& CruiseControlStatus::_internal_selected_time_to_lead_vehicle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Int64Value* p = _impl_.selected_time_to_lead_vehicle_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64Value&>(::sensoris::protobuf::types::base::_Int64Value_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64Value& CruiseControlStatus::selected_time_to_lead_vehicle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_time_to_lead_vehicle)
  return _internal_selected_time_to_lead_vehicle();
}
inline void CruiseControlStatus::unsafe_arena_set_allocated_selected_time_to_lead_vehicle(::sensoris::protobuf::types::base::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.selected_time_to_lead_vehicle_);
  }
  _impl_.selected_time_to_lead_vehicle_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_time_to_lead_vehicle)
}
inline ::sensoris::protobuf::types::base::Int64Value* CruiseControlStatus::release_selected_time_to_lead_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::Int64Value* released = _impl_.selected_time_to_lead_vehicle_;
  _impl_.selected_time_to_lead_vehicle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Int64Value* CruiseControlStatus::unsafe_arena_release_selected_time_to_lead_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_time_to_lead_vehicle)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::Int64Value* temp = _impl_.selected_time_to_lead_vehicle_;
  _impl_.selected_time_to_lead_vehicle_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64Value* CruiseControlStatus::_internal_mutable_selected_time_to_lead_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.selected_time_to_lead_vehicle_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64Value>(GetArena());
    _impl_.selected_time_to_lead_vehicle_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(p);
  }
  return _impl_.selected_time_to_lead_vehicle_;
}
inline ::sensoris::protobuf::types::base::Int64Value* CruiseControlStatus::mutable_selected_time_to_lead_vehicle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64Value* _msg = _internal_mutable_selected_time_to_lead_vehicle();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_time_to_lead_vehicle)
  return _msg;
}
inline void CruiseControlStatus::set_allocated_selected_time_to_lead_vehicle(::sensoris::protobuf::types::base::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.selected_time_to_lead_vehicle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.selected_time_to_lead_vehicle_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_time_to_lead_vehicle)
}

// -------------------------------------------------------------------

// PowertrainCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool PowertrainCategory::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& PowertrainCategory::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope&>(::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& PowertrainCategory::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.PowertrainCategory.envelope)
  return _internal_envelope();
}
inline void PowertrainCategory::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.PowertrainCategory.envelope)
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PowertrainCategory::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PowertrainCategory::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.powertrain.PowertrainCategory.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PowertrainCategory::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* PowertrainCategory::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::CategoryEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.PowertrainCategory.envelope)
  return _msg;
}
inline void PowertrainCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.powertrain.PowertrainCategory.envelope)
}

// repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
inline int PowertrainCategory::_internal_engine_status_size() const {
  return _internal_engine_status().size();
}
inline int PowertrainCategory::engine_status_size() const {
  return _internal_engine_status_size();
}
inline void PowertrainCategory::clear_engine_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_status_.Clear();
}
inline ::sensoris::protobuf::categories::powertrain::EngineStatus* PowertrainCategory::mutable_engine_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.PowertrainCategory.engine_status)
  return _internal_mutable_engine_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::EngineStatus>* PowertrainCategory::mutable_engine_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.powertrain.PowertrainCategory.engine_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_engine_status();
}
inline const ::sensoris::protobuf::categories::powertrain::EngineStatus& PowertrainCategory::engine_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.PowertrainCategory.engine_status)
  return _internal_engine_status().Get(index);
}
inline ::sensoris::protobuf::categories::powertrain::EngineStatus* PowertrainCategory::add_engine_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::powertrain::EngineStatus* _add = _internal_mutable_engine_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.powertrain.PowertrainCategory.engine_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::EngineStatus>& PowertrainCategory::engine_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.powertrain.PowertrainCategory.engine_status)
  return _internal_engine_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::EngineStatus>&
PowertrainCategory::_internal_engine_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.engine_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::EngineStatus>*
PowertrainCategory::_internal_mutable_engine_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.engine_status_;
}

// repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
inline int PowertrainCategory::_internal_transmission_status_size() const {
  return _internal_transmission_status().size();
}
inline int PowertrainCategory::transmission_status_size() const {
  return _internal_transmission_status_size();
}
inline void PowertrainCategory::clear_transmission_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transmission_status_.Clear();
}
inline ::sensoris::protobuf::categories::powertrain::TransmissionStatus* PowertrainCategory::mutable_transmission_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.PowertrainCategory.transmission_status)
  return _internal_mutable_transmission_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::TransmissionStatus>* PowertrainCategory::mutable_transmission_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.powertrain.PowertrainCategory.transmission_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_transmission_status();
}
inline const ::sensoris::protobuf::categories::powertrain::TransmissionStatus& PowertrainCategory::transmission_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.PowertrainCategory.transmission_status)
  return _internal_transmission_status().Get(index);
}
inline ::sensoris::protobuf::categories::powertrain::TransmissionStatus* PowertrainCategory::add_transmission_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::powertrain::TransmissionStatus* _add = _internal_mutable_transmission_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.powertrain.PowertrainCategory.transmission_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::TransmissionStatus>& PowertrainCategory::transmission_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.powertrain.PowertrainCategory.transmission_status)
  return _internal_transmission_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::TransmissionStatus>&
PowertrainCategory::_internal_transmission_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transmission_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::TransmissionStatus>*
PowertrainCategory::_internal_mutable_transmission_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.transmission_status_;
}

// repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
inline int PowertrainCategory::_internal_cruise_control_status_size() const {
  return _internal_cruise_control_status().size();
}
inline int PowertrainCategory::cruise_control_status_size() const {
  return _internal_cruise_control_status_size();
}
inline void PowertrainCategory::clear_cruise_control_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cruise_control_status_.Clear();
}
inline ::sensoris::protobuf::categories::powertrain::CruiseControlStatus* PowertrainCategory::mutable_cruise_control_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.powertrain.PowertrainCategory.cruise_control_status)
  return _internal_mutable_cruise_control_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::CruiseControlStatus>* PowertrainCategory::mutable_cruise_control_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.powertrain.PowertrainCategory.cruise_control_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cruise_control_status();
}
inline const ::sensoris::protobuf::categories::powertrain::CruiseControlStatus& PowertrainCategory::cruise_control_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.powertrain.PowertrainCategory.cruise_control_status)
  return _internal_cruise_control_status().Get(index);
}
inline ::sensoris::protobuf::categories::powertrain::CruiseControlStatus* PowertrainCategory::add_cruise_control_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::powertrain::CruiseControlStatus* _add = _internal_mutable_cruise_control_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.powertrain.PowertrainCategory.cruise_control_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::CruiseControlStatus>& PowertrainCategory::cruise_control_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.powertrain.PowertrainCategory.cruise_control_status)
  return _internal_cruise_control_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::CruiseControlStatus>&
PowertrainCategory::_internal_cruise_control_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cruise_control_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::powertrain::CruiseControlStatus>*
PowertrainCategory::_internal_mutable_cruise_control_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cruise_control_status_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace powertrain
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus>() {
  return ::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus>() {
  return ::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode>() {
  return ::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode>() {
  return ::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type>() {
  return ::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_2epb_2eh
