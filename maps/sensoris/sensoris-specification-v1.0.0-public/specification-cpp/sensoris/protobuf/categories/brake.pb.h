// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/brake.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace brake {
class BrakeCategory;
struct BrakeCategoryDefaultTypeInternal;
extern BrakeCategoryDefaultTypeInternal _BrakeCategory_default_instance_;
class BrakeSystemsStatus;
struct BrakeSystemsStatusDefaultTypeInternal;
extern BrakeSystemsStatusDefaultTypeInternal _BrakeSystemsStatus_default_instance_;
}  // namespace brake
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace categories {
namespace brake {

// ===================================================================


// -------------------------------------------------------------------

class BrakeSystemsStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.brake.BrakeSystemsStatus) */ {
 public:
  inline BrakeSystemsStatus() : BrakeSystemsStatus(nullptr) {}
  ~BrakeSystemsStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BrakeSystemsStatus(::google::protobuf::internal::ConstantInitialized);

  inline BrakeSystemsStatus(const BrakeSystemsStatus& from)
      : BrakeSystemsStatus(nullptr, from) {}
  BrakeSystemsStatus(BrakeSystemsStatus&& from) noexcept
    : BrakeSystemsStatus() {
    *this = ::std::move(from);
  }

  inline BrakeSystemsStatus& operator=(const BrakeSystemsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrakeSystemsStatus& operator=(BrakeSystemsStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrakeSystemsStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrakeSystemsStatus* internal_default_instance() {
    return reinterpret_cast<const BrakeSystemsStatus*>(
               &_BrakeSystemsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BrakeSystemsStatus& a, BrakeSystemsStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BrakeSystemsStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrakeSystemsStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrakeSystemsStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrakeSystemsStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BrakeSystemsStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BrakeSystemsStatus& from) {
    BrakeSystemsStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BrakeSystemsStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.brake.BrakeSystemsStatus";
  }
  protected:
  explicit BrakeSystemsStatus(::google::protobuf::Arena* arena);
  BrakeSystemsStatus(::google::protobuf::Arena* arena, const BrakeSystemsStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kAbsStatusFieldNumber = 2,
    kEscStatusFieldNumber = 3,
    kTcsStatusFieldNumber = 4,
    kEbdStatusFieldNumber = 5,
    kEbaStatusFieldNumber = 6,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
  void clear_abs_status() ;
  ::sensoris::protobuf::types::base::SystemStatus abs_status() const;
  void set_abs_status(::sensoris::protobuf::types::base::SystemStatus value);

  private:
  ::sensoris::protobuf::types::base::SystemStatus _internal_abs_status() const;
  void _internal_set_abs_status(::sensoris::protobuf::types::base::SystemStatus value);

  public:
  // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
  void clear_esc_status() ;
  ::sensoris::protobuf::types::base::SystemStatus esc_status() const;
  void set_esc_status(::sensoris::protobuf::types::base::SystemStatus value);

  private:
  ::sensoris::protobuf::types::base::SystemStatus _internal_esc_status() const;
  void _internal_set_esc_status(::sensoris::protobuf::types::base::SystemStatus value);

  public:
  // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
  void clear_tcs_status() ;
  ::sensoris::protobuf::types::base::SystemStatus tcs_status() const;
  void set_tcs_status(::sensoris::protobuf::types::base::SystemStatus value);

  private:
  ::sensoris::protobuf::types::base::SystemStatus _internal_tcs_status() const;
  void _internal_set_tcs_status(::sensoris::protobuf::types::base::SystemStatus value);

  public:
  // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
  void clear_ebd_status() ;
  ::sensoris::protobuf::types::base::SystemStatus ebd_status() const;
  void set_ebd_status(::sensoris::protobuf::types::base::SystemStatus value);

  private:
  ::sensoris::protobuf::types::base::SystemStatus _internal_ebd_status() const;
  void _internal_set_ebd_status(::sensoris::protobuf::types::base::SystemStatus value);

  public:
  // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
  void clear_eba_status() ;
  ::sensoris::protobuf::types::base::SystemStatus eba_status() const;
  void set_eba_status(::sensoris::protobuf::types::base::SystemStatus value);

  private:
  ::sensoris::protobuf::types::base::SystemStatus _internal_eba_status() const;
  void _internal_set_eba_status(::sensoris::protobuf::types::base::SystemStatus value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    int abs_status_;
    int esc_status_;
    int tcs_status_;
    int ebd_status_;
    int eba_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto;
};// -------------------------------------------------------------------

class BrakeCategory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.brake.BrakeCategory) */ {
 public:
  inline BrakeCategory() : BrakeCategory(nullptr) {}
  ~BrakeCategory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BrakeCategory(::google::protobuf::internal::ConstantInitialized);

  inline BrakeCategory(const BrakeCategory& from)
      : BrakeCategory(nullptr, from) {}
  BrakeCategory(BrakeCategory&& from) noexcept
    : BrakeCategory() {
    *this = ::std::move(from);
  }

  inline BrakeCategory& operator=(const BrakeCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrakeCategory& operator=(BrakeCategory&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrakeCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrakeCategory* internal_default_instance() {
    return reinterpret_cast<const BrakeCategory*>(
               &_BrakeCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BrakeCategory& a, BrakeCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(BrakeCategory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrakeCategory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrakeCategory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrakeCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BrakeCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BrakeCategory& from) {
    BrakeCategory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BrakeCategory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.brake.BrakeCategory";
  }
  protected:
  explicit BrakeCategory(::google::protobuf::Arena* arena);
  BrakeCategory(::google::protobuf::Arena* arena, const BrakeCategory& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrakeSystemsStatusFieldNumber = 2,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
  int brake_systems_status_size() const;
  private:
  int _internal_brake_systems_status_size() const;

  public:
  void clear_brake_systems_status() ;
  ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* mutable_brake_systems_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus >*
      mutable_brake_systems_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>& _internal_brake_systems_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>* _internal_mutable_brake_systems_status();
  public:
  const ::sensoris::protobuf::categories::brake::BrakeSystemsStatus& brake_systems_status(int index) const;
  ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* add_brake_systems_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus >&
      brake_systems_status() const;
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.brake.BrakeCategory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus > brake_systems_status_;
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BrakeSystemsStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool BrakeSystemsStatus::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& BrakeSystemsStatus::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& BrakeSystemsStatus::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
  return _internal_envelope();
}
inline void BrakeSystemsStatus::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* BrakeSystemsStatus::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* BrakeSystemsStatus::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* BrakeSystemsStatus::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* BrakeSystemsStatus::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
  return _msg;
}
inline void BrakeSystemsStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
}

// .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
inline void BrakeSystemsStatus::clear_abs_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.abs_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::abs_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.abs_status)
  return _internal_abs_status();
}
inline void BrakeSystemsStatus::set_abs_status(::sensoris::protobuf::types::base::SystemStatus value) {
  _internal_set_abs_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.abs_status)
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::_internal_abs_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::SystemStatus>(_impl_.abs_status_);
}
inline void BrakeSystemsStatus::_internal_set_abs_status(::sensoris::protobuf::types::base::SystemStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.abs_status_ = value;
}

// .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
inline void BrakeSystemsStatus::clear_esc_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.esc_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::esc_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.esc_status)
  return _internal_esc_status();
}
inline void BrakeSystemsStatus::set_esc_status(::sensoris::protobuf::types::base::SystemStatus value) {
  _internal_set_esc_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.esc_status)
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::_internal_esc_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::SystemStatus>(_impl_.esc_status_);
}
inline void BrakeSystemsStatus::_internal_set_esc_status(::sensoris::protobuf::types::base::SystemStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.esc_status_ = value;
}

// .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
inline void BrakeSystemsStatus::clear_tcs_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tcs_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::tcs_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.tcs_status)
  return _internal_tcs_status();
}
inline void BrakeSystemsStatus::set_tcs_status(::sensoris::protobuf::types::base::SystemStatus value) {
  _internal_set_tcs_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.tcs_status)
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::_internal_tcs_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::SystemStatus>(_impl_.tcs_status_);
}
inline void BrakeSystemsStatus::_internal_set_tcs_status(::sensoris::protobuf::types::base::SystemStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcs_status_ = value;
}

// .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
inline void BrakeSystemsStatus::clear_ebd_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ebd_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::ebd_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.ebd_status)
  return _internal_ebd_status();
}
inline void BrakeSystemsStatus::set_ebd_status(::sensoris::protobuf::types::base::SystemStatus value) {
  _internal_set_ebd_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.ebd_status)
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::_internal_ebd_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::SystemStatus>(_impl_.ebd_status_);
}
inline void BrakeSystemsStatus::_internal_set_ebd_status(::sensoris::protobuf::types::base::SystemStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ebd_status_ = value;
}

// .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
inline void BrakeSystemsStatus::clear_eba_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eba_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::eba_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.eba_status)
  return _internal_eba_status();
}
inline void BrakeSystemsStatus::set_eba_status(::sensoris::protobuf::types::base::SystemStatus value) {
  _internal_set_eba_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.eba_status)
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::_internal_eba_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::SystemStatus>(_impl_.eba_status_);
}
inline void BrakeSystemsStatus::_internal_set_eba_status(::sensoris::protobuf::types::base::SystemStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eba_status_ = value;
}

// -------------------------------------------------------------------

// BrakeCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool BrakeCategory::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& BrakeCategory::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope&>(::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& BrakeCategory::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
  return _internal_envelope();
}
inline void BrakeCategory::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* BrakeCategory::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* BrakeCategory::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.brake.BrakeCategory.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* BrakeCategory::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* BrakeCategory::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::CategoryEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
  return _msg;
}
inline void BrakeCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
}

// repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
inline int BrakeCategory::_internal_brake_systems_status_size() const {
  return _internal_brake_systems_status().size();
}
inline int BrakeCategory::brake_systems_status_size() const {
  return _internal_brake_systems_status_size();
}
inline void BrakeCategory::clear_brake_systems_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brake_systems_status_.Clear();
}
inline ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* BrakeCategory::mutable_brake_systems_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return _internal_mutable_brake_systems_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>* BrakeCategory::mutable_brake_systems_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_brake_systems_status();
}
inline const ::sensoris::protobuf::categories::brake::BrakeSystemsStatus& BrakeCategory::brake_systems_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return _internal_brake_systems_status().Get(index);
}
inline ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* BrakeCategory::add_brake_systems_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* _add = _internal_mutable_brake_systems_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>& BrakeCategory::brake_systems_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return _internal_brake_systems_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>&
BrakeCategory::_internal_brake_systems_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brake_systems_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>*
BrakeCategory::_internal_mutable_brake_systems_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.brake_systems_status_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace brake
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto_2epb_2eh
