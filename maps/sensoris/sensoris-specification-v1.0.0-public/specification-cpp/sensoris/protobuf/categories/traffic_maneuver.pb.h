// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_maneuver.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficmaneuver {
class Charging;
struct ChargingDefaultTypeInternal;
extern ChargingDefaultTypeInternal _Charging_default_instance_;
class Maneuver;
struct ManeuverDefaultTypeInternal;
extern ManeuverDefaultTypeInternal _Maneuver_default_instance_;
class Maneuver_TypeAndConfidence;
struct Maneuver_TypeAndConfidenceDefaultTypeInternal;
extern Maneuver_TypeAndConfidenceDefaultTypeInternal _Maneuver_TypeAndConfidence_default_instance_;
class Refueling;
struct RefuelingDefaultTypeInternal;
extern RefuelingDefaultTypeInternal _Refueling_default_instance_;
class TrafficManeuverCategory;
struct TrafficManeuverCategoryDefaultTypeInternal;
extern TrafficManeuverCategoryDefaultTypeInternal _TrafficManeuverCategory_default_instance_;
}  // namespace trafficmaneuver
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficmaneuver {
enum Maneuver_TypeAndConfidence_Type : int {
  Maneuver_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  Maneuver_TypeAndConfidence_Type_EVASIVE = 1,
  Maneuver_TypeAndConfidence_Type_LANE_CHANGE = 2,
  Maneuver_TypeAndConfidence_Type_LANE_CHANGE_RIGHT = 3,
  Maneuver_TypeAndConfidence_Type_LANE_CHANGE_LEFT = 4,
  Maneuver_TypeAndConfidence_Type_OVERTAKING = 5,
  Maneuver_TypeAndConfidence_Type_INTERSECTION_STOP = 6,
  Maneuver_TypeAndConfidence_Type_TURNING = 7,
  Maneuver_TypeAndConfidence_Type_TURNING_RIGHT = 8,
  Maneuver_TypeAndConfidence_Type_TURNING_LEFT = 9,
  Maneuver_TypeAndConfidence_Type_SHARP_TURNING_RIGHT = 10,
  Maneuver_TypeAndConfidence_Type_SHARP_TURNING_LEFT = 11,
  Maneuver_TypeAndConfidence_Type_ACCELERATING = 12,
  Maneuver_TypeAndConfidence_Type_BREAKING = 13,
  Maneuver_TypeAndConfidence_Type_Maneuver_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Maneuver_TypeAndConfidence_Type_Maneuver_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Maneuver_TypeAndConfidence_Type_IsValid(int value);
extern const uint32_t Maneuver_TypeAndConfidence_Type_internal_data_[];
constexpr Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence_Type_Type_MIN = static_cast<Maneuver_TypeAndConfidence_Type>(0);
constexpr Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence_Type_Type_MAX = static_cast<Maneuver_TypeAndConfidence_Type>(13);
constexpr int Maneuver_TypeAndConfidence_Type_Type_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor*
Maneuver_TypeAndConfidence_Type_descriptor();
template <typename T>
const std::string& Maneuver_TypeAndConfidence_Type_Name(T value) {
  static_assert(std::is_same<T, Maneuver_TypeAndConfidence_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Maneuver_TypeAndConfidence_Type_Name(static_cast<Maneuver_TypeAndConfidence_Type>(value));
}
template <>
inline const std::string& Maneuver_TypeAndConfidence_Type_Name(Maneuver_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Maneuver_TypeAndConfidence_Type_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool Maneuver_TypeAndConfidence_Type_Parse(absl::string_view name, Maneuver_TypeAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Maneuver_TypeAndConfidence_Type>(
      Maneuver_TypeAndConfidence_Type_descriptor(), name, value);
}
enum Charging_Type : int {
  Charging_Type_UNKNOWN_TYPE = 0,
  Charging_Type_PORT_J1772 = 1,
  Charging_Type_CHADEMO = 2,
  Charging_Type_SAE_COMBO = 3,
  Charging_Type_TESLA_HPWC = 4,
  Charging_Type_TESLA_SUPERCHARGER = 5,
  Charging_Type_Charging_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Charging_Type_Charging_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Charging_Type_IsValid(int value);
extern const uint32_t Charging_Type_internal_data_[];
constexpr Charging_Type Charging_Type_Type_MIN = static_cast<Charging_Type>(0);
constexpr Charging_Type Charging_Type_Type_MAX = static_cast<Charging_Type>(5);
constexpr int Charging_Type_Type_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Charging_Type_descriptor();
template <typename T>
const std::string& Charging_Type_Name(T value) {
  static_assert(std::is_same<T, Charging_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Charging_Type_Name(static_cast<Charging_Type>(value));
}
template <>
inline const std::string& Charging_Type_Name(Charging_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Charging_Type_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Charging_Type_Parse(absl::string_view name, Charging_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Charging_Type>(
      Charging_Type_descriptor(), name, value);
}
enum Refueling_Type : int {
  Refueling_Type_UNKNOWN_TYPE = 0,
  Refueling_Type_PETROL_PREMIUM = 1,
  Refueling_Type_PETROL_SUPER = 2,
  Refueling_Type_DIESEL = 3,
  Refueling_Type_LPG = 4,
  Refueling_Type_CNG = 5,
  Refueling_Type_BIO_DIESEL = 6,
  Refueling_Type_BIO_ETHANOL = 7,
  Refueling_Type_HYDROGEN = 8,
  Refueling_Type_Refueling_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Refueling_Type_Refueling_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Refueling_Type_IsValid(int value);
extern const uint32_t Refueling_Type_internal_data_[];
constexpr Refueling_Type Refueling_Type_Type_MIN = static_cast<Refueling_Type>(0);
constexpr Refueling_Type Refueling_Type_Type_MAX = static_cast<Refueling_Type>(8);
constexpr int Refueling_Type_Type_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
Refueling_Type_descriptor();
template <typename T>
const std::string& Refueling_Type_Name(T value) {
  static_assert(std::is_same<T, Refueling_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Refueling_Type_Name(static_cast<Refueling_Type>(value));
}
template <>
inline const std::string& Refueling_Type_Name(Refueling_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Refueling_Type_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool Refueling_Type_Parse(absl::string_view name, Refueling_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Refueling_Type>(
      Refueling_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Maneuver_TypeAndConfidence final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence) */ {
 public:
  inline Maneuver_TypeAndConfidence() : Maneuver_TypeAndConfidence(nullptr) {}
  ~Maneuver_TypeAndConfidence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Maneuver_TypeAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline Maneuver_TypeAndConfidence(const Maneuver_TypeAndConfidence& from)
      : Maneuver_TypeAndConfidence(nullptr, from) {}
  Maneuver_TypeAndConfidence(Maneuver_TypeAndConfidence&& from) noexcept
    : Maneuver_TypeAndConfidence() {
    *this = ::std::move(from);
  }

  inline Maneuver_TypeAndConfidence& operator=(const Maneuver_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Maneuver_TypeAndConfidence& operator=(Maneuver_TypeAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Maneuver_TypeAndConfidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Maneuver_TypeAndConfidence* internal_default_instance() {
    return reinterpret_cast<const Maneuver_TypeAndConfidence*>(
               &_Maneuver_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Maneuver_TypeAndConfidence& a, Maneuver_TypeAndConfidence& b) {
    a.Swap(&b);
  }
  inline void Swap(Maneuver_TypeAndConfidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Maneuver_TypeAndConfidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Maneuver_TypeAndConfidence* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Maneuver_TypeAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Maneuver_TypeAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Maneuver_TypeAndConfidence& from) {
    Maneuver_TypeAndConfidence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Maneuver_TypeAndConfidence* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence";
  }
  protected:
  explicit Maneuver_TypeAndConfidence(::google::protobuf::Arena* arena);
  Maneuver_TypeAndConfidence(::google::protobuf::Arena* arena, const Maneuver_TypeAndConfidence& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = Maneuver_TypeAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = Maneuver_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type EVASIVE = Maneuver_TypeAndConfidence_Type_EVASIVE;
  static constexpr Type LANE_CHANGE = Maneuver_TypeAndConfidence_Type_LANE_CHANGE;
  static constexpr Type LANE_CHANGE_RIGHT = Maneuver_TypeAndConfidence_Type_LANE_CHANGE_RIGHT;
  static constexpr Type LANE_CHANGE_LEFT = Maneuver_TypeAndConfidence_Type_LANE_CHANGE_LEFT;
  static constexpr Type OVERTAKING = Maneuver_TypeAndConfidence_Type_OVERTAKING;
  static constexpr Type INTERSECTION_STOP = Maneuver_TypeAndConfidence_Type_INTERSECTION_STOP;
  static constexpr Type TURNING = Maneuver_TypeAndConfidence_Type_TURNING;
  static constexpr Type TURNING_RIGHT = Maneuver_TypeAndConfidence_Type_TURNING_RIGHT;
  static constexpr Type TURNING_LEFT = Maneuver_TypeAndConfidence_Type_TURNING_LEFT;
  static constexpr Type SHARP_TURNING_RIGHT = Maneuver_TypeAndConfidence_Type_SHARP_TURNING_RIGHT;
  static constexpr Type SHARP_TURNING_LEFT = Maneuver_TypeAndConfidence_Type_SHARP_TURNING_LEFT;
  static constexpr Type ACCELERATING = Maneuver_TypeAndConfidence_Type_ACCELERATING;
  static constexpr Type BREAKING = Maneuver_TypeAndConfidence_Type_BREAKING;
  static inline bool Type_IsValid(int value) {
    return Maneuver_TypeAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Maneuver_TypeAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = Maneuver_TypeAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Maneuver_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return Maneuver_TypeAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Maneuver_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Maneuver_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto;
};// -------------------------------------------------------------------

class Maneuver final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.Maneuver) */ {
 public:
  inline Maneuver() : Maneuver(nullptr) {}
  ~Maneuver() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Maneuver(::google::protobuf::internal::ConstantInitialized);

  inline Maneuver(const Maneuver& from)
      : Maneuver(nullptr, from) {}
  Maneuver(Maneuver&& from) noexcept
    : Maneuver() {
    *this = ::std::move(from);
  }

  inline Maneuver& operator=(const Maneuver& from) {
    CopyFrom(from);
    return *this;
  }
  inline Maneuver& operator=(Maneuver&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Maneuver& default_instance() {
    return *internal_default_instance();
  }
  static inline const Maneuver* internal_default_instance() {
    return reinterpret_cast<const Maneuver*>(
               &_Maneuver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Maneuver& a, Maneuver& b) {
    a.Swap(&b);
  }
  inline void Swap(Maneuver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Maneuver* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Maneuver* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Maneuver>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Maneuver& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Maneuver& from) {
    Maneuver::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Maneuver* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.trafficmaneuver.Maneuver";
  }
  protected:
  explicit Maneuver(::google::protobuf::Arena* arena);
  Maneuver(::google::protobuf::Arena* arena, const Maneuver& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TypeAndConfidence = Maneuver_TypeAndConfidence;

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kTypeAndConfidenceFieldNumber = 2,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence type_and_confidence = 2;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence() ;
  const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence& type_and_confidence() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* release_type_and_confidence();
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* value);
  void unsafe_arena_set_allocated_type_and_confidence(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* value);
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* unsafe_arena_release_type_and_confidence();

  private:
  const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence& _internal_type_and_confidence() const;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* _internal_mutable_type_and_confidence();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* type_and_confidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto;
};// -------------------------------------------------------------------

class Refueling final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.Refueling) */ {
 public:
  inline Refueling() : Refueling(nullptr) {}
  ~Refueling() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Refueling(::google::protobuf::internal::ConstantInitialized);

  inline Refueling(const Refueling& from)
      : Refueling(nullptr, from) {}
  Refueling(Refueling&& from) noexcept
    : Refueling() {
    *this = ::std::move(from);
  }

  inline Refueling& operator=(const Refueling& from) {
    CopyFrom(from);
    return *this;
  }
  inline Refueling& operator=(Refueling&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Refueling& default_instance() {
    return *internal_default_instance();
  }
  static inline const Refueling* internal_default_instance() {
    return reinterpret_cast<const Refueling*>(
               &_Refueling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Refueling& a, Refueling& b) {
    a.Swap(&b);
  }
  inline void Swap(Refueling* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Refueling* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Refueling* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Refueling>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Refueling& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Refueling& from) {
    Refueling::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Refueling* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.trafficmaneuver.Refueling";
  }
  protected:
  explicit Refueling(::google::protobuf::Arena* arena);
  Refueling(::google::protobuf::Arena* arena, const Refueling& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = Refueling_Type;
  static constexpr Type UNKNOWN_TYPE = Refueling_Type_UNKNOWN_TYPE;
  static constexpr Type PETROL_PREMIUM = Refueling_Type_PETROL_PREMIUM;
  static constexpr Type PETROL_SUPER = Refueling_Type_PETROL_SUPER;
  static constexpr Type DIESEL = Refueling_Type_DIESEL;
  static constexpr Type LPG = Refueling_Type_LPG;
  static constexpr Type CNG = Refueling_Type_CNG;
  static constexpr Type BIO_DIESEL = Refueling_Type_BIO_DIESEL;
  static constexpr Type BIO_ETHANOL = Refueling_Type_BIO_ETHANOL;
  static constexpr Type HYDROGEN = Refueling_Type_HYDROGEN;
  static inline bool Type_IsValid(int value) {
    return Refueling_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Refueling_Type_Type_MIN;
  static constexpr Type Type_MAX = Refueling_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Refueling_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return Refueling_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Refueling_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Refueling_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kQuantityToFullAndAccuracyFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy quantity_to_full_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_quantity_to_full_and_accuracy() const;
  void clear_quantity_to_full_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& quantity_to_full_and_accuracy() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_quantity_to_full_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_quantity_to_full_and_accuracy();
  void set_allocated_quantity_to_full_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  void unsafe_arena_set_allocated_quantity_to_full_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_quantity_to_full_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_quantity_to_full_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _internal_mutable_quantity_to_full_and_accuracy();

  public:
  // .sensoris.protobuf.categories.trafficmaneuver.Refueling.Type type = 2;
  void clear_type() ;
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type type() const;
  void set_type(::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type value);

  private:
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.Refueling)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* quantity_to_full_and_accuracy_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto;
};// -------------------------------------------------------------------

class Charging final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.Charging) */ {
 public:
  inline Charging() : Charging(nullptr) {}
  ~Charging() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Charging(::google::protobuf::internal::ConstantInitialized);

  inline Charging(const Charging& from)
      : Charging(nullptr, from) {}
  Charging(Charging&& from) noexcept
    : Charging() {
    *this = ::std::move(from);
  }

  inline Charging& operator=(const Charging& from) {
    CopyFrom(from);
    return *this;
  }
  inline Charging& operator=(Charging&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Charging& default_instance() {
    return *internal_default_instance();
  }
  static inline const Charging* internal_default_instance() {
    return reinterpret_cast<const Charging*>(
               &_Charging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Charging& a, Charging& b) {
    a.Swap(&b);
  }
  inline void Swap(Charging* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Charging* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Charging* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Charging>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Charging& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Charging& from) {
    Charging::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Charging* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.trafficmaneuver.Charging";
  }
  protected:
  explicit Charging(::google::protobuf::Arena* arena);
  Charging(::google::protobuf::Arena* arena, const Charging& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = Charging_Type;
  static constexpr Type UNKNOWN_TYPE = Charging_Type_UNKNOWN_TYPE;
  static constexpr Type PORT_J1772 = Charging_Type_PORT_J1772;
  static constexpr Type CHADEMO = Charging_Type_CHADEMO;
  static constexpr Type SAE_COMBO = Charging_Type_SAE_COMBO;
  static constexpr Type TESLA_HPWC = Charging_Type_TESLA_HPWC;
  static constexpr Type TESLA_SUPERCHARGER = Charging_Type_TESLA_SUPERCHARGER;
  static inline bool Type_IsValid(int value) {
    return Charging_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Charging_Type_Type_MIN;
  static constexpr Type Type_MAX = Charging_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Charging_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return Charging_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Charging_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Charging_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kVoltageAndAccuracyFieldNumber = 3,
    kCurrentAndAccuracyFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy voltage_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_voltage_and_accuracy() const;
  void clear_voltage_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& voltage_and_accuracy() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_voltage_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_voltage_and_accuracy();
  void set_allocated_voltage_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  void unsafe_arena_set_allocated_voltage_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_voltage_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_voltage_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _internal_mutable_voltage_and_accuracy();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy current_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_current_and_accuracy() const;
  void clear_current_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& current_and_accuracy() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_current_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_current_and_accuracy();
  void set_allocated_current_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  void unsafe_arena_set_allocated_current_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_current_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_current_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _internal_mutable_current_and_accuracy();

  public:
  // .sensoris.protobuf.categories.trafficmaneuver.Charging.Type type = 2;
  void clear_type() ;
  ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type type() const;
  void set_type(::sensoris::protobuf::categories::trafficmaneuver::Charging_Type value);

  private:
  ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::trafficmaneuver::Charging_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.Charging)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* voltage_and_accuracy_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* current_and_accuracy_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto;
};// -------------------------------------------------------------------

class TrafficManeuverCategory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory) */ {
 public:
  inline TrafficManeuverCategory() : TrafficManeuverCategory(nullptr) {}
  ~TrafficManeuverCategory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficManeuverCategory(::google::protobuf::internal::ConstantInitialized);

  inline TrafficManeuverCategory(const TrafficManeuverCategory& from)
      : TrafficManeuverCategory(nullptr, from) {}
  TrafficManeuverCategory(TrafficManeuverCategory&& from) noexcept
    : TrafficManeuverCategory() {
    *this = ::std::move(from);
  }

  inline TrafficManeuverCategory& operator=(const TrafficManeuverCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficManeuverCategory& operator=(TrafficManeuverCategory&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficManeuverCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficManeuverCategory* internal_default_instance() {
    return reinterpret_cast<const TrafficManeuverCategory*>(
               &_TrafficManeuverCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrafficManeuverCategory& a, TrafficManeuverCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficManeuverCategory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficManeuverCategory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficManeuverCategory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficManeuverCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficManeuverCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TrafficManeuverCategory& from) {
    TrafficManeuverCategory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TrafficManeuverCategory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory";
  }
  protected:
  explicit TrafficManeuverCategory(::google::protobuf::Arena* arena);
  TrafficManeuverCategory(::google::protobuf::Arena* arena, const TrafficManeuverCategory& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManeuverFieldNumber = 2,
    kChargingFieldNumber = 3,
    kRefuelingFieldNumber = 4,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.trafficmaneuver.Maneuver maneuver = 2;
  int maneuver_size() const;
  private:
  int _internal_maneuver_size() const;

  public:
  void clear_maneuver() ;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* mutable_maneuver(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver >*
      mutable_maneuver();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Maneuver>& _internal_maneuver() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Maneuver>* _internal_mutable_maneuver();
  public:
  const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver& maneuver(int index) const;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* add_maneuver();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver >&
      maneuver() const;
  // repeated .sensoris.protobuf.categories.trafficmaneuver.Charging charging = 3;
  int charging_size() const;
  private:
  int _internal_charging_size() const;

  public:
  void clear_charging() ;
  ::sensoris::protobuf::categories::trafficmaneuver::Charging* mutable_charging(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Charging >*
      mutable_charging();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Charging>& _internal_charging() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Charging>* _internal_mutable_charging();
  public:
  const ::sensoris::protobuf::categories::trafficmaneuver::Charging& charging(int index) const;
  ::sensoris::protobuf::categories::trafficmaneuver::Charging* add_charging();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Charging >&
      charging() const;
  // repeated .sensoris.protobuf.categories.trafficmaneuver.Refueling refueling = 4;
  int refueling_size() const;
  private:
  int _internal_refueling_size() const;

  public:
  void clear_refueling() ;
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling* mutable_refueling(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Refueling >*
      mutable_refueling();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Refueling>& _internal_refueling() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Refueling>* _internal_mutable_refueling();
  public:
  const ::sensoris::protobuf::categories::trafficmaneuver::Refueling& refueling(int index) const;
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling* add_refueling();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Refueling >&
      refueling() const;
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver > maneuver_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Charging > charging_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Refueling > refueling_;
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Maneuver_TypeAndConfidence

// .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.Type type = 1;
inline void Maneuver_TypeAndConfidence::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.type)
  return _internal_type();
}
inline void Maneuver_TypeAndConfidence::set_type(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.type)
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type>(_impl_.type_);
}
inline void Maneuver_TypeAndConfidence::_internal_set_type(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool Maneuver_TypeAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& Maneuver_TypeAndConfidence::_internal_confidence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& Maneuver_TypeAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
  return _internal_confidence();
}
inline void Maneuver_TypeAndConfidence::unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* Maneuver_TypeAndConfidence::release_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* Maneuver_TypeAndConfidence::unsafe_arena_release_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* Maneuver_TypeAndConfidence::_internal_mutable_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.confidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* Maneuver_TypeAndConfidence::mutable_confidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
  return _msg;
}
inline void Maneuver_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// Maneuver

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Maneuver::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Maneuver::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Maneuver::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
  return _internal_envelope();
}
inline void Maneuver::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Maneuver::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Maneuver::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Maneuver::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Maneuver::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
  return _msg;
}
inline void Maneuver::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
}

// .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence type_and_confidence = 2;
inline bool Maneuver::has_type_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_and_confidence_ != nullptr);
  return value;
}
inline void Maneuver::clear_type_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.type_and_confidence_ != nullptr) _impl_.type_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence& Maneuver::_internal_type_and_confidence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* p = _impl_.type_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence&>(::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_TypeAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence& Maneuver::type_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
  return _internal_type_and_confidence();
}
inline void Maneuver::unsafe_arena_set_allocated_type_and_confidence(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_and_confidence_);
  }
  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Maneuver::release_type_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* released = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Maneuver::unsafe_arena_release_type_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* temp = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Maneuver::_internal_mutable_type_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.type_and_confidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence>(GetArena());
    _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence*>(p);
  }
  return _impl_.type_and_confidence_;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Maneuver::mutable_type_and_confidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* _msg = _internal_mutable_type_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
  return _msg;
}
inline void Maneuver::set_allocated_type_and_confidence(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence*>(_impl_.type_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
}

// -------------------------------------------------------------------

// Charging

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Charging::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Charging::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Charging::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
  return _internal_envelope();
}
inline void Charging::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Charging::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Charging::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Charging::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Charging::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
  return _msg;
}
inline void Charging::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
}

// .sensoris.protobuf.categories.trafficmaneuver.Charging.Type type = 2;
inline void Charging::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type Charging::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Charging.type)
  return _internal_type();
}
inline void Charging::set_type(::sensoris::protobuf::categories::trafficmaneuver::Charging_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.trafficmaneuver.Charging.type)
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type Charging::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::trafficmaneuver::Charging_Type>(_impl_.type_);
}
inline void Charging::_internal_set_type(::sensoris::protobuf::categories::trafficmaneuver::Charging_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy voltage_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool Charging::has_voltage_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voltage_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Charging::_internal_voltage_and_accuracy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.voltage_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Charging::voltage_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
  return _internal_voltage_and_accuracy();
}
inline void Charging::unsafe_arena_set_allocated_voltage_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltage_and_accuracy_);
  }
  _impl_.voltage_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::release_voltage_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.voltage_and_accuracy_;
  _impl_.voltage_and_accuracy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::unsafe_arena_release_voltage_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.voltage_and_accuracy_;
  _impl_.voltage_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::_internal_mutable_voltage_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.voltage_and_accuracy_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.voltage_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.voltage_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::mutable_voltage_and_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_voltage_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
  return _msg;
}
inline void Charging::set_allocated_voltage_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voltage_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.voltage_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy current_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool Charging::has_current_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Charging::_internal_current_and_accuracy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.current_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Charging::current_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
  return _internal_current_and_accuracy();
}
inline void Charging::unsafe_arena_set_allocated_current_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_and_accuracy_);
  }
  _impl_.current_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::release_current_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.current_and_accuracy_;
  _impl_.current_and_accuracy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::unsafe_arena_release_current_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.current_and_accuracy_;
  _impl_.current_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::_internal_mutable_current_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.current_and_accuracy_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.current_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.current_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::mutable_current_and_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_current_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
  return _msg;
}
inline void Charging::set_allocated_current_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.current_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
}

// -------------------------------------------------------------------

// Refueling

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Refueling::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Refueling::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Refueling::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
  return _internal_envelope();
}
inline void Refueling::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Refueling::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Refueling::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Refueling::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Refueling::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
  return _msg;
}
inline void Refueling::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
}

// .sensoris.protobuf.categories.trafficmaneuver.Refueling.Type type = 2;
inline void Refueling::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type Refueling::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Refueling.type)
  return _internal_type();
}
inline void Refueling::set_type(::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.trafficmaneuver.Refueling.type)
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type Refueling::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type>(_impl_.type_);
}
inline void Refueling::_internal_set_type(::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy quantity_to_full_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool Refueling::has_quantity_to_full_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.quantity_to_full_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Refueling::_internal_quantity_to_full_and_accuracy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.quantity_to_full_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Refueling::quantity_to_full_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
  return _internal_quantity_to_full_and_accuracy();
}
inline void Refueling::unsafe_arena_set_allocated_quantity_to_full_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quantity_to_full_and_accuracy_);
  }
  _impl_.quantity_to_full_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Refueling::release_quantity_to_full_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.quantity_to_full_and_accuracy_;
  _impl_.quantity_to_full_and_accuracy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Refueling::unsafe_arena_release_quantity_to_full_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.quantity_to_full_and_accuracy_;
  _impl_.quantity_to_full_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Refueling::_internal_mutable_quantity_to_full_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.quantity_to_full_and_accuracy_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.quantity_to_full_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.quantity_to_full_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Refueling::mutable_quantity_to_full_and_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_quantity_to_full_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
  return _msg;
}
inline void Refueling::set_allocated_quantity_to_full_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quantity_to_full_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.quantity_to_full_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
}

// -------------------------------------------------------------------

// TrafficManeuverCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool TrafficManeuverCategory::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& TrafficManeuverCategory::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope&>(::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& TrafficManeuverCategory::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
  return _internal_envelope();
}
inline void TrafficManeuverCategory::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* TrafficManeuverCategory::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* TrafficManeuverCategory::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* TrafficManeuverCategory::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* TrafficManeuverCategory::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::CategoryEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
  return _msg;
}
inline void TrafficManeuverCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
}

// repeated .sensoris.protobuf.categories.trafficmaneuver.Maneuver maneuver = 2;
inline int TrafficManeuverCategory::_internal_maneuver_size() const {
  return _internal_maneuver().size();
}
inline int TrafficManeuverCategory::maneuver_size() const {
  return _internal_maneuver_size();
}
inline void TrafficManeuverCategory::clear_maneuver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.maneuver_.Clear();
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* TrafficManeuverCategory::mutable_maneuver(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return _internal_mutable_maneuver()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Maneuver>* TrafficManeuverCategory::mutable_maneuver()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_maneuver();
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver& TrafficManeuverCategory::maneuver(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return _internal_maneuver().Get(index);
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* TrafficManeuverCategory::add_maneuver() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* _add = _internal_mutable_maneuver()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Maneuver>& TrafficManeuverCategory::maneuver() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return _internal_maneuver();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Maneuver>&
TrafficManeuverCategory::_internal_maneuver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.maneuver_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Maneuver>*
TrafficManeuverCategory::_internal_mutable_maneuver() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.maneuver_;
}

// repeated .sensoris.protobuf.categories.trafficmaneuver.Charging charging = 3;
inline int TrafficManeuverCategory::_internal_charging_size() const {
  return _internal_charging().size();
}
inline int TrafficManeuverCategory::charging_size() const {
  return _internal_charging_size();
}
inline void TrafficManeuverCategory::clear_charging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.charging_.Clear();
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Charging* TrafficManeuverCategory::mutable_charging(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return _internal_mutable_charging()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Charging>* TrafficManeuverCategory::mutable_charging()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_charging();
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Charging& TrafficManeuverCategory::charging(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return _internal_charging().Get(index);
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Charging* TrafficManeuverCategory::add_charging() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::trafficmaneuver::Charging* _add = _internal_mutable_charging()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Charging>& TrafficManeuverCategory::charging() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return _internal_charging();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Charging>&
TrafficManeuverCategory::_internal_charging() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.charging_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Charging>*
TrafficManeuverCategory::_internal_mutable_charging() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.charging_;
}

// repeated .sensoris.protobuf.categories.trafficmaneuver.Refueling refueling = 4;
inline int TrafficManeuverCategory::_internal_refueling_size() const {
  return _internal_refueling().size();
}
inline int TrafficManeuverCategory::refueling_size() const {
  return _internal_refueling_size();
}
inline void TrafficManeuverCategory::clear_refueling() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.refueling_.Clear();
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Refueling* TrafficManeuverCategory::mutable_refueling(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return _internal_mutable_refueling()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Refueling>* TrafficManeuverCategory::mutable_refueling()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_refueling();
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Refueling& TrafficManeuverCategory::refueling(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return _internal_refueling().Get(index);
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Refueling* TrafficManeuverCategory::add_refueling() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling* _add = _internal_mutable_refueling()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Refueling>& TrafficManeuverCategory::refueling() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return _internal_refueling();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Refueling>&
TrafficManeuverCategory::_internal_refueling() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.refueling_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::trafficmaneuver::Refueling>*
TrafficManeuverCategory::_internal_mutable_refueling() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.refueling_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficmaneuver
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::trafficmaneuver::Charging_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::trafficmaneuver::Charging_Type>() {
  return ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type>() {
  return ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto_2epb_2eh
