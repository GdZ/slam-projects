// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/road_attribution.proto

#include "sensoris/protobuf/categories/road_attribution.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace roadattribution {

inline constexpr SurfaceMaterialAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SurfaceMaterialAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceMaterialAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceMaterialAndConfidenceDefaultTypeInternal() {}
  union {
    SurfaceMaterialAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceMaterialAndConfidenceDefaultTypeInternal _SurfaceMaterialAndConfidence_default_instance_;

inline constexpr SurfaceMarking_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SurfaceMarking_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceMarking_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceMarking_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    SurfaceMarking_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceMarking_TypeAndConfidenceDefaultTypeInternal _SurfaceMarking_TypeAndConfidence_default_instance_;

inline constexpr RoadAttribution_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadAttribution_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadAttribution_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadAttribution_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadAttribution_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadAttribution_TypeAndConfidenceDefaultTypeInternal _RoadAttribution_TypeAndConfidence_default_instance_;

inline constexpr RoadAttribution_ChangeTypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadAttribution_ChangeTypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal _RoadAttribution_ChangeTypeAndConfidence_default_instance_;

inline constexpr MarkingMaterialAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarkingMaterialAndConfidence::MarkingMaterialAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MarkingMaterialAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkingMaterialAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkingMaterialAndConfidenceDefaultTypeInternal() {}
  union {
    MarkingMaterialAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkingMaterialAndConfidenceDefaultTypeInternal _MarkingMaterialAndConfidence_default_instance_;

inline constexpr MarkingColorAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarkingColorAndConfidence::MarkingColorAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MarkingColorAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkingColorAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkingColorAndConfidenceDefaultTypeInternal() {}
  union {
    MarkingColorAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkingColorAndConfidenceDefaultTypeInternal _MarkingColorAndConfidence_default_instance_;

inline constexpr LaneBoundaryMergeSplit_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    LaneBoundaryMergeSplit_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal _LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_;

inline constexpr LaneBoundary_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneBoundary_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundary_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundary_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    LaneBoundary_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundary_TypeAndConfidenceDefaultTypeInternal _LaneBoundary_TypeAndConfidence_default_instance_;

inline constexpr LaneBoundary_MarkingOffsets_TypeAndOffset::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        offset_and_accuracy_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal() {}
  union {
    LaneBoundary_MarkingOffsets_TypeAndOffset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal _LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_;

inline constexpr LaneBoundary_DashStatistics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        length_and_accuracy_{nullptr},
        distance_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary_DashStatistics::LaneBoundary_DashStatistics(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneBoundary_DashStatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundary_DashStatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundary_DashStatisticsDefaultTypeInternal() {}
  union {
    LaneBoundary_DashStatistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundary_DashStatisticsDefaultTypeInternal _LaneBoundary_DashStatistics_default_instance_;

inline constexpr InclinationAndCurvature::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        longitudinal_inclination_and_accuracy_{nullptr},
        lateral_inclination_and_accuracy_{nullptr},
        horizontal_curvature_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InclinationAndCurvature::InclinationAndCurvature(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InclinationAndCurvatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InclinationAndCurvatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InclinationAndCurvatureDefaultTypeInternal() {}
  union {
    InclinationAndCurvature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InclinationAndCurvatureDefaultTypeInternal _InclinationAndCurvature_default_instance_;

inline constexpr Road::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        width_and_accuracy_{nullptr},
        inclination_and_curvature_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Road::Road(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadDefaultTypeInternal() {}
  union {
    Road _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadDefaultTypeInternal _Road_default_instance_;

inline constexpr LaneBoundary_MarkingOffsets::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_and_offset_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneBoundary_MarkingOffsetsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundary_MarkingOffsetsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundary_MarkingOffsetsDefaultTypeInternal() {}
  union {
    LaneBoundary_MarkingOffsets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundary_MarkingOffsetsDefaultTypeInternal _LaneBoundary_MarkingOffsets_default_instance_;

inline constexpr Lane::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        relative_lane_id_{nullptr},
        width_and_accuracy_{nullptr},
        inclination_and_curvature_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Lane::Lane(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDefaultTypeInternal _Lane_default_instance_;

inline constexpr SurfaceAttribution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        material_and_confidence_{},
        envelope_{nullptr},
        position_and_accuracy_{nullptr},
        inclination_and_curvature_{nullptr},
        road_roughness_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SurfaceAttribution::SurfaceAttribution(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SurfaceAttributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceAttributionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceAttributionDefaultTypeInternal() {}
  union {
    SurfaceAttribution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceAttributionDefaultTypeInternal _SurfaceAttribution_default_instance_;

inline constexpr RoadAttribution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        position_and_accuracy_{nullptr},
        type_and_confidence_{nullptr},
        change_type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadAttribution::RoadAttribution(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadAttributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadAttributionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadAttributionDefaultTypeInternal() {}
  union {
    RoadAttribution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadAttributionDefaultTypeInternal _RoadAttribution_default_instance_;

inline constexpr LaneCountAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        position_and_accuracy_{nullptr},
        count_and_confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LaneCountAndConfidence::LaneCountAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneCountAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneCountAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneCountAndConfidenceDefaultTypeInternal() {}
  union {
    LaneCountAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneCountAndConfidenceDefaultTypeInternal _LaneCountAndConfidence_default_instance_;

inline constexpr LaneBoundaryMergeSplit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        position_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundaryMergeSplit::LaneBoundaryMergeSplit(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneBoundaryMergeSplitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryMergeSplitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryMergeSplitDefaultTypeInternal() {}
  union {
    LaneBoundaryMergeSplit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryMergeSplitDefaultTypeInternal _LaneBoundaryMergeSplit_default_instance_;

inline constexpr LaneBoundary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        lane_boundary_id_{nullptr},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        material_and_confidence_{nullptr},
        color_and_confidence_{nullptr},
        width_and_accuracy_{nullptr},
        height_and_accuracy_{nullptr},
        distance_between_double_and_accuracy_{nullptr},
        position_reference_{static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_PositionReference >(0)},
        geometry_{},
        markings_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR LaneBoundary::LaneBoundary(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LaneBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryDefaultTypeInternal() {}
  union {
    LaneBoundary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryDefaultTypeInternal _LaneBoundary_default_instance_;

inline constexpr SurfaceMarking::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_and_confidence_{},
        material_and_confidence_{},
        envelope_{nullptr},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        text_{nullptr},
        rectangular_box_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SurfaceMarking::SurfaceMarking(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SurfaceMarkingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceMarkingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceMarkingDefaultTypeInternal() {}
  union {
    SurfaceMarking _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceMarkingDefaultTypeInternal _SurfaceMarking_default_instance_;

inline constexpr RoadAttributionCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lane_boundary_{},
        lane_boundary_merge_split_{},
        lane_{},
        road_{},
        surface_marking_{},
        surface_attribution_{},
        road_attribution_{},
        detected_lane_count_and_confidence_{},
        estimated_lane_count_and_confidence_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadAttributionCategory::RoadAttributionCategory(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadAttributionCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadAttributionCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadAttributionCategoryDefaultTypeInternal() {}
  union {
    RoadAttributionCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadAttributionCategoryDefaultTypeInternal _RoadAttributionCategory_default_instance_;
}  // namespace roadattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[11];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _impl_.longitudinal_inclination_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _impl_.lateral_inclination_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _impl_.horizontal_curvature_and_accuracy_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, _impl_.length_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, _impl_.distance_and_accuracy_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.offset_and_accuracy_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets, _impl_.type_and_offset_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.lane_boundary_id_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.existence_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.material_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.color_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.position_reference_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.width_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.height_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.distance_between_double_and_accuracy_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.geometry_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_.markings_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    ~0u,
    ~0u,
    7,
    8,
    9,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.existence_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _impl_.position_and_accuracy_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_.relative_lane_id_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_.width_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _impl_.inclination_and_curvature_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _impl_.width_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _impl_.inclination_and_curvature_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.existence_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.text_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.color_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.material_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _impl_.rectangular_box_and_accuracy_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    ~0u,
    5,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.position_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.inclination_and_curvature_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.material_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _impl_.road_roughness_and_accuracy_),
    0,
    1,
    2,
    ~0u,
    3,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.position_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _impl_.change_type_and_confidence_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_.position_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _impl_.count_and_confidence_),
    0,
    1,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.lane_boundary_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.lane_boundary_merge_split_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.lane_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.road_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.surface_marking_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.surface_attribution_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.road_attribution_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.detected_lane_count_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _impl_.estimated_lane_count_and_confidence_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence)},
        {12, 22, -1, sizeof(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence)},
        {24, 34, -1, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence)},
        {36, 47, -1, sizeof(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature)},
        {50, 60, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence)},
        {62, 72, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics)},
        {74, 84, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset)},
        {86, -1, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets)},
        {95, 119, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary)},
        {133, 143, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence)},
        {145, 158, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit)},
        {163, 175, -1, sizeof(::sensoris::protobuf::categories::roadattribution::Lane)},
        {179, 190, -1, sizeof(::sensoris::protobuf::categories::roadattribution::Road)},
        {193, 203, -1, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence)},
        {205, 221, -1, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMarking)},
        {229, 242, -1, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution)},
        {247, 257, -1, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence)},
        {259, 269, -1, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence)},
        {271, 284, -1, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution)},
        {289, 301, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence)},
        {305, 323, -1, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::categories::roadattribution::_MarkingColorAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_MarkingMaterialAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_SurfaceMaterialAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_InclinationAndCurvature_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_DashStatistics_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_Lane_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_Road_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_SurfaceAttribution_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_ChangeTypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_LaneCountAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::roadattribution::_RoadAttributionCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n3sensoris/protobuf/categories/road_attr"
    "ibution.proto\022,sensoris.protobuf.categor"
    "ies.roadattribution\032\036google/protobuf/wra"
    "ppers.proto\032\"sensoris/protobuf/types/bas"
    "e.proto\032%sensoris/protobuf/types/spatial"
    ".proto\"\331\002\n\031MarkingColorAndConfidence\022Z\n\004"
    "type\030\001 \001(\0162L.sensoris.protobuf.categorie"
    "s.roadattribution.MarkingColorAndConfide"
    "nce.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris."
    "protobuf.types.base.Confidence\"\241\001\n\004Type\022"
    "\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005WHITE\020\001\022\010\n\004GRAY\020\002\022\016"
    "\n\nGRAY_LIGHT\020\003\022\r\n\tGRAY_DARK\020\004\022\t\n\005BLACK\020\005"
    "\022\007\n\003RED\020\006\022\n\n\006YELLOW\020\007\022\t\n\005GREEN\020\010\022\010\n\004CYAN"
    "\020\t\022\010\n\004BLUE\020\n\022\n\n\006ORANGE\020\013\022\010\n\004PINK\020\014\"\357\002\n\034M"
    "arkingMaterialAndConfidence\022]\n\004type\030\001 \001("
    "\0162O.sensoris.protobuf.categories.roadatt"
    "ribution.MarkingMaterialAndConfidence.Ty"
    "pe\022<\n\nconfidence\030\002 \001(\0132(.sensoris.protob"
    "uf.types.base.Confidence\"\261\001\n\004Type\022\020\n\014UNK"
    "NOWN_TYPE\020\000\022\t\n\005METAL\020\001\022\014\n\010CONCRETE\020\002\022\t\n\005"
    "STONE\020\003\022\010\n\004WOOD\020\004\022\013\n\007PLASTIC\020\005\022\017\n\013TRANSP"
    "ARENT\020\006\022\026\n\022VIBRATION_MARKINGS\020\007\022\t\n\005PAINT"
    "\020\010\022\013\n\007ASPHALT\020\t\022\n\n\006GRAVEL\020\n\022\017\n\013COBBLESTO"
    "NE\020\013\"\264\002\n\034SurfaceMaterialAndConfidence\022]\n"
    "\004type\030\001 \001(\0162O.sensoris.protobuf.categori"
    "es.roadattribution.SurfaceMaterialAndCon"
    "fidence.Type\022<\n\nconfidence\030\002 \001(\0132(.senso"
    "ris.protobuf.types.base.Confidence\"w\n\004Ty"
    "pe\022\020\n\014UNKNOWN_TYPE\020\000\022\013\n\007ASPHALT\020\001\022\014\n\010CON"
    "CRETE\020\002\022\026\n\022COMPOSITE_PAVEMENT\020\003\022\r\n\tRECYC"
    "LING\020\004\022\n\n\006GRAVEL\020\005\022\017\n\013COBBLESTONE\020\006\"\316\002\n\027"
    "InclinationAndCurvature\022h\n%longitudinal_"
    "inclination_and_accuracy\030\001 \001(\01323.sensori"
    "s.protobuf.types.base.Int64ValueAndAccur"
    "acyB\004\210\265\030\002\022c\n lateral_inclination_and_acc"
    "uracy\030\002 \001(\01323.sensoris.protobuf.types.ba"
    "se.Int64ValueAndAccuracyB\004\210\265\030\002\022d\n!horizo"
    "ntal_curvature_and_accuracy\030\003 \001(\01323.sens"
    "oris.protobuf.types.base.Int64ValueAndAc"
    "curacyB\004\210\265\030\003\"\273\026\n\014LaneBoundary\022=\n\010envelop"
    "e\030\001 \001(\0132+.sensoris.protobuf.types.base.E"
    "ventEnvelope\0225\n\020lane_boundary_id\030\002 \001(\0132\033"
    ".google.protobuf.Int64Value\022F\n\024existence"
    "_confidence\030\003 \001(\0132(.sensoris.protobuf.ty"
    "pes.base.Confidence\022L\n\020detection_status\030"
    "\004 \001(\01322.sensoris.protobuf.types.base.Eve"
    "ntDetectionStatus\022i\n\023type_and_confidence"
    "\030\005 \001(\0132L.sensoris.protobuf.categories.ro"
    "adattribution.LaneBoundary.TypeAndConfid"
    "ence\022k\n\027material_and_confidence\030\006 \001(\0132J."
    "sensoris.protobuf.categories.roadattribu"
    "tion.MarkingMaterialAndConfidence\022e\n\024col"
    "or_and_confidence\030\007 \001(\0132G.sensoris.proto"
    "buf.categories.roadattribution.MarkingCo"
    "lorAndConfidence\022h\n\022position_reference\030\010"
    " \001(\0162L.sensoris.protobuf.categories.road"
    "attribution.LaneBoundary.PositionReferen"
    "ce\022U\n\025polyline_and_accuracy\030\t \001(\01324.sens"
    "oris.protobuf.types.spatial.PolylineAndA"
    "ccuracyH\000\022U\n\022width_and_accuracy\030\n \001(\01323."
    "sensoris.protobuf.types.base.Int64ValueA"
    "ndAccuracyB\004\210\265\030\000\022V\n\023height_and_accuracy\030"
    "\013 \001(\01323.sensoris.protobuf.types.base.Int"
    "64ValueAndAccuracyB\004\210\265\030\000\022g\n$distance_bet"
    "ween_double_and_accuracy\030\014 \001(\01323.sensori"
    "s.protobuf.types.base.Int64ValueAndAccur"
    "acyB\004\210\265\030\000\022d\n\017dash_statistics\030\r \001(\0132I.sen"
    "soris.protobuf.categories.roadattributio"
    "n.LaneBoundary.DashStatisticsH\001\022d\n\017marki"
    "ng_offsets\030\016 \001(\0132I.sensoris.protobuf.cat"
    "egories.roadattribution.LaneBoundary.Mar"
    "kingOffsetsH\001\032\241\006\n\021TypeAndConfidence\022_\n\004t"
    "ype\030\001 \001(\0162Q.sensoris.protobuf.categories"
    ".roadattribution.LaneBoundary.TypeAndCon"
    "fidence.Type\022<\n\nconfidence\030\002 \001(\0132(.senso"
    "ris.protobuf.types.base.Confidence\"\354\004\n\004T"
    "ype\022\020\n\014UNKNOWN_TYPE\020\000\022\010\n\004LINE\020\001\022\017\n\013LINE_"
    "SINGLE\020\002\022\025\n\021LINE_SINGLE_SOLID\020\003\022\026\n\022LINE_"
    "SINGLE_DASHED\020\004\022\034\n\030LINE_SINGLE_DASHED_SH"
    "ORT\020\005\022\033\n\027LINE_SINGLE_DASHED_LONG\020\006\022\017\n\013LI"
    "NE_DOUBLE\020\007\022\025\n\021LINE_DOUBLE_SOLID\020\010\022\026\n\022LI"
    "NE_DOUBLE_DASHED\020\t\022\034\n\030LINE_DOUBLE_SOLID_"
    "DASHED\020\n\022\034\n\030LINE_DOUBLE_DASHED_SOLID\020\013\022\027"
    "\n\023SHADED_AREA_MARKING\020\014\022\021\n\rBLOCKS_DASHED"
    "\020\r\022\022\n\016CROSSING_ALERT\020\016\022\010\n\004CURB\020\017\022\024\n\020CURB"
    "_TRAVERSABLE\020\020\022\030\n\024CURB_NON_TRAVERSABLE\020\021"
    "\022\024\n\020PHYSICAL_DIVIDER\020\022\022\010\n\004WALL\020\023\022\r\n\tWALL"
    "_FLAT\020\024\022\017\n\013WALL_CURVED\020\025\022\013\n\007BARRIER\020\026\022\022\n"
    "\016BARRIER_JERSEY\020\027\022\021\n\rBARRIER_SOUND\020\030\022\021\n\r"
    "BARRIER_CABLE\020\031\022\r\n\tGUARDRAIL\020\032\022\t\n\005FENCE\020"
    "\033\022\r\n\tROAD_EDGE\020\034\022\t\n\005CLIFF\020\035\022\t\n\005DITCH\020\036\022\021"
    "\n\rASPHALT_JOINT\020\037\032\302\001\n\016DashStatistics\022V\n\023"
    "length_and_accuracy\030\002 \001(\01323.sensoris.pro"
    "tobuf.types.base.Int64ValueAndAccuracyB\004"
    "\210\265\030\000\022X\n\025distance_and_accuracy\030\003 \001(\01323.se"
    "nsoris.protobuf.types.base.Int64ValueAnd"
    "AccuracyB\004\210\265\030\000\032\274\003\n\016MarkingOffsets\022p\n\017typ"
    "e_and_offset\030\002 \003(\0132W.sensoris.protobuf.c"
    "ategories.roadattribution.LaneBoundary.M"
    "arkingOffsets.TypeAndOffset\032\267\002\n\rTypeAndO"
    "ffset\022j\n\004type\030\001 \001(\0162\\.sensoris.protobuf."
    "categories.roadattribution.LaneBoundary."
    "MarkingOffsets.TypeAndOffset.Type\022V\n\023off"
    "set_and_accuracy\030\002 \001(\01323.sensoris.protob"
    "uf.types.base.Int64ValueAndAccuracyB\004\210\265\030"
    "\000\"b\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\024\n\020START_OF_"
    "MARKING\020\001\022\022\n\016END_OF_MARKING\020\002\022\016\n\nON_MARK"
    "ING\020\003\022\016\n\nNO_MARKING\020\004\"{\n\021PositionReferen"
    "ce\022\036\n\032UNKNOWN_POSITION_REFERENCE\020\000\022\031\n\025LE"
    "FT_MARKING_BOUNDARY\020\001\022\017\n\013CENTER_LINE\020\002\022\032"
    "\n\026RIGHT_MARKING_BOUNDARY\020\003B\n\n\010geometryB\n"
    "\n\010markings\"\246\005\n\026LaneBoundaryMergeSplit\022=\n"
    "\010envelope\030\001 \001(\0132+.sensoris.protobuf.type"
    "s.base.EventEnvelope\022F\n\024existence_confid"
    "ence\030\002 \001(\0132(.sensoris.protobuf.types.bas"
    "e.Confidence\022L\n\020detection_status\030\003 \001(\01322"
    ".sensoris.protobuf.types.base.EventDetec"
    "tionStatus\022s\n\023type_and_confidence\030\004 \001(\0132"
    "V.sensoris.protobuf.categories.roadattri"
    "bution.LaneBoundaryMergeSplit.TypeAndCon"
    "fidence\022S\n\025position_and_accuracy\030\005 \001(\01324"
    ".sensoris.protobuf.types.spatial.Positio"
    "nAndAccuracy\032\354\001\n\021TypeAndConfidence\022i\n\004ty"
    "pe\030\001 \001(\0162[.sensoris.protobuf.categories."
    "roadattribution.LaneBoundaryMergeSplit.T"
    "ypeAndConfidence.Type\022<\n\nconfidence\030\002 \001("
    "\0132(.sensoris.protobuf.types.base.Confide"
    "nce\".\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005MERGE\020\001"
    "\022\t\n\005SPLIT\020\002\"\275\002\n\004Lane\022=\n\010envelope\030\001 \001(\0132+"
    ".sensoris.protobuf.types.base.EventEnvel"
    "ope\0225\n\020relative_lane_id\030\002 \001(\0132\033.google.p"
    "rotobuf.Int64Value\022U\n\022width_and_accuracy"
    "\030\003 \001(\01323.sensoris.protobuf.types.base.In"
    "t64ValueAndAccuracyB\004\210\265\030\000\022h\n\031inclination"
    "_and_curvature\030\004 \001(\0132E.sensoris.protobuf"
    ".categories.roadattribution.InclinationA"
    "ndCurvature\"\200\002\n\004Road\022=\n\010envelope\030\001 \001(\0132+"
    ".sensoris.protobuf.types.base.EventEnvel"
    "ope\022O\n\022width_and_accuracy\030\002 \001(\01323.sensor"
    "is.protobuf.types.base.Int64ValueAndAccu"
    "racy\022h\n\031inclination_and_curvature\030\003 \001(\0132"
    "E.sensoris.protobuf.categories.roadattri"
    "bution.InclinationAndCurvature\"\350\007\n\016Surfa"
    "ceMarking\022=\n\010envelope\030\001 \001(\0132+.sensoris.p"
    "rotobuf.types.base.EventEnvelope\022F\n\024exis"
    "tence_confidence\030\002 \001(\0132(.sensoris.protob"
    "uf.types.base.Confidence\022L\n\020detection_st"
    "atus\030\003 \001(\01322.sensoris.protobuf.types.bas"
    "e.EventDetectionStatus\022k\n\023type_and_confi"
    "dence\030\004 \001(\0132N.sensoris.protobuf.categori"
    "es.roadattribution.SurfaceMarking.TypeAn"
    "dConfidence\022*\n\004text\030\005 \001(\0132\034.google.proto"
    "buf.StringValue\022e\n\024color_and_confidence\030"
    "\006 \003(\0132G.sensoris.protobuf.categories.roa"
    "dattribution.MarkingColorAndConfidence\022k"
    "\n\027material_and_confidence\030\007 \003(\0132J.sensor"
    "is.protobuf.categories.roadattribution.M"
    "arkingMaterialAndConfidence\022`\n\034rectangul"
    "ar_box_and_accuracy\030\010 \001(\0132:.sensoris.pro"
    "tobuf.types.spatial.RectangularBoxAndAcc"
    "uracy\032\261\002\n\021TypeAndConfidence\022a\n\004type\030\001 \001("
    "\0162S.sensoris.protobuf.categories.roadatt"
    "ribution.SurfaceMarking.TypeAndConfidenc"
    "e.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.pr"
    "otobuf.types.base.Confidence\"{\n\004Type\022\020\n\014"
    "UNKNOWN_TYPE\020\000\022\010\n\004SIGN\020\001\022\010\n\004TEXT\020\002\022\010\n\004IC"
    "ON\020\003\022\013\n\007PATTERN\020\004\022\025\n\021PATTERN_CROSSWALK\020\005"
    "\022\020\n\014LINE_ELEMENT\020\006\022\r\n\tSTOP_LINE\020\007\"\337\003\n\022Su"
    "rfaceAttribution\022=\n\010envelope\030\001 \001(\0132+.sen"
    "soris.protobuf.types.base.EventEnvelope\022"
    "S\n\025position_and_accuracy\030\002 \001(\01324.sensori"
    "s.protobuf.types.spatial.PositionAndAccu"
    "racy\022h\n\031inclination_and_curvature\030\003 \001(\0132"
    "E.sensoris.protobuf.categories.roadattri"
    "bution.InclinationAndCurvature\022k\n\027materi"
    "al_and_confidence\030\004 \003(\0132J.sensoris.proto"
    "buf.categories.roadattribution.SurfaceMa"
    "terialAndConfidence\022^\n\033road_roughness_an"
    "d_accuracy\030\005 \001(\01323.sensoris.protobuf.typ"
    "es.base.Int64ValueAndAccuracyB\004\210\265\030\000\"\270\t\n\017"
    "RoadAttribution\022=\n\010envelope\030\001 \001(\0132+.sens"
    "oris.protobuf.types.base.EventEnvelope\022L"
    "\n\020detection_status\030\002 \001(\01322.sensoris.prot"
    "obuf.types.base.EventDetectionStatus\022S\n\025"
    "position_and_accuracy\030\003 \001(\01324.sensoris.p"
    "rotobuf.types.spatial.PositionAndAccurac"
    "y\022l\n\023type_and_confidence\030\004 \001(\0132O.sensori"
    "s.protobuf.categories.roadattribution.Ro"
    "adAttribution.TypeAndConfidence\022y\n\032chang"
    "e_type_and_confidence\030\005 \001(\0132U.sensoris.p"
    "rotobuf.categories.roadattribution.RoadA"
    "ttribution.ChangeTypeAndConfidence\032\331\003\n\021T"
    "ypeAndConfidence\022b\n\004type\030\001 \001(\0162T.sensori"
    "s.protobuf.categories.roadattribution.Ro"
    "adAttribution.TypeAndConfidence.Type\022<\n\n"
    "confidence\030\002 \001(\0132(.sensoris.protobuf.typ"
    "es.base.Confidence\"\241\002\n\004Type\022\020\n\014UNKNOWN_T"
    "YPE\020\000\022\014\n\010MOTORWAY\020\001\022\023\n\017ONE_WAY_TRAFFIC\020\002"
    "\022\023\n\017TWO_WAY_TRAFFIC\020\003\022\013\n\007OFFROAD\020\004\022\n\n\006TU"
    "NNEL\020\005\022\n\n\006BRIDGE\020\006\022\033\n\027ARTIFICIAL_ILLUMIN"
    "ATION\020\007\022\033\n\027ROAD_WORKS_NARROW_LANES\020\010\022\016\n\n"
    "LANE_RIGHT\020\t\022\r\n\tLANE_LEFT\020\n\022\025\n\021LANE_SPLI"
    "T_MIDDLE\020\013\022\025\n\021LANE_MERGE_MIDDLE\020\014\022\r\n\tCRO"
    "SSWALK\020\r\022\024\n\020CENTER_TURN_LANE\020\016\032\375\001\n\027Chang"
    "eTypeAndConfidence\022h\n\004type\030\001 \001(\0162Z.senso"
    "ris.protobuf.categories.roadattribution."
    "RoadAttribution.ChangeTypeAndConfidence."
    "Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.prot"
    "obuf.types.base.Confidence\":\n\004Type\022\020\n\014UN"
    "KNOWN_TYPE\020\000\022\014\n\010DETECTED\020\001\022\t\n\005START\020\002\022\007\n"
    "\003END\020\003\"\242\003\n\026LaneCountAndConfidence\022=\n\010env"
    "elope\030\001 \001(\0132+.sensoris.protobuf.types.ba"
    "se.EventEnvelope\022S\n\025position_and_accurac"
    "y\030\002 \001(\01324.sensoris.protobuf.types.spatia"
    "l.PositionAndAccuracy\022W\n\004type\030\003 \001(\0162I.se"
    "nsoris.protobuf.categories.roadattributi"
    "on.LaneCountAndConfidence.Type\022N\n\024count_"
    "and_confidence\030\004 \001(\01320.sensoris.protobuf"
    ".types.base.CountAndConfidence\"K\n\004Type\022\020"
    "\n\014UNKNOWN_TYPE\020\000\022\t\n\005TOTAL\020\001\022\033\n\027LEFT_INCL"
    "UDING_EGO_LANE\020\002\022\t\n\005RIGHT\020\003\"\217\007\n\027RoadAttr"
    "ibutionCategory\022@\n\010envelope\030\001 \001(\0132..sens"
    "oris.protobuf.types.base.CategoryEnvelop"
    "e\022Q\n\rlane_boundary\030\002 \003(\0132:.sensoris.prot"
    "obuf.categories.roadattribution.LaneBoun"
    "dary\022g\n\031lane_boundary_merge_split\030\003 \003(\0132"
    "D.sensoris.protobuf.categories.roadattri"
    "bution.LaneBoundaryMergeSplit\022@\n\004lane\030\004 "
    "\003(\01322.sensoris.protobuf.categories.roada"
    "ttribution.Lane\022@\n\004road\030\005 \003(\01322.sensoris"
    ".protobuf.categories.roadattribution.Roa"
    "d\022U\n\017surface_marking\030\006 \003(\0132<.sensoris.pr"
    "otobuf.categories.roadattribution.Surfac"
    "eMarking\022]\n\023surface_attribution\030\007 \003(\0132@."
    "sensoris.protobuf.categories.roadattribu"
    "tion.SurfaceAttribution\022W\n\020road_attribut"
    "ion\030\010 \003(\0132=.sensoris.protobuf.categories"
    ".roadattribution.RoadAttribution\022p\n\"dete"
    "cted_lane_count_and_confidence\030\t \003(\0132D.s"
    "ensoris.protobuf.categories.roadattribut"
    "ion.LaneCountAndConfidence\022q\n#estimated_"
    "lane_count_and_confidence\030\n \003(\0132D.sensor"
    "is.protobuf.categories.roadattribution.L"
    "aneCountAndConfidenceBO\n\'org.sensoris.ca"
    "tegories.roadattributionB\037SensorisRoadAt"
    "tributionCategoryP\001\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto = {
    false,
    false,
    9830,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
    "sensoris/protobuf/categories/road_attribution.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_deps,
    3,
    21,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
namespace sensoris {
namespace protobuf {
namespace categories {
namespace roadattribution {
const ::google::protobuf::EnumDescriptor* MarkingColorAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MarkingColorAndConfidence_Type_internal_data_[] = {
    851968u, 0u, };
bool MarkingColorAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 12;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::UNKNOWN_TYPE;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::WHITE;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::GRAY;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::GRAY_LIGHT;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::GRAY_DARK;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::BLACK;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::RED;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::YELLOW;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::GREEN;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::CYAN;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::BLUE;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::ORANGE;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::PINK;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::Type_MIN;
constexpr MarkingColorAndConfidence_Type MarkingColorAndConfidence::Type_MAX;
constexpr int MarkingColorAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* MarkingMaterialAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t MarkingMaterialAndConfidence_Type_internal_data_[] = {
    786432u, 0u, };
bool MarkingMaterialAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 11;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::UNKNOWN_TYPE;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::METAL;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::CONCRETE;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::STONE;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::WOOD;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::PLASTIC;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::TRANSPARENT;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::VIBRATION_MARKINGS;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::PAINT;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::ASPHALT;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::GRAVEL;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::COBBLESTONE;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::Type_MIN;
constexpr MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::Type_MAX;
constexpr int MarkingMaterialAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SurfaceMaterialAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t SurfaceMaterialAndConfidence_Type_internal_data_[] = {
    458752u, 0u, };
bool SurfaceMaterialAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 6;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::UNKNOWN_TYPE;
constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::ASPHALT;
constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::CONCRETE;
constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::COMPOSITE_PAVEMENT;
constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::RECYCLING;
constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::GRAVEL;
constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::COBBLESTONE;
constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::Type_MIN;
constexpr SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::Type_MAX;
constexpr int SurfaceMaterialAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LaneBoundary_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t LaneBoundary_TypeAndConfidence_Type_internal_data_[] = {
    2097152u, 0u, };
bool LaneBoundary_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 31;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::UNKNOWN_TYPE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE_SOLID;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE_DASHED;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE_DASHED_SHORT;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE_DASHED_LONG;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE_SOLID;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE_DASHED;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE_SOLID_DASHED;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE_DASHED_SOLID;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::SHADED_AREA_MARKING;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BLOCKS_DASHED;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CROSSING_ALERT;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CURB;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CURB_TRAVERSABLE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CURB_NON_TRAVERSABLE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::PHYSICAL_DIVIDER;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::WALL;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::WALL_FLAT;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::WALL_CURVED;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BARRIER;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BARRIER_JERSEY;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BARRIER_SOUND;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BARRIER_CABLE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::GUARDRAIL;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::FENCE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::ROAD_EDGE;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CLIFF;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::DITCH;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::ASPHALT_JOINT;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::Type_MIN;
constexpr LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::Type_MAX;
constexpr int LaneBoundary_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LaneBoundary_MarkingOffsets_TypeAndOffset_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t LaneBoundary_MarkingOffsets_TypeAndOffset_Type_internal_data_[] = {
    327680u, 0u, };
bool LaneBoundary_MarkingOffsets_TypeAndOffset_Type_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::UNKNOWN_TYPE;
constexpr LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::START_OF_MARKING;
constexpr LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::END_OF_MARKING;
constexpr LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::ON_MARKING;
constexpr LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::NO_MARKING;
constexpr LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::Type_MIN;
constexpr LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::Type_MAX;
constexpr int LaneBoundary_MarkingOffsets_TypeAndOffset::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LaneBoundary_PositionReference_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t LaneBoundary_PositionReference_internal_data_[] = {
    262144u, 0u, };
bool LaneBoundary_PositionReference_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LaneBoundary_PositionReference LaneBoundary::UNKNOWN_POSITION_REFERENCE;
constexpr LaneBoundary_PositionReference LaneBoundary::LEFT_MARKING_BOUNDARY;
constexpr LaneBoundary_PositionReference LaneBoundary::CENTER_LINE;
constexpr LaneBoundary_PositionReference LaneBoundary::RIGHT_MARKING_BOUNDARY;
constexpr LaneBoundary_PositionReference LaneBoundary::PositionReference_MIN;
constexpr LaneBoundary_PositionReference LaneBoundary::PositionReference_MAX;
constexpr int LaneBoundary::PositionReference_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LaneBoundaryMergeSplit_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t LaneBoundaryMergeSplit_TypeAndConfidence_Type_internal_data_[] = {
    196608u, 0u, };
bool LaneBoundaryMergeSplit_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::UNKNOWN_TYPE;
constexpr LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::MERGE;
constexpr LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::SPLIT;
constexpr LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::Type_MIN;
constexpr LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::Type_MAX;
constexpr int LaneBoundaryMergeSplit_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SurfaceMarking_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t SurfaceMarking_TypeAndConfidence_Type_internal_data_[] = {
    524288u, 0u, };
bool SurfaceMarking_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 7;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::UNKNOWN_TYPE;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::SIGN;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::TEXT;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::ICON;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::PATTERN;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::PATTERN_CROSSWALK;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::LINE_ELEMENT;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::STOP_LINE;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::Type_MIN;
constexpr SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::Type_MAX;
constexpr int SurfaceMarking_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RoadAttribution_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t RoadAttribution_TypeAndConfidence_Type_internal_data_[] = {
    983040u, 0u, };
bool RoadAttribution_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 14;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::UNKNOWN_TYPE;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::MOTORWAY;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::ONE_WAY_TRAFFIC;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::TWO_WAY_TRAFFIC;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::OFFROAD;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::TUNNEL;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::BRIDGE;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::ARTIFICIAL_ILLUMINATION;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::ROAD_WORKS_NARROW_LANES;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::LANE_RIGHT;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::LANE_LEFT;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::LANE_SPLIT_MIDDLE;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::LANE_MERGE_MIDDLE;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::CROSSWALK;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::CENTER_TURN_LANE;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::Type_MIN;
constexpr RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::Type_MAX;
constexpr int RoadAttribution_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RoadAttribution_ChangeTypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t RoadAttribution_ChangeTypeAndConfidence_Type_internal_data_[] = {
    262144u, 0u, };
bool RoadAttribution_ChangeTypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::UNKNOWN_TYPE;
constexpr RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::DETECTED;
constexpr RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::START;
constexpr RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::END;
constexpr RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::Type_MIN;
constexpr RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::Type_MAX;
constexpr int RoadAttribution_ChangeTypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LaneCountAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t LaneCountAndConfidence_Type_internal_data_[] = {
    262144u, 0u, };
bool LaneCountAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LaneCountAndConfidence_Type LaneCountAndConfidence::UNKNOWN_TYPE;
constexpr LaneCountAndConfidence_Type LaneCountAndConfidence::TOTAL;
constexpr LaneCountAndConfidence_Type LaneCountAndConfidence::LEFT_INCLUDING_EGO_LANE;
constexpr LaneCountAndConfidence_Type LaneCountAndConfidence::RIGHT;
constexpr LaneCountAndConfidence_Type LaneCountAndConfidence::Type_MIN;
constexpr LaneCountAndConfidence_Type LaneCountAndConfidence::Type_MAX;
constexpr int LaneCountAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class MarkingColorAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<MarkingColorAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const MarkingColorAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& MarkingColorAndConfidence::_Internal::confidence(const MarkingColorAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void MarkingColorAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarkingColorAndConfidence::MarkingColorAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE MarkingColorAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarkingColorAndConfidence::MarkingColorAndConfidence(
    ::google::protobuf::Arena* arena,
    const MarkingColorAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  MarkingColorAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE MarkingColorAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MarkingColorAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
MarkingColorAndConfidence::~MarkingColorAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MarkingColorAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MarkingColorAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MarkingColorAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> MarkingColorAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MarkingColorAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarkingColorAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* MarkingColorAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  return target;
}

::size_t MarkingColorAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MarkingColorAndConfidence::_class_data_ = {
    MarkingColorAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MarkingColorAndConfidence::GetClassData() const {
  return &_class_data_;
}

void MarkingColorAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MarkingColorAndConfidence*>(&to_msg);
  auto& from = static_cast<const MarkingColorAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarkingColorAndConfidence::CopyFrom(const MarkingColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MarkingColorAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MarkingColorAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MarkingColorAndConfidence::InternalSwap(MarkingColorAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.type_)
      + sizeof(MarkingColorAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(MarkingColorAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata MarkingColorAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[0]);
}
// ===================================================================

class MarkingMaterialAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<MarkingMaterialAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const MarkingMaterialAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& MarkingMaterialAndConfidence::_Internal::confidence(const MarkingMaterialAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void MarkingMaterialAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarkingMaterialAndConfidence::MarkingMaterialAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE MarkingMaterialAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarkingMaterialAndConfidence::MarkingMaterialAndConfidence(
    ::google::protobuf::Arena* arena,
    const MarkingMaterialAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  MarkingMaterialAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE MarkingMaterialAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MarkingMaterialAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
MarkingMaterialAndConfidence::~MarkingMaterialAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MarkingMaterialAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MarkingMaterialAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MarkingMaterialAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> MarkingMaterialAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MarkingMaterialAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarkingMaterialAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* MarkingMaterialAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  return target;
}

::size_t MarkingMaterialAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MarkingMaterialAndConfidence::_class_data_ = {
    MarkingMaterialAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MarkingMaterialAndConfidence::GetClassData() const {
  return &_class_data_;
}

void MarkingMaterialAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MarkingMaterialAndConfidence*>(&to_msg);
  auto& from = static_cast<const MarkingMaterialAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarkingMaterialAndConfidence::CopyFrom(const MarkingMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MarkingMaterialAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MarkingMaterialAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MarkingMaterialAndConfidence::InternalSwap(MarkingMaterialAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.type_)
      + sizeof(MarkingMaterialAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(MarkingMaterialAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata MarkingMaterialAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[1]);
}
// ===================================================================

class SurfaceMaterialAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceMaterialAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const SurfaceMaterialAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& SurfaceMaterialAndConfidence::_Internal::confidence(const SurfaceMaterialAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void SurfaceMaterialAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE SurfaceMaterialAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence(
    ::google::protobuf::Arena* arena,
    const SurfaceMaterialAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  SurfaceMaterialAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE SurfaceMaterialAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SurfaceMaterialAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
SurfaceMaterialAndConfidence::~SurfaceMaterialAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SurfaceMaterialAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SurfaceMaterialAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SurfaceMaterialAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SurfaceMaterialAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SurfaceMaterialAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SurfaceMaterialAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* SurfaceMaterialAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  return target;
}

::size_t SurfaceMaterialAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SurfaceMaterialAndConfidence::_class_data_ = {
    SurfaceMaterialAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SurfaceMaterialAndConfidence::GetClassData() const {
  return &_class_data_;
}

void SurfaceMaterialAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SurfaceMaterialAndConfidence*>(&to_msg);
  auto& from = static_cast<const SurfaceMaterialAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SurfaceMaterialAndConfidence::CopyFrom(const SurfaceMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SurfaceMaterialAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SurfaceMaterialAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SurfaceMaterialAndConfidence::InternalSwap(SurfaceMaterialAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.type_)
      + sizeof(SurfaceMaterialAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SurfaceMaterialAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata SurfaceMaterialAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[2]);
}
// ===================================================================

class InclinationAndCurvature::_Internal {
 public:
  using HasBits = decltype(std::declval<InclinationAndCurvature>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& longitudinal_inclination_and_accuracy(const InclinationAndCurvature* msg);
  static void set_has_longitudinal_inclination_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& lateral_inclination_and_accuracy(const InclinationAndCurvature* msg);
  static void set_has_lateral_inclination_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& horizontal_curvature_and_accuracy(const InclinationAndCurvature* msg);
  static void set_has_horizontal_curvature_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& InclinationAndCurvature::_Internal::longitudinal_inclination_and_accuracy(const InclinationAndCurvature* msg) {
  return *msg->_impl_.longitudinal_inclination_and_accuracy_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& InclinationAndCurvature::_Internal::lateral_inclination_and_accuracy(const InclinationAndCurvature* msg) {
  return *msg->_impl_.lateral_inclination_and_accuracy_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& InclinationAndCurvature::_Internal::horizontal_curvature_and_accuracy(const InclinationAndCurvature* msg) {
  return *msg->_impl_.horizontal_curvature_and_accuracy_;
}
void InclinationAndCurvature::clear_longitudinal_inclination_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.longitudinal_inclination_and_accuracy_ != nullptr) _impl_.longitudinal_inclination_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InclinationAndCurvature::clear_lateral_inclination_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lateral_inclination_and_accuracy_ != nullptr) _impl_.lateral_inclination_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InclinationAndCurvature::clear_horizontal_curvature_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.horizontal_curvature_and_accuracy_ != nullptr) _impl_.horizontal_curvature_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
InclinationAndCurvature::InclinationAndCurvature(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
}
inline PROTOBUF_NDEBUG_INLINE InclinationAndCurvature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

InclinationAndCurvature::InclinationAndCurvature(
    ::google::protobuf::Arena* arena,
    const InclinationAndCurvature& from)
    : ::google::protobuf::Message(arena) {
  InclinationAndCurvature* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.longitudinal_inclination_and_accuracy_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.longitudinal_inclination_and_accuracy_)
                : nullptr;
  _impl_.lateral_inclination_and_accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.lateral_inclination_and_accuracy_)
                : nullptr;
  _impl_.horizontal_curvature_and_accuracy_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.horizontal_curvature_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
}
inline PROTOBUF_NDEBUG_INLINE InclinationAndCurvature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InclinationAndCurvature::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, longitudinal_inclination_and_accuracy_),
           0,
           offsetof(Impl_, horizontal_curvature_and_accuracy_) -
               offsetof(Impl_, longitudinal_inclination_and_accuracy_) +
               sizeof(Impl_::horizontal_curvature_and_accuracy_));
}
InclinationAndCurvature::~InclinationAndCurvature() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InclinationAndCurvature::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.longitudinal_inclination_and_accuracy_;
  delete _impl_.lateral_inclination_and_accuracy_;
  delete _impl_.horizontal_curvature_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InclinationAndCurvature::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.longitudinal_inclination_and_accuracy_ != nullptr);
      _impl_.longitudinal_inclination_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.lateral_inclination_and_accuracy_ != nullptr);
      _impl_.lateral_inclination_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.horizontal_curvature_and_accuracy_ != nullptr);
      _impl_.horizontal_curvature_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InclinationAndCurvature::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> InclinationAndCurvature::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InclinationAndCurvature_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.longitudinal_inclination_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.lateral_inclination_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.horizontal_curvature_and_accuracy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
    {PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.longitudinal_inclination_and_accuracy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    {PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.lateral_inclination_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    {PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.horizontal_curvature_and_accuracy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* InclinationAndCurvature::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::longitudinal_inclination_and_accuracy(this),
        _Internal::longitudinal_inclination_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::lateral_inclination_and_accuracy(this),
        _Internal::lateral_inclination_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::horizontal_curvature_and_accuracy(this),
        _Internal::horizontal_curvature_and_accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  return target;
}

::size_t InclinationAndCurvature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.longitudinal_inclination_and_accuracy_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lateral_inclination_and_accuracy_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.horizontal_curvature_and_accuracy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InclinationAndCurvature::_class_data_ = {
    InclinationAndCurvature::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InclinationAndCurvature::GetClassData() const {
  return &_class_data_;
}

void InclinationAndCurvature::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InclinationAndCurvature*>(&to_msg);
  auto& from = static_cast<const InclinationAndCurvature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_longitudinal_inclination_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_longitudinal_inclination_and_accuracy());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_lateral_inclination_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_lateral_inclination_and_accuracy());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_horizontal_curvature_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_horizontal_curvature_and_accuracy());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InclinationAndCurvature::CopyFrom(const InclinationAndCurvature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InclinationAndCurvature::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InclinationAndCurvature::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InclinationAndCurvature::InternalSwap(InclinationAndCurvature* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.horizontal_curvature_and_accuracy_)
      + sizeof(InclinationAndCurvature::_impl_.horizontal_curvature_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(InclinationAndCurvature, _impl_.longitudinal_inclination_and_accuracy_)>(
          reinterpret_cast<char*>(&_impl_.longitudinal_inclination_and_accuracy_),
          reinterpret_cast<char*>(&other->_impl_.longitudinal_inclination_and_accuracy_));
}

::google::protobuf::Metadata InclinationAndCurvature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[3]);
}
// ===================================================================

class LaneBoundary_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const LaneBoundary_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& LaneBoundary_TypeAndConfidence::_Internal::confidence(const LaneBoundary_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void LaneBoundary_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const LaneBoundary_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  LaneBoundary_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LaneBoundary_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
LaneBoundary_TypeAndConfidence::~LaneBoundary_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LaneBoundary_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LaneBoundary_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LaneBoundary_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> LaneBoundary_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LaneBoundary_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneBoundary_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* LaneBoundary_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  return target;
}

::size_t LaneBoundary_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LaneBoundary_TypeAndConfidence::_class_data_ = {
    LaneBoundary_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LaneBoundary_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void LaneBoundary_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LaneBoundary_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const LaneBoundary_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_TypeAndConfidence::CopyFrom(const LaneBoundary_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LaneBoundary_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LaneBoundary_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LaneBoundary_TypeAndConfidence::InternalSwap(LaneBoundary_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.type_)
      + sizeof(LaneBoundary_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata LaneBoundary_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[4]);
}
// ===================================================================

class LaneBoundary_DashStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary_DashStatistics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& length_and_accuracy(const LaneBoundary_DashStatistics* msg);
  static void set_has_length_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& distance_and_accuracy(const LaneBoundary_DashStatistics* msg);
  static void set_has_distance_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& LaneBoundary_DashStatistics::_Internal::length_and_accuracy(const LaneBoundary_DashStatistics* msg) {
  return *msg->_impl_.length_and_accuracy_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& LaneBoundary_DashStatistics::_Internal::distance_and_accuracy(const LaneBoundary_DashStatistics* msg) {
  return *msg->_impl_.distance_and_accuracy_;
}
void LaneBoundary_DashStatistics::clear_length_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.length_and_accuracy_ != nullptr) _impl_.length_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneBoundary_DashStatistics::clear_distance_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.distance_and_accuracy_ != nullptr) _impl_.distance_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LaneBoundary_DashStatistics::LaneBoundary_DashStatistics(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary_DashStatistics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundary_DashStatistics::LaneBoundary_DashStatistics(
    ::google::protobuf::Arena* arena,
    const LaneBoundary_DashStatistics& from)
    : ::google::protobuf::Message(arena) {
  LaneBoundary_DashStatistics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.length_and_accuracy_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.length_and_accuracy_)
                : nullptr;
  _impl_.distance_and_accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.distance_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary_DashStatistics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LaneBoundary_DashStatistics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, length_and_accuracy_),
           0,
           offsetof(Impl_, distance_and_accuracy_) -
               offsetof(Impl_, length_and_accuracy_) +
               sizeof(Impl_::distance_and_accuracy_));
}
LaneBoundary_DashStatistics::~LaneBoundary_DashStatistics() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LaneBoundary_DashStatistics::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.length_and_accuracy_;
  delete _impl_.distance_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LaneBoundary_DashStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.length_and_accuracy_ != nullptr);
      _impl_.length_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.distance_and_accuracy_ != nullptr);
      _impl_.distance_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LaneBoundary_DashStatistics::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> LaneBoundary_DashStatistics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_._has_bits_),
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LaneBoundary_DashStatistics_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.length_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.distance_and_accuracy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.length_and_accuracy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.distance_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* LaneBoundary_DashStatistics::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::length_and_accuracy(this),
        _Internal::length_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::distance_and_accuracy(this),
        _Internal::distance_and_accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  return target;
}

::size_t LaneBoundary_DashStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.length_and_accuracy_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.distance_and_accuracy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LaneBoundary_DashStatistics::_class_data_ = {
    LaneBoundary_DashStatistics::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LaneBoundary_DashStatistics::GetClassData() const {
  return &_class_data_;
}

void LaneBoundary_DashStatistics::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LaneBoundary_DashStatistics*>(&to_msg);
  auto& from = static_cast<const LaneBoundary_DashStatistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_length_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_length_and_accuracy());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_distance_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_distance_and_accuracy());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_DashStatistics::CopyFrom(const LaneBoundary_DashStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LaneBoundary_DashStatistics::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LaneBoundary_DashStatistics::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LaneBoundary_DashStatistics::InternalSwap(LaneBoundary_DashStatistics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.distance_and_accuracy_)
      + sizeof(LaneBoundary_DashStatistics::_impl_.distance_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary_DashStatistics, _impl_.length_and_accuracy_)>(
          reinterpret_cast<char*>(&_impl_.length_and_accuracy_),
          reinterpret_cast<char*>(&other->_impl_.length_and_accuracy_));
}

::google::protobuf::Metadata LaneBoundary_DashStatistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[5]);
}
// ===================================================================

class LaneBoundary_MarkingOffsets_TypeAndOffset::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary_MarkingOffsets_TypeAndOffset>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& offset_and_accuracy(const LaneBoundary_MarkingOffsets_TypeAndOffset* msg);
  static void set_has_offset_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& LaneBoundary_MarkingOffsets_TypeAndOffset::_Internal::offset_and_accuracy(const LaneBoundary_MarkingOffsets_TypeAndOffset* msg) {
  return *msg->_impl_.offset_and_accuracy_;
}
void LaneBoundary_MarkingOffsets_TypeAndOffset::clear_offset_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.offset_and_accuracy_ != nullptr) _impl_.offset_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary_MarkingOffsets_TypeAndOffset::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset(
    ::google::protobuf::Arena* arena,
    const LaneBoundary_MarkingOffsets_TypeAndOffset& from)
    : ::google::protobuf::Message(arena) {
  LaneBoundary_MarkingOffsets_TypeAndOffset* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.offset_and_accuracy_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.offset_and_accuracy_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary_MarkingOffsets_TypeAndOffset::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LaneBoundary_MarkingOffsets_TypeAndOffset::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, offset_and_accuracy_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, offset_and_accuracy_) +
               sizeof(Impl_::type_));
}
LaneBoundary_MarkingOffsets_TypeAndOffset::~LaneBoundary_MarkingOffsets_TypeAndOffset() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LaneBoundary_MarkingOffsets_TypeAndOffset::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.offset_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LaneBoundary_MarkingOffsets_TypeAndOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.offset_and_accuracy_ != nullptr);
    _impl_.offset_and_accuracy_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LaneBoundary_MarkingOffsets_TypeAndOffset::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> LaneBoundary_MarkingOffsets_TypeAndOffset::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.offset_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.offset_and_accuracy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* LaneBoundary_MarkingOffsets_TypeAndOffset::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::offset_and_accuracy(this),
        _Internal::offset_and_accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  return target;
}

::size_t LaneBoundary_MarkingOffsets_TypeAndOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.offset_and_accuracy_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LaneBoundary_MarkingOffsets_TypeAndOffset::_class_data_ = {
    LaneBoundary_MarkingOffsets_TypeAndOffset::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LaneBoundary_MarkingOffsets_TypeAndOffset::GetClassData() const {
  return &_class_data_;
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LaneBoundary_MarkingOffsets_TypeAndOffset*>(&to_msg);
  auto& from = static_cast<const LaneBoundary_MarkingOffsets_TypeAndOffset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_offset_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
        from._internal_offset_and_accuracy());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::CopyFrom(const LaneBoundary_MarkingOffsets_TypeAndOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LaneBoundary_MarkingOffsets_TypeAndOffset::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LaneBoundary_MarkingOffsets_TypeAndOffset::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LaneBoundary_MarkingOffsets_TypeAndOffset::InternalSwap(LaneBoundary_MarkingOffsets_TypeAndOffset* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.type_)
      + sizeof(LaneBoundary_MarkingOffsets_TypeAndOffset::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets_TypeAndOffset, _impl_.offset_and_accuracy_)>(
          reinterpret_cast<char*>(&_impl_.offset_and_accuracy_),
          reinterpret_cast<char*>(&other->_impl_.offset_and_accuracy_));
}

::google::protobuf::Metadata LaneBoundary_MarkingOffsets_TypeAndOffset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[6]);
}
// ===================================================================

class LaneBoundary_MarkingOffsets::_Internal {
 public:
};

LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary_MarkingOffsets::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : type_and_offset_{visibility, arena, from.type_and_offset_},
        _cached_size_{0} {}

LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets(
    ::google::protobuf::Arena* arena,
    const LaneBoundary_MarkingOffsets& from)
    : ::google::protobuf::Message(arena) {
  LaneBoundary_MarkingOffsets* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary_MarkingOffsets::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_and_offset_{visibility, arena},
        _cached_size_{0} {}

inline void LaneBoundary_MarkingOffsets::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LaneBoundary_MarkingOffsets::~LaneBoundary_MarkingOffsets() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LaneBoundary_MarkingOffsets::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LaneBoundary_MarkingOffsets::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_and_offset_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LaneBoundary_MarkingOffsets::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> LaneBoundary_MarkingOffsets::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967293,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LaneBoundary_MarkingOffsets_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets, _impl_.type_and_offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary_MarkingOffsets, _impl_.type_and_offset_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset>()},
  }}, {{
  }},
};

::uint8_t* LaneBoundary_MarkingOffsets::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_and_offset_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_and_offset().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  return target;
}

::size_t LaneBoundary_MarkingOffsets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
  total_size += 1UL * this->_internal_type_and_offset_size();
  for (const auto& msg : this->_internal_type_and_offset()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LaneBoundary_MarkingOffsets::_class_data_ = {
    LaneBoundary_MarkingOffsets::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LaneBoundary_MarkingOffsets::GetClassData() const {
  return &_class_data_;
}

void LaneBoundary_MarkingOffsets::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LaneBoundary_MarkingOffsets*>(&to_msg);
  auto& from = static_cast<const LaneBoundary_MarkingOffsets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_type_and_offset()->MergeFrom(
      from._internal_type_and_offset());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary_MarkingOffsets::CopyFrom(const LaneBoundary_MarkingOffsets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LaneBoundary_MarkingOffsets::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LaneBoundary_MarkingOffsets::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LaneBoundary_MarkingOffsets::InternalSwap(LaneBoundary_MarkingOffsets* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.type_and_offset_.InternalSwap(&other->_impl_.type_and_offset_);
}

::google::protobuf::Metadata LaneBoundary_MarkingOffsets::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[7]);
}
// ===================================================================

class LaneBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _impl_._oneof_case_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const LaneBoundary* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& lane_boundary_id(const LaneBoundary* msg);
  static void set_has_lane_boundary_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::Confidence& existence_confidence(const LaneBoundary* msg);
  static void set_has_existence_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const LaneBoundary* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence& type_and_confidence(const LaneBoundary* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence& material_and_confidence(const LaneBoundary* msg);
  static void set_has_material_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence& color_and_confidence(const LaneBoundary* msg);
  static void set_has_color_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sensoris::protobuf::types::spatial::PolylineAndAccuracy& polyline_and_accuracy(const LaneBoundary* msg);
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& width_and_accuracy(const LaneBoundary* msg);
  static void set_has_width_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& height_and_accuracy(const LaneBoundary* msg);
  static void set_has_height_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& distance_between_double_and_accuracy(const LaneBoundary* msg);
  static void set_has_distance_between_double_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics& dash_statistics(const LaneBoundary* msg);
  static const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets& marking_offsets(const LaneBoundary* msg);
};

const ::sensoris::protobuf::types::base::EventEnvelope& LaneBoundary::_Internal::envelope(const LaneBoundary* msg) {
  return *msg->_impl_.envelope_;
}
const ::google::protobuf::Int64Value& LaneBoundary::_Internal::lane_boundary_id(const LaneBoundary* msg) {
  return *msg->_impl_.lane_boundary_id_;
}
const ::sensoris::protobuf::types::base::Confidence& LaneBoundary::_Internal::existence_confidence(const LaneBoundary* msg) {
  return *msg->_impl_.existence_confidence_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& LaneBoundary::_Internal::detection_status(const LaneBoundary* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence& LaneBoundary::_Internal::type_and_confidence(const LaneBoundary* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence& LaneBoundary::_Internal::material_and_confidence(const LaneBoundary* msg) {
  return *msg->_impl_.material_and_confidence_;
}
const ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence& LaneBoundary::_Internal::color_and_confidence(const LaneBoundary* msg) {
  return *msg->_impl_.color_and_confidence_;
}
const ::sensoris::protobuf::types::spatial::PolylineAndAccuracy& LaneBoundary::_Internal::polyline_and_accuracy(const LaneBoundary* msg) {
  return *msg->_impl_.geometry_.polyline_and_accuracy_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& LaneBoundary::_Internal::width_and_accuracy(const LaneBoundary* msg) {
  return *msg->_impl_.width_and_accuracy_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& LaneBoundary::_Internal::height_and_accuracy(const LaneBoundary* msg) {
  return *msg->_impl_.height_and_accuracy_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& LaneBoundary::_Internal::distance_between_double_and_accuracy(const LaneBoundary* msg) {
  return *msg->_impl_.distance_between_double_and_accuracy_;
}
const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics& LaneBoundary::_Internal::dash_statistics(const LaneBoundary* msg) {
  return *msg->_impl_.markings_.dash_statistics_;
}
const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets& LaneBoundary::_Internal::marking_offsets(const LaneBoundary* msg) {
  return *msg->_impl_.markings_.marking_offsets_;
}
void LaneBoundary::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneBoundary::clear_lane_boundary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lane_boundary_id_ != nullptr) _impl_.lane_boundary_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LaneBoundary::clear_existence_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LaneBoundary::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void LaneBoundary::set_allocated_polyline_and_accuracy(::sensoris::protobuf::types::spatial::PolylineAndAccuracy* polyline_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_geometry();
  if (polyline_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(polyline_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      polyline_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, polyline_and_accuracy, submessage_arena);
    }
    set_has_polyline_and_accuracy();
    _impl_.geometry_.polyline_and_accuracy_ = polyline_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.polyline_and_accuracy)
}
void LaneBoundary::clear_polyline_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (geometry_case() == kPolylineAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.geometry_.polyline_and_accuracy_;
    }
    clear_has_geometry();
  }
}
void LaneBoundary::clear_width_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.width_and_accuracy_ != nullptr) _impl_.width_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void LaneBoundary::clear_height_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.height_and_accuracy_ != nullptr) _impl_.height_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void LaneBoundary::clear_distance_between_double_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.distance_between_double_and_accuracy_ != nullptr) _impl_.distance_between_double_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void LaneBoundary::set_allocated_dash_statistics(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics* dash_statistics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_markings();
  if (dash_statistics) {
    ::google::protobuf::Arena* submessage_arena = dash_statistics->GetArena();
    if (message_arena != submessage_arena) {
      dash_statistics = ::google::protobuf::internal::GetOwnedMessage(message_arena, dash_statistics, submessage_arena);
    }
    set_has_dash_statistics();
    _impl_.markings_.dash_statistics_ = dash_statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.dash_statistics)
}
void LaneBoundary::set_allocated_marking_offsets(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets* marking_offsets) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_markings();
  if (marking_offsets) {
    ::google::protobuf::Arena* submessage_arena = marking_offsets->GetArena();
    if (message_arena != submessage_arena) {
      marking_offsets = ::google::protobuf::internal::GetOwnedMessage(message_arena, marking_offsets, submessage_arena);
    }
    set_has_marking_offsets();
    _impl_.markings_.marking_offsets_ = marking_offsets;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.marking_offsets)
}
LaneBoundary::LaneBoundary(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        geometry_{},
        markings_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

LaneBoundary::LaneBoundary(
    ::google::protobuf::Arena* arena,
    const LaneBoundary& from)
    : ::google::protobuf::Message(arena) {
  LaneBoundary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.lane_boundary_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.lane_boundary_id_)
                : nullptr;
  _impl_.existence_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.material_and_confidence_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence>(arena, *from._impl_.material_and_confidence_)
                : nullptr;
  _impl_.color_and_confidence_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence>(arena, *from._impl_.color_and_confidence_)
                : nullptr;
  _impl_.width_and_accuracy_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.width_and_accuracy_)
                : nullptr;
  _impl_.height_and_accuracy_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.height_and_accuracy_)
                : nullptr;
  _impl_.distance_between_double_and_accuracy_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.distance_between_double_and_accuracy_)
                : nullptr;
  _impl_.position_reference_ = from._impl_.position_reference_;
  switch (geometry_case()) {
    case GEOMETRY_NOT_SET:
      break;
      case kPolylineAndAccuracy:
        _impl_.geometry_.polyline_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::spatial::PolylineAndAccuracy>(arena, *from._impl_.geometry_.polyline_and_accuracy_);
        break;
  }
  switch (markings_case()) {
    case MARKINGS_NOT_SET:
      break;
      case kDashStatistics:
        _impl_.markings_.dash_statistics_ = CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics>(arena, *from._impl_.markings_.dash_statistics_);
        break;
      case kMarkingOffsets:
        _impl_.markings_.marking_offsets_ = CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets>(arena, *from._impl_.markings_.marking_offsets_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        geometry_{},
        markings_{},
        _oneof_case_{} {}

inline void LaneBoundary::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, position_reference_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::position_reference_));
}
LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LaneBoundary::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.lane_boundary_id_;
  delete _impl_.existence_confidence_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  delete _impl_.material_and_confidence_;
  delete _impl_.color_and_confidence_;
  delete _impl_.width_and_accuracy_;
  delete _impl_.height_and_accuracy_;
  delete _impl_.distance_between_double_and_accuracy_;
  if (has_geometry()) {
    clear_geometry();
  }
  if (has_markings()) {
    clear_markings();
  }
  _impl_.~Impl_();
}

void LaneBoundary::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (geometry_case()) {
    case kPolylineAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.geometry_.polyline_and_accuracy_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GEOMETRY_NOT_SET;
}

void LaneBoundary::clear_markings() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (markings_case()) {
    case kDashStatistics: {
      if (GetArena() == nullptr) {
        delete _impl_.markings_.dash_statistics_;
      }
      break;
    }
    case kMarkingOffsets: {
      if (GetArena() == nullptr) {
        delete _impl_.markings_.marking_offsets_;
      }
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = MARKINGS_NOT_SET;
}


PROTOBUF_NOINLINE void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.lane_boundary_id_ != nullptr);
      _impl_.lane_boundary_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.material_and_confidence_ != nullptr);
      _impl_.material_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.color_and_confidence_ != nullptr);
      _impl_.color_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.width_and_accuracy_ != nullptr);
      _impl_.width_and_accuracy_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.height_and_accuracy_ != nullptr);
      _impl_.height_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.distance_between_double_and_accuracy_ != nullptr);
      _impl_.distance_between_double_and_accuracy_->Clear();
    }
  }
  _impl_.position_reference_ = 0;
  clear_geometry();
  clear_markings();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LaneBoundary::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 13, 0, 2> LaneBoundary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LaneBoundary_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.envelope_)}},
    // .google.protobuf.Int64Value lane_boundary_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.lane_boundary_id_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.material_and_confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.color_and_confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneBoundary, _impl_.position_reference_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.position_reference_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {82, 7, 8, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.width_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {90, 8, 9, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.height_and_accuracy_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {98, 9, 10, PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.distance_between_double_and_accuracy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value lane_boundary_id = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.lane_boundary_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.detection_status_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.material_and_confidence_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.color_and_confidence_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.position_reference_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.geometry_.polyline_and_accuracy_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.width_and_accuracy_), _Internal::kHasBitsOffset + 7, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.height_and_accuracy_), _Internal::kHasBitsOffset + 8, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.distance_between_double_and_accuracy_), _Internal::kHasBitsOffset + 9, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.markings_.dash_statistics_), _Internal::kOneofCaseOffset + 4, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;
    {PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.markings_.marking_offsets_), _Internal::kOneofCaseOffset + 4, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PolylineAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets>()},
  }}, {{
  }},
};

::uint8_t* LaneBoundary::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value lane_boundary_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::lane_boundary_id(this),
        _Internal::lane_boundary_id(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::existence_confidence(this),
        _Internal::existence_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::material_and_confidence(this),
        _Internal::material_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::color_and_confidence(this),
        _Internal::color_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
  if (this->_internal_position_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_position_reference(), target);
  }

  // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
  if (geometry_case() == kPolylineAndAccuracy) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::polyline_and_accuracy(this),
        _Internal::polyline_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::width_and_accuracy(this),
        _Internal::width_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::height_and_accuracy(this),
        _Internal::height_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::distance_between_double_and_accuracy(this),
        _Internal::distance_between_double_and_accuracy(this).GetCachedSize(), target, stream);
  }

  switch (markings_case()) {
    case kDashStatistics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          13, _Internal::dash_statistics(this),
          _Internal::dash_statistics(this).GetCachedSize(), target, stream);
      break;
    }
    case kMarkingOffsets: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          14, _Internal::marking_offsets(this),
          _Internal::marking_offsets(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  return target;
}

::size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .google.protobuf.Int64Value lane_boundary_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lane_boundary_id_);
    }

    // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.existence_confidence_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

    // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.material_and_confidence_);
    }

    // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.color_and_confidence_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.width_and_accuracy_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.height_and_accuracy_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.distance_between_double_and_accuracy_);
    }

  }
  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
  if (this->_internal_position_reference() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_position_reference());
  }

  switch (geometry_case()) {
    // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
    case kPolylineAndAccuracy: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.geometry_.polyline_and_accuracy_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  switch (markings_case()) {
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;
    case kDashStatistics: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.markings_.dash_statistics_);
      break;
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;
    case kMarkingOffsets: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.markings_.marking_offsets_);
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LaneBoundary::_class_data_ = {
    LaneBoundary::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LaneBoundary::GetClassData() const {
  return &_class_data_;
}

void LaneBoundary::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LaneBoundary*>(&to_msg);
  auto& from = static_cast<const LaneBoundary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_lane_boundary_id()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_lane_boundary_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_existence_confidence());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_material_and_confidence()->::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence::MergeFrom(
          from._internal_material_and_confidence());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_color_and_confidence()->::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence::MergeFrom(
          from._internal_color_and_confidence());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_width_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_width_and_accuracy());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_height_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_height_and_accuracy());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_distance_between_double_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_distance_between_double_and_accuracy());
    }
  }
  if (from._internal_position_reference() != 0) {
    _this->_internal_set_position_reference(from._internal_position_reference());
  }
  switch (from.geometry_case()) {
    case kPolylineAndAccuracy: {
      _this->_internal_mutable_polyline_and_accuracy()->::sensoris::protobuf::types::spatial::PolylineAndAccuracy::MergeFrom(
          from._internal_polyline_and_accuracy());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  switch (from.markings_case()) {
    case kDashStatistics: {
      _this->_internal_mutable_dash_statistics()->::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics::MergeFrom(
          from._internal_dash_statistics());
      break;
    }
    case kMarkingOffsets: {
      _this->_internal_mutable_marking_offsets()->::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets::MergeFrom(
          from._internal_marking_offsets());
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LaneBoundary::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LaneBoundary::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LaneBoundary::InternalSwap(LaneBoundary* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.position_reference_)
      + sizeof(LaneBoundary::_impl_.position_reference_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
  swap(_impl_.geometry_, other->_impl_.geometry_);
  swap(_impl_.markings_, other->_impl_.markings_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata LaneBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[8]);
}
// ===================================================================

class LaneBoundaryMergeSplit_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundaryMergeSplit_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const LaneBoundaryMergeSplit_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& LaneBoundaryMergeSplit_TypeAndConfidence::_Internal::confidence(const LaneBoundaryMergeSplit_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void LaneBoundaryMergeSplit_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundaryMergeSplit_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const LaneBoundaryMergeSplit_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  LaneBoundaryMergeSplit_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundaryMergeSplit_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LaneBoundaryMergeSplit_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
LaneBoundaryMergeSplit_TypeAndConfidence::~LaneBoundaryMergeSplit_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LaneBoundaryMergeSplit_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LaneBoundaryMergeSplit_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LaneBoundaryMergeSplit_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> LaneBoundaryMergeSplit_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* LaneBoundaryMergeSplit_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  return target;
}

::size_t LaneBoundaryMergeSplit_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LaneBoundaryMergeSplit_TypeAndConfidence::_class_data_ = {
    LaneBoundaryMergeSplit_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LaneBoundaryMergeSplit_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void LaneBoundaryMergeSplit_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LaneBoundaryMergeSplit_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const LaneBoundaryMergeSplit_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundaryMergeSplit_TypeAndConfidence::CopyFrom(const LaneBoundaryMergeSplit_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LaneBoundaryMergeSplit_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LaneBoundaryMergeSplit_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LaneBoundaryMergeSplit_TypeAndConfidence::InternalSwap(LaneBoundaryMergeSplit_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.type_)
      + sizeof(LaneBoundaryMergeSplit_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata LaneBoundaryMergeSplit_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[9]);
}
// ===================================================================

class LaneBoundaryMergeSplit::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundaryMergeSplit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const LaneBoundaryMergeSplit* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Confidence& existence_confidence(const LaneBoundaryMergeSplit* msg);
  static void set_has_existence_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const LaneBoundaryMergeSplit* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence& type_and_confidence(const LaneBoundaryMergeSplit* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& position_and_accuracy(const LaneBoundaryMergeSplit* msg);
  static void set_has_position_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& LaneBoundaryMergeSplit::_Internal::envelope(const LaneBoundaryMergeSplit* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::Confidence& LaneBoundaryMergeSplit::_Internal::existence_confidence(const LaneBoundaryMergeSplit* msg) {
  return *msg->_impl_.existence_confidence_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& LaneBoundaryMergeSplit::_Internal::detection_status(const LaneBoundaryMergeSplit* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence& LaneBoundaryMergeSplit::_Internal::type_and_confidence(const LaneBoundaryMergeSplit* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& LaneBoundaryMergeSplit::_Internal::position_and_accuracy(const LaneBoundaryMergeSplit* msg) {
  return *msg->_impl_.position_and_accuracy_;
}
void LaneBoundaryMergeSplit::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneBoundaryMergeSplit::clear_existence_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LaneBoundaryMergeSplit::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LaneBoundaryMergeSplit::clear_position_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
LaneBoundaryMergeSplit::LaneBoundaryMergeSplit(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundaryMergeSplit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneBoundaryMergeSplit::LaneBoundaryMergeSplit(
    ::google::protobuf::Arena* arena,
    const LaneBoundaryMergeSplit& from)
    : ::google::protobuf::Message(arena) {
  LaneBoundaryMergeSplit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.existence_confidence_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.position_and_accuracy_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(arena, *from._impl_.position_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
}
inline PROTOBUF_NDEBUG_INLINE LaneBoundaryMergeSplit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LaneBoundaryMergeSplit::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, position_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::position_and_accuracy_));
}
LaneBoundaryMergeSplit::~LaneBoundaryMergeSplit() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LaneBoundaryMergeSplit::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.existence_confidence_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  delete _impl_.position_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LaneBoundaryMergeSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LaneBoundaryMergeSplit::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2> LaneBoundaryMergeSplit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LaneBoundaryMergeSplit_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.position_and_accuracy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.detection_status_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
    {PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* LaneBoundaryMergeSplit::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::existence_confidence(this),
        _Internal::existence_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::position_and_accuracy(this),
        _Internal::position_and_accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  return target;
}

::size_t LaneBoundaryMergeSplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.existence_confidence_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_and_accuracy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LaneBoundaryMergeSplit::_class_data_ = {
    LaneBoundaryMergeSplit::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LaneBoundaryMergeSplit::GetClassData() const {
  return &_class_data_;
}

void LaneBoundaryMergeSplit::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LaneBoundaryMergeSplit*>(&to_msg);
  auto& from = static_cast<const LaneBoundaryMergeSplit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_existence_confidence());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(
          from._internal_position_and_accuracy());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundaryMergeSplit::CopyFrom(const LaneBoundaryMergeSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LaneBoundaryMergeSplit::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LaneBoundaryMergeSplit::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LaneBoundaryMergeSplit::InternalSwap(LaneBoundaryMergeSplit* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.position_and_accuracy_)
      + sizeof(LaneBoundaryMergeSplit::_impl_.position_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(LaneBoundaryMergeSplit, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata LaneBoundaryMergeSplit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[10]);
}
// ===================================================================

class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Lane, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const Lane* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& relative_lane_id(const Lane* msg);
  static void set_has_relative_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& width_and_accuracy(const Lane* msg);
  static void set_has_width_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature& inclination_and_curvature(const Lane* msg);
  static void set_has_inclination_and_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& Lane::_Internal::envelope(const Lane* msg) {
  return *msg->_impl_.envelope_;
}
const ::google::protobuf::Int64Value& Lane::_Internal::relative_lane_id(const Lane* msg) {
  return *msg->_impl_.relative_lane_id_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Lane::_Internal::width_and_accuracy(const Lane* msg) {
  return *msg->_impl_.width_and_accuracy_;
}
const ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature& Lane::_Internal::inclination_and_curvature(const Lane* msg) {
  return *msg->_impl_.inclination_and_curvature_;
}
void Lane::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_relative_lane_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.relative_lane_id_ != nullptr) _impl_.relative_lane_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_width_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.width_and_accuracy_ != nullptr) _impl_.width_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Lane::Lane(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.Lane)
}
inline PROTOBUF_NDEBUG_INLINE Lane::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Lane::Lane(
    ::google::protobuf::Arena* arena,
    const Lane& from)
    : ::google::protobuf::Message(arena) {
  Lane* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.relative_lane_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.relative_lane_id_)
                : nullptr;
  _impl_.width_and_accuracy_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.width_and_accuracy_)
                : nullptr;
  _impl_.inclination_and_curvature_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>(arena, *from._impl_.inclination_and_curvature_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.Lane)
}
inline PROTOBUF_NDEBUG_INLINE Lane::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Lane::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, inclination_and_curvature_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::inclination_and_curvature_));
}
Lane::~Lane() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.Lane)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Lane::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.relative_lane_id_;
  delete _impl_.width_and_accuracy_;
  delete _impl_.inclination_and_curvature_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.Lane)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.relative_lane_id_ != nullptr);
      _impl_.relative_lane_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.width_and_accuracy_ != nullptr);
      _impl_.width_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.inclination_and_curvature_ != nullptr);
      _impl_.inclination_and_curvature_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Lane::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Lane::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Lane, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Lane_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Lane, _impl_.inclination_and_curvature_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Lane, _impl_.envelope_)}},
    // .google.protobuf.Int64Value relative_lane_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Lane, _impl_.relative_lane_id_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Lane, _impl_.width_and_accuracy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(Lane, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value relative_lane_id = 2;
    {PROTOBUF_FIELD_OFFSET(Lane, _impl_.relative_lane_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(Lane, _impl_.width_and_accuracy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
    {PROTOBUF_FIELD_OFFSET(Lane, _impl_.inclination_and_curvature_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>()},
  }}, {{
  }},
};

::uint8_t* Lane::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.Lane)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value relative_lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::relative_lane_id(this),
        _Internal::relative_lane_id(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::width_and_accuracy(this),
        _Internal::width_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::inclination_and_curvature(this),
        _Internal::inclination_and_curvature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.Lane)
  return target;
}

::size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.Lane)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .google.protobuf.Int64Value relative_lane_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.relative_lane_id_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.width_and_accuracy_);
    }

    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.inclination_and_curvature_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Lane::_class_data_ = {
    Lane::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Lane::GetClassData() const {
  return &_class_data_;
}

void Lane::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Lane*>(&to_msg);
  auto& from = static_cast<const Lane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.Lane)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_relative_lane_id()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_relative_lane_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_width_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_width_and_accuracy());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_inclination_and_curvature()->::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::MergeFrom(
          from._internal_inclination_and_curvature());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Lane::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Lane::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Lane::InternalSwap(Lane* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, _impl_.inclination_and_curvature_)
      + sizeof(Lane::_impl_.inclination_and_curvature_)
      - PROTOBUF_FIELD_OFFSET(Lane, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[11]);
}
// ===================================================================

class Road::_Internal {
 public:
  using HasBits = decltype(std::declval<Road>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Road, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const Road* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& width_and_accuracy(const Road* msg);
  static void set_has_width_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature& inclination_and_curvature(const Road* msg);
  static void set_has_inclination_and_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& Road::_Internal::envelope(const Road* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Road::_Internal::width_and_accuracy(const Road* msg) {
  return *msg->_impl_.width_and_accuracy_;
}
const ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature& Road::_Internal::inclination_and_curvature(const Road* msg) {
  return *msg->_impl_.inclination_and_curvature_;
}
void Road::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Road::clear_width_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.width_and_accuracy_ != nullptr) _impl_.width_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Road::Road(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.Road)
}
inline PROTOBUF_NDEBUG_INLINE Road::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Road::Road(
    ::google::protobuf::Arena* arena,
    const Road& from)
    : ::google::protobuf::Message(arena) {
  Road* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.width_and_accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.width_and_accuracy_)
                : nullptr;
  _impl_.inclination_and_curvature_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>(arena, *from._impl_.inclination_and_curvature_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.Road)
}
inline PROTOBUF_NDEBUG_INLINE Road::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Road::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, inclination_and_curvature_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::inclination_and_curvature_));
}
Road::~Road() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.Road)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Road::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.width_and_accuracy_;
  delete _impl_.inclination_and_curvature_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.Road)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.width_and_accuracy_ != nullptr);
      _impl_.width_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.inclination_and_curvature_ != nullptr);
      _impl_.inclination_and_curvature_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Road::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Road::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Road, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Road_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Road, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Road, _impl_.width_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Road, _impl_.inclination_and_curvature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(Road, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(Road, _impl_.width_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    {PROTOBUF_FIELD_OFFSET(Road, _impl_.inclination_and_curvature_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>()},
  }}, {{
  }},
};

::uint8_t* Road::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.Road)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::width_and_accuracy(this),
        _Internal::width_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::inclination_and_curvature(this),
        _Internal::inclination_and_curvature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.Road)
  return target;
}

::size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.Road)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.width_and_accuracy_);
    }

    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.inclination_and_curvature_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Road::_class_data_ = {
    Road::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Road::GetClassData() const {
  return &_class_data_;
}

void Road::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Road*>(&to_msg);
  auto& from = static_cast<const Road&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.Road)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_width_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_width_and_accuracy());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inclination_and_curvature()->::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::MergeFrom(
          from._internal_inclination_and_curvature());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Road::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Road::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Road::InternalSwap(Road* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Road, _impl_.inclination_and_curvature_)
      + sizeof(Road::_impl_.inclination_and_curvature_)
      - PROTOBUF_FIELD_OFFSET(Road, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata Road::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[12]);
}
// ===================================================================

class SurfaceMarking_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceMarking_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const SurfaceMarking_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& SurfaceMarking_TypeAndConfidence::_Internal::confidence(const SurfaceMarking_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void SurfaceMarking_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE SurfaceMarking_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const SurfaceMarking_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  SurfaceMarking_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE SurfaceMarking_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SurfaceMarking_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
SurfaceMarking_TypeAndConfidence::~SurfaceMarking_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SurfaceMarking_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SurfaceMarking_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SurfaceMarking_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SurfaceMarking_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SurfaceMarking_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SurfaceMarking_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* SurfaceMarking_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  return target;
}

::size_t SurfaceMarking_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SurfaceMarking_TypeAndConfidence::_class_data_ = {
    SurfaceMarking_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SurfaceMarking_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void SurfaceMarking_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SurfaceMarking_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const SurfaceMarking_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SurfaceMarking_TypeAndConfidence::CopyFrom(const SurfaceMarking_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SurfaceMarking_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SurfaceMarking_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SurfaceMarking_TypeAndConfidence::InternalSwap(SurfaceMarking_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.type_)
      + sizeof(SurfaceMarking_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SurfaceMarking_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata SurfaceMarking_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[13]);
}
// ===================================================================

class SurfaceMarking::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceMarking>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const SurfaceMarking* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Confidence& existence_confidence(const SurfaceMarking* msg);
  static void set_has_existence_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const SurfaceMarking* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence& type_and_confidence(const SurfaceMarking* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::StringValue& text(const SurfaceMarking* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& rectangular_box_and_accuracy(const SurfaceMarking* msg);
  static void set_has_rectangular_box_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& SurfaceMarking::_Internal::envelope(const SurfaceMarking* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::Confidence& SurfaceMarking::_Internal::existence_confidence(const SurfaceMarking* msg) {
  return *msg->_impl_.existence_confidence_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& SurfaceMarking::_Internal::detection_status(const SurfaceMarking* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence& SurfaceMarking::_Internal::type_and_confidence(const SurfaceMarking* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::google::protobuf::StringValue& SurfaceMarking::_Internal::text(const SurfaceMarking* msg) {
  return *msg->_impl_.text_;
}
const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& SurfaceMarking::_Internal::rectangular_box_and_accuracy(const SurfaceMarking* msg) {
  return *msg->_impl_.rectangular_box_and_accuracy_;
}
void SurfaceMarking::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SurfaceMarking::clear_existence_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SurfaceMarking::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SurfaceMarking::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.text_ != nullptr) _impl_.text_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void SurfaceMarking::clear_rectangular_box_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rectangular_box_and_accuracy_ != nullptr) _impl_.rectangular_box_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
SurfaceMarking::SurfaceMarking(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
}
inline PROTOBUF_NDEBUG_INLINE SurfaceMarking::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        color_and_confidence_{visibility, arena, from.color_and_confidence_},
        material_and_confidence_{visibility, arena, from.material_and_confidence_} {}

SurfaceMarking::SurfaceMarking(
    ::google::protobuf::Arena* arena,
    const SurfaceMarking& from)
    : ::google::protobuf::Message(arena) {
  SurfaceMarking* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.existence_confidence_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.text_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.text_)
                : nullptr;
  _impl_.rectangular_box_and_accuracy_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>(arena, *from._impl_.rectangular_box_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
}
inline PROTOBUF_NDEBUG_INLINE SurfaceMarking::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        color_and_confidence_{visibility, arena},
        material_and_confidence_{visibility, arena} {}

inline void SurfaceMarking::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, rectangular_box_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::rectangular_box_and_accuracy_));
}
SurfaceMarking::~SurfaceMarking() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SurfaceMarking::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.existence_confidence_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  delete _impl_.text_;
  delete _impl_.rectangular_box_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SurfaceMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_and_confidence_.Clear();
  _impl_.material_and_confidence_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.text_ != nullptr);
      _impl_.text_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.rectangular_box_and_accuracy_ != nullptr);
      _impl_.rectangular_box_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SurfaceMarking::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 8, 0, 2> SurfaceMarking::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SurfaceMarking_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 7, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.rectangular_box_and_accuracy_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.type_and_confidence_)}},
    // .google.protobuf.StringValue text = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.text_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.color_and_confidence_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.material_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.detection_status_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue text = 5;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.text_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.color_and_confidence_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.material_and_confidence_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
    {PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.rectangular_box_and_accuracy_), _Internal::kHasBitsOffset + 5, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* SurfaceMarking::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::existence_confidence(this),
        _Internal::existence_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue text = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::text(this),
        _Internal::text(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_color_and_confidence_size()); i < n; i++) {
    const auto& repfield = this->_internal_color_and_confidence().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_material_and_confidence_size()); i < n; i++) {
    const auto& repfield = this->_internal_material_and_confidence().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::rectangular_box_and_accuracy(this),
        _Internal::rectangular_box_and_accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  return target;
}

::size_t SurfaceMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
  total_size += 1UL * this->_internal_color_and_confidence_size();
  for (const auto& msg : this->_internal_color_and_confidence()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
  total_size += 1UL * this->_internal_material_and_confidence_size();
  for (const auto& msg : this->_internal_material_and_confidence()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.existence_confidence_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

    // .google.protobuf.StringValue text = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_);
    }

    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rectangular_box_and_accuracy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SurfaceMarking::_class_data_ = {
    SurfaceMarking::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SurfaceMarking::GetClassData() const {
  return &_class_data_;
}

void SurfaceMarking::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SurfaceMarking*>(&to_msg);
  auto& from = static_cast<const SurfaceMarking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_color_and_confidence()->MergeFrom(
      from._internal_color_and_confidence());
  _this->_internal_mutable_material_and_confidence()->MergeFrom(
      from._internal_material_and_confidence());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_existence_confidence());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_text()->::google::protobuf::StringValue::MergeFrom(
          from._internal_text());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_rectangular_box_and_accuracy()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::MergeFrom(
          from._internal_rectangular_box_and_accuracy());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SurfaceMarking::CopyFrom(const SurfaceMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SurfaceMarking::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SurfaceMarking::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SurfaceMarking::InternalSwap(SurfaceMarking* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.color_and_confidence_.InternalSwap(&other->_impl_.color_and_confidence_);
  _impl_.material_and_confidence_.InternalSwap(&other->_impl_.material_and_confidence_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.rectangular_box_and_accuracy_)
      + sizeof(SurfaceMarking::_impl_.rectangular_box_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(SurfaceMarking, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata SurfaceMarking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[14]);
}
// ===================================================================

class SurfaceAttribution::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceAttribution>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const SurfaceAttribution* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& position_and_accuracy(const SurfaceAttribution* msg);
  static void set_has_position_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature& inclination_and_curvature(const SurfaceAttribution* msg);
  static void set_has_inclination_and_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& road_roughness_and_accuracy(const SurfaceAttribution* msg);
  static void set_has_road_roughness_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& SurfaceAttribution::_Internal::envelope(const SurfaceAttribution* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& SurfaceAttribution::_Internal::position_and_accuracy(const SurfaceAttribution* msg) {
  return *msg->_impl_.position_and_accuracy_;
}
const ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature& SurfaceAttribution::_Internal::inclination_and_curvature(const SurfaceAttribution* msg) {
  return *msg->_impl_.inclination_and_curvature_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& SurfaceAttribution::_Internal::road_roughness_and_accuracy(const SurfaceAttribution* msg) {
  return *msg->_impl_.road_roughness_and_accuracy_;
}
void SurfaceAttribution::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SurfaceAttribution::clear_position_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SurfaceAttribution::clear_road_roughness_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.road_roughness_and_accuracy_ != nullptr) _impl_.road_roughness_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SurfaceAttribution::SurfaceAttribution(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
}
inline PROTOBUF_NDEBUG_INLINE SurfaceAttribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        material_and_confidence_{visibility, arena, from.material_and_confidence_} {}

SurfaceAttribution::SurfaceAttribution(
    ::google::protobuf::Arena* arena,
    const SurfaceAttribution& from)
    : ::google::protobuf::Message(arena) {
  SurfaceAttribution* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.position_and_accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(arena, *from._impl_.position_and_accuracy_)
                : nullptr;
  _impl_.inclination_and_curvature_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>(arena, *from._impl_.inclination_and_curvature_)
                : nullptr;
  _impl_.road_roughness_and_accuracy_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.road_roughness_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
}
inline PROTOBUF_NDEBUG_INLINE SurfaceAttribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        material_and_confidence_{visibility, arena} {}

inline void SurfaceAttribution::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, road_roughness_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::road_roughness_and_accuracy_));
}
SurfaceAttribution::~SurfaceAttribution() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SurfaceAttribution::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.position_and_accuracy_;
  delete _impl_.inclination_and_curvature_;
  delete _impl_.road_roughness_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SurfaceAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.material_and_confidence_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.inclination_and_curvature_ != nullptr);
      _impl_.inclination_and_curvature_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.road_roughness_and_accuracy_ != nullptr);
      _impl_.road_roughness_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SurfaceAttribution::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2> SurfaceAttribution::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SurfaceAttribution_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.envelope_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.position_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.inclination_and_curvature_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.material_and_confidence_)}},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 4, PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.road_roughness_and_accuracy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.inclination_and_curvature_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.material_and_confidence_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.road_roughness_and_accuracy_), _Internal::kHasBitsOffset + 3, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* SurfaceAttribution::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::position_and_accuracy(this),
        _Internal::position_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::inclination_and_curvature(this),
        _Internal::inclination_and_curvature(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_material_and_confidence_size()); i < n; i++) {
    const auto& repfield = this->_internal_material_and_confidence().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::road_roughness_and_accuracy(this),
        _Internal::road_roughness_and_accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  return target;
}

::size_t SurfaceAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
  total_size += 1UL * this->_internal_material_and_confidence_size();
  for (const auto& msg : this->_internal_material_and_confidence()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_and_accuracy_);
    }

    // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.inclination_and_curvature_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.road_roughness_and_accuracy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SurfaceAttribution::_class_data_ = {
    SurfaceAttribution::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SurfaceAttribution::GetClassData() const {
  return &_class_data_;
}

void SurfaceAttribution::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SurfaceAttribution*>(&to_msg);
  auto& from = static_cast<const SurfaceAttribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_material_and_confidence()->MergeFrom(
      from._internal_material_and_confidence());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(
          from._internal_position_and_accuracy());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inclination_and_curvature()->::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::MergeFrom(
          from._internal_inclination_and_curvature());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_road_roughness_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_road_roughness_and_accuracy());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SurfaceAttribution::CopyFrom(const SurfaceAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SurfaceAttribution::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SurfaceAttribution::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SurfaceAttribution::InternalSwap(SurfaceAttribution* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.material_and_confidence_.InternalSwap(&other->_impl_.material_and_confidence_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.road_roughness_and_accuracy_)
      + sizeof(SurfaceAttribution::_impl_.road_roughness_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(SurfaceAttribution, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata SurfaceAttribution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[15]);
}
// ===================================================================

class RoadAttribution_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadAttribution_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const RoadAttribution_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& RoadAttribution_TypeAndConfidence::_Internal::confidence(const RoadAttribution_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void RoadAttribution_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadAttribution_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const RoadAttribution_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  RoadAttribution_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadAttribution_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadAttribution_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadAttribution_TypeAndConfidence::~RoadAttribution_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadAttribution_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadAttribution_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadAttribution_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> RoadAttribution_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadAttribution_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadAttribution_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* RoadAttribution_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  return target;
}

::size_t RoadAttribution_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadAttribution_TypeAndConfidence::_class_data_ = {
    RoadAttribution_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadAttribution_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void RoadAttribution_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadAttribution_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadAttribution_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadAttribution_TypeAndConfidence::CopyFrom(const RoadAttribution_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadAttribution_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadAttribution_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadAttribution_TypeAndConfidence::InternalSwap(RoadAttribution_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadAttribution_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadAttribution_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadAttribution_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[16]);
}
// ===================================================================

class RoadAttribution_ChangeTypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadAttribution_ChangeTypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const RoadAttribution_ChangeTypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& RoadAttribution_ChangeTypeAndConfidence::_Internal::confidence(const RoadAttribution_ChangeTypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void RoadAttribution_ChangeTypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadAttribution_ChangeTypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const RoadAttribution_ChangeTypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  RoadAttribution_ChangeTypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadAttribution_ChangeTypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadAttribution_ChangeTypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadAttribution_ChangeTypeAndConfidence::~RoadAttribution_ChangeTypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadAttribution_ChangeTypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadAttribution_ChangeTypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadAttribution_ChangeTypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> RoadAttribution_ChangeTypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadAttribution_ChangeTypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadAttribution_ChangeTypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* RoadAttribution_ChangeTypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  return target;
}

::size_t RoadAttribution_ChangeTypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadAttribution_ChangeTypeAndConfidence::_class_data_ = {
    RoadAttribution_ChangeTypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadAttribution_ChangeTypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void RoadAttribution_ChangeTypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadAttribution_ChangeTypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadAttribution_ChangeTypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadAttribution_ChangeTypeAndConfidence::CopyFrom(const RoadAttribution_ChangeTypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadAttribution_ChangeTypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadAttribution_ChangeTypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadAttribution_ChangeTypeAndConfidence::InternalSwap(RoadAttribution_ChangeTypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.type_)
      + sizeof(RoadAttribution_ChangeTypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadAttribution_ChangeTypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadAttribution_ChangeTypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[17]);
}
// ===================================================================

class RoadAttribution::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadAttribution>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const RoadAttribution* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const RoadAttribution* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& position_and_accuracy(const RoadAttribution* msg);
  static void set_has_position_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence& type_and_confidence(const RoadAttribution* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence& change_type_and_confidence(const RoadAttribution* msg);
  static void set_has_change_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& RoadAttribution::_Internal::envelope(const RoadAttribution* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& RoadAttribution::_Internal::detection_status(const RoadAttribution* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& RoadAttribution::_Internal::position_and_accuracy(const RoadAttribution* msg) {
  return *msg->_impl_.position_and_accuracy_;
}
const ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence& RoadAttribution::_Internal::type_and_confidence(const RoadAttribution* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence& RoadAttribution::_Internal::change_type_and_confidence(const RoadAttribution* msg) {
  return *msg->_impl_.change_type_and_confidence_;
}
void RoadAttribution::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadAttribution::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadAttribution::clear_position_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RoadAttribution::RoadAttribution(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
}
inline PROTOBUF_NDEBUG_INLINE RoadAttribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadAttribution::RoadAttribution(
    ::google::protobuf::Arena* arena,
    const RoadAttribution& from)
    : ::google::protobuf::Message(arena) {
  RoadAttribution* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.position_and_accuracy_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(arena, *from._impl_.position_and_accuracy_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.change_type_and_confidence_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence>(arena, *from._impl_.change_type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
}
inline PROTOBUF_NDEBUG_INLINE RoadAttribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadAttribution::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, change_type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::change_type_and_confidence_));
}
RoadAttribution::~RoadAttribution() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadAttribution::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.position_and_accuracy_;
  delete _impl_.type_and_confidence_;
  delete _impl_.change_type_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.change_type_and_confidence_ != nullptr);
      _impl_.change_type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadAttribution::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2> RoadAttribution::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadAttribution_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.detection_status_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.position_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.change_type_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.change_type_and_confidence_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* RoadAttribution::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::position_and_accuracy(this),
        _Internal::position_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::change_type_and_confidence(this),
        _Internal::change_type_and_confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  return target;
}

::size_t RoadAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_and_accuracy_);
    }

    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

    // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.change_type_and_confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadAttribution::_class_data_ = {
    RoadAttribution::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadAttribution::GetClassData() const {
  return &_class_data_;
}

void RoadAttribution::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadAttribution*>(&to_msg);
  auto& from = static_cast<const RoadAttribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(
          from._internal_position_and_accuracy());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_change_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence::MergeFrom(
          from._internal_change_type_and_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadAttribution::CopyFrom(const RoadAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadAttribution::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadAttribution::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadAttribution::InternalSwap(RoadAttribution* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.change_type_and_confidence_)
      + sizeof(RoadAttribution::_impl_.change_type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(RoadAttribution, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadAttribution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[18]);
}
// ===================================================================

class LaneCountAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneCountAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const LaneCountAndConfidence* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& position_and_accuracy(const LaneCountAndConfidence* msg);
  static void set_has_position_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::CountAndConfidence& count_and_confidence(const LaneCountAndConfidence* msg);
  static void set_has_count_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& LaneCountAndConfidence::_Internal::envelope(const LaneCountAndConfidence* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& LaneCountAndConfidence::_Internal::position_and_accuracy(const LaneCountAndConfidence* msg) {
  return *msg->_impl_.position_and_accuracy_;
}
const ::sensoris::protobuf::types::base::CountAndConfidence& LaneCountAndConfidence::_Internal::count_and_confidence(const LaneCountAndConfidence* msg) {
  return *msg->_impl_.count_and_confidence_;
}
void LaneCountAndConfidence::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneCountAndConfidence::clear_position_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_and_accuracy_ != nullptr) _impl_.position_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LaneCountAndConfidence::clear_count_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.count_and_confidence_ != nullptr) _impl_.count_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
LaneCountAndConfidence::LaneCountAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE LaneCountAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LaneCountAndConfidence::LaneCountAndConfidence(
    ::google::protobuf::Arena* arena,
    const LaneCountAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  LaneCountAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.position_and_accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(arena, *from._impl_.position_and_accuracy_)
                : nullptr;
  _impl_.count_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::CountAndConfidence>(arena, *from._impl_.count_and_confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE LaneCountAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LaneCountAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_));
}
LaneCountAndConfidence::~LaneCountAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LaneCountAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.position_and_accuracy_;
  delete _impl_.count_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LaneCountAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.position_and_accuracy_ != nullptr);
      _impl_.position_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.count_and_confidence_ != nullptr);
      _impl_.count_and_confidence_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LaneCountAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> LaneCountAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LaneCountAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.count_and_confidence_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.envelope_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.position_and_accuracy_)}},
    // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LaneCountAndConfidence, _impl_.type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.position_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
    {PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.count_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CountAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* LaneCountAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::position_and_accuracy(this),
        _Internal::position_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::count_and_confidence(this),
        _Internal::count_and_confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  return target;
}

::size_t LaneCountAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_and_accuracy_);
    }

    // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.count_and_confidence_);
    }

  }
  // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LaneCountAndConfidence::_class_data_ = {
    LaneCountAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LaneCountAndConfidence::GetClassData() const {
  return &_class_data_;
}

void LaneCountAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LaneCountAndConfidence*>(&to_msg);
  auto& from = static_cast<const LaneCountAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(
          from._internal_position_and_accuracy());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_count_and_confidence()->::sensoris::protobuf::types::base::CountAndConfidence::MergeFrom(
          from._internal_count_and_confidence());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LaneCountAndConfidence::CopyFrom(const LaneCountAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LaneCountAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LaneCountAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LaneCountAndConfidence::InternalSwap(LaneCountAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.type_)
      + sizeof(LaneCountAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(LaneCountAndConfidence, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata LaneCountAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[19]);
}
// ===================================================================

class RoadAttributionCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadAttributionCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope(const RoadAttributionCategory* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::CategoryEnvelope& RoadAttributionCategory::_Internal::envelope(const RoadAttributionCategory* msg) {
  return *msg->_impl_.envelope_;
}
void RoadAttributionCategory::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadAttributionCategory::RoadAttributionCategory(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
}
inline PROTOBUF_NDEBUG_INLINE RoadAttributionCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        lane_boundary_{visibility, arena, from.lane_boundary_},
        lane_boundary_merge_split_{visibility, arena, from.lane_boundary_merge_split_},
        lane_{visibility, arena, from.lane_},
        road_{visibility, arena, from.road_},
        surface_marking_{visibility, arena, from.surface_marking_},
        surface_attribution_{visibility, arena, from.surface_attribution_},
        road_attribution_{visibility, arena, from.road_attribution_},
        detected_lane_count_and_confidence_{visibility, arena, from.detected_lane_count_and_confidence_},
        estimated_lane_count_and_confidence_{visibility, arena, from.estimated_lane_count_and_confidence_} {}

RoadAttributionCategory::RoadAttributionCategory(
    ::google::protobuf::Arena* arena,
    const RoadAttributionCategory& from)
    : ::google::protobuf::Message(arena) {
  RoadAttributionCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
}
inline PROTOBUF_NDEBUG_INLINE RoadAttributionCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        lane_boundary_{visibility, arena},
        lane_boundary_merge_split_{visibility, arena},
        lane_{visibility, arena},
        road_{visibility, arena},
        surface_marking_{visibility, arena},
        surface_attribution_{visibility, arena},
        road_attribution_{visibility, arena},
        detected_lane_count_and_confidence_{visibility, arena},
        estimated_lane_count_and_confidence_{visibility, arena} {}

inline void RoadAttributionCategory::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
RoadAttributionCategory::~RoadAttributionCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadAttributionCategory::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadAttributionCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_boundary_.Clear();
  _impl_.lane_boundary_merge_split_.Clear();
  _impl_.lane_.Clear();
  _impl_.road_.Clear();
  _impl_.surface_marking_.Clear();
  _impl_.surface_attribution_.Clear();
  _impl_.road_attribution_.Clear();
  _impl_.detected_lane_count_and_confidence_.Clear();
  _impl_.estimated_lane_count_and_confidence_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadAttributionCategory::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 10, 0, 2> RoadAttributionCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadAttributionCategory_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.envelope_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_merge_split_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_marking_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_attribution_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 7, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_attribution_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 8, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.detected_lane_count_and_confidence_)}},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 9, PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.estimated_lane_count_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_boundary_merge_split_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.lane_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_marking_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.surface_attribution_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.road_attribution_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.detected_lane_count_and_confidence_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
    {PROTOBUF_FIELD_OFFSET(RoadAttributionCategory, _impl_.estimated_lane_count_and_confidence_), -1, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundary>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::Lane>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::Road>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceMarking>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::SurfaceAttribution>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::RoadAttribution>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* RoadAttributionCategory::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_boundary_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_boundary().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_boundary_merge_split_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_boundary_merge_split().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_size()); i < n; i++) {
    const auto& repfield = this->_internal_road().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_surface_marking_size()); i < n; i++) {
    const auto& repfield = this->_internal_surface_marking().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_surface_attribution_size()); i < n; i++) {
    const auto& repfield = this->_internal_surface_attribution().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_attribution_size()); i < n; i++) {
    const auto& repfield = this->_internal_road_attribution().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detected_lane_count_and_confidence_size()); i < n; i++) {
    const auto& repfield = this->_internal_detected_lane_count_and_confidence().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_estimated_lane_count_and_confidence_size()); i < n; i++) {
    const auto& repfield = this->_internal_estimated_lane_count_and_confidence().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  return target;
}

::size_t RoadAttributionCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
  total_size += 1UL * this->_internal_lane_boundary_size();
  for (const auto& msg : this->_internal_lane_boundary()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
  total_size += 1UL * this->_internal_lane_boundary_merge_split_size();
  for (const auto& msg : this->_internal_lane_boundary_merge_split()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
  total_size += 1UL * this->_internal_lane_size();
  for (const auto& msg : this->_internal_lane()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
  total_size += 1UL * this->_internal_road_size();
  for (const auto& msg : this->_internal_road()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
  total_size += 1UL * this->_internal_surface_marking_size();
  for (const auto& msg : this->_internal_surface_marking()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
  total_size += 1UL * this->_internal_surface_attribution_size();
  for (const auto& msg : this->_internal_surface_attribution()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
  total_size += 1UL * this->_internal_road_attribution_size();
  for (const auto& msg : this->_internal_road_attribution()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
  total_size += 1UL * this->_internal_detected_lane_count_and_confidence_size();
  for (const auto& msg : this->_internal_detected_lane_count_and_confidence()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
  total_size += 1UL * this->_internal_estimated_lane_count_and_confidence_size();
  for (const auto& msg : this->_internal_estimated_lane_count_and_confidence()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadAttributionCategory::_class_data_ = {
    RoadAttributionCategory::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadAttributionCategory::GetClassData() const {
  return &_class_data_;
}

void RoadAttributionCategory::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadAttributionCategory*>(&to_msg);
  auto& from = static_cast<const RoadAttributionCategory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_lane_boundary()->MergeFrom(
      from._internal_lane_boundary());
  _this->_internal_mutable_lane_boundary_merge_split()->MergeFrom(
      from._internal_lane_boundary_merge_split());
  _this->_internal_mutable_lane()->MergeFrom(
      from._internal_lane());
  _this->_internal_mutable_road()->MergeFrom(
      from._internal_road());
  _this->_internal_mutable_surface_marking()->MergeFrom(
      from._internal_surface_marking());
  _this->_internal_mutable_surface_attribution()->MergeFrom(
      from._internal_surface_attribution());
  _this->_internal_mutable_road_attribution()->MergeFrom(
      from._internal_road_attribution());
  _this->_internal_mutable_detected_lane_count_and_confidence()->MergeFrom(
      from._internal_detected_lane_count_and_confidence());
  _this->_internal_mutable_estimated_lane_count_and_confidence()->MergeFrom(
      from._internal_estimated_lane_count_and_confidence());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(
        from._internal_envelope());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadAttributionCategory::CopyFrom(const RoadAttributionCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadAttributionCategory::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadAttributionCategory::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadAttributionCategory::InternalSwap(RoadAttributionCategory* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lane_boundary_.InternalSwap(&other->_impl_.lane_boundary_);
  _impl_.lane_boundary_merge_split_.InternalSwap(&other->_impl_.lane_boundary_merge_split_);
  _impl_.lane_.InternalSwap(&other->_impl_.lane_);
  _impl_.road_.InternalSwap(&other->_impl_.road_);
  _impl_.surface_marking_.InternalSwap(&other->_impl_.surface_marking_);
  _impl_.surface_attribution_.InternalSwap(&other->_impl_.surface_attribution_);
  _impl_.road_attribution_.InternalSwap(&other->_impl_.road_attribution_);
  _impl_.detected_lane_count_and_confidence_.InternalSwap(&other->_impl_.detected_lane_count_and_confidence_);
  _impl_.estimated_lane_count_and_confidence_.InternalSwap(&other->_impl_.estimated_lane_count_and_confidence_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata RoadAttributionCategory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto[20]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace roadattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
