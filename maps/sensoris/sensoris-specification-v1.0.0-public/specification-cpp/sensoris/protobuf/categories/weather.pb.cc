// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/weather.proto

#include "sensoris/protobuf/categories/weather.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {

inline constexpr Precipitation_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Precipitation_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Precipitation_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Precipitation_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    Precipitation_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Precipitation_TypeAndConfidenceDefaultTypeInternal _Precipitation_TypeAndConfidence_default_instance_;

inline constexpr Precipitation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        intensity_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Precipitation::Precipitation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrecipitationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrecipitationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrecipitationDefaultTypeInternal() {}
  union {
    Precipitation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrecipitationDefaultTypeInternal _Precipitation_default_instance_;

inline constexpr WeatherCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        precipitation_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR WeatherCategory::WeatherCategory(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WeatherCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeatherCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeatherCategoryDefaultTypeInternal() {}
  union {
    WeatherCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeatherCategoryDefaultTypeInternal _WeatherCategory_default_instance_;
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_.type_and_confidence_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_.intensity_),
    0,
    1,
    2,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _impl_.precipitation_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence)},
        {12, 26, -1, sizeof(::sensoris::protobuf::categories::weather::Precipitation)},
        {31, 41, -1, sizeof(::sensoris::protobuf::categories::weather::WeatherCategory)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::categories::weather::_Precipitation_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_Precipitation_default_instance_._instance,
    &::sensoris::protobuf::categories::weather::_WeatherCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n*sensoris/protobuf/categories/weather.p"
    "roto\022$sensoris.protobuf.categories.weath"
    "er\032\"sensoris/protobuf/types/base.proto\"\336"
    "\005\n\rPrecipitation\022=\n\010envelope\030\001 \001(\0132+.sen"
    "soris.protobuf.types.base.EventEnvelope\022"
    "L\n\020detection_status\030\002 \001(\01322.sensoris.pro"
    "tobuf.types.base.EventDetectionStatus\022b\n"
    "\023type_and_confidence\030\003 \001(\0132E.sensoris.pr"
    "otobuf.categories.weather.Precipitation."
    "TypeAndConfidence\022d\n\037relative_intensity_"
    "and_accuracy\030\004 \001(\01323.sensoris.protobuf.t"
    "ypes.base.Int64ValueAndAccuracyB\004\210\265\030\000H\000\022"
    "d\n\037absolute_intensity_and_accuracy\030\005 \001(\013"
    "23.sensoris.protobuf.types.base.Int64Val"
    "ueAndAccuracyB\004\210\265\030\001H\000\032\202\002\n\021TypeAndConfide"
    "nce\022X\n\004type\030\001 \001(\0162J.sensoris.protobuf.ca"
    "tegories.weather.Precipitation.TypeAndCo"
    "nfidence.Type\022<\n\nconfidence\030\002 \001(\0132(.sens"
    "oris.protobuf.types.base.Confidence\"U\n\004T"
    "ype\022\020\n\014UNKNOWN_TYPE\020\000\022\010\n\004NONE\020\001\022\010\n\004RAIN\020"
    "\002\022\023\n\017MIXED_RAIN_SNOW\020\003\022\010\n\004SNOW\020\004\022\010\n\004HAIL"
    "\020\005B\013\n\tintensity\"\237\001\n\017WeatherCategory\022@\n\010e"
    "nvelope\030\001 \001(\0132..sensoris.protobuf.types."
    "base.CategoryEnvelope\022J\n\rprecipitation\030\002"
    " \003(\01323.sensoris.protobuf.categories.weat"
    "her.PrecipitationB\?\n\037org.sensoris.catego"
    "ries.weatherB\027SensorisWeatherCategoryP\001\370"
    "\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_deps[1] =
    {
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto = {
    false,
    false,
    1090,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
    "sensoris/protobuf/categories/weather.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2fcategories_2fweather_2eproto(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto);
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
const ::google::protobuf::EnumDescriptor* Precipitation_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Precipitation_TypeAndConfidence_Type_internal_data_[] = {
    393216u, 0u, };
bool Precipitation_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::UNKNOWN_TYPE;
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::NONE;
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::RAIN;
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::MIXED_RAIN_SNOW;
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::SNOW;
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::HAIL;
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::Type_MIN;
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::Type_MAX;
constexpr int Precipitation_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Precipitation_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<Precipitation_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const Precipitation_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& Precipitation_TypeAndConfidence::_Internal::confidence(const Precipitation_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void Precipitation_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE Precipitation_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const Precipitation_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  Precipitation_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE Precipitation_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Precipitation_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
Precipitation_TypeAndConfidence::~Precipitation_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Precipitation_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Precipitation_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Precipitation_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Precipitation_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Precipitation_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Precipitation_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* Precipitation_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  return target;
}

::size_t Precipitation_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Precipitation_TypeAndConfidence::_class_data_ = {
    Precipitation_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Precipitation_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void Precipitation_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Precipitation_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const Precipitation_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Precipitation_TypeAndConfidence::CopyFrom(const Precipitation_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Precipitation_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Precipitation_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Precipitation_TypeAndConfidence::InternalSwap(Precipitation_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.type_)
      + sizeof(Precipitation_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Precipitation_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata Precipitation_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[0]);
}
// ===================================================================

class Precipitation::_Internal {
 public:
  using HasBits = decltype(std::declval<Precipitation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Precipitation, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _impl_._oneof_case_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const Precipitation* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const Precipitation* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& type_and_confidence(const Precipitation* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& relative_intensity_and_accuracy(const Precipitation* msg);
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& absolute_intensity_and_accuracy(const Precipitation* msg);
};

const ::sensoris::protobuf::types::base::EventEnvelope& Precipitation::_Internal::envelope(const Precipitation* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& Precipitation::_Internal::detection_status(const Precipitation* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& Precipitation::_Internal::type_and_confidence(const Precipitation* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::_Internal::relative_intensity_and_accuracy(const Precipitation* msg) {
  return *msg->_impl_.intensity_.relative_intensity_and_accuracy_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::_Internal::absolute_intensity_and_accuracy(const Precipitation* msg) {
  return *msg->_impl_.intensity_.absolute_intensity_and_accuracy_;
}
void Precipitation::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Precipitation::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Precipitation::set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* relative_intensity_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_intensity();
  if (relative_intensity_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(relative_intensity_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      relative_intensity_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, relative_intensity_and_accuracy, submessage_arena);
    }
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = relative_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
}
void Precipitation::clear_relative_intensity_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.intensity_.relative_intensity_and_accuracy_;
    }
    clear_has_intensity();
  }
}
void Precipitation::set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* absolute_intensity_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_intensity();
  if (absolute_intensity_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(absolute_intensity_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      absolute_intensity_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, absolute_intensity_and_accuracy, submessage_arena);
    }
    set_has_absolute_intensity_and_accuracy();
    _impl_.intensity_.absolute_intensity_and_accuracy_ = absolute_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
}
void Precipitation::clear_absolute_intensity_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (intensity_case() == kAbsoluteIntensityAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.intensity_.absolute_intensity_and_accuracy_;
    }
    clear_has_intensity();
  }
}
Precipitation::Precipitation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.Precipitation)
}
inline PROTOBUF_NDEBUG_INLINE Precipitation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        intensity_{},
        _oneof_case_{from._oneof_case_[0]} {}

Precipitation::Precipitation(
    ::google::protobuf::Arena* arena,
    const Precipitation& from)
    : ::google::protobuf::Message(arena) {
  Precipitation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  switch (intensity_case()) {
    case INTENSITY_NOT_SET:
      break;
      case kRelativeIntensityAndAccuracy:
        _impl_.intensity_.relative_intensity_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.intensity_.relative_intensity_and_accuracy_);
        break;
      case kAbsoluteIntensityAndAccuracy:
        _impl_.intensity_.absolute_intensity_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.intensity_.absolute_intensity_and_accuracy_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.Precipitation)
}
inline PROTOBUF_NDEBUG_INLINE Precipitation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        intensity_{},
        _oneof_case_{} {}

inline void Precipitation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
Precipitation::~Precipitation() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.Precipitation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Precipitation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  if (has_intensity()) {
    clear_intensity();
  }
  _impl_.~Impl_();
}

void Precipitation::clear_intensity() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.weather.Precipitation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.intensity_.relative_intensity_and_accuracy_;
      }
      break;
    }
    case kAbsoluteIntensityAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.intensity_.absolute_intensity_and_accuracy_;
      }
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INTENSITY_NOT_SET;
}


PROTOBUF_NOINLINE void Precipitation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.Precipitation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  clear_intensity();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Precipitation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 5, 0, 2> Precipitation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Precipitation, _impl_._has_bits_),
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Precipitation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.intensity_.relative_intensity_and_accuracy_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
    {PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.intensity_.absolute_intensity_and_accuracy_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* Precipitation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.Precipitation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  switch (intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::relative_intensity_and_accuracy(this),
          _Internal::relative_intensity_and_accuracy(this).GetCachedSize(), target, stream);
      break;
    }
    case kAbsoluteIntensityAndAccuracy: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::absolute_intensity_and_accuracy(this),
          _Internal::absolute_intensity_and_accuracy(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.Precipitation)
  return target;
}

::size_t Precipitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.Precipitation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

  }
  switch (intensity_case()) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    case kRelativeIntensityAndAccuracy: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.intensity_.relative_intensity_and_accuracy_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
    case kAbsoluteIntensityAndAccuracy: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.intensity_.absolute_intensity_and_accuracy_);
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Precipitation::_class_data_ = {
    Precipitation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Precipitation::GetClassData() const {
  return &_class_data_;
}

void Precipitation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Precipitation*>(&to_msg);
  auto& from = static_cast<const Precipitation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.Precipitation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
  }
  switch (from.intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      _this->_internal_mutable_relative_intensity_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_relative_intensity_and_accuracy());
      break;
    }
    case kAbsoluteIntensityAndAccuracy: {
      _this->_internal_mutable_absolute_intensity_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_absolute_intensity_and_accuracy());
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Precipitation::CopyFrom(const Precipitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.Precipitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Precipitation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Precipitation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Precipitation::InternalSwap(Precipitation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.type_and_confidence_)
      + sizeof(Precipitation::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(Precipitation, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
  swap(_impl_.intensity_, other->_impl_.intensity_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Precipitation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[1]);
}
// ===================================================================

class WeatherCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<WeatherCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope(const WeatherCategory* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::CategoryEnvelope& WeatherCategory::_Internal::envelope(const WeatherCategory* msg) {
  return *msg->_impl_.envelope_;
}
void WeatherCategory::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WeatherCategory::WeatherCategory(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.WeatherCategory)
}
inline PROTOBUF_NDEBUG_INLINE WeatherCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        precipitation_{visibility, arena, from.precipitation_} {}

WeatherCategory::WeatherCategory(
    ::google::protobuf::Arena* arena,
    const WeatherCategory& from)
    : ::google::protobuf::Message(arena) {
  WeatherCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.WeatherCategory)
}
inline PROTOBUF_NDEBUG_INLINE WeatherCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        precipitation_{visibility, arena} {}

inline void WeatherCategory::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
WeatherCategory::~WeatherCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.WeatherCategory)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WeatherCategory::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void WeatherCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.WeatherCategory)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.precipitation_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WeatherCategory::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> WeatherCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WeatherCategory_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.precipitation_)}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.envelope_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
    {PROTOBUF_FIELD_OFFSET(WeatherCategory, _impl_.precipitation_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::weather::Precipitation>()},
  }}, {{
  }},
};

::uint8_t* WeatherCategory::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_precipitation_size()); i < n; i++) {
    const auto& repfield = this->_internal_precipitation().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.WeatherCategory)
  return target;
}

::size_t WeatherCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  total_size += 1UL * this->_internal_precipitation_size();
  for (const auto& msg : this->_internal_precipitation()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WeatherCategory::_class_data_ = {
    WeatherCategory::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* WeatherCategory::GetClassData() const {
  return &_class_data_;
}

void WeatherCategory::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WeatherCategory*>(&to_msg);
  auto& from = static_cast<const WeatherCategory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_precipitation()->MergeFrom(
      from._internal_precipitation());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(
        from._internal_envelope());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WeatherCategory::CopyFrom(const WeatherCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.WeatherCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WeatherCategory::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* WeatherCategory::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void WeatherCategory::InternalSwap(WeatherCategory* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.precipitation_.InternalSwap(&other->_impl_.precipitation_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata WeatherCategory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2fweather_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
