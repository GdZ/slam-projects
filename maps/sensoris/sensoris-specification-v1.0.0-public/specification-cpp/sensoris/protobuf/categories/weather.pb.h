// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/weather.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2fcategories_2fweather_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
class Precipitation;
struct PrecipitationDefaultTypeInternal;
extern PrecipitationDefaultTypeInternal _Precipitation_default_instance_;
class Precipitation_TypeAndConfidence;
struct Precipitation_TypeAndConfidenceDefaultTypeInternal;
extern Precipitation_TypeAndConfidenceDefaultTypeInternal _Precipitation_TypeAndConfidence_default_instance_;
class WeatherCategory;
struct WeatherCategoryDefaultTypeInternal;
extern WeatherCategoryDefaultTypeInternal _WeatherCategory_default_instance_;
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
enum Precipitation_TypeAndConfidence_Type : int {
  Precipitation_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  Precipitation_TypeAndConfidence_Type_NONE = 1,
  Precipitation_TypeAndConfidence_Type_RAIN = 2,
  Precipitation_TypeAndConfidence_Type_MIXED_RAIN_SNOW = 3,
  Precipitation_TypeAndConfidence_Type_SNOW = 4,
  Precipitation_TypeAndConfidence_Type_HAIL = 5,
  Precipitation_TypeAndConfidence_Type_Precipitation_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Precipitation_TypeAndConfidence_Type_Precipitation_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Precipitation_TypeAndConfidence_Type_IsValid(int value);
extern const uint32_t Precipitation_TypeAndConfidence_Type_internal_data_[];
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence_Type_Type_MIN = static_cast<Precipitation_TypeAndConfidence_Type>(0);
constexpr Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence_Type_Type_MAX = static_cast<Precipitation_TypeAndConfidence_Type>(5);
constexpr int Precipitation_TypeAndConfidence_Type_Type_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Precipitation_TypeAndConfidence_Type_descriptor();
template <typename T>
const std::string& Precipitation_TypeAndConfidence_Type_Name(T value) {
  static_assert(std::is_same<T, Precipitation_TypeAndConfidence_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Precipitation_TypeAndConfidence_Type_Name(static_cast<Precipitation_TypeAndConfidence_Type>(value));
}
template <>
inline const std::string& Precipitation_TypeAndConfidence_Type_Name(Precipitation_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Precipitation_TypeAndConfidence_Type_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Precipitation_TypeAndConfidence_Type_Parse(absl::string_view name, Precipitation_TypeAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Precipitation_TypeAndConfidence_Type>(
      Precipitation_TypeAndConfidence_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Precipitation_TypeAndConfidence final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence) */ {
 public:
  inline Precipitation_TypeAndConfidence() : Precipitation_TypeAndConfidence(nullptr) {}
  ~Precipitation_TypeAndConfidence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Precipitation_TypeAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline Precipitation_TypeAndConfidence(const Precipitation_TypeAndConfidence& from)
      : Precipitation_TypeAndConfidence(nullptr, from) {}
  Precipitation_TypeAndConfidence(Precipitation_TypeAndConfidence&& from) noexcept
    : Precipitation_TypeAndConfidence() {
    *this = ::std::move(from);
  }

  inline Precipitation_TypeAndConfidence& operator=(const Precipitation_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Precipitation_TypeAndConfidence& operator=(Precipitation_TypeAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Precipitation_TypeAndConfidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Precipitation_TypeAndConfidence* internal_default_instance() {
    return reinterpret_cast<const Precipitation_TypeAndConfidence*>(
               &_Precipitation_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Precipitation_TypeAndConfidence& a, Precipitation_TypeAndConfidence& b) {
    a.Swap(&b);
  }
  inline void Swap(Precipitation_TypeAndConfidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Precipitation_TypeAndConfidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Precipitation_TypeAndConfidence* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Precipitation_TypeAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Precipitation_TypeAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Precipitation_TypeAndConfidence& from) {
    Precipitation_TypeAndConfidence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Precipitation_TypeAndConfidence* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence";
  }
  protected:
  explicit Precipitation_TypeAndConfidence(::google::protobuf::Arena* arena);
  Precipitation_TypeAndConfidence(::google::protobuf::Arena* arena, const Precipitation_TypeAndConfidence& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = Precipitation_TypeAndConfidence_Type;
  static constexpr Type UNKNOWN_TYPE = Precipitation_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static constexpr Type NONE = Precipitation_TypeAndConfidence_Type_NONE;
  static constexpr Type RAIN = Precipitation_TypeAndConfidence_Type_RAIN;
  static constexpr Type MIXED_RAIN_SNOW = Precipitation_TypeAndConfidence_Type_MIXED_RAIN_SNOW;
  static constexpr Type SNOW = Precipitation_TypeAndConfidence_Type_SNOW;
  static constexpr Type HAIL = Precipitation_TypeAndConfidence_Type_HAIL;
  static inline bool Type_IsValid(int value) {
    return Precipitation_TypeAndConfidence_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Precipitation_TypeAndConfidence_Type_Type_MIN;
  static constexpr Type Type_MAX = Precipitation_TypeAndConfidence_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Precipitation_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return Precipitation_TypeAndConfidence_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Precipitation_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Precipitation_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value);

  private:
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};// -------------------------------------------------------------------

class Precipitation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.Precipitation) */ {
 public:
  inline Precipitation() : Precipitation(nullptr) {}
  ~Precipitation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Precipitation(::google::protobuf::internal::ConstantInitialized);

  inline Precipitation(const Precipitation& from)
      : Precipitation(nullptr, from) {}
  Precipitation(Precipitation&& from) noexcept
    : Precipitation() {
    *this = ::std::move(from);
  }

  inline Precipitation& operator=(const Precipitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Precipitation& operator=(Precipitation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Precipitation& default_instance() {
    return *internal_default_instance();
  }
  enum IntensityCase {
    kRelativeIntensityAndAccuracy = 4,
    kAbsoluteIntensityAndAccuracy = 5,
    INTENSITY_NOT_SET = 0,
  };

  static inline const Precipitation* internal_default_instance() {
    return reinterpret_cast<const Precipitation*>(
               &_Precipitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Precipitation& a, Precipitation& b) {
    a.Swap(&b);
  }
  inline void Swap(Precipitation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Precipitation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Precipitation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Precipitation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Precipitation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Precipitation& from) {
    Precipitation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Precipitation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.weather.Precipitation";
  }
  protected:
  explicit Precipitation(::google::protobuf::Arena* arena);
  Precipitation(::google::protobuf::Arena* arena, const Precipitation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TypeAndConfidence = Precipitation_TypeAndConfidence;

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kDetectionStatusFieldNumber = 2,
    kTypeAndConfidenceFieldNumber = 3,
    kRelativeIntensityAndAccuracyFieldNumber = 4,
    kAbsoluteIntensityAndAccuracyFieldNumber = 5,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  bool has_detection_status() const;
  void clear_detection_status() ;
  const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventDetectionStatus* release_detection_status();
  ::sensoris::protobuf::types::base::EventDetectionStatus* mutable_detection_status();
  void set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* value);
  void unsafe_arena_set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* value);
  ::sensoris::protobuf::types::base::EventDetectionStatus* unsafe_arena_release_detection_status();

  private:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& _internal_detection_status() const;
  ::sensoris::protobuf::types::base::EventDetectionStatus* _internal_mutable_detection_status();

  public:
  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence() ;
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& type_and_confidence() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* release_type_and_confidence();
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* value);
  void unsafe_arena_set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* value);
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* unsafe_arena_release_type_and_confidence();

  private:
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& _internal_type_and_confidence() const;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* _internal_mutable_type_and_confidence();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_relative_intensity_and_accuracy() const;
  private:
  bool _internal_has_relative_intensity_and_accuracy() const;

  public:
  void clear_relative_intensity_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& relative_intensity_and_accuracy() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_relative_intensity_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_relative_intensity_and_accuracy();
  void set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  void unsafe_arena_set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_relative_intensity_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_relative_intensity_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _internal_mutable_relative_intensity_and_accuracy();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_absolute_intensity_and_accuracy() const;
  private:
  bool _internal_has_absolute_intensity_and_accuracy() const;

  public:
  void clear_absolute_intensity_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& absolute_intensity_and_accuracy() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_absolute_intensity_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_absolute_intensity_and_accuracy();
  void set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  void unsafe_arena_set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_absolute_intensity_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_absolute_intensity_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _internal_mutable_absolute_intensity_and_accuracy();

  public:
  void clear_intensity();
  IntensityCase intensity_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.Precipitation)
 private:
  class _Internal;
  void set_has_relative_intensity_and_accuracy();
  void set_has_absolute_intensity_and_accuracy();

  inline bool has_intensity() const;
  inline void clear_has_intensity();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status_;
    ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* type_and_confidence_;
    union IntensityUnion {
      constexpr IntensityUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* relative_intensity_and_accuracy_;
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* absolute_intensity_and_accuracy_;
    } intensity_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};// -------------------------------------------------------------------

class WeatherCategory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.WeatherCategory) */ {
 public:
  inline WeatherCategory() : WeatherCategory(nullptr) {}
  ~WeatherCategory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WeatherCategory(::google::protobuf::internal::ConstantInitialized);

  inline WeatherCategory(const WeatherCategory& from)
      : WeatherCategory(nullptr, from) {}
  WeatherCategory(WeatherCategory&& from) noexcept
    : WeatherCategory() {
    *this = ::std::move(from);
  }

  inline WeatherCategory& operator=(const WeatherCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeatherCategory& operator=(WeatherCategory&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeatherCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeatherCategory* internal_default_instance() {
    return reinterpret_cast<const WeatherCategory*>(
               &_WeatherCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WeatherCategory& a, WeatherCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(WeatherCategory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeatherCategory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeatherCategory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeatherCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WeatherCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WeatherCategory& from) {
    WeatherCategory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WeatherCategory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.weather.WeatherCategory";
  }
  protected:
  explicit WeatherCategory(::google::protobuf::Arena* arena);
  WeatherCategory(::google::protobuf::Arena* arena, const WeatherCategory& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrecipitationFieldNumber = 2,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  int precipitation_size() const;
  private:
  int _internal_precipitation_size() const;

  public:
  void clear_precipitation() ;
  ::sensoris::protobuf::categories::weather::Precipitation* mutable_precipitation(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation >*
      mutable_precipitation();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>& _internal_precipitation() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>* _internal_mutable_precipitation();
  public:
  const ::sensoris::protobuf::categories::weather::Precipitation& precipitation(int index) const;
  ::sensoris::protobuf::categories::weather::Precipitation* add_precipitation();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation >&
      precipitation() const;
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.WeatherCategory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation > precipitation_;
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fweather_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Precipitation_TypeAndConfidence

// .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
inline void Precipitation_TypeAndConfidence::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.type)
  return _internal_type();
}
inline void Precipitation_TypeAndConfidence::set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.type)
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type>(_impl_.type_);
}
inline void Precipitation_TypeAndConfidence::_internal_set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool Precipitation_TypeAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Confidence& Precipitation_TypeAndConfidence::_internal_confidence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& Precipitation_TypeAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
  return _internal_confidence();
}
inline void Precipitation_TypeAndConfidence::unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* Precipitation_TypeAndConfidence::release_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* Precipitation_TypeAndConfidence::unsafe_arena_release_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* Precipitation_TypeAndConfidence::_internal_mutable_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.confidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* Precipitation_TypeAndConfidence::mutable_confidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
  return _msg;
}
inline void Precipitation_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// Precipitation

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Precipitation::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Precipitation::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Precipitation::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.envelope)
  return _internal_envelope();
}
inline void Precipitation::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Precipitation::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Precipitation::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Precipitation::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Precipitation::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.envelope)
  return _msg;
}
inline void Precipitation::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.envelope)
}

// .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
inline bool Precipitation::has_detection_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detection_status_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& Precipitation::_internal_detection_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventDetectionStatus* p = _impl_.detection_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventDetectionStatus&>(::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& Precipitation::detection_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.detection_status)
  return _internal_detection_status();
}
inline void Precipitation::unsafe_arena_set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_status_);
  }
  _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.detection_status)
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* Precipitation::release_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* released = _impl_.detection_status_;
  _impl_.detection_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* Precipitation::unsafe_arena_release_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.detection_status)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = _impl_.detection_status_;
  _impl_.detection_status_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* Precipitation::_internal_mutable_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.detection_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(GetArena());
    _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(p);
  }
  return _impl_.detection_status_;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* Precipitation::mutable_detection_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventDetectionStatus* _msg = _internal_mutable_detection_status();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.detection_status)
  return _msg;
}
inline void Precipitation::set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.detection_status_ = reinterpret_cast<::sensoris::protobuf::types::base::EventDetectionStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.detection_status)
}

// .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
inline bool Precipitation::has_type_and_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_and_confidence_ != nullptr);
  return value;
}
inline void Precipitation::clear_type_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.type_and_confidence_ != nullptr) _impl_.type_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& Precipitation::_internal_type_and_confidence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* p = _impl_.type_and_confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence&>(::sensoris::protobuf::categories::weather::_Precipitation_TypeAndConfidence_default_instance_);
}
inline const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& Precipitation::type_and_confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
  return _internal_type_and_confidence();
}
inline void Precipitation::unsafe_arena_set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_and_confidence_);
  }
  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Precipitation::release_type_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* released = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Precipitation::unsafe_arena_release_type_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* temp = _impl_.type_and_confidence_;
  _impl_.type_and_confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Precipitation::_internal_mutable_type_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.type_and_confidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence>(GetArena());
    _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(p);
  }
  return _impl_.type_and_confidence_;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Precipitation::mutable_type_and_confidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* _msg = _internal_mutable_type_and_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
  return _msg;
}
inline void Precipitation::set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(_impl_.type_and_confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.type_and_confidence_ = reinterpret_cast<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool Precipitation::has_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy;
}
inline bool Precipitation::_internal_has_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy;
}
inline void Precipitation::set_has_relative_intensity_and_accuracy() {
  _impl_._oneof_case_[0] = kRelativeIntensityAndAccuracy;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::release_relative_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.relative_intensity_and_accuracy_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.intensity_.relative_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::_internal_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy ? *_impl_.intensity_.relative_intensity_and_accuracy_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::relative_intensity_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  return _internal_relative_intensity_and_accuracy();
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::unsafe_arena_release_relative_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  if (intensity_case() == kRelativeIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.relative_intensity_and_accuracy_;
    _impl_.intensity_.relative_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Precipitation::unsafe_arena_set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_intensity();
  if (value) {
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::_internal_mutable_relative_intensity_and_accuracy() {
  if (intensity_case() != kRelativeIntensityAndAccuracy) {
    clear_intensity();
    set_has_relative_intensity_and_accuracy();
    _impl_.intensity_.relative_intensity_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
  }
  return _impl_.intensity_.relative_intensity_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::mutable_relative_intensity_and_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_relative_intensity_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  return _msg;
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool Precipitation::has_absolute_intensity_and_accuracy() const {
  return intensity_case() == kAbsoluteIntensityAndAccuracy;
}
inline bool Precipitation::_internal_has_absolute_intensity_and_accuracy() const {
  return intensity_case() == kAbsoluteIntensityAndAccuracy;
}
inline void Precipitation::set_has_absolute_intensity_and_accuracy() {
  _impl_._oneof_case_[0] = kAbsoluteIntensityAndAccuracy;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::release_absolute_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  if (intensity_case() == kAbsoluteIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.absolute_intensity_and_accuracy_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.intensity_.absolute_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::_internal_absolute_intensity_and_accuracy() const {
  return intensity_case() == kAbsoluteIntensityAndAccuracy ? *_impl_.intensity_.absolute_intensity_and_accuracy_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::absolute_intensity_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  return _internal_absolute_intensity_and_accuracy();
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::unsafe_arena_release_absolute_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  if (intensity_case() == kAbsoluteIntensityAndAccuracy) {
    clear_has_intensity();
    auto* temp = _impl_.intensity_.absolute_intensity_and_accuracy_;
    _impl_.intensity_.absolute_intensity_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Precipitation::unsafe_arena_set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_intensity();
  if (value) {
    set_has_absolute_intensity_and_accuracy();
    _impl_.intensity_.absolute_intensity_and_accuracy_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::_internal_mutable_absolute_intensity_and_accuracy() {
  if (intensity_case() != kAbsoluteIntensityAndAccuracy) {
    clear_intensity();
    set_has_absolute_intensity_and_accuracy();
    _impl_.intensity_.absolute_intensity_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
  }
  return _impl_.intensity_.absolute_intensity_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::mutable_absolute_intensity_and_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_absolute_intensity_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  return _msg;
}

inline bool Precipitation::has_intensity() const {
  return intensity_case() != INTENSITY_NOT_SET;
}
inline void Precipitation::clear_has_intensity() {
  _impl_._oneof_case_[0] = INTENSITY_NOT_SET;
}
inline Precipitation::IntensityCase Precipitation::intensity_case() const {
  return Precipitation::IntensityCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// WeatherCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool WeatherCategory::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& WeatherCategory::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope&>(::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& WeatherCategory::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
  return _internal_envelope();
}
inline void WeatherCategory::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* WeatherCategory::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* WeatherCategory::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WeatherCategory.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* WeatherCategory::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* WeatherCategory::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::CategoryEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
  return _msg;
}
inline void WeatherCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
}

// repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
inline int WeatherCategory::_internal_precipitation_size() const {
  return _internal_precipitation().size();
}
inline int WeatherCategory::precipitation_size() const {
  return _internal_precipitation_size();
}
inline void WeatherCategory::clear_precipitation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.precipitation_.Clear();
}
inline ::sensoris::protobuf::categories::weather::Precipitation* WeatherCategory::mutable_precipitation(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return _internal_mutable_precipitation()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>* WeatherCategory::mutable_precipitation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_precipitation();
}
inline const ::sensoris::protobuf::categories::weather::Precipitation& WeatherCategory::precipitation(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return _internal_precipitation().Get(index);
}
inline ::sensoris::protobuf::categories::weather::Precipitation* WeatherCategory::add_precipitation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::weather::Precipitation* _add = _internal_mutable_precipitation()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>& WeatherCategory::precipitation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return _internal_precipitation();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>&
WeatherCategory::_internal_precipitation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.precipitation_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::weather::Precipitation>*
WeatherCategory::_internal_mutable_precipitation() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.precipitation_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fweather_2eproto_2epb_2eh
