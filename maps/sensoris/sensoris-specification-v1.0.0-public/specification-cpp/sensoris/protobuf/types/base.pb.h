// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/base.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "google/protobuf/descriptor.pb.h"
#include "google/protobuf/wrappers.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2ftypes_2fbase_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
namespace sensoris {
namespace protobuf {
namespace types {
namespace base {
class AbsoluteInt64Histogram;
struct AbsoluteInt64HistogramDefaultTypeInternal;
extern AbsoluteInt64HistogramDefaultTypeInternal _AbsoluteInt64Histogram_default_instance_;
class AbsoluteInt64Histogram_Bin;
struct AbsoluteInt64Histogram_BinDefaultTypeInternal;
extern AbsoluteInt64Histogram_BinDefaultTypeInternal _AbsoluteInt64Histogram_Bin_default_instance_;
class CategoryEnvelope;
struct CategoryEnvelopeDefaultTypeInternal;
extern CategoryEnvelopeDefaultTypeInternal _CategoryEnvelope_default_instance_;
class Confidence;
struct ConfidenceDefaultTypeInternal;
extern ConfidenceDefaultTypeInternal _Confidence_default_instance_;
class CountAndConfidence;
struct CountAndConfidenceDefaultTypeInternal;
extern CountAndConfidenceDefaultTypeInternal _CountAndConfidence_default_instance_;
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EventDetectionStatus;
struct EventDetectionStatusDefaultTypeInternal;
extern EventDetectionStatusDefaultTypeInternal _EventDetectionStatus_default_instance_;
class EventEnvelope;
struct EventEnvelopeDefaultTypeInternal;
extern EventEnvelopeDefaultTypeInternal _EventEnvelope_default_instance_;
class Int64GaussianDistribution;
struct Int64GaussianDistributionDefaultTypeInternal;
extern Int64GaussianDistributionDefaultTypeInternal _Int64GaussianDistribution_default_instance_;
class Int64Matrix3x3;
struct Int64Matrix3x3DefaultTypeInternal;
extern Int64Matrix3x3DefaultTypeInternal _Int64Matrix3x3_default_instance_;
class Int64StatisticMeasure;
struct Int64StatisticMeasureDefaultTypeInternal;
extern Int64StatisticMeasureDefaultTypeInternal _Int64StatisticMeasure_default_instance_;
class Int64StatisticMeasureAndAccuracy;
struct Int64StatisticMeasureAndAccuracyDefaultTypeInternal;
extern Int64StatisticMeasureAndAccuracyDefaultTypeInternal _Int64StatisticMeasureAndAccuracy_default_instance_;
class Int64Value;
struct Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class Int64ValueAndAccuracy;
struct Int64ValueAndAccuracyDefaultTypeInternal;
extern Int64ValueAndAccuracyDefaultTypeInternal _Int64ValueAndAccuracy_default_instance_;
class Int64ValueAndAccuracy_ValueAndAccuracy;
struct Int64ValueAndAccuracy_ValueAndAccuracyDefaultTypeInternal;
extern Int64ValueAndAccuracy_ValueAndAccuracyDefaultTypeInternal _Int64ValueAndAccuracy_ValueAndAccuracy_default_instance_;
class RelativeInt64Histogram;
struct RelativeInt64HistogramDefaultTypeInternal;
extern RelativeInt64HistogramDefaultTypeInternal _RelativeInt64Histogram_default_instance_;
class RelativeInt64Histogram_Bin;
struct RelativeInt64Histogram_BinDefaultTypeInternal;
extern RelativeInt64Histogram_BinDefaultTypeInternal _RelativeInt64Histogram_Bin_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class TimestampInterval;
struct TimestampIntervalDefaultTypeInternal;
extern TimestampIntervalDefaultTypeInternal _TimestampInterval_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace base
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace types {
namespace base {
enum EventDetectionStatus_Type : int {
  EventDetectionStatus_Type_UNKNOWN_TYPE = 0,
  EventDetectionStatus_Type_EXPECTED_AND_DETECTED = 1,
  EventDetectionStatus_Type_EXPECTED_AND_NOT_DETECTED = 2,
  EventDetectionStatus_Type_EXPECTED_AND_NOT_DETECTED_ACCESS_BLOCKED = 3,
  EventDetectionStatus_Type_EXPECTED_AND_NOT_DETECTED_ACCESS_AVAILABLE = 4,
  EventDetectionStatus_Type_NOT_EXPECTED_AND_DETECTED = 5,
  EventDetectionStatus_Type_EventDetectionStatus_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EventDetectionStatus_Type_EventDetectionStatus_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EventDetectionStatus_Type_IsValid(int value);
extern const uint32_t EventDetectionStatus_Type_internal_data_[];
constexpr EventDetectionStatus_Type EventDetectionStatus_Type_Type_MIN = static_cast<EventDetectionStatus_Type>(0);
constexpr EventDetectionStatus_Type EventDetectionStatus_Type_Type_MAX = static_cast<EventDetectionStatus_Type>(5);
constexpr int EventDetectionStatus_Type_Type_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
EventDetectionStatus_Type_descriptor();
template <typename T>
const std::string& EventDetectionStatus_Type_Name(T value) {
  static_assert(std::is_same<T, EventDetectionStatus_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return EventDetectionStatus_Type_Name(static_cast<EventDetectionStatus_Type>(value));
}
template <>
inline const std::string& EventDetectionStatus_Type_Name(EventDetectionStatus_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EventDetectionStatus_Type_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool EventDetectionStatus_Type_Parse(absl::string_view name, EventDetectionStatus_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventDetectionStatus_Type>(
      EventDetectionStatus_Type_descriptor(), name, value);
}
enum StatisticMeasureType : int {
  UNKNOWN_STATISTIC_MEASURE_TYPE = 0,
  MINIMUM = 1,
  MAXIMUM = 2,
  AVERAGE = 3,
  MEDIAN = 4,
  StatisticMeasureType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatisticMeasureType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatisticMeasureType_IsValid(int value);
extern const uint32_t StatisticMeasureType_internal_data_[];
constexpr StatisticMeasureType StatisticMeasureType_MIN = static_cast<StatisticMeasureType>(0);
constexpr StatisticMeasureType StatisticMeasureType_MAX = static_cast<StatisticMeasureType>(4);
constexpr int StatisticMeasureType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
StatisticMeasureType_descriptor();
template <typename T>
const std::string& StatisticMeasureType_Name(T value) {
  static_assert(std::is_same<T, StatisticMeasureType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatisticMeasureType_Name().");
  return StatisticMeasureType_Name(static_cast<StatisticMeasureType>(value));
}
template <>
inline const std::string& StatisticMeasureType_Name(StatisticMeasureType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatisticMeasureType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool StatisticMeasureType_Parse(absl::string_view name, StatisticMeasureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatisticMeasureType>(
      StatisticMeasureType_descriptor(), name, value);
}
enum SystemStatus : int {
  UNKNOWN_SYSTEM_STATUS = 0,
  ACTIVE = 1,
  INACTIVE = 2,
  DISABLED = 3,
  SystemStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SystemStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SystemStatus_IsValid(int value);
extern const uint32_t SystemStatus_internal_data_[];
constexpr SystemStatus SystemStatus_MIN = static_cast<SystemStatus>(0);
constexpr SystemStatus SystemStatus_MAX = static_cast<SystemStatus>(3);
constexpr int SystemStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
SystemStatus_descriptor();
template <typename T>
const std::string& SystemStatus_Name(T value) {
  static_assert(std::is_same<T, SystemStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SystemStatus_Name().");
  return SystemStatus_Name(static_cast<SystemStatus>(value));
}
template <>
inline const std::string& SystemStatus_Name(SystemStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SystemStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SystemStatus_Parse(absl::string_view name, SystemStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemStatus>(
      SystemStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Confidence final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Confidence) */ {
 public:
  inline Confidence() : Confidence(nullptr) {}
  ~Confidence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Confidence(::google::protobuf::internal::ConstantInitialized);

  inline Confidence(const Confidence& from)
      : Confidence(nullptr, from) {}
  Confidence(Confidence&& from) noexcept
    : Confidence() {
    *this = ::std::move(from);
  }

  inline Confidence& operator=(const Confidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Confidence& operator=(Confidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Confidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Confidence* internal_default_instance() {
    return reinterpret_cast<const Confidence*>(
               &_Confidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Confidence& a, Confidence& b) {
    a.Swap(&b);
  }
  inline void Swap(Confidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Confidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Confidence* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Confidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Confidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Confidence& from) {
    Confidence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Confidence* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Confidence";
  }
  protected:
  explicit Confidence(::google::protobuf::Arena* arena);
  Confidence(::google::protobuf::Arena* arena, const Confidence& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  void clear_value() ;
  ::int64_t value() const;
  void set_value(::int64_t value);

  private:
  ::int64_t _internal_value() const;
  void _internal_set_value(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Confidence)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Version final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Version(::google::protobuf::internal::ConstantInitialized);

  inline Version(const Version& from)
      : Version(nullptr, from) {}
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Version* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Version";
  }
  protected:
  explicit Version(::google::protobuf::Arena* arena);
  Version(::google::protobuf::Arena* arena, const Version& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
    kNameFieldNumber = 4,
  };
  // .google.protobuf.Int64Value major = 1;
  bool has_major() const;
  void clear_major() ;
  const ::google::protobuf::Int64Value& major() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_major();
  ::google::protobuf::Int64Value* mutable_major();
  void set_allocated_major(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_major(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_major();

  private:
  const ::google::protobuf::Int64Value& _internal_major() const;
  ::google::protobuf::Int64Value* _internal_mutable_major();

  public:
  // .google.protobuf.Int64Value minor = 2;
  bool has_minor() const;
  void clear_minor() ;
  const ::google::protobuf::Int64Value& minor() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_minor();
  ::google::protobuf::Int64Value* mutable_minor();
  void set_allocated_minor(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_minor(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_minor();

  private:
  const ::google::protobuf::Int64Value& _internal_minor() const;
  ::google::protobuf::Int64Value* _internal_mutable_minor();

  public:
  // .google.protobuf.Int64Value patch = 3;
  bool has_patch() const;
  void clear_patch() ;
  const ::google::protobuf::Int64Value& patch() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_patch();
  ::google::protobuf::Int64Value* mutable_patch();
  void set_allocated_patch(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_patch(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_patch();

  private:
  const ::google::protobuf::Int64Value& _internal_patch() const;
  ::google::protobuf::Int64Value* _internal_mutable_patch();

  public:
  // .google.protobuf.StringValue name = 4;
  bool has_name() const;
  void clear_name() ;
  const ::google::protobuf::StringValue& name() const;
  PROTOBUF_NODISCARD ::google::protobuf::StringValue* release_name();
  ::google::protobuf::StringValue* mutable_name();
  void set_allocated_name(::google::protobuf::StringValue* value);
  void unsafe_arena_set_allocated_name(::google::protobuf::StringValue* value);
  ::google::protobuf::StringValue* unsafe_arena_release_name();

  private:
  const ::google::protobuf::StringValue& _internal_name() const;
  ::google::protobuf::StringValue* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Version)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Int64Value* major_;
    ::google::protobuf::Int64Value* minor_;
    ::google::protobuf::Int64Value* patch_;
    ::google::protobuf::StringValue* name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Timestamp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Timestamp(::google::protobuf::internal::ConstantInitialized);

  inline Timestamp(const Timestamp& from)
      : Timestamp(nullptr, from) {}
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Timestamp& from) {
    Timestamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Timestamp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Timestamp";
  }
  protected:
  explicit Timestamp(::google::protobuf::Arena* arena);
  Timestamp(::google::protobuf::Arena* arena, const Timestamp& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosixTimeFieldNumber = 1,
    kPosixTimeFractionFieldNumber = 2,
  };
  // .google.protobuf.Int64Value posix_time = 1;
  bool has_posix_time() const;
  void clear_posix_time() ;
  const ::google::protobuf::Int64Value& posix_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_posix_time();
  ::google::protobuf::Int64Value* mutable_posix_time();
  void set_allocated_posix_time(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_posix_time(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_posix_time();

  private:
  const ::google::protobuf::Int64Value& _internal_posix_time() const;
  ::google::protobuf::Int64Value* _internal_mutable_posix_time();

  public:
  // .google.protobuf.Int64Value posix_time_fraction = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_posix_time_fraction() const;
  void clear_posix_time_fraction() ;
  const ::google::protobuf::Int64Value& posix_time_fraction() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_posix_time_fraction();
  ::google::protobuf::Int64Value* mutable_posix_time_fraction();
  void set_allocated_posix_time_fraction(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_posix_time_fraction(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_posix_time_fraction();

  private:
  const ::google::protobuf::Int64Value& _internal_posix_time_fraction() const;
  ::google::protobuf::Int64Value* _internal_mutable_posix_time_fraction();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Timestamp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Int64Value* posix_time_;
    ::google::protobuf::Int64Value* posix_time_fraction_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class RelativeInt64Histogram_Bin final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin) */ {
 public:
  inline RelativeInt64Histogram_Bin() : RelativeInt64Histogram_Bin(nullptr) {}
  ~RelativeInt64Histogram_Bin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RelativeInt64Histogram_Bin(::google::protobuf::internal::ConstantInitialized);

  inline RelativeInt64Histogram_Bin(const RelativeInt64Histogram_Bin& from)
      : RelativeInt64Histogram_Bin(nullptr, from) {}
  RelativeInt64Histogram_Bin(RelativeInt64Histogram_Bin&& from) noexcept
    : RelativeInt64Histogram_Bin() {
    *this = ::std::move(from);
  }

  inline RelativeInt64Histogram_Bin& operator=(const RelativeInt64Histogram_Bin& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelativeInt64Histogram_Bin& operator=(RelativeInt64Histogram_Bin&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelativeInt64Histogram_Bin& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelativeInt64Histogram_Bin* internal_default_instance() {
    return reinterpret_cast<const RelativeInt64Histogram_Bin*>(
               &_RelativeInt64Histogram_Bin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RelativeInt64Histogram_Bin& a, RelativeInt64Histogram_Bin& b) {
    a.Swap(&b);
  }
  inline void Swap(RelativeInt64Histogram_Bin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelativeInt64Histogram_Bin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelativeInt64Histogram_Bin* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelativeInt64Histogram_Bin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RelativeInt64Histogram_Bin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RelativeInt64Histogram_Bin& from) {
    RelativeInt64Histogram_Bin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RelativeInt64Histogram_Bin* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.RelativeInt64Histogram.Bin";
  }
  protected:
  explicit RelativeInt64Histogram_Bin(::google::protobuf::Arena* arena);
  RelativeInt64Histogram_Bin(::google::protobuf::Arena* arena, const RelativeInt64Histogram_Bin& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerEndpointInclusiveFieldNumber = 1,
    kRelativeFrequencyFieldNumber = 3,
  };
  // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
  bool has_lower_endpoint_inclusive() const;
  void clear_lower_endpoint_inclusive() ;
  const ::google::protobuf::Int64Value& lower_endpoint_inclusive() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_lower_endpoint_inclusive();
  ::google::protobuf::Int64Value* mutable_lower_endpoint_inclusive();
  void set_allocated_lower_endpoint_inclusive(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_lower_endpoint_inclusive(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_lower_endpoint_inclusive();

  private:
  const ::google::protobuf::Int64Value& _internal_lower_endpoint_inclusive() const;
  ::google::protobuf::Int64Value* _internal_mutable_lower_endpoint_inclusive();

  public:
  // .google.protobuf.Int64Value relative_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_relative_frequency() const;
  void clear_relative_frequency() ;
  const ::google::protobuf::Int64Value& relative_frequency() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_relative_frequency();
  ::google::protobuf::Int64Value* mutable_relative_frequency();
  void set_allocated_relative_frequency(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_relative_frequency(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_relative_frequency();

  private:
  const ::google::protobuf::Int64Value& _internal_relative_frequency() const;
  ::google::protobuf::Int64Value* _internal_mutable_relative_frequency();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Int64Value* lower_endpoint_inclusive_;
    ::google::protobuf::Int64Value* relative_frequency_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Int64ValueAndAccuracy_ValueAndAccuracy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy) */ {
 public:
  inline Int64ValueAndAccuracy_ValueAndAccuracy() : Int64ValueAndAccuracy_ValueAndAccuracy(nullptr) {}
  ~Int64ValueAndAccuracy_ValueAndAccuracy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int64ValueAndAccuracy_ValueAndAccuracy(::google::protobuf::internal::ConstantInitialized);

  inline Int64ValueAndAccuracy_ValueAndAccuracy(const Int64ValueAndAccuracy_ValueAndAccuracy& from)
      : Int64ValueAndAccuracy_ValueAndAccuracy(nullptr, from) {}
  Int64ValueAndAccuracy_ValueAndAccuracy(Int64ValueAndAccuracy_ValueAndAccuracy&& from) noexcept
    : Int64ValueAndAccuracy_ValueAndAccuracy() {
    *this = ::std::move(from);
  }

  inline Int64ValueAndAccuracy_ValueAndAccuracy& operator=(const Int64ValueAndAccuracy_ValueAndAccuracy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64ValueAndAccuracy_ValueAndAccuracy& operator=(Int64ValueAndAccuracy_ValueAndAccuracy&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64ValueAndAccuracy_ValueAndAccuracy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64ValueAndAccuracy_ValueAndAccuracy* internal_default_instance() {
    return reinterpret_cast<const Int64ValueAndAccuracy_ValueAndAccuracy*>(
               &_Int64ValueAndAccuracy_ValueAndAccuracy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Int64ValueAndAccuracy_ValueAndAccuracy& a, Int64ValueAndAccuracy_ValueAndAccuracy& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64ValueAndAccuracy_ValueAndAccuracy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64ValueAndAccuracy_ValueAndAccuracy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64ValueAndAccuracy_ValueAndAccuracy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64ValueAndAccuracy_ValueAndAccuracy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int64ValueAndAccuracy_ValueAndAccuracy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int64ValueAndAccuracy_ValueAndAccuracy& from) {
    Int64ValueAndAccuracy_ValueAndAccuracy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Int64ValueAndAccuracy_ValueAndAccuracy* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy";
  }
  protected:
  explicit Int64ValueAndAccuracy_ValueAndAccuracy(::google::protobuf::Arena* arena);
  Int64ValueAndAccuracy_ValueAndAccuracy(::google::protobuf::Arena* arena, const Int64ValueAndAccuracy_ValueAndAccuracy& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccuracyFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // .google.protobuf.Int64Value accuracy = 2;
  bool has_accuracy() const;
  void clear_accuracy() ;
  const ::google::protobuf::Int64Value& accuracy() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_accuracy();
  ::google::protobuf::Int64Value* mutable_accuracy();
  void set_allocated_accuracy(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_accuracy(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_accuracy();

  private:
  const ::google::protobuf::Int64Value& _internal_accuracy() const;
  ::google::protobuf::Int64Value* _internal_mutable_accuracy();

  public:
  // int64 value = 1;
  void clear_value() ;
  ::int64_t value() const;
  void set_value(::int64_t value);

  private:
  ::int64_t _internal_value() const;
  void _internal_set_value(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Int64Value* accuracy_;
    ::int64_t value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Int64Matrix3x3 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Int64Matrix3x3) */ {
 public:
  inline Int64Matrix3x3() : Int64Matrix3x3(nullptr) {}
  ~Int64Matrix3x3() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int64Matrix3x3(::google::protobuf::internal::ConstantInitialized);

  inline Int64Matrix3x3(const Int64Matrix3x3& from)
      : Int64Matrix3x3(nullptr, from) {}
  Int64Matrix3x3(Int64Matrix3x3&& from) noexcept
    : Int64Matrix3x3() {
    *this = ::std::move(from);
  }

  inline Int64Matrix3x3& operator=(const Int64Matrix3x3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Matrix3x3& operator=(Int64Matrix3x3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Matrix3x3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Matrix3x3* internal_default_instance() {
    return reinterpret_cast<const Int64Matrix3x3*>(
               &_Int64Matrix3x3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Int64Matrix3x3& a, Int64Matrix3x3& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Matrix3x3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Matrix3x3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Matrix3x3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Matrix3x3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int64Matrix3x3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int64Matrix3x3& from) {
    Int64Matrix3x3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Int64Matrix3x3* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Int64Matrix3x3";
  }
  protected:
  explicit Int64Matrix3x3(::google::protobuf::Arena* arena);
  Int64Matrix3x3(::google::protobuf::Arena* arena, const Int64Matrix3x3& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kA11FieldNumber = 1,
    kA12FieldNumber = 2,
    kA13FieldNumber = 3,
    kA21FieldNumber = 4,
    kA22FieldNumber = 5,
    kA23FieldNumber = 6,
    kA31FieldNumber = 7,
    kA32FieldNumber = 8,
    kA33FieldNumber = 9,
  };
  // .google.protobuf.Int64Value a11 = 1;
  bool has_a11() const;
  void clear_a11() ;
  const ::google::protobuf::Int64Value& a11() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a11();
  ::google::protobuf::Int64Value* mutable_a11();
  void set_allocated_a11(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a11(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a11();

  private:
  const ::google::protobuf::Int64Value& _internal_a11() const;
  ::google::protobuf::Int64Value* _internal_mutable_a11();

  public:
  // .google.protobuf.Int64Value a12 = 2;
  bool has_a12() const;
  void clear_a12() ;
  const ::google::protobuf::Int64Value& a12() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a12();
  ::google::protobuf::Int64Value* mutable_a12();
  void set_allocated_a12(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a12(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a12();

  private:
  const ::google::protobuf::Int64Value& _internal_a12() const;
  ::google::protobuf::Int64Value* _internal_mutable_a12();

  public:
  // .google.protobuf.Int64Value a13 = 3;
  bool has_a13() const;
  void clear_a13() ;
  const ::google::protobuf::Int64Value& a13() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a13();
  ::google::protobuf::Int64Value* mutable_a13();
  void set_allocated_a13(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a13(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a13();

  private:
  const ::google::protobuf::Int64Value& _internal_a13() const;
  ::google::protobuf::Int64Value* _internal_mutable_a13();

  public:
  // .google.protobuf.Int64Value a21 = 4;
  bool has_a21() const;
  void clear_a21() ;
  const ::google::protobuf::Int64Value& a21() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a21();
  ::google::protobuf::Int64Value* mutable_a21();
  void set_allocated_a21(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a21(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a21();

  private:
  const ::google::protobuf::Int64Value& _internal_a21() const;
  ::google::protobuf::Int64Value* _internal_mutable_a21();

  public:
  // .google.protobuf.Int64Value a22 = 5;
  bool has_a22() const;
  void clear_a22() ;
  const ::google::protobuf::Int64Value& a22() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a22();
  ::google::protobuf::Int64Value* mutable_a22();
  void set_allocated_a22(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a22(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a22();

  private:
  const ::google::protobuf::Int64Value& _internal_a22() const;
  ::google::protobuf::Int64Value* _internal_mutable_a22();

  public:
  // .google.protobuf.Int64Value a23 = 6;
  bool has_a23() const;
  void clear_a23() ;
  const ::google::protobuf::Int64Value& a23() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a23();
  ::google::protobuf::Int64Value* mutable_a23();
  void set_allocated_a23(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a23(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a23();

  private:
  const ::google::protobuf::Int64Value& _internal_a23() const;
  ::google::protobuf::Int64Value* _internal_mutable_a23();

  public:
  // .google.protobuf.Int64Value a31 = 7;
  bool has_a31() const;
  void clear_a31() ;
  const ::google::protobuf::Int64Value& a31() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a31();
  ::google::protobuf::Int64Value* mutable_a31();
  void set_allocated_a31(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a31(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a31();

  private:
  const ::google::protobuf::Int64Value& _internal_a31() const;
  ::google::protobuf::Int64Value* _internal_mutable_a31();

  public:
  // .google.protobuf.Int64Value a32 = 8;
  bool has_a32() const;
  void clear_a32() ;
  const ::google::protobuf::Int64Value& a32() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a32();
  ::google::protobuf::Int64Value* mutable_a32();
  void set_allocated_a32(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a32(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a32();

  private:
  const ::google::protobuf::Int64Value& _internal_a32() const;
  ::google::protobuf::Int64Value* _internal_mutable_a32();

  public:
  // .google.protobuf.Int64Value a33 = 9;
  bool has_a33() const;
  void clear_a33() ;
  const ::google::protobuf::Int64Value& a33() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_a33();
  ::google::protobuf::Int64Value* mutable_a33();
  void set_allocated_a33(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_a33(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_a33();

  private:
  const ::google::protobuf::Int64Value& _internal_a33() const;
  ::google::protobuf::Int64Value* _internal_mutable_a33();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Int64Matrix3x3)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 9,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Int64Value* a11_;
    ::google::protobuf::Int64Value* a12_;
    ::google::protobuf::Int64Value* a13_;
    ::google::protobuf::Int64Value* a21_;
    ::google::protobuf::Int64Value* a22_;
    ::google::protobuf::Int64Value* a23_;
    ::google::protobuf::Int64Value* a31_;
    ::google::protobuf::Int64Value* a32_;
    ::google::protobuf::Int64Value* a33_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class EventDetectionStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.EventDetectionStatus) */ {
 public:
  inline EventDetectionStatus() : EventDetectionStatus(nullptr) {}
  ~EventDetectionStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventDetectionStatus(::google::protobuf::internal::ConstantInitialized);

  inline EventDetectionStatus(const EventDetectionStatus& from)
      : EventDetectionStatus(nullptr, from) {}
  EventDetectionStatus(EventDetectionStatus&& from) noexcept
    : EventDetectionStatus() {
    *this = ::std::move(from);
  }

  inline EventDetectionStatus& operator=(const EventDetectionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDetectionStatus& operator=(EventDetectionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventDetectionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventDetectionStatus* internal_default_instance() {
    return reinterpret_cast<const EventDetectionStatus*>(
               &_EventDetectionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EventDetectionStatus& a, EventDetectionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDetectionStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDetectionStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventDetectionStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventDetectionStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventDetectionStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EventDetectionStatus& from) {
    EventDetectionStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EventDetectionStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.EventDetectionStatus";
  }
  protected:
  explicit EventDetectionStatus(::google::protobuf::Arena* arena);
  EventDetectionStatus(::google::protobuf::Arena* arena, const EventDetectionStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = EventDetectionStatus_Type;
  static constexpr Type UNKNOWN_TYPE = EventDetectionStatus_Type_UNKNOWN_TYPE;
  static constexpr Type EXPECTED_AND_DETECTED = EventDetectionStatus_Type_EXPECTED_AND_DETECTED;
  static constexpr Type EXPECTED_AND_NOT_DETECTED = EventDetectionStatus_Type_EXPECTED_AND_NOT_DETECTED;
  static constexpr Type EXPECTED_AND_NOT_DETECTED_ACCESS_BLOCKED = EventDetectionStatus_Type_EXPECTED_AND_NOT_DETECTED_ACCESS_BLOCKED;
  static constexpr Type EXPECTED_AND_NOT_DETECTED_ACCESS_AVAILABLE = EventDetectionStatus_Type_EXPECTED_AND_NOT_DETECTED_ACCESS_AVAILABLE;
  static constexpr Type NOT_EXPECTED_AND_DETECTED = EventDetectionStatus_Type_NOT_EXPECTED_AND_DETECTED;
  static inline bool Type_IsValid(int value) {
    return EventDetectionStatus_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = EventDetectionStatus_Type_Type_MIN;
  static constexpr Type Type_MAX = EventDetectionStatus_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = EventDetectionStatus_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return EventDetectionStatus_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return EventDetectionStatus_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return EventDetectionStatus_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* _internal_mutable_confidence();

  public:
  // .sensoris.protobuf.types.base.EventDetectionStatus.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::types::base::EventDetectionStatus_Type type() const;
  void set_type(::sensoris::protobuf::types::base::EventDetectionStatus_Type value);

  private:
  ::sensoris::protobuf::types::base::EventDetectionStatus_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::types::base::EventDetectionStatus_Type value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.EventDetectionStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Confidence* confidence_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class CountAndConfidence final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.CountAndConfidence) */ {
 public:
  inline CountAndConfidence() : CountAndConfidence(nullptr) {}
  ~CountAndConfidence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CountAndConfidence(::google::protobuf::internal::ConstantInitialized);

  inline CountAndConfidence(const CountAndConfidence& from)
      : CountAndConfidence(nullptr, from) {}
  CountAndConfidence(CountAndConfidence&& from) noexcept
    : CountAndConfidence() {
    *this = ::std::move(from);
  }

  inline CountAndConfidence& operator=(const CountAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountAndConfidence& operator=(CountAndConfidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CountAndConfidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountAndConfidence* internal_default_instance() {
    return reinterpret_cast<const CountAndConfidence*>(
               &_CountAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CountAndConfidence& a, CountAndConfidence& b) {
    a.Swap(&b);
  }
  inline void Swap(CountAndConfidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountAndConfidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CountAndConfidence* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CountAndConfidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CountAndConfidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CountAndConfidence& from) {
    CountAndConfidence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CountAndConfidence* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.CountAndConfidence";
  }
  protected:
  explicit CountAndConfidence(::google::protobuf::Arena* arena);
  CountAndConfidence(::google::protobuf::Arena* arena, const CountAndConfidence& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // .google.protobuf.Int64Value count = 1;
  bool has_count() const;
  void clear_count() ;
  const ::google::protobuf::Int64Value& count() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_count();
  ::google::protobuf::Int64Value* mutable_count();
  void set_allocated_count(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_count(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_count();

  private:
  const ::google::protobuf::Int64Value& _internal_count() const;
  ::google::protobuf::Int64Value* _internal_mutable_count();

  public:
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence() ;
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value);
  void unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* _internal_mutable_confidence();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.CountAndConfidence)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Int64Value* count_;
    ::sensoris::protobuf::types::base::Confidence* confidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class CategoryEnvelope final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.CategoryEnvelope) */ {
 public:
  inline CategoryEnvelope() : CategoryEnvelope(nullptr) {}
  ~CategoryEnvelope() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CategoryEnvelope(::google::protobuf::internal::ConstantInitialized);

  inline CategoryEnvelope(const CategoryEnvelope& from)
      : CategoryEnvelope(nullptr, from) {}
  CategoryEnvelope(CategoryEnvelope&& from) noexcept
    : CategoryEnvelope() {
    *this = ::std::move(from);
  }

  inline CategoryEnvelope& operator=(const CategoryEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryEnvelope& operator=(CategoryEnvelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryEnvelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryEnvelope* internal_default_instance() {
    return reinterpret_cast<const CategoryEnvelope*>(
               &_CategoryEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CategoryEnvelope& a, CategoryEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryEnvelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryEnvelope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoryEnvelope* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoryEnvelope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CategoryEnvelope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CategoryEnvelope& from) {
    CategoryEnvelope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CategoryEnvelope* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.CategoryEnvelope";
  }
  protected:
  explicit CategoryEnvelope(::google::protobuf::Arena* arena);
  CategoryEnvelope(::google::protobuf::Arena* arena, const CategoryEnvelope& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 15,
  };
  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension();
  public:
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.CategoryEnvelope)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class AbsoluteInt64Histogram_Bin final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin) */ {
 public:
  inline AbsoluteInt64Histogram_Bin() : AbsoluteInt64Histogram_Bin(nullptr) {}
  ~AbsoluteInt64Histogram_Bin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AbsoluteInt64Histogram_Bin(::google::protobuf::internal::ConstantInitialized);

  inline AbsoluteInt64Histogram_Bin(const AbsoluteInt64Histogram_Bin& from)
      : AbsoluteInt64Histogram_Bin(nullptr, from) {}
  AbsoluteInt64Histogram_Bin(AbsoluteInt64Histogram_Bin&& from) noexcept
    : AbsoluteInt64Histogram_Bin() {
    *this = ::std::move(from);
  }

  inline AbsoluteInt64Histogram_Bin& operator=(const AbsoluteInt64Histogram_Bin& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbsoluteInt64Histogram_Bin& operator=(AbsoluteInt64Histogram_Bin&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbsoluteInt64Histogram_Bin& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbsoluteInt64Histogram_Bin* internal_default_instance() {
    return reinterpret_cast<const AbsoluteInt64Histogram_Bin*>(
               &_AbsoluteInt64Histogram_Bin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AbsoluteInt64Histogram_Bin& a, AbsoluteInt64Histogram_Bin& b) {
    a.Swap(&b);
  }
  inline void Swap(AbsoluteInt64Histogram_Bin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbsoluteInt64Histogram_Bin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbsoluteInt64Histogram_Bin* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbsoluteInt64Histogram_Bin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AbsoluteInt64Histogram_Bin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AbsoluteInt64Histogram_Bin& from) {
    AbsoluteInt64Histogram_Bin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AbsoluteInt64Histogram_Bin* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin";
  }
  protected:
  explicit AbsoluteInt64Histogram_Bin(::google::protobuf::Arena* arena);
  AbsoluteInt64Histogram_Bin(::google::protobuf::Arena* arena, const AbsoluteInt64Histogram_Bin& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerEndpointInclusiveFieldNumber = 1,
    kFrequencyFieldNumber = 2,
  };
  // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
  bool has_lower_endpoint_inclusive() const;
  void clear_lower_endpoint_inclusive() ;
  const ::google::protobuf::Int64Value& lower_endpoint_inclusive() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_lower_endpoint_inclusive();
  ::google::protobuf::Int64Value* mutable_lower_endpoint_inclusive();
  void set_allocated_lower_endpoint_inclusive(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_lower_endpoint_inclusive(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_lower_endpoint_inclusive();

  private:
  const ::google::protobuf::Int64Value& _internal_lower_endpoint_inclusive() const;
  ::google::protobuf::Int64Value* _internal_mutable_lower_endpoint_inclusive();

  public:
  // .google.protobuf.Int64Value frequency = 2;
  bool has_frequency() const;
  void clear_frequency() ;
  const ::google::protobuf::Int64Value& frequency() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_frequency();
  ::google::protobuf::Int64Value* mutable_frequency();
  void set_allocated_frequency(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_frequency(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_frequency();

  private:
  const ::google::protobuf::Int64Value& _internal_frequency() const;
  ::google::protobuf::Int64Value* _internal_mutable_frequency();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Int64Value* lower_endpoint_inclusive_;
    ::google::protobuf::Int64Value* frequency_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class TimestampInterval final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.TimestampInterval) */ {
 public:
  inline TimestampInterval() : TimestampInterval(nullptr) {}
  ~TimestampInterval() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimestampInterval(::google::protobuf::internal::ConstantInitialized);

  inline TimestampInterval(const TimestampInterval& from)
      : TimestampInterval(nullptr, from) {}
  TimestampInterval(TimestampInterval&& from) noexcept
    : TimestampInterval() {
    *this = ::std::move(from);
  }

  inline TimestampInterval& operator=(const TimestampInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampInterval& operator=(TimestampInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimestampInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimestampInterval* internal_default_instance() {
    return reinterpret_cast<const TimestampInterval*>(
               &_TimestampInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimestampInterval& a, TimestampInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimestampInterval* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimestampInterval* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimestampInterval>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimestampInterval& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TimestampInterval& from) {
    TimestampInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TimestampInterval* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.TimestampInterval";
  }
  protected:
  explicit TimestampInterval(::google::protobuf::Arena* arena);
  TimestampInterval(::google::protobuf::Arena* arena, const TimestampInterval& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartInclusiveFieldNumber = 1,
    kEndExclusiveFieldNumber = 2,
  };
  // .sensoris.protobuf.types.base.Timestamp start_inclusive = 1;
  bool has_start_inclusive() const;
  void clear_start_inclusive() ;
  const ::sensoris::protobuf::types::base::Timestamp& start_inclusive() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Timestamp* release_start_inclusive();
  ::sensoris::protobuf::types::base::Timestamp* mutable_start_inclusive();
  void set_allocated_start_inclusive(::sensoris::protobuf::types::base::Timestamp* value);
  void unsafe_arena_set_allocated_start_inclusive(::sensoris::protobuf::types::base::Timestamp* value);
  ::sensoris::protobuf::types::base::Timestamp* unsafe_arena_release_start_inclusive();

  private:
  const ::sensoris::protobuf::types::base::Timestamp& _internal_start_inclusive() const;
  ::sensoris::protobuf::types::base::Timestamp* _internal_mutable_start_inclusive();

  public:
  // .sensoris.protobuf.types.base.Timestamp end_exclusive = 2;
  bool has_end_exclusive() const;
  void clear_end_exclusive() ;
  const ::sensoris::protobuf::types::base::Timestamp& end_exclusive() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Timestamp* release_end_exclusive();
  ::sensoris::protobuf::types::base::Timestamp* mutable_end_exclusive();
  void set_allocated_end_exclusive(::sensoris::protobuf::types::base::Timestamp* value);
  void unsafe_arena_set_allocated_end_exclusive(::sensoris::protobuf::types::base::Timestamp* value);
  ::sensoris::protobuf::types::base::Timestamp* unsafe_arena_release_end_exclusive();

  private:
  const ::sensoris::protobuf::types::base::Timestamp& _internal_end_exclusive() const;
  ::sensoris::protobuf::types::base::Timestamp* _internal_mutable_end_exclusive();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.TimestampInterval)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::Timestamp* start_inclusive_;
    ::sensoris::protobuf::types::base::Timestamp* end_exclusive_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class EventEnvelope final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.EventEnvelope) */ {
 public:
  inline EventEnvelope() : EventEnvelope(nullptr) {}
  ~EventEnvelope() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventEnvelope(::google::protobuf::internal::ConstantInitialized);

  inline EventEnvelope(const EventEnvelope& from)
      : EventEnvelope(nullptr, from) {}
  EventEnvelope(EventEnvelope&& from) noexcept
    : EventEnvelope() {
    *this = ::std::move(from);
  }

  inline EventEnvelope& operator=(const EventEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventEnvelope& operator=(EventEnvelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventEnvelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventEnvelope* internal_default_instance() {
    return reinterpret_cast<const EventEnvelope*>(
               &_EventEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventEnvelope& a, EventEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(EventEnvelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventEnvelope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventEnvelope* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventEnvelope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventEnvelope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EventEnvelope& from) {
    EventEnvelope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EventEnvelope* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.EventEnvelope";
  }
  protected:
  explicit EventEnvelope(::google::protobuf::Arena* arena);
  EventEnvelope(::google::protobuf::Arena* arena, const EventEnvelope& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 15,
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension();
  public:
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;
  // .google.protobuf.Int64Value id = 1;
  bool has_id() const;
  void clear_id() ;
  const ::google::protobuf::Int64Value& id() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_id();
  ::google::protobuf::Int64Value* mutable_id();
  void set_allocated_id(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_id(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_id();

  private:
  const ::google::protobuf::Int64Value& _internal_id() const;
  ::google::protobuf::Int64Value* _internal_mutable_id();

  public:
  // .sensoris.protobuf.types.base.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::sensoris::protobuf::types::base::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Timestamp* release_timestamp();
  ::sensoris::protobuf::types::base::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::sensoris::protobuf::types::base::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::sensoris::protobuf::types::base::Timestamp* value);
  ::sensoris::protobuf::types::base::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::sensoris::protobuf::types::base::Timestamp& _internal_timestamp() const;
  ::sensoris::protobuf::types::base::Timestamp* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.EventEnvelope)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
    ::google::protobuf::Int64Value* id_;
    ::sensoris::protobuf::types::base::Timestamp* timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Entity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Entity(::google::protobuf::internal::ConstantInitialized);

  inline Entity(const Entity& from)
      : Entity(nullptr, from) {}
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Entity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Entity& from) {
    Entity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Entity* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Entity";
  }
  protected:
  explicit Entity(::google::protobuf::Arena* arena);
  Entity(::google::protobuf::Arena* arena, const Entity& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 15,
    kPrimaryIdFieldNumber = 1,
    kSecondaryIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSoftwareVersionFieldNumber = 4,
    kHardwareVersionFieldNumber = 5,
  };
  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension();
  public:
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;
  // .google.protobuf.StringValue primary_id = 1;
  bool has_primary_id() const;
  void clear_primary_id() ;
  const ::google::protobuf::StringValue& primary_id() const;
  PROTOBUF_NODISCARD ::google::protobuf::StringValue* release_primary_id();
  ::google::protobuf::StringValue* mutable_primary_id();
  void set_allocated_primary_id(::google::protobuf::StringValue* value);
  void unsafe_arena_set_allocated_primary_id(::google::protobuf::StringValue* value);
  ::google::protobuf::StringValue* unsafe_arena_release_primary_id();

  private:
  const ::google::protobuf::StringValue& _internal_primary_id() const;
  ::google::protobuf::StringValue* _internal_mutable_primary_id();

  public:
  // .google.protobuf.StringValue secondary_id = 2;
  bool has_secondary_id() const;
  void clear_secondary_id() ;
  const ::google::protobuf::StringValue& secondary_id() const;
  PROTOBUF_NODISCARD ::google::protobuf::StringValue* release_secondary_id();
  ::google::protobuf::StringValue* mutable_secondary_id();
  void set_allocated_secondary_id(::google::protobuf::StringValue* value);
  void unsafe_arena_set_allocated_secondary_id(::google::protobuf::StringValue* value);
  ::google::protobuf::StringValue* unsafe_arena_release_secondary_id();

  private:
  const ::google::protobuf::StringValue& _internal_secondary_id() const;
  ::google::protobuf::StringValue* _internal_mutable_secondary_id();

  public:
  // .google.protobuf.StringValue type = 3;
  bool has_type() const;
  void clear_type() ;
  const ::google::protobuf::StringValue& type() const;
  PROTOBUF_NODISCARD ::google::protobuf::StringValue* release_type();
  ::google::protobuf::StringValue* mutable_type();
  void set_allocated_type(::google::protobuf::StringValue* value);
  void unsafe_arena_set_allocated_type(::google::protobuf::StringValue* value);
  ::google::protobuf::StringValue* unsafe_arena_release_type();

  private:
  const ::google::protobuf::StringValue& _internal_type() const;
  ::google::protobuf::StringValue* _internal_mutable_type();

  public:
  // .sensoris.protobuf.types.base.Version software_version = 4;
  bool has_software_version() const;
  void clear_software_version() ;
  const ::sensoris::protobuf::types::base::Version& software_version() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Version* release_software_version();
  ::sensoris::protobuf::types::base::Version* mutable_software_version();
  void set_allocated_software_version(::sensoris::protobuf::types::base::Version* value);
  void unsafe_arena_set_allocated_software_version(::sensoris::protobuf::types::base::Version* value);
  ::sensoris::protobuf::types::base::Version* unsafe_arena_release_software_version();

  private:
  const ::sensoris::protobuf::types::base::Version& _internal_software_version() const;
  ::sensoris::protobuf::types::base::Version* _internal_mutable_software_version();

  public:
  // .sensoris.protobuf.types.base.Version hardware_version = 5;
  bool has_hardware_version() const;
  void clear_hardware_version() ;
  const ::sensoris::protobuf::types::base::Version& hardware_version() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Version* release_hardware_version();
  ::sensoris::protobuf::types::base::Version* mutable_hardware_version();
  void set_allocated_hardware_version(::sensoris::protobuf::types::base::Version* value);
  void unsafe_arena_set_allocated_hardware_version(::sensoris::protobuf::types::base::Version* value);
  ::sensoris::protobuf::types::base::Version* unsafe_arena_release_hardware_version();

  private:
  const ::sensoris::protobuf::types::base::Version& _internal_hardware_version() const;
  ::sensoris::protobuf::types::base::Version* _internal_mutable_hardware_version();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Entity)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
    ::google::protobuf::StringValue* primary_id_;
    ::google::protobuf::StringValue* secondary_id_;
    ::google::protobuf::StringValue* type_;
    ::sensoris::protobuf::types::base::Version* software_version_;
    ::sensoris::protobuf::types::base::Version* hardware_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class RelativeInt64Histogram final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.RelativeInt64Histogram) */ {
 public:
  inline RelativeInt64Histogram() : RelativeInt64Histogram(nullptr) {}
  ~RelativeInt64Histogram() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RelativeInt64Histogram(::google::protobuf::internal::ConstantInitialized);

  inline RelativeInt64Histogram(const RelativeInt64Histogram& from)
      : RelativeInt64Histogram(nullptr, from) {}
  RelativeInt64Histogram(RelativeInt64Histogram&& from) noexcept
    : RelativeInt64Histogram() {
    *this = ::std::move(from);
  }

  inline RelativeInt64Histogram& operator=(const RelativeInt64Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelativeInt64Histogram& operator=(RelativeInt64Histogram&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelativeInt64Histogram& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelativeInt64Histogram* internal_default_instance() {
    return reinterpret_cast<const RelativeInt64Histogram*>(
               &_RelativeInt64Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RelativeInt64Histogram& a, RelativeInt64Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(RelativeInt64Histogram* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelativeInt64Histogram* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelativeInt64Histogram* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelativeInt64Histogram>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RelativeInt64Histogram& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RelativeInt64Histogram& from) {
    RelativeInt64Histogram::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RelativeInt64Histogram* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.RelativeInt64Histogram";
  }
  protected:
  explicit RelativeInt64Histogram(::google::protobuf::Arena* arena);
  RelativeInt64Histogram(::google::protobuf::Arena* arena, const RelativeInt64Histogram& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Bin = RelativeInt64Histogram_Bin;

  // accessors -------------------------------------------------------

  enum : int {
    kBinFieldNumber = 3,
    kTimestampIntervalFieldNumber = 1,
    kTotalElementsFieldNumber = 2,
    kUpperEndpointInclusiveFieldNumber = 4,
  };
  // repeated .sensoris.protobuf.types.base.RelativeInt64Histogram.Bin bin = 3;
  int bin_size() const;
  private:
  int _internal_bin_size() const;

  public:
  void clear_bin() ;
  ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin* mutable_bin(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin >*
      mutable_bin();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin>& _internal_bin() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin>* _internal_mutable_bin();
  public:
  const ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin& bin(int index) const;
  ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin* add_bin();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin >&
      bin() const;
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  bool has_timestamp_interval() const;
  void clear_timestamp_interval() ;
  const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::TimestampInterval* release_timestamp_interval();
  ::sensoris::protobuf::types::base::TimestampInterval* mutable_timestamp_interval();
  void set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  void unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  ::sensoris::protobuf::types::base::TimestampInterval* unsafe_arena_release_timestamp_interval();

  private:
  const ::sensoris::protobuf::types::base::TimestampInterval& _internal_timestamp_interval() const;
  ::sensoris::protobuf::types::base::TimestampInterval* _internal_mutable_timestamp_interval();

  public:
  // .google.protobuf.Int64Value total_elements = 2;
  bool has_total_elements() const;
  void clear_total_elements() ;
  const ::google::protobuf::Int64Value& total_elements() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_total_elements();
  ::google::protobuf::Int64Value* mutable_total_elements();
  void set_allocated_total_elements(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_total_elements(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_total_elements();

  private:
  const ::google::protobuf::Int64Value& _internal_total_elements() const;
  ::google::protobuf::Int64Value* _internal_mutable_total_elements();

  public:
  // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
  bool has_upper_endpoint_inclusive() const;
  void clear_upper_endpoint_inclusive() ;
  const ::google::protobuf::Int64Value& upper_endpoint_inclusive() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_upper_endpoint_inclusive();
  ::google::protobuf::Int64Value* mutable_upper_endpoint_inclusive();
  void set_allocated_upper_endpoint_inclusive(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_upper_endpoint_inclusive(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_upper_endpoint_inclusive();

  private:
  const ::google::protobuf::Int64Value& _internal_upper_endpoint_inclusive() const;
  ::google::protobuf::Int64Value* _internal_mutable_upper_endpoint_inclusive();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.RelativeInt64Histogram)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin > bin_;
    ::sensoris::protobuf::types::base::TimestampInterval* timestamp_interval_;
    ::google::protobuf::Int64Value* total_elements_;
    ::google::protobuf::Int64Value* upper_endpoint_inclusive_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Int64StatisticMeasureAndAccuracy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy) */ {
 public:
  inline Int64StatisticMeasureAndAccuracy() : Int64StatisticMeasureAndAccuracy(nullptr) {}
  ~Int64StatisticMeasureAndAccuracy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int64StatisticMeasureAndAccuracy(::google::protobuf::internal::ConstantInitialized);

  inline Int64StatisticMeasureAndAccuracy(const Int64StatisticMeasureAndAccuracy& from)
      : Int64StatisticMeasureAndAccuracy(nullptr, from) {}
  Int64StatisticMeasureAndAccuracy(Int64StatisticMeasureAndAccuracy&& from) noexcept
    : Int64StatisticMeasureAndAccuracy() {
    *this = ::std::move(from);
  }

  inline Int64StatisticMeasureAndAccuracy& operator=(const Int64StatisticMeasureAndAccuracy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64StatisticMeasureAndAccuracy& operator=(Int64StatisticMeasureAndAccuracy&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64StatisticMeasureAndAccuracy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64StatisticMeasureAndAccuracy* internal_default_instance() {
    return reinterpret_cast<const Int64StatisticMeasureAndAccuracy*>(
               &_Int64StatisticMeasureAndAccuracy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Int64StatisticMeasureAndAccuracy& a, Int64StatisticMeasureAndAccuracy& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64StatisticMeasureAndAccuracy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64StatisticMeasureAndAccuracy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64StatisticMeasureAndAccuracy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64StatisticMeasureAndAccuracy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int64StatisticMeasureAndAccuracy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int64StatisticMeasureAndAccuracy& from) {
    Int64StatisticMeasureAndAccuracy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Int64StatisticMeasureAndAccuracy* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy";
  }
  protected:
  explicit Int64StatisticMeasureAndAccuracy(::google::protobuf::Arena* arena);
  Int64StatisticMeasureAndAccuracy(::google::protobuf::Arena* arena, const Int64StatisticMeasureAndAccuracy& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampIntervalFieldNumber = 1,
    kAccuracyFieldNumber = 4,
    kValueFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  bool has_timestamp_interval() const;
  void clear_timestamp_interval() ;
  const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::TimestampInterval* release_timestamp_interval();
  ::sensoris::protobuf::types::base::TimestampInterval* mutable_timestamp_interval();
  void set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  void unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  ::sensoris::protobuf::types::base::TimestampInterval* unsafe_arena_release_timestamp_interval();

  private:
  const ::sensoris::protobuf::types::base::TimestampInterval& _internal_timestamp_interval() const;
  ::sensoris::protobuf::types::base::TimestampInterval* _internal_mutable_timestamp_interval();

  public:
  // .google.protobuf.Int64Value accuracy = 4;
  bool has_accuracy() const;
  void clear_accuracy() ;
  const ::google::protobuf::Int64Value& accuracy() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_accuracy();
  ::google::protobuf::Int64Value* mutable_accuracy();
  void set_allocated_accuracy(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_accuracy(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_accuracy();

  private:
  const ::google::protobuf::Int64Value& _internal_accuracy() const;
  ::google::protobuf::Int64Value* _internal_mutable_accuracy();

  public:
  // int64 value = 3;
  void clear_value() ;
  ::int64_t value() const;
  void set_value(::int64_t value);

  private:
  ::int64_t _internal_value() const;
  void _internal_set_value(::int64_t value);

  public:
  // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
  void clear_type() ;
  ::sensoris::protobuf::types::base::StatisticMeasureType type() const;
  void set_type(::sensoris::protobuf::types::base::StatisticMeasureType value);

  private:
  ::sensoris::protobuf::types::base::StatisticMeasureType _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::types::base::StatisticMeasureType value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::TimestampInterval* timestamp_interval_;
    ::google::protobuf::Int64Value* accuracy_;
    ::int64_t value_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Int64StatisticMeasure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Int64StatisticMeasure) */ {
 public:
  inline Int64StatisticMeasure() : Int64StatisticMeasure(nullptr) {}
  ~Int64StatisticMeasure() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int64StatisticMeasure(::google::protobuf::internal::ConstantInitialized);

  inline Int64StatisticMeasure(const Int64StatisticMeasure& from)
      : Int64StatisticMeasure(nullptr, from) {}
  Int64StatisticMeasure(Int64StatisticMeasure&& from) noexcept
    : Int64StatisticMeasure() {
    *this = ::std::move(from);
  }

  inline Int64StatisticMeasure& operator=(const Int64StatisticMeasure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64StatisticMeasure& operator=(Int64StatisticMeasure&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64StatisticMeasure& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64StatisticMeasure* internal_default_instance() {
    return reinterpret_cast<const Int64StatisticMeasure*>(
               &_Int64StatisticMeasure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Int64StatisticMeasure& a, Int64StatisticMeasure& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64StatisticMeasure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64StatisticMeasure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64StatisticMeasure* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64StatisticMeasure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int64StatisticMeasure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int64StatisticMeasure& from) {
    Int64StatisticMeasure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Int64StatisticMeasure* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Int64StatisticMeasure";
  }
  protected:
  explicit Int64StatisticMeasure(::google::protobuf::Arena* arena);
  Int64StatisticMeasure(::google::protobuf::Arena* arena, const Int64StatisticMeasure& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampIntervalFieldNumber = 1,
    kValueFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  bool has_timestamp_interval() const;
  void clear_timestamp_interval() ;
  const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::TimestampInterval* release_timestamp_interval();
  ::sensoris::protobuf::types::base::TimestampInterval* mutable_timestamp_interval();
  void set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  void unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  ::sensoris::protobuf::types::base::TimestampInterval* unsafe_arena_release_timestamp_interval();

  private:
  const ::sensoris::protobuf::types::base::TimestampInterval& _internal_timestamp_interval() const;
  ::sensoris::protobuf::types::base::TimestampInterval* _internal_mutable_timestamp_interval();

  public:
  // int64 value = 3;
  void clear_value() ;
  ::int64_t value() const;
  void set_value(::int64_t value);

  private:
  ::int64_t _internal_value() const;
  void _internal_set_value(::int64_t value);

  public:
  // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
  void clear_type() ;
  ::sensoris::protobuf::types::base::StatisticMeasureType type() const;
  void set_type(::sensoris::protobuf::types::base::StatisticMeasureType value);

  private:
  ::sensoris::protobuf::types::base::StatisticMeasureType _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::types::base::StatisticMeasureType value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Int64StatisticMeasure)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::TimestampInterval* timestamp_interval_;
    ::int64_t value_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Int64GaussianDistribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Int64GaussianDistribution) */ {
 public:
  inline Int64GaussianDistribution() : Int64GaussianDistribution(nullptr) {}
  ~Int64GaussianDistribution() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int64GaussianDistribution(::google::protobuf::internal::ConstantInitialized);

  inline Int64GaussianDistribution(const Int64GaussianDistribution& from)
      : Int64GaussianDistribution(nullptr, from) {}
  Int64GaussianDistribution(Int64GaussianDistribution&& from) noexcept
    : Int64GaussianDistribution() {
    *this = ::std::move(from);
  }

  inline Int64GaussianDistribution& operator=(const Int64GaussianDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64GaussianDistribution& operator=(Int64GaussianDistribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64GaussianDistribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64GaussianDistribution* internal_default_instance() {
    return reinterpret_cast<const Int64GaussianDistribution*>(
               &_Int64GaussianDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Int64GaussianDistribution& a, Int64GaussianDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64GaussianDistribution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64GaussianDistribution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64GaussianDistribution* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64GaussianDistribution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int64GaussianDistribution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int64GaussianDistribution& from) {
    Int64GaussianDistribution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Int64GaussianDistribution* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Int64GaussianDistribution";
  }
  protected:
  explicit Int64GaussianDistribution(::google::protobuf::Arena* arena);
  Int64GaussianDistribution(::google::protobuf::Arena* arena, const Int64GaussianDistribution& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampIntervalFieldNumber = 1,
    kMeanFieldNumber = 2,
    kVarianceFieldNumber = 3,
  };
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  bool has_timestamp_interval() const;
  void clear_timestamp_interval() ;
  const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::TimestampInterval* release_timestamp_interval();
  ::sensoris::protobuf::types::base::TimestampInterval* mutable_timestamp_interval();
  void set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  void unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  ::sensoris::protobuf::types::base::TimestampInterval* unsafe_arena_release_timestamp_interval();

  private:
  const ::sensoris::protobuf::types::base::TimestampInterval& _internal_timestamp_interval() const;
  ::sensoris::protobuf::types::base::TimestampInterval* _internal_mutable_timestamp_interval();

  public:
  // .google.protobuf.Int64Value mean = 2;
  bool has_mean() const;
  void clear_mean() ;
  const ::google::protobuf::Int64Value& mean() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_mean();
  ::google::protobuf::Int64Value* mutable_mean();
  void set_allocated_mean(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_mean(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_mean();

  private:
  const ::google::protobuf::Int64Value& _internal_mean() const;
  ::google::protobuf::Int64Value* _internal_mutable_mean();

  public:
  // .google.protobuf.Int64Value variance = 3;
  bool has_variance() const;
  void clear_variance() ;
  const ::google::protobuf::Int64Value& variance() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_variance();
  ::google::protobuf::Int64Value* mutable_variance();
  void set_allocated_variance(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_variance(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_variance();

  private:
  const ::google::protobuf::Int64Value& _internal_variance() const;
  ::google::protobuf::Int64Value* _internal_mutable_variance();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Int64GaussianDistribution)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::TimestampInterval* timestamp_interval_;
    ::google::protobuf::Int64Value* mean_;
    ::google::protobuf::Int64Value* variance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class AbsoluteInt64Histogram final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.AbsoluteInt64Histogram) */ {
 public:
  inline AbsoluteInt64Histogram() : AbsoluteInt64Histogram(nullptr) {}
  ~AbsoluteInt64Histogram() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AbsoluteInt64Histogram(::google::protobuf::internal::ConstantInitialized);

  inline AbsoluteInt64Histogram(const AbsoluteInt64Histogram& from)
      : AbsoluteInt64Histogram(nullptr, from) {}
  AbsoluteInt64Histogram(AbsoluteInt64Histogram&& from) noexcept
    : AbsoluteInt64Histogram() {
    *this = ::std::move(from);
  }

  inline AbsoluteInt64Histogram& operator=(const AbsoluteInt64Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbsoluteInt64Histogram& operator=(AbsoluteInt64Histogram&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbsoluteInt64Histogram& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbsoluteInt64Histogram* internal_default_instance() {
    return reinterpret_cast<const AbsoluteInt64Histogram*>(
               &_AbsoluteInt64Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AbsoluteInt64Histogram& a, AbsoluteInt64Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(AbsoluteInt64Histogram* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbsoluteInt64Histogram* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbsoluteInt64Histogram* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbsoluteInt64Histogram>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AbsoluteInt64Histogram& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AbsoluteInt64Histogram& from) {
    AbsoluteInt64Histogram::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AbsoluteInt64Histogram* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.AbsoluteInt64Histogram";
  }
  protected:
  explicit AbsoluteInt64Histogram(::google::protobuf::Arena* arena);
  AbsoluteInt64Histogram(::google::protobuf::Arena* arena, const AbsoluteInt64Histogram& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Bin = AbsoluteInt64Histogram_Bin;

  // accessors -------------------------------------------------------

  enum : int {
    kBinFieldNumber = 3,
    kTimestampIntervalFieldNumber = 1,
    kTotalElementsFieldNumber = 2,
    kUpperEndpointInclusiveFieldNumber = 4,
  };
  // repeated .sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin bin = 3;
  int bin_size() const;
  private:
  int _internal_bin_size() const;

  public:
  void clear_bin() ;
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin* mutable_bin(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin >*
      mutable_bin();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin>& _internal_bin() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin>* _internal_mutable_bin();
  public:
  const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin& bin(int index) const;
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin* add_bin();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin >&
      bin() const;
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  bool has_timestamp_interval() const;
  void clear_timestamp_interval() ;
  const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::TimestampInterval* release_timestamp_interval();
  ::sensoris::protobuf::types::base::TimestampInterval* mutable_timestamp_interval();
  void set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  void unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value);
  ::sensoris::protobuf::types::base::TimestampInterval* unsafe_arena_release_timestamp_interval();

  private:
  const ::sensoris::protobuf::types::base::TimestampInterval& _internal_timestamp_interval() const;
  ::sensoris::protobuf::types::base::TimestampInterval* _internal_mutable_timestamp_interval();

  public:
  // .google.protobuf.Int64Value total_elements = 2;
  bool has_total_elements() const;
  void clear_total_elements() ;
  const ::google::protobuf::Int64Value& total_elements() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_total_elements();
  ::google::protobuf::Int64Value* mutable_total_elements();
  void set_allocated_total_elements(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_total_elements(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_total_elements();

  private:
  const ::google::protobuf::Int64Value& _internal_total_elements() const;
  ::google::protobuf::Int64Value* _internal_mutable_total_elements();

  public:
  // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
  bool has_upper_endpoint_inclusive() const;
  void clear_upper_endpoint_inclusive() ;
  const ::google::protobuf::Int64Value& upper_endpoint_inclusive() const;
  PROTOBUF_NODISCARD ::google::protobuf::Int64Value* release_upper_endpoint_inclusive();
  ::google::protobuf::Int64Value* mutable_upper_endpoint_inclusive();
  void set_allocated_upper_endpoint_inclusive(::google::protobuf::Int64Value* value);
  void unsafe_arena_set_allocated_upper_endpoint_inclusive(::google::protobuf::Int64Value* value);
  ::google::protobuf::Int64Value* unsafe_arena_release_upper_endpoint_inclusive();

  private:
  const ::google::protobuf::Int64Value& _internal_upper_endpoint_inclusive() const;
  ::google::protobuf::Int64Value* _internal_mutable_upper_endpoint_inclusive();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin > bin_;
    ::sensoris::protobuf::types::base::TimestampInterval* timestamp_interval_;
    ::google::protobuf::Int64Value* total_elements_;
    ::google::protobuf::Int64Value* upper_endpoint_inclusive_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Int64ValueAndAccuracy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Int64ValueAndAccuracy) */ {
 public:
  inline Int64ValueAndAccuracy() : Int64ValueAndAccuracy(nullptr) {}
  ~Int64ValueAndAccuracy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int64ValueAndAccuracy(::google::protobuf::internal::ConstantInitialized);

  inline Int64ValueAndAccuracy(const Int64ValueAndAccuracy& from)
      : Int64ValueAndAccuracy(nullptr, from) {}
  Int64ValueAndAccuracy(Int64ValueAndAccuracy&& from) noexcept
    : Int64ValueAndAccuracy() {
    *this = ::std::move(from);
  }

  inline Int64ValueAndAccuracy& operator=(const Int64ValueAndAccuracy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64ValueAndAccuracy& operator=(Int64ValueAndAccuracy&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64ValueAndAccuracy& default_instance() {
    return *internal_default_instance();
  }
  enum ValueOneofCase {
    kValueAndAccuracy = 1,
    kStatisticMeasureAndAccuracy = 2,
    kAbsoluteHistogram = 3,
    kRelativeHistogram = 4,
    kGaussianDistribution = 5,
    VALUE_ONEOF_NOT_SET = 0,
  };

  static inline const Int64ValueAndAccuracy* internal_default_instance() {
    return reinterpret_cast<const Int64ValueAndAccuracy*>(
               &_Int64ValueAndAccuracy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Int64ValueAndAccuracy& a, Int64ValueAndAccuracy& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64ValueAndAccuracy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64ValueAndAccuracy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64ValueAndAccuracy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64ValueAndAccuracy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int64ValueAndAccuracy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int64ValueAndAccuracy& from) {
    Int64ValueAndAccuracy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Int64ValueAndAccuracy* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Int64ValueAndAccuracy";
  }
  protected:
  explicit Int64ValueAndAccuracy(::google::protobuf::Arena* arena);
  Int64ValueAndAccuracy(::google::protobuf::Arena* arena, const Int64ValueAndAccuracy& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ValueAndAccuracy = Int64ValueAndAccuracy_ValueAndAccuracy;

  // accessors -------------------------------------------------------

  enum : int {
    kValueAndAccuracyFieldNumber = 1,
    kStatisticMeasureAndAccuracyFieldNumber = 2,
    kAbsoluteHistogramFieldNumber = 3,
    kRelativeHistogramFieldNumber = 4,
    kGaussianDistributionFieldNumber = 5,
  };
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy value_and_accuracy = 1;
  bool has_value_and_accuracy() const;
  private:
  bool _internal_has_value_and_accuracy() const;

  public:
  void clear_value_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy& value_and_accuracy() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* release_value_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* mutable_value_and_accuracy();
  void set_allocated_value_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* value);
  void unsafe_arena_set_allocated_value_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* unsafe_arena_release_value_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy& _internal_value_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* _internal_mutable_value_and_accuracy();

  public:
  // .sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy statistic_measure_and_accuracy = 2;
  bool has_statistic_measure_and_accuracy() const;
  private:
  bool _internal_has_statistic_measure_and_accuracy() const;

  public:
  void clear_statistic_measure_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy& statistic_measure_and_accuracy() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* release_statistic_measure_and_accuracy();
  ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* mutable_statistic_measure_and_accuracy();
  void set_allocated_statistic_measure_and_accuracy(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* value);
  void unsafe_arena_set_allocated_statistic_measure_and_accuracy(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* value);
  ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* unsafe_arena_release_statistic_measure_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy& _internal_statistic_measure_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* _internal_mutable_statistic_measure_and_accuracy();

  public:
  // .sensoris.protobuf.types.base.AbsoluteInt64Histogram absolute_histogram = 3;
  bool has_absolute_histogram() const;
  private:
  bool _internal_has_absolute_histogram() const;

  public:
  void clear_absolute_histogram() ;
  const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& absolute_histogram() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* release_absolute_histogram();
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* mutable_absolute_histogram();
  void set_allocated_absolute_histogram(::sensoris::protobuf::types::base::AbsoluteInt64Histogram* value);
  void unsafe_arena_set_allocated_absolute_histogram(::sensoris::protobuf::types::base::AbsoluteInt64Histogram* value);
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* unsafe_arena_release_absolute_histogram();

  private:
  const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& _internal_absolute_histogram() const;
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* _internal_mutable_absolute_histogram();

  public:
  // .sensoris.protobuf.types.base.RelativeInt64Histogram relative_histogram = 4;
  bool has_relative_histogram() const;
  private:
  bool _internal_has_relative_histogram() const;

  public:
  void clear_relative_histogram() ;
  const ::sensoris::protobuf::types::base::RelativeInt64Histogram& relative_histogram() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::RelativeInt64Histogram* release_relative_histogram();
  ::sensoris::protobuf::types::base::RelativeInt64Histogram* mutable_relative_histogram();
  void set_allocated_relative_histogram(::sensoris::protobuf::types::base::RelativeInt64Histogram* value);
  void unsafe_arena_set_allocated_relative_histogram(::sensoris::protobuf::types::base::RelativeInt64Histogram* value);
  ::sensoris::protobuf::types::base::RelativeInt64Histogram* unsafe_arena_release_relative_histogram();

  private:
  const ::sensoris::protobuf::types::base::RelativeInt64Histogram& _internal_relative_histogram() const;
  ::sensoris::protobuf::types::base::RelativeInt64Histogram* _internal_mutable_relative_histogram();

  public:
  // .sensoris.protobuf.types.base.Int64GaussianDistribution gaussian_distribution = 5;
  bool has_gaussian_distribution() const;
  private:
  bool _internal_has_gaussian_distribution() const;

  public:
  void clear_gaussian_distribution() ;
  const ::sensoris::protobuf::types::base::Int64GaussianDistribution& gaussian_distribution() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64GaussianDistribution* release_gaussian_distribution();
  ::sensoris::protobuf::types::base::Int64GaussianDistribution* mutable_gaussian_distribution();
  void set_allocated_gaussian_distribution(::sensoris::protobuf::types::base::Int64GaussianDistribution* value);
  void unsafe_arena_set_allocated_gaussian_distribution(::sensoris::protobuf::types::base::Int64GaussianDistribution* value);
  ::sensoris::protobuf::types::base::Int64GaussianDistribution* unsafe_arena_release_gaussian_distribution();

  private:
  const ::sensoris::protobuf::types::base::Int64GaussianDistribution& _internal_gaussian_distribution() const;
  ::sensoris::protobuf::types::base::Int64GaussianDistribution* _internal_mutable_gaussian_distribution();

  public:
  void clear_value_oneof();
  ValueOneofCase value_oneof_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
 private:
  class _Internal;
  void set_has_value_and_accuracy();
  void set_has_statistic_measure_and_accuracy();
  void set_has_absolute_histogram();
  void set_has_relative_histogram();
  void set_has_gaussian_distribution();

  inline bool has_value_oneof() const;
  inline void clear_has_value_oneof();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ValueOneofUnion {
      constexpr ValueOneofUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* value_and_accuracy_;
      ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* statistic_measure_and_accuracy_;
      ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* absolute_histogram_;
      ::sensoris::protobuf::types::base::RelativeInt64Histogram* relative_histogram_;
      ::sensoris::protobuf::types::base::Int64GaussianDistribution* gaussian_distribution_;
    } value_oneof_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};// -------------------------------------------------------------------

class Int64Value final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.base.Int64Value) */ {
 public:
  inline Int64Value() : Int64Value(nullptr) {}
  ~Int64Value() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Int64Value(::google::protobuf::internal::ConstantInitialized);

  inline Int64Value(const Int64Value& from)
      : Int64Value(nullptr, from) {}
  Int64Value(Int64Value&& from) noexcept
    : Int64Value() {
    *this = ::std::move(from);
  }

  inline Int64Value& operator=(const Int64Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Value& operator=(Int64Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Value& default_instance() {
    return *internal_default_instance();
  }
  enum ValueOneofCase {
    kValue = 1,
    kStatisticMeasure = 2,
    kAbsoluteHistogram = 3,
    kRelativeHistogram = 4,
    kGaussianDistribution = 5,
    VALUE_ONEOF_NOT_SET = 0,
  };

  static inline const Int64Value* internal_default_instance() {
    return reinterpret_cast<const Int64Value*>(
               &_Int64Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Int64Value& a, Int64Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Value* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Value* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Value>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Int64Value& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Int64Value& from) {
    Int64Value::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Int64Value* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.base.Int64Value";
  }
  protected:
  explicit Int64Value(::google::protobuf::Arena* arena);
  Int64Value(::google::protobuf::Arena* arena, const Int64Value& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kStatisticMeasureFieldNumber = 2,
    kAbsoluteHistogramFieldNumber = 3,
    kRelativeHistogramFieldNumber = 4,
    kGaussianDistributionFieldNumber = 5,
  };
  // int64 value = 1;
  bool has_value() const;
  void clear_value() ;
  ::int64_t value() const;
  void set_value(::int64_t value);

  private:
  ::int64_t _internal_value() const;
  void _internal_set_value(::int64_t value);

  public:
  // .sensoris.protobuf.types.base.Int64StatisticMeasure statistic_measure = 2;
  bool has_statistic_measure() const;
  private:
  bool _internal_has_statistic_measure() const;

  public:
  void clear_statistic_measure() ;
  const ::sensoris::protobuf::types::base::Int64StatisticMeasure& statistic_measure() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64StatisticMeasure* release_statistic_measure();
  ::sensoris::protobuf::types::base::Int64StatisticMeasure* mutable_statistic_measure();
  void set_allocated_statistic_measure(::sensoris::protobuf::types::base::Int64StatisticMeasure* value);
  void unsafe_arena_set_allocated_statistic_measure(::sensoris::protobuf::types::base::Int64StatisticMeasure* value);
  ::sensoris::protobuf::types::base::Int64StatisticMeasure* unsafe_arena_release_statistic_measure();

  private:
  const ::sensoris::protobuf::types::base::Int64StatisticMeasure& _internal_statistic_measure() const;
  ::sensoris::protobuf::types::base::Int64StatisticMeasure* _internal_mutable_statistic_measure();

  public:
  // .sensoris.protobuf.types.base.AbsoluteInt64Histogram absolute_histogram = 3;
  bool has_absolute_histogram() const;
  private:
  bool _internal_has_absolute_histogram() const;

  public:
  void clear_absolute_histogram() ;
  const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& absolute_histogram() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* release_absolute_histogram();
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* mutable_absolute_histogram();
  void set_allocated_absolute_histogram(::sensoris::protobuf::types::base::AbsoluteInt64Histogram* value);
  void unsafe_arena_set_allocated_absolute_histogram(::sensoris::protobuf::types::base::AbsoluteInt64Histogram* value);
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* unsafe_arena_release_absolute_histogram();

  private:
  const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& _internal_absolute_histogram() const;
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* _internal_mutable_absolute_histogram();

  public:
  // .sensoris.protobuf.types.base.RelativeInt64Histogram relative_histogram = 4;
  bool has_relative_histogram() const;
  private:
  bool _internal_has_relative_histogram() const;

  public:
  void clear_relative_histogram() ;
  const ::sensoris::protobuf::types::base::RelativeInt64Histogram& relative_histogram() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::RelativeInt64Histogram* release_relative_histogram();
  ::sensoris::protobuf::types::base::RelativeInt64Histogram* mutable_relative_histogram();
  void set_allocated_relative_histogram(::sensoris::protobuf::types::base::RelativeInt64Histogram* value);
  void unsafe_arena_set_allocated_relative_histogram(::sensoris::protobuf::types::base::RelativeInt64Histogram* value);
  ::sensoris::protobuf::types::base::RelativeInt64Histogram* unsafe_arena_release_relative_histogram();

  private:
  const ::sensoris::protobuf::types::base::RelativeInt64Histogram& _internal_relative_histogram() const;
  ::sensoris::protobuf::types::base::RelativeInt64Histogram* _internal_mutable_relative_histogram();

  public:
  // .sensoris.protobuf.types.base.Int64GaussianDistribution gaussian_distribution = 5;
  bool has_gaussian_distribution() const;
  private:
  bool _internal_has_gaussian_distribution() const;

  public:
  void clear_gaussian_distribution() ;
  const ::sensoris::protobuf::types::base::Int64GaussianDistribution& gaussian_distribution() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64GaussianDistribution* release_gaussian_distribution();
  ::sensoris::protobuf::types::base::Int64GaussianDistribution* mutable_gaussian_distribution();
  void set_allocated_gaussian_distribution(::sensoris::protobuf::types::base::Int64GaussianDistribution* value);
  void unsafe_arena_set_allocated_gaussian_distribution(::sensoris::protobuf::types::base::Int64GaussianDistribution* value);
  ::sensoris::protobuf::types::base::Int64GaussianDistribution* unsafe_arena_release_gaussian_distribution();

  private:
  const ::sensoris::protobuf::types::base::Int64GaussianDistribution& _internal_gaussian_distribution() const;
  ::sensoris::protobuf::types::base::Int64GaussianDistribution* _internal_mutable_gaussian_distribution();

  public:
  void clear_value_oneof();
  ValueOneofCase value_oneof_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.base.Int64Value)
 private:
  class _Internal;
  void set_has_value();
  void set_has_statistic_measure();
  void set_has_absolute_histogram();
  void set_has_relative_histogram();
  void set_has_gaussian_distribution();

  inline bool has_value_oneof() const;
  inline void clear_has_value_oneof();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ValueOneofUnion {
      constexpr ValueOneofUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int64_t value_;
      ::sensoris::protobuf::types::base::Int64StatisticMeasure* statistic_measure_;
      ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* absolute_histogram_;
      ::sensoris::protobuf::types::base::RelativeInt64Histogram* relative_histogram_;
      ::sensoris::protobuf::types::base::Int64GaussianDistribution* gaussian_distribution_;
    } value_oneof_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
};

// ===================================================================



static const int kExponentFieldNumber = 50001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::int64_t >, 3, false >
  exponent;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Version

// .google.protobuf.Int64Value major = 1;
inline bool Version::has_major() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.major_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Version::_internal_major() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.major_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Version::major() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Version.major)
  return _internal_major();
}
inline void Version::unsafe_arena_set_allocated_major(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.major_);
  }
  _impl_.major_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Version.major)
}
inline ::google::protobuf::Int64Value* Version::release_major() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* released = _impl_.major_;
  _impl_.major_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Version::unsafe_arena_release_major() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Version.major)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* temp = _impl_.major_;
  _impl_.major_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Version::_internal_mutable_major() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.major_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.major_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.major_;
}
inline ::google::protobuf::Int64Value* Version::mutable_major() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_major();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Version.major)
  return _msg;
}
inline void Version::set_allocated_major(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.major_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.major_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Version.major)
}

// .google.protobuf.Int64Value minor = 2;
inline bool Version::has_minor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.minor_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Version::_internal_minor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.minor_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Version::minor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Version.minor)
  return _internal_minor();
}
inline void Version::unsafe_arena_set_allocated_minor(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.minor_);
  }
  _impl_.minor_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Version.minor)
}
inline ::google::protobuf::Int64Value* Version::release_minor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.minor_;
  _impl_.minor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Version::unsafe_arena_release_minor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Version.minor)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.minor_;
  _impl_.minor_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Version::_internal_mutable_minor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.minor_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.minor_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.minor_;
}
inline ::google::protobuf::Int64Value* Version::mutable_minor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_minor();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Version.minor)
  return _msg;
}
inline void Version::set_allocated_minor(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.minor_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.minor_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Version.minor)
}

// .google.protobuf.Int64Value patch = 3;
inline bool Version::has_patch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.patch_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Version::_internal_patch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.patch_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Version::patch() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Version.patch)
  return _internal_patch();
}
inline void Version::unsafe_arena_set_allocated_patch(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.patch_);
  }
  _impl_.patch_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Version.patch)
}
inline ::google::protobuf::Int64Value* Version::release_patch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* released = _impl_.patch_;
  _impl_.patch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Version::unsafe_arena_release_patch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Version.patch)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* temp = _impl_.patch_;
  _impl_.patch_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Version::_internal_mutable_patch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.patch_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.patch_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.patch_;
}
inline ::google::protobuf::Int64Value* Version::mutable_patch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_patch();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Version.patch)
  return _msg;
}
inline void Version::set_allocated_patch(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.patch_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.patch_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Version.patch)
}

// .google.protobuf.StringValue name = 4;
inline bool Version::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.name_ != nullptr);
  return value;
}
inline const ::google::protobuf::StringValue& Version::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::StringValue* p = _impl_.name_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
}
inline const ::google::protobuf::StringValue& Version::name() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Version.name)
  return _internal_name();
}
inline void Version::unsafe_arena_set_allocated_name(::google::protobuf::StringValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.name_);
  }
  _impl_.name_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Version.name)
}
inline ::google::protobuf::StringValue* Version::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::StringValue* released = _impl_.name_;
  _impl_.name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::StringValue* Version::unsafe_arena_release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Version.name)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::StringValue* temp = _impl_.name_;
  _impl_.name_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* Version::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArena());
    _impl_.name_ = reinterpret_cast<::google::protobuf::StringValue*>(p);
  }
  return _impl_.name_;
}
inline ::google::protobuf::StringValue* Version::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::StringValue* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Version.name)
  return _msg;
}
inline void Version::set_allocated_name(::google::protobuf::StringValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.name_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.name_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Version.name)
}

// -------------------------------------------------------------------

// Entity

// .google.protobuf.StringValue primary_id = 1;
inline bool Entity::has_primary_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.primary_id_ != nullptr);
  return value;
}
inline const ::google::protobuf::StringValue& Entity::_internal_primary_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::StringValue* p = _impl_.primary_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
}
inline const ::google::protobuf::StringValue& Entity::primary_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Entity.primary_id)
  return _internal_primary_id();
}
inline void Entity::unsafe_arena_set_allocated_primary_id(::google::protobuf::StringValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.primary_id_);
  }
  _impl_.primary_id_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Entity.primary_id)
}
inline ::google::protobuf::StringValue* Entity::release_primary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::StringValue* released = _impl_.primary_id_;
  _impl_.primary_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::StringValue* Entity::unsafe_arena_release_primary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Entity.primary_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::StringValue* temp = _impl_.primary_id_;
  _impl_.primary_id_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* Entity::_internal_mutable_primary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.primary_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArena());
    _impl_.primary_id_ = reinterpret_cast<::google::protobuf::StringValue*>(p);
  }
  return _impl_.primary_id_;
}
inline ::google::protobuf::StringValue* Entity::mutable_primary_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::StringValue* _msg = _internal_mutable_primary_id();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Entity.primary_id)
  return _msg;
}
inline void Entity::set_allocated_primary_id(::google::protobuf::StringValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.primary_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.primary_id_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Entity.primary_id)
}

// .google.protobuf.StringValue secondary_id = 2;
inline bool Entity::has_secondary_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.secondary_id_ != nullptr);
  return value;
}
inline const ::google::protobuf::StringValue& Entity::_internal_secondary_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::StringValue* p = _impl_.secondary_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
}
inline const ::google::protobuf::StringValue& Entity::secondary_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Entity.secondary_id)
  return _internal_secondary_id();
}
inline void Entity::unsafe_arena_set_allocated_secondary_id(::google::protobuf::StringValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.secondary_id_);
  }
  _impl_.secondary_id_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Entity.secondary_id)
}
inline ::google::protobuf::StringValue* Entity::release_secondary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::StringValue* released = _impl_.secondary_id_;
  _impl_.secondary_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::StringValue* Entity::unsafe_arena_release_secondary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Entity.secondary_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::StringValue* temp = _impl_.secondary_id_;
  _impl_.secondary_id_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* Entity::_internal_mutable_secondary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.secondary_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArena());
    _impl_.secondary_id_ = reinterpret_cast<::google::protobuf::StringValue*>(p);
  }
  return _impl_.secondary_id_;
}
inline ::google::protobuf::StringValue* Entity::mutable_secondary_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::StringValue* _msg = _internal_mutable_secondary_id();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Entity.secondary_id)
  return _msg;
}
inline void Entity::set_allocated_secondary_id(::google::protobuf::StringValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.secondary_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.secondary_id_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Entity.secondary_id)
}

// .google.protobuf.StringValue type = 3;
inline bool Entity::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline const ::google::protobuf::StringValue& Entity::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::StringValue* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
}
inline const ::google::protobuf::StringValue& Entity::type() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Entity.type)
  return _internal_type();
}
inline void Entity::unsafe_arena_set_allocated_type(::google::protobuf::StringValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Entity.type)
}
inline ::google::protobuf::StringValue* Entity::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::StringValue* released = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::StringValue* Entity::unsafe_arena_release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Entity.type)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::StringValue* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* Entity::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArena());
    _impl_.type_ = reinterpret_cast<::google::protobuf::StringValue*>(p);
  }
  return _impl_.type_;
}
inline ::google::protobuf::StringValue* Entity::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::StringValue* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Entity.type)
  return _msg;
}
inline void Entity::set_allocated_type(::google::protobuf::StringValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.type_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.type_ = reinterpret_cast<::google::protobuf::StringValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Entity.type)
}

// .sensoris.protobuf.types.base.Version software_version = 4;
inline bool Entity::has_software_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.software_version_ != nullptr);
  return value;
}
inline void Entity::clear_software_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.software_version_ != nullptr) _impl_.software_version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::sensoris::protobuf::types::base::Version& Entity::_internal_software_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Version* p = _impl_.software_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Version&>(::sensoris::protobuf::types::base::_Version_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Version& Entity::software_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Entity.software_version)
  return _internal_software_version();
}
inline void Entity::unsafe_arena_set_allocated_software_version(::sensoris::protobuf::types::base::Version* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.software_version_);
  }
  _impl_.software_version_ = reinterpret_cast<::sensoris::protobuf::types::base::Version*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Entity.software_version)
}
inline ::sensoris::protobuf::types::base::Version* Entity::release_software_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Version* released = _impl_.software_version_;
  _impl_.software_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Version* Entity::unsafe_arena_release_software_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Entity.software_version)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sensoris::protobuf::types::base::Version* temp = _impl_.software_version_;
  _impl_.software_version_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Version* Entity::_internal_mutable_software_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.software_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Version>(GetArena());
    _impl_.software_version_ = reinterpret_cast<::sensoris::protobuf::types::base::Version*>(p);
  }
  return _impl_.software_version_;
}
inline ::sensoris::protobuf::types::base::Version* Entity::mutable_software_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Version* _msg = _internal_mutable_software_version();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Entity.software_version)
  return _msg;
}
inline void Entity::set_allocated_software_version(::sensoris::protobuf::types::base::Version* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::Version*>(_impl_.software_version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::Version*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.software_version_ = reinterpret_cast<::sensoris::protobuf::types::base::Version*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Entity.software_version)
}

// .sensoris.protobuf.types.base.Version hardware_version = 5;
inline bool Entity::has_hardware_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hardware_version_ != nullptr);
  return value;
}
inline void Entity::clear_hardware_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hardware_version_ != nullptr) _impl_.hardware_version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::sensoris::protobuf::types::base::Version& Entity::_internal_hardware_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Version* p = _impl_.hardware_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Version&>(::sensoris::protobuf::types::base::_Version_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Version& Entity::hardware_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Entity.hardware_version)
  return _internal_hardware_version();
}
inline void Entity::unsafe_arena_set_allocated_hardware_version(::sensoris::protobuf::types::base::Version* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hardware_version_);
  }
  _impl_.hardware_version_ = reinterpret_cast<::sensoris::protobuf::types::base::Version*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Entity.hardware_version)
}
inline ::sensoris::protobuf::types::base::Version* Entity::release_hardware_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sensoris::protobuf::types::base::Version* released = _impl_.hardware_version_;
  _impl_.hardware_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Version* Entity::unsafe_arena_release_hardware_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Entity.hardware_version)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sensoris::protobuf::types::base::Version* temp = _impl_.hardware_version_;
  _impl_.hardware_version_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Version* Entity::_internal_mutable_hardware_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.hardware_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Version>(GetArena());
    _impl_.hardware_version_ = reinterpret_cast<::sensoris::protobuf::types::base::Version*>(p);
  }
  return _impl_.hardware_version_;
}
inline ::sensoris::protobuf::types::base::Version* Entity::mutable_hardware_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Version* _msg = _internal_mutable_hardware_version();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Entity.hardware_version)
  return _msg;
}
inline void Entity::set_allocated_hardware_version(::sensoris::protobuf::types::base::Version* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::Version*>(_impl_.hardware_version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::Version*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.hardware_version_ = reinterpret_cast<::sensoris::protobuf::types::base::Version*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Entity.hardware_version)
}

// repeated .google.protobuf.Any extension = 15;
inline int Entity::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int Entity::extension_size() const {
  return _internal_extension_size();
}
inline ::google::protobuf::Any* Entity::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Entity.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* Entity::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.base.Entity.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::google::protobuf::Any& Entity::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Entity.extension)
  return _internal_extension().Get(index);
}
inline ::google::protobuf::Any* Entity::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.base.Entity.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& Entity::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.base.Entity.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
Entity::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
Entity::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

// -------------------------------------------------------------------

// Timestamp

// .google.protobuf.Int64Value posix_time = 1;
inline bool Timestamp::has_posix_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.posix_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Timestamp::_internal_posix_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.posix_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Timestamp::posix_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Timestamp.posix_time)
  return _internal_posix_time();
}
inline void Timestamp::unsafe_arena_set_allocated_posix_time(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.posix_time_);
  }
  _impl_.posix_time_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Timestamp.posix_time)
}
inline ::google::protobuf::Int64Value* Timestamp::release_posix_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* released = _impl_.posix_time_;
  _impl_.posix_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Timestamp::unsafe_arena_release_posix_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Timestamp.posix_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* temp = _impl_.posix_time_;
  _impl_.posix_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Timestamp::_internal_mutable_posix_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.posix_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.posix_time_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.posix_time_;
}
inline ::google::protobuf::Int64Value* Timestamp::mutable_posix_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_posix_time();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Timestamp.posix_time)
  return _msg;
}
inline void Timestamp::set_allocated_posix_time(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.posix_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.posix_time_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Timestamp.posix_time)
}

// .google.protobuf.Int64Value posix_time_fraction = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool Timestamp::has_posix_time_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.posix_time_fraction_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Timestamp::_internal_posix_time_fraction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.posix_time_fraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Timestamp::posix_time_fraction() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Timestamp.posix_time_fraction)
  return _internal_posix_time_fraction();
}
inline void Timestamp::unsafe_arena_set_allocated_posix_time_fraction(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.posix_time_fraction_);
  }
  _impl_.posix_time_fraction_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Timestamp.posix_time_fraction)
}
inline ::google::protobuf::Int64Value* Timestamp::release_posix_time_fraction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.posix_time_fraction_;
  _impl_.posix_time_fraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Timestamp::unsafe_arena_release_posix_time_fraction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Timestamp.posix_time_fraction)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.posix_time_fraction_;
  _impl_.posix_time_fraction_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Timestamp::_internal_mutable_posix_time_fraction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.posix_time_fraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.posix_time_fraction_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.posix_time_fraction_;
}
inline ::google::protobuf::Int64Value* Timestamp::mutable_posix_time_fraction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_posix_time_fraction();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Timestamp.posix_time_fraction)
  return _msg;
}
inline void Timestamp::set_allocated_posix_time_fraction(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.posix_time_fraction_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.posix_time_fraction_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Timestamp.posix_time_fraction)
}

// -------------------------------------------------------------------

// TimestampInterval

// .sensoris.protobuf.types.base.Timestamp start_inclusive = 1;
inline bool TimestampInterval::has_start_inclusive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_inclusive_ != nullptr);
  return value;
}
inline void TimestampInterval::clear_start_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.start_inclusive_ != nullptr) _impl_.start_inclusive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::base::Timestamp& TimestampInterval::_internal_start_inclusive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Timestamp* p = _impl_.start_inclusive_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Timestamp&>(::sensoris::protobuf::types::base::_Timestamp_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Timestamp& TimestampInterval::start_inclusive() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.TimestampInterval.start_inclusive)
  return _internal_start_inclusive();
}
inline void TimestampInterval::unsafe_arena_set_allocated_start_inclusive(::sensoris::protobuf::types::base::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_inclusive_);
  }
  _impl_.start_inclusive_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.TimestampInterval.start_inclusive)
}
inline ::sensoris::protobuf::types::base::Timestamp* TimestampInterval::release_start_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Timestamp* released = _impl_.start_inclusive_;
  _impl_.start_inclusive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Timestamp* TimestampInterval::unsafe_arena_release_start_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.TimestampInterval.start_inclusive)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Timestamp* temp = _impl_.start_inclusive_;
  _impl_.start_inclusive_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Timestamp* TimestampInterval::_internal_mutable_start_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_inclusive_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Timestamp>(GetArena());
    _impl_.start_inclusive_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(p);
  }
  return _impl_.start_inclusive_;
}
inline ::sensoris::protobuf::types::base::Timestamp* TimestampInterval::mutable_start_inclusive() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Timestamp* _msg = _internal_mutable_start_inclusive();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.TimestampInterval.start_inclusive)
  return _msg;
}
inline void TimestampInterval::set_allocated_start_inclusive(::sensoris::protobuf::types::base::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(_impl_.start_inclusive_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_inclusive_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.TimestampInterval.start_inclusive)
}

// .sensoris.protobuf.types.base.Timestamp end_exclusive = 2;
inline bool TimestampInterval::has_end_exclusive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_exclusive_ != nullptr);
  return value;
}
inline void TimestampInterval::clear_end_exclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.end_exclusive_ != nullptr) _impl_.end_exclusive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sensoris::protobuf::types::base::Timestamp& TimestampInterval::_internal_end_exclusive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Timestamp* p = _impl_.end_exclusive_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Timestamp&>(::sensoris::protobuf::types::base::_Timestamp_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Timestamp& TimestampInterval::end_exclusive() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.TimestampInterval.end_exclusive)
  return _internal_end_exclusive();
}
inline void TimestampInterval::unsafe_arena_set_allocated_end_exclusive(::sensoris::protobuf::types::base::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_exclusive_);
  }
  _impl_.end_exclusive_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.TimestampInterval.end_exclusive)
}
inline ::sensoris::protobuf::types::base::Timestamp* TimestampInterval::release_end_exclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Timestamp* released = _impl_.end_exclusive_;
  _impl_.end_exclusive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Timestamp* TimestampInterval::unsafe_arena_release_end_exclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.TimestampInterval.end_exclusive)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Timestamp* temp = _impl_.end_exclusive_;
  _impl_.end_exclusive_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Timestamp* TimestampInterval::_internal_mutable_end_exclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_exclusive_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Timestamp>(GetArena());
    _impl_.end_exclusive_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(p);
  }
  return _impl_.end_exclusive_;
}
inline ::sensoris::protobuf::types::base::Timestamp* TimestampInterval::mutable_end_exclusive() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Timestamp* _msg = _internal_mutable_end_exclusive();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.TimestampInterval.end_exclusive)
  return _msg;
}
inline void TimestampInterval::set_allocated_end_exclusive(::sensoris::protobuf::types::base::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(_impl_.end_exclusive_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_exclusive_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.TimestampInterval.end_exclusive)
}

// -------------------------------------------------------------------

// EventEnvelope

// .google.protobuf.Int64Value id = 1;
inline bool EventEnvelope::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& EventEnvelope::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& EventEnvelope::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.EventEnvelope.id)
  return _internal_id();
}
inline void EventEnvelope::unsafe_arena_set_allocated_id(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.EventEnvelope.id)
}
inline ::google::protobuf::Int64Value* EventEnvelope::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* released = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* EventEnvelope::unsafe_arena_release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.EventEnvelope.id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* EventEnvelope::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.id_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.id_;
}
inline ::google::protobuf::Int64Value* EventEnvelope::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.EventEnvelope.id)
  return _msg;
}
inline void EventEnvelope::set_allocated_id(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.id_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.EventEnvelope.id)
}

// .sensoris.protobuf.types.base.Timestamp timestamp = 2;
inline bool EventEnvelope::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline void EventEnvelope::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sensoris::protobuf::types::base::Timestamp& EventEnvelope::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Timestamp&>(::sensoris::protobuf::types::base::_Timestamp_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Timestamp& EventEnvelope::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.EventEnvelope.timestamp)
  return _internal_timestamp();
}
inline void EventEnvelope::unsafe_arena_set_allocated_timestamp(::sensoris::protobuf::types::base::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.EventEnvelope.timestamp)
}
inline ::sensoris::protobuf::types::base::Timestamp* EventEnvelope::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Timestamp* EventEnvelope::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.EventEnvelope.timestamp)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Timestamp* EventEnvelope::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::sensoris::protobuf::types::base::Timestamp* EventEnvelope::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.EventEnvelope.timestamp)
  return _msg;
}
inline void EventEnvelope::set_allocated_timestamp(::sensoris::protobuf::types::base::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.timestamp_ = reinterpret_cast<::sensoris::protobuf::types::base::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.EventEnvelope.timestamp)
}

// repeated .google.protobuf.Any extension = 15;
inline int EventEnvelope::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int EventEnvelope::extension_size() const {
  return _internal_extension_size();
}
inline ::google::protobuf::Any* EventEnvelope::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.EventEnvelope.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* EventEnvelope::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.base.EventEnvelope.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::google::protobuf::Any& EventEnvelope::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.EventEnvelope.extension)
  return _internal_extension().Get(index);
}
inline ::google::protobuf::Any* EventEnvelope::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.base.EventEnvelope.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& EventEnvelope::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.base.EventEnvelope.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
EventEnvelope::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
EventEnvelope::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

// -------------------------------------------------------------------

// EventDetectionStatus

// .sensoris.protobuf.types.base.EventDetectionStatus.Type type = 1;
inline void EventDetectionStatus::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus_Type EventDetectionStatus::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.EventDetectionStatus.type)
  return _internal_type();
}
inline void EventDetectionStatus::set_type(::sensoris::protobuf::types::base::EventDetectionStatus_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.base.EventDetectionStatus.type)
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus_Type EventDetectionStatus::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::EventDetectionStatus_Type>(_impl_.type_);
}
inline void EventDetectionStatus::_internal_set_type(::sensoris::protobuf::types::base::EventDetectionStatus_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool EventDetectionStatus::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline void EventDetectionStatus::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::base::Confidence& EventDetectionStatus::_internal_confidence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& EventDetectionStatus::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.EventDetectionStatus.confidence)
  return _internal_confidence();
}
inline void EventDetectionStatus::unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.EventDetectionStatus.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* EventDetectionStatus::release_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* EventDetectionStatus::unsafe_arena_release_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.EventDetectionStatus.confidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* EventDetectionStatus::_internal_mutable_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.confidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* EventDetectionStatus::mutable_confidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.EventDetectionStatus.confidence)
  return _msg;
}
inline void EventDetectionStatus::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.EventDetectionStatus.confidence)
}

// -------------------------------------------------------------------

// CategoryEnvelope

// repeated .google.protobuf.Any extension = 15;
inline int CategoryEnvelope::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int CategoryEnvelope::extension_size() const {
  return _internal_extension_size();
}
inline ::google::protobuf::Any* CategoryEnvelope::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.CategoryEnvelope.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* CategoryEnvelope::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.base.CategoryEnvelope.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::google::protobuf::Any& CategoryEnvelope::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.CategoryEnvelope.extension)
  return _internal_extension().Get(index);
}
inline ::google::protobuf::Any* CategoryEnvelope::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.base.CategoryEnvelope.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& CategoryEnvelope::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.base.CategoryEnvelope.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
CategoryEnvelope::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
CategoryEnvelope::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

// -------------------------------------------------------------------

// Int64StatisticMeasure

// .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
inline bool Int64StatisticMeasure::has_timestamp_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_interval_ != nullptr);
  return value;
}
inline void Int64StatisticMeasure::clear_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_interval_ != nullptr) _impl_.timestamp_interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& Int64StatisticMeasure::_internal_timestamp_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::TimestampInterval* p = _impl_.timestamp_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::TimestampInterval&>(::sensoris::protobuf::types::base::_TimestampInterval_default_instance_);
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& Int64StatisticMeasure::timestamp_interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64StatisticMeasure.timestamp_interval)
  return _internal_timestamp_interval();
}
inline void Int64StatisticMeasure::unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_interval_);
  }
  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64StatisticMeasure.timestamp_interval)
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64StatisticMeasure::release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* released = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64StatisticMeasure::unsafe_arena_release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64StatisticMeasure.timestamp_interval)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* temp = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64StatisticMeasure::_internal_mutable_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(GetArena());
    _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(p);
  }
  return _impl_.timestamp_interval_;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64StatisticMeasure::mutable_timestamp_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::TimestampInterval* _msg = _internal_mutable_timestamp_interval();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64StatisticMeasure.timestamp_interval)
  return _msg;
}
inline void Int64StatisticMeasure::set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(_impl_.timestamp_interval_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64StatisticMeasure.timestamp_interval)
}

// .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
inline void Int64StatisticMeasure::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::types::base::StatisticMeasureType Int64StatisticMeasure::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64StatisticMeasure.type)
  return _internal_type();
}
inline void Int64StatisticMeasure::set_type(::sensoris::protobuf::types::base::StatisticMeasureType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.base.Int64StatisticMeasure.type)
}
inline ::sensoris::protobuf::types::base::StatisticMeasureType Int64StatisticMeasure::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::StatisticMeasureType>(_impl_.type_);
}
inline void Int64StatisticMeasure::_internal_set_type(::sensoris::protobuf::types::base::StatisticMeasureType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int64 value = 3;
inline void Int64StatisticMeasure::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = ::int64_t{0};
}
inline ::int64_t Int64StatisticMeasure::value() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64StatisticMeasure.value)
  return _internal_value();
}
inline void Int64StatisticMeasure::set_value(::int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.base.Int64StatisticMeasure.value)
}
inline ::int64_t Int64StatisticMeasure::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void Int64StatisticMeasure::_internal_set_value(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Int64StatisticMeasureAndAccuracy

// .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
inline bool Int64StatisticMeasureAndAccuracy::has_timestamp_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_interval_ != nullptr);
  return value;
}
inline void Int64StatisticMeasureAndAccuracy::clear_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_interval_ != nullptr) _impl_.timestamp_interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& Int64StatisticMeasureAndAccuracy::_internal_timestamp_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::TimestampInterval* p = _impl_.timestamp_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::TimestampInterval&>(::sensoris::protobuf::types::base::_TimestampInterval_default_instance_);
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& Int64StatisticMeasureAndAccuracy::timestamp_interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.timestamp_interval)
  return _internal_timestamp_interval();
}
inline void Int64StatisticMeasureAndAccuracy::unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_interval_);
  }
  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.timestamp_interval)
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64StatisticMeasureAndAccuracy::release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* released = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64StatisticMeasureAndAccuracy::unsafe_arena_release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.timestamp_interval)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* temp = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64StatisticMeasureAndAccuracy::_internal_mutable_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(GetArena());
    _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(p);
  }
  return _impl_.timestamp_interval_;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64StatisticMeasureAndAccuracy::mutable_timestamp_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::TimestampInterval* _msg = _internal_mutable_timestamp_interval();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.timestamp_interval)
  return _msg;
}
inline void Int64StatisticMeasureAndAccuracy::set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(_impl_.timestamp_interval_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.timestamp_interval)
}

// .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
inline void Int64StatisticMeasureAndAccuracy::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::types::base::StatisticMeasureType Int64StatisticMeasureAndAccuracy::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.type)
  return _internal_type();
}
inline void Int64StatisticMeasureAndAccuracy::set_type(::sensoris::protobuf::types::base::StatisticMeasureType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.type)
}
inline ::sensoris::protobuf::types::base::StatisticMeasureType Int64StatisticMeasureAndAccuracy::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::base::StatisticMeasureType>(_impl_.type_);
}
inline void Int64StatisticMeasureAndAccuracy::_internal_set_type(::sensoris::protobuf::types::base::StatisticMeasureType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int64 value = 3;
inline void Int64StatisticMeasureAndAccuracy::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = ::int64_t{0};
}
inline ::int64_t Int64StatisticMeasureAndAccuracy::value() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.value)
  return _internal_value();
}
inline void Int64StatisticMeasureAndAccuracy::set_value(::int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.value)
}
inline ::int64_t Int64StatisticMeasureAndAccuracy::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void Int64StatisticMeasureAndAccuracy::_internal_set_value(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// .google.protobuf.Int64Value accuracy = 4;
inline bool Int64StatisticMeasureAndAccuracy::has_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accuracy_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64StatisticMeasureAndAccuracy::_internal_accuracy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64StatisticMeasureAndAccuracy::accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.accuracy)
  return _internal_accuracy();
}
inline void Int64StatisticMeasureAndAccuracy::unsafe_arena_set_allocated_accuracy(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accuracy_);
  }
  _impl_.accuracy_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.accuracy)
}
inline ::google::protobuf::Int64Value* Int64StatisticMeasureAndAccuracy::release_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.accuracy_;
  _impl_.accuracy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64StatisticMeasureAndAccuracy::unsafe_arena_release_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.accuracy)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.accuracy_;
  _impl_.accuracy_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64StatisticMeasureAndAccuracy::_internal_mutable_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.accuracy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.accuracy_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.accuracy_;
}
inline ::google::protobuf::Int64Value* Int64StatisticMeasureAndAccuracy::mutable_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.accuracy)
  return _msg;
}
inline void Int64StatisticMeasureAndAccuracy::set_allocated_accuracy(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.accuracy_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy.accuracy)
}

// -------------------------------------------------------------------

// AbsoluteInt64Histogram_Bin

// .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
inline bool AbsoluteInt64Histogram_Bin::has_lower_endpoint_inclusive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lower_endpoint_inclusive_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& AbsoluteInt64Histogram_Bin::_internal_lower_endpoint_inclusive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.lower_endpoint_inclusive_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& AbsoluteInt64Histogram_Bin::lower_endpoint_inclusive() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.lower_endpoint_inclusive)
  return _internal_lower_endpoint_inclusive();
}
inline void AbsoluteInt64Histogram_Bin::unsafe_arena_set_allocated_lower_endpoint_inclusive(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lower_endpoint_inclusive_);
  }
  _impl_.lower_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.lower_endpoint_inclusive)
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram_Bin::release_lower_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* released = _impl_.lower_endpoint_inclusive_;
  _impl_.lower_endpoint_inclusive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram_Bin::unsafe_arena_release_lower_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.lower_endpoint_inclusive)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* temp = _impl_.lower_endpoint_inclusive_;
  _impl_.lower_endpoint_inclusive_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram_Bin::_internal_mutable_lower_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lower_endpoint_inclusive_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.lower_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.lower_endpoint_inclusive_;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram_Bin::mutable_lower_endpoint_inclusive() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_lower_endpoint_inclusive();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.lower_endpoint_inclusive)
  return _msg;
}
inline void AbsoluteInt64Histogram_Bin::set_allocated_lower_endpoint_inclusive(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lower_endpoint_inclusive_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.lower_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.lower_endpoint_inclusive)
}

// .google.protobuf.Int64Value frequency = 2;
inline bool AbsoluteInt64Histogram_Bin::has_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.frequency_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& AbsoluteInt64Histogram_Bin::_internal_frequency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.frequency_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& AbsoluteInt64Histogram_Bin::frequency() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.frequency)
  return _internal_frequency();
}
inline void AbsoluteInt64Histogram_Bin::unsafe_arena_set_allocated_frequency(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.frequency_);
  }
  _impl_.frequency_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.frequency)
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram_Bin::release_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.frequency_;
  _impl_.frequency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram_Bin::unsafe_arena_release_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.frequency)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.frequency_;
  _impl_.frequency_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram_Bin::_internal_mutable_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.frequency_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.frequency_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.frequency_;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram_Bin::mutable_frequency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_frequency();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.frequency)
  return _msg;
}
inline void AbsoluteInt64Histogram_Bin::set_allocated_frequency(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.frequency_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.frequency_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin.frequency)
}

// -------------------------------------------------------------------

// AbsoluteInt64Histogram

// .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
inline bool AbsoluteInt64Histogram::has_timestamp_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_interval_ != nullptr);
  return value;
}
inline void AbsoluteInt64Histogram::clear_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_interval_ != nullptr) _impl_.timestamp_interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& AbsoluteInt64Histogram::_internal_timestamp_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::TimestampInterval* p = _impl_.timestamp_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::TimestampInterval&>(::sensoris::protobuf::types::base::_TimestampInterval_default_instance_);
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& AbsoluteInt64Histogram::timestamp_interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.AbsoluteInt64Histogram.timestamp_interval)
  return _internal_timestamp_interval();
}
inline void AbsoluteInt64Histogram::unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_interval_);
  }
  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.timestamp_interval)
}
inline ::sensoris::protobuf::types::base::TimestampInterval* AbsoluteInt64Histogram::release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* released = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* AbsoluteInt64Histogram::unsafe_arena_release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.AbsoluteInt64Histogram.timestamp_interval)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* temp = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* AbsoluteInt64Histogram::_internal_mutable_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(GetArena());
    _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(p);
  }
  return _impl_.timestamp_interval_;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* AbsoluteInt64Histogram::mutable_timestamp_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::TimestampInterval* _msg = _internal_mutable_timestamp_interval();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.AbsoluteInt64Histogram.timestamp_interval)
  return _msg;
}
inline void AbsoluteInt64Histogram::set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(_impl_.timestamp_interval_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.timestamp_interval)
}

// .google.protobuf.Int64Value total_elements = 2;
inline bool AbsoluteInt64Histogram::has_total_elements() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_elements_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& AbsoluteInt64Histogram::_internal_total_elements() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.total_elements_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& AbsoluteInt64Histogram::total_elements() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.AbsoluteInt64Histogram.total_elements)
  return _internal_total_elements();
}
inline void AbsoluteInt64Histogram::unsafe_arena_set_allocated_total_elements(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_elements_);
  }
  _impl_.total_elements_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.total_elements)
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram::release_total_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.total_elements_;
  _impl_.total_elements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram::unsafe_arena_release_total_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.AbsoluteInt64Histogram.total_elements)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.total_elements_;
  _impl_.total_elements_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram::_internal_mutable_total_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.total_elements_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.total_elements_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.total_elements_;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram::mutable_total_elements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_total_elements();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.AbsoluteInt64Histogram.total_elements)
  return _msg;
}
inline void AbsoluteInt64Histogram::set_allocated_total_elements(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_elements_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.total_elements_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.total_elements)
}

// repeated .sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin bin = 3;
inline int AbsoluteInt64Histogram::_internal_bin_size() const {
  return _internal_bin().size();
}
inline int AbsoluteInt64Histogram::bin_size() const {
  return _internal_bin_size();
}
inline void AbsoluteInt64Histogram::clear_bin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bin_.Clear();
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin* AbsoluteInt64Histogram::mutable_bin(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.AbsoluteInt64Histogram.bin)
  return _internal_mutable_bin()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin>* AbsoluteInt64Histogram::mutable_bin()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.base.AbsoluteInt64Histogram.bin)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bin();
}
inline const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin& AbsoluteInt64Histogram::bin(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.AbsoluteInt64Histogram.bin)
  return _internal_bin().Get(index);
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin* AbsoluteInt64Histogram::add_bin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin* _add = _internal_mutable_bin()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.base.AbsoluteInt64Histogram.bin)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin>& AbsoluteInt64Histogram::bin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.base.AbsoluteInt64Histogram.bin)
  return _internal_bin();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin>&
AbsoluteInt64Histogram::_internal_bin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bin_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin>*
AbsoluteInt64Histogram::_internal_mutable_bin() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bin_;
}

// .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
inline bool AbsoluteInt64Histogram::has_upper_endpoint_inclusive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upper_endpoint_inclusive_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& AbsoluteInt64Histogram::_internal_upper_endpoint_inclusive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.upper_endpoint_inclusive_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& AbsoluteInt64Histogram::upper_endpoint_inclusive() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.AbsoluteInt64Histogram.upper_endpoint_inclusive)
  return _internal_upper_endpoint_inclusive();
}
inline void AbsoluteInt64Histogram::unsafe_arena_set_allocated_upper_endpoint_inclusive(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.upper_endpoint_inclusive_);
  }
  _impl_.upper_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.upper_endpoint_inclusive)
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram::release_upper_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* released = _impl_.upper_endpoint_inclusive_;
  _impl_.upper_endpoint_inclusive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram::unsafe_arena_release_upper_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.AbsoluteInt64Histogram.upper_endpoint_inclusive)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* temp = _impl_.upper_endpoint_inclusive_;
  _impl_.upper_endpoint_inclusive_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram::_internal_mutable_upper_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.upper_endpoint_inclusive_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.upper_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.upper_endpoint_inclusive_;
}
inline ::google::protobuf::Int64Value* AbsoluteInt64Histogram::mutable_upper_endpoint_inclusive() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_upper_endpoint_inclusive();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.AbsoluteInt64Histogram.upper_endpoint_inclusive)
  return _msg;
}
inline void AbsoluteInt64Histogram::set_allocated_upper_endpoint_inclusive(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.upper_endpoint_inclusive_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.upper_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.AbsoluteInt64Histogram.upper_endpoint_inclusive)
}

// -------------------------------------------------------------------

// RelativeInt64Histogram_Bin

// .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
inline bool RelativeInt64Histogram_Bin::has_lower_endpoint_inclusive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lower_endpoint_inclusive_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& RelativeInt64Histogram_Bin::_internal_lower_endpoint_inclusive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.lower_endpoint_inclusive_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& RelativeInt64Histogram_Bin::lower_endpoint_inclusive() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.lower_endpoint_inclusive)
  return _internal_lower_endpoint_inclusive();
}
inline void RelativeInt64Histogram_Bin::unsafe_arena_set_allocated_lower_endpoint_inclusive(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lower_endpoint_inclusive_);
  }
  _impl_.lower_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.lower_endpoint_inclusive)
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram_Bin::release_lower_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* released = _impl_.lower_endpoint_inclusive_;
  _impl_.lower_endpoint_inclusive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram_Bin::unsafe_arena_release_lower_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.lower_endpoint_inclusive)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* temp = _impl_.lower_endpoint_inclusive_;
  _impl_.lower_endpoint_inclusive_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram_Bin::_internal_mutable_lower_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lower_endpoint_inclusive_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.lower_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.lower_endpoint_inclusive_;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram_Bin::mutable_lower_endpoint_inclusive() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_lower_endpoint_inclusive();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.lower_endpoint_inclusive)
  return _msg;
}
inline void RelativeInt64Histogram_Bin::set_allocated_lower_endpoint_inclusive(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lower_endpoint_inclusive_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.lower_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.lower_endpoint_inclusive)
}

// .google.protobuf.Int64Value relative_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool RelativeInt64Histogram_Bin::has_relative_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relative_frequency_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& RelativeInt64Histogram_Bin::_internal_relative_frequency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.relative_frequency_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& RelativeInt64Histogram_Bin::relative_frequency() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.relative_frequency)
  return _internal_relative_frequency();
}
inline void RelativeInt64Histogram_Bin::unsafe_arena_set_allocated_relative_frequency(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.relative_frequency_);
  }
  _impl_.relative_frequency_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.relative_frequency)
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram_Bin::release_relative_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.relative_frequency_;
  _impl_.relative_frequency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram_Bin::unsafe_arena_release_relative_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.relative_frequency)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.relative_frequency_;
  _impl_.relative_frequency_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram_Bin::_internal_mutable_relative_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.relative_frequency_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.relative_frequency_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.relative_frequency_;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram_Bin::mutable_relative_frequency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_relative_frequency();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.relative_frequency)
  return _msg;
}
inline void RelativeInt64Histogram_Bin::set_allocated_relative_frequency(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.relative_frequency_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.relative_frequency_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin.relative_frequency)
}

// -------------------------------------------------------------------

// RelativeInt64Histogram

// .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
inline bool RelativeInt64Histogram::has_timestamp_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_interval_ != nullptr);
  return value;
}
inline void RelativeInt64Histogram::clear_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_interval_ != nullptr) _impl_.timestamp_interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& RelativeInt64Histogram::_internal_timestamp_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::TimestampInterval* p = _impl_.timestamp_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::TimestampInterval&>(::sensoris::protobuf::types::base::_TimestampInterval_default_instance_);
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& RelativeInt64Histogram::timestamp_interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.RelativeInt64Histogram.timestamp_interval)
  return _internal_timestamp_interval();
}
inline void RelativeInt64Histogram::unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_interval_);
  }
  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.timestamp_interval)
}
inline ::sensoris::protobuf::types::base::TimestampInterval* RelativeInt64Histogram::release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* released = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* RelativeInt64Histogram::unsafe_arena_release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.RelativeInt64Histogram.timestamp_interval)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* temp = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* RelativeInt64Histogram::_internal_mutable_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(GetArena());
    _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(p);
  }
  return _impl_.timestamp_interval_;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* RelativeInt64Histogram::mutable_timestamp_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::TimestampInterval* _msg = _internal_mutable_timestamp_interval();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.RelativeInt64Histogram.timestamp_interval)
  return _msg;
}
inline void RelativeInt64Histogram::set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(_impl_.timestamp_interval_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.timestamp_interval)
}

// .google.protobuf.Int64Value total_elements = 2;
inline bool RelativeInt64Histogram::has_total_elements() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_elements_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& RelativeInt64Histogram::_internal_total_elements() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.total_elements_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& RelativeInt64Histogram::total_elements() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.RelativeInt64Histogram.total_elements)
  return _internal_total_elements();
}
inline void RelativeInt64Histogram::unsafe_arena_set_allocated_total_elements(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_elements_);
  }
  _impl_.total_elements_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.total_elements)
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram::release_total_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.total_elements_;
  _impl_.total_elements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram::unsafe_arena_release_total_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.RelativeInt64Histogram.total_elements)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.total_elements_;
  _impl_.total_elements_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram::_internal_mutable_total_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.total_elements_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.total_elements_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.total_elements_;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram::mutable_total_elements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_total_elements();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.RelativeInt64Histogram.total_elements)
  return _msg;
}
inline void RelativeInt64Histogram::set_allocated_total_elements(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_elements_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.total_elements_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.total_elements)
}

// repeated .sensoris.protobuf.types.base.RelativeInt64Histogram.Bin bin = 3;
inline int RelativeInt64Histogram::_internal_bin_size() const {
  return _internal_bin().size();
}
inline int RelativeInt64Histogram::bin_size() const {
  return _internal_bin_size();
}
inline void RelativeInt64Histogram::clear_bin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bin_.Clear();
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin* RelativeInt64Histogram::mutable_bin(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.RelativeInt64Histogram.bin)
  return _internal_mutable_bin()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin>* RelativeInt64Histogram::mutable_bin()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.base.RelativeInt64Histogram.bin)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bin();
}
inline const ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin& RelativeInt64Histogram::bin(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.RelativeInt64Histogram.bin)
  return _internal_bin().Get(index);
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin* RelativeInt64Histogram::add_bin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin* _add = _internal_mutable_bin()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.base.RelativeInt64Histogram.bin)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin>& RelativeInt64Histogram::bin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.base.RelativeInt64Histogram.bin)
  return _internal_bin();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin>&
RelativeInt64Histogram::_internal_bin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bin_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin>*
RelativeInt64Histogram::_internal_mutable_bin() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bin_;
}

// .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
inline bool RelativeInt64Histogram::has_upper_endpoint_inclusive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upper_endpoint_inclusive_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& RelativeInt64Histogram::_internal_upper_endpoint_inclusive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.upper_endpoint_inclusive_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& RelativeInt64Histogram::upper_endpoint_inclusive() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.RelativeInt64Histogram.upper_endpoint_inclusive)
  return _internal_upper_endpoint_inclusive();
}
inline void RelativeInt64Histogram::unsafe_arena_set_allocated_upper_endpoint_inclusive(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.upper_endpoint_inclusive_);
  }
  _impl_.upper_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.upper_endpoint_inclusive)
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram::release_upper_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* released = _impl_.upper_endpoint_inclusive_;
  _impl_.upper_endpoint_inclusive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram::unsafe_arena_release_upper_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.RelativeInt64Histogram.upper_endpoint_inclusive)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* temp = _impl_.upper_endpoint_inclusive_;
  _impl_.upper_endpoint_inclusive_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram::_internal_mutable_upper_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.upper_endpoint_inclusive_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.upper_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.upper_endpoint_inclusive_;
}
inline ::google::protobuf::Int64Value* RelativeInt64Histogram::mutable_upper_endpoint_inclusive() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_upper_endpoint_inclusive();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.RelativeInt64Histogram.upper_endpoint_inclusive)
  return _msg;
}
inline void RelativeInt64Histogram::set_allocated_upper_endpoint_inclusive(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.upper_endpoint_inclusive_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.upper_endpoint_inclusive_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.RelativeInt64Histogram.upper_endpoint_inclusive)
}

// -------------------------------------------------------------------

// Int64GaussianDistribution

// .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
inline bool Int64GaussianDistribution::has_timestamp_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_interval_ != nullptr);
  return value;
}
inline void Int64GaussianDistribution::clear_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_interval_ != nullptr) _impl_.timestamp_interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& Int64GaussianDistribution::_internal_timestamp_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::TimestampInterval* p = _impl_.timestamp_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::TimestampInterval&>(::sensoris::protobuf::types::base::_TimestampInterval_default_instance_);
}
inline const ::sensoris::protobuf::types::base::TimestampInterval& Int64GaussianDistribution::timestamp_interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64GaussianDistribution.timestamp_interval)
  return _internal_timestamp_interval();
}
inline void Int64GaussianDistribution::unsafe_arena_set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_interval_);
  }
  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64GaussianDistribution.timestamp_interval)
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64GaussianDistribution::release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* released = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64GaussianDistribution::unsafe_arena_release_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64GaussianDistribution.timestamp_interval)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::TimestampInterval* temp = _impl_.timestamp_interval_;
  _impl_.timestamp_interval_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64GaussianDistribution::_internal_mutable_timestamp_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(GetArena());
    _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(p);
  }
  return _impl_.timestamp_interval_;
}
inline ::sensoris::protobuf::types::base::TimestampInterval* Int64GaussianDistribution::mutable_timestamp_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::TimestampInterval* _msg = _internal_mutable_timestamp_interval();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64GaussianDistribution.timestamp_interval)
  return _msg;
}
inline void Int64GaussianDistribution::set_allocated_timestamp_interval(::sensoris::protobuf::types::base::TimestampInterval* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(_impl_.timestamp_interval_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_interval_ = reinterpret_cast<::sensoris::protobuf::types::base::TimestampInterval*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64GaussianDistribution.timestamp_interval)
}

// .google.protobuf.Int64Value mean = 2;
inline bool Int64GaussianDistribution::has_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mean_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64GaussianDistribution::_internal_mean() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.mean_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64GaussianDistribution::mean() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64GaussianDistribution.mean)
  return _internal_mean();
}
inline void Int64GaussianDistribution::unsafe_arena_set_allocated_mean(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mean_);
  }
  _impl_.mean_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64GaussianDistribution.mean)
}
inline ::google::protobuf::Int64Value* Int64GaussianDistribution::release_mean() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.mean_;
  _impl_.mean_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64GaussianDistribution::unsafe_arena_release_mean() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64GaussianDistribution.mean)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.mean_;
  _impl_.mean_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64GaussianDistribution::_internal_mutable_mean() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mean_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.mean_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.mean_;
}
inline ::google::protobuf::Int64Value* Int64GaussianDistribution::mutable_mean() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_mean();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64GaussianDistribution.mean)
  return _msg;
}
inline void Int64GaussianDistribution::set_allocated_mean(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mean_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.mean_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64GaussianDistribution.mean)
}

// .google.protobuf.Int64Value variance = 3;
inline bool Int64GaussianDistribution::has_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.variance_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64GaussianDistribution::_internal_variance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.variance_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64GaussianDistribution::variance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64GaussianDistribution.variance)
  return _internal_variance();
}
inline void Int64GaussianDistribution::unsafe_arena_set_allocated_variance(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.variance_);
  }
  _impl_.variance_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64GaussianDistribution.variance)
}
inline ::google::protobuf::Int64Value* Int64GaussianDistribution::release_variance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* released = _impl_.variance_;
  _impl_.variance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64GaussianDistribution::unsafe_arena_release_variance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64GaussianDistribution.variance)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* temp = _impl_.variance_;
  _impl_.variance_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64GaussianDistribution::_internal_mutable_variance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.variance_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.variance_;
}
inline ::google::protobuf::Int64Value* Int64GaussianDistribution::mutable_variance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_variance();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64GaussianDistribution.variance)
  return _msg;
}
inline void Int64GaussianDistribution::set_allocated_variance(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.variance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.variance_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64GaussianDistribution.variance)
}

// -------------------------------------------------------------------

// Int64Value

// int64 value = 1;
inline bool Int64Value::has_value() const {
  return value_oneof_case() == kValue;
}
inline void Int64Value::set_has_value() {
  _impl_._oneof_case_[0] = kValue;
}
inline void Int64Value::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kValue) {
    _impl_.value_oneof_.value_ = ::int64_t{0};
    clear_has_value_oneof();
  }
}
inline ::int64_t Int64Value::value() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Value.value)
  return _internal_value();
}
inline void Int64Value::set_value(::int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.base.Int64Value.value)
}
inline ::int64_t Int64Value::_internal_value() const {
  if (value_oneof_case() == kValue) {
    return _impl_.value_oneof_.value_;
  }
  return ::int64_t{0};
}
inline void Int64Value::_internal_set_value(::int64_t value) {
  if (value_oneof_case() != kValue) {
    clear_value_oneof();
    set_has_value();
  }
  _impl_.value_oneof_.value_ = value;
}

// .sensoris.protobuf.types.base.Int64StatisticMeasure statistic_measure = 2;
inline bool Int64Value::has_statistic_measure() const {
  return value_oneof_case() == kStatisticMeasure;
}
inline bool Int64Value::_internal_has_statistic_measure() const {
  return value_oneof_case() == kStatisticMeasure;
}
inline void Int64Value::set_has_statistic_measure() {
  _impl_._oneof_case_[0] = kStatisticMeasure;
}
inline void Int64Value::clear_statistic_measure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kStatisticMeasure) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.statistic_measure_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::Int64StatisticMeasure* Int64Value::release_statistic_measure() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Value.statistic_measure)
  if (value_oneof_case() == kStatisticMeasure) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.statistic_measure_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.statistic_measure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64StatisticMeasure& Int64Value::_internal_statistic_measure() const {
  return value_oneof_case() == kStatisticMeasure ? *_impl_.value_oneof_.statistic_measure_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64StatisticMeasure&>(::sensoris::protobuf::types::base::_Int64StatisticMeasure_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64StatisticMeasure& Int64Value::statistic_measure() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Value.statistic_measure)
  return _internal_statistic_measure();
}
inline ::sensoris::protobuf::types::base::Int64StatisticMeasure* Int64Value::unsafe_arena_release_statistic_measure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64Value.statistic_measure)
  if (value_oneof_case() == kStatisticMeasure) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.statistic_measure_;
    _impl_.value_oneof_.statistic_measure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Value::unsafe_arena_set_allocated_statistic_measure(::sensoris::protobuf::types::base::Int64StatisticMeasure* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_statistic_measure();
    _impl_.value_oneof_.statistic_measure_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Value.statistic_measure)
}
inline ::sensoris::protobuf::types::base::Int64StatisticMeasure* Int64Value::_internal_mutable_statistic_measure() {
  if (value_oneof_case() != kStatisticMeasure) {
    clear_value_oneof();
    set_has_statistic_measure();
    _impl_.value_oneof_.statistic_measure_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64StatisticMeasure>(GetArena());
  }
  return _impl_.value_oneof_.statistic_measure_;
}
inline ::sensoris::protobuf::types::base::Int64StatisticMeasure* Int64Value::mutable_statistic_measure() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64StatisticMeasure* _msg = _internal_mutable_statistic_measure();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Value.statistic_measure)
  return _msg;
}

// .sensoris.protobuf.types.base.AbsoluteInt64Histogram absolute_histogram = 3;
inline bool Int64Value::has_absolute_histogram() const {
  return value_oneof_case() == kAbsoluteHistogram;
}
inline bool Int64Value::_internal_has_absolute_histogram() const {
  return value_oneof_case() == kAbsoluteHistogram;
}
inline void Int64Value::set_has_absolute_histogram() {
  _impl_._oneof_case_[0] = kAbsoluteHistogram;
}
inline void Int64Value::clear_absolute_histogram() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kAbsoluteHistogram) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.absolute_histogram_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* Int64Value::release_absolute_histogram() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Value.absolute_histogram)
  if (value_oneof_case() == kAbsoluteHistogram) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.absolute_histogram_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.absolute_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& Int64Value::_internal_absolute_histogram() const {
  return value_oneof_case() == kAbsoluteHistogram ? *_impl_.value_oneof_.absolute_histogram_ : reinterpret_cast<::sensoris::protobuf::types::base::AbsoluteInt64Histogram&>(::sensoris::protobuf::types::base::_AbsoluteInt64Histogram_default_instance_);
}
inline const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& Int64Value::absolute_histogram() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Value.absolute_histogram)
  return _internal_absolute_histogram();
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* Int64Value::unsafe_arena_release_absolute_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64Value.absolute_histogram)
  if (value_oneof_case() == kAbsoluteHistogram) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.absolute_histogram_;
    _impl_.value_oneof_.absolute_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Value::unsafe_arena_set_allocated_absolute_histogram(::sensoris::protobuf::types::base::AbsoluteInt64Histogram* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_absolute_histogram();
    _impl_.value_oneof_.absolute_histogram_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Value.absolute_histogram)
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* Int64Value::_internal_mutable_absolute_histogram() {
  if (value_oneof_case() != kAbsoluteHistogram) {
    clear_value_oneof();
    set_has_absolute_histogram();
    _impl_.value_oneof_.absolute_histogram_ = CreateMaybeMessage<::sensoris::protobuf::types::base::AbsoluteInt64Histogram>(GetArena());
  }
  return _impl_.value_oneof_.absolute_histogram_;
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* Int64Value::mutable_absolute_histogram() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* _msg = _internal_mutable_absolute_histogram();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Value.absolute_histogram)
  return _msg;
}

// .sensoris.protobuf.types.base.RelativeInt64Histogram relative_histogram = 4;
inline bool Int64Value::has_relative_histogram() const {
  return value_oneof_case() == kRelativeHistogram;
}
inline bool Int64Value::_internal_has_relative_histogram() const {
  return value_oneof_case() == kRelativeHistogram;
}
inline void Int64Value::set_has_relative_histogram() {
  _impl_._oneof_case_[0] = kRelativeHistogram;
}
inline void Int64Value::clear_relative_histogram() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kRelativeHistogram) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.relative_histogram_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram* Int64Value::release_relative_histogram() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Value.relative_histogram)
  if (value_oneof_case() == kRelativeHistogram) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.relative_histogram_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.relative_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::RelativeInt64Histogram& Int64Value::_internal_relative_histogram() const {
  return value_oneof_case() == kRelativeHistogram ? *_impl_.value_oneof_.relative_histogram_ : reinterpret_cast<::sensoris::protobuf::types::base::RelativeInt64Histogram&>(::sensoris::protobuf::types::base::_RelativeInt64Histogram_default_instance_);
}
inline const ::sensoris::protobuf::types::base::RelativeInt64Histogram& Int64Value::relative_histogram() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Value.relative_histogram)
  return _internal_relative_histogram();
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram* Int64Value::unsafe_arena_release_relative_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64Value.relative_histogram)
  if (value_oneof_case() == kRelativeHistogram) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.relative_histogram_;
    _impl_.value_oneof_.relative_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Value::unsafe_arena_set_allocated_relative_histogram(::sensoris::protobuf::types::base::RelativeInt64Histogram* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_relative_histogram();
    _impl_.value_oneof_.relative_histogram_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Value.relative_histogram)
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram* Int64Value::_internal_mutable_relative_histogram() {
  if (value_oneof_case() != kRelativeHistogram) {
    clear_value_oneof();
    set_has_relative_histogram();
    _impl_.value_oneof_.relative_histogram_ = CreateMaybeMessage<::sensoris::protobuf::types::base::RelativeInt64Histogram>(GetArena());
  }
  return _impl_.value_oneof_.relative_histogram_;
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram* Int64Value::mutable_relative_histogram() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::RelativeInt64Histogram* _msg = _internal_mutable_relative_histogram();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Value.relative_histogram)
  return _msg;
}

// .sensoris.protobuf.types.base.Int64GaussianDistribution gaussian_distribution = 5;
inline bool Int64Value::has_gaussian_distribution() const {
  return value_oneof_case() == kGaussianDistribution;
}
inline bool Int64Value::_internal_has_gaussian_distribution() const {
  return value_oneof_case() == kGaussianDistribution;
}
inline void Int64Value::set_has_gaussian_distribution() {
  _impl_._oneof_case_[0] = kGaussianDistribution;
}
inline void Int64Value::clear_gaussian_distribution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kGaussianDistribution) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.gaussian_distribution_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::Int64GaussianDistribution* Int64Value::release_gaussian_distribution() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Value.gaussian_distribution)
  if (value_oneof_case() == kGaussianDistribution) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.gaussian_distribution_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.gaussian_distribution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64GaussianDistribution& Int64Value::_internal_gaussian_distribution() const {
  return value_oneof_case() == kGaussianDistribution ? *_impl_.value_oneof_.gaussian_distribution_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64GaussianDistribution&>(::sensoris::protobuf::types::base::_Int64GaussianDistribution_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64GaussianDistribution& Int64Value::gaussian_distribution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Value.gaussian_distribution)
  return _internal_gaussian_distribution();
}
inline ::sensoris::protobuf::types::base::Int64GaussianDistribution* Int64Value::unsafe_arena_release_gaussian_distribution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64Value.gaussian_distribution)
  if (value_oneof_case() == kGaussianDistribution) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.gaussian_distribution_;
    _impl_.value_oneof_.gaussian_distribution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Value::unsafe_arena_set_allocated_gaussian_distribution(::sensoris::protobuf::types::base::Int64GaussianDistribution* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_gaussian_distribution();
    _impl_.value_oneof_.gaussian_distribution_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Value.gaussian_distribution)
}
inline ::sensoris::protobuf::types::base::Int64GaussianDistribution* Int64Value::_internal_mutable_gaussian_distribution() {
  if (value_oneof_case() != kGaussianDistribution) {
    clear_value_oneof();
    set_has_gaussian_distribution();
    _impl_.value_oneof_.gaussian_distribution_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64GaussianDistribution>(GetArena());
  }
  return _impl_.value_oneof_.gaussian_distribution_;
}
inline ::sensoris::protobuf::types::base::Int64GaussianDistribution* Int64Value::mutable_gaussian_distribution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64GaussianDistribution* _msg = _internal_mutable_gaussian_distribution();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Value.gaussian_distribution)
  return _msg;
}

inline bool Int64Value::has_value_oneof() const {
  return value_oneof_case() != VALUE_ONEOF_NOT_SET;
}
inline void Int64Value::clear_has_value_oneof() {
  _impl_._oneof_case_[0] = VALUE_ONEOF_NOT_SET;
}
inline Int64Value::ValueOneofCase Int64Value::value_oneof_case() const {
  return Int64Value::ValueOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Int64ValueAndAccuracy_ValueAndAccuracy

// int64 value = 1;
inline void Int64ValueAndAccuracy_ValueAndAccuracy::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = ::int64_t{0};
}
inline ::int64_t Int64ValueAndAccuracy_ValueAndAccuracy::value() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy.value)
  return _internal_value();
}
inline void Int64ValueAndAccuracy_ValueAndAccuracy::set_value(::int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy.value)
}
inline ::int64_t Int64ValueAndAccuracy_ValueAndAccuracy::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void Int64ValueAndAccuracy_ValueAndAccuracy::_internal_set_value(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// .google.protobuf.Int64Value accuracy = 2;
inline bool Int64ValueAndAccuracy_ValueAndAccuracy::has_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accuracy_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64ValueAndAccuracy_ValueAndAccuracy::_internal_accuracy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64ValueAndAccuracy_ValueAndAccuracy::accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy.accuracy)
  return _internal_accuracy();
}
inline void Int64ValueAndAccuracy_ValueAndAccuracy::unsafe_arena_set_allocated_accuracy(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accuracy_);
  }
  _impl_.accuracy_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy.accuracy)
}
inline ::google::protobuf::Int64Value* Int64ValueAndAccuracy_ValueAndAccuracy::release_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* released = _impl_.accuracy_;
  _impl_.accuracy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64ValueAndAccuracy_ValueAndAccuracy::unsafe_arena_release_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy.accuracy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* temp = _impl_.accuracy_;
  _impl_.accuracy_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64ValueAndAccuracy_ValueAndAccuracy::_internal_mutable_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.accuracy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.accuracy_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.accuracy_;
}
inline ::google::protobuf::Int64Value* Int64ValueAndAccuracy_ValueAndAccuracy::mutable_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy.accuracy)
  return _msg;
}
inline void Int64ValueAndAccuracy_ValueAndAccuracy::set_allocated_accuracy(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.accuracy_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy.accuracy)
}

// -------------------------------------------------------------------

// Int64ValueAndAccuracy

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy value_and_accuracy = 1;
inline bool Int64ValueAndAccuracy::has_value_and_accuracy() const {
  return value_oneof_case() == kValueAndAccuracy;
}
inline bool Int64ValueAndAccuracy::_internal_has_value_and_accuracy() const {
  return value_oneof_case() == kValueAndAccuracy;
}
inline void Int64ValueAndAccuracy::set_has_value_and_accuracy() {
  _impl_._oneof_case_[0] = kValueAndAccuracy;
}
inline void Int64ValueAndAccuracy::clear_value_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kValueAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.value_and_accuracy_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* Int64ValueAndAccuracy::release_value_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.value_and_accuracy)
  if (value_oneof_case() == kValueAndAccuracy) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.value_and_accuracy_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.value_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy& Int64ValueAndAccuracy::_internal_value_and_accuracy() const {
  return value_oneof_case() == kValueAndAccuracy ? *_impl_.value_oneof_.value_and_accuracy_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy& Int64ValueAndAccuracy::value_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64ValueAndAccuracy.value_and_accuracy)
  return _internal_value_and_accuracy();
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* Int64ValueAndAccuracy::unsafe_arena_release_value_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.value_and_accuracy)
  if (value_oneof_case() == kValueAndAccuracy) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.value_and_accuracy_;
    _impl_.value_oneof_.value_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64ValueAndAccuracy::unsafe_arena_set_allocated_value_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_value_and_accuracy();
    _impl_.value_oneof_.value_and_accuracy_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.value_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* Int64ValueAndAccuracy::_internal_mutable_value_and_accuracy() {
  if (value_oneof_case() != kValueAndAccuracy) {
    clear_value_oneof();
    set_has_value_and_accuracy();
    _impl_.value_oneof_.value_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy>(GetArena());
  }
  return _impl_.value_oneof_.value_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* Int64ValueAndAccuracy::mutable_value_and_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* _msg = _internal_mutable_value_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64ValueAndAccuracy.value_and_accuracy)
  return _msg;
}

// .sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy statistic_measure_and_accuracy = 2;
inline bool Int64ValueAndAccuracy::has_statistic_measure_and_accuracy() const {
  return value_oneof_case() == kStatisticMeasureAndAccuracy;
}
inline bool Int64ValueAndAccuracy::_internal_has_statistic_measure_and_accuracy() const {
  return value_oneof_case() == kStatisticMeasureAndAccuracy;
}
inline void Int64ValueAndAccuracy::set_has_statistic_measure_and_accuracy() {
  _impl_._oneof_case_[0] = kStatisticMeasureAndAccuracy;
}
inline void Int64ValueAndAccuracy::clear_statistic_measure_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kStatisticMeasureAndAccuracy) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.statistic_measure_and_accuracy_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* Int64ValueAndAccuracy::release_statistic_measure_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.statistic_measure_and_accuracy)
  if (value_oneof_case() == kStatisticMeasureAndAccuracy) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.statistic_measure_and_accuracy_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.statistic_measure_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy& Int64ValueAndAccuracy::_internal_statistic_measure_and_accuracy() const {
  return value_oneof_case() == kStatisticMeasureAndAccuracy ? *_impl_.value_oneof_.statistic_measure_and_accuracy_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy&>(::sensoris::protobuf::types::base::_Int64StatisticMeasureAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy& Int64ValueAndAccuracy::statistic_measure_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64ValueAndAccuracy.statistic_measure_and_accuracy)
  return _internal_statistic_measure_and_accuracy();
}
inline ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* Int64ValueAndAccuracy::unsafe_arena_release_statistic_measure_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.statistic_measure_and_accuracy)
  if (value_oneof_case() == kStatisticMeasureAndAccuracy) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.statistic_measure_and_accuracy_;
    _impl_.value_oneof_.statistic_measure_and_accuracy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64ValueAndAccuracy::unsafe_arena_set_allocated_statistic_measure_and_accuracy(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_statistic_measure_and_accuracy();
    _impl_.value_oneof_.statistic_measure_and_accuracy_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.statistic_measure_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* Int64ValueAndAccuracy::_internal_mutable_statistic_measure_and_accuracy() {
  if (value_oneof_case() != kStatisticMeasureAndAccuracy) {
    clear_value_oneof();
    set_has_statistic_measure_and_accuracy();
    _impl_.value_oneof_.statistic_measure_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy>(GetArena());
  }
  return _impl_.value_oneof_.statistic_measure_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* Int64ValueAndAccuracy::mutable_statistic_measure_and_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* _msg = _internal_mutable_statistic_measure_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64ValueAndAccuracy.statistic_measure_and_accuracy)
  return _msg;
}

// .sensoris.protobuf.types.base.AbsoluteInt64Histogram absolute_histogram = 3;
inline bool Int64ValueAndAccuracy::has_absolute_histogram() const {
  return value_oneof_case() == kAbsoluteHistogram;
}
inline bool Int64ValueAndAccuracy::_internal_has_absolute_histogram() const {
  return value_oneof_case() == kAbsoluteHistogram;
}
inline void Int64ValueAndAccuracy::set_has_absolute_histogram() {
  _impl_._oneof_case_[0] = kAbsoluteHistogram;
}
inline void Int64ValueAndAccuracy::clear_absolute_histogram() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kAbsoluteHistogram) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.absolute_histogram_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* Int64ValueAndAccuracy::release_absolute_histogram() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.absolute_histogram)
  if (value_oneof_case() == kAbsoluteHistogram) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.absolute_histogram_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.absolute_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& Int64ValueAndAccuracy::_internal_absolute_histogram() const {
  return value_oneof_case() == kAbsoluteHistogram ? *_impl_.value_oneof_.absolute_histogram_ : reinterpret_cast<::sensoris::protobuf::types::base::AbsoluteInt64Histogram&>(::sensoris::protobuf::types::base::_AbsoluteInt64Histogram_default_instance_);
}
inline const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& Int64ValueAndAccuracy::absolute_histogram() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64ValueAndAccuracy.absolute_histogram)
  return _internal_absolute_histogram();
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* Int64ValueAndAccuracy::unsafe_arena_release_absolute_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.absolute_histogram)
  if (value_oneof_case() == kAbsoluteHistogram) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.absolute_histogram_;
    _impl_.value_oneof_.absolute_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64ValueAndAccuracy::unsafe_arena_set_allocated_absolute_histogram(::sensoris::protobuf::types::base::AbsoluteInt64Histogram* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_absolute_histogram();
    _impl_.value_oneof_.absolute_histogram_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.absolute_histogram)
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* Int64ValueAndAccuracy::_internal_mutable_absolute_histogram() {
  if (value_oneof_case() != kAbsoluteHistogram) {
    clear_value_oneof();
    set_has_absolute_histogram();
    _impl_.value_oneof_.absolute_histogram_ = CreateMaybeMessage<::sensoris::protobuf::types::base::AbsoluteInt64Histogram>(GetArena());
  }
  return _impl_.value_oneof_.absolute_histogram_;
}
inline ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* Int64ValueAndAccuracy::mutable_absolute_histogram() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::AbsoluteInt64Histogram* _msg = _internal_mutable_absolute_histogram();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64ValueAndAccuracy.absolute_histogram)
  return _msg;
}

// .sensoris.protobuf.types.base.RelativeInt64Histogram relative_histogram = 4;
inline bool Int64ValueAndAccuracy::has_relative_histogram() const {
  return value_oneof_case() == kRelativeHistogram;
}
inline bool Int64ValueAndAccuracy::_internal_has_relative_histogram() const {
  return value_oneof_case() == kRelativeHistogram;
}
inline void Int64ValueAndAccuracy::set_has_relative_histogram() {
  _impl_._oneof_case_[0] = kRelativeHistogram;
}
inline void Int64ValueAndAccuracy::clear_relative_histogram() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kRelativeHistogram) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.relative_histogram_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram* Int64ValueAndAccuracy::release_relative_histogram() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.relative_histogram)
  if (value_oneof_case() == kRelativeHistogram) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.relative_histogram_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.relative_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::RelativeInt64Histogram& Int64ValueAndAccuracy::_internal_relative_histogram() const {
  return value_oneof_case() == kRelativeHistogram ? *_impl_.value_oneof_.relative_histogram_ : reinterpret_cast<::sensoris::protobuf::types::base::RelativeInt64Histogram&>(::sensoris::protobuf::types::base::_RelativeInt64Histogram_default_instance_);
}
inline const ::sensoris::protobuf::types::base::RelativeInt64Histogram& Int64ValueAndAccuracy::relative_histogram() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64ValueAndAccuracy.relative_histogram)
  return _internal_relative_histogram();
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram* Int64ValueAndAccuracy::unsafe_arena_release_relative_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.relative_histogram)
  if (value_oneof_case() == kRelativeHistogram) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.relative_histogram_;
    _impl_.value_oneof_.relative_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64ValueAndAccuracy::unsafe_arena_set_allocated_relative_histogram(::sensoris::protobuf::types::base::RelativeInt64Histogram* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_relative_histogram();
    _impl_.value_oneof_.relative_histogram_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.relative_histogram)
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram* Int64ValueAndAccuracy::_internal_mutable_relative_histogram() {
  if (value_oneof_case() != kRelativeHistogram) {
    clear_value_oneof();
    set_has_relative_histogram();
    _impl_.value_oneof_.relative_histogram_ = CreateMaybeMessage<::sensoris::protobuf::types::base::RelativeInt64Histogram>(GetArena());
  }
  return _impl_.value_oneof_.relative_histogram_;
}
inline ::sensoris::protobuf::types::base::RelativeInt64Histogram* Int64ValueAndAccuracy::mutable_relative_histogram() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::RelativeInt64Histogram* _msg = _internal_mutable_relative_histogram();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64ValueAndAccuracy.relative_histogram)
  return _msg;
}

// .sensoris.protobuf.types.base.Int64GaussianDistribution gaussian_distribution = 5;
inline bool Int64ValueAndAccuracy::has_gaussian_distribution() const {
  return value_oneof_case() == kGaussianDistribution;
}
inline bool Int64ValueAndAccuracy::_internal_has_gaussian_distribution() const {
  return value_oneof_case() == kGaussianDistribution;
}
inline void Int64ValueAndAccuracy::set_has_gaussian_distribution() {
  _impl_._oneof_case_[0] = kGaussianDistribution;
}
inline void Int64ValueAndAccuracy::clear_gaussian_distribution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kGaussianDistribution) {
    if (GetArena() == nullptr) {
      delete _impl_.value_oneof_.gaussian_distribution_;
    }
    clear_has_value_oneof();
  }
}
inline ::sensoris::protobuf::types::base::Int64GaussianDistribution* Int64ValueAndAccuracy::release_gaussian_distribution() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.gaussian_distribution)
  if (value_oneof_case() == kGaussianDistribution) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.gaussian_distribution_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.gaussian_distribution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64GaussianDistribution& Int64ValueAndAccuracy::_internal_gaussian_distribution() const {
  return value_oneof_case() == kGaussianDistribution ? *_impl_.value_oneof_.gaussian_distribution_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64GaussianDistribution&>(::sensoris::protobuf::types::base::_Int64GaussianDistribution_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64GaussianDistribution& Int64ValueAndAccuracy::gaussian_distribution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64ValueAndAccuracy.gaussian_distribution)
  return _internal_gaussian_distribution();
}
inline ::sensoris::protobuf::types::base::Int64GaussianDistribution* Int64ValueAndAccuracy::unsafe_arena_release_gaussian_distribution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.base.Int64ValueAndAccuracy.gaussian_distribution)
  if (value_oneof_case() == kGaussianDistribution) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.gaussian_distribution_;
    _impl_.value_oneof_.gaussian_distribution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64ValueAndAccuracy::unsafe_arena_set_allocated_gaussian_distribution(::sensoris::protobuf::types::base::Int64GaussianDistribution* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_gaussian_distribution();
    _impl_.value_oneof_.gaussian_distribution_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.gaussian_distribution)
}
inline ::sensoris::protobuf::types::base::Int64GaussianDistribution* Int64ValueAndAccuracy::_internal_mutable_gaussian_distribution() {
  if (value_oneof_case() != kGaussianDistribution) {
    clear_value_oneof();
    set_has_gaussian_distribution();
    _impl_.value_oneof_.gaussian_distribution_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64GaussianDistribution>(GetArena());
  }
  return _impl_.value_oneof_.gaussian_distribution_;
}
inline ::sensoris::protobuf::types::base::Int64GaussianDistribution* Int64ValueAndAccuracy::mutable_gaussian_distribution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64GaussianDistribution* _msg = _internal_mutable_gaussian_distribution();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64ValueAndAccuracy.gaussian_distribution)
  return _msg;
}

inline bool Int64ValueAndAccuracy::has_value_oneof() const {
  return value_oneof_case() != VALUE_ONEOF_NOT_SET;
}
inline void Int64ValueAndAccuracy::clear_has_value_oneof() {
  _impl_._oneof_case_[0] = VALUE_ONEOF_NOT_SET;
}
inline Int64ValueAndAccuracy::ValueOneofCase Int64ValueAndAccuracy::value_oneof_case() const {
  return Int64ValueAndAccuracy::ValueOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Confidence

// int64 value = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
inline void Confidence::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = ::int64_t{0};
}
inline ::int64_t Confidence::value() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Confidence.value)
  return _internal_value();
}
inline void Confidence::set_value(::int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.base.Confidence.value)
}
inline ::int64_t Confidence::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void Confidence::_internal_set_value(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// CountAndConfidence

// .google.protobuf.Int64Value count = 1;
inline bool CountAndConfidence::has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.count_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& CountAndConfidence::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.count_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& CountAndConfidence::count() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.CountAndConfidence.count)
  return _internal_count();
}
inline void CountAndConfidence::unsafe_arena_set_allocated_count(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.count_);
  }
  _impl_.count_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.CountAndConfidence.count)
}
inline ::google::protobuf::Int64Value* CountAndConfidence::release_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* released = _impl_.count_;
  _impl_.count_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* CountAndConfidence::unsafe_arena_release_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.CountAndConfidence.count)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* temp = _impl_.count_;
  _impl_.count_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* CountAndConfidence::_internal_mutable_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.count_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.count_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.count_;
}
inline ::google::protobuf::Int64Value* CountAndConfidence::mutable_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_count();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.CountAndConfidence.count)
  return _msg;
}
inline void CountAndConfidence::set_allocated_count(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.count_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.count_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.CountAndConfidence.count)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool CountAndConfidence::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confidence_ != nullptr);
  return value;
}
inline void CountAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sensoris::protobuf::types::base::Confidence& CountAndConfidence::_internal_confidence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Confidence* p = _impl_.confidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence&>(::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Confidence& CountAndConfidence::confidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.CountAndConfidence.confidence)
  return _internal_confidence();
}
inline void CountAndConfidence::unsafe_arena_set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confidence_);
  }
  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.CountAndConfidence.confidence)
}
inline ::sensoris::protobuf::types::base::Confidence* CountAndConfidence::release_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Confidence* released = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Confidence* CountAndConfidence::unsafe_arena_release_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.CountAndConfidence.confidence)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Confidence* temp = _impl_.confidence_;
  _impl_.confidence_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* CountAndConfidence::_internal_mutable_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.confidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArena());
    _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(p);
  }
  return _impl_.confidence_;
}
inline ::sensoris::protobuf::types::base::Confidence* CountAndConfidence::mutable_confidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Confidence* _msg = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.CountAndConfidence.confidence)
  return _msg;
}
inline void CountAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(_impl_.confidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.confidence_ = reinterpret_cast<::sensoris::protobuf::types::base::Confidence*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.CountAndConfidence.confidence)
}

// -------------------------------------------------------------------

// Int64Matrix3x3

// .google.protobuf.Int64Value a11 = 1;
inline bool Int64Matrix3x3::has_a11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a11_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a11() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a11_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a11() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a11)
  return _internal_a11();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a11(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a11_);
  }
  _impl_.a11_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a11)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a11() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* released = _impl_.a11_;
  _impl_.a11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a11() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a11)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Int64Value* temp = _impl_.a11_;
  _impl_.a11_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a11() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.a11_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a11_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a11_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a11();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a11)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a11(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a11_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.a11_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a11)
}

// .google.protobuf.Int64Value a12 = 2;
inline bool Int64Matrix3x3::has_a12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a12_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a12() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a12_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a12() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a12)
  return _internal_a12();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a12(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a12_);
  }
  _impl_.a12_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a12)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a12() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* released = _impl_.a12_;
  _impl_.a12_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a12() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a12)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Int64Value* temp = _impl_.a12_;
  _impl_.a12_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a12() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.a12_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a12_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a12_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a12();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a12)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a12(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a12_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.a12_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a12)
}

// .google.protobuf.Int64Value a13 = 3;
inline bool Int64Matrix3x3::has_a13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a13_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a13() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a13_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a13() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a13)
  return _internal_a13();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a13(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a13_);
  }
  _impl_.a13_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a13)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a13() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* released = _impl_.a13_;
  _impl_.a13_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a13() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a13)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Int64Value* temp = _impl_.a13_;
  _impl_.a13_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a13() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.a13_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a13_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a13_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a13();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a13)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a13(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a13_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.a13_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a13)
}

// .google.protobuf.Int64Value a21 = 4;
inline bool Int64Matrix3x3::has_a21() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a21_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a21() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a21_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a21() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a21)
  return _internal_a21();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a21(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a21_);
  }
  _impl_.a21_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a21)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a21() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Int64Value* released = _impl_.a21_;
  _impl_.a21_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a21() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a21)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Int64Value* temp = _impl_.a21_;
  _impl_.a21_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a21() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.a21_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a21_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a21_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a21();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a21)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a21(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a21_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.a21_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a21)
}

// .google.protobuf.Int64Value a22 = 5;
inline bool Int64Matrix3x3::has_a22() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a22_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a22() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a22_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a22() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a22)
  return _internal_a22();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a22(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a22_);
  }
  _impl_.a22_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a22)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a22() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Int64Value* released = _impl_.a22_;
  _impl_.a22_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a22() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a22)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Int64Value* temp = _impl_.a22_;
  _impl_.a22_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a22() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.a22_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a22_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a22_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a22();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a22)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a22(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a22_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.a22_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a22)
}

// .google.protobuf.Int64Value a23 = 6;
inline bool Int64Matrix3x3::has_a23() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a23_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a23() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a23_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a23() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a23)
  return _internal_a23();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a23(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a23_);
  }
  _impl_.a23_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a23)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a23() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Int64Value* released = _impl_.a23_;
  _impl_.a23_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a23() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a23)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Int64Value* temp = _impl_.a23_;
  _impl_.a23_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a23() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.a23_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a23_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a23_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a23();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a23)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a23(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a23_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.a23_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a23)
}

// .google.protobuf.Int64Value a31 = 7;
inline bool Int64Matrix3x3::has_a31() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a31_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a31() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a31_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a31() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a31)
  return _internal_a31();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a31(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a31_);
  }
  _impl_.a31_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a31)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a31() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Int64Value* released = _impl_.a31_;
  _impl_.a31_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a31() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a31)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Int64Value* temp = _impl_.a31_;
  _impl_.a31_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a31() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.a31_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a31_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a31_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a31() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a31();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a31)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a31(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a31_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.a31_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a31)
}

// .google.protobuf.Int64Value a32 = 8;
inline bool Int64Matrix3x3::has_a32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a32_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a32() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a32_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a32() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a32)
  return _internal_a32();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a32(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a32_);
  }
  _impl_.a32_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a32)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a32() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Int64Value* released = _impl_.a32_;
  _impl_.a32_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a32() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a32)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Int64Value* temp = _impl_.a32_;
  _impl_.a32_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a32() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.a32_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a32_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a32_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a32() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a32();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a32)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a32(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a32_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.a32_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a32)
}

// .google.protobuf.Int64Value a33 = 9;
inline bool Int64Matrix3x3::has_a33() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a33_ != nullptr);
  return value;
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::_internal_a33() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Int64Value* p = _impl_.a33_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Int64Value&>(::google::protobuf::_Int64Value_default_instance_);
}
inline const ::google::protobuf::Int64Value& Int64Matrix3x3::a33() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.base.Int64Matrix3x3.a33)
  return _internal_a33();
}
inline void Int64Matrix3x3::unsafe_arena_set_allocated_a33(::google::protobuf::Int64Value* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a33_);
  }
  _impl_.a33_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a33)
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::release_a33() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Int64Value* released = _impl_.a33_;
  _impl_.a33_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::unsafe_arena_release_a33() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.base.Int64Matrix3x3.a33)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Int64Value* temp = _impl_.a33_;
  _impl_.a33_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::_internal_mutable_a33() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.a33_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArena());
    _impl_.a33_ = reinterpret_cast<::google::protobuf::Int64Value*>(p);
  }
  return _impl_.a33_;
}
inline ::google::protobuf::Int64Value* Int64Matrix3x3::mutable_a33() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Int64Value* _msg = _internal_mutable_a33();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.base.Int64Matrix3x3.a33)
  return _msg;
}
inline void Int64Matrix3x3::set_allocated_a33(::google::protobuf::Int64Value* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.a33_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.a33_ = reinterpret_cast<::google::protobuf::Int64Value*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Matrix3x3.a33)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace base
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::types::base::EventDetectionStatus_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::types::base::EventDetectionStatus_Type>() {
  return ::sensoris::protobuf::types::base::EventDetectionStatus_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::types::base::StatisticMeasureType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::types::base::StatisticMeasureType>() {
  return ::sensoris::protobuf::types::base::StatisticMeasureType_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::types::base::SystemStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::types::base::SystemStatus>() {
  return ::sensoris::protobuf::types::base::SystemStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_2epb_2eh
