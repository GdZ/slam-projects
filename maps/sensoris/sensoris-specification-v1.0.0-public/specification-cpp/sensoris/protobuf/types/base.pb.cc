// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/base.proto

#include "sensoris/protobuf/types/base.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace types {
namespace base {

inline constexpr Confidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Confidence::Confidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfidenceDefaultTypeInternal() {}
  union {
    Confidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfidenceDefaultTypeInternal _Confidence_default_instance_;

inline constexpr Version::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        major_{nullptr},
        minor_{nullptr},
        patch_{nullptr},
        name_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Version::Version(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;

inline constexpr Timestamp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        posix_time_{nullptr},
        posix_time_fraction_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Timestamp::Timestamp(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampDefaultTypeInternal _Timestamp_default_instance_;

inline constexpr RelativeInt64Histogram_Bin::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lower_endpoint_inclusive_{nullptr},
        relative_frequency_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RelativeInt64Histogram_Bin::RelativeInt64Histogram_Bin(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RelativeInt64Histogram_BinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelativeInt64Histogram_BinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelativeInt64Histogram_BinDefaultTypeInternal() {}
  union {
    RelativeInt64Histogram_Bin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelativeInt64Histogram_BinDefaultTypeInternal _RelativeInt64Histogram_Bin_default_instance_;

inline constexpr Int64ValueAndAccuracy_ValueAndAccuracy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        accuracy_{nullptr},
        value_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Int64ValueAndAccuracy_ValueAndAccuracy::Int64ValueAndAccuracy_ValueAndAccuracy(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Int64ValueAndAccuracy_ValueAndAccuracyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64ValueAndAccuracy_ValueAndAccuracyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64ValueAndAccuracy_ValueAndAccuracyDefaultTypeInternal() {}
  union {
    Int64ValueAndAccuracy_ValueAndAccuracy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64ValueAndAccuracy_ValueAndAccuracyDefaultTypeInternal _Int64ValueAndAccuracy_ValueAndAccuracy_default_instance_;

inline constexpr Int64Matrix3x3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        a11_{nullptr},
        a12_{nullptr},
        a13_{nullptr},
        a21_{nullptr},
        a22_{nullptr},
        a23_{nullptr},
        a31_{nullptr},
        a32_{nullptr},
        a33_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Int64Matrix3x3::Int64Matrix3x3(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Int64Matrix3x3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64Matrix3x3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64Matrix3x3DefaultTypeInternal() {}
  union {
    Int64Matrix3x3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64Matrix3x3DefaultTypeInternal _Int64Matrix3x3_default_instance_;

inline constexpr EventDetectionStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::types::base::EventDetectionStatus_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR EventDetectionStatus::EventDetectionStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventDetectionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDetectionStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDetectionStatusDefaultTypeInternal() {}
  union {
    EventDetectionStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDetectionStatusDefaultTypeInternal _EventDetectionStatus_default_instance_;

inline constexpr CountAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        count_{nullptr},
        confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CountAndConfidence::CountAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CountAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountAndConfidenceDefaultTypeInternal() {}
  union {
    CountAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountAndConfidenceDefaultTypeInternal _CountAndConfidence_default_instance_;

inline constexpr CategoryEnvelope::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : extension_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CategoryEnvelope::CategoryEnvelope(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CategoryEnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryEnvelopeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryEnvelopeDefaultTypeInternal() {}
  union {
    CategoryEnvelope _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryEnvelopeDefaultTypeInternal _CategoryEnvelope_default_instance_;

inline constexpr AbsoluteInt64Histogram_Bin::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lower_endpoint_inclusive_{nullptr},
        frequency_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AbsoluteInt64Histogram_Bin::AbsoluteInt64Histogram_Bin(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AbsoluteInt64Histogram_BinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbsoluteInt64Histogram_BinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbsoluteInt64Histogram_BinDefaultTypeInternal() {}
  union {
    AbsoluteInt64Histogram_Bin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbsoluteInt64Histogram_BinDefaultTypeInternal _AbsoluteInt64Histogram_Bin_default_instance_;

inline constexpr TimestampInterval::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        start_inclusive_{nullptr},
        end_exclusive_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TimestampInterval::TimestampInterval(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TimestampIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampIntervalDefaultTypeInternal() {}
  union {
    TimestampInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampIntervalDefaultTypeInternal _TimestampInterval_default_instance_;

inline constexpr EventEnvelope::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extension_{},
        id_{nullptr},
        timestamp_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EventEnvelope::EventEnvelope(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventEnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventEnvelopeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventEnvelopeDefaultTypeInternal() {}
  union {
    EventEnvelope _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventEnvelopeDefaultTypeInternal _EventEnvelope_default_instance_;

inline constexpr Entity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extension_{},
        primary_id_{nullptr},
        secondary_id_{nullptr},
        type_{nullptr},
        software_version_{nullptr},
        hardware_version_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Entity::Entity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityDefaultTypeInternal() {}
  union {
    Entity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityDefaultTypeInternal _Entity_default_instance_;

inline constexpr RelativeInt64Histogram::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bin_{},
        timestamp_interval_{nullptr},
        total_elements_{nullptr},
        upper_endpoint_inclusive_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RelativeInt64Histogram::RelativeInt64Histogram(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RelativeInt64HistogramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelativeInt64HistogramDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelativeInt64HistogramDefaultTypeInternal() {}
  union {
    RelativeInt64Histogram _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelativeInt64HistogramDefaultTypeInternal _RelativeInt64Histogram_default_instance_;

inline constexpr Int64StatisticMeasureAndAccuracy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timestamp_interval_{nullptr},
        accuracy_{nullptr},
        value_{::int64_t{0}},
        type_{static_cast< ::sensoris::protobuf::types::base::StatisticMeasureType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Int64StatisticMeasureAndAccuracy::Int64StatisticMeasureAndAccuracy(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Int64StatisticMeasureAndAccuracyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64StatisticMeasureAndAccuracyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64StatisticMeasureAndAccuracyDefaultTypeInternal() {}
  union {
    Int64StatisticMeasureAndAccuracy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64StatisticMeasureAndAccuracyDefaultTypeInternal _Int64StatisticMeasureAndAccuracy_default_instance_;

inline constexpr Int64StatisticMeasure::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timestamp_interval_{nullptr},
        value_{::int64_t{0}},
        type_{static_cast< ::sensoris::protobuf::types::base::StatisticMeasureType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Int64StatisticMeasure::Int64StatisticMeasure(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Int64StatisticMeasureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64StatisticMeasureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64StatisticMeasureDefaultTypeInternal() {}
  union {
    Int64StatisticMeasure _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64StatisticMeasureDefaultTypeInternal _Int64StatisticMeasure_default_instance_;

inline constexpr Int64GaussianDistribution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timestamp_interval_{nullptr},
        mean_{nullptr},
        variance_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Int64GaussianDistribution::Int64GaussianDistribution(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Int64GaussianDistributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64GaussianDistributionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64GaussianDistributionDefaultTypeInternal() {}
  union {
    Int64GaussianDistribution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64GaussianDistributionDefaultTypeInternal _Int64GaussianDistribution_default_instance_;

inline constexpr AbsoluteInt64Histogram::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bin_{},
        timestamp_interval_{nullptr},
        total_elements_{nullptr},
        upper_endpoint_inclusive_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AbsoluteInt64Histogram::AbsoluteInt64Histogram(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AbsoluteInt64HistogramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbsoluteInt64HistogramDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbsoluteInt64HistogramDefaultTypeInternal() {}
  union {
    AbsoluteInt64Histogram _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbsoluteInt64HistogramDefaultTypeInternal _AbsoluteInt64Histogram_default_instance_;

inline constexpr Int64ValueAndAccuracy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_oneof_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Int64ValueAndAccuracy::Int64ValueAndAccuracy(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Int64ValueAndAccuracyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64ValueAndAccuracyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64ValueAndAccuracyDefaultTypeInternal() {}
  union {
    Int64ValueAndAccuracy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64ValueAndAccuracyDefaultTypeInternal _Int64ValueAndAccuracy_default_instance_;

inline constexpr Int64Value::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_oneof_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Int64Value::Int64Value(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Int64ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64ValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64ValueDefaultTypeInternal() {}
  union {
    Int64Value _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
}  // namespace base
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2ftypes_2fbase_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Version, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Version, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Version, _impl_.major_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Version, _impl_.minor_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Version, _impl_.patch_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Version, _impl_.name_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Entity, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Entity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Entity, _impl_.primary_id_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Entity, _impl_.secondary_id_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Entity, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Entity, _impl_.software_version_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Entity, _impl_.hardware_version_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Entity, _impl_.extension_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Timestamp, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Timestamp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Timestamp, _impl_.posix_time_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Timestamp, _impl_.posix_time_fraction_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::TimestampInterval, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::TimestampInterval, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::TimestampInterval, _impl_.start_inclusive_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::TimestampInterval, _impl_.end_exclusive_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventEnvelope, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventEnvelope, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventEnvelope, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventEnvelope, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventEnvelope, _impl_.extension_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventDetectionStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventDetectionStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventDetectionStatus, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::EventDetectionStatus, _impl_.confidence_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::CategoryEnvelope, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::CategoryEnvelope, _impl_.extension_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasure, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasure, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasure, _impl_.timestamp_interval_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasure, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasure, _impl_.value_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy, _impl_.timestamp_interval_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy, _impl_.accuracy_),
    0,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin, _impl_.lower_endpoint_inclusive_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin, _impl_.frequency_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram, _impl_.timestamp_interval_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram, _impl_.total_elements_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram, _impl_.bin_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::AbsoluteInt64Histogram, _impl_.upper_endpoint_inclusive_),
    0,
    1,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin, _impl_.lower_endpoint_inclusive_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin, _impl_.relative_frequency_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram, _impl_.timestamp_interval_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram, _impl_.total_elements_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram, _impl_.bin_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::RelativeInt64Histogram, _impl_.upper_endpoint_inclusive_),
    0,
    1,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64GaussianDistribution, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64GaussianDistribution, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64GaussianDistribution, _impl_.timestamp_interval_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64GaussianDistribution, _impl_.mean_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64GaussianDistribution, _impl_.variance_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Value, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Value, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Value, _impl_.value_oneof_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.accuracy_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64ValueAndAccuracy, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64ValueAndAccuracy, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64ValueAndAccuracy, _impl_.value_oneof_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Confidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Confidence, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::CountAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::CountAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::CountAndConfidence, _impl_.count_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::CountAndConfidence, _impl_.confidence_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a11_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a12_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a13_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a21_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a22_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a23_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a31_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a32_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Matrix3x3, _impl_.a33_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::sensoris::protobuf::types::base::Version)},
        {16, 30, -1, sizeof(::sensoris::protobuf::types::base::Entity)},
        {36, 46, -1, sizeof(::sensoris::protobuf::types::base::Timestamp)},
        {48, 58, -1, sizeof(::sensoris::protobuf::types::base::TimestampInterval)},
        {60, 71, -1, sizeof(::sensoris::protobuf::types::base::EventEnvelope)},
        {74, 84, -1, sizeof(::sensoris::protobuf::types::base::EventDetectionStatus)},
        {86, -1, -1, sizeof(::sensoris::protobuf::types::base::CategoryEnvelope)},
        {95, 106, -1, sizeof(::sensoris::protobuf::types::base::Int64StatisticMeasure)},
        {109, 121, -1, sizeof(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy)},
        {125, 135, -1, sizeof(::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin)},
        {137, 149, -1, sizeof(::sensoris::protobuf::types::base::AbsoluteInt64Histogram)},
        {153, 163, -1, sizeof(::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin)},
        {165, 177, -1, sizeof(::sensoris::protobuf::types::base::RelativeInt64Histogram)},
        {181, 192, -1, sizeof(::sensoris::protobuf::types::base::Int64GaussianDistribution)},
        {195, -1, -1, sizeof(::sensoris::protobuf::types::base::Int64Value)},
        {209, 219, -1, sizeof(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy)},
        {221, -1, -1, sizeof(::sensoris::protobuf::types::base::Int64ValueAndAccuracy)},
        {235, -1, -1, sizeof(::sensoris::protobuf::types::base::Confidence)},
        {244, 254, -1, sizeof(::sensoris::protobuf::types::base::CountAndConfidence)},
        {256, 273, -1, sizeof(::sensoris::protobuf::types::base::Int64Matrix3x3)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::types::base::_Version_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Entity_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Timestamp_default_instance_._instance,
    &::sensoris::protobuf::types::base::_TimestampInterval_default_instance_._instance,
    &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_._instance,
    &::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_._instance,
    &::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Int64StatisticMeasure_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Int64StatisticMeasureAndAccuracy_default_instance_._instance,
    &::sensoris::protobuf::types::base::_AbsoluteInt64Histogram_Bin_default_instance_._instance,
    &::sensoris::protobuf::types::base::_AbsoluteInt64Histogram_default_instance_._instance,
    &::sensoris::protobuf::types::base::_RelativeInt64Histogram_Bin_default_instance_._instance,
    &::sensoris::protobuf::types::base::_RelativeInt64Histogram_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Int64GaussianDistribution_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Int64Value_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_ValueAndAccuracy_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Confidence_default_instance_._instance,
    &::sensoris::protobuf::types::base::_CountAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::types::base::_Int64Matrix3x3_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\"sensoris/protobuf/types/base.proto\022\034se"
    "nsoris.protobuf.types.base\032\031google/proto"
    "buf/any.proto\032 google/protobuf/descripto"
    "r.proto\032\036google/protobuf/wrappers.proto\""
    "\271\001\n\007Version\022*\n\005major\030\001 \001(\0132\033.google.prot"
    "obuf.Int64Value\022*\n\005minor\030\002 \001(\0132\033.google."
    "protobuf.Int64Value\022*\n\005patch\030\003 \001(\0132\033.goo"
    "gle.protobuf.Int64Value\022*\n\004name\030\004 \001(\0132\034."
    "google.protobuf.StringValue\"\305\002\n\006Entity\0220"
    "\n\nprimary_id\030\001 \001(\0132\034.google.protobuf.Str"
    "ingValue\0222\n\014secondary_id\030\002 \001(\0132\034.google."
    "protobuf.StringValue\022*\n\004type\030\003 \001(\0132\034.goo"
    "gle.protobuf.StringValue\022\?\n\020software_ver"
    "sion\030\004 \001(\0132%.sensoris.protobuf.types.bas"
    "e.Version\022\?\n\020hardware_version\030\005 \001(\0132%.se"
    "nsoris.protobuf.types.base.Version\022\'\n\tex"
    "tension\030\017 \003(\0132\024.google.protobuf.Any\"|\n\tT"
    "imestamp\022/\n\nposix_time\030\001 \001(\0132\033.google.pr"
    "otobuf.Int64Value\022>\n\023posix_time_fraction"
    "\030\002 \001(\0132\033.google.protobuf.Int64ValueB\004\210\265\030"
    "\000\"\225\001\n\021TimestampInterval\022@\n\017start_inclusi"
    "ve\030\001 \001(\0132\'.sensoris.protobuf.types.base."
    "Timestamp\022>\n\rend_exclusive\030\002 \001(\0132\'.senso"
    "ris.protobuf.types.base.Timestamp\"\235\001\n\rEv"
    "entEnvelope\022\'\n\002id\030\001 \001(\0132\033.google.protobu"
    "f.Int64Value\022:\n\ttimestamp\030\002 \001(\0132\'.sensor"
    "is.protobuf.types.base.Timestamp\022\'\n\texte"
    "nsion\030\017 \003(\0132\024.google.protobuf.Any\"\355\002\n\024Ev"
    "entDetectionStatus\022E\n\004type\030\001 \001(\01627.senso"
    "ris.protobuf.types.base.EventDetectionSt"
    "atus.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris"
    ".protobuf.types.base.Confidence\"\317\001\n\004Type"
    "\022\020\n\014UNKNOWN_TYPE\020\000\022\031\n\025EXPECTED_AND_DETEC"
    "TED\020\001\022\035\n\031EXPECTED_AND_NOT_DETECTED\020\002\022,\n("
    "EXPECTED_AND_NOT_DETECTED_ACCESS_BLOCKED"
    "\020\003\022.\n*EXPECTED_AND_NOT_DETECTED_ACCESS_A"
    "VAILABLE\020\004\022\035\n\031NOT_EXPECTED_AND_DETECTED\020"
    "\005\";\n\020CategoryEnvelope\022\'\n\textension\030\017 \003(\013"
    "2\024.google.protobuf.Any\"\265\001\n\025Int64Statisti"
    "cMeasure\022K\n\022timestamp_interval\030\001 \001(\0132/.s"
    "ensoris.protobuf.types.base.TimestampInt"
    "erval\022@\n\004type\030\002 \001(\01622.sensoris.protobuf."
    "types.base.StatisticMeasureType\022\r\n\005value"
    "\030\003 \001(\003\"\357\001\n Int64StatisticMeasureAndAccur"
    "acy\022K\n\022timestamp_interval\030\001 \001(\0132/.sensor"
    "is.protobuf.types.base.TimestampInterval"
    "\022@\n\004type\030\002 \001(\01622.sensoris.protobuf.types"
    ".base.StatisticMeasureType\022\r\n\005value\030\003 \001("
    "\003\022-\n\010accuracy\030\004 \001(\0132\033.google.protobuf.In"
    "t64Value\"\226\003\n\026AbsoluteInt64Histogram\022K\n\022t"
    "imestamp_interval\030\001 \001(\0132/.sensoris.proto"
    "buf.types.base.TimestampInterval\0223\n\016tota"
    "l_elements\030\002 \001(\0132\033.google.protobuf.Int64"
    "Value\022E\n\003bin\030\003 \003(\01328.sensoris.protobuf.t"
    "ypes.base.AbsoluteInt64Histogram.Bin\022=\n\030"
    "upper_endpoint_inclusive\030\004 \001(\0132\033.google."
    "protobuf.Int64Value\032t\n\003Bin\022=\n\030lower_endp"
    "oint_inclusive\030\001 \001(\0132\033.google.protobuf.I"
    "nt64Value\022.\n\tfrequency\030\002 \001(\0132\033.google.pr"
    "otobuf.Int64Value\"\246\003\n\026RelativeInt64Histo"
    "gram\022K\n\022timestamp_interval\030\001 \001(\0132/.senso"
    "ris.protobuf.types.base.TimestampInterva"
    "l\0223\n\016total_elements\030\002 \001(\0132\033.google.proto"
    "buf.Int64Value\022E\n\003bin\030\003 \003(\01328.sensoris.p"
    "rotobuf.types.base.RelativeInt64Histogra"
    "m.Bin\022=\n\030upper_endpoint_inclusive\030\004 \001(\0132"
    "\033.google.protobuf.Int64Value\032\203\001\n\003Bin\022=\n\030"
    "lower_endpoint_inclusive\030\001 \001(\0132\033.google."
    "protobuf.Int64Value\022=\n\022relative_frequenc"
    "y\030\003 \001(\0132\033.google.protobuf.Int64ValueB\004\210\265"
    "\030\001\"\302\001\n\031Int64GaussianDistribution\022K\n\022time"
    "stamp_interval\030\001 \001(\0132/.sensoris.protobuf"
    ".types.base.TimestampInterval\022)\n\004mean\030\002 "
    "\001(\0132\033.google.protobuf.Int64Value\022-\n\010vari"
    "ance\030\003 \001(\0132\033.google.protobuf.Int64Value\""
    "\200\003\n\nInt64Value\022\017\n\005value\030\001 \001(\003H\000\022P\n\021stati"
    "stic_measure\030\002 \001(\01323.sensoris.protobuf.t"
    "ypes.base.Int64StatisticMeasureH\000\022R\n\022abs"
    "olute_histogram\030\003 \001(\01324.sensoris.protobu"
    "f.types.base.AbsoluteInt64HistogramH\000\022R\n"
    "\022relative_histogram\030\004 \001(\01324.sensoris.pro"
    "tobuf.types.base.RelativeInt64HistogramH"
    "\000\022X\n\025gaussian_distribution\030\005 \001(\01327.senso"
    "ris.protobuf.types.base.Int64GaussianDis"
    "tributionH\000B\r\n\013value_oneof\"\310\004\n\025Int64Valu"
    "eAndAccuracy\022b\n\022value_and_accuracy\030\001 \001(\013"
    "2D.sensoris.protobuf.types.base.Int64Val"
    "ueAndAccuracy.ValueAndAccuracyH\000\022h\n\036stat"
    "istic_measure_and_accuracy\030\002 \001(\0132>.senso"
    "ris.protobuf.types.base.Int64StatisticMe"
    "asureAndAccuracyH\000\022R\n\022absolute_histogram"
    "\030\003 \001(\01324.sensoris.protobuf.types.base.Ab"
    "soluteInt64HistogramH\000\022R\n\022relative_histo"
    "gram\030\004 \001(\01324.sensoris.protobuf.types.bas"
    "e.RelativeInt64HistogramH\000\022X\n\025gaussian_d"
    "istribution\030\005 \001(\01327.sensoris.protobuf.ty"
    "pes.base.Int64GaussianDistributionH\000\032P\n\020"
    "ValueAndAccuracy\022\r\n\005value\030\001 \001(\003\022-\n\010accur"
    "acy\030\002 \001(\0132\033.google.protobuf.Int64ValueB\r"
    "\n\013value_oneof\"!\n\nConfidence\022\023\n\005value\030\001 \001"
    "(\003B\004\210\265\030\000\"~\n\022CountAndConfidence\022*\n\005count\030"
    "\001 \001(\0132\033.google.protobuf.Int64Value\022<\n\nco"
    "nfidence\030\002 \001(\0132(.sensoris.protobuf.types"
    ".base.Confidence\"\212\003\n\016Int64Matrix3x3\022(\n\003a"
    "11\030\001 \001(\0132\033.google.protobuf.Int64Value\022(\n"
    "\003a12\030\002 \001(\0132\033.google.protobuf.Int64Value\022"
    "(\n\003a13\030\003 \001(\0132\033.google.protobuf.Int64Valu"
    "e\022(\n\003a21\030\004 \001(\0132\033.google.protobuf.Int64Va"
    "lue\022(\n\003a22\030\005 \001(\0132\033.google.protobuf.Int64"
    "Value\022(\n\003a23\030\006 \001(\0132\033.google.protobuf.Int"
    "64Value\022(\n\003a31\030\007 \001(\0132\033.google.protobuf.I"
    "nt64Value\022(\n\003a32\030\010 \001(\0132\033.google.protobuf"
    ".Int64Value\022(\n\003a33\030\t \001(\0132\033.google.protob"
    "uf.Int64Value*m\n\024StatisticMeasureType\022\"\n"
    "\036UNKNOWN_STATISTIC_MEASURE_TYPE\020\000\022\013\n\007MIN"
    "IMUM\020\001\022\013\n\007MAXIMUM\020\002\022\013\n\007AVERAGE\020\003\022\n\n\006MEDI"
    "AN\020\004*Q\n\014SystemStatus\022\031\n\025UNKNOWN_SYSTEM_S"
    "TATUS\020\000\022\n\n\006ACTIVE\020\001\022\014\n\010INACTIVE\020\002\022\014\n\010DIS"
    "ABLED\020\003:1\n\010exponent\022\035.google.protobuf.Fi"
    "eldOptions\030\321\206\003 \001(\003B1\n\027org.sensoris.types"
    ".baseB\021SensorisBaseTypesP\001\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto = {
    false,
    false,
    4837,
    descriptor_table_protodef_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
    "sensoris/protobuf/types/base.proto",
    &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_deps,
    3,
    20,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2ftypes_2fbase_2eproto(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto);
namespace sensoris {
namespace protobuf {
namespace types {
namespace base {
const ::google::protobuf::EnumDescriptor* EventDetectionStatus_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EventDetectionStatus_Type_internal_data_[] = {
    393216u, 0u, };
bool EventDetectionStatus_Type_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EventDetectionStatus_Type EventDetectionStatus::UNKNOWN_TYPE;
constexpr EventDetectionStatus_Type EventDetectionStatus::EXPECTED_AND_DETECTED;
constexpr EventDetectionStatus_Type EventDetectionStatus::EXPECTED_AND_NOT_DETECTED;
constexpr EventDetectionStatus_Type EventDetectionStatus::EXPECTED_AND_NOT_DETECTED_ACCESS_BLOCKED;
constexpr EventDetectionStatus_Type EventDetectionStatus::EXPECTED_AND_NOT_DETECTED_ACCESS_AVAILABLE;
constexpr EventDetectionStatus_Type EventDetectionStatus::NOT_EXPECTED_AND_DETECTED;
constexpr EventDetectionStatus_Type EventDetectionStatus::Type_MIN;
constexpr EventDetectionStatus_Type EventDetectionStatus::Type_MAX;
constexpr int EventDetectionStatus::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* StatisticMeasureType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t StatisticMeasureType_internal_data_[] = {
    327680u, 0u, };
bool StatisticMeasureType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* SystemStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t SystemStatus_internal_data_[] = {
    262144u, 0u, };
bool SystemStatus_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class Version::_Internal {
 public:
  using HasBits = decltype(std::declval<Version>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Version, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& major(const Version* msg);
  static void set_has_major(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& minor(const Version* msg);
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Int64Value& patch(const Version* msg);
  static void set_has_patch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::StringValue& name(const Version* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::google::protobuf::Int64Value& Version::_Internal::major(const Version* msg) {
  return *msg->_impl_.major_;
}
const ::google::protobuf::Int64Value& Version::_Internal::minor(const Version* msg) {
  return *msg->_impl_.minor_;
}
const ::google::protobuf::Int64Value& Version::_Internal::patch(const Version* msg) {
  return *msg->_impl_.patch_;
}
const ::google::protobuf::StringValue& Version::_Internal::name(const Version* msg) {
  return *msg->_impl_.name_;
}
void Version::clear_major() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.major_ != nullptr) _impl_.major_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Version::clear_minor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.minor_ != nullptr) _impl_.minor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Version::clear_patch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.patch_ != nullptr) _impl_.patch_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Version::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.name_ != nullptr) _impl_.name_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Version::Version(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Version)
}
inline PROTOBUF_NDEBUG_INLINE Version::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Version::Version(
    ::google::protobuf::Arena* arena,
    const Version& from)
    : ::google::protobuf::Message(arena) {
  Version* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.major_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.major_)
                : nullptr;
  _impl_.minor_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.minor_)
                : nullptr;
  _impl_.patch_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.patch_)
                : nullptr;
  _impl_.name_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.name_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Version)
}
inline PROTOBUF_NDEBUG_INLINE Version::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Version::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, major_),
           0,
           offsetof(Impl_, name_) -
               offsetof(Impl_, major_) +
               sizeof(Impl_::name_));
}
Version::~Version() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Version)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Version::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.major_;
  delete _impl_.minor_;
  delete _impl_.patch_;
  delete _impl_.name_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Version)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.major_ != nullptr);
      _impl_.major_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.minor_ != nullptr);
      _impl_.minor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.patch_ != nullptr);
      _impl_.patch_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.name_ != nullptr);
      _impl_.name_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Version::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Version::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Version, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Version_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.StringValue name = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Version, _impl_.name_)}},
    // .google.protobuf.Int64Value major = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Version, _impl_.major_)}},
    // .google.protobuf.Int64Value minor = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Version, _impl_.minor_)}},
    // .google.protobuf.Int64Value patch = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Version, _impl_.patch_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Int64Value major = 1;
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.major_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value minor = 2;
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.minor_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value patch = 3;
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.patch_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue name = 4;
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.name_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
  }}, {{
  }},
};

::uint8_t* Version::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Version)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value major = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::major(this),
        _Internal::major(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value minor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::minor(this),
        _Internal::minor(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value patch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::patch(this),
        _Internal::patch(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue name = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Version)
  return target;
}

::size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Version)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .google.protobuf.Int64Value major = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.major_);
    }

    // .google.protobuf.Int64Value minor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.minor_);
    }

    // .google.protobuf.Int64Value patch = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.patch_);
    }

    // .google.protobuf.StringValue name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.name_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Version::_class_data_ = {
    Version::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Version::GetClassData() const {
  return &_class_data_;
}

void Version::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Version)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_major()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_major());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_minor()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_minor());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_patch()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_patch());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_name()->::google::protobuf::StringValue::MergeFrom(
          from._internal_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Version::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Version::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Version::InternalSwap(Version* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, _impl_.name_)
      + sizeof(Version::_impl_.name_)
      - PROTOBUF_FIELD_OFFSET(Version, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::google::protobuf::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[0]);
}
// ===================================================================

class Entity::_Internal {
 public:
  using HasBits = decltype(std::declval<Entity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Entity, _impl_._has_bits_);
  static const ::google::protobuf::StringValue& primary_id(const Entity* msg);
  static void set_has_primary_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::StringValue& secondary_id(const Entity* msg);
  static void set_has_secondary_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::StringValue& type(const Entity* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::types::base::Version& software_version(const Entity* msg);
  static void set_has_software_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sensoris::protobuf::types::base::Version& hardware_version(const Entity* msg);
  static void set_has_hardware_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::google::protobuf::StringValue& Entity::_Internal::primary_id(const Entity* msg) {
  return *msg->_impl_.primary_id_;
}
const ::google::protobuf::StringValue& Entity::_Internal::secondary_id(const Entity* msg) {
  return *msg->_impl_.secondary_id_;
}
const ::google::protobuf::StringValue& Entity::_Internal::type(const Entity* msg) {
  return *msg->_impl_.type_;
}
const ::sensoris::protobuf::types::base::Version& Entity::_Internal::software_version(const Entity* msg) {
  return *msg->_impl_.software_version_;
}
const ::sensoris::protobuf::types::base::Version& Entity::_Internal::hardware_version(const Entity* msg) {
  return *msg->_impl_.hardware_version_;
}
void Entity::clear_primary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.primary_id_ != nullptr) _impl_.primary_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Entity::clear_secondary_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.secondary_id_ != nullptr) _impl_.secondary_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Entity::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Entity::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
Entity::Entity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Entity)
}
inline PROTOBUF_NDEBUG_INLINE Entity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extension_{visibility, arena, from.extension_} {}

Entity::Entity(
    ::google::protobuf::Arena* arena,
    const Entity& from)
    : ::google::protobuf::Message(arena) {
  Entity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.primary_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.primary_id_)
                : nullptr;
  _impl_.secondary_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.secondary_id_)
                : nullptr;
  _impl_.type_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.type_)
                : nullptr;
  _impl_.software_version_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Version>(arena, *from._impl_.software_version_)
                : nullptr;
  _impl_.hardware_version_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Version>(arena, *from._impl_.hardware_version_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Entity)
}
inline PROTOBUF_NDEBUG_INLINE Entity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extension_{visibility, arena} {}

inline void Entity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, primary_id_),
           0,
           offsetof(Impl_, hardware_version_) -
               offsetof(Impl_, primary_id_) +
               sizeof(Impl_::hardware_version_));
}
Entity::~Entity() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Entity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Entity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.primary_id_;
  delete _impl_.secondary_id_;
  delete _impl_.type_;
  delete _impl_.software_version_;
  delete _impl_.hardware_version_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Entity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.primary_id_ != nullptr);
      _impl_.primary_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.secondary_id_ != nullptr);
      _impl_.secondary_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.software_version_ != nullptr);
      _impl_.software_version_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.hardware_version_ != nullptr);
      _impl_.hardware_version_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Entity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2> Entity::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Entity, _impl_._has_bits_),
    0, // no _extensions_
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950880,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Entity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.StringValue primary_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Entity, _impl_.primary_id_)}},
    // .google.protobuf.StringValue secondary_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Entity, _impl_.secondary_id_)}},
    // .google.protobuf.StringValue type = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Entity, _impl_.type_)}},
    // .sensoris.protobuf.types.base.Version software_version = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Entity, _impl_.software_version_)}},
    // .sensoris.protobuf.types.base.Version hardware_version = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Entity, _impl_.hardware_version_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 5, PROTOBUF_FIELD_OFFSET(Entity, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.StringValue primary_id = 1;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.primary_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue secondary_id = 2;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.secondary_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue type = 3;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.type_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Version software_version = 4;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.software_version_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Version hardware_version = 5;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.hardware_version_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.extension_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Version>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Version>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* Entity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Entity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.StringValue primary_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::primary_id(this),
        _Internal::primary_id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue secondary_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::secondary_id(this),
        _Internal::secondary_id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Version software_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::software_version(this),
        _Internal::software_version(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Version hardware_version = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::hardware_version(this),
        _Internal::hardware_version(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Entity)
  return target;
}

::size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Entity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .google.protobuf.StringValue primary_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.primary_id_);
    }

    // .google.protobuf.StringValue secondary_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.secondary_id_);
    }

    // .google.protobuf.StringValue type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_);
    }

    // .sensoris.protobuf.types.base.Version software_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.software_version_);
    }

    // .sensoris.protobuf.types.base.Version hardware_version = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.hardware_version_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Entity::_class_data_ = {
    Entity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Entity::GetClassData() const {
  return &_class_data_;
}

void Entity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Entity*>(&to_msg);
  auto& from = static_cast<const Entity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Entity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_primary_id()->::google::protobuf::StringValue::MergeFrom(
          from._internal_primary_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_secondary_id()->::google::protobuf::StringValue::MergeFrom(
          from._internal_secondary_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type()->::google::protobuf::StringValue::MergeFrom(
          from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_software_version()->::sensoris::protobuf::types::base::Version::MergeFrom(
          from._internal_software_version());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_hardware_version()->::sensoris::protobuf::types::base::Version::MergeFrom(
          from._internal_hardware_version());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Entity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Entity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Entity::InternalSwap(Entity* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity, _impl_.hardware_version_)
      + sizeof(Entity::_impl_.hardware_version_)
      - PROTOBUF_FIELD_OFFSET(Entity, _impl_.primary_id_)>(
          reinterpret_cast<char*>(&_impl_.primary_id_),
          reinterpret_cast<char*>(&other->_impl_.primary_id_));
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[1]);
}
// ===================================================================

class Timestamp::_Internal {
 public:
  using HasBits = decltype(std::declval<Timestamp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Timestamp, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& posix_time(const Timestamp* msg);
  static void set_has_posix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& posix_time_fraction(const Timestamp* msg);
  static void set_has_posix_time_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Int64Value& Timestamp::_Internal::posix_time(const Timestamp* msg) {
  return *msg->_impl_.posix_time_;
}
const ::google::protobuf::Int64Value& Timestamp::_Internal::posix_time_fraction(const Timestamp* msg) {
  return *msg->_impl_.posix_time_fraction_;
}
void Timestamp::clear_posix_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.posix_time_ != nullptr) _impl_.posix_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Timestamp::clear_posix_time_fraction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.posix_time_fraction_ != nullptr) _impl_.posix_time_fraction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Timestamp::Timestamp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Timestamp)
}
inline PROTOBUF_NDEBUG_INLINE Timestamp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Timestamp::Timestamp(
    ::google::protobuf::Arena* arena,
    const Timestamp& from)
    : ::google::protobuf::Message(arena) {
  Timestamp* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.posix_time_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.posix_time_)
                : nullptr;
  _impl_.posix_time_fraction_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.posix_time_fraction_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Timestamp)
}
inline PROTOBUF_NDEBUG_INLINE Timestamp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Timestamp::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, posix_time_),
           0,
           offsetof(Impl_, posix_time_fraction_) -
               offsetof(Impl_, posix_time_) +
               sizeof(Impl_::posix_time_fraction_));
}
Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Timestamp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Timestamp::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.posix_time_;
  delete _impl_.posix_time_fraction_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Timestamp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.posix_time_ != nullptr);
      _impl_.posix_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.posix_time_fraction_ != nullptr);
      _impl_.posix_time_fraction_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Timestamp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Timestamp, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Timestamp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Int64Value posix_time_fraction = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.posix_time_fraction_)}},
    // .google.protobuf.Int64Value posix_time = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.posix_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Int64Value posix_time = 1;
    {PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.posix_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value posix_time_fraction = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.posix_time_fraction_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* Timestamp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Timestamp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value posix_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::posix_time(this),
        _Internal::posix_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value posix_time_fraction = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::posix_time_fraction(this),
        _Internal::posix_time_fraction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Timestamp)
  return target;
}

::size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Timestamp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Int64Value posix_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.posix_time_);
    }

    // .google.protobuf.Int64Value posix_time_fraction = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.posix_time_fraction_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Timestamp::_class_data_ = {
    Timestamp::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Timestamp::GetClassData() const {
  return &_class_data_;
}

void Timestamp::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Timestamp*>(&to_msg);
  auto& from = static_cast<const Timestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Timestamp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_posix_time()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_posix_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_posix_time_fraction()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_posix_time_fraction());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Timestamp::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Timestamp::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Timestamp::InternalSwap(Timestamp* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.posix_time_fraction_)
      + sizeof(Timestamp::_impl_.posix_time_fraction_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.posix_time_)>(
          reinterpret_cast<char*>(&_impl_.posix_time_),
          reinterpret_cast<char*>(&other->_impl_.posix_time_));
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[2]);
}
// ===================================================================

class TimestampInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<TimestampInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TimestampInterval, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Timestamp& start_inclusive(const TimestampInterval* msg);
  static void set_has_start_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Timestamp& end_exclusive(const TimestampInterval* msg);
  static void set_has_end_exclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::base::Timestamp& TimestampInterval::_Internal::start_inclusive(const TimestampInterval* msg) {
  return *msg->_impl_.start_inclusive_;
}
const ::sensoris::protobuf::types::base::Timestamp& TimestampInterval::_Internal::end_exclusive(const TimestampInterval* msg) {
  return *msg->_impl_.end_exclusive_;
}
TimestampInterval::TimestampInterval(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.TimestampInterval)
}
inline PROTOBUF_NDEBUG_INLINE TimestampInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TimestampInterval::TimestampInterval(
    ::google::protobuf::Arena* arena,
    const TimestampInterval& from)
    : ::google::protobuf::Message(arena) {
  TimestampInterval* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_inclusive_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Timestamp>(arena, *from._impl_.start_inclusive_)
                : nullptr;
  _impl_.end_exclusive_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Timestamp>(arena, *from._impl_.end_exclusive_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.TimestampInterval)
}
inline PROTOBUF_NDEBUG_INLINE TimestampInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TimestampInterval::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_inclusive_),
           0,
           offsetof(Impl_, end_exclusive_) -
               offsetof(Impl_, start_inclusive_) +
               sizeof(Impl_::end_exclusive_));
}
TimestampInterval::~TimestampInterval() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.TimestampInterval)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TimestampInterval::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.start_inclusive_;
  delete _impl_.end_exclusive_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TimestampInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.TimestampInterval)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_inclusive_ != nullptr);
      _impl_.start_inclusive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_exclusive_ != nullptr);
      _impl_.end_exclusive_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TimestampInterval::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TimestampInterval::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TimestampInterval, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TimestampInterval_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Timestamp end_exclusive = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TimestampInterval, _impl_.end_exclusive_)}},
    // .sensoris.protobuf.types.base.Timestamp start_inclusive = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TimestampInterval, _impl_.start_inclusive_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Timestamp start_inclusive = 1;
    {PROTOBUF_FIELD_OFFSET(TimestampInterval, _impl_.start_inclusive_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Timestamp end_exclusive = 2;
    {PROTOBUF_FIELD_OFFSET(TimestampInterval, _impl_.end_exclusive_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Timestamp>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* TimestampInterval::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.TimestampInterval)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Timestamp start_inclusive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::start_inclusive(this),
        _Internal::start_inclusive(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Timestamp end_exclusive = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::end_exclusive(this),
        _Internal::end_exclusive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.TimestampInterval)
  return target;
}

::size_t TimestampInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.TimestampInterval)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.base.Timestamp start_inclusive = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.start_inclusive_);
    }

    // .sensoris.protobuf.types.base.Timestamp end_exclusive = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.end_exclusive_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TimestampInterval::_class_data_ = {
    TimestampInterval::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TimestampInterval::GetClassData() const {
  return &_class_data_;
}

void TimestampInterval::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TimestampInterval*>(&to_msg);
  auto& from = static_cast<const TimestampInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.TimestampInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_inclusive()->::sensoris::protobuf::types::base::Timestamp::MergeFrom(
          from._internal_start_inclusive());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_exclusive()->::sensoris::protobuf::types::base::Timestamp::MergeFrom(
          from._internal_end_exclusive());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TimestampInterval::CopyFrom(const TimestampInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.TimestampInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TimestampInterval::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TimestampInterval::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TimestampInterval::InternalSwap(TimestampInterval* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimestampInterval, _impl_.end_exclusive_)
      + sizeof(TimestampInterval::_impl_.end_exclusive_)
      - PROTOBUF_FIELD_OFFSET(TimestampInterval, _impl_.start_inclusive_)>(
          reinterpret_cast<char*>(&_impl_.start_inclusive_),
          reinterpret_cast<char*>(&other->_impl_.start_inclusive_));
}

::google::protobuf::Metadata TimestampInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[3]);
}
// ===================================================================

class EventEnvelope::_Internal {
 public:
  using HasBits = decltype(std::declval<EventEnvelope>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& id(const EventEnvelope* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Timestamp& timestamp(const EventEnvelope* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Int64Value& EventEnvelope::_Internal::id(const EventEnvelope* msg) {
  return *msg->_impl_.id_;
}
const ::sensoris::protobuf::types::base::Timestamp& EventEnvelope::_Internal::timestamp(const EventEnvelope* msg) {
  return *msg->_impl_.timestamp_;
}
void EventEnvelope::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EventEnvelope::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
EventEnvelope::EventEnvelope(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.EventEnvelope)
}
inline PROTOBUF_NDEBUG_INLINE EventEnvelope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extension_{visibility, arena, from.extension_} {}

EventEnvelope::EventEnvelope(
    ::google::protobuf::Arena* arena,
    const EventEnvelope& from)
    : ::google::protobuf::Message(arena) {
  EventEnvelope* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.id_)
                : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.EventEnvelope)
}
inline PROTOBUF_NDEBUG_INLINE EventEnvelope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extension_{visibility, arena} {}

inline void EventEnvelope::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::timestamp_));
}
EventEnvelope::~EventEnvelope() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.EventEnvelope)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EventEnvelope::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.id_;
  delete _impl_.timestamp_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EventEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.EventEnvelope)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EventEnvelope::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> EventEnvelope::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_._has_bits_),
    0, // no _extensions_
    15, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950908,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EventEnvelope_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Int64Value id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_.id_)}},
    // .sensoris.protobuf.types.base.Timestamp timestamp = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_.timestamp_)}},
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 2, PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Int64Value id = 1;
    {PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Timestamp timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_.extension_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* EventEnvelope::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.EventEnvelope)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Timestamp timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.EventEnvelope)
  return target;
}

::size_t EventEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.EventEnvelope)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Int64Value id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.id_);
    }

    // .sensoris.protobuf.types.base.Timestamp timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EventEnvelope::_class_data_ = {
    EventEnvelope::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EventEnvelope::GetClassData() const {
  return &_class_data_;
}

void EventEnvelope::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EventEnvelope*>(&to_msg);
  auto& from = static_cast<const EventEnvelope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.EventEnvelope)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_id()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::sensoris::protobuf::types::base::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EventEnvelope::CopyFrom(const EventEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.EventEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EventEnvelope::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EventEnvelope::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EventEnvelope::InternalSwap(EventEnvelope* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_.timestamp_)
      + sizeof(EventEnvelope::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(EventEnvelope, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata EventEnvelope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[4]);
}
// ===================================================================

class EventDetectionStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDetectionStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventDetectionStatus, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const EventDetectionStatus* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& EventDetectionStatus::_Internal::confidence(const EventDetectionStatus* msg) {
  return *msg->_impl_.confidence_;
}
EventDetectionStatus::EventDetectionStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.EventDetectionStatus)
}
inline PROTOBUF_NDEBUG_INLINE EventDetectionStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EventDetectionStatus::EventDetectionStatus(
    ::google::protobuf::Arena* arena,
    const EventDetectionStatus& from)
    : ::google::protobuf::Message(arena) {
  EventDetectionStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.EventDetectionStatus)
}
inline PROTOBUF_NDEBUG_INLINE EventDetectionStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EventDetectionStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
EventDetectionStatus::~EventDetectionStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.EventDetectionStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EventDetectionStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EventDetectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.EventDetectionStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EventDetectionStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> EventDetectionStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EventDetectionStatus, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EventDetectionStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(EventDetectionStatus, _impl_.confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EventDetectionStatus, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(EventDetectionStatus, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventDetectionStatus.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(EventDetectionStatus, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(EventDetectionStatus, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* EventDetectionStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.EventDetectionStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.types.base.EventDetectionStatus.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.EventDetectionStatus)
  return target;
}

::size_t EventDetectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.EventDetectionStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EventDetectionStatus::_class_data_ = {
    EventDetectionStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EventDetectionStatus::GetClassData() const {
  return &_class_data_;
}

void EventDetectionStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EventDetectionStatus*>(&to_msg);
  auto& from = static_cast<const EventDetectionStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.EventDetectionStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EventDetectionStatus::CopyFrom(const EventDetectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.EventDetectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EventDetectionStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EventDetectionStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EventDetectionStatus::InternalSwap(EventDetectionStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDetectionStatus, _impl_.type_)
      + sizeof(EventDetectionStatus::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(EventDetectionStatus, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata EventDetectionStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[5]);
}
// ===================================================================

class CategoryEnvelope::_Internal {
 public:
};

void CategoryEnvelope::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
CategoryEnvelope::CategoryEnvelope(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.CategoryEnvelope)
}
inline PROTOBUF_NDEBUG_INLINE CategoryEnvelope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : extension_{visibility, arena, from.extension_},
        _cached_size_{0} {}

CategoryEnvelope::CategoryEnvelope(
    ::google::protobuf::Arena* arena,
    const CategoryEnvelope& from)
    : ::google::protobuf::Message(arena) {
  CategoryEnvelope* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.CategoryEnvelope)
}
inline PROTOBUF_NDEBUG_INLINE CategoryEnvelope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : extension_{visibility, arena},
        _cached_size_{0} {}

inline void CategoryEnvelope::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CategoryEnvelope::~CategoryEnvelope() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.CategoryEnvelope)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CategoryEnvelope::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CategoryEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.CategoryEnvelope)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CategoryEnvelope::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CategoryEnvelope::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    15, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950911,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CategoryEnvelope_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(CategoryEnvelope, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(CategoryEnvelope, _impl_.extension_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* CategoryEnvelope::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.CategoryEnvelope)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.CategoryEnvelope)
  return target;
}

::size_t CategoryEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.CategoryEnvelope)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CategoryEnvelope::_class_data_ = {
    CategoryEnvelope::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CategoryEnvelope::GetClassData() const {
  return &_class_data_;
}

void CategoryEnvelope::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CategoryEnvelope*>(&to_msg);
  auto& from = static_cast<const CategoryEnvelope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.CategoryEnvelope)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryEnvelope::CopyFrom(const CategoryEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.CategoryEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CategoryEnvelope::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CategoryEnvelope::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CategoryEnvelope::InternalSwap(CategoryEnvelope* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
}

::google::protobuf::Metadata CategoryEnvelope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[6]);
}
// ===================================================================

class Int64StatisticMeasure::_Internal {
 public:
  using HasBits = decltype(std::declval<Int64StatisticMeasure>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval(const Int64StatisticMeasure* msg);
  static void set_has_timestamp_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::TimestampInterval& Int64StatisticMeasure::_Internal::timestamp_interval(const Int64StatisticMeasure* msg) {
  return *msg->_impl_.timestamp_interval_;
}
Int64StatisticMeasure::Int64StatisticMeasure(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Int64StatisticMeasure)
}
inline PROTOBUF_NDEBUG_INLINE Int64StatisticMeasure::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Int64StatisticMeasure::Int64StatisticMeasure(
    ::google::protobuf::Arena* arena,
    const Int64StatisticMeasure& from)
    : ::google::protobuf::Message(arena) {
  Int64StatisticMeasure* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_interval_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(arena, *from._impl_.timestamp_interval_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, value_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Int64StatisticMeasure)
}
inline PROTOBUF_NDEBUG_INLINE Int64StatisticMeasure::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Int64StatisticMeasure::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_interval_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, timestamp_interval_) +
               sizeof(Impl_::type_));
}
Int64StatisticMeasure::~Int64StatisticMeasure() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Int64StatisticMeasure)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Int64StatisticMeasure::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.timestamp_interval_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Int64StatisticMeasure::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Int64StatisticMeasure)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_interval_ != nullptr);
    _impl_.timestamp_interval_->Clear();
  }
  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Int64StatisticMeasure::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Int64StatisticMeasure::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Int64StatisticMeasure_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_.timestamp_interval_)}},
    // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Int64StatisticMeasure, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_.type_)}},
    // int64 value = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Int64StatisticMeasure, _impl_.value_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_.timestamp_interval_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
    {PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 value = 3;
    {PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::TimestampInterval>()},
  }}, {{
  }},
};

::uint8_t* Int64StatisticMeasure::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Int64StatisticMeasure)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp_interval(this),
        _Internal::timestamp_interval(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // int64 value = 3;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Int64StatisticMeasure)
  return target;
}

::size_t Int64StatisticMeasure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Int64StatisticMeasure)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_interval_);
  }

  // int64 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_value());
  }

  // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Int64StatisticMeasure::_class_data_ = {
    Int64StatisticMeasure::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Int64StatisticMeasure::GetClassData() const {
  return &_class_data_;
}

void Int64StatisticMeasure::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Int64StatisticMeasure*>(&to_msg);
  auto& from = static_cast<const Int64StatisticMeasure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Int64StatisticMeasure)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp_interval()->::sensoris::protobuf::types::base::TimestampInterval::MergeFrom(
        from._internal_timestamp_interval());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Int64StatisticMeasure::CopyFrom(const Int64StatisticMeasure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Int64StatisticMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Int64StatisticMeasure::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Int64StatisticMeasure::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Int64StatisticMeasure::InternalSwap(Int64StatisticMeasure* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_.type_)
      + sizeof(Int64StatisticMeasure::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Int64StatisticMeasure, _impl_.timestamp_interval_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_interval_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_interval_));
}

::google::protobuf::Metadata Int64StatisticMeasure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[7]);
}
// ===================================================================

class Int64StatisticMeasureAndAccuracy::_Internal {
 public:
  using HasBits = decltype(std::declval<Int64StatisticMeasureAndAccuracy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval(const Int64StatisticMeasureAndAccuracy* msg);
  static void set_has_timestamp_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& accuracy(const Int64StatisticMeasureAndAccuracy* msg);
  static void set_has_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::base::TimestampInterval& Int64StatisticMeasureAndAccuracy::_Internal::timestamp_interval(const Int64StatisticMeasureAndAccuracy* msg) {
  return *msg->_impl_.timestamp_interval_;
}
const ::google::protobuf::Int64Value& Int64StatisticMeasureAndAccuracy::_Internal::accuracy(const Int64StatisticMeasureAndAccuracy* msg) {
  return *msg->_impl_.accuracy_;
}
void Int64StatisticMeasureAndAccuracy::clear_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.accuracy_ != nullptr) _impl_.accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Int64StatisticMeasureAndAccuracy::Int64StatisticMeasureAndAccuracy(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
}
inline PROTOBUF_NDEBUG_INLINE Int64StatisticMeasureAndAccuracy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Int64StatisticMeasureAndAccuracy::Int64StatisticMeasureAndAccuracy(
    ::google::protobuf::Arena* arena,
    const Int64StatisticMeasureAndAccuracy& from)
    : ::google::protobuf::Message(arena) {
  Int64StatisticMeasureAndAccuracy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_interval_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(arena, *from._impl_.timestamp_interval_)
                : nullptr;
  _impl_.accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.accuracy_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, value_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
}
inline PROTOBUF_NDEBUG_INLINE Int64StatisticMeasureAndAccuracy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Int64StatisticMeasureAndAccuracy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_interval_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, timestamp_interval_) +
               sizeof(Impl_::type_));
}
Int64StatisticMeasureAndAccuracy::~Int64StatisticMeasureAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Int64StatisticMeasureAndAccuracy::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.timestamp_interval_;
  delete _impl_.accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Int64StatisticMeasureAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_interval_ != nullptr);
      _impl_.timestamp_interval_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.accuracy_ != nullptr);
      _impl_.accuracy_->Clear();
    }
  }
  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Int64StatisticMeasureAndAccuracy::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> Int64StatisticMeasureAndAccuracy::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Int64StatisticMeasureAndAccuracy_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Int64Value accuracy = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.accuracy_)}},
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.timestamp_interval_)}},
    // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Int64StatisticMeasureAndAccuracy, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.type_)}},
    // int64 value = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Int64StatisticMeasureAndAccuracy, _impl_.value_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.timestamp_interval_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
    {PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 value = 3;
    {PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Int64Value accuracy = 4;
    {PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::TimestampInterval>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* Int64StatisticMeasureAndAccuracy::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp_interval(this),
        _Internal::timestamp_interval(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // int64 value = 3;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_value(), target);
  }

  // .google.protobuf.Int64Value accuracy = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::accuracy(this),
        _Internal::accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
  return target;
}

::size_t Int64StatisticMeasureAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_interval_);
    }

    // .google.protobuf.Int64Value accuracy = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.accuracy_);
    }

  }
  // int64 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_value());
  }

  // .sensoris.protobuf.types.base.StatisticMeasureType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Int64StatisticMeasureAndAccuracy::_class_data_ = {
    Int64StatisticMeasureAndAccuracy::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Int64StatisticMeasureAndAccuracy::GetClassData() const {
  return &_class_data_;
}

void Int64StatisticMeasureAndAccuracy::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Int64StatisticMeasureAndAccuracy*>(&to_msg);
  auto& from = static_cast<const Int64StatisticMeasureAndAccuracy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp_interval()->::sensoris::protobuf::types::base::TimestampInterval::MergeFrom(
          from._internal_timestamp_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_accuracy()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_accuracy());
    }
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Int64StatisticMeasureAndAccuracy::CopyFrom(const Int64StatisticMeasureAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Int64StatisticMeasureAndAccuracy::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Int64StatisticMeasureAndAccuracy::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Int64StatisticMeasureAndAccuracy::InternalSwap(Int64StatisticMeasureAndAccuracy* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.type_)
      + sizeof(Int64StatisticMeasureAndAccuracy::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Int64StatisticMeasureAndAccuracy, _impl_.timestamp_interval_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_interval_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_interval_));
}

::google::protobuf::Metadata Int64StatisticMeasureAndAccuracy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[8]);
}
// ===================================================================

class AbsoluteInt64Histogram_Bin::_Internal {
 public:
  using HasBits = decltype(std::declval<AbsoluteInt64Histogram_Bin>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram_Bin, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& lower_endpoint_inclusive(const AbsoluteInt64Histogram_Bin* msg);
  static void set_has_lower_endpoint_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& frequency(const AbsoluteInt64Histogram_Bin* msg);
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Int64Value& AbsoluteInt64Histogram_Bin::_Internal::lower_endpoint_inclusive(const AbsoluteInt64Histogram_Bin* msg) {
  return *msg->_impl_.lower_endpoint_inclusive_;
}
const ::google::protobuf::Int64Value& AbsoluteInt64Histogram_Bin::_Internal::frequency(const AbsoluteInt64Histogram_Bin* msg) {
  return *msg->_impl_.frequency_;
}
void AbsoluteInt64Histogram_Bin::clear_lower_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lower_endpoint_inclusive_ != nullptr) _impl_.lower_endpoint_inclusive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AbsoluteInt64Histogram_Bin::clear_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.frequency_ != nullptr) _impl_.frequency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AbsoluteInt64Histogram_Bin::AbsoluteInt64Histogram_Bin(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
}
inline PROTOBUF_NDEBUG_INLINE AbsoluteInt64Histogram_Bin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AbsoluteInt64Histogram_Bin::AbsoluteInt64Histogram_Bin(
    ::google::protobuf::Arena* arena,
    const AbsoluteInt64Histogram_Bin& from)
    : ::google::protobuf::Message(arena) {
  AbsoluteInt64Histogram_Bin* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.lower_endpoint_inclusive_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.lower_endpoint_inclusive_)
                : nullptr;
  _impl_.frequency_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.frequency_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
}
inline PROTOBUF_NDEBUG_INLINE AbsoluteInt64Histogram_Bin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AbsoluteInt64Histogram_Bin::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lower_endpoint_inclusive_),
           0,
           offsetof(Impl_, frequency_) -
               offsetof(Impl_, lower_endpoint_inclusive_) +
               sizeof(Impl_::frequency_));
}
AbsoluteInt64Histogram_Bin::~AbsoluteInt64Histogram_Bin() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AbsoluteInt64Histogram_Bin::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.lower_endpoint_inclusive_;
  delete _impl_.frequency_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AbsoluteInt64Histogram_Bin::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.lower_endpoint_inclusive_ != nullptr);
      _impl_.lower_endpoint_inclusive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.frequency_ != nullptr);
      _impl_.frequency_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AbsoluteInt64Histogram_Bin::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> AbsoluteInt64Histogram_Bin::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram_Bin, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AbsoluteInt64Histogram_Bin_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Int64Value frequency = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram_Bin, _impl_.frequency_)}},
    // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram_Bin, _impl_.lower_endpoint_inclusive_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
    {PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram_Bin, _impl_.lower_endpoint_inclusive_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value frequency = 2;
    {PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram_Bin, _impl_.frequency_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* AbsoluteInt64Histogram_Bin::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::lower_endpoint_inclusive(this),
        _Internal::lower_endpoint_inclusive(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value frequency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::frequency(this),
        _Internal::frequency(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
  return target;
}

::size_t AbsoluteInt64Histogram_Bin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lower_endpoint_inclusive_);
    }

    // .google.protobuf.Int64Value frequency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.frequency_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AbsoluteInt64Histogram_Bin::_class_data_ = {
    AbsoluteInt64Histogram_Bin::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AbsoluteInt64Histogram_Bin::GetClassData() const {
  return &_class_data_;
}

void AbsoluteInt64Histogram_Bin::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AbsoluteInt64Histogram_Bin*>(&to_msg);
  auto& from = static_cast<const AbsoluteInt64Histogram_Bin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_lower_endpoint_inclusive()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_lower_endpoint_inclusive());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_frequency()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_frequency());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AbsoluteInt64Histogram_Bin::CopyFrom(const AbsoluteInt64Histogram_Bin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AbsoluteInt64Histogram_Bin::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AbsoluteInt64Histogram_Bin::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AbsoluteInt64Histogram_Bin::InternalSwap(AbsoluteInt64Histogram_Bin* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram_Bin, _impl_.frequency_)
      + sizeof(AbsoluteInt64Histogram_Bin::_impl_.frequency_)
      - PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram_Bin, _impl_.lower_endpoint_inclusive_)>(
          reinterpret_cast<char*>(&_impl_.lower_endpoint_inclusive_),
          reinterpret_cast<char*>(&other->_impl_.lower_endpoint_inclusive_));
}

::google::protobuf::Metadata AbsoluteInt64Histogram_Bin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[9]);
}
// ===================================================================

class AbsoluteInt64Histogram::_Internal {
 public:
  using HasBits = decltype(std::declval<AbsoluteInt64Histogram>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval(const AbsoluteInt64Histogram* msg);
  static void set_has_timestamp_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& total_elements(const AbsoluteInt64Histogram* msg);
  static void set_has_total_elements(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Int64Value& upper_endpoint_inclusive(const AbsoluteInt64Histogram* msg);
  static void set_has_upper_endpoint_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::TimestampInterval& AbsoluteInt64Histogram::_Internal::timestamp_interval(const AbsoluteInt64Histogram* msg) {
  return *msg->_impl_.timestamp_interval_;
}
const ::google::protobuf::Int64Value& AbsoluteInt64Histogram::_Internal::total_elements(const AbsoluteInt64Histogram* msg) {
  return *msg->_impl_.total_elements_;
}
const ::google::protobuf::Int64Value& AbsoluteInt64Histogram::_Internal::upper_endpoint_inclusive(const AbsoluteInt64Histogram* msg) {
  return *msg->_impl_.upper_endpoint_inclusive_;
}
void AbsoluteInt64Histogram::clear_total_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.total_elements_ != nullptr) _impl_.total_elements_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AbsoluteInt64Histogram::clear_upper_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.upper_endpoint_inclusive_ != nullptr) _impl_.upper_endpoint_inclusive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AbsoluteInt64Histogram::AbsoluteInt64Histogram(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
}
inline PROTOBUF_NDEBUG_INLINE AbsoluteInt64Histogram::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bin_{visibility, arena, from.bin_} {}

AbsoluteInt64Histogram::AbsoluteInt64Histogram(
    ::google::protobuf::Arena* arena,
    const AbsoluteInt64Histogram& from)
    : ::google::protobuf::Message(arena) {
  AbsoluteInt64Histogram* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_interval_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(arena, *from._impl_.timestamp_interval_)
                : nullptr;
  _impl_.total_elements_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.total_elements_)
                : nullptr;
  _impl_.upper_endpoint_inclusive_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.upper_endpoint_inclusive_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
}
inline PROTOBUF_NDEBUG_INLINE AbsoluteInt64Histogram::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bin_{visibility, arena} {}

inline void AbsoluteInt64Histogram::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_interval_),
           0,
           offsetof(Impl_, upper_endpoint_inclusive_) -
               offsetof(Impl_, timestamp_interval_) +
               sizeof(Impl_::upper_endpoint_inclusive_));
}
AbsoluteInt64Histogram::~AbsoluteInt64Histogram() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AbsoluteInt64Histogram::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.timestamp_interval_;
  delete _impl_.total_elements_;
  delete _impl_.upper_endpoint_inclusive_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AbsoluteInt64Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bin_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_interval_ != nullptr);
      _impl_.timestamp_interval_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.total_elements_ != nullptr);
      _impl_.total_elements_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.upper_endpoint_inclusive_ != nullptr);
      _impl_.upper_endpoint_inclusive_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AbsoluteInt64Histogram::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> AbsoluteInt64Histogram::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AbsoluteInt64Histogram_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 3, PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.upper_endpoint_inclusive_)}},
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.timestamp_interval_)}},
    // .google.protobuf.Int64Value total_elements = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.total_elements_)}},
    // repeated .sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin bin = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.bin_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.timestamp_interval_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value total_elements = 2;
    {PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.total_elements_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin bin = 3;
    {PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.bin_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
    {PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.upper_endpoint_inclusive_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::TimestampInterval>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::AbsoluteInt64Histogram_Bin>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* AbsoluteInt64Histogram::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp_interval(this),
        _Internal::timestamp_interval(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value total_elements = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::total_elements(this),
        _Internal::total_elements(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin bin = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bin_size()); i < n; i++) {
    const auto& repfield = this->_internal_bin().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::upper_endpoint_inclusive(this),
        _Internal::upper_endpoint_inclusive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
  return target;
}

::size_t AbsoluteInt64Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.types.base.AbsoluteInt64Histogram.Bin bin = 3;
  total_size += 1UL * this->_internal_bin_size();
  for (const auto& msg : this->_internal_bin()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_interval_);
    }

    // .google.protobuf.Int64Value total_elements = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.total_elements_);
    }

    // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.upper_endpoint_inclusive_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AbsoluteInt64Histogram::_class_data_ = {
    AbsoluteInt64Histogram::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AbsoluteInt64Histogram::GetClassData() const {
  return &_class_data_;
}

void AbsoluteInt64Histogram::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AbsoluteInt64Histogram*>(&to_msg);
  auto& from = static_cast<const AbsoluteInt64Histogram&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bin()->MergeFrom(
      from._internal_bin());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp_interval()->::sensoris::protobuf::types::base::TimestampInterval::MergeFrom(
          from._internal_timestamp_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_total_elements()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_total_elements());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_upper_endpoint_inclusive()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_upper_endpoint_inclusive());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AbsoluteInt64Histogram::CopyFrom(const AbsoluteInt64Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.AbsoluteInt64Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AbsoluteInt64Histogram::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AbsoluteInt64Histogram::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AbsoluteInt64Histogram::InternalSwap(AbsoluteInt64Histogram* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bin_.InternalSwap(&other->_impl_.bin_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.upper_endpoint_inclusive_)
      + sizeof(AbsoluteInt64Histogram::_impl_.upper_endpoint_inclusive_)
      - PROTOBUF_FIELD_OFFSET(AbsoluteInt64Histogram, _impl_.timestamp_interval_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_interval_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_interval_));
}

::google::protobuf::Metadata AbsoluteInt64Histogram::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[10]);
}
// ===================================================================

class RelativeInt64Histogram_Bin::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeInt64Histogram_Bin>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram_Bin, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& lower_endpoint_inclusive(const RelativeInt64Histogram_Bin* msg);
  static void set_has_lower_endpoint_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& relative_frequency(const RelativeInt64Histogram_Bin* msg);
  static void set_has_relative_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Int64Value& RelativeInt64Histogram_Bin::_Internal::lower_endpoint_inclusive(const RelativeInt64Histogram_Bin* msg) {
  return *msg->_impl_.lower_endpoint_inclusive_;
}
const ::google::protobuf::Int64Value& RelativeInt64Histogram_Bin::_Internal::relative_frequency(const RelativeInt64Histogram_Bin* msg) {
  return *msg->_impl_.relative_frequency_;
}
void RelativeInt64Histogram_Bin::clear_lower_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lower_endpoint_inclusive_ != nullptr) _impl_.lower_endpoint_inclusive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RelativeInt64Histogram_Bin::clear_relative_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.relative_frequency_ != nullptr) _impl_.relative_frequency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RelativeInt64Histogram_Bin::RelativeInt64Histogram_Bin(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
}
inline PROTOBUF_NDEBUG_INLINE RelativeInt64Histogram_Bin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RelativeInt64Histogram_Bin::RelativeInt64Histogram_Bin(
    ::google::protobuf::Arena* arena,
    const RelativeInt64Histogram_Bin& from)
    : ::google::protobuf::Message(arena) {
  RelativeInt64Histogram_Bin* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.lower_endpoint_inclusive_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.lower_endpoint_inclusive_)
                : nullptr;
  _impl_.relative_frequency_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.relative_frequency_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
}
inline PROTOBUF_NDEBUG_INLINE RelativeInt64Histogram_Bin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RelativeInt64Histogram_Bin::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lower_endpoint_inclusive_),
           0,
           offsetof(Impl_, relative_frequency_) -
               offsetof(Impl_, lower_endpoint_inclusive_) +
               sizeof(Impl_::relative_frequency_));
}
RelativeInt64Histogram_Bin::~RelativeInt64Histogram_Bin() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RelativeInt64Histogram_Bin::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.lower_endpoint_inclusive_;
  delete _impl_.relative_frequency_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RelativeInt64Histogram_Bin::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.lower_endpoint_inclusive_ != nullptr);
      _impl_.lower_endpoint_inclusive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.relative_frequency_ != nullptr);
      _impl_.relative_frequency_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RelativeInt64Histogram_Bin::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 2, 2, 0, 2> RelativeInt64Histogram_Bin::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram_Bin, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967290,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RelativeInt64Histogram_Bin_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram_Bin, _impl_.lower_endpoint_inclusive_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Int64Value relative_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram_Bin, _impl_.relative_frequency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
    {PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram_Bin, _impl_.lower_endpoint_inclusive_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value relative_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
    {PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram_Bin, _impl_.relative_frequency_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* RelativeInt64Histogram_Bin::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::lower_endpoint_inclusive(this),
        _Internal::lower_endpoint_inclusive(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value relative_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::relative_frequency(this),
        _Internal::relative_frequency(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
  return target;
}

::size_t RelativeInt64Histogram_Bin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Int64Value lower_endpoint_inclusive = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lower_endpoint_inclusive_);
    }

    // .google.protobuf.Int64Value relative_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.relative_frequency_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RelativeInt64Histogram_Bin::_class_data_ = {
    RelativeInt64Histogram_Bin::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RelativeInt64Histogram_Bin::GetClassData() const {
  return &_class_data_;
}

void RelativeInt64Histogram_Bin::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RelativeInt64Histogram_Bin*>(&to_msg);
  auto& from = static_cast<const RelativeInt64Histogram_Bin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_lower_endpoint_inclusive()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_lower_endpoint_inclusive());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_relative_frequency()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_relative_frequency());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RelativeInt64Histogram_Bin::CopyFrom(const RelativeInt64Histogram_Bin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.RelativeInt64Histogram.Bin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RelativeInt64Histogram_Bin::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RelativeInt64Histogram_Bin::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RelativeInt64Histogram_Bin::InternalSwap(RelativeInt64Histogram_Bin* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram_Bin, _impl_.relative_frequency_)
      + sizeof(RelativeInt64Histogram_Bin::_impl_.relative_frequency_)
      - PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram_Bin, _impl_.lower_endpoint_inclusive_)>(
          reinterpret_cast<char*>(&_impl_.lower_endpoint_inclusive_),
          reinterpret_cast<char*>(&other->_impl_.lower_endpoint_inclusive_));
}

::google::protobuf::Metadata RelativeInt64Histogram_Bin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[11]);
}
// ===================================================================

class RelativeInt64Histogram::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeInt64Histogram>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval(const RelativeInt64Histogram* msg);
  static void set_has_timestamp_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& total_elements(const RelativeInt64Histogram* msg);
  static void set_has_total_elements(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Int64Value& upper_endpoint_inclusive(const RelativeInt64Histogram* msg);
  static void set_has_upper_endpoint_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::TimestampInterval& RelativeInt64Histogram::_Internal::timestamp_interval(const RelativeInt64Histogram* msg) {
  return *msg->_impl_.timestamp_interval_;
}
const ::google::protobuf::Int64Value& RelativeInt64Histogram::_Internal::total_elements(const RelativeInt64Histogram* msg) {
  return *msg->_impl_.total_elements_;
}
const ::google::protobuf::Int64Value& RelativeInt64Histogram::_Internal::upper_endpoint_inclusive(const RelativeInt64Histogram* msg) {
  return *msg->_impl_.upper_endpoint_inclusive_;
}
void RelativeInt64Histogram::clear_total_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.total_elements_ != nullptr) _impl_.total_elements_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RelativeInt64Histogram::clear_upper_endpoint_inclusive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.upper_endpoint_inclusive_ != nullptr) _impl_.upper_endpoint_inclusive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RelativeInt64Histogram::RelativeInt64Histogram(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.RelativeInt64Histogram)
}
inline PROTOBUF_NDEBUG_INLINE RelativeInt64Histogram::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bin_{visibility, arena, from.bin_} {}

RelativeInt64Histogram::RelativeInt64Histogram(
    ::google::protobuf::Arena* arena,
    const RelativeInt64Histogram& from)
    : ::google::protobuf::Message(arena) {
  RelativeInt64Histogram* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_interval_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(arena, *from._impl_.timestamp_interval_)
                : nullptr;
  _impl_.total_elements_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.total_elements_)
                : nullptr;
  _impl_.upper_endpoint_inclusive_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.upper_endpoint_inclusive_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.RelativeInt64Histogram)
}
inline PROTOBUF_NDEBUG_INLINE RelativeInt64Histogram::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bin_{visibility, arena} {}

inline void RelativeInt64Histogram::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_interval_),
           0,
           offsetof(Impl_, upper_endpoint_inclusive_) -
               offsetof(Impl_, timestamp_interval_) +
               sizeof(Impl_::upper_endpoint_inclusive_));
}
RelativeInt64Histogram::~RelativeInt64Histogram() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.RelativeInt64Histogram)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RelativeInt64Histogram::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.timestamp_interval_;
  delete _impl_.total_elements_;
  delete _impl_.upper_endpoint_inclusive_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RelativeInt64Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.RelativeInt64Histogram)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bin_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_interval_ != nullptr);
      _impl_.timestamp_interval_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.total_elements_ != nullptr);
      _impl_.total_elements_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.upper_endpoint_inclusive_ != nullptr);
      _impl_.upper_endpoint_inclusive_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RelativeInt64Histogram::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> RelativeInt64Histogram::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RelativeInt64Histogram_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 3, PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.upper_endpoint_inclusive_)}},
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.timestamp_interval_)}},
    // .google.protobuf.Int64Value total_elements = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.total_elements_)}},
    // repeated .sensoris.protobuf.types.base.RelativeInt64Histogram.Bin bin = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.bin_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.timestamp_interval_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value total_elements = 2;
    {PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.total_elements_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.types.base.RelativeInt64Histogram.Bin bin = 3;
    {PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.bin_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
    {PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.upper_endpoint_inclusive_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::TimestampInterval>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::RelativeInt64Histogram_Bin>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* RelativeInt64Histogram::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.RelativeInt64Histogram)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp_interval(this),
        _Internal::timestamp_interval(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value total_elements = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::total_elements(this),
        _Internal::total_elements(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.types.base.RelativeInt64Histogram.Bin bin = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bin_size()); i < n; i++) {
    const auto& repfield = this->_internal_bin().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::upper_endpoint_inclusive(this),
        _Internal::upper_endpoint_inclusive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.RelativeInt64Histogram)
  return target;
}

::size_t RelativeInt64Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.RelativeInt64Histogram)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.types.base.RelativeInt64Histogram.Bin bin = 3;
  total_size += 1UL * this->_internal_bin_size();
  for (const auto& msg : this->_internal_bin()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_interval_);
    }

    // .google.protobuf.Int64Value total_elements = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.total_elements_);
    }

    // .google.protobuf.Int64Value upper_endpoint_inclusive = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.upper_endpoint_inclusive_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RelativeInt64Histogram::_class_data_ = {
    RelativeInt64Histogram::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RelativeInt64Histogram::GetClassData() const {
  return &_class_data_;
}

void RelativeInt64Histogram::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RelativeInt64Histogram*>(&to_msg);
  auto& from = static_cast<const RelativeInt64Histogram&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.RelativeInt64Histogram)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bin()->MergeFrom(
      from._internal_bin());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp_interval()->::sensoris::protobuf::types::base::TimestampInterval::MergeFrom(
          from._internal_timestamp_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_total_elements()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_total_elements());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_upper_endpoint_inclusive()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_upper_endpoint_inclusive());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RelativeInt64Histogram::CopyFrom(const RelativeInt64Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.RelativeInt64Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RelativeInt64Histogram::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RelativeInt64Histogram::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RelativeInt64Histogram::InternalSwap(RelativeInt64Histogram* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bin_.InternalSwap(&other->_impl_.bin_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.upper_endpoint_inclusive_)
      + sizeof(RelativeInt64Histogram::_impl_.upper_endpoint_inclusive_)
      - PROTOBUF_FIELD_OFFSET(RelativeInt64Histogram, _impl_.timestamp_interval_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_interval_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_interval_));
}

::google::protobuf::Metadata RelativeInt64Histogram::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[12]);
}
// ===================================================================

class Int64GaussianDistribution::_Internal {
 public:
  using HasBits = decltype(std::declval<Int64GaussianDistribution>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::TimestampInterval& timestamp_interval(const Int64GaussianDistribution* msg);
  static void set_has_timestamp_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& mean(const Int64GaussianDistribution* msg);
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Int64Value& variance(const Int64GaussianDistribution* msg);
  static void set_has_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::TimestampInterval& Int64GaussianDistribution::_Internal::timestamp_interval(const Int64GaussianDistribution* msg) {
  return *msg->_impl_.timestamp_interval_;
}
const ::google::protobuf::Int64Value& Int64GaussianDistribution::_Internal::mean(const Int64GaussianDistribution* msg) {
  return *msg->_impl_.mean_;
}
const ::google::protobuf::Int64Value& Int64GaussianDistribution::_Internal::variance(const Int64GaussianDistribution* msg) {
  return *msg->_impl_.variance_;
}
void Int64GaussianDistribution::clear_mean() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.mean_ != nullptr) _impl_.mean_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Int64GaussianDistribution::clear_variance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.variance_ != nullptr) _impl_.variance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Int64GaussianDistribution::Int64GaussianDistribution(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Int64GaussianDistribution)
}
inline PROTOBUF_NDEBUG_INLINE Int64GaussianDistribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Int64GaussianDistribution::Int64GaussianDistribution(
    ::google::protobuf::Arena* arena,
    const Int64GaussianDistribution& from)
    : ::google::protobuf::Message(arena) {
  Int64GaussianDistribution* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_interval_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::TimestampInterval>(arena, *from._impl_.timestamp_interval_)
                : nullptr;
  _impl_.mean_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.mean_)
                : nullptr;
  _impl_.variance_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.variance_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Int64GaussianDistribution)
}
inline PROTOBUF_NDEBUG_INLINE Int64GaussianDistribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Int64GaussianDistribution::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_interval_),
           0,
           offsetof(Impl_, variance_) -
               offsetof(Impl_, timestamp_interval_) +
               sizeof(Impl_::variance_));
}
Int64GaussianDistribution::~Int64GaussianDistribution() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Int64GaussianDistribution)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Int64GaussianDistribution::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.timestamp_interval_;
  delete _impl_.mean_;
  delete _impl_.variance_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Int64GaussianDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Int64GaussianDistribution)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_interval_ != nullptr);
      _impl_.timestamp_interval_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mean_ != nullptr);
      _impl_.mean_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.variance_ != nullptr);
      _impl_.variance_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Int64GaussianDistribution::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Int64GaussianDistribution::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Int64GaussianDistribution_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_.timestamp_interval_)}},
    // .google.protobuf.Int64Value mean = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_.mean_)}},
    // .google.protobuf.Int64Value variance = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_.variance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    {PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_.timestamp_interval_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value mean = 2;
    {PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_.mean_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value variance = 3;
    {PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_.variance_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::TimestampInterval>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* Int64GaussianDistribution::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Int64GaussianDistribution)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp_interval(this),
        _Internal::timestamp_interval(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::mean(this),
        _Internal::mean(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value variance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::variance(this),
        _Internal::variance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Int64GaussianDistribution)
  return target;
}

::size_t Int64GaussianDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Int64GaussianDistribution)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.TimestampInterval timestamp_interval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_interval_);
    }

    // .google.protobuf.Int64Value mean = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mean_);
    }

    // .google.protobuf.Int64Value variance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.variance_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Int64GaussianDistribution::_class_data_ = {
    Int64GaussianDistribution::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Int64GaussianDistribution::GetClassData() const {
  return &_class_data_;
}

void Int64GaussianDistribution::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Int64GaussianDistribution*>(&to_msg);
  auto& from = static_cast<const Int64GaussianDistribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Int64GaussianDistribution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp_interval()->::sensoris::protobuf::types::base::TimestampInterval::MergeFrom(
          from._internal_timestamp_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mean()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_mean());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_variance()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_variance());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Int64GaussianDistribution::CopyFrom(const Int64GaussianDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Int64GaussianDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Int64GaussianDistribution::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Int64GaussianDistribution::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Int64GaussianDistribution::InternalSwap(Int64GaussianDistribution* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_.variance_)
      + sizeof(Int64GaussianDistribution::_impl_.variance_)
      - PROTOBUF_FIELD_OFFSET(Int64GaussianDistribution, _impl_.timestamp_interval_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_interval_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_interval_));
}

::google::protobuf::Metadata Int64GaussianDistribution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[13]);
}
// ===================================================================

class Int64Value::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64Value, _impl_._oneof_case_);
  static const ::sensoris::protobuf::types::base::Int64StatisticMeasure& statistic_measure(const Int64Value* msg);
  static const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& absolute_histogram(const Int64Value* msg);
  static const ::sensoris::protobuf::types::base::RelativeInt64Histogram& relative_histogram(const Int64Value* msg);
  static const ::sensoris::protobuf::types::base::Int64GaussianDistribution& gaussian_distribution(const Int64Value* msg);
};

const ::sensoris::protobuf::types::base::Int64StatisticMeasure& Int64Value::_Internal::statistic_measure(const Int64Value* msg) {
  return *msg->_impl_.value_oneof_.statistic_measure_;
}
const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& Int64Value::_Internal::absolute_histogram(const Int64Value* msg) {
  return *msg->_impl_.value_oneof_.absolute_histogram_;
}
const ::sensoris::protobuf::types::base::RelativeInt64Histogram& Int64Value::_Internal::relative_histogram(const Int64Value* msg) {
  return *msg->_impl_.value_oneof_.relative_histogram_;
}
const ::sensoris::protobuf::types::base::Int64GaussianDistribution& Int64Value::_Internal::gaussian_distribution(const Int64Value* msg) {
  return *msg->_impl_.value_oneof_.gaussian_distribution_;
}
void Int64Value::set_allocated_statistic_measure(::sensoris::protobuf::types::base::Int64StatisticMeasure* statistic_measure) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (statistic_measure) {
    ::google::protobuf::Arena* submessage_arena = statistic_measure->GetArena();
    if (message_arena != submessage_arena) {
      statistic_measure = ::google::protobuf::internal::GetOwnedMessage(message_arena, statistic_measure, submessage_arena);
    }
    set_has_statistic_measure();
    _impl_.value_oneof_.statistic_measure_ = statistic_measure;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Value.statistic_measure)
}
void Int64Value::set_allocated_absolute_histogram(::sensoris::protobuf::types::base::AbsoluteInt64Histogram* absolute_histogram) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (absolute_histogram) {
    ::google::protobuf::Arena* submessage_arena = absolute_histogram->GetArena();
    if (message_arena != submessage_arena) {
      absolute_histogram = ::google::protobuf::internal::GetOwnedMessage(message_arena, absolute_histogram, submessage_arena);
    }
    set_has_absolute_histogram();
    _impl_.value_oneof_.absolute_histogram_ = absolute_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Value.absolute_histogram)
}
void Int64Value::set_allocated_relative_histogram(::sensoris::protobuf::types::base::RelativeInt64Histogram* relative_histogram) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (relative_histogram) {
    ::google::protobuf::Arena* submessage_arena = relative_histogram->GetArena();
    if (message_arena != submessage_arena) {
      relative_histogram = ::google::protobuf::internal::GetOwnedMessage(message_arena, relative_histogram, submessage_arena);
    }
    set_has_relative_histogram();
    _impl_.value_oneof_.relative_histogram_ = relative_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Value.relative_histogram)
}
void Int64Value::set_allocated_gaussian_distribution(::sensoris::protobuf::types::base::Int64GaussianDistribution* gaussian_distribution) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (gaussian_distribution) {
    ::google::protobuf::Arena* submessage_arena = gaussian_distribution->GetArena();
    if (message_arena != submessage_arena) {
      gaussian_distribution = ::google::protobuf::internal::GetOwnedMessage(message_arena, gaussian_distribution, submessage_arena);
    }
    set_has_gaussian_distribution();
    _impl_.value_oneof_.gaussian_distribution_ = gaussian_distribution;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64Value.gaussian_distribution)
}
Int64Value::Int64Value(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Int64Value)
}
inline PROTOBUF_NDEBUG_INLINE Int64Value::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : value_oneof_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Int64Value::Int64Value(
    ::google::protobuf::Arena* arena,
    const Int64Value& from)
    : ::google::protobuf::Message(arena) {
  Int64Value* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (value_oneof_case()) {
    case VALUE_ONEOF_NOT_SET:
      break;
      case kValue:
        _impl_.value_oneof_.value_ = from._impl_.value_oneof_.value_;
        break;
      case kStatisticMeasure:
        _impl_.value_oneof_.statistic_measure_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64StatisticMeasure>(arena, *from._impl_.value_oneof_.statistic_measure_);
        break;
      case kAbsoluteHistogram:
        _impl_.value_oneof_.absolute_histogram_ = CreateMaybeMessage<::sensoris::protobuf::types::base::AbsoluteInt64Histogram>(arena, *from._impl_.value_oneof_.absolute_histogram_);
        break;
      case kRelativeHistogram:
        _impl_.value_oneof_.relative_histogram_ = CreateMaybeMessage<::sensoris::protobuf::types::base::RelativeInt64Histogram>(arena, *from._impl_.value_oneof_.relative_histogram_);
        break;
      case kGaussianDistribution:
        _impl_.value_oneof_.gaussian_distribution_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64GaussianDistribution>(arena, *from._impl_.value_oneof_.gaussian_distribution_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Int64Value)
}
inline PROTOBUF_NDEBUG_INLINE Int64Value::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_oneof_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Int64Value::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Int64Value::~Int64Value() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Int64Value)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Int64Value::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_value_oneof()) {
    clear_value_oneof();
  }
  _impl_.~Impl_();
}

void Int64Value::clear_value_oneof() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.base.Int64Value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_oneof_case()) {
    case kValue: {
      // No need to clear
      break;
    }
    case kStatisticMeasure: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.statistic_measure_;
      }
      break;
    }
    case kAbsoluteHistogram: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.absolute_histogram_;
      }
      break;
    }
    case kRelativeHistogram: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.relative_histogram_;
      }
      break;
    }
    case kGaussianDistribution: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.gaussian_distribution_;
      }
      break;
    }
    case VALUE_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_ONEOF_NOT_SET;
}


PROTOBUF_NOINLINE void Int64Value::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Int64Value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value_oneof();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Int64Value::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 4, 0, 2> Int64Value::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Int64Value_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 value = 1;
    {PROTOBUF_FIELD_OFFSET(Int64Value, _impl_.value_oneof_.value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // .sensoris.protobuf.types.base.Int64StatisticMeasure statistic_measure = 2;
    {PROTOBUF_FIELD_OFFSET(Int64Value, _impl_.value_oneof_.statistic_measure_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.AbsoluteInt64Histogram absolute_histogram = 3;
    {PROTOBUF_FIELD_OFFSET(Int64Value, _impl_.value_oneof_.absolute_histogram_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.RelativeInt64Histogram relative_histogram = 4;
    {PROTOBUF_FIELD_OFFSET(Int64Value, _impl_.value_oneof_.relative_histogram_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64GaussianDistribution gaussian_distribution = 5;
    {PROTOBUF_FIELD_OFFSET(Int64Value, _impl_.value_oneof_.gaussian_distribution_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64StatisticMeasure>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::AbsoluteInt64Histogram>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::RelativeInt64Histogram>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64GaussianDistribution>()},
  }}, {{
  }},
};

::uint8_t* Int64Value::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Int64Value)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_oneof_case()) {
    case kValue: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<1>(
              stream, this->_internal_value(), target);
      break;
    }
    case kStatisticMeasure: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::statistic_measure(this),
          _Internal::statistic_measure(this).GetCachedSize(), target, stream);
      break;
    }
    case kAbsoluteHistogram: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::absolute_histogram(this),
          _Internal::absolute_histogram(this).GetCachedSize(), target, stream);
      break;
    }
    case kRelativeHistogram: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::relative_histogram(this),
          _Internal::relative_histogram(this).GetCachedSize(), target, stream);
      break;
    }
    case kGaussianDistribution: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::gaussian_distribution(this),
          _Internal::gaussian_distribution(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Int64Value)
  return target;
}

::size_t Int64Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Int64Value)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_oneof_case()) {
    // int64 value = 1;
    case kValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_value());
      break;
    }
    // .sensoris.protobuf.types.base.Int64StatisticMeasure statistic_measure = 2;
    case kStatisticMeasure: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.statistic_measure_);
      break;
    }
    // .sensoris.protobuf.types.base.AbsoluteInt64Histogram absolute_histogram = 3;
    case kAbsoluteHistogram: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.absolute_histogram_);
      break;
    }
    // .sensoris.protobuf.types.base.RelativeInt64Histogram relative_histogram = 4;
    case kRelativeHistogram: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.relative_histogram_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64GaussianDistribution gaussian_distribution = 5;
    case kGaussianDistribution: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.gaussian_distribution_);
      break;
    }
    case VALUE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Int64Value::_class_data_ = {
    Int64Value::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Int64Value::GetClassData() const {
  return &_class_data_;
}

void Int64Value::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Int64Value*>(&to_msg);
  auto& from = static_cast<const Int64Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Int64Value)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_oneof_case()) {
    case kValue: {
      _this->_internal_set_value(from._internal_value());
      break;
    }
    case kStatisticMeasure: {
      _this->_internal_mutable_statistic_measure()->::sensoris::protobuf::types::base::Int64StatisticMeasure::MergeFrom(
          from._internal_statistic_measure());
      break;
    }
    case kAbsoluteHistogram: {
      _this->_internal_mutable_absolute_histogram()->::sensoris::protobuf::types::base::AbsoluteInt64Histogram::MergeFrom(
          from._internal_absolute_histogram());
      break;
    }
    case kRelativeHistogram: {
      _this->_internal_mutable_relative_histogram()->::sensoris::protobuf::types::base::RelativeInt64Histogram::MergeFrom(
          from._internal_relative_histogram());
      break;
    }
    case kGaussianDistribution: {
      _this->_internal_mutable_gaussian_distribution()->::sensoris::protobuf::types::base::Int64GaussianDistribution::MergeFrom(
          from._internal_gaussian_distribution());
      break;
    }
    case VALUE_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Int64Value::CopyFrom(const Int64Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Int64Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Int64Value::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Int64Value::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Int64Value::InternalSwap(Int64Value* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_oneof_, other->_impl_.value_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Int64Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[14]);
}
// ===================================================================

class Int64ValueAndAccuracy_ValueAndAccuracy::_Internal {
 public:
  using HasBits = decltype(std::declval<Int64ValueAndAccuracy_ValueAndAccuracy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& accuracy(const Int64ValueAndAccuracy_ValueAndAccuracy* msg);
  static void set_has_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Int64Value& Int64ValueAndAccuracy_ValueAndAccuracy::_Internal::accuracy(const Int64ValueAndAccuracy_ValueAndAccuracy* msg) {
  return *msg->_impl_.accuracy_;
}
void Int64ValueAndAccuracy_ValueAndAccuracy::clear_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.accuracy_ != nullptr) _impl_.accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Int64ValueAndAccuracy_ValueAndAccuracy::Int64ValueAndAccuracy_ValueAndAccuracy(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
}
inline PROTOBUF_NDEBUG_INLINE Int64ValueAndAccuracy_ValueAndAccuracy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Int64ValueAndAccuracy_ValueAndAccuracy::Int64ValueAndAccuracy_ValueAndAccuracy(
    ::google::protobuf::Arena* arena,
    const Int64ValueAndAccuracy_ValueAndAccuracy& from)
    : ::google::protobuf::Message(arena) {
  Int64ValueAndAccuracy_ValueAndAccuracy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.accuracy_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.accuracy_)
                : nullptr;
  _impl_.value_ = from._impl_.value_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
}
inline PROTOBUF_NDEBUG_INLINE Int64ValueAndAccuracy_ValueAndAccuracy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Int64ValueAndAccuracy_ValueAndAccuracy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, accuracy_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, accuracy_) +
               sizeof(Impl_::value_));
}
Int64ValueAndAccuracy_ValueAndAccuracy::~Int64ValueAndAccuracy_ValueAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Int64ValueAndAccuracy_ValueAndAccuracy::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Int64ValueAndAccuracy_ValueAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.accuracy_ != nullptr);
    _impl_.accuracy_->Clear();
  }
  _impl_.value_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Int64ValueAndAccuracy_ValueAndAccuracy::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Int64ValueAndAccuracy_ValueAndAccuracy::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Int64ValueAndAccuracy_ValueAndAccuracy_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Int64Value accuracy = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.accuracy_)}},
    // int64 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 value = 1;
    {PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Int64Value accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.accuracy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* Int64ValueAndAccuracy_ValueAndAccuracy::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_value(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value accuracy = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::accuracy(this),
        _Internal::accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
  return target;
}

::size_t Int64ValueAndAccuracy_ValueAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int64Value accuracy = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.accuracy_);
  }

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Int64ValueAndAccuracy_ValueAndAccuracy::_class_data_ = {
    Int64ValueAndAccuracy_ValueAndAccuracy::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Int64ValueAndAccuracy_ValueAndAccuracy::GetClassData() const {
  return &_class_data_;
}

void Int64ValueAndAccuracy_ValueAndAccuracy::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Int64ValueAndAccuracy_ValueAndAccuracy*>(&to_msg);
  auto& from = static_cast<const Int64ValueAndAccuracy_ValueAndAccuracy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_accuracy()->::google::protobuf::Int64Value::MergeFrom(
        from._internal_accuracy());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Int64ValueAndAccuracy_ValueAndAccuracy::CopyFrom(const Int64ValueAndAccuracy_ValueAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Int64ValueAndAccuracy_ValueAndAccuracy::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Int64ValueAndAccuracy_ValueAndAccuracy::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Int64ValueAndAccuracy_ValueAndAccuracy::InternalSwap(Int64ValueAndAccuracy_ValueAndAccuracy* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.value_)
      + sizeof(Int64ValueAndAccuracy_ValueAndAccuracy::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy_ValueAndAccuracy, _impl_.accuracy_)>(
          reinterpret_cast<char*>(&_impl_.accuracy_),
          reinterpret_cast<char*>(&other->_impl_.accuracy_));
}

::google::protobuf::Metadata Int64ValueAndAccuracy_ValueAndAccuracy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[15]);
}
// ===================================================================

class Int64ValueAndAccuracy::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::base::Int64ValueAndAccuracy, _impl_._oneof_case_);
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy& value_and_accuracy(const Int64ValueAndAccuracy* msg);
  static const ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy& statistic_measure_and_accuracy(const Int64ValueAndAccuracy* msg);
  static const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& absolute_histogram(const Int64ValueAndAccuracy* msg);
  static const ::sensoris::protobuf::types::base::RelativeInt64Histogram& relative_histogram(const Int64ValueAndAccuracy* msg);
  static const ::sensoris::protobuf::types::base::Int64GaussianDistribution& gaussian_distribution(const Int64ValueAndAccuracy* msg);
};

const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy& Int64ValueAndAccuracy::_Internal::value_and_accuracy(const Int64ValueAndAccuracy* msg) {
  return *msg->_impl_.value_oneof_.value_and_accuracy_;
}
const ::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy& Int64ValueAndAccuracy::_Internal::statistic_measure_and_accuracy(const Int64ValueAndAccuracy* msg) {
  return *msg->_impl_.value_oneof_.statistic_measure_and_accuracy_;
}
const ::sensoris::protobuf::types::base::AbsoluteInt64Histogram& Int64ValueAndAccuracy::_Internal::absolute_histogram(const Int64ValueAndAccuracy* msg) {
  return *msg->_impl_.value_oneof_.absolute_histogram_;
}
const ::sensoris::protobuf::types::base::RelativeInt64Histogram& Int64ValueAndAccuracy::_Internal::relative_histogram(const Int64ValueAndAccuracy* msg) {
  return *msg->_impl_.value_oneof_.relative_histogram_;
}
const ::sensoris::protobuf::types::base::Int64GaussianDistribution& Int64ValueAndAccuracy::_Internal::gaussian_distribution(const Int64ValueAndAccuracy* msg) {
  return *msg->_impl_.value_oneof_.gaussian_distribution_;
}
void Int64ValueAndAccuracy::set_allocated_value_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy* value_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (value_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = value_and_accuracy->GetArena();
    if (message_arena != submessage_arena) {
      value_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, value_and_accuracy, submessage_arena);
    }
    set_has_value_and_accuracy();
    _impl_.value_oneof_.value_and_accuracy_ = value_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.value_and_accuracy)
}
void Int64ValueAndAccuracy::set_allocated_statistic_measure_and_accuracy(::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy* statistic_measure_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (statistic_measure_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena = statistic_measure_and_accuracy->GetArena();
    if (message_arena != submessage_arena) {
      statistic_measure_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(message_arena, statistic_measure_and_accuracy, submessage_arena);
    }
    set_has_statistic_measure_and_accuracy();
    _impl_.value_oneof_.statistic_measure_and_accuracy_ = statistic_measure_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.statistic_measure_and_accuracy)
}
void Int64ValueAndAccuracy::set_allocated_absolute_histogram(::sensoris::protobuf::types::base::AbsoluteInt64Histogram* absolute_histogram) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (absolute_histogram) {
    ::google::protobuf::Arena* submessage_arena = absolute_histogram->GetArena();
    if (message_arena != submessage_arena) {
      absolute_histogram = ::google::protobuf::internal::GetOwnedMessage(message_arena, absolute_histogram, submessage_arena);
    }
    set_has_absolute_histogram();
    _impl_.value_oneof_.absolute_histogram_ = absolute_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.absolute_histogram)
}
void Int64ValueAndAccuracy::set_allocated_relative_histogram(::sensoris::protobuf::types::base::RelativeInt64Histogram* relative_histogram) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (relative_histogram) {
    ::google::protobuf::Arena* submessage_arena = relative_histogram->GetArena();
    if (message_arena != submessage_arena) {
      relative_histogram = ::google::protobuf::internal::GetOwnedMessage(message_arena, relative_histogram, submessage_arena);
    }
    set_has_relative_histogram();
    _impl_.value_oneof_.relative_histogram_ = relative_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.relative_histogram)
}
void Int64ValueAndAccuracy::set_allocated_gaussian_distribution(::sensoris::protobuf::types::base::Int64GaussianDistribution* gaussian_distribution) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value_oneof();
  if (gaussian_distribution) {
    ::google::protobuf::Arena* submessage_arena = gaussian_distribution->GetArena();
    if (message_arena != submessage_arena) {
      gaussian_distribution = ::google::protobuf::internal::GetOwnedMessage(message_arena, gaussian_distribution, submessage_arena);
    }
    set_has_gaussian_distribution();
    _impl_.value_oneof_.gaussian_distribution_ = gaussian_distribution;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.base.Int64ValueAndAccuracy.gaussian_distribution)
}
Int64ValueAndAccuracy::Int64ValueAndAccuracy(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
}
inline PROTOBUF_NDEBUG_INLINE Int64ValueAndAccuracy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : value_oneof_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Int64ValueAndAccuracy::Int64ValueAndAccuracy(
    ::google::protobuf::Arena* arena,
    const Int64ValueAndAccuracy& from)
    : ::google::protobuf::Message(arena) {
  Int64ValueAndAccuracy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (value_oneof_case()) {
    case VALUE_ONEOF_NOT_SET:
      break;
      case kValueAndAccuracy:
        _impl_.value_oneof_.value_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy>(arena, *from._impl_.value_oneof_.value_and_accuracy_);
        break;
      case kStatisticMeasureAndAccuracy:
        _impl_.value_oneof_.statistic_measure_and_accuracy_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy>(arena, *from._impl_.value_oneof_.statistic_measure_and_accuracy_);
        break;
      case kAbsoluteHistogram:
        _impl_.value_oneof_.absolute_histogram_ = CreateMaybeMessage<::sensoris::protobuf::types::base::AbsoluteInt64Histogram>(arena, *from._impl_.value_oneof_.absolute_histogram_);
        break;
      case kRelativeHistogram:
        _impl_.value_oneof_.relative_histogram_ = CreateMaybeMessage<::sensoris::protobuf::types::base::RelativeInt64Histogram>(arena, *from._impl_.value_oneof_.relative_histogram_);
        break;
      case kGaussianDistribution:
        _impl_.value_oneof_.gaussian_distribution_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64GaussianDistribution>(arena, *from._impl_.value_oneof_.gaussian_distribution_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
}
inline PROTOBUF_NDEBUG_INLINE Int64ValueAndAccuracy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_oneof_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Int64ValueAndAccuracy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Int64ValueAndAccuracy::~Int64ValueAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Int64ValueAndAccuracy::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_value_oneof()) {
    clear_value_oneof();
  }
  _impl_.~Impl_();
}

void Int64ValueAndAccuracy::clear_value_oneof() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_oneof_case()) {
    case kValueAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.value_and_accuracy_;
      }
      break;
    }
    case kStatisticMeasureAndAccuracy: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.statistic_measure_and_accuracy_;
      }
      break;
    }
    case kAbsoluteHistogram: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.absolute_histogram_;
      }
      break;
    }
    case kRelativeHistogram: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.relative_histogram_;
      }
      break;
    }
    case kGaussianDistribution: {
      if (GetArena() == nullptr) {
        delete _impl_.value_oneof_.gaussian_distribution_;
      }
      break;
    }
    case VALUE_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_ONEOF_NOT_SET;
}


PROTOBUF_NOINLINE void Int64ValueAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value_oneof();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Int64ValueAndAccuracy::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 5, 0, 2> Int64ValueAndAccuracy::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Int64ValueAndAccuracy_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy value_and_accuracy = 1;
    {PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy, _impl_.value_oneof_.value_and_accuracy_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy statistic_measure_and_accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy, _impl_.value_oneof_.statistic_measure_and_accuracy_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.AbsoluteInt64Histogram absolute_histogram = 3;
    {PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy, _impl_.value_oneof_.absolute_histogram_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.RelativeInt64Histogram relative_histogram = 4;
    {PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy, _impl_.value_oneof_.relative_histogram_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64GaussianDistribution gaussian_distribution = 5;
    {PROTOBUF_FIELD_OFFSET(Int64ValueAndAccuracy, _impl_.value_oneof_.gaussian_distribution_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::AbsoluteInt64Histogram>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::RelativeInt64Histogram>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64GaussianDistribution>()},
  }}, {{
  }},
};

::uint8_t* Int64ValueAndAccuracy::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_oneof_case()) {
    case kValueAndAccuracy: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::value_and_accuracy(this),
          _Internal::value_and_accuracy(this).GetCachedSize(), target, stream);
      break;
    }
    case kStatisticMeasureAndAccuracy: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::statistic_measure_and_accuracy(this),
          _Internal::statistic_measure_and_accuracy(this).GetCachedSize(), target, stream);
      break;
    }
    case kAbsoluteHistogram: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::absolute_histogram(this),
          _Internal::absolute_histogram(this).GetCachedSize(), target, stream);
      break;
    }
    case kRelativeHistogram: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::relative_histogram(this),
          _Internal::relative_histogram(this).GetCachedSize(), target, stream);
      break;
    }
    case kGaussianDistribution: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::gaussian_distribution(this),
          _Internal::gaussian_distribution(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
  return target;
}

::size_t Int64ValueAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_oneof_case()) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy.ValueAndAccuracy value_and_accuracy = 1;
    case kValueAndAccuracy: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.value_and_accuracy_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64StatisticMeasureAndAccuracy statistic_measure_and_accuracy = 2;
    case kStatisticMeasureAndAccuracy: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.statistic_measure_and_accuracy_);
      break;
    }
    // .sensoris.protobuf.types.base.AbsoluteInt64Histogram absolute_histogram = 3;
    case kAbsoluteHistogram: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.absolute_histogram_);
      break;
    }
    // .sensoris.protobuf.types.base.RelativeInt64Histogram relative_histogram = 4;
    case kRelativeHistogram: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.relative_histogram_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64GaussianDistribution gaussian_distribution = 5;
    case kGaussianDistribution: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_oneof_.gaussian_distribution_);
      break;
    }
    case VALUE_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Int64ValueAndAccuracy::_class_data_ = {
    Int64ValueAndAccuracy::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Int64ValueAndAccuracy::GetClassData() const {
  return &_class_data_;
}

void Int64ValueAndAccuracy::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Int64ValueAndAccuracy*>(&to_msg);
  auto& from = static_cast<const Int64ValueAndAccuracy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_oneof_case()) {
    case kValueAndAccuracy: {
      _this->_internal_mutable_value_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy_ValueAndAccuracy::MergeFrom(
          from._internal_value_and_accuracy());
      break;
    }
    case kStatisticMeasureAndAccuracy: {
      _this->_internal_mutable_statistic_measure_and_accuracy()->::sensoris::protobuf::types::base::Int64StatisticMeasureAndAccuracy::MergeFrom(
          from._internal_statistic_measure_and_accuracy());
      break;
    }
    case kAbsoluteHistogram: {
      _this->_internal_mutable_absolute_histogram()->::sensoris::protobuf::types::base::AbsoluteInt64Histogram::MergeFrom(
          from._internal_absolute_histogram());
      break;
    }
    case kRelativeHistogram: {
      _this->_internal_mutable_relative_histogram()->::sensoris::protobuf::types::base::RelativeInt64Histogram::MergeFrom(
          from._internal_relative_histogram());
      break;
    }
    case kGaussianDistribution: {
      _this->_internal_mutable_gaussian_distribution()->::sensoris::protobuf::types::base::Int64GaussianDistribution::MergeFrom(
          from._internal_gaussian_distribution());
      break;
    }
    case VALUE_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Int64ValueAndAccuracy::CopyFrom(const Int64ValueAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Int64ValueAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Int64ValueAndAccuracy::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Int64ValueAndAccuracy::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Int64ValueAndAccuracy::InternalSwap(Int64ValueAndAccuracy* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_oneof_, other->_impl_.value_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Int64ValueAndAccuracy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[16]);
}
// ===================================================================

class Confidence::_Internal {
 public:
};

Confidence::Confidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Confidence)
}
Confidence::Confidence(
    ::google::protobuf::Arena* arena, const Confidence& from)
    : Confidence(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Confidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Confidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
Confidence::~Confidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Confidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Confidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Confidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Confidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Confidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Confidence::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Confidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 value = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Confidence, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Confidence, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 value = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(Confidence, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Confidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Confidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 value = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Confidence)
  return target;
}

::size_t Confidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Confidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Confidence::_class_data_ = {
    Confidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Confidence::GetClassData() const {
  return &_class_data_;
}

void Confidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Confidence*>(&to_msg);
  auto& from = static_cast<const Confidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Confidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Confidence::CopyFrom(const Confidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Confidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Confidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Confidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Confidence::InternalSwap(Confidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata Confidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[17]);
}
// ===================================================================

class CountAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<CountAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CountAndConfidence, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& count(const CountAndConfidence* msg);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const CountAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Int64Value& CountAndConfidence::_Internal::count(const CountAndConfidence* msg) {
  return *msg->_impl_.count_;
}
const ::sensoris::protobuf::types::base::Confidence& CountAndConfidence::_Internal::confidence(const CountAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void CountAndConfidence::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.count_ != nullptr) _impl_.count_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CountAndConfidence::CountAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.CountAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE CountAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CountAndConfidence::CountAndConfidence(
    ::google::protobuf::Arena* arena,
    const CountAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  CountAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.count_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.count_)
                : nullptr;
  _impl_.confidence_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.CountAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE CountAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CountAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, count_),
           0,
           offsetof(Impl_, confidence_) -
               offsetof(Impl_, count_) +
               sizeof(Impl_::confidence_));
}
CountAndConfidence::~CountAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.CountAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CountAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.count_;
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CountAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.CountAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.count_ != nullptr);
      _impl_.count_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.confidence_ != nullptr);
      _impl_.confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CountAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CountAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CountAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CountAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CountAndConfidence, _impl_.confidence_)}},
    // .google.protobuf.Int64Value count = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CountAndConfidence, _impl_.count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Int64Value count = 1;
    {PROTOBUF_FIELD_OFFSET(CountAndConfidence, _impl_.count_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(CountAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* CountAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.CountAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::count(this),
        _Internal::count(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.CountAndConfidence)
  return target;
}

::size_t CountAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.CountAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Int64Value count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.count_);
    }

    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CountAndConfidence::_class_data_ = {
    CountAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CountAndConfidence::GetClassData() const {
  return &_class_data_;
}

void CountAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CountAndConfidence*>(&to_msg);
  auto& from = static_cast<const CountAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.CountAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_count()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_count());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CountAndConfidence::CopyFrom(const CountAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.CountAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CountAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CountAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CountAndConfidence::InternalSwap(CountAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CountAndConfidence, _impl_.confidence_)
      + sizeof(CountAndConfidence::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(CountAndConfidence, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::google::protobuf::Metadata CountAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[18]);
}
// ===================================================================

class Int64Matrix3x3::_Internal {
 public:
  using HasBits = decltype(std::declval<Int64Matrix3x3>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& a11(const Int64Matrix3x3* msg);
  static void set_has_a11(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Int64Value& a12(const Int64Matrix3x3* msg);
  static void set_has_a12(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Int64Value& a13(const Int64Matrix3x3* msg);
  static void set_has_a13(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Int64Value& a21(const Int64Matrix3x3* msg);
  static void set_has_a21(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Int64Value& a22(const Int64Matrix3x3* msg);
  static void set_has_a22(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Int64Value& a23(const Int64Matrix3x3* msg);
  static void set_has_a23(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::Int64Value& a31(const Int64Matrix3x3* msg);
  static void set_has_a31(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::google::protobuf::Int64Value& a32(const Int64Matrix3x3* msg);
  static void set_has_a32(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::google::protobuf::Int64Value& a33(const Int64Matrix3x3* msg);
  static void set_has_a33(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a11(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a11_;
}
const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a12(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a12_;
}
const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a13(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a13_;
}
const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a21(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a21_;
}
const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a22(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a22_;
}
const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a23(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a23_;
}
const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a31(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a31_;
}
const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a32(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a32_;
}
const ::google::protobuf::Int64Value& Int64Matrix3x3::_Internal::a33(const Int64Matrix3x3* msg) {
  return *msg->_impl_.a33_;
}
void Int64Matrix3x3::clear_a11() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a11_ != nullptr) _impl_.a11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Int64Matrix3x3::clear_a12() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a12_ != nullptr) _impl_.a12_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Int64Matrix3x3::clear_a13() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a13_ != nullptr) _impl_.a13_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Int64Matrix3x3::clear_a21() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a21_ != nullptr) _impl_.a21_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Int64Matrix3x3::clear_a22() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a22_ != nullptr) _impl_.a22_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Int64Matrix3x3::clear_a23() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a23_ != nullptr) _impl_.a23_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Int64Matrix3x3::clear_a31() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a31_ != nullptr) _impl_.a31_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Int64Matrix3x3::clear_a32() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a32_ != nullptr) _impl_.a32_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Int64Matrix3x3::clear_a33() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.a33_ != nullptr) _impl_.a33_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
Int64Matrix3x3::Int64Matrix3x3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.base.Int64Matrix3x3)
}
inline PROTOBUF_NDEBUG_INLINE Int64Matrix3x3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Int64Matrix3x3::Int64Matrix3x3(
    ::google::protobuf::Arena* arena,
    const Int64Matrix3x3& from)
    : ::google::protobuf::Message(arena) {
  Int64Matrix3x3* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.a11_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a11_)
                : nullptr;
  _impl_.a12_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a12_)
                : nullptr;
  _impl_.a13_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a13_)
                : nullptr;
  _impl_.a21_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a21_)
                : nullptr;
  _impl_.a22_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a22_)
                : nullptr;
  _impl_.a23_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a23_)
                : nullptr;
  _impl_.a31_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a31_)
                : nullptr;
  _impl_.a32_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a32_)
                : nullptr;
  _impl_.a33_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.a33_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.base.Int64Matrix3x3)
}
inline PROTOBUF_NDEBUG_INLINE Int64Matrix3x3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Int64Matrix3x3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, a11_),
           0,
           offsetof(Impl_, a33_) -
               offsetof(Impl_, a11_) +
               sizeof(Impl_::a33_));
}
Int64Matrix3x3::~Int64Matrix3x3() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.base.Int64Matrix3x3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Int64Matrix3x3::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.a11_;
  delete _impl_.a12_;
  delete _impl_.a13_;
  delete _impl_.a21_;
  delete _impl_.a22_;
  delete _impl_.a23_;
  delete _impl_.a31_;
  delete _impl_.a32_;
  delete _impl_.a33_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Int64Matrix3x3::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.base.Int64Matrix3x3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.a11_ != nullptr);
      _impl_.a11_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.a12_ != nullptr);
      _impl_.a12_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.a13_ != nullptr);
      _impl_.a13_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.a21_ != nullptr);
      _impl_.a21_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.a22_ != nullptr);
      _impl_.a22_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.a23_ != nullptr);
      _impl_.a23_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.a31_ != nullptr);
      _impl_.a31_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.a32_ != nullptr);
      _impl_.a32_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    ABSL_DCHECK(_impl_.a33_ != nullptr);
    _impl_.a33_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Int64Matrix3x3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 9, 0, 2> Int64Matrix3x3::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Int64Matrix3x3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Int64Value a11 = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a11_)}},
    // .google.protobuf.Int64Value a12 = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a12_)}},
    // .google.protobuf.Int64Value a13 = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a13_)}},
    // .google.protobuf.Int64Value a21 = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a21_)}},
    // .google.protobuf.Int64Value a22 = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a22_)}},
    // .google.protobuf.Int64Value a23 = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a23_)}},
    // .google.protobuf.Int64Value a31 = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a31_)}},
    // .google.protobuf.Int64Value a32 = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 7, 7, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a32_)}},
    // .google.protobuf.Int64Value a33 = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 8, 8, PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a33_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Int64Value a11 = 1;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a11_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value a12 = 2;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a12_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value a13 = 3;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a13_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value a21 = 4;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a21_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value a22 = 5;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a22_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value a23 = 6;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a23_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value a31 = 7;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a31_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value a32 = 8;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a32_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value a33 = 9;
    {PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a33_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* Int64Matrix3x3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.base.Int64Matrix3x3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value a11 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::a11(this),
        _Internal::a11(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value a12 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::a12(this),
        _Internal::a12(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value a13 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::a13(this),
        _Internal::a13(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value a21 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::a21(this),
        _Internal::a21(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value a22 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::a22(this),
        _Internal::a22(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value a23 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::a23(this),
        _Internal::a23(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value a31 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::a31(this),
        _Internal::a31(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value a32 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::a32(this),
        _Internal::a32(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value a33 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::a33(this),
        _Internal::a33(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.base.Int64Matrix3x3)
  return target;
}

::size_t Int64Matrix3x3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.base.Int64Matrix3x3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .google.protobuf.Int64Value a11 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a11_);
    }

    // .google.protobuf.Int64Value a12 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a12_);
    }

    // .google.protobuf.Int64Value a13 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a13_);
    }

    // .google.protobuf.Int64Value a21 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a21_);
    }

    // .google.protobuf.Int64Value a22 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a22_);
    }

    // .google.protobuf.Int64Value a23 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a23_);
    }

    // .google.protobuf.Int64Value a31 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a31_);
    }

    // .google.protobuf.Int64Value a32 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a32_);
    }

  }
  // .google.protobuf.Int64Value a33 = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.a33_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Int64Matrix3x3::_class_data_ = {
    Int64Matrix3x3::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Int64Matrix3x3::GetClassData() const {
  return &_class_data_;
}

void Int64Matrix3x3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Int64Matrix3x3*>(&to_msg);
  auto& from = static_cast<const Int64Matrix3x3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.base.Int64Matrix3x3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_a11()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_a11());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_a12()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_a12());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_a13()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_a13());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_a21()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_a21());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_a22()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_a22());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_a23()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_a23());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_a31()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_a31());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_a32()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_a32());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_mutable_a33()->::google::protobuf::Int64Value::MergeFrom(
        from._internal_a33());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Int64Matrix3x3::CopyFrom(const Int64Matrix3x3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.base.Int64Matrix3x3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Int64Matrix3x3::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Int64Matrix3x3::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Int64Matrix3x3::InternalSwap(Int64Matrix3x3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a33_)
      + sizeof(Int64Matrix3x3::_impl_.a33_)
      - PROTOBUF_FIELD_OFFSET(Int64Matrix3x3, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::google::protobuf::Metadata Int64Matrix3x3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fbase_2eproto[19]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::int64_t >, 3, false>
  exponent(kExponentFieldNumber, ::int64_t{0}, nullptr);
// @@protoc_insertion_point(namespace_scope)
}  // namespace base
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
