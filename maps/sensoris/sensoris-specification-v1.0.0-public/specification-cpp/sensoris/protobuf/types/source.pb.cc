// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/source.proto

#include "sensoris/protobuf/types/source.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace types {
namespace source {

inline constexpr SensorFusion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sensor_id_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SensorFusion::SensorFusion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SensorFusionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorFusionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorFusionDefaultTypeInternal() {}
  union {
    SensorFusion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorFusionDefaultTypeInternal _SensorFusion_default_instance_;

inline constexpr Sensor_MountingPositionAndOrientation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        translation_and_accuracy_{nullptr},
        orientation_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Sensor_MountingPositionAndOrientation::Sensor_MountingPositionAndOrientation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Sensor_MountingPositionAndOrientationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sensor_MountingPositionAndOrientationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sensor_MountingPositionAndOrientationDefaultTypeInternal() {}
  union {
    Sensor_MountingPositionAndOrientation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sensor_MountingPositionAndOrientationDefaultTypeInternal _Sensor_MountingPositionAndOrientation_default_instance_;

inline constexpr NavigationSatelliteSystem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        satellite_system_{},
        _satellite_system_cached_byte_size_{0},
        satellite_based_augmentation_system_{},
        _satellite_based_augmentation_system_cached_byte_size_{0},
        ground_based_augmentation_system_{},
        _ground_based_augmentation_system_cached_byte_size_{0},
        extension_{},
        elevation_mask_{nullptr},
        antenna_offset_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR NavigationSatelliteSystem::NavigationSatelliteSystem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NavigationSatelliteSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavigationSatelliteSystemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavigationSatelliteSystemDefaultTypeInternal() {}
  union {
    NavigationSatelliteSystem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavigationSatelliteSystemDefaultTypeInternal _NavigationSatelliteSystem_default_instance_;

inline constexpr Sensor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mounting_position_and_orientation_{nullptr},
        specific_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Sensor::Sensor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDefaultTypeInternal() {}
  union {
    Sensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDefaultTypeInternal _Sensor_default_instance_;

inline constexpr Source::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extension_{},
        id_{nullptr},
        entity_{nullptr},
        sampling_frequency_{nullptr},
        source_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Source::Source(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceDefaultTypeInternal() {}
  union {
    Source _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceDefaultTypeInternal _Source_default_instance_;
}  // namespace source
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2ftypes_2fsource_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _impl_.satellite_system_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _impl_.satellite_based_augmentation_system_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _impl_.ground_based_augmentation_system_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _impl_.elevation_mask_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _impl_.antenna_offset_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _impl_.extension_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation, _impl_.translation_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation, _impl_.orientation_and_accuracy_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, _impl_.mounting_position_and_orientation_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, _impl_.specific_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::SensorFusion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::SensorFusion, _impl_.sensor_id_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _impl_.entity_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _impl_.sampling_frequency_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _impl_.extension_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _impl_.source_),
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::sensoris::protobuf::types::source::NavigationSatelliteSystem)},
        {20, 30, -1, sizeof(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation)},
        {32, 43, -1, sizeof(::sensoris::protobuf::types::source::Sensor)},
        {45, -1, -1, sizeof(::sensoris::protobuf::types::source::SensorFusion)},
        {54, 69, -1, sizeof(::sensoris::protobuf::types::source::Source)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::types::source::_NavigationSatelliteSystem_default_instance_._instance,
    &::sensoris::protobuf::types::source::_Sensor_MountingPositionAndOrientation_default_instance_._instance,
    &::sensoris::protobuf::types::source::_Sensor_default_instance_._instance,
    &::sensoris::protobuf::types::source::_SensorFusion_default_instance_._instance,
    &::sensoris::protobuf::types::source::_Source_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$sensoris/protobuf/types/source.proto\022\036"
    "sensoris.protobuf.types.source\032\031google/p"
    "rotobuf/any.proto\032\036google/protobuf/wrapp"
    "ers.proto\032\"sensoris/protobuf/types/base."
    "proto\032%sensoris/protobuf/types/spatial.p"
    "roto\"\332\010\n\031NavigationSatelliteSystem\022c\n\020sa"
    "tellite_system\030\001 \003(\0162I.sensoris.protobuf"
    ".types.source.NavigationSatelliteSystem."
    "SatelliteSystem\022\207\001\n#satellite_based_augm"
    "entation_system\030\002 \003(\0162Z.sensoris.protobu"
    "f.types.source.NavigationSatelliteSystem"
    ".SatelliteBasedAugmentationSystem\022\201\001\n gr"
    "ound_based_augmentation_system\030\003 \003(\0162W.s"
    "ensoris.protobuf.types.source.Navigation"
    "SatelliteSystem.GroundBasedAugmentationS"
    "ystem\0229\n\016elevation_mask\030\004 \001(\0132\033.google.p"
    "rotobuf.Int64ValueB\004\210\265\030\000\022Z\n\033antenna_offs"
    "et_and_accuracy\030\005 \001(\01325.sensoris.protobu"
    "f.types.spatial.XyzVectorAndAccuracy\022\'\n\t"
    "extension\030\017 \003(\0132\024.google.protobuf.Any\"\203\001"
    "\n\017SatelliteSystem\022\034\n\030UNKNOWN_SATELLITE_S"
    "YSTEM\020\000\022\007\n\003GPS\020\001\022\013\n\007GLONASS\020\002\022\013\n\007GALILEO"
    "\020\003\022\014\n\010BEIDOU_1\020\004\022\014\n\010BEIDOU_2\020\005\022\t\n\005NAVIC\020"
    "\006\022\010\n\004QZSS\020\007\"\342\001\n SatelliteBasedAugmentati"
    "onSystem\022\033\n\027UNKNOWN_SATELLITE_BASED\020\000\022\023\n"
    "\017SATELLITE_BASED\020\001\022\010\n\004WAAS\020\002\022\t\n\005EGNOS\020\003\022"
    "\010\n\004MSAS\020\004\022\030\n\024QZSS_SATELLITE_BASED\020\005\022\t\n\005G"
    "AGAN\020\006\022\010\n\004SDCM\020\007\022\010\n\004SNAS\020\010\022\010\n\004WAGE\020\t\022\r\n\t"
    "STAR_FIRE\020\n\022\014\n\010STAR_FIX\020\013\022\r\n\tOMNI_STAR\020\014"
    "\"\236\001\n\035GroundBasedAugmentationSystem\022\030\n\024UN"
    "KNOWN_GROUND_BASED\020\000\022\020\n\014GROUND_BASED\020\001\022\010"
    "\n\004GBAS\020\002\022\t\n\005NDGPS\020\003\022\t\n\005SAPOS\020\004\022\007\n\003ALF\020\005\022"
    "\014\n\010AXIO_NET\020\006\022\013\n\007VRS_NOW\020\007\022\r\n\tSMART_NET\020"
    "\010\"\273\003\n\006Sensor\022p\n!mounting_position_and_or"
    "ientation\030\001 \001(\0132E.sensoris.protobuf.type"
    "s.source.Sensor.MountingPositionAndOrien"
    "tation\022`\n\033navigation_satellite_system\030\002 "
    "\001(\01329.sensoris.protobuf.types.source.Nav"
    "igationSatelliteSystemH\000\032\320\001\n\036MountingPos"
    "itionAndOrientation\022V\n\030translation_and_a"
    "ccuracy\030\001 \001(\01324.sensoris.protobuf.types."
    "spatial.PositionAndAccuracy\022V\n\030orientati"
    "on_and_accuracy\030\002 \001(\01324.sensoris.protobu"
    "f.types.spatial.RotationAndAccuracyB\n\n\010s"
    "pecific\">\n\014SensorFusion\022.\n\tsensor_id\030\001 \003"
    "(\0132\033.google.protobuf.Int64Value\"\347\002\n\006Sour"
    "ce\022\'\n\002id\030\001 \001(\0132\033.google.protobuf.Int64Va"
    "lue\0224\n\006entity\030\002 \001(\0132$.sensoris.protobuf."
    "types.base.Entity\022J\n\022sampling_frequency\030"
    "\003 \001(\0132(.sensoris.protobuf.types.base.Int"
    "64ValueB\004\210\265\030\003\0228\n\006sensor\030\004 \001(\0132&.sensoris"
    ".protobuf.types.source.SensorH\000\022E\n\rsenso"
    "r_fusion\030\005 \001(\0132,.sensoris.protobuf.types"
    ".source.SensorFusionH\000\022\'\n\textension\030\017 \003("
    "\0132\024.google.protobuf.AnyB\010\n\006sourceB5\n\031org"
    ".sensoris.types.sourceB\023SensorisSourceTy"
    "pesP\001\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_deps[4] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto = {
    false,
    false,
    2256,
    descriptor_table_protodef_sensoris_2fprotobuf_2ftypes_2fsource_2eproto,
    "sensoris/protobuf/types/source.proto",
    &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_deps,
    4,
    5,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2ftypes_2fsource_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fsource_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2ftypes_2fsource_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2ftypes_2fsource_2eproto(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto);
namespace sensoris {
namespace protobuf {
namespace types {
namespace source {
const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_SatelliteSystem_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t NavigationSatelliteSystem_SatelliteSystem_internal_data_[] = {
    524288u, 0u, };
bool NavigationSatelliteSystem_SatelliteSystem_IsValid(int value) {
  return 0 <= value && value <= 7;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::UNKNOWN_SATELLITE_SYSTEM;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::GPS;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::GLONASS;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::GALILEO;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::BEIDOU_1;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::BEIDOU_2;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::NAVIC;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::QZSS;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::SatelliteSystem_MIN;
constexpr NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::SatelliteSystem_MAX;
constexpr int NavigationSatelliteSystem::SatelliteSystem_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_internal_data_[] = {
    851968u, 0u, };
bool NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_IsValid(int value) {
  return 0 <= value && value <= 12;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::UNKNOWN_SATELLITE_BASED;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SATELLITE_BASED;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::WAAS;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::EGNOS;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::MSAS;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::QZSS_SATELLITE_BASED;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::GAGAN;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SDCM;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SNAS;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::WAGE;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::STAR_FIRE;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::STAR_FIX;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::OMNI_STAR;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SatelliteBasedAugmentationSystem_MIN;
constexpr NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SatelliteBasedAugmentationSystem_MAX;
constexpr int NavigationSatelliteSystem::SatelliteBasedAugmentationSystem_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_GroundBasedAugmentationSystem_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t NavigationSatelliteSystem_GroundBasedAugmentationSystem_internal_data_[] = {
    589824u, 0u, };
bool NavigationSatelliteSystem_GroundBasedAugmentationSystem_IsValid(int value) {
  return 0 <= value && value <= 8;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::UNKNOWN_GROUND_BASED;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::GROUND_BASED;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::GBAS;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::NDGPS;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::SAPOS;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::ALF;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::AXIO_NET;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::VRS_NOW;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::SMART_NET;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::GroundBasedAugmentationSystem_MIN;
constexpr NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::GroundBasedAugmentationSystem_MAX;
constexpr int NavigationSatelliteSystem::GroundBasedAugmentationSystem_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class NavigationSatelliteSystem::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationSatelliteSystem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_._has_bits_);
  static const ::google::protobuf::Int64Value& elevation_mask(const NavigationSatelliteSystem* msg);
  static void set_has_elevation_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& antenna_offset_and_accuracy(const NavigationSatelliteSystem* msg);
  static void set_has_antenna_offset_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Int64Value& NavigationSatelliteSystem::_Internal::elevation_mask(const NavigationSatelliteSystem* msg) {
  return *msg->_impl_.elevation_mask_;
}
const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& NavigationSatelliteSystem::_Internal::antenna_offset_and_accuracy(const NavigationSatelliteSystem* msg) {
  return *msg->_impl_.antenna_offset_and_accuracy_;
}
void NavigationSatelliteSystem::clear_elevation_mask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.elevation_mask_ != nullptr) _impl_.elevation_mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void NavigationSatelliteSystem::clear_antenna_offset_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.antenna_offset_and_accuracy_ != nullptr) _impl_.antenna_offset_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void NavigationSatelliteSystem::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
NavigationSatelliteSystem::NavigationSatelliteSystem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.NavigationSatelliteSystem)
}
inline PROTOBUF_NDEBUG_INLINE NavigationSatelliteSystem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        satellite_system_{visibility, arena, from.satellite_system_},
        _satellite_system_cached_byte_size_{0},
        satellite_based_augmentation_system_{visibility, arena, from.satellite_based_augmentation_system_},
        _satellite_based_augmentation_system_cached_byte_size_{0},
        ground_based_augmentation_system_{visibility, arena, from.ground_based_augmentation_system_},
        _ground_based_augmentation_system_cached_byte_size_{0},
        extension_{visibility, arena, from.extension_} {}

NavigationSatelliteSystem::NavigationSatelliteSystem(
    ::google::protobuf::Arena* arena,
    const NavigationSatelliteSystem& from)
    : ::google::protobuf::Message(arena) {
  NavigationSatelliteSystem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.elevation_mask_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.elevation_mask_)
                : nullptr;
  _impl_.antenna_offset_and_accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy>(arena, *from._impl_.antenna_offset_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.NavigationSatelliteSystem)
}
inline PROTOBUF_NDEBUG_INLINE NavigationSatelliteSystem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        satellite_system_{visibility, arena},
        _satellite_system_cached_byte_size_{0},
        satellite_based_augmentation_system_{visibility, arena},
        _satellite_based_augmentation_system_cached_byte_size_{0},
        ground_based_augmentation_system_{visibility, arena},
        _ground_based_augmentation_system_cached_byte_size_{0},
        extension_{visibility, arena} {}

inline void NavigationSatelliteSystem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, elevation_mask_),
           0,
           offsetof(Impl_, antenna_offset_and_accuracy_) -
               offsetof(Impl_, elevation_mask_) +
               sizeof(Impl_::antenna_offset_and_accuracy_));
}
NavigationSatelliteSystem::~NavigationSatelliteSystem() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NavigationSatelliteSystem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.elevation_mask_;
  delete _impl_.antenna_offset_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NavigationSatelliteSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.satellite_system_.Clear();
  _impl_.satellite_based_augmentation_system_.Clear();
  _impl_.ground_based_augmentation_system_.Clear();
  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.elevation_mask_ != nullptr);
      _impl_.elevation_mask_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.antenna_offset_and_accuracy_ != nullptr);
      _impl_.antenna_offset_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NavigationSatelliteSystem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 0, 2> NavigationSatelliteSystem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_._has_bits_),
    0, // no _extensions_
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950880,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NavigationSatelliteSystem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.satellite_system_)}},
    // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.satellite_based_augmentation_system_)}},
    // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.ground_based_augmentation_system_)}},
    // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.elevation_mask_)}},
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.antenna_offset_and_accuracy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 2, PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
    {PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.satellite_system_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
    {PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.satellite_based_augmentation_system_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
    {PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.ground_based_augmentation_system_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.elevation_mask_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
    {PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.antenna_offset_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.extension_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* NavigationSatelliteSystem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
  {
    std::size_t byte_size = _impl_._satellite_system_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(1, _internal_satellite_system(),
                                       byte_size, target);
    }
  }

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
  {
    std::size_t byte_size = _impl_._satellite_based_augmentation_system_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(2, _internal_satellite_based_augmentation_system(),
                                       byte_size, target);
    }
  }

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
  {
    std::size_t byte_size = _impl_._ground_based_augmentation_system_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(3, _internal_ground_based_augmentation_system(),
                                       byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::elevation_mask(this),
        _Internal::elevation_mask(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::antenna_offset_and_accuracy(this),
        _Internal::antenna_offset_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  return target;
}

::size_t NavigationSatelliteSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_satellite_system_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_satellite_system().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._satellite_system_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_satellite_based_augmentation_system_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_satellite_based_augmentation_system().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._satellite_based_augmentation_system_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_ground_based_augmentation_system_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_ground_based_augmentation_system().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._ground_based_augmentation_system_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.elevation_mask_);
    }

    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.antenna_offset_and_accuracy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NavigationSatelliteSystem::_class_data_ = {
    NavigationSatelliteSystem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* NavigationSatelliteSystem::GetClassData() const {
  return &_class_data_;
}

void NavigationSatelliteSystem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NavigationSatelliteSystem*>(&to_msg);
  auto& from = static_cast<const NavigationSatelliteSystem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_satellite_system()->MergeFrom(from._internal_satellite_system());
  _this->_internal_mutable_satellite_based_augmentation_system()->MergeFrom(from._internal_satellite_based_augmentation_system());
  _this->_internal_mutable_ground_based_augmentation_system()->MergeFrom(from._internal_ground_based_augmentation_system());
  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_elevation_mask()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_elevation_mask());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_antenna_offset_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(
          from._internal_antenna_offset_and_accuracy());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NavigationSatelliteSystem::CopyFrom(const NavigationSatelliteSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NavigationSatelliteSystem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NavigationSatelliteSystem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NavigationSatelliteSystem::InternalSwap(NavigationSatelliteSystem* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.satellite_system_.InternalSwap(&other->_impl_.satellite_system_);
  _impl_.satellite_based_augmentation_system_.InternalSwap(&other->_impl_.satellite_based_augmentation_system_);
  _impl_.ground_based_augmentation_system_.InternalSwap(&other->_impl_.ground_based_augmentation_system_);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.antenna_offset_and_accuracy_)
      + sizeof(NavigationSatelliteSystem::_impl_.antenna_offset_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(NavigationSatelliteSystem, _impl_.elevation_mask_)>(
          reinterpret_cast<char*>(&_impl_.elevation_mask_),
          reinterpret_cast<char*>(&other->_impl_.elevation_mask_));
}

::google::protobuf::Metadata NavigationSatelliteSystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[0]);
}
// ===================================================================

class Sensor_MountingPositionAndOrientation::_Internal {
 public:
  using HasBits = decltype(std::declval<Sensor_MountingPositionAndOrientation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Sensor_MountingPositionAndOrientation, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& translation_and_accuracy(const Sensor_MountingPositionAndOrientation* msg);
  static void set_has_translation_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::spatial::RotationAndAccuracy& orientation_and_accuracy(const Sensor_MountingPositionAndOrientation* msg);
  static void set_has_orientation_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& Sensor_MountingPositionAndOrientation::_Internal::translation_and_accuracy(const Sensor_MountingPositionAndOrientation* msg) {
  return *msg->_impl_.translation_and_accuracy_;
}
const ::sensoris::protobuf::types::spatial::RotationAndAccuracy& Sensor_MountingPositionAndOrientation::_Internal::orientation_and_accuracy(const Sensor_MountingPositionAndOrientation* msg) {
  return *msg->_impl_.orientation_and_accuracy_;
}
void Sensor_MountingPositionAndOrientation::clear_translation_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.translation_and_accuracy_ != nullptr) _impl_.translation_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Sensor_MountingPositionAndOrientation::clear_orientation_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.orientation_and_accuracy_ != nullptr) _impl_.orientation_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Sensor_MountingPositionAndOrientation::Sensor_MountingPositionAndOrientation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
}
inline PROTOBUF_NDEBUG_INLINE Sensor_MountingPositionAndOrientation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Sensor_MountingPositionAndOrientation::Sensor_MountingPositionAndOrientation(
    ::google::protobuf::Arena* arena,
    const Sensor_MountingPositionAndOrientation& from)
    : ::google::protobuf::Message(arena) {
  Sensor_MountingPositionAndOrientation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.translation_and_accuracy_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(arena, *from._impl_.translation_and_accuracy_)
                : nullptr;
  _impl_.orientation_and_accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::RotationAndAccuracy>(arena, *from._impl_.orientation_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
}
inline PROTOBUF_NDEBUG_INLINE Sensor_MountingPositionAndOrientation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Sensor_MountingPositionAndOrientation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, translation_and_accuracy_),
           0,
           offsetof(Impl_, orientation_and_accuracy_) -
               offsetof(Impl_, translation_and_accuracy_) +
               sizeof(Impl_::orientation_and_accuracy_));
}
Sensor_MountingPositionAndOrientation::~Sensor_MountingPositionAndOrientation() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Sensor_MountingPositionAndOrientation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.translation_and_accuracy_;
  delete _impl_.orientation_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Sensor_MountingPositionAndOrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.translation_and_accuracy_ != nullptr);
      _impl_.translation_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.orientation_and_accuracy_ != nullptr);
      _impl_.orientation_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Sensor_MountingPositionAndOrientation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Sensor_MountingPositionAndOrientation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Sensor_MountingPositionAndOrientation, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Sensor_MountingPositionAndOrientation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Sensor_MountingPositionAndOrientation, _impl_.orientation_and_accuracy_)}},
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Sensor_MountingPositionAndOrientation, _impl_.translation_and_accuracy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
    {PROTOBUF_FIELD_OFFSET(Sensor_MountingPositionAndOrientation, _impl_.translation_and_accuracy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
    {PROTOBUF_FIELD_OFFSET(Sensor_MountingPositionAndOrientation, _impl_.orientation_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::PositionAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::RotationAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* Sensor_MountingPositionAndOrientation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::translation_and_accuracy(this),
        _Internal::translation_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::orientation_and_accuracy(this),
        _Internal::orientation_and_accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  return target;
}

::size_t Sensor_MountingPositionAndOrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.translation_and_accuracy_);
    }

    // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orientation_and_accuracy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Sensor_MountingPositionAndOrientation::_class_data_ = {
    Sensor_MountingPositionAndOrientation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Sensor_MountingPositionAndOrientation::GetClassData() const {
  return &_class_data_;
}

void Sensor_MountingPositionAndOrientation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Sensor_MountingPositionAndOrientation*>(&to_msg);
  auto& from = static_cast<const Sensor_MountingPositionAndOrientation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_translation_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(
          from._internal_translation_and_accuracy());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_orientation_and_accuracy()->::sensoris::protobuf::types::spatial::RotationAndAccuracy::MergeFrom(
          from._internal_orientation_and_accuracy());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Sensor_MountingPositionAndOrientation::CopyFrom(const Sensor_MountingPositionAndOrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Sensor_MountingPositionAndOrientation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Sensor_MountingPositionAndOrientation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Sensor_MountingPositionAndOrientation::InternalSwap(Sensor_MountingPositionAndOrientation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sensor_MountingPositionAndOrientation, _impl_.orientation_and_accuracy_)
      + sizeof(Sensor_MountingPositionAndOrientation::_impl_.orientation_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(Sensor_MountingPositionAndOrientation, _impl_.translation_and_accuracy_)>(
          reinterpret_cast<char*>(&_impl_.translation_and_accuracy_),
          reinterpret_cast<char*>(&other->_impl_.translation_and_accuracy_));
}

::google::protobuf::Metadata Sensor_MountingPositionAndOrientation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[1]);
}
// ===================================================================

class Sensor::_Internal {
 public:
  using HasBits = decltype(std::declval<Sensor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Sensor, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, _impl_._oneof_case_);
  static const ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation& mounting_position_and_orientation(const Sensor* msg);
  static void set_has_mounting_position_and_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::source::NavigationSatelliteSystem& navigation_satellite_system(const Sensor* msg);
};

const ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation& Sensor::_Internal::mounting_position_and_orientation(const Sensor* msg) {
  return *msg->_impl_.mounting_position_and_orientation_;
}
const ::sensoris::protobuf::types::source::NavigationSatelliteSystem& Sensor::_Internal::navigation_satellite_system(const Sensor* msg) {
  return *msg->_impl_.specific_.navigation_satellite_system_;
}
void Sensor::set_allocated_navigation_satellite_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem* navigation_satellite_system) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_specific();
  if (navigation_satellite_system) {
    ::google::protobuf::Arena* submessage_arena = navigation_satellite_system->GetArena();
    if (message_arena != submessage_arena) {
      navigation_satellite_system = ::google::protobuf::internal::GetOwnedMessage(message_arena, navigation_satellite_system, submessage_arena);
    }
    set_has_navigation_satellite_system();
    _impl_.specific_.navigation_satellite_system_ = navigation_satellite_system;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Sensor.navigation_satellite_system)
}
Sensor::Sensor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.Sensor)
}
inline PROTOBUF_NDEBUG_INLINE Sensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        specific_{},
        _oneof_case_{from._oneof_case_[0]} {}

Sensor::Sensor(
    ::google::protobuf::Arena* arena,
    const Sensor& from)
    : ::google::protobuf::Message(arena) {
  Sensor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mounting_position_and_orientation_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation>(arena, *from._impl_.mounting_position_and_orientation_)
                : nullptr;
  switch (specific_case()) {
    case SPECIFIC_NOT_SET:
      break;
      case kNavigationSatelliteSystem:
        _impl_.specific_.navigation_satellite_system_ = CreateMaybeMessage<::sensoris::protobuf::types::source::NavigationSatelliteSystem>(arena, *from._impl_.specific_.navigation_satellite_system_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.Sensor)
}
inline PROTOBUF_NDEBUG_INLINE Sensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        specific_{},
        _oneof_case_{} {}

inline void Sensor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mounting_position_and_orientation_ = {};
}
Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.Sensor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Sensor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.mounting_position_and_orientation_;
  if (has_specific()) {
    clear_specific();
  }
  _impl_.~Impl_();
}

void Sensor::clear_specific() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.source.Sensor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (specific_case()) {
    case kNavigationSatelliteSystem: {
      if (GetArena() == nullptr) {
        delete _impl_.specific_.navigation_satellite_system_;
      }
      break;
    }
    case SPECIFIC_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SPECIFIC_NOT_SET;
}


PROTOBUF_NOINLINE void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.Sensor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.mounting_position_and_orientation_ != nullptr);
    _impl_.mounting_position_and_orientation_->Clear();
  }
  clear_specific();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Sensor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> Sensor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Sensor, _impl_._has_bits_),
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Sensor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Sensor, _impl_.mounting_position_and_orientation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
    {PROTOBUF_FIELD_OFFSET(Sensor, _impl_.mounting_position_and_orientation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
    {PROTOBUF_FIELD_OFFSET(Sensor, _impl_.specific_.navigation_satellite_system_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::source::NavigationSatelliteSystem>()},
  }}, {{
  }},
};

::uint8_t* Sensor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.Sensor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::mounting_position_and_orientation(this),
        _Internal::mounting_position_and_orientation(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
  if (specific_case() == kNavigationSatelliteSystem) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::navigation_satellite_system(this),
        _Internal::navigation_satellite_system(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.Sensor)
  return target;
}

::size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.Sensor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mounting_position_and_orientation_);
  }

  switch (specific_case()) {
    // .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
    case kNavigationSatelliteSystem: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.specific_.navigation_satellite_system_);
      break;
    }
    case SPECIFIC_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Sensor::_class_data_ = {
    Sensor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Sensor::GetClassData() const {
  return &_class_data_;
}

void Sensor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Sensor*>(&to_msg);
  auto& from = static_cast<const Sensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.Sensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_mounting_position_and_orientation()->::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation::MergeFrom(
        from._internal_mounting_position_and_orientation());
  }
  switch (from.specific_case()) {
    case kNavigationSatelliteSystem: {
      _this->_internal_mutable_navigation_satellite_system()->::sensoris::protobuf::types::source::NavigationSatelliteSystem::MergeFrom(
          from._internal_navigation_satellite_system());
      break;
    }
    case SPECIFIC_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Sensor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Sensor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Sensor::InternalSwap(Sensor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mounting_position_and_orientation_, other->_impl_.mounting_position_and_orientation_);
  swap(_impl_.specific_, other->_impl_.specific_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[2]);
}
// ===================================================================

class SensorFusion::_Internal {
 public:
};

void SensorFusion::clear_sensor_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_id_.Clear();
}
SensorFusion::SensorFusion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.SensorFusion)
}
inline PROTOBUF_NDEBUG_INLINE SensorFusion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : sensor_id_{visibility, arena, from.sensor_id_},
        _cached_size_{0} {}

SensorFusion::SensorFusion(
    ::google::protobuf::Arena* arena,
    const SensorFusion& from)
    : ::google::protobuf::Message(arena) {
  SensorFusion* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.SensorFusion)
}
inline PROTOBUF_NDEBUG_INLINE SensorFusion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : sensor_id_{visibility, arena},
        _cached_size_{0} {}

inline void SensorFusion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SensorFusion::~SensorFusion() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.SensorFusion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SensorFusion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SensorFusion::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.SensorFusion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_id_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SensorFusion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SensorFusion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SensorFusion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .google.protobuf.Int64Value sensor_id = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SensorFusion, _impl_.sensor_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .google.protobuf.Int64Value sensor_id = 1;
    {PROTOBUF_FIELD_OFFSET(SensorFusion, _impl_.sensor_id_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* SensorFusion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.SensorFusion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .google.protobuf.Int64Value sensor_id = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_id().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.SensorFusion)
  return target;
}

::size_t SensorFusion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.SensorFusion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Int64Value sensor_id = 1;
  total_size += 1UL * this->_internal_sensor_id_size();
  for (const auto& msg : this->_internal_sensor_id()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SensorFusion::_class_data_ = {
    SensorFusion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SensorFusion::GetClassData() const {
  return &_class_data_;
}

void SensorFusion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SensorFusion*>(&to_msg);
  auto& from = static_cast<const SensorFusion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.SensorFusion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sensor_id()->MergeFrom(
      from._internal_sensor_id());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SensorFusion::CopyFrom(const SensorFusion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.SensorFusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SensorFusion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SensorFusion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SensorFusion::InternalSwap(SensorFusion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sensor_id_.InternalSwap(&other->_impl_.sensor_id_);
}

::google::protobuf::Metadata SensorFusion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[3]);
}
// ===================================================================

class Source::_Internal {
 public:
  using HasBits = decltype(std::declval<Source>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Source, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _impl_._oneof_case_);
  static const ::google::protobuf::Int64Value& id(const Source* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Entity& entity(const Source* msg);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::Int64Value& sampling_frequency(const Source* msg);
  static void set_has_sampling_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::types::source::Sensor& sensor(const Source* msg);
  static const ::sensoris::protobuf::types::source::SensorFusion& sensor_fusion(const Source* msg);
};

const ::google::protobuf::Int64Value& Source::_Internal::id(const Source* msg) {
  return *msg->_impl_.id_;
}
const ::sensoris::protobuf::types::base::Entity& Source::_Internal::entity(const Source* msg) {
  return *msg->_impl_.entity_;
}
const ::sensoris::protobuf::types::base::Int64Value& Source::_Internal::sampling_frequency(const Source* msg) {
  return *msg->_impl_.sampling_frequency_;
}
const ::sensoris::protobuf::types::source::Sensor& Source::_Internal::sensor(const Source* msg) {
  return *msg->_impl_.source_.sensor_;
}
const ::sensoris::protobuf::types::source::SensorFusion& Source::_Internal::sensor_fusion(const Source* msg) {
  return *msg->_impl_.source_.sensor_fusion_;
}
void Source::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Source::clear_entity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.entity_ != nullptr) _impl_.entity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Source::clear_sampling_frequency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sampling_frequency_ != nullptr) _impl_.sampling_frequency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Source::set_allocated_sensor(::sensoris::protobuf::types::source::Sensor* sensor) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_source();
  if (sensor) {
    ::google::protobuf::Arena* submessage_arena = sensor->GetArena();
    if (message_arena != submessage_arena) {
      sensor = ::google::protobuf::internal::GetOwnedMessage(message_arena, sensor, submessage_arena);
    }
    set_has_sensor();
    _impl_.source_.sensor_ = sensor;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Source.sensor)
}
void Source::set_allocated_sensor_fusion(::sensoris::protobuf::types::source::SensorFusion* sensor_fusion) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_source();
  if (sensor_fusion) {
    ::google::protobuf::Arena* submessage_arena = sensor_fusion->GetArena();
    if (message_arena != submessage_arena) {
      sensor_fusion = ::google::protobuf::internal::GetOwnedMessage(message_arena, sensor_fusion, submessage_arena);
    }
    set_has_sensor_fusion();
    _impl_.source_.sensor_fusion_ = sensor_fusion;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Source.sensor_fusion)
}
void Source::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
Source::Source(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.Source)
}
inline PROTOBUF_NDEBUG_INLINE Source::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extension_{visibility, arena, from.extension_},
        source_{},
        _oneof_case_{from._oneof_case_[0]} {}

Source::Source(
    ::google::protobuf::Arena* arena,
    const Source& from)
    : ::google::protobuf::Message(arena) {
  Source* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.id_)
                : nullptr;
  _impl_.entity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Entity>(arena, *from._impl_.entity_)
                : nullptr;
  _impl_.sampling_frequency_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64Value>(arena, *from._impl_.sampling_frequency_)
                : nullptr;
  switch (source_case()) {
    case SOURCE_NOT_SET:
      break;
      case kSensor:
        _impl_.source_.sensor_ = CreateMaybeMessage<::sensoris::protobuf::types::source::Sensor>(arena, *from._impl_.source_.sensor_);
        break;
      case kSensorFusion:
        _impl_.source_.sensor_fusion_ = CreateMaybeMessage<::sensoris::protobuf::types::source::SensorFusion>(arena, *from._impl_.source_.sensor_fusion_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.Source)
}
inline PROTOBUF_NDEBUG_INLINE Source::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extension_{visibility, arena},
        source_{},
        _oneof_case_{} {}

inline void Source::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, sampling_frequency_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::sampling_frequency_));
}
Source::~Source() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.Source)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Source::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.id_;
  delete _impl_.entity_;
  delete _impl_.sampling_frequency_;
  if (has_source()) {
    clear_source();
  }
  _impl_.~Impl_();
}

void Source::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.source.Source)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (source_case()) {
    case kSensor: {
      if (GetArena() == nullptr) {
        delete _impl_.source_.sensor_;
      }
      break;
    }
    case kSensorFusion: {
      if (GetArena() == nullptr) {
        delete _impl_.source_.sensor_fusion_;
      }
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}


PROTOBUF_NOINLINE void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.Source)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.entity_ != nullptr);
      _impl_.entity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.sampling_frequency_ != nullptr);
      _impl_.sampling_frequency_->Clear();
    }
  }
  clear_source();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Source::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2> Source::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Source, _impl_._has_bits_),
    0, // no _extensions_
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950880,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Source_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Int64Value id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Source, _impl_.id_)}},
    // .sensoris.protobuf.types.base.Entity entity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Source, _impl_.entity_)}},
    // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Source, _impl_.sampling_frequency_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 5, PROTOBUF_FIELD_OFFSET(Source, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Int64Value id = 1;
    {PROTOBUF_FIELD_OFFSET(Source, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Entity entity = 2;
    {PROTOBUF_FIELD_OFFSET(Source, _impl_.entity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    {PROTOBUF_FIELD_OFFSET(Source, _impl_.sampling_frequency_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.source.Sensor sensor = 4;
    {PROTOBUF_FIELD_OFFSET(Source, _impl_.source_.sensor_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.source.SensorFusion sensor_fusion = 5;
    {PROTOBUF_FIELD_OFFSET(Source, _impl_.source_.sensor_fusion_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(Source, _impl_.extension_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Entity>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::source::Sensor>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::source::SensorFusion>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* Source::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.Source)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Int64Value id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Entity entity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::sampling_frequency(this),
        _Internal::sampling_frequency(this).GetCachedSize(), target, stream);
  }

  switch (source_case()) {
    case kSensor: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::sensor(this),
          _Internal::sensor(this).GetCachedSize(), target, stream);
      break;
    }
    case kSensorFusion: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::sensor_fusion(this),
          _Internal::sensor_fusion(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.Source)
  return target;
}

::size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.Source)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Int64Value id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.id_);
    }

    // .sensoris.protobuf.types.base.Entity entity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.entity_);
    }

    // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sampling_frequency_);
    }

  }
  switch (source_case()) {
    // .sensoris.protobuf.types.source.Sensor sensor = 4;
    case kSensor: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.source_.sensor_);
      break;
    }
    // .sensoris.protobuf.types.source.SensorFusion sensor_fusion = 5;
    case kSensorFusion: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.source_.sensor_fusion_);
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Source::_class_data_ = {
    Source::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Source::GetClassData() const {
  return &_class_data_;
}

void Source::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Source*>(&to_msg);
  auto& from = static_cast<const Source&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.Source)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_id()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_entity()->::sensoris::protobuf::types::base::Entity::MergeFrom(
          from._internal_entity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sampling_frequency()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(
          from._internal_sampling_frequency());
    }
  }
  switch (from.source_case()) {
    case kSensor: {
      _this->_internal_mutable_sensor()->::sensoris::protobuf::types::source::Sensor::MergeFrom(
          from._internal_sensor());
      break;
    }
    case kSensorFusion: {
      _this->_internal_mutable_sensor_fusion()->::sensoris::protobuf::types::source::SensorFusion::MergeFrom(
          from._internal_sensor_fusion());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Source::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Source::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Source::InternalSwap(Source* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Source, _impl_.sampling_frequency_)
      + sizeof(Source::_impl_.sampling_frequency_)
      - PROTOBUF_FIELD_OFFSET(Source, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.source_, other->_impl_.source_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Source::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fsource_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fsource_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace source
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
