/*
 * Copyright (c) 2017-2022 SENSORIS Innovation Platform hosted by ERTICO - ITS Europe.
 *
 * This program and the accompanying materials are made available under the terms of the Creative Commons Attribution-NoDerivatives 4.0 International license which accompanies this distribution, and is available at https://creativecommons.org/licenses/by-nd/4.0/legalcode.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/weather.proto

// Protobuf Java Version: 3.25.1
package org.sensoris.categories.weather;

public interface VisibilityConditionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.weather.VisibilityCondition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   * @return Whether the envelope field is set.
   */
  boolean hasEnvelope();
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   * @return The envelope.
   */
  org.sensoris.types.base.EventEnvelope getEnvelope();
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder();

  /**
   * <pre>
   * Type and confidence of type.
   *
   * If type is NONE, then distances shall not be set.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;</code>
   * @return Whether the typeAndConfidence field is set.
   */
  boolean hasTypeAndConfidence();
  /**
   * <pre>
   * Type and confidence of type.
   *
   * If type is NONE, then distances shall not be set.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;</code>
   * @return The typeAndConfidence.
   */
  org.sensoris.categories.weather.VisibilityCondition.TypeAndConfidence getTypeAndConfidence();
  /**
   * <pre>
   * Type and confidence of type.
   *
   * If type is NONE, then distances shall not be set.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.weather.VisibilityCondition.TypeAndConfidence type_and_confidence = 2;</code>
   */
  org.sensoris.categories.weather.VisibilityCondition.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder();

  /**
   * <pre>
   * Visible light distance and accuracy.
   *
   * &#64;unit Meter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return Whether the visibleDistanceAndAccuracy field is set.
   */
  boolean hasVisibleDistanceAndAccuracy();
  /**
   * <pre>
   * Visible light distance and accuracy.
   *
   * &#64;unit Meter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return The visibleDistanceAndAccuracy.
   */
  org.sensoris.types.base.Int64ValueAndAccuracy getVisibleDistanceAndAccuracy();
  /**
   * <pre>
   * Visible light distance and accuracy.
   *
   * &#64;unit Meter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy visible_distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getVisibleDistanceAndAccuracyOrBuilder();

  /**
   * <pre>
   * Non visible light (sensor) distance and accuracy.
   *
   * &#64;unit Meter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return Whether the sensorDetectionDistanceAndAccuracy field is set.
   */
  boolean hasSensorDetectionDistanceAndAccuracy();
  /**
   * <pre>
   * Non visible light (sensor) distance and accuracy.
   *
   * &#64;unit Meter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return The sensorDetectionDistanceAndAccuracy.
   */
  org.sensoris.types.base.Int64ValueAndAccuracy getSensorDetectionDistanceAndAccuracy();
  /**
   * <pre>
   * Non visible light (sensor) distance and accuracy.
   *
   * &#64;unit Meter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy sensor_detection_distance_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getSensorDetectionDistanceAndAccuracyOrBuilder();
}
