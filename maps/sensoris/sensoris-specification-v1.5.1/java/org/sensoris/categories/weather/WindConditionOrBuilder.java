/*
 * Copyright (c) 2017-2022 SENSORIS Innovation Platform hosted by ERTICO - ITS Europe.
 *
 * This program and the accompanying materials are made available under the terms of the Creative Commons Attribution-NoDerivatives 4.0 International license which accompanies this distribution, and is available at https://creativecommons.org/licenses/by-nd/4.0/legalcode.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/weather.proto

// Protobuf Java Version: 3.25.1
package org.sensoris.categories.weather;

public interface WindConditionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.weather.WindCondition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   * @return Whether the envelope field is set.
   */
  boolean hasEnvelope();
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   * @return The envelope.
   */
  org.sensoris.types.base.EventEnvelope getEnvelope();
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder();

  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
   * @return Whether the detectionStatus field is set.
   */
  boolean hasDetectionStatus();
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
   * @return The detectionStatus.
   */
  org.sensoris.types.base.EventDetectionStatus getDetectionStatus();
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;</code>
   */
  org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder();

  /**
   * <pre>
   * Type and confidence of type.
   *
   * If type is NONE, then speed and direction shall not be set.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;</code>
   * @return Whether the typeAndConfidence field is set.
   */
  boolean hasTypeAndConfidence();
  /**
   * <pre>
   * Type and confidence of type.
   *
   * If type is NONE, then speed and direction shall not be set.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;</code>
   * @return The typeAndConfidence.
   */
  org.sensoris.categories.weather.WindCondition.TypeAndConfidence getTypeAndConfidence();
  /**
   * <pre>
   * Type and confidence of type.
   *
   * If type is NONE, then speed and direction shall not be set.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.weather.WindCondition.TypeAndConfidence type_and_confidence = 3;</code>
   */
  org.sensoris.categories.weather.WindCondition.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder();

  /**
   * <pre>
   * Wind speed.
   *
   * &#64;unit Meter per Second
   * &#64;resolution 1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return Whether the speedAndAccuracy field is set.
   */
  boolean hasSpeedAndAccuracy();
  /**
   * <pre>
   * Wind speed.
   *
   * &#64;unit Meter per Second
   * &#64;resolution 1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return The speedAndAccuracy.
   */
  org.sensoris.types.base.Int64ValueAndAccuracy getSpeedAndAccuracy();
  /**
   * <pre>
   * Wind speed.
   *
   * &#64;unit Meter per Second
   * &#64;resolution 1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getSpeedAndAccuracyOrBuilder();

  /**
   * <pre>
   * Wind direction.
   *
   * &#64;unit Degree
   * &#64;resolution 1
   * &#64;range [0, 360)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return Whether the directionAndAccuracy field is set.
   */
  boolean hasDirectionAndAccuracy();
  /**
   * <pre>
   * Wind direction.
   *
   * &#64;unit Degree
   * &#64;resolution 1
   * &#64;range [0, 360)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return The directionAndAccuracy.
   */
  org.sensoris.types.base.Int64ValueAndAccuracy getDirectionAndAccuracy();
  /**
   * <pre>
   * Wind direction.
   *
   * &#64;unit Degree
   * &#64;resolution 1
   * &#64;range [0, 360)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy direction_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getDirectionAndAccuracyOrBuilder();
}
