/*
 * Copyright (c) 2017-2022 SENSORIS Innovation Platform hosted by ERTICO - ITS Europe.
 *
 * This program and the accompanying materials are made available under the terms of the Creative Commons Attribution-NoDerivatives 4.0 International license which accompanies this distribution, and is available at https://creativecommons.org/licenses/by-nd/4.0/legalcode.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/weather.proto

// Protobuf Java Version: 3.25.1
package org.sensoris.categories.weather;

public interface AtmosphereConditionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.weather.AtmosphereCondition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   * @return Whether the envelope field is set.
   */
  boolean hasEnvelope();
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   * @return The envelope.
   */
  org.sensoris.types.base.EventEnvelope getEnvelope();
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder();

  /**
   * <pre>
   * Outside air temperature.
   *
   * &#64;unit Degree Celsius
   * &#64;resolution 1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return Whether the outsideAirTemperature field is set.
   */
  boolean hasOutsideAirTemperature();
  /**
   * <pre>
   * Outside air temperature.
   *
   * &#64;unit Degree Celsius
   * &#64;resolution 1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return The outsideAirTemperature.
   */
  org.sensoris.types.base.Int64ValueAndAccuracy getOutsideAirTemperature();
  /**
   * <pre>
   * Outside air temperature.
   *
   * &#64;unit Degree Celsius
   * &#64;resolution 1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy outside_air_temperature = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getOutsideAirTemperatureOrBuilder();

  /**
   * <pre>
   * Outside air relative humidity.
   *
   * &#64;unit Percent
   * &#64;resolution 1
   * &#64;range [0,100]
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return Whether the relativeHumidity field is set.
   */
  boolean hasRelativeHumidity();
  /**
   * <pre>
   * Outside air relative humidity.
   *
   * &#64;unit Percent
   * &#64;resolution 1
   * &#64;range [0,100]
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return The relativeHumidity.
   */
  org.sensoris.types.base.Int64ValueAndAccuracy getRelativeHumidity();
  /**
   * <pre>
   * Outside air relative humidity.
   *
   * &#64;unit Percent
   * &#64;resolution 1
   * &#64;range [0,100]
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_humidity = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getRelativeHumidityOrBuilder();

  /**
   * <pre>
   * Static air pressure.
   *
   * &#64;unit HectoPascal
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return Whether the staticAirPressure field is set.
   */
  boolean hasStaticAirPressure();
  /**
   * <pre>
   * Static air pressure.
   *
   * &#64;unit HectoPascal
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   * @return The staticAirPressure.
   */
  org.sensoris.types.base.Int64ValueAndAccuracy getStaticAirPressure();
  /**
   * <pre>
   * Static air pressure.
   *
   * &#64;unit HectoPascal
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy static_air_pressure = 4 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getStaticAirPressureOrBuilder();
}
