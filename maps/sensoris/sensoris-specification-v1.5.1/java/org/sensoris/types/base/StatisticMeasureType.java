/*
 * Copyright (c) 2017-2022 SENSORIS Innovation Platform hosted by ERTICO - ITS Europe.
 *
 * This program and the accompanying materials are made available under the terms of the Creative Commons Attribution-NoDerivatives 4.0 International license which accompanies this distribution, and is available at https://creativecommons.org/licenses/by-nd/4.0/legalcode.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/base.proto

// Protobuf Java Version: 3.25.1
package org.sensoris.types.base;

/**
 * <pre>
 * Type of statistic measure.
 * </pre>
 *
 * Protobuf enum {@code sensoris.protobuf.types.base.StatisticMeasureType}
 */
public enum StatisticMeasureType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unknown.
   * </pre>
   *
   * <code>UNKNOWN_STATISTIC_MEASURE_TYPE = 0;</code>
   */
  UNKNOWN_STATISTIC_MEASURE_TYPE(0),
  /**
   * <pre>
   * Minimum.
   * </pre>
   *
   * <code>MINIMUM = 1;</code>
   */
  MINIMUM(1),
  /**
   * <pre>
   * Maximum.
   * </pre>
   *
   * <code>MAXIMUM = 2;</code>
   */
  MAXIMUM(2),
  /**
   * <pre>
   * Average.
   * </pre>
   *
   * <code>AVERAGE = 3;</code>
   */
  AVERAGE(3),
  /**
   * <pre>
   * Median.
   * </pre>
   *
   * <code>MEDIAN = 4;</code>
   */
  MEDIAN(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unknown.
   * </pre>
   *
   * <code>UNKNOWN_STATISTIC_MEASURE_TYPE = 0;</code>
   */
  public static final int UNKNOWN_STATISTIC_MEASURE_TYPE_VALUE = 0;
  /**
   * <pre>
   * Minimum.
   * </pre>
   *
   * <code>MINIMUM = 1;</code>
   */
  public static final int MINIMUM_VALUE = 1;
  /**
   * <pre>
   * Maximum.
   * </pre>
   *
   * <code>MAXIMUM = 2;</code>
   */
  public static final int MAXIMUM_VALUE = 2;
  /**
   * <pre>
   * Average.
   * </pre>
   *
   * <code>AVERAGE = 3;</code>
   */
  public static final int AVERAGE_VALUE = 3;
  /**
   * <pre>
   * Median.
   * </pre>
   *
   * <code>MEDIAN = 4;</code>
   */
  public static final int MEDIAN_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static StatisticMeasureType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static StatisticMeasureType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_STATISTIC_MEASURE_TYPE;
      case 1: return MINIMUM;
      case 2: return MAXIMUM;
      case 3: return AVERAGE;
      case 4: return MEDIAN;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<StatisticMeasureType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      StatisticMeasureType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<StatisticMeasureType>() {
          public StatisticMeasureType findValueByNumber(int number) {
            return StatisticMeasureType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.sensoris.types.base.SensorisBaseTypes.getDescriptor().getEnumTypes().get(2);
  }

  private static final StatisticMeasureType[] VALUES = values();

  public static StatisticMeasureType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private StatisticMeasureType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:sensoris.protobuf.types.base.StatisticMeasureType)
}

