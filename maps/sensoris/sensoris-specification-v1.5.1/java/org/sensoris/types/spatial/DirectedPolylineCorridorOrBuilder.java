/*
 * Copyright (c) 2017-2022 SENSORIS Innovation Platform hosted by ERTICO - ITS Europe.
 *
 * This program and the accompanying materials are made available under the terms of the Creative Commons Attribution-NoDerivatives 4.0 International license which accompanies this distribution, and is available at https://creativecommons.org/licenses/by-nd/4.0/legalcode.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/spatial.proto

// Protobuf Java Version: 3.25.1
package org.sensoris.types.spatial;

public interface DirectedPolylineCorridorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sensoris.protobuf.types.spatial.DirectedPolylineCorridor)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Corridor defined by center polyline and total width without accuracy.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.PolylineCorridorAndAccuracy polyline_corridor = 1;</code>
   * @return Whether the polylineCorridor field is set.
   */
  boolean hasPolylineCorridor();
  /**
   * <pre>
   * Corridor defined by center polyline and total width without accuracy.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.PolylineCorridorAndAccuracy polyline_corridor = 1;</code>
   * @return The polylineCorridor.
   */
  org.sensoris.types.spatial.PolylineCorridorAndAccuracy getPolylineCorridor();
  /**
   * <pre>
   * Corridor defined by center polyline and total width without accuracy.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.PolylineCorridorAndAccuracy polyline_corridor = 1;</code>
   */
  org.sensoris.types.spatial.PolylineCorridorAndAccuracyOrBuilder getPolylineCorridorOrBuilder();

  /**
   * <pre>
   * Directionality of the corridor.
   *
   * The directionality is defined as follows:
   * - TRUE defines a corridor which can be driven in both directions. It matches restriction in both directions (forward and backward).
   * - FALSE or not set defines a corridor which can be driven only in one direction. It matches restriction in forward direction only.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue is_bidirectional = 2;</code>
   * @return Whether the isBidirectional field is set.
   */
  boolean hasIsBidirectional();
  /**
   * <pre>
   * Directionality of the corridor.
   *
   * The directionality is defined as follows:
   * - TRUE defines a corridor which can be driven in both directions. It matches restriction in both directions (forward and backward).
   * - FALSE or not set defines a corridor which can be driven only in one direction. It matches restriction in forward direction only.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue is_bidirectional = 2;</code>
   * @return The isBidirectional.
   */
  com.google.protobuf.BoolValue getIsBidirectional();
  /**
   * <pre>
   * Directionality of the corridor.
   *
   * The directionality is defined as follows:
   * - TRUE defines a corridor which can be driven in both directions. It matches restriction in both directions (forward and backward).
   * - FALSE or not set defines a corridor which can be driven only in one direction. It matches restriction in forward direction only.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue is_bidirectional = 2;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getIsBidirectionalOrBuilder();

  /**
   * <pre>
   * Maximum allowed heading deviation from the center line direction at the projected position of the vehicle against the center line.
   *
   * The deviation is an absolute value symmetrical in both direction (clockwise and counterclockwise).
   *
   * &#64;unit Degree
   * &#64;resolution 1
   * &#64;range (0, 90)
   * </pre>
   *
   * <code>.google.protobuf.Int64Value heading_deviation_from_center_line = 3;</code>
   * @return Whether the headingDeviationFromCenterLine field is set.
   */
  boolean hasHeadingDeviationFromCenterLine();
  /**
   * <pre>
   * Maximum allowed heading deviation from the center line direction at the projected position of the vehicle against the center line.
   *
   * The deviation is an absolute value symmetrical in both direction (clockwise and counterclockwise).
   *
   * &#64;unit Degree
   * &#64;resolution 1
   * &#64;range (0, 90)
   * </pre>
   *
   * <code>.google.protobuf.Int64Value heading_deviation_from_center_line = 3;</code>
   * @return The headingDeviationFromCenterLine.
   */
  com.google.protobuf.Int64Value getHeadingDeviationFromCenterLine();
  /**
   * <pre>
   * Maximum allowed heading deviation from the center line direction at the projected position of the vehicle against the center line.
   *
   * The deviation is an absolute value symmetrical in both direction (clockwise and counterclockwise).
   *
   * &#64;unit Degree
   * &#64;resolution 1
   * &#64;range (0, 90)
   * </pre>
   *
   * <code>.google.protobuf.Int64Value heading_deviation_from_center_line = 3;</code>
   */
  com.google.protobuf.Int64ValueOrBuilder getHeadingDeviationFromCenterLineOrBuilder();

  /**
   * <pre>
   * Proprietary extension.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extension = 15;</code>
   */
  java.util.List<com.google.protobuf.Any> 
      getExtensionList();
  /**
   * <pre>
   * Proprietary extension.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extension = 15;</code>
   */
  com.google.protobuf.Any getExtension(int index);
  /**
   * <pre>
   * Proprietary extension.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extension = 15;</code>
   */
  int getExtensionCount();
  /**
   * <pre>
   * Proprietary extension.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extension = 15;</code>
   */
  java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
      getExtensionOrBuilderList();
  /**
   * <pre>
   * Proprietary extension.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any extension = 15;</code>
   */
  com.google.protobuf.AnyOrBuilder getExtensionOrBuilder(
      int index);
}
