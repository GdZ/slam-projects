/**
 * Copyright (c) 2017-2022 SENSORIS Innovation Platform hosted by ERTICO - ITS Europe.
 *
 * This program and the accompanying materials are made available under the terms of the Creative Commons Attribution-NoDerivatives 4.0 International license which accompanies this distribution, and is available at https://creativecommons.org/licenses/by-nd/4.0/legalcode.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/vehicle_device.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace vehicledevice {
class ExteriorLightStatus;
struct ExteriorLightStatusDefaultTypeInternal;
extern ExteriorLightStatusDefaultTypeInternal _ExteriorLightStatus_default_instance_;
class ExteriorLightStatus_TypeAndStatus;
struct ExteriorLightStatus_TypeAndStatusDefaultTypeInternal;
extern ExteriorLightStatus_TypeAndStatusDefaultTypeInternal _ExteriorLightStatus_TypeAndStatus_default_instance_;
class VehicleDeviceCategory;
struct VehicleDeviceCategoryDefaultTypeInternal;
extern VehicleDeviceCategoryDefaultTypeInternal _VehicleDeviceCategory_default_instance_;
class WiperStatus;
struct WiperStatusDefaultTypeInternal;
extern WiperStatusDefaultTypeInternal _WiperStatus_default_instance_;
}  // namespace vehicledevice
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace categories {
namespace vehicledevice {
enum ExteriorLightStatus_TypeAndStatus_Type : int {
  ExteriorLightStatus_TypeAndStatus_Type_UNKNOWN_TYPE = 0,
  ExteriorLightStatus_TypeAndStatus_Type_LOW_BEAMS = 1,
  ExteriorLightStatus_TypeAndStatus_Type_HIGH_BEAMS = 2,
  ExteriorLightStatus_TypeAndStatus_Type_FOG_LIGHT_FRONT = 3,
  ExteriorLightStatus_TypeAndStatus_Type_FOG_LIGHT_REAR = 4,
  ExteriorLightStatus_TypeAndStatus_Type_HAZARD = 5,
  ExteriorLightStatus_TypeAndStatus_Type_LEFT_TURN = 6,
  ExteriorLightStatus_TypeAndStatus_Type_RIGHT_TURN = 7,
  ExteriorLightStatus_TypeAndStatus_Type_BRAKE = 8,
  ExteriorLightStatus_TypeAndStatus_Type_REVERSE = 9,
  ExteriorLightStatus_TypeAndStatus_Type_PARKING = 10,
  ExteriorLightStatus_TypeAndStatus_Type_ExteriorLightStatus_TypeAndStatus_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ExteriorLightStatus_TypeAndStatus_Type_ExteriorLightStatus_TypeAndStatus_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ExteriorLightStatus_TypeAndStatus_Type_IsValid(int value);
extern const uint32_t ExteriorLightStatus_TypeAndStatus_Type_internal_data_[];
constexpr ExteriorLightStatus_TypeAndStatus_Type ExteriorLightStatus_TypeAndStatus_Type_Type_MIN = static_cast<ExteriorLightStatus_TypeAndStatus_Type>(0);
constexpr ExteriorLightStatus_TypeAndStatus_Type ExteriorLightStatus_TypeAndStatus_Type_Type_MAX = static_cast<ExteriorLightStatus_TypeAndStatus_Type>(10);
constexpr int ExteriorLightStatus_TypeAndStatus_Type_Type_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
ExteriorLightStatus_TypeAndStatus_Type_descriptor();
template <typename T>
const std::string& ExteriorLightStatus_TypeAndStatus_Type_Name(T value) {
  static_assert(std::is_same<T, ExteriorLightStatus_TypeAndStatus_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ExteriorLightStatus_TypeAndStatus_Type_Name(static_cast<ExteriorLightStatus_TypeAndStatus_Type>(value));
}
template <>
inline const std::string& ExteriorLightStatus_TypeAndStatus_Type_Name(ExteriorLightStatus_TypeAndStatus_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ExteriorLightStatus_TypeAndStatus_Type_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool ExteriorLightStatus_TypeAndStatus_Type_Parse(absl::string_view name, ExteriorLightStatus_TypeAndStatus_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExteriorLightStatus_TypeAndStatus_Type>(
      ExteriorLightStatus_TypeAndStatus_Type_descriptor(), name, value);
}
enum WiperStatus_SpeedType : int {
  WiperStatus_SpeedType_UNKNOWN_SPEED_TYPE = 0,
  WiperStatus_SpeedType_OFF = 1,
  WiperStatus_SpeedType_SLOW = 2,
  WiperStatus_SpeedType_MEDIUM = 3,
  WiperStatus_SpeedType_FAST = 4,
  WiperStatus_SpeedType_AUTOMATIC = 5,
  WiperStatus_SpeedType_WASHING = 6,
  WiperStatus_SpeedType_SINGLE = 7,
  WiperStatus_SpeedType_WiperStatus_SpeedType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WiperStatus_SpeedType_WiperStatus_SpeedType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WiperStatus_SpeedType_IsValid(int value);
extern const uint32_t WiperStatus_SpeedType_internal_data_[];
constexpr WiperStatus_SpeedType WiperStatus_SpeedType_SpeedType_MIN = static_cast<WiperStatus_SpeedType>(0);
constexpr WiperStatus_SpeedType WiperStatus_SpeedType_SpeedType_MAX = static_cast<WiperStatus_SpeedType>(7);
constexpr int WiperStatus_SpeedType_SpeedType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
WiperStatus_SpeedType_descriptor();
template <typename T>
const std::string& WiperStatus_SpeedType_Name(T value) {
  static_assert(std::is_same<T, WiperStatus_SpeedType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SpeedType_Name().");
  return WiperStatus_SpeedType_Name(static_cast<WiperStatus_SpeedType>(value));
}
template <>
inline const std::string& WiperStatus_SpeedType_Name(WiperStatus_SpeedType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WiperStatus_SpeedType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool WiperStatus_SpeedType_Parse(absl::string_view name, WiperStatus_SpeedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WiperStatus_SpeedType>(
      WiperStatus_SpeedType_descriptor(), name, value);
}
enum Status : int {
  UNKNOWN_STATUS = 0,
  ON = 1,
  OFF = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Status_IsValid(int value);
extern const uint32_t Status_internal_data_[];
constexpr Status Status_MIN = static_cast<Status>(0);
constexpr Status Status_MAX = static_cast<Status>(2);
constexpr int Status_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Status_descriptor();
template <typename T>
const std::string& Status_Name(T value) {
  static_assert(std::is_same<T, Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Status_Name(static_cast<Status>(value));
}
template <>
inline const std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Status_Parse(absl::string_view name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
      Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ExteriorLightStatus_TypeAndStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus) */ {
 public:
  inline ExteriorLightStatus_TypeAndStatus() : ExteriorLightStatus_TypeAndStatus(nullptr) {}
  ~ExteriorLightStatus_TypeAndStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExteriorLightStatus_TypeAndStatus(::google::protobuf::internal::ConstantInitialized);

  inline ExteriorLightStatus_TypeAndStatus(const ExteriorLightStatus_TypeAndStatus& from)
      : ExteriorLightStatus_TypeAndStatus(nullptr, from) {}
  ExteriorLightStatus_TypeAndStatus(ExteriorLightStatus_TypeAndStatus&& from) noexcept
    : ExteriorLightStatus_TypeAndStatus() {
    *this = ::std::move(from);
  }

  inline ExteriorLightStatus_TypeAndStatus& operator=(const ExteriorLightStatus_TypeAndStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExteriorLightStatus_TypeAndStatus& operator=(ExteriorLightStatus_TypeAndStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExteriorLightStatus_TypeAndStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExteriorLightStatus_TypeAndStatus* internal_default_instance() {
    return reinterpret_cast<const ExteriorLightStatus_TypeAndStatus*>(
               &_ExteriorLightStatus_TypeAndStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExteriorLightStatus_TypeAndStatus& a, ExteriorLightStatus_TypeAndStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExteriorLightStatus_TypeAndStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExteriorLightStatus_TypeAndStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExteriorLightStatus_TypeAndStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExteriorLightStatus_TypeAndStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExteriorLightStatus_TypeAndStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExteriorLightStatus_TypeAndStatus& from) {
    ExteriorLightStatus_TypeAndStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExteriorLightStatus_TypeAndStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus";
  }
  protected:
  explicit ExteriorLightStatus_TypeAndStatus(::google::protobuf::Arena* arena);
  ExteriorLightStatus_TypeAndStatus(::google::protobuf::Arena* arena, const ExteriorLightStatus_TypeAndStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = ExteriorLightStatus_TypeAndStatus_Type;
  static constexpr Type UNKNOWN_TYPE = ExteriorLightStatus_TypeAndStatus_Type_UNKNOWN_TYPE;
  static constexpr Type LOW_BEAMS = ExteriorLightStatus_TypeAndStatus_Type_LOW_BEAMS;
  static constexpr Type HIGH_BEAMS = ExteriorLightStatus_TypeAndStatus_Type_HIGH_BEAMS;
  static constexpr Type FOG_LIGHT_FRONT = ExteriorLightStatus_TypeAndStatus_Type_FOG_LIGHT_FRONT;
  static constexpr Type FOG_LIGHT_REAR = ExteriorLightStatus_TypeAndStatus_Type_FOG_LIGHT_REAR;
  static constexpr Type HAZARD = ExteriorLightStatus_TypeAndStatus_Type_HAZARD;
  static constexpr Type LEFT_TURN = ExteriorLightStatus_TypeAndStatus_Type_LEFT_TURN;
  static constexpr Type RIGHT_TURN = ExteriorLightStatus_TypeAndStatus_Type_RIGHT_TURN;
  static constexpr Type BRAKE = ExteriorLightStatus_TypeAndStatus_Type_BRAKE;
  static constexpr Type REVERSE = ExteriorLightStatus_TypeAndStatus_Type_REVERSE;
  static constexpr Type PARKING = ExteriorLightStatus_TypeAndStatus_Type_PARKING;
  static inline bool Type_IsValid(int value) {
    return ExteriorLightStatus_TypeAndStatus_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ExteriorLightStatus_TypeAndStatus_Type_Type_MIN;
  static constexpr Type Type_MAX = ExteriorLightStatus_TypeAndStatus_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ExteriorLightStatus_TypeAndStatus_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return ExteriorLightStatus_TypeAndStatus_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return ExteriorLightStatus_TypeAndStatus_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return ExteriorLightStatus_TypeAndStatus_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus.Type type = 1;
  void clear_type() ;
  ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type type() const;
  void set_type(::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type value);

  private:
  ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type _internal_type() const;
  void _internal_set_type(::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type value);

  public:
  // .sensoris.protobuf.categories.vehicledevice.Status status = 2;
  void clear_status() ;
  ::sensoris::protobuf::categories::vehicledevice::Status status() const;
  void set_status(::sensoris::protobuf::categories::vehicledevice::Status value);

  private:
  ::sensoris::protobuf::categories::vehicledevice::Status _internal_status() const;
  void _internal_set_status(::sensoris::protobuf::categories::vehicledevice::Status value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int type_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto;
};// -------------------------------------------------------------------

class ExteriorLightStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus) */ {
 public:
  inline ExteriorLightStatus() : ExteriorLightStatus(nullptr) {}
  ~ExteriorLightStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExteriorLightStatus(::google::protobuf::internal::ConstantInitialized);

  inline ExteriorLightStatus(const ExteriorLightStatus& from)
      : ExteriorLightStatus(nullptr, from) {}
  ExteriorLightStatus(ExteriorLightStatus&& from) noexcept
    : ExteriorLightStatus() {
    *this = ::std::move(from);
  }

  inline ExteriorLightStatus& operator=(const ExteriorLightStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExteriorLightStatus& operator=(ExteriorLightStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExteriorLightStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExteriorLightStatus* internal_default_instance() {
    return reinterpret_cast<const ExteriorLightStatus*>(
               &_ExteriorLightStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExteriorLightStatus& a, ExteriorLightStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExteriorLightStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExteriorLightStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExteriorLightStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExteriorLightStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExteriorLightStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExteriorLightStatus& from) {
    ExteriorLightStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExteriorLightStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus";
  }
  protected:
  explicit ExteriorLightStatus(::google::protobuf::Arena* arena);
  ExteriorLightStatus(::google::protobuf::Arena* arena, const ExteriorLightStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TypeAndStatus = ExteriorLightStatus_TypeAndStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kTypeAndStatusFieldNumber = 2,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus type_and_status = 2;
  int type_and_status_size() const;
  private:
  int _internal_type_and_status_size() const;

  public:
  void clear_type_and_status() ;
  ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus* mutable_type_and_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus >*
      mutable_type_and_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus>& _internal_type_and_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus>* _internal_mutable_type_and_status();
  public:
  const ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus& type_and_status(int index) const;
  ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus* add_type_and_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus >&
      type_and_status() const;
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus > type_and_status_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto;
};// -------------------------------------------------------------------

class WiperStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.vehicledevice.WiperStatus) */ {
 public:
  inline WiperStatus() : WiperStatus(nullptr) {}
  ~WiperStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WiperStatus(::google::protobuf::internal::ConstantInitialized);

  inline WiperStatus(const WiperStatus& from)
      : WiperStatus(nullptr, from) {}
  WiperStatus(WiperStatus&& from) noexcept
    : WiperStatus() {
    *this = ::std::move(from);
  }

  inline WiperStatus& operator=(const WiperStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline WiperStatus& operator=(WiperStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WiperStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const WiperStatus* internal_default_instance() {
    return reinterpret_cast<const WiperStatus*>(
               &_WiperStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WiperStatus& a, WiperStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(WiperStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WiperStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WiperStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WiperStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WiperStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WiperStatus& from) {
    WiperStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WiperStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.vehicledevice.WiperStatus";
  }
  protected:
  explicit WiperStatus(::google::protobuf::Arena* arena);
  WiperStatus(::google::protobuf::Arena* arena, const WiperStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SpeedType = WiperStatus_SpeedType;
  static constexpr SpeedType UNKNOWN_SPEED_TYPE = WiperStatus_SpeedType_UNKNOWN_SPEED_TYPE;
  static constexpr SpeedType OFF = WiperStatus_SpeedType_OFF;
  static constexpr SpeedType SLOW = WiperStatus_SpeedType_SLOW;
  static constexpr SpeedType MEDIUM = WiperStatus_SpeedType_MEDIUM;
  static constexpr SpeedType FAST = WiperStatus_SpeedType_FAST;
  static constexpr SpeedType AUTOMATIC = WiperStatus_SpeedType_AUTOMATIC;
  static constexpr SpeedType WASHING = WiperStatus_SpeedType_WASHING;
  static constexpr SpeedType SINGLE = WiperStatus_SpeedType_SINGLE;
  static inline bool SpeedType_IsValid(int value) {
    return WiperStatus_SpeedType_IsValid(value);
  }
  static constexpr SpeedType SpeedType_MIN = WiperStatus_SpeedType_SpeedType_MIN;
  static constexpr SpeedType SpeedType_MAX = WiperStatus_SpeedType_SpeedType_MAX;
  static constexpr int SpeedType_ARRAYSIZE = WiperStatus_SpeedType_SpeedType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SpeedType_descriptor() {
    return WiperStatus_SpeedType_descriptor();
  }
  template <typename T>
  static inline const std::string& SpeedType_Name(T value) {
    return WiperStatus_SpeedType_Name(value);
  }
  static inline bool SpeedType_Parse(absl::string_view name, SpeedType* value) {
    return WiperStatus_SpeedType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kSpeedAndAccuracyFieldNumber = 3,
    kSpeedTypeFieldNumber = 2,
  };
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* _internal_mutable_envelope();

  public:
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_speed_and_accuracy() const;
  void clear_speed_and_accuracy() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& speed_and_accuracy() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_speed_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_speed_and_accuracy();
  void set_allocated_speed_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  void unsafe_arena_set_allocated_speed_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_speed_and_accuracy();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_speed_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _internal_mutable_speed_and_accuracy();

  public:
  // .sensoris.protobuf.categories.vehicledevice.WiperStatus.SpeedType speed_type = 2;
  void clear_speed_type() ;
  ::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType speed_type() const;
  void set_speed_type(::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType value);

  private:
  ::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType _internal_speed_type() const;
  void _internal_set_speed_type(::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.vehicledevice.WiperStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* speed_and_accuracy_;
    int speed_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto;
};// -------------------------------------------------------------------

class VehicleDeviceCategory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory) */ {
 public:
  inline VehicleDeviceCategory() : VehicleDeviceCategory(nullptr) {}
  ~VehicleDeviceCategory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleDeviceCategory(::google::protobuf::internal::ConstantInitialized);

  inline VehicleDeviceCategory(const VehicleDeviceCategory& from)
      : VehicleDeviceCategory(nullptr, from) {}
  VehicleDeviceCategory(VehicleDeviceCategory&& from) noexcept
    : VehicleDeviceCategory() {
    *this = ::std::move(from);
  }

  inline VehicleDeviceCategory& operator=(const VehicleDeviceCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleDeviceCategory& operator=(VehicleDeviceCategory&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleDeviceCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleDeviceCategory* internal_default_instance() {
    return reinterpret_cast<const VehicleDeviceCategory*>(
               &_VehicleDeviceCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleDeviceCategory& a, VehicleDeviceCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleDeviceCategory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleDeviceCategory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleDeviceCategory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleDeviceCategory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleDeviceCategory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VehicleDeviceCategory& from) {
    VehicleDeviceCategory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleDeviceCategory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory";
  }
  protected:
  explicit VehicleDeviceCategory(::google::protobuf::Arena* arena);
  VehicleDeviceCategory(::google::protobuf::Arena* arena, const VehicleDeviceCategory& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExteriorLightStatusFieldNumber = 2,
    kFrontWiperStatusFieldNumber = 3,
    kRearWiperStatusFieldNumber = 4,
    kEnvelopeFieldNumber = 1,
  };
  // repeated .sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus exterior_light_status = 2;
  int exterior_light_status_size() const;
  private:
  int _internal_exterior_light_status_size() const;

  public:
  void clear_exterior_light_status() ;
  ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus* mutable_exterior_light_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus >*
      mutable_exterior_light_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus>& _internal_exterior_light_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus>* _internal_mutable_exterior_light_status();
  public:
  const ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus& exterior_light_status(int index) const;
  ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus* add_exterior_light_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus >&
      exterior_light_status() const;
  // repeated .sensoris.protobuf.categories.vehicledevice.WiperStatus front_wiper_status = 3;
  int front_wiper_status_size() const;
  private:
  int _internal_front_wiper_status_size() const;

  public:
  void clear_front_wiper_status() ;
  ::sensoris::protobuf::categories::vehicledevice::WiperStatus* mutable_front_wiper_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::WiperStatus >*
      mutable_front_wiper_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>& _internal_front_wiper_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>* _internal_mutable_front_wiper_status();
  public:
  const ::sensoris::protobuf::categories::vehicledevice::WiperStatus& front_wiper_status(int index) const;
  ::sensoris::protobuf::categories::vehicledevice::WiperStatus* add_front_wiper_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::WiperStatus >&
      front_wiper_status() const;
  // repeated .sensoris.protobuf.categories.vehicledevice.WiperStatus rear_wiper_status = 4;
  int rear_wiper_status_size() const;
  private:
  int _internal_rear_wiper_status_size() const;

  public:
  void clear_rear_wiper_status() ;
  ::sensoris::protobuf::categories::vehicledevice::WiperStatus* mutable_rear_wiper_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::WiperStatus >*
      mutable_rear_wiper_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>& _internal_rear_wiper_status() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>* _internal_mutable_rear_wiper_status();
  public:
  const ::sensoris::protobuf::categories::vehicledevice::WiperStatus& rear_wiper_status(int index) const;
  ::sensoris::protobuf::categories::vehicledevice::WiperStatus* add_rear_wiper_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::WiperStatus >&
      rear_wiper_status() const;
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope() ;
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  void unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* _internal_mutable_envelope();

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus > exterior_light_status_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::WiperStatus > front_wiper_status_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::vehicledevice::WiperStatus > rear_wiper_status_;
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ExteriorLightStatus_TypeAndStatus

// .sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus.Type type = 1;
inline void ExteriorLightStatus_TypeAndStatus::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type ExteriorLightStatus_TypeAndStatus::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus.type)
  return _internal_type();
}
inline void ExteriorLightStatus_TypeAndStatus::set_type(::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus.type)
}
inline ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type ExteriorLightStatus_TypeAndStatus::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type>(_impl_.type_);
}
inline void ExteriorLightStatus_TypeAndStatus::_internal_set_type(::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .sensoris.protobuf.categories.vehicledevice.Status status = 2;
inline void ExteriorLightStatus_TypeAndStatus::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::sensoris::protobuf::categories::vehicledevice::Status ExteriorLightStatus_TypeAndStatus::status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus.status)
  return _internal_status();
}
inline void ExteriorLightStatus_TypeAndStatus::set_status(::sensoris::protobuf::categories::vehicledevice::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus.status)
}
inline ::sensoris::protobuf::categories::vehicledevice::Status ExteriorLightStatus_TypeAndStatus::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::vehicledevice::Status>(_impl_.status_);
}
inline void ExteriorLightStatus_TypeAndStatus::_internal_set_status(::sensoris::protobuf::categories::vehicledevice::Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// ExteriorLightStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool ExteriorLightStatus::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& ExteriorLightStatus::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& ExteriorLightStatus::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.envelope)
  return _internal_envelope();
}
inline void ExteriorLightStatus::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* ExteriorLightStatus::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* ExteriorLightStatus::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* ExteriorLightStatus::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* ExteriorLightStatus::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.envelope)
  return _msg;
}
inline void ExteriorLightStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.envelope)
}

// repeated .sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.TypeAndStatus type_and_status = 2;
inline int ExteriorLightStatus::_internal_type_and_status_size() const {
  return _internal_type_and_status().size();
}
inline int ExteriorLightStatus::type_and_status_size() const {
  return _internal_type_and_status_size();
}
inline void ExteriorLightStatus::clear_type_and_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_and_status_.Clear();
}
inline ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus* ExteriorLightStatus::mutable_type_and_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.type_and_status)
  return _internal_mutable_type_and_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus>* ExteriorLightStatus::mutable_type_and_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.type_and_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_type_and_status();
}
inline const ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus& ExteriorLightStatus::type_and_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.type_and_status)
  return _internal_type_and_status().Get(index);
}
inline ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus* ExteriorLightStatus::add_type_and_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus* _add = _internal_mutable_type_and_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.type_and_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus>& ExteriorLightStatus::type_and_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus.type_and_status)
  return _internal_type_and_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus>&
ExteriorLightStatus::_internal_type_and_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_and_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus>*
ExteriorLightStatus::_internal_mutable_type_and_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.type_and_status_;
}

// -------------------------------------------------------------------

// WiperStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool WiperStatus::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& WiperStatus::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::EventEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope&>(::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& WiperStatus::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.WiperStatus.envelope)
  return _internal_envelope();
}
inline void WiperStatus::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.vehicledevice.WiperStatus.envelope)
}
inline ::sensoris::protobuf::types::base::EventEnvelope* WiperStatus::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* WiperStatus::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.vehicledevice.WiperStatus.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::EventEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* WiperStatus::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* WiperStatus::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::EventEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.vehicledevice.WiperStatus.envelope)
  return _msg;
}
inline void WiperStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::EventEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.vehicledevice.WiperStatus.envelope)
}

// .sensoris.protobuf.categories.vehicledevice.WiperStatus.SpeedType speed_type = 2;
inline void WiperStatus::clear_speed_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.speed_type_ = 0;
}
inline ::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType WiperStatus::speed_type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.WiperStatus.speed_type)
  return _internal_speed_type();
}
inline void WiperStatus::set_speed_type(::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType value) {
  _internal_set_speed_type(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.vehicledevice.WiperStatus.speed_type)
}
inline ::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType WiperStatus::_internal_speed_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType>(_impl_.speed_type_);
}
inline void WiperStatus::_internal_set_speed_type(::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speed_type_ = value;
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy speed_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool WiperStatus::has_speed_and_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_and_accuracy_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& WiperStatus::_internal_speed_and_accuracy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = _impl_.speed_and_accuracy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy&>(::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& WiperStatus::speed_and_accuracy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.WiperStatus.speed_and_accuracy)
  return _internal_speed_and_accuracy();
}
inline void WiperStatus::unsafe_arena_set_allocated_speed_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_and_accuracy_);
  }
  _impl_.speed_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.vehicledevice.WiperStatus.speed_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* WiperStatus::release_speed_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* released = _impl_.speed_and_accuracy_;
  _impl_.speed_and_accuracy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* WiperStatus::unsafe_arena_release_speed_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.vehicledevice.WiperStatus.speed_and_accuracy)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = _impl_.speed_and_accuracy_;
  _impl_.speed_and_accuracy_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* WiperStatus::_internal_mutable_speed_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.speed_and_accuracy_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArena());
    _impl_.speed_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(p);
  }
  return _impl_.speed_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* WiperStatus::mutable_speed_and_accuracy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* _msg = _internal_mutable_speed_and_accuracy();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.vehicledevice.WiperStatus.speed_and_accuracy)
  return _msg;
}
inline void WiperStatus::set_allocated_speed_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_and_accuracy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.speed_and_accuracy_ = reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.vehicledevice.WiperStatus.speed_and_accuracy)
}

// -------------------------------------------------------------------

// VehicleDeviceCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool VehicleDeviceCategory::has_envelope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.envelope_ != nullptr);
  return value;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& VehicleDeviceCategory::_internal_envelope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope&>(::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& VehicleDeviceCategory::envelope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.envelope)
  return _internal_envelope();
}
inline void VehicleDeviceCategory::unsafe_arena_set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.envelope)
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* VehicleDeviceCategory::release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* released = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* VehicleDeviceCategory::unsafe_arena_release_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.envelope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* VehicleDeviceCategory::_internal_mutable_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArena());
    _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(p);
  }
  return _impl_.envelope_;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* VehicleDeviceCategory::mutable_envelope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::CategoryEnvelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.envelope)
  return _msg;
}
inline void VehicleDeviceCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.envelope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.envelope_ = reinterpret_cast<::sensoris::protobuf::types::base::CategoryEnvelope*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.envelope)
}

// repeated .sensoris.protobuf.categories.vehicledevice.ExteriorLightStatus exterior_light_status = 2;
inline int VehicleDeviceCategory::_internal_exterior_light_status_size() const {
  return _internal_exterior_light_status().size();
}
inline int VehicleDeviceCategory::exterior_light_status_size() const {
  return _internal_exterior_light_status_size();
}
inline void VehicleDeviceCategory::clear_exterior_light_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exterior_light_status_.Clear();
}
inline ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus* VehicleDeviceCategory::mutable_exterior_light_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.exterior_light_status)
  return _internal_mutable_exterior_light_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus>* VehicleDeviceCategory::mutable_exterior_light_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.exterior_light_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exterior_light_status();
}
inline const ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus& VehicleDeviceCategory::exterior_light_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.exterior_light_status)
  return _internal_exterior_light_status().Get(index);
}
inline ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus* VehicleDeviceCategory::add_exterior_light_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus* _add = _internal_mutable_exterior_light_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.exterior_light_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus>& VehicleDeviceCategory::exterior_light_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.exterior_light_status)
  return _internal_exterior_light_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus>&
VehicleDeviceCategory::_internal_exterior_light_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exterior_light_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus>*
VehicleDeviceCategory::_internal_mutable_exterior_light_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exterior_light_status_;
}

// repeated .sensoris.protobuf.categories.vehicledevice.WiperStatus front_wiper_status = 3;
inline int VehicleDeviceCategory::_internal_front_wiper_status_size() const {
  return _internal_front_wiper_status().size();
}
inline int VehicleDeviceCategory::front_wiper_status_size() const {
  return _internal_front_wiper_status_size();
}
inline void VehicleDeviceCategory::clear_front_wiper_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.front_wiper_status_.Clear();
}
inline ::sensoris::protobuf::categories::vehicledevice::WiperStatus* VehicleDeviceCategory::mutable_front_wiper_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.front_wiper_status)
  return _internal_mutable_front_wiper_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>* VehicleDeviceCategory::mutable_front_wiper_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.front_wiper_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_front_wiper_status();
}
inline const ::sensoris::protobuf::categories::vehicledevice::WiperStatus& VehicleDeviceCategory::front_wiper_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.front_wiper_status)
  return _internal_front_wiper_status().Get(index);
}
inline ::sensoris::protobuf::categories::vehicledevice::WiperStatus* VehicleDeviceCategory::add_front_wiper_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::vehicledevice::WiperStatus* _add = _internal_mutable_front_wiper_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.front_wiper_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>& VehicleDeviceCategory::front_wiper_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.front_wiper_status)
  return _internal_front_wiper_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>&
VehicleDeviceCategory::_internal_front_wiper_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.front_wiper_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>*
VehicleDeviceCategory::_internal_mutable_front_wiper_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.front_wiper_status_;
}

// repeated .sensoris.protobuf.categories.vehicledevice.WiperStatus rear_wiper_status = 4;
inline int VehicleDeviceCategory::_internal_rear_wiper_status_size() const {
  return _internal_rear_wiper_status().size();
}
inline int VehicleDeviceCategory::rear_wiper_status_size() const {
  return _internal_rear_wiper_status_size();
}
inline void VehicleDeviceCategory::clear_rear_wiper_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rear_wiper_status_.Clear();
}
inline ::sensoris::protobuf::categories::vehicledevice::WiperStatus* VehicleDeviceCategory::mutable_rear_wiper_status(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.rear_wiper_status)
  return _internal_mutable_rear_wiper_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>* VehicleDeviceCategory::mutable_rear_wiper_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.rear_wiper_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rear_wiper_status();
}
inline const ::sensoris::protobuf::categories::vehicledevice::WiperStatus& VehicleDeviceCategory::rear_wiper_status(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.rear_wiper_status)
  return _internal_rear_wiper_status().Get(index);
}
inline ::sensoris::protobuf::categories::vehicledevice::WiperStatus* VehicleDeviceCategory::add_rear_wiper_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::categories::vehicledevice::WiperStatus* _add = _internal_mutable_rear_wiper_status()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.rear_wiper_status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>& VehicleDeviceCategory::rear_wiper_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.vehicledevice.VehicleDeviceCategory.rear_wiper_status)
  return _internal_rear_wiper_status();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>&
VehicleDeviceCategory::_internal_rear_wiper_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rear_wiper_status_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::categories::vehicledevice::WiperStatus>*
VehicleDeviceCategory::_internal_mutable_rear_wiper_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rear_wiper_status_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace vehicledevice
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type>() {
  return ::sensoris::protobuf::categories::vehicledevice::ExteriorLightStatus_TypeAndStatus_Type_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType>() {
  return ::sensoris::protobuf::categories::vehicledevice::WiperStatus_SpeedType_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::categories::vehicledevice::Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::categories::vehicledevice::Status>() {
  return ::sensoris::protobuf::categories::vehicledevice::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fvehicle_5fdevice_2eproto_2epb_2eh
