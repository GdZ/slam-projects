// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/powertrain.proto

#include "sensoris/protobuf/categories/powertrain.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace powertrain {

inline constexpr EngineStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        ignition_status_{static_cast< ::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus >(0)},
        powertrain_status_{static_cast< ::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR EngineStatus::EngineStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EngineStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineStatusDefaultTypeInternal() {}
  union {
    EngineStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineStatusDefaultTypeInternal _EngineStatus_default_instance_;

inline constexpr TransmissionStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        current_gear_{nullptr},
        gear_mode_{static_cast< ::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode >(0)},
        drive_mode_{static_cast< ::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TransmissionStatus::TransmissionStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransmissionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransmissionStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransmissionStatusDefaultTypeInternal() {}
  union {
    TransmissionStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransmissionStatusDefaultTypeInternal _TransmissionStatus_default_instance_;

inline constexpr CruiseControlStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        selected_speed_{nullptr},
        selected_time_to_lead_vehicle_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type >(0)},
        status_{static_cast< ::sensoris::protobuf::types::base::SystemStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CruiseControlStatus::CruiseControlStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CruiseControlStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CruiseControlStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CruiseControlStatusDefaultTypeInternal() {}
  union {
    CruiseControlStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CruiseControlStatusDefaultTypeInternal _CruiseControlStatus_default_instance_;

inline constexpr PowertrainCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        engine_status_{},
        transmission_status_{},
        cruise_control_status_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PowertrainCategory::PowertrainCategory(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PowertrainCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowertrainCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowertrainCategoryDefaultTypeInternal() {}
  union {
    PowertrainCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowertrainCategoryDefaultTypeInternal _PowertrainCategory_default_instance_;
}  // namespace powertrain
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, _impl_.ignition_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, _impl_.powertrain_status_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, _impl_.gear_mode_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, _impl_.drive_mode_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, _impl_.current_gear_),
    0,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, _impl_.selected_speed_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, _impl_.selected_time_to_lead_vehicle_),
    0,
    ~0u,
    ~0u,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, _impl_.engine_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, _impl_.transmission_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, _impl_.cruise_control_status_),
    0,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::sensoris::protobuf::categories::powertrain::EngineStatus)},
        {14, 26, -1, sizeof(::sensoris::protobuf::categories::powertrain::TransmissionStatus)},
        {30, 43, -1, sizeof(::sensoris::protobuf::categories::powertrain::CruiseControlStatus)},
        {48, 60, -1, sizeof(::sensoris::protobuf::categories::powertrain::PowertrainCategory)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::categories::powertrain::_EngineStatus_default_instance_._instance,
    &::sensoris::protobuf::categories::powertrain::_TransmissionStatus_default_instance_._instance,
    &::sensoris::protobuf::categories::powertrain::_CruiseControlStatus_default_instance_._instance,
    &::sensoris::protobuf::categories::powertrain::_PowertrainCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n-sensoris/protobuf/categories/powertrai"
    "n.proto\022\'sensoris.protobuf.categories.po"
    "wertrain\032\"sensoris/protobuf/types/base.p"
    "roto\"\231\004\n\014EngineStatus\022=\n\010envelope\030\001 \001(\0132"
    "+.sensoris.protobuf.types.base.EventEnve"
    "lope\022]\n\017ignition_status\030\002 \001(\0162D.sensoris"
    ".protobuf.categories.powertrain.EngineSt"
    "atus.IgnitionStatus\022a\n\021powertrain_status"
    "\030\003 \001(\0162F.sensoris.protobuf.categories.po"
    "wertrain.EngineStatus.PowertrainStatus\"\221"
    "\001\n\016IgnitionStatus\022\033\n\027UNKNOWN_IGNITION_ST"
    "ATUS\020\000\022\021\n\rIGNITION_LOCK\020\001\022\020\n\014IGNITION_OF"
    "F\020\002\022\030\n\024IGNITION_ACCESSORIES\020\003\022\017\n\013IGNITIO"
    "N_ON\020\004\022\022\n\016IGNITION_START\020\005\"t\n\020Powertrain"
    "Status\022\035\n\031UNKNOWN_POWERTRAIN_STATUS\020\000\022\022\n"
    "\016POWERTRAIN_OFF\020\001\022\027\n\023POWERTRAIN_ECO_MODE"
    "\020\002\022\024\n\020POWERTRAIN_READY\020\003\"\374\003\n\022Transmissio"
    "nStatus\022=\n\010envelope\030\001 \001(\0132+.sensoris.pro"
    "tobuf.types.base.EventEnvelope\022W\n\tgear_m"
    "ode\030\002 \001(\0162D.sensoris.protobuf.categories"
    ".powertrain.TransmissionStatus.GearMode\022"
    "Y\n\ndrive_mode\030\003 \001(\0162E.sensoris.protobuf."
    "categories.powertrain.TransmissionStatus"
    ".DriveMode\022>\n\014current_gear\030\004 \001(\0132(.senso"
    "ris.protobuf.types.base.Int64Value\"\\\n\010Ge"
    "arMode\022\025\n\021UNKNOWN_GEAR_MODE\020\000\022\t\n\005DRIVE\020\001"
    "\022\n\n\006MANUAL\020\002\022\013\n\007REVERSE\020\003\022\010\n\004PARK\020\004\022\013\n\007N"
    "EUTRAL\020\005\"U\n\tDriveMode\022\026\n\022UNKNOWN_DRIVE_M"
    "ODE\020\000\022\007\n\003ECO\020\001\022\013\n\007COMFORT\020\002\022\t\n\005SPORT\020\003\022\017"
    "\n\013SUPER_SPORT\020\004\"\275\003\n\023CruiseControlStatus\022"
    "=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf.ty"
    "pes.base.EventEnvelope\022O\n\004type\030\002 \001(\0162A.s"
    "ensoris.protobuf.categories.powertrain.C"
    "ruiseControlStatus.Type\022:\n\006status\030\003 \001(\0162"
    "*.sensoris.protobuf.types.base.SystemSta"
    "tus\022F\n\016selected_speed\030\004 \001(\0132(.sensoris.p"
    "rotobuf.types.base.Int64ValueB\004\210\265\030\001\022U\n\035s"
    "elected_time_to_lead_vehicle\030\005 \001(\0132(.sen"
    "soris.protobuf.types.base.Int64ValueB\004\210\265"
    "\030\001\";\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005SPEED\020\001\022"
    "\026\n\022SPEED_AND_DISTANCE\020\002\"\333\002\n\022PowertrainCa"
    "tegory\022@\n\010envelope\030\001 \001(\0132..sensoris.prot"
    "obuf.types.base.CategoryEnvelope\022L\n\rengi"
    "ne_status\030\002 \003(\01325.sensoris.protobuf.cate"
    "gories.powertrain.EngineStatus\022X\n\023transm"
    "ission_status\030\003 \003(\0132;.sensoris.protobuf."
    "categories.powertrain.TransmissionStatus"
    "\022[\n\025cruise_control_status\030\004 \003(\0132<.sensor"
    "is.protobuf.categories.powertrain.Cruise"
    "ControlStatusBw\n\"org.sensoris.categories"
    ".powertrainB\032SensorisPowertrainCategoryP"
    "\001Z0sensoris.org/specification/categories"
    "/powertrain\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_deps[1] =
    {
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto = {
    false,
    false,
    2102,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto,
    "sensoris/protobuf/categories/powertrain.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto);
namespace sensoris {
namespace protobuf {
namespace categories {
namespace powertrain {
const ::google::protobuf::EnumDescriptor* EngineStatus_IgnitionStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EngineStatus_IgnitionStatus_internal_data_[] = {
    393216u, 0u, };
bool EngineStatus_IgnitionStatus_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EngineStatus_IgnitionStatus EngineStatus::UNKNOWN_IGNITION_STATUS;
constexpr EngineStatus_IgnitionStatus EngineStatus::IGNITION_LOCK;
constexpr EngineStatus_IgnitionStatus EngineStatus::IGNITION_OFF;
constexpr EngineStatus_IgnitionStatus EngineStatus::IGNITION_ACCESSORIES;
constexpr EngineStatus_IgnitionStatus EngineStatus::IGNITION_ON;
constexpr EngineStatus_IgnitionStatus EngineStatus::IGNITION_START;
constexpr EngineStatus_IgnitionStatus EngineStatus::IgnitionStatus_MIN;
constexpr EngineStatus_IgnitionStatus EngineStatus::IgnitionStatus_MAX;
constexpr int EngineStatus::IgnitionStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* EngineStatus_PowertrainStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t EngineStatus_PowertrainStatus_internal_data_[] = {
    262144u, 0u, };
bool EngineStatus_PowertrainStatus_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EngineStatus_PowertrainStatus EngineStatus::UNKNOWN_POWERTRAIN_STATUS;
constexpr EngineStatus_PowertrainStatus EngineStatus::POWERTRAIN_OFF;
constexpr EngineStatus_PowertrainStatus EngineStatus::POWERTRAIN_ECO_MODE;
constexpr EngineStatus_PowertrainStatus EngineStatus::POWERTRAIN_READY;
constexpr EngineStatus_PowertrainStatus EngineStatus::PowertrainStatus_MIN;
constexpr EngineStatus_PowertrainStatus EngineStatus::PowertrainStatus_MAX;
constexpr int EngineStatus::PowertrainStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TransmissionStatus_GearMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t TransmissionStatus_GearMode_internal_data_[] = {
    393216u, 0u, };
bool TransmissionStatus_GearMode_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TransmissionStatus_GearMode TransmissionStatus::UNKNOWN_GEAR_MODE;
constexpr TransmissionStatus_GearMode TransmissionStatus::DRIVE;
constexpr TransmissionStatus_GearMode TransmissionStatus::MANUAL;
constexpr TransmissionStatus_GearMode TransmissionStatus::REVERSE;
constexpr TransmissionStatus_GearMode TransmissionStatus::PARK;
constexpr TransmissionStatus_GearMode TransmissionStatus::NEUTRAL;
constexpr TransmissionStatus_GearMode TransmissionStatus::GearMode_MIN;
constexpr TransmissionStatus_GearMode TransmissionStatus::GearMode_MAX;
constexpr int TransmissionStatus::GearMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TransmissionStatus_DriveMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t TransmissionStatus_DriveMode_internal_data_[] = {
    327680u, 0u, };
bool TransmissionStatus_DriveMode_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TransmissionStatus_DriveMode TransmissionStatus::UNKNOWN_DRIVE_MODE;
constexpr TransmissionStatus_DriveMode TransmissionStatus::ECO;
constexpr TransmissionStatus_DriveMode TransmissionStatus::COMFORT;
constexpr TransmissionStatus_DriveMode TransmissionStatus::SPORT;
constexpr TransmissionStatus_DriveMode TransmissionStatus::SUPER_SPORT;
constexpr TransmissionStatus_DriveMode TransmissionStatus::DriveMode_MIN;
constexpr TransmissionStatus_DriveMode TransmissionStatus::DriveMode_MAX;
constexpr int TransmissionStatus::DriveMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CruiseControlStatus_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t CruiseControlStatus_Type_internal_data_[] = {
    196608u, 0u, };
bool CruiseControlStatus_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CruiseControlStatus_Type CruiseControlStatus::UNKNOWN_TYPE;
constexpr CruiseControlStatus_Type CruiseControlStatus::SPEED;
constexpr CruiseControlStatus_Type CruiseControlStatus::SPEED_AND_DISTANCE;
constexpr CruiseControlStatus_Type CruiseControlStatus::Type_MIN;
constexpr CruiseControlStatus_Type CruiseControlStatus::Type_MAX;
constexpr int CruiseControlStatus::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class EngineStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<EngineStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const EngineStatus* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& EngineStatus::_Internal::envelope(const EngineStatus* msg) {
  return *msg->_impl_.envelope_;
}
void EngineStatus::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EngineStatus::EngineStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.powertrain.EngineStatus)
}
inline PROTOBUF_NDEBUG_INLINE EngineStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EngineStatus::EngineStatus(
    ::google::protobuf::Arena* arena,
    const EngineStatus& from)
    : ::google::protobuf::Message(arena) {
  EngineStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ignition_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ignition_status_),
           offsetof(Impl_, powertrain_status_) -
               offsetof(Impl_, ignition_status_) +
               sizeof(Impl_::powertrain_status_));

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.powertrain.EngineStatus)
}
inline PROTOBUF_NDEBUG_INLINE EngineStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EngineStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, powertrain_status_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::powertrain_status_));
}
EngineStatus::~EngineStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.powertrain.EngineStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EngineStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EngineStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  ::memset(&_impl_.ignition_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.powertrain_status_) -
      reinterpret_cast<char*>(&_impl_.ignition_status_)) + sizeof(_impl_.powertrain_status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EngineStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> EngineStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EngineStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_.envelope_)}},
    // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EngineStatus, _impl_.ignition_status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_.ignition_status_)}},
    // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EngineStatus, _impl_.powertrain_status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_.powertrain_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
    {PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_.ignition_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
    {PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_.powertrain_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
  }}, {{
  }},
};

::uint8_t* EngineStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
  if (this->_internal_ignition_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_ignition_status(), target);
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
  if (this->_internal_powertrain_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_powertrain_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.powertrain.EngineStatus)
  return target;
}

::size_t EngineStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
  if (this->_internal_ignition_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_ignition_status());
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
  if (this->_internal_powertrain_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_powertrain_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EngineStatus::_class_data_ = {
    EngineStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EngineStatus::GetClassData() const {
  return &_class_data_;
}

void EngineStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EngineStatus*>(&to_msg);
  auto& from = static_cast<const EngineStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
        from._internal_envelope());
  }
  if (from._internal_ignition_status() != 0) {
    _this->_internal_set_ignition_status(from._internal_ignition_status());
  }
  if (from._internal_powertrain_status() != 0) {
    _this->_internal_set_powertrain_status(from._internal_powertrain_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EngineStatus::CopyFrom(const EngineStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EngineStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EngineStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EngineStatus::InternalSwap(EngineStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_.powertrain_status_)
      + sizeof(EngineStatus::_impl_.powertrain_status_)
      - PROTOBUF_FIELD_OFFSET(EngineStatus, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata EngineStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[0]);
}
// ===================================================================

class TransmissionStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TransmissionStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const TransmissionStatus* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Int64Value& current_gear(const TransmissionStatus* msg);
  static void set_has_current_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& TransmissionStatus::_Internal::envelope(const TransmissionStatus* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::Int64Value& TransmissionStatus::_Internal::current_gear(const TransmissionStatus* msg) {
  return *msg->_impl_.current_gear_;
}
void TransmissionStatus::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TransmissionStatus::clear_current_gear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.current_gear_ != nullptr) _impl_.current_gear_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TransmissionStatus::TransmissionStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.powertrain.TransmissionStatus)
}
inline PROTOBUF_NDEBUG_INLINE TransmissionStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TransmissionStatus::TransmissionStatus(
    ::google::protobuf::Arena* arena,
    const TransmissionStatus& from)
    : ::google::protobuf::Message(arena) {
  TransmissionStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.current_gear_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64Value>(arena, *from._impl_.current_gear_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gear_mode_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, gear_mode_),
           offsetof(Impl_, drive_mode_) -
               offsetof(Impl_, gear_mode_) +
               sizeof(Impl_::drive_mode_));

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.powertrain.TransmissionStatus)
}
inline PROTOBUF_NDEBUG_INLINE TransmissionStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TransmissionStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, drive_mode_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::drive_mode_));
}
TransmissionStatus::~TransmissionStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TransmissionStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.current_gear_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TransmissionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.current_gear_ != nullptr);
      _impl_.current_gear_->Clear();
    }
  }
  ::memset(&_impl_.gear_mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.drive_mode_) -
      reinterpret_cast<char*>(&_impl_.gear_mode_)) + sizeof(_impl_.drive_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TransmissionStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> TransmissionStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TransmissionStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.current_gear_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.envelope_)}},
    // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransmissionStatus, _impl_.gear_mode_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.gear_mode_)}},
    // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransmissionStatus, _impl_.drive_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.drive_mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
    {PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.gear_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
    {PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.drive_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
    {PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.current_gear_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* TransmissionStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
  if (this->_internal_gear_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_gear_mode(), target);
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
  if (this->_internal_drive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_drive_mode(), target);
  }

  // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::current_gear(this),
        _Internal::current_gear(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  return target;
}

::size_t TransmissionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_gear_);
    }

  }
  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
  if (this->_internal_gear_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_mode());
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
  if (this->_internal_drive_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_drive_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TransmissionStatus::_class_data_ = {
    TransmissionStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TransmissionStatus::GetClassData() const {
  return &_class_data_;
}

void TransmissionStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TransmissionStatus*>(&to_msg);
  auto& from = static_cast<const TransmissionStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_current_gear()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(
          from._internal_current_gear());
    }
  }
  if (from._internal_gear_mode() != 0) {
    _this->_internal_set_gear_mode(from._internal_gear_mode());
  }
  if (from._internal_drive_mode() != 0) {
    _this->_internal_set_drive_mode(from._internal_drive_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransmissionStatus::CopyFrom(const TransmissionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TransmissionStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TransmissionStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TransmissionStatus::InternalSwap(TransmissionStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.drive_mode_)
      + sizeof(TransmissionStatus::_impl_.drive_mode_)
      - PROTOBUF_FIELD_OFFSET(TransmissionStatus, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata TransmissionStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[1]);
}
// ===================================================================

class CruiseControlStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CruiseControlStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const CruiseControlStatus* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Int64Value& selected_speed(const CruiseControlStatus* msg);
  static void set_has_selected_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::Int64Value& selected_time_to_lead_vehicle(const CruiseControlStatus* msg);
  static void set_has_selected_time_to_lead_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& CruiseControlStatus::_Internal::envelope(const CruiseControlStatus* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::Int64Value& CruiseControlStatus::_Internal::selected_speed(const CruiseControlStatus* msg) {
  return *msg->_impl_.selected_speed_;
}
const ::sensoris::protobuf::types::base::Int64Value& CruiseControlStatus::_Internal::selected_time_to_lead_vehicle(const CruiseControlStatus* msg) {
  return *msg->_impl_.selected_time_to_lead_vehicle_;
}
void CruiseControlStatus::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CruiseControlStatus::clear_selected_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.selected_speed_ != nullptr) _impl_.selected_speed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CruiseControlStatus::clear_selected_time_to_lead_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.selected_time_to_lead_vehicle_ != nullptr) _impl_.selected_time_to_lead_vehicle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CruiseControlStatus::CruiseControlStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
}
inline PROTOBUF_NDEBUG_INLINE CruiseControlStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CruiseControlStatus::CruiseControlStatus(
    ::google::protobuf::Arena* arena,
    const CruiseControlStatus& from)
    : ::google::protobuf::Message(arena) {
  CruiseControlStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.selected_speed_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64Value>(arena, *from._impl_.selected_speed_)
                : nullptr;
  _impl_.selected_time_to_lead_vehicle_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64Value>(arena, *from._impl_.selected_time_to_lead_vehicle_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, status_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::status_));

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
}
inline PROTOBUF_NDEBUG_INLINE CruiseControlStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CruiseControlStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::status_));
}
CruiseControlStatus::~CruiseControlStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CruiseControlStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.selected_speed_;
  delete _impl_.selected_time_to_lead_vehicle_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CruiseControlStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.selected_speed_ != nullptr);
      _impl_.selected_speed_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.selected_time_to_lead_vehicle_ != nullptr);
      _impl_.selected_time_to_lead_vehicle_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CruiseControlStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> CruiseControlStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CruiseControlStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.envelope_)}},
    // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CruiseControlStatus, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.type_)}},
    // .sensoris.protobuf.types.base.SystemStatus status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CruiseControlStatus, _impl_.status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.status_)}},
    // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.selected_speed_)}},
    // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.selected_time_to_lead_vehicle_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
    {PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.SystemStatus status = 3;
    {PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
    {PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.selected_speed_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
    {PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.selected_time_to_lead_vehicle_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64Value>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* CruiseControlStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // .sensoris.protobuf.types.base.SystemStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_status(), target);
  }

  // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::selected_speed(this),
        _Internal::selected_speed(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::selected_time_to_lead_vehicle(this),
        _Internal::selected_time_to_lead_vehicle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  return target;
}

::size_t CruiseControlStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.selected_speed_);
    }

    // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.selected_time_to_lead_vehicle_);
    }

  }
  // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .sensoris.protobuf.types.base.SystemStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CruiseControlStatus::_class_data_ = {
    CruiseControlStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CruiseControlStatus::GetClassData() const {
  return &_class_data_;
}

void CruiseControlStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CruiseControlStatus*>(&to_msg);
  auto& from = static_cast<const CruiseControlStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_selected_speed()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(
          from._internal_selected_speed());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_selected_time_to_lead_vehicle()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(
          from._internal_selected_time_to_lead_vehicle());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CruiseControlStatus::CopyFrom(const CruiseControlStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CruiseControlStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CruiseControlStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CruiseControlStatus::InternalSwap(CruiseControlStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.status_)
      + sizeof(CruiseControlStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CruiseControlStatus, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata CruiseControlStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[2]);
}
// ===================================================================

class PowertrainCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<PowertrainCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope(const PowertrainCategory* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::CategoryEnvelope& PowertrainCategory::_Internal::envelope(const PowertrainCategory* msg) {
  return *msg->_impl_.envelope_;
}
void PowertrainCategory::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PowertrainCategory::PowertrainCategory(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.powertrain.PowertrainCategory)
}
inline PROTOBUF_NDEBUG_INLINE PowertrainCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        engine_status_{visibility, arena, from.engine_status_},
        transmission_status_{visibility, arena, from.transmission_status_},
        cruise_control_status_{visibility, arena, from.cruise_control_status_} {}

PowertrainCategory::PowertrainCategory(
    ::google::protobuf::Arena* arena,
    const PowertrainCategory& from)
    : ::google::protobuf::Message(arena) {
  PowertrainCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.powertrain.PowertrainCategory)
}
inline PROTOBUF_NDEBUG_INLINE PowertrainCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        engine_status_{visibility, arena},
        transmission_status_{visibility, arena},
        cruise_control_status_{visibility, arena} {}

inline void PowertrainCategory::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
PowertrainCategory::~PowertrainCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PowertrainCategory::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PowertrainCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.engine_status_.Clear();
  _impl_.transmission_status_.Clear();
  _impl_.cruise_control_status_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PowertrainCategory::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> PowertrainCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PowertrainCategory_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_.cruise_control_status_)}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_.envelope_)}},
    // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_.engine_status_)}},
    // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_.transmission_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
    {PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_.engine_status_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
    {PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_.transmission_status_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
    {PROTOBUF_FIELD_OFFSET(PowertrainCategory, _impl_.cruise_control_status_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::powertrain::EngineStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::powertrain::TransmissionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::powertrain::CruiseControlStatus>()},
  }}, {{
  }},
};

::uint8_t* PowertrainCategory::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_engine_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_engine_status().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transmission_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_transmission_status().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cruise_control_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_cruise_control_status().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  return target;
}

::size_t PowertrainCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
  total_size += 1UL * this->_internal_engine_status_size();
  for (const auto& msg : this->_internal_engine_status()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
  total_size += 1UL * this->_internal_transmission_status_size();
  for (const auto& msg : this->_internal_transmission_status()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
  total_size += 1UL * this->_internal_cruise_control_status_size();
  for (const auto& msg : this->_internal_cruise_control_status()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PowertrainCategory::_class_data_ = {
    PowertrainCategory::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PowertrainCategory::GetClassData() const {
  return &_class_data_;
}

void PowertrainCategory::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PowertrainCategory*>(&to_msg);
  auto& from = static_cast<const PowertrainCategory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_engine_status()->MergeFrom(
      from._internal_engine_status());
  _this->_internal_mutable_transmission_status()->MergeFrom(
      from._internal_transmission_status());
  _this->_internal_mutable_cruise_control_status()->MergeFrom(
      from._internal_cruise_control_status());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(
        from._internal_envelope());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PowertrainCategory::CopyFrom(const PowertrainCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PowertrainCategory::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PowertrainCategory::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PowertrainCategory::InternalSwap(PowertrainCategory* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.engine_status_.InternalSwap(&other->_impl_.engine_status_);
  _impl_.transmission_status_.InternalSwap(&other->_impl_.transmission_status_);
  _impl_.cruise_control_status_.InternalSwap(&other->_impl_.cruise_control_status_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata PowertrainCategory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace powertrain
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
