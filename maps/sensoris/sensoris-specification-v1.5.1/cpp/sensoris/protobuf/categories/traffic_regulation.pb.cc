// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_regulation.proto

#include "sensoris/protobuf/categories/traffic_regulation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficregulation {

inline constexpr TrafficSign_ValueAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        value_{nullptr},
        confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign_ValueAndConfidence::TrafficSign_ValueAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSign_ValueAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_ValueAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_ValueAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSign_ValueAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_ValueAndConfidenceDefaultTypeInternal _TrafficSign_ValueAndConfidence_default_instance_;

inline constexpr TrafficSign_ValidationAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign_ValidationAndConfidence::TrafficSign_ValidationAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSign_ValidationAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_ValidationAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_ValidationAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSign_ValidationAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_ValidationAndConfidenceDefaultTypeInternal _TrafficSign_ValidationAndConfidence_default_instance_;

inline constexpr TrafficSign_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        other_text_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign_TypeAndConfidence::TrafficSign_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSign_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSign_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_TypeAndConfidenceDefaultTypeInternal _TrafficSign_TypeAndConfidence_default_instance_;

inline constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        other_text_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSign_SupplementarySignAndConfidence_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_SupplementarySignAndConfidence_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_SupplementarySignAndConfidence_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_SupplementarySignAndConfidence_TypeAndConfidenceDefaultTypeInternal _TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_default_instance_;

inline constexpr TrafficSign_ShapeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign_ShapeAndConfidence::TrafficSign_ShapeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSign_ShapeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_ShapeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_ShapeAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSign_ShapeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_ShapeAndConfidenceDefaultTypeInternal _TrafficSign_ShapeAndConfidence_default_instance_;

inline constexpr TrafficSign_PermanencyAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign_PermanencyAndConfidence::TrafficSign_PermanencyAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSign_PermanencyAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_PermanencyAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_PermanencyAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSign_PermanencyAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_PermanencyAndConfidenceDefaultTypeInternal _TrafficSign_PermanencyAndConfidence_default_instance_;

inline constexpr TrafficSign_DominantBackgroundColorAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign_DominantBackgroundColorAndConfidence::TrafficSign_DominantBackgroundColorAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSign_DominantBackgroundColorAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_DominantBackgroundColorAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_DominantBackgroundColorAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSign_DominantBackgroundColorAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_DominantBackgroundColorAndConfidenceDefaultTypeInternal _TrafficSign_DominantBackgroundColorAndConfidence_default_instance_;

inline constexpr TrafficSign_SupplementarySignAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        value_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign_SupplementarySignAndConfidence::TrafficSign_SupplementarySignAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSign_SupplementarySignAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_SupplementarySignAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_SupplementarySignAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficSign_SupplementarySignAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_SupplementarySignAndConfidenceDefaultTypeInternal _TrafficSign_SupplementarySignAndConfidence_default_instance_;

inline constexpr TrafficSign::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        supplementary_sign_and_confidence_{},
        envelope_{nullptr},
        existence_confidence_{nullptr},
        detection_status_{nullptr},
        rectangular_box_and_accuracy_{nullptr},
        shape_and_confidence_{nullptr},
        type_and_confidence_{nullptr},
        value_and_confidence_{nullptr},
        permanency_and_confidence_{nullptr},
        validation_and_confidence_{nullptr},
        background_color_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficSign::TrafficSign(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignDefaultTypeInternal() {}
  union {
    TrafficSign _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignDefaultTypeInternal _TrafficSign_default_instance_;

inline constexpr TrafficRegulationCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        traffic_sign_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficRegulationCategory::TrafficRegulationCategory(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficRegulationCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficRegulationCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficRegulationCategoryDefaultTypeInternal() {}
  union {
    TrafficRegulationCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficRegulationCategoryDefaultTypeInternal _TrafficRegulationCategory_default_instance_;
}  // namespace trafficregulation
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, _impl_.confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, _impl_.other_text_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence, _impl_.confidence_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.other_text_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, _impl_.existence_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, _impl_.value_and_confidence_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.existence_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.rectangular_box_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.shape_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.value_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.permanency_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.validation_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.background_color_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _impl_.supplementary_sign_and_confidence_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory, _impl_.traffic_sign_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence)},
        {12, 23, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence)},
        {26, 36, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence)},
        {38, 48, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence)},
        {50, 60, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence)},
        {62, 72, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence)},
        {74, 85, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence)},
        {88, 100, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence)},
        {104, 123, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign)},
        {134, 144, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ShapeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValueAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_PermanencyAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValidationAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_DominantBackgroundColorAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficregulation::_TrafficRegulationCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n5sensoris/protobuf/categories/traffic_r"
    "egulation.proto\022.sensoris.protobuf.categ"
    "ories.trafficregulation\032\036google/protobuf"
    "/wrappers.proto\032\"sensoris/protobuf/types"
    "/base.proto\032%sensoris/protobuf/types/spa"
    "tial.proto\"\332a\n\013TrafficSign\022=\n\010envelope\030\001"
    " \001(\0132+.sensoris.protobuf.types.base.Even"
    "tEnvelope\022F\n\024existence_confidence\030\002 \001(\0132"
    "(.sensoris.protobuf.types.base.Confidenc"
    "e\022L\n\020detection_status\030\003 \001(\01322.sensoris.p"
    "rotobuf.types.base.EventDetectionStatus\022"
    "`\n\034rectangular_box_and_accuracy\030\004 \001(\0132:."
    "sensoris.protobuf.types.spatial.Rectangu"
    "larBoxAndAccuracy\022l\n\024shape_and_confidenc"
    "e\030\005 \001(\0132N.sensoris.protobuf.categories.t"
    "rafficregulation.TrafficSign.ShapeAndCon"
    "fidence\022j\n\023type_and_confidence\030\006 \001(\0132M.s"
    "ensoris.protobuf.categories.trafficregul"
    "ation.TrafficSign.TypeAndConfidence\022l\n\024v"
    "alue_and_confidence\030\007 \001(\0132N.sensoris.pro"
    "tobuf.categories.trafficregulation.Traff"
    "icSign.ValueAndConfidence\022v\n\031permanency_"
    "and_confidence\030\010 \001(\0132S.sensoris.protobuf"
    ".categories.trafficregulation.TrafficSig"
    "n.PermanencyAndConfidence\022v\n\031validation_"
    "and_confidence\030\t \001(\0132S.sensoris.protobuf"
    ".categories.trafficregulation.TrafficSig"
    "n.ValidationAndConfidence\022\211\001\n\037background"
    "_color_and_confidence\030\n \001(\0132`.sensoris.p"
    "rotobuf.categories.trafficregulation.Tra"
    "fficSign.DominantBackgroundColorAndConfi"
    "dence\022\205\001\n!supplementary_sign_and_confide"
    "nce\030\013 \003(\0132Z.sensoris.protobuf.categories"
    ".trafficregulation.TrafficSign.Supplemen"
    "tarySignAndConfidence\032\203\003\n\022ShapeAndConfid"
    "ence\022a\n\004type\030\001 \001(\0162S.sensoris.protobuf.c"
    "ategories.trafficregulation.TrafficSign."
    "ShapeAndConfidence.Type\022<\n\nconfidence\030\002 "
    "\001(\0132(.sensoris.protobuf.types.base.Confi"
    "dence\"\313\001\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005OTHE"
    "R\020\001\022\r\n\tRECTANGLE\020\002\022\n\n\006SQUARE\020\003\022\017\n\013TRIANG"
    "LE_UP\020\004\022\021\n\rTRIANGLE_DOWN\020\005\022\013\n\007DIAMOND\020\006\022"
    "\013\n\007HEXAGON\020\007\022\t\n\005ROUND\020\010\022\016\n\nCROSS_BUCK\020\t\022"
    "\013\n\007OCTAGON\020\n\022\013\n\007ELLIPSE\020\013\022\014\n\010PENTAGON\020\014\022"
    "\n\n\006SHIELD\020\r\032\362:\n\021TypeAndConfidence\022`\n\004typ"
    "e\030\001 \001(\0162R.sensoris.protobuf.categories.t"
    "rafficregulation.TrafficSign.TypeAndConf"
    "idence.Type\022<\n\nconfidence\030\002 \001(\0132(.sensor"
    "is.protobuf.types.base.Confidence\0224\n\noth"
    "er_text\030\003 \001(\0132\034.google.protobuf.StringVa"
    "lueB\002\030\001\"\2069\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\021\n\rOT"
    "HER_AS_TEXT\020\001\022\017\n\013SPEED_LIMIT\020\002\022\023\n\017SPEED_"
    "LIMIT_END\020\003\022\037\n\033SPEED_LIMIT_CHANGE_UPCOMI"
    "NG\020\004\022\030\n\024ADVISORY_SPEED_LIMIT\020\005\022\034\n\030ADVISO"
    "RY_SPEED_LIMIT_END\020\006\022\021\n\rNO_OVERTAKING\020\007\022"
    "\025\n\021NO_OVERTAKING_END\020\010\022\033\n\027PROTECTED_PASS"
    "ING_START\020\t\022\031\n\025PROTECTED_PASSING_END\020\n\022 "
    "\n\034PROTECTED_PASSING_LEFT_START\020\013\022!\n\035PROT"
    "ECTED_PASSING_RIGHT_START\020\014\022\036\n\032PROTECTED"
    "_PASSING_LEFT_END\020\r\022\037\n\033PROTECTED_PASSING"
    "_RIGHT_END\020\016\022\027\n\023NO_OVERTAKING_TRUCK\020\017\022\033\n"
    "\027NO_OVERTAKING_TRUCK_END\020\020\022\030\n\024ALL_RESTRI"
    "CTIONS_END\020\021\022\016\n\nCITY_START\020\022\022\014\n\010CITY_END"
    "\020\023\022\013\n\007HIGHWAY\020\024\022\017\n\013HIGHWAY_END\020\025\022\014\n\010MOTO"
    "RWAY\020\026\022\020\n\014MOTORWAY_END\020\027\022\020\n\014CONSTRUCTION"
    "\020\030\022\024\n\020CONSTRUCTION_END\020\031\022\016\n\nLANE_MERGE\020\032"
    "\022\027\n\023LANE_MERGE_ON_RIGHT\020\033\022\026\n\022LANE_MERGE_"
    "ON_LEFT\020\034\022\025\n\021LANE_MERGE_CENTER\020\035\022\034\n\030RAIL"
    "WAY_CROSSING_GENERAL\020\036\022\036\n\032RAILWAY_CROSSI"
    "NG_PROTECTED\020\037\022 \n\034RAILWAY_CROSSING_UNPRO"
    "TECTED\020 \022\020\n\014ROAD_NARROWS\020!\022\025\n\021ROAD_NARRO"
    "WS_LEFT\020\"\022\026\n\022ROAD_NARROWS_RIGHT\020#\022\027\n\023ROA"
    "D_NARROWS_CENTER\020$\022\017\n\013SHARP_CURVE\020%\022\024\n\020S"
    "HARP_CURVE_LEFT\020&\022\025\n\021SHARP_CURVE_RIGHT\020\'"
    "\022\020\n\014WINDING_ROAD\020(\022\036\n\032WINDING_ROAD_START"
    "ING_LEFT\020)\022\037\n\033WINDING_ROAD_STARTING_RIGH"
    "T\020*\022\016\n\nSTEEP_HILL\020+\022\026\n\022STEEP_HILL_UPWARD"
    "S\020,\022\030\n\024STEEP_HILL_DOWNWARDS\020-\022\r\n\tSTOP_SI"
    "GN\020.\022\020\n\014LATERAL_WIND\020/\022\033\n\027LATERAL_WIND_F"
    "ROM_RIGHT\0200\022\032\n\026LATERAL_WIND_FROM_LEFT\0201\022"
    "\023\n\017GENERAL_WARNING\0202\022\025\n\021RISK_OF_GROUNDIN"
    "G\0203\022\n\n\006ANIMAL\0204\022\022\n\016ICY_CONDITIONS\0205\022\021\n\rS"
    "LIPPERY_ROAD\0206\022\017\n\013UNEVEN_ROAD\0207\022\017\n\013SCHOO"
    "L_ZONE\0208\022\024\n\020TRAMWAY_CROSSING\0209\022\025\n\021CONGES"
    "TION_HAZARD\020:\022\023\n\017ACCIDENT_HAZARD\020;\022\024\n\020BI"
    "CYCLE_CROSSING\020<\022\"\n\036PRIORITY_OVER_ONCOMI"
    "NG_TRAFFIC\020=\022\t\n\005YIELD\020>\022\021\n\rPRIORITY_ROAD"
    "\020\?\022\025\n\021PRIORITY_ROAD_END\020@\022\023\n\017TRAFFIC_CAL"
    "MING\020A\022\027\n\023TRAFFIC_CALMING_END\020B\022\026\n\022ENVIR"
    "ONMENTAL_AREA\020C\022\032\n\026ENVIRONMENTAL_AREA_EN"
    "D\020D\022\020\n\014INTERSECTION\020E\022\016\n\nROUNDABOUT\020F\022\023\n"
    "\017PASSING_ON_LEFT\020G\022\024\n\020PASSING_ON_RIGHT\020H"
    "\022\034\n\030PASSING_ON_LEFT_OR_RIGHT\020I\022\035\n\031MANDAT"
    "ORY_TURN_RIGHT_ONLY\020J\022\034\n\030MANDATORY_TURN_"
    "LEFT_ONLY\020K\022\033\n\027MANDATORY_STRAIGHT_ONLY\020L"
    "\022 \n\034MANDATORY_TURN_LEFT_OR_RIGHT\020M\022\036\n\032MA"
    "NDATORY_TURN_RESTRICTION\020N\022\036\n\032MANDATORY_"
    "STRAIGHT_OR_LEFT\020O\022\037\n\033MANDATORY_STRAIGHT"
    "_OR_RIGHT\020P\022\020\n\014NO_LEFT_TURN\020Q\022\021\n\rNO_RIGH"
    "T_TURN\020R\022\r\n\tNO_U_TURN\020S\022\025\n\021NO_U_OR_LEFT_"
    "TURN\020T\022\022\n\016U_TURN_ALLOWED\020U\022\030\n\024MANDATORY_"
    "LEFT_TRUCK\020V\022\031\n\025MANDATORY_RIGHT_TRUCK\020W\022"
    "\034\n\030MANDATORY_STRAIGHT_TRUCK\020X\022\014\n\010NO_ENTR"
    "Y\020Y\022\014\n\010DEAD_END\020Z\022\037\n\033HIGH_OCCUPANCY_VEHI"
    "CLE_LANE\020[\022\010\n\004TOLL\020\\\022\014\n\010TOLL_CAR\020]\022\r\n\tTO"
    "LL_LANE\020^\022\020\n\014EXPRESS_LANE\020_\022\035\n\031SHOULDER_"
    "OPEN_FOR_TRAFFIC\020`\022\037\n\033SHOULDER_CLOSED_FO"
    "R_TRAFFIC\020a\022\017\n\013LANE_CLOSED\020b\022\037\n\033LANE_CLO"
    "SED_RIGHT_MOST_LANE\020c\022\036\n\032LANE_CLOSED_LEF"
    "T_MOST_LANE\020d\022\026\n\022WARNING_PEDESTRIAN\020e\022\024\n"
    "\020WARNING_CHILDREN\020f\022\023\n\017WARNING_BICYCLE\020g"
    "\022\017\n\013WARNING_BUS\020h\022\036\n\032PUBLIC_TRANSPORTATI"
    "ON_STOP\020i\022\027\n\023PEDESTRIAN_CROSSING\020j\022\026\n\022WE"
    "IGHT_RESTRICTION\020k\022\026\n\022HEIGHT_RESTRICTION"
    "\020l\022\026\n\022LENGTH_RESTRICTION\020m\022\025\n\021WIDTH_REST"
    "RICTION\020n\022\032\n\026WARNING_TRUCK_ROLLOVER\020o\022\020\n"
    "\014SIGNAL_AHEAD\020p\022\020\n\014SKI_CROSSING\020q\022\031\n\025NO_"
    "AGRICULTUR_VEHICLE\020r\022\016\n\nNO_BICYCLE\020s\022\n\n\006"
    "NO_BUS\020t\022\026\n\022NO_HAUL_EXPLOSIVES\020u\022\034\n\030NO_H"
    "AUL_HARMFUL_TO_WATER\020v\022\036\n\032NO_HAUL_HAZARD"
    "OUS_MATERIAL\020w\022\021\n\rNO_MOTORCYCLE\020x\022\016\n\nNO_"
    "TRAILER\020y\022\031\n\025NO_TRUCK_WITH_TRAILER\020z\022\021\n\r"
    "PARK_AND_RIDE\020{\022\021\n\rROAD_DISTANCE\020|\022\023\n\017EM"
    "ERGENCY_PHONE\020}\022\033\n\027SPEED_LIMIT_ENFORCEME"
    "NT\020~\022\035\n\031TRAFFIC_LIGHT_ENFORCEMENT\020\177\022\024\n\017B"
    "OARD_DIRECTION\020\200\001\022\020\n\013STREET_NAME\020\201\001\022\026\n\021T"
    "RUCK_SPEED_LIMIT\020\202\001\022\032\n\025TRUCK_SPEED_LIMIT"
    "_END\020\203\001\022\026\n\021SPEED_LIMIT_NIGHT\020\204\001\022\032\n\025SPEED"
    "_LIMIT_NIGHT_END\020\205\001\022\022\n\rMINIMUM_SPEED\020\206\001\022"
    "\026\n\021MINIMUM_SPEED_END\020\207\001\022\024\n\017PEDESTRIAN_ZO"
    "NE\020\210\001\022\030\n\023PEDESTRIAN_ZONE_END\020\211\001\022\024\n\017PEDES"
    "TRIAN_PATH\020\212\001\022\030\n\023PEDESTRIAN_PATH_END\020\213\001\022"
    "\034\n\027PEDESTRIAN_BICYCLE_PATH\020\214\001\022 \n\033PEDESTR"
    "IAN_BICYCLE_PATH_END\020\215\001\022\021\n\014BICYCLE_PATH\020"
    "\216\001\022\025\n\020BICYCLE_PATH_END\020\217\001\022\023\n\016BICYCLE_STR"
    "EET\020\220\001\022\027\n\022BICYCLE_STREET_END\020\221\001\022\032\n\025CURVE"
    "_LEFT_THEN_RIGHT\020\222\001\022\032\n\025CURVE_RIGHT_THEN_"
    "LEFT\020\223\001\022\031\n\024CURVE_TRIPLE_HAIRPIN\020\224\001\022\017\n\nST"
    "EEP_DROP\020\225\001\022\027\n\022STEEP_DROP_ON_LEFT\020\226\001\022\030\n\023"
    "STEEP_DROP_ON_RIGHT\020\227\001\022\025\n\020NO_ANIMAL_CATT"
    "LE\020\230\001\022\020\n\013ANIMAL_DEER\020\231\001\022\021\n\014ANIMAL_MOOSE\020"
    "\232\001\022\024\n\017NO_HORSE_RIDING\020\233\001\022\022\n\rFALLING_ROCK"
    "S\020\234\001\022\027\n\022FALLING_ROCKS_LEFT\020\235\001\022\030\n\023FALLING"
    "_ROCKS_RIGHT\020\236\001\022\036\n\031YIELD_TO_ONCOMING_TRA"
    "FFIC\020\237\001\022\032\n\025UNPROTECTED_LEFT_TURN\020\240\001\022\023\n\016O"
    "NEWAY_TRAFFIC\020\241\001\022\033\n\026ONEWAY_TRAFFIC_TO_LE"
    "FT\020\242\001\022\034\n\027ONEWAY_TRAFFIC_TO_RIGHT\020\243\001\022\037\n\032O"
    "NEWAY_TRAFFIC_TO_STRAIGHT\020\244\001\022\017\n\nNO_VEHIC"
    "LE\020\245\001\022\025\n\020NO_MOTOR_VEHICLE\020\246\001\022\r\n\010NO_TRUCK"
    "\020\247\001\022\022\n\rNO_PEDESTRIAN\020\250\001\022!\n\034LANE_USED_IN_"
    "BOTH_DIRECTIONS\020\251\001\022\r\n\010FOG_AREA\020\252\001\022\032\n\025TIR"
    "E_CHAINS_MANDATORY\020\253\001\022\026\n\021HIJACKING_HOTSP"
    "OT\020\254\001\022\023\n\016OVERPASS_AHEAD\020\255\001\022\013\n\006TUNNEL\020\256\001\022"
    "\023\n\016FERRY_TERMINAL\020\257\001\022\022\n\rNARROW_BRIDGE\020\260\001"
    "\022\016\n\tNO_IDLING\020\261\001\022\024\n\017HUMPBACK_BRIDGE\020\262\001\022\017"
    "\n\nEMBANKMENT\020\263\001\022\033\n\026EMBANKMENT_ON_THE_LEF"
    "T\020\264\001\022\034\n\027EMBANKMENT_ON_THE_RIGHT\020\265\001\022+\n&CR"
    "OSSING_WITH_PRIORITY_OVER_MINOR_ROAD\020\266\001\022"
    "(\n#CROSSING_WITH_PRIORITY_TO_THE_RIGHT\020\267"
    "\001\022\027\n\022BRANCH_TO_THE_LEFT\020\270\001\022\030\n\023BRANCH_TO_"
    "THE_RIGHT\020\271\001\022\024\n\017TWO_WAY_TRAFFIC\020\272\001\022\t\n\004BU"
    "MP\020\273\001\022\010\n\003DIP\020\274\001\022\021\n\014ROAD_FLOODED\020\275\001\022\024\n\017AU"
    "DIBLE_WARNING\020\276\001\022\022\n\rVILLAGE_AHEAD\020\277\001\022\023\n\016"
    "MOVABLE_BRIDGE\020\300\001\022\016\n\tSLOW_DOWN\020\301\001\022\023\n\016INT"
    "ERSECTION_T\020\302\001\022\030\n\023INTERSECTION_T_LEFT\020\303\001"
    "\022\031\n\024INTERSECTION_T_RIGHT\020\304\001\022\036\n\031INTERSECT"
    "ION_T_LEFT_RIGHT\020\305\001\022\023\n\016INTERSECTION_Y\020\306\001"
    "\022\021\n\014USE_LOW_GEAR\020\307\001\022\025\n\020USE_LOW_GEAR_END\020"
    "\310\001\022\033\n\026NO_COMPRESSION_BRAKING\020\311\001\022\037\n\032NO_CO"
    "MPRESSION_BRAKING_END\020\312\001\022\021\n\014WAITING_LINE"
    "\020\313\001\022\023\n\016DONT_STOP_ZONE\020\314\001\022\027\n\022HONKING_PROH"
    "IBITED\020\315\001\022\025\n\020FASTEN_SEAT_BELT\020\316\001\022\021\n\014HAML"
    "ET_ENTRY\020\317\001\022\020\n\013HAMLET_EXIT\020\320\001\022\034\n\027HIGHWAY"
    "_MARKER_1_STRIPE\020\321\001\022\035\n\030HIGHWAY_MARKER_2_"
    "STRIPES\020\322\001\022\035\n\030HIGHWAY_MARKER_3_STRIPES\020\323"
    "\001\022\023\n\016GUIDING_BEACON\020\324\001\022\036\n\031COUNTDOWN_MARK"
    "ER_1_STRIPE\020\325\001\022\037\n\032COUNTDOWN_MARKER_2_STR"
    "IPES\020\326\001\022\037\n\032COUNTDOWN_MARKER_3_STRIPES\020\327\001"
    "\022\024\n\017DIVERSION_ROUTE\020\330\001\022\030\n\023DIVERSION_ROUT"
    "E_END\020\331\001\022\034\n\027NO_STOPPING_EXCEPT_TAXI\020\332\001\022\020"
    "\n\013NO_STOPPING\020\333\001\022\025\n\020NO_STOPPING_LEFT\020\334\001\022"
    "\026\n\021NO_STOPPING_RIGHT\020\335\001\022\037\n\032NO_STOPPING_L"
    "EFT_AND_RIGHT\020\336\001\022\017\n\nNO_PARKING\020\337\001\022\024\n\017NO_"
    "PARKING_LEFT\020\340\001\022\025\n\020NO_PARKING_RIGHT\020\341\001\022\036"
    "\n\031NO_PARKING_LEFT_AND_RIGHT\020\342\001\022\030\n\023RUNNAW"
    "AY_TRUCK_RAMP\020\343\001\022\022\n\rTURN_ON_GREEN\020\344\001\022\023\n\016"
    "NO_TURN_ON_RED\020\345\001\022\031\n\024MOTORWAY_ROAD_NUMBE"
    "R\020\346\001\022\030\n\023HIGHWAY_ROAD_NUMBER\020\347\001\022\037\n\032HIGHWA"
    "Y_INTERCHANGE_NUMBER\020\350\001\022\031\n\024EUROPEAN_ROAD"
    "_NUMBER\020\351\001\022\025\n\020SPEED_LIMIT_ZONE\020\352\001\022\031\n\024SPE"
    "ED_LIMIT_ZONE_END\020\353\001\022\024\n\017NO_PARKING_ZONE\020"
    "\354\001\022\030\n\023NO_PARKING_ZONE_END\020\355\001\022\021\n\014PARKING_"
    "ZONE\020\356\001\022\025\n\020PARKING_ZONE_END\020\357\001\022\014\n\007PARKIN"
    "G\020\360\001\022\024\n\017PARKING_TO_LEFT\020\361\001\022\025\n\020PARKING_TO"
    "_RIGHT\020\362\001\022\023\n\016PARKING_GARAGE\020\363\001\022\027\n\022PARKIN"
    "G_ON_SIDEWAY\020\364\001\022\024\n\017SAFETY_DISTANCE\020\365\001\022\034\n"
    "\027SAFETY_DISTANCE_VEHICLE\020\366\001\022\032\n\025SAFETY_DI"
    "STANCE_TRUCK\020\367\001\022\013\n\006DETOUR\020\370\001\022\017\n\nDETOUR_E"
    "ND\020\371\001\022\020\n\013DETOUR_LEFT\020\372\001\022\021\n\014DETOUR_RIGHT\020"
    "\373\001\022\020\n\013STATION_GAS\020\374\001\022\020\n\013STATION_LPG\020\375\001\022\020"
    "\n\013STATION_CNG\020\376\001\022\017\n\nSTATION_H2\020\377\001\022\024\n\017STA"
    "TION_ELECTRO\020\200\002\022\023\n\016STATION_POLICE\020\201\002\022\021\n\014"
    "CAMPING_SPOT\020\202\002\022\016\n\tRESTROOMS\020\203\002\022\017\n\nINFO_"
    "POINT\020\204\002\022\030\n\023MOTORWAY_EXIT_AHEAD\020\205\002\022\027\n\022HI"
    "GHWAY_EXIT_AHEAD\020\206\002\022\022\n\rMOTORWAY_EXIT\020\207\002\022"
    "\021\n\014HIGHWAY_EXIT\020\210\002\022\016\n\tFIRST_AID\020\211\002\022\017\n\nLO"
    "W_FLYING\020\212\002\022\017\n\nLANE_SHIFT\020\213\002\022\027\n\022LANE_SHI"
    "FT_TO_LEFT\020\214\002\022\030\n\023LANE_SHIFT_TO_RIGHT\020\215\002\022"
    "\031\n\024PEDESTRIAN_UNDERPASS\020\216\002\022\030\n\023PEDESTRIAN"
    "_OVERPASS\020\217\002\022\022\n\rBREAKDOWN_BAY\020\220\002\022\r\n\010BUS_"
    "LANE\020\221\002\022\023\n\016DOUBLE_HAIRPIN\020\222\002\022!\n\034COUNTRY_"
    "SPECIFIC_INFORMATION\020\223\002\022#\n\036PEDESTRIAN_BI"
    "CYCLE_SHARED_PATH\020\224\002\022!\n\034OVERHEAD_LANE_CO"
    "NTROL_CLOSED\020\225\002\022\037\n\032OVERHEAD_LANE_CONTROL"
    "_OPEN\020\226\002\022\'\n\"OVERHEAD_LANE_CONTROL_CLOSIN"
    "G_LEFT\020\227\002\022(\n#OVERHEAD_LANE_CONTROL_CLOSI"
    "NG_RIGHT\020\230\002\022+\n&OVERHEAD_LANE_CONTROL_FLA"
    "SH_ARROW_LEFT\020\231\002\022,\n\'OVERHEAD_LANE_CONTRO"
    "L_FLASH_ARROW_RIGHT\020\232\002\022\016\n\tTRINATURE\020\233\002\022\020"
    "\n\013ANIMAL_FROG\020\234\002\022\013\n\006GRAVEL\020\235\002\022 \n\033WARNING"
    "_PEDESTRIAN_CROSSING\020\236\002\022\r\n\010LOW_TREE\020\237\002\022\022"
    "\n\rWARNING_RIDER\020\240\002\022\017\n\nSTOP_AHEAD\020\241\002\022\020\n\013Y"
    "IELD_AHEAD\020\242\002\022\032\n\025WATER_PROTECTION_AREA\020\243"
    "\002\022\020\n\013TOLL_DOUANE\020\244\002\022\023\n\016NO_CAR_OR_BIKE\020\245\002"
    "\022\036\n\031DRIVING_DIRECTION_ONLY_UP\020\246\002\022\"\n\035DRIV"
    "ING_DIRECTION_UP_AND_DOWN\020\247\002\022\022\n\rMILITARY"
    "_SIGN\020\250\002\022\t\n\004SMOG\020\251\002\022\025\n\020ROUNDABOUT_AHEAD\020"
    "\252\002\022(\n#MANDATORY_LEFT_OR_STRAIGHT_OR_RIGH"
    "T\020\253\002\022\023\n\016DEAD_END_RIGHT\020\254\002\022\022\n\rDEAD_END_LE"
    "FT\020\255\002\022\017\n\nTOLL_TRUCK\020\256\002\022\023\n\016TOLL_TRUCK_END"
    "\020\257\002\022\027\n\022STAGGERED_JUNCTION\020\260\002\022\034\n\027AXLE_WEI"
    "GHT_RESTRICTION\020\261\002\022\r\n\010TOLL_END\020\262\002\022\021\n\014TOL"
    "L_CAR_END\020\263\002\022\022\n\rTOLL_LANE_END\020\264\002\032\177\n\022Valu"
    "eAndConfidence\022+\n\005value\030\001 \001(\0132\034.google.p"
    "rotobuf.StringValue\022<\n\nconfidence\030\002 \001(\0132"
    "(.sensoris.protobuf.types.base.Confidenc"
    "e\032\306\002\n\027PermanencyAndConfidence\022f\n\004type\030\001 "
    "\001(\0162X.sensoris.protobuf.categories.traff"
    "icregulation.TrafficSign.PermanencyAndCo"
    "nfidence.Type\022<\n\nconfidence\030\002 \001(\0132(.sens"
    "oris.protobuf.types.base.Confidence\"\204\001\n\004"
    "Type\022\020\n\014UNKNOWN_TYPE\020\000\022\n\n\006STATIC\020\001\022\014\n\010VA"
    "RIABLE\020\002\022\033\n\027VARIABLE_ELECTRONICALLY\020\003\022\031\n"
    "\025VARIABLE_MECHANICALLY\020\004\022\030\n\024VARIABLE_DEA"
    "CTIVATED\020\005\032\361\001\n\027ValidationAndConfidence\022f"
    "\n\004type\030\001 \001(\0162X.sensoris.protobuf.categor"
    "ies.trafficregulation.TrafficSign.Valida"
    "tionAndConfidence.Type\022<\n\nconfidence\030\002 \001"
    "(\0132(.sensoris.protobuf.types.base.Confid"
    "ence\"0\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005VALID\020"
    "\001\022\013\n\007INVALID\020\002\032\311\002\n$DominantBackgroundCol"
    "orAndConfidence\022s\n\004type\030\001 \001(\0162e.sensoris"
    ".protobuf.categories.trafficregulation.T"
    "rafficSign.DominantBackgroundColorAndCon"
    "fidence.Type\022<\n\nconfidence\030\002 \001(\0132(.senso"
    "ris.protobuf.types.base.Confidence\"n\n\004Ty"
    "pe\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005OTHER\020\001\022\t\n\005WHITE"
    "\020\002\022\007\n\003RED\020\003\022\t\n\005GREEN\020\004\022\010\n\004BLUE\020\005\022\n\n\006YELL"
    "OW\020\006\022\t\n\005BLACK\020\007\022\t\n\005BROWN\020\010\032\302\022\n\036Supplemen"
    "tarySignAndConfidence\022F\n\024existence_confi"
    "dence\030\001 \001(\0132(.sensoris.protobuf.types.ba"
    "se.Confidence\022L\n\020detection_status\030\002 \001(\0132"
    "2.sensoris.protobuf.types.base.EventDete"
    "ctionStatus\022\211\001\n\023type_and_confidence\030\003 \001("
    "\0132l.sensoris.protobuf.categories.traffic"
    "regulation.TrafficSign.SupplementarySign"
    "AndConfidence.TypeAndConfidence\022l\n\024value"
    "_and_confidence\030\004 \001(\0132N.sensoris.protobu"
    "f.categories.trafficregulation.TrafficSi"
    "gn.ValueAndConfidence\032\217\017\n\021TypeAndConfide"
    "nce\022\177\n\004type\030\001 \001(\0162q.sensoris.protobuf.ca"
    "tegories.trafficregulation.TrafficSign.S"
    "upplementarySignAndConfidence.TypeAndCon"
    "fidence.Type\022<\n\nconfidence\030\002 \001(\0132(.senso"
    "ris.protobuf.types.base.Confidence\0220\n\not"
    "her_text\030\003 \001(\0132\034.google.protobuf.StringV"
    "alue\"\210\r\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\025\n\021SUP_O"
    "THER_AS_TEXT\020\001\022\013\n\007SUP_WET\020\002\022\014\n\010SUP_RAIN\020"
    "\003\022\014\n\010SUP_SNOW\020\004\022\024\n\020SUP_SNOW_OR_RAIN\020\005\022\013\n"
    "\007SUP_FOG\020\006\022\014\n\010SUP_TIME\020\007\022\024\n\020SUP_DAY_AND_"
    "TIME\020\010\022\r\n\tSUP_NIGHT\020\t\022\016\n\nSUP_SEASON\020\n\022\020\n"
    "\014SUP_WORKDAYS\020\013\022\031\n\025SUP_WORKDAYS_AND_TIME"
    "\020\014\022\016\n\nSUP_SCHOOL\020\r\022\014\n\010SUP_RAMP\020\016\022\r\n\tSUP_"
    "TRUCK\020\017\022\032\n\026SUP_TRUCK_WITH_TRAILER\020\020\022\025\n\021S"
    "UP_PASSENGER_CAR\020\021\022!\n\035SUP_PASSENGER_CAR_"
    "WITH_TAILER\020\022\022\026\n\022SUP_TRACTOR_EXCEPT\020\023\022\013\n"
    "\007SUP_BUS\020\024\022\026\n\022SUP_TRUCKS_AND_BUS\020\025\022\027\n\023SU"
    "P_CARS_TRUCKS_BUS\020\026\022\014\n\010SUP_TAXI\020\027\022\014\n\010SUP"
    "_TANK\020\030\022\020\n\014SUP_ROADSIDE\020\031\022\016\n\nSUP_WEIGHT\020"
    "\032\022\023\n\017SUP_STARTING_IN\020\033\022\021\n\rSUP_VALID_FOR\020"
    "\034\022\032\n\026SUP_IN_RIGHT_DIRECTION\020\035\022\031\n\025SUP_IN_"
    "LEFT_DIRECTION\020\036\022\014\n\010SUP_ZONE\020\037\022\022\n\016SUP_ZO"
    "NE_START\020 \022\020\n\014SUP_ZONE_END\020!\022\031\n\025SUP_BEGI"
    "N_OF_VALIDITY\020\"\022\027\n\023SUP_END_OF_VALIDITY\020#"
    "\022\014\n\010SUP_FROG\020$\022\017\n\013SUP_ALL_WAY\020%\022\014\n\010SUP_B"
    "IKE\020&\022\023\n\017SUP_BIKE_EXCEPT\020\'\022\022\n\016SUP_BUS_EX"
    "CEPT\020(\022\016\n\nSUP_CAMPER\020)\022\017\n\013SUP_CARAVAN\020*\022"
    "\034\n\030SUP_CONSTRUCTION_GATEWAY\020+\022\021\n\rSUP_CRO"
    "SS_WAY\020,\022\027\n\023SUP_DELIVERY_EXCEPT\020-\022\026\n\022SUP"
    "_ELECTRONIC_CAR\020.\022\017\n\013SUP_GATEWAY\020/\022\025\n\021SU"
    "P_GIVE_WAY_LEFT\0200\022\026\n\022SUP_GIVE_WAY_RIGHT\020"
    "1\022\016\n\nSUP_GRAVEL\0202\022\016\n\nSUP_HAZMAT\0203\022\021\n\rSUP"
    "_HAZ_WATER\0204\022\014\n\010SUP_KIDS\0205\022\023\n\017SUP_LOCAL_"
    "EXCEP\0206\022\020\n\014SUP_LOW_TREE\0207\022\022\n\016SUP_MOTORCY"
    "CLE\0208\022\031\n\025SUP_MOTORCYCLE_EXCEPT\0209\022\024\n\020SUP_"
    "NEW_ROAD_BED\020:\022\030\n\024SUP_NO_STOP_SHOULDER\020;"
    "\022\021\n\rSUP_OIL_TRAIL\020<\022\034\n\030SUP_PASSENGER_CAR"
    "_EXCEPT\020=\022(\n$SUP_PASSENGER_CAR_WITH_TAIL"
    "ER_EXCEPT\020>\022\022\n\016SUP_PEDESTRIAN\020\?\022\032\n\026SUP_P"
    "RIORITY_TURN_LEFT\020@\022\033\n\027SUP_PRIORITY_TURN"
    "_RIGHT\020A\022\023\n\017SUP_ROAD_DAMAGE\020B\022\014\n\010SUP_RUT"
    "S\020C\022\017\n\013SUP_TRACTOR\020D\022 \n\034SUP_TRACTOR_MAY_"
    "BE_OVERTAKEN\020E\022\023\n\017SUP_TRAFFIC_JAM\020F\022\r\n\tS"
    "UP_TRAIN\020G\022\014\n\010SUP_TRAM\020H\022\024\n\020SUP_TRUCK_EX"
    "CEPT\020I\022!\n\035SUP_TRUCK_WITH_TRAILER_EXCEPT\020"
    "J\022\032\n\026SUP_GET_IN_PROPER_LANE\020K\022\026\n\022SUP_ROA"
    "DSIDE_TRUCK\020L\022\016\n\nSUP_RAPPEL\020M\022\026\n\022SUP_RAD"
    "AR_ENFORCED\020N\022\030\n\024SUP_STOP_IN_DISTANCE\020O\""
    "\260\001\n\031TrafficRegulationCategory\022@\n\010envelop"
    "e\030\001 \001(\0132..sensoris.protobuf.types.base.C"
    "ategoryEnvelope\022Q\n\014traffic_sign\030\002 \003(\0132;."
    "sensoris.protobuf.categories.trafficregu"
    "lation.TrafficSignB\214\001\n)org.sensoris.cate"
    "gories.trafficregulationB!SensorisTraffi"
    "cRegulationCategoryP\001Z7sensoris.org/spec"
    "ification/categories/trafficregulation\370\001"
    "\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto = {
    false,
    false,
    13049,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto,
    "sensoris/protobuf/categories/traffic_regulation.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_deps,
    3,
    10,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto);
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficregulation {
const ::google::protobuf::EnumDescriptor* TrafficSign_ShapeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSign_ShapeAndConfidence_Type_internal_data_[] = {
    917504u, 0u, };
bool TrafficSign_ShapeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 13;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::UNKNOWN_TYPE;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::OTHER;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::RECTANGLE;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::SQUARE;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::TRIANGLE_UP;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::TRIANGLE_DOWN;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::DIAMOND;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::HEXAGON;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::ROUND;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::CROSS_BUCK;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::OCTAGON;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::ELLIPSE;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::PENTAGON;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::SHIELD;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::Type_MIN;
constexpr TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::Type_MAX;
constexpr int TrafficSign_ShapeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TrafficSign_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSign_TypeAndConfidence_Type_internal_data_[] = {
    20250624u, 0u, };
bool TrafficSign_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 308;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::UNKNOWN_TYPE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OTHER_AS_TEXT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_CHANGE_UPCOMING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ADVISORY_SPEED_LIMIT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ADVISORY_SPEED_LIMIT_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_OVERTAKING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_OVERTAKING_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_START;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_LEFT_START;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_RIGHT_START;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_LEFT_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_RIGHT_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_OVERTAKING_TRUCK;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_OVERTAKING_TRUCK_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ALL_RESTRICTIONS_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CITY_START;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CITY_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CONSTRUCTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CONSTRUCTION_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_MERGE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_MERGE_ON_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_MERGE_ON_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_MERGE_CENTER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RAILWAY_CROSSING_GENERAL;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RAILWAY_CROSSING_PROTECTED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RAILWAY_CROSSING_UNPROTECTED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_NARROWS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_NARROWS_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_NARROWS_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_NARROWS_CENTER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHARP_CURVE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHARP_CURVE_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHARP_CURVE_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WINDING_ROAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WINDING_ROAD_STARTING_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WINDING_ROAD_STARTING_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_HILL;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_HILL_UPWARDS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_HILL_DOWNWARDS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STOP_SIGN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LATERAL_WIND;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LATERAL_WIND_FROM_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LATERAL_WIND_FROM_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::GENERAL_WARNING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RISK_OF_GROUNDING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ANIMAL;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ICY_CONDITIONS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SLIPPERY_ROAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::UNEVEN_ROAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SCHOOL_ZONE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRAMWAY_CROSSING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CONGESTION_HAZARD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ACCIDENT_HAZARD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_CROSSING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PRIORITY_OVER_ONCOMING_TRAFFIC;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::YIELD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PRIORITY_ROAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PRIORITY_ROAD_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRAFFIC_CALMING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRAFFIC_CALMING_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ENVIRONMENTAL_AREA;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ENVIRONMENTAL_AREA_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROUNDABOUT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PASSING_ON_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PASSING_ON_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PASSING_ON_LEFT_OR_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_TURN_RIGHT_ONLY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_TURN_LEFT_ONLY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_STRAIGHT_ONLY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_TURN_LEFT_OR_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_TURN_RESTRICTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_STRAIGHT_OR_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_STRAIGHT_OR_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_LEFT_TURN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_RIGHT_TURN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_U_TURN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_U_OR_LEFT_TURN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::U_TURN_ALLOWED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_LEFT_TRUCK;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_RIGHT_TRUCK;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_STRAIGHT_TRUCK;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_ENTRY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DEAD_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGH_OCCUPANCY_VEHICLE_LANE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_CAR;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_LANE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EXPRESS_LANE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHOULDER_OPEN_FOR_TRAFFIC;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHOULDER_CLOSED_FOR_TRAFFIC;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_CLOSED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_CLOSED_RIGHT_MOST_LANE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_CLOSED_LEFT_MOST_LANE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_PEDESTRIAN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_CHILDREN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_BICYCLE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_BUS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PUBLIC_TRANSPORTATION_STOP;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_CROSSING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WEIGHT_RESTRICTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HEIGHT_RESTRICTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LENGTH_RESTRICTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WIDTH_RESTRICTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_TRUCK_ROLLOVER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SIGNAL_AHEAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SKI_CROSSING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_AGRICULTUR_VEHICLE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_BICYCLE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_BUS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_HAUL_EXPLOSIVES;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_HAUL_HARMFUL_TO_WATER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_HAUL_HAZARDOUS_MATERIAL;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_MOTORCYCLE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_TRAILER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_TRUCK_WITH_TRAILER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARK_AND_RIDE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_DISTANCE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EMERGENCY_PHONE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_ENFORCEMENT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRAFFIC_LIGHT_ENFORCEMENT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BOARD_DIRECTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STREET_NAME;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRUCK_SPEED_LIMIT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRUCK_SPEED_LIMIT_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_NIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_NIGHT_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MINIMUM_SPEED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MINIMUM_SPEED_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_ZONE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_ZONE_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_PATH;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_PATH_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_BICYCLE_PATH;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_BICYCLE_PATH_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_PATH;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_PATH_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_STREET;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_STREET_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CURVE_LEFT_THEN_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CURVE_RIGHT_THEN_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CURVE_TRIPLE_HAIRPIN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_DROP;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_DROP_ON_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_DROP_ON_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_ANIMAL_CATTLE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ANIMAL_DEER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ANIMAL_MOOSE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_HORSE_RIDING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FALLING_ROCKS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FALLING_ROCKS_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FALLING_ROCKS_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::YIELD_TO_ONCOMING_TRAFFIC;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::UNPROTECTED_LEFT_TURN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ONEWAY_TRAFFIC;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ONEWAY_TRAFFIC_TO_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ONEWAY_TRAFFIC_TO_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ONEWAY_TRAFFIC_TO_STRAIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_VEHICLE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_MOTOR_VEHICLE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_TRUCK;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PEDESTRIAN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_USED_IN_BOTH_DIRECTIONS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FOG_AREA;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TIRE_CHAINS_MANDATORY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIJACKING_HOTSPOT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERPASS_AHEAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TUNNEL;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FERRY_TERMINAL;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NARROW_BRIDGE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_IDLING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HUMPBACK_BRIDGE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EMBANKMENT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EMBANKMENT_ON_THE_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EMBANKMENT_ON_THE_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CROSSING_WITH_PRIORITY_TO_THE_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BRANCH_TO_THE_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BRANCH_TO_THE_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TWO_WAY_TRAFFIC;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BUMP;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DIP;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_FLOODED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::AUDIBLE_WARNING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::VILLAGE_AHEAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOVABLE_BRIDGE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SLOW_DOWN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_T;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_T_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_T_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_T_LEFT_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_Y;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::USE_LOW_GEAR;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::USE_LOW_GEAR_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_COMPRESSION_BRAKING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_COMPRESSION_BRAKING_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WAITING_LINE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DONT_STOP_ZONE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HONKING_PROHIBITED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FASTEN_SEAT_BELT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HAMLET_ENTRY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HAMLET_EXIT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_MARKER_1_STRIPE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_MARKER_2_STRIPES;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_MARKER_3_STRIPES;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::GUIDING_BEACON;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::COUNTDOWN_MARKER_1_STRIPE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::COUNTDOWN_MARKER_2_STRIPES;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::COUNTDOWN_MARKER_3_STRIPES;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DIVERSION_ROUTE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DIVERSION_ROUTE_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING_EXCEPT_TAXI;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING_LEFT_AND_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_LEFT_AND_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RUNNAWAY_TRUCK_RAMP;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TURN_ON_GREEN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_TURN_ON_RED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY_ROAD_NUMBER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_ROAD_NUMBER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_INTERCHANGE_NUMBER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EUROPEAN_ROAD_NUMBER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_ZONE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_ZONE_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_ZONE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_ZONE_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_ZONE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_ZONE_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_TO_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_TO_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_GARAGE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_ON_SIDEWAY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SAFETY_DISTANCE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SAFETY_DISTANCE_VEHICLE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SAFETY_DISTANCE_TRUCK;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DETOUR;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DETOUR_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DETOUR_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DETOUR_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_GAS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_LPG;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_CNG;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_H2;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_ELECTRO;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_POLICE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CAMPING_SPOT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RESTROOMS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INFO_POINT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY_EXIT_AHEAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_EXIT_AHEAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY_EXIT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_EXIT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FIRST_AID;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LOW_FLYING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_SHIFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_SHIFT_TO_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_SHIFT_TO_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_UNDERPASS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_OVERPASS;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BREAKDOWN_BAY;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BUS_LANE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DOUBLE_HAIRPIN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::COUNTRY_SPECIFIC_INFORMATION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_BICYCLE_SHARED_PATH;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_CLOSED;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_OPEN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_CLOSING_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_CLOSING_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_FLASH_ARROW_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_FLASH_ARROW_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRINATURE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ANIMAL_FROG;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::GRAVEL;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_PEDESTRIAN_CROSSING;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LOW_TREE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_RIDER;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STOP_AHEAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::YIELD_AHEAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WATER_PROTECTION_AREA;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_DOUANE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_CAR_OR_BIKE;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DRIVING_DIRECTION_ONLY_UP;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DRIVING_DIRECTION_UP_AND_DOWN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MILITARY_SIGN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SMOG;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROUNDABOUT_AHEAD;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DEAD_END_RIGHT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DEAD_END_LEFT;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_TRUCK;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_TRUCK_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STAGGERED_JUNCTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::AXLE_WEIGHT_RESTRICTION;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_CAR_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_LANE_END;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::Type_MIN;
constexpr TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::Type_MAX;
constexpr int TrafficSign_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TrafficSign_PermanencyAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSign_PermanencyAndConfidence_Type_internal_data_[] = {
    393216u, 0u, };
bool TrafficSign_PermanencyAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::UNKNOWN_TYPE;
constexpr TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::STATIC;
constexpr TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::VARIABLE;
constexpr TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::VARIABLE_ELECTRONICALLY;
constexpr TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::VARIABLE_MECHANICALLY;
constexpr TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::VARIABLE_DEACTIVATED;
constexpr TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::Type_MIN;
constexpr TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::Type_MAX;
constexpr int TrafficSign_PermanencyAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TrafficSign_ValidationAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSign_ValidationAndConfidence_Type_internal_data_[] = {
    196608u, 0u, };
bool TrafficSign_ValidationAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::UNKNOWN_TYPE;
constexpr TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::VALID;
constexpr TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::INVALID;
constexpr TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::Type_MIN;
constexpr TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::Type_MAX;
constexpr int TrafficSign_ValidationAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TrafficSign_DominantBackgroundColorAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSign_DominantBackgroundColorAndConfidence_Type_internal_data_[] = {
    589824u, 0u, };
bool TrafficSign_DominantBackgroundColorAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 8;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::UNKNOWN_TYPE;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::OTHER;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::WHITE;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::RED;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::GREEN;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::BLUE;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::YELLOW;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::BLACK;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::BROWN;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::Type_MIN;
constexpr TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::Type_MAX;
constexpr int TrafficSign_DominantBackgroundColorAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type_internal_data_[] = {
    5242880u, 0u, };
bool TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 79;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::UNKNOWN_TYPE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_OTHER_AS_TEXT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_WET;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RAIN;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_SNOW;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_SNOW_OR_RAIN;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_FOG;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TIME;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_DAY_AND_TIME;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_NIGHT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_SEASON;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_WORKDAYS;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_WORKDAYS_AND_TIME;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_SCHOOL;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RAMP;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCK;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCK_WITH_TRAILER;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PASSENGER_CAR;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PASSENGER_CAR_WITH_TAILER;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRACTOR_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BUS;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCKS_AND_BUS;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CARS_TRUCKS_BUS;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TAXI;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TANK;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ROADSIDE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_WEIGHT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_STARTING_IN;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_VALID_FOR;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_IN_RIGHT_DIRECTION;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_IN_LEFT_DIRECTION;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ZONE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ZONE_START;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ZONE_END;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BEGIN_OF_VALIDITY;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_END_OF_VALIDITY;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_FROG;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ALL_WAY;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BIKE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BIKE_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BUS_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CAMPER;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CARAVAN;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CONSTRUCTION_GATEWAY;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CROSS_WAY;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_DELIVERY_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ELECTRONIC_CAR;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GATEWAY;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GIVE_WAY_LEFT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GIVE_WAY_RIGHT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GRAVEL;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_HAZMAT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_HAZ_WATER;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_KIDS;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_LOCAL_EXCEP;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_LOW_TREE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_MOTORCYCLE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_MOTORCYCLE_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_NEW_ROAD_BED;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_NO_STOP_SHOULDER;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_OIL_TRAIL;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PASSENGER_CAR_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PEDESTRIAN;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PRIORITY_TURN_LEFT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PRIORITY_TURN_RIGHT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ROAD_DAMAGE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RUTS;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRACTOR;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRACTOR_MAY_BE_OVERTAKEN;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRAFFIC_JAM;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRAIN;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRAM;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCK_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCK_WITH_TRAILER_EXCEPT;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GET_IN_PROPER_LANE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ROADSIDE_TRUCK;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RAPPEL;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RADAR_ENFORCED;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_STOP_IN_DISTANCE;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Type_MIN;
constexpr TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Type_MAX;
constexpr int TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TrafficSign_ShapeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_ShapeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign_ShapeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const TrafficSign_ShapeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& TrafficSign_ShapeAndConfidence::_Internal::confidence(const TrafficSign_ShapeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void TrafficSign_ShapeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficSign_ShapeAndConfidence::TrafficSign_ShapeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_ShapeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSign_ShapeAndConfidence::TrafficSign_ShapeAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficSign_ShapeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign_ShapeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_ShapeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficSign_ShapeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSign_ShapeAndConfidence::~TrafficSign_ShapeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign_ShapeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign_ShapeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign_ShapeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TrafficSign_ShapeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign_ShapeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_ShapeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_ShapeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSign_ShapeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_ShapeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_ShapeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_ShapeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign_ShapeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  return target;
}

::size_t TrafficSign_ShapeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign_ShapeAndConfidence::_class_data_ = {
    TrafficSign_ShapeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign_ShapeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficSign_ShapeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_ShapeAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSign_ShapeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_ShapeAndConfidence::CopyFrom(const TrafficSign_ShapeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign_ShapeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign_ShapeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign_ShapeAndConfidence::InternalSwap(TrafficSign_ShapeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_ShapeAndConfidence, _impl_.type_)
      + sizeof(TrafficSign_ShapeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_ShapeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSign_ShapeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[0]);
}
// ===================================================================

class TrafficSign_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const TrafficSign_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::StringValue& other_text(const TrafficSign_TypeAndConfidence* msg);
  static void set_has_other_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& TrafficSign_TypeAndConfidence::_Internal::confidence(const TrafficSign_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
const ::google::protobuf::StringValue& TrafficSign_TypeAndConfidence::_Internal::other_text(const TrafficSign_TypeAndConfidence* msg) {
  return *msg->_impl_.other_text_;
}
void TrafficSign_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficSign_TypeAndConfidence::clear_other_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.other_text_ != nullptr) _impl_.other_text_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrafficSign_TypeAndConfidence::TrafficSign_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSign_TypeAndConfidence::TrafficSign_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficSign_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.other_text_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.other_text_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficSign_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSign_TypeAndConfidence::~TrafficSign_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  delete _impl_.other_text_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.confidence_ != nullptr);
      _impl_.confidence_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.other_text_ != nullptr);
      _impl_.other_text_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> TrafficSign_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSign_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_.type_)}},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_.confidence_)}},
    // .google.protobuf.StringValue other_text = 3 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_.other_text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue other_text = 3 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_.other_text_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue other_text = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::other_text(this),
        _Internal::other_text(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  return target;
}

::size_t TrafficSign_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
    }

    // .google.protobuf.StringValue other_text = 3 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.other_text_);
    }

  }
  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign_TypeAndConfidence::_class_data_ = {
    TrafficSign_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficSign_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSign_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_confidence());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_other_text()->::google::protobuf::StringValue::MergeFrom(
          from._internal_other_text());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_TypeAndConfidence::CopyFrom(const TrafficSign_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign_TypeAndConfidence::InternalSwap(TrafficSign_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_.type_)
      + sizeof(TrafficSign_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSign_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[1]);
}
// ===================================================================

class TrafficSign_ValueAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_ValueAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign_ValueAndConfidence, _impl_._has_bits_);
  static const ::google::protobuf::StringValue& value(const TrafficSign_ValueAndConfidence* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const TrafficSign_ValueAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::StringValue& TrafficSign_ValueAndConfidence::_Internal::value(const TrafficSign_ValueAndConfidence* msg) {
  return *msg->_impl_.value_;
}
const ::sensoris::protobuf::types::base::Confidence& TrafficSign_ValueAndConfidence::_Internal::confidence(const TrafficSign_ValueAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void TrafficSign_ValueAndConfidence::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficSign_ValueAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrafficSign_ValueAndConfidence::TrafficSign_ValueAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_ValueAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSign_ValueAndConfidence::TrafficSign_ValueAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficSign_ValueAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign_ValueAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.value_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.value_)
                : nullptr;
  _impl_.confidence_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_ValueAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficSign_ValueAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           0,
           offsetof(Impl_, confidence_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::confidence_));
}
TrafficSign_ValueAndConfidence::~TrafficSign_ValueAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign_ValueAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.value_;
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign_ValueAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.confidence_ != nullptr);
      _impl_.confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign_ValueAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TrafficSign_ValueAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign_ValueAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_ValueAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficSign_ValueAndConfidence, _impl_.confidence_)}},
    // .google.protobuf.StringValue value = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_ValueAndConfidence, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.StringValue value = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_ValueAndConfidence, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_ValueAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign_ValueAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.StringValue value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  return target;
}

::size_t TrafficSign_ValueAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.StringValue value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_);
    }

    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign_ValueAndConfidence::_class_data_ = {
    TrafficSign_ValueAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign_ValueAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficSign_ValueAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_ValueAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSign_ValueAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_value()->::google::protobuf::StringValue::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_ValueAndConfidence::CopyFrom(const TrafficSign_ValueAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign_ValueAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign_ValueAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign_ValueAndConfidence::InternalSwap(TrafficSign_ValueAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_ValueAndConfidence, _impl_.confidence_)
      + sizeof(TrafficSign_ValueAndConfidence::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_ValueAndConfidence, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::google::protobuf::Metadata TrafficSign_ValueAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[2]);
}
// ===================================================================

class TrafficSign_PermanencyAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_PermanencyAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign_PermanencyAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const TrafficSign_PermanencyAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& TrafficSign_PermanencyAndConfidence::_Internal::confidence(const TrafficSign_PermanencyAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void TrafficSign_PermanencyAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficSign_PermanencyAndConfidence::TrafficSign_PermanencyAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_PermanencyAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSign_PermanencyAndConfidence::TrafficSign_PermanencyAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficSign_PermanencyAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign_PermanencyAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_PermanencyAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficSign_PermanencyAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSign_PermanencyAndConfidence::~TrafficSign_PermanencyAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign_PermanencyAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign_PermanencyAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign_PermanencyAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TrafficSign_PermanencyAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign_PermanencyAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_PermanencyAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_PermanencyAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSign_PermanencyAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_PermanencyAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_PermanencyAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_PermanencyAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign_PermanencyAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  return target;
}

::size_t TrafficSign_PermanencyAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign_PermanencyAndConfidence::_class_data_ = {
    TrafficSign_PermanencyAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign_PermanencyAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficSign_PermanencyAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_PermanencyAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSign_PermanencyAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_PermanencyAndConfidence::CopyFrom(const TrafficSign_PermanencyAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign_PermanencyAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign_PermanencyAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign_PermanencyAndConfidence::InternalSwap(TrafficSign_PermanencyAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_PermanencyAndConfidence, _impl_.type_)
      + sizeof(TrafficSign_PermanencyAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_PermanencyAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSign_PermanencyAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[3]);
}
// ===================================================================

class TrafficSign_ValidationAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_ValidationAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign_ValidationAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const TrafficSign_ValidationAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& TrafficSign_ValidationAndConfidence::_Internal::confidence(const TrafficSign_ValidationAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void TrafficSign_ValidationAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficSign_ValidationAndConfidence::TrafficSign_ValidationAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_ValidationAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSign_ValidationAndConfidence::TrafficSign_ValidationAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficSign_ValidationAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign_ValidationAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_ValidationAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficSign_ValidationAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSign_ValidationAndConfidence::~TrafficSign_ValidationAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign_ValidationAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign_ValidationAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign_ValidationAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TrafficSign_ValidationAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign_ValidationAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_ValidationAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_ValidationAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSign_ValidationAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_ValidationAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_ValidationAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_ValidationAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign_ValidationAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  return target;
}

::size_t TrafficSign_ValidationAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign_ValidationAndConfidence::_class_data_ = {
    TrafficSign_ValidationAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign_ValidationAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficSign_ValidationAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_ValidationAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSign_ValidationAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_ValidationAndConfidence::CopyFrom(const TrafficSign_ValidationAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign_ValidationAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign_ValidationAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign_ValidationAndConfidence::InternalSwap(TrafficSign_ValidationAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_ValidationAndConfidence, _impl_.type_)
      + sizeof(TrafficSign_ValidationAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_ValidationAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSign_ValidationAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[4]);
}
// ===================================================================

class TrafficSign_DominantBackgroundColorAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_DominantBackgroundColorAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign_DominantBackgroundColorAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const TrafficSign_DominantBackgroundColorAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& TrafficSign_DominantBackgroundColorAndConfidence::_Internal::confidence(const TrafficSign_DominantBackgroundColorAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void TrafficSign_DominantBackgroundColorAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficSign_DominantBackgroundColorAndConfidence::TrafficSign_DominantBackgroundColorAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_DominantBackgroundColorAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSign_DominantBackgroundColorAndConfidence::TrafficSign_DominantBackgroundColorAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficSign_DominantBackgroundColorAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign_DominantBackgroundColorAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_DominantBackgroundColorAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficSign_DominantBackgroundColorAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSign_DominantBackgroundColorAndConfidence::~TrafficSign_DominantBackgroundColorAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign_DominantBackgroundColorAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign_DominantBackgroundColorAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign_DominantBackgroundColorAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TrafficSign_DominantBackgroundColorAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign_DominantBackgroundColorAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_DominantBackgroundColorAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_DominantBackgroundColorAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSign_DominantBackgroundColorAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_DominantBackgroundColorAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_DominantBackgroundColorAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_DominantBackgroundColorAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign_DominantBackgroundColorAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  return target;
}

::size_t TrafficSign_DominantBackgroundColorAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign_DominantBackgroundColorAndConfidence::_class_data_ = {
    TrafficSign_DominantBackgroundColorAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign_DominantBackgroundColorAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficSign_DominantBackgroundColorAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_DominantBackgroundColorAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSign_DominantBackgroundColorAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_DominantBackgroundColorAndConfidence::CopyFrom(const TrafficSign_DominantBackgroundColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign_DominantBackgroundColorAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign_DominantBackgroundColorAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign_DominantBackgroundColorAndConfidence::InternalSwap(TrafficSign_DominantBackgroundColorAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_DominantBackgroundColorAndConfidence, _impl_.type_)
      + sizeof(TrafficSign_DominantBackgroundColorAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_DominantBackgroundColorAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSign_DominantBackgroundColorAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[5]);
}
// ===================================================================

class TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::StringValue& other_text(const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* msg);
  static void set_has_other_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::_Internal::confidence(const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
const ::google::protobuf::StringValue& TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::_Internal::other_text(const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* msg) {
  return *msg->_impl_.other_text_;
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::clear_other_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.other_text_ != nullptr) _impl_.other_text_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.other_text_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.other_text_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::~TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  delete _impl_.other_text_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.confidence_ != nullptr);
      _impl_.confidence_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.other_text_ != nullptr);
      _impl_.other_text_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.type_)}},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.confidence_)}},
    // .google.protobuf.StringValue other_text = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.other_text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue other_text = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.other_text_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue other_text = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::other_text(this),
        _Internal::other_text(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  return target;
}

::size_t TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
    }

    // .google.protobuf.StringValue other_text = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.other_text_);
    }

  }
  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::_class_data_ = {
    TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_confidence());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_other_text()->::google::protobuf::StringValue::MergeFrom(
          from._internal_other_text());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::CopyFrom(const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::InternalSwap(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.type_)
      + sizeof(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[6]);
}
// ===================================================================

class TrafficSign_SupplementarySignAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_SupplementarySignAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& existence_confidence(const TrafficSign_SupplementarySignAndConfidence* msg);
  static void set_has_existence_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const TrafficSign_SupplementarySignAndConfidence* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence& type_and_confidence(const TrafficSign_SupplementarySignAndConfidence* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence& value_and_confidence(const TrafficSign_SupplementarySignAndConfidence* msg);
  static void set_has_value_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& TrafficSign_SupplementarySignAndConfidence::_Internal::existence_confidence(const TrafficSign_SupplementarySignAndConfidence* msg) {
  return *msg->_impl_.existence_confidence_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& TrafficSign_SupplementarySignAndConfidence::_Internal::detection_status(const TrafficSign_SupplementarySignAndConfidence* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence& TrafficSign_SupplementarySignAndConfidence::_Internal::type_and_confidence(const TrafficSign_SupplementarySignAndConfidence* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence& TrafficSign_SupplementarySignAndConfidence::_Internal::value_and_confidence(const TrafficSign_SupplementarySignAndConfidence* msg) {
  return *msg->_impl_.value_and_confidence_;
}
void TrafficSign_SupplementarySignAndConfidence::clear_existence_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficSign_SupplementarySignAndConfidence::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrafficSign_SupplementarySignAndConfidence::TrafficSign_SupplementarySignAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_SupplementarySignAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficSign_SupplementarySignAndConfidence::TrafficSign_SupplementarySignAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficSign_SupplementarySignAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign_SupplementarySignAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.existence_confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.value_and_confidence_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence>(arena, *from._impl_.value_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign_SupplementarySignAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficSign_SupplementarySignAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, existence_confidence_),
           0,
           offsetof(Impl_, value_and_confidence_) -
               offsetof(Impl_, existence_confidence_) +
               sizeof(Impl_::value_and_confidence_));
}
TrafficSign_SupplementarySignAndConfidence::~TrafficSign_SupplementarySignAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign_SupplementarySignAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.existence_confidence_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  delete _impl_.value_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign_SupplementarySignAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.value_and_confidence_ != nullptr);
      _impl_.value_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign_SupplementarySignAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> TrafficSign_SupplementarySignAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_SupplementarySignAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.value_and_confidence_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;
    {PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.value_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign_SupplementarySignAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence existence_confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::existence_confidence(this),
        _Internal::existence_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::value_and_confidence(this),
        _Internal::value_and_confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  return target;
}

::size_t TrafficSign_SupplementarySignAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.existence_confidence_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_and_confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign_SupplementarySignAndConfidence::_class_data_ = {
    TrafficSign_SupplementarySignAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign_SupplementarySignAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficSign_SupplementarySignAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_SupplementarySignAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficSign_SupplementarySignAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_existence_confidence());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_value_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence::MergeFrom(
          from._internal_value_and_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_SupplementarySignAndConfidence::CopyFrom(const TrafficSign_SupplementarySignAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign_SupplementarySignAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign_SupplementarySignAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign_SupplementarySignAndConfidence::InternalSwap(TrafficSign_SupplementarySignAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.value_and_confidence_)
      + sizeof(TrafficSign_SupplementarySignAndConfidence::_impl_.value_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySignAndConfidence, _impl_.existence_confidence_)>(
          reinterpret_cast<char*>(&_impl_.existence_confidence_),
          reinterpret_cast<char*>(&other->_impl_.existence_confidence_));
}

::google::protobuf::Metadata TrafficSign_SupplementarySignAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[7]);
}
// ===================================================================

class TrafficSign::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const TrafficSign* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::Confidence& existence_confidence(const TrafficSign* msg);
  static void set_has_existence_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const TrafficSign* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& rectangular_box_and_accuracy(const TrafficSign* msg);
  static void set_has_rectangular_box_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence& shape_and_confidence(const TrafficSign* msg);
  static void set_has_shape_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence& type_and_confidence(const TrafficSign* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence& value_and_confidence(const TrafficSign* msg);
  static void set_has_value_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence& permanency_and_confidence(const TrafficSign* msg);
  static void set_has_permanency_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence& validation_and_confidence(const TrafficSign* msg);
  static void set_has_validation_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence& background_color_and_confidence(const TrafficSign* msg);
  static void set_has_background_color_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSign::_Internal::envelope(const TrafficSign* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::Confidence& TrafficSign::_Internal::existence_confidence(const TrafficSign* msg) {
  return *msg->_impl_.existence_confidence_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& TrafficSign::_Internal::detection_status(const TrafficSign* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& TrafficSign::_Internal::rectangular_box_and_accuracy(const TrafficSign* msg) {
  return *msg->_impl_.rectangular_box_and_accuracy_;
}
const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence& TrafficSign::_Internal::shape_and_confidence(const TrafficSign* msg) {
  return *msg->_impl_.shape_and_confidence_;
}
const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence& TrafficSign::_Internal::type_and_confidence(const TrafficSign* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence& TrafficSign::_Internal::value_and_confidence(const TrafficSign* msg) {
  return *msg->_impl_.value_and_confidence_;
}
const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence& TrafficSign::_Internal::permanency_and_confidence(const TrafficSign* msg) {
  return *msg->_impl_.permanency_and_confidence_;
}
const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence& TrafficSign::_Internal::validation_and_confidence(const TrafficSign* msg) {
  return *msg->_impl_.validation_and_confidence_;
}
const ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence& TrafficSign::_Internal::background_color_and_confidence(const TrafficSign* msg) {
  return *msg->_impl_.background_color_and_confidence_;
}
void TrafficSign::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficSign::clear_existence_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.existence_confidence_ != nullptr) _impl_.existence_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TrafficSign::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TrafficSign::clear_rectangular_box_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rectangular_box_and_accuracy_ != nullptr) _impl_.rectangular_box_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
TrafficSign::TrafficSign(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        supplementary_sign_and_confidence_{visibility, arena, from.supplementary_sign_and_confidence_} {}

TrafficSign::TrafficSign(
    ::google::protobuf::Arena* arena,
    const TrafficSign& from)
    : ::google::protobuf::Message(arena) {
  TrafficSign* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.existence_confidence_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.existence_confidence_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.rectangular_box_and_accuracy_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>(arena, *from._impl_.rectangular_box_and_accuracy_)
                : nullptr;
  _impl_.shape_and_confidence_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence>(arena, *from._impl_.shape_and_confidence_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.value_and_confidence_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence>(arena, *from._impl_.value_and_confidence_)
                : nullptr;
  _impl_.permanency_and_confidence_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence>(arena, *from._impl_.permanency_and_confidence_)
                : nullptr;
  _impl_.validation_and_confidence_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence>(arena, *from._impl_.validation_and_confidence_)
                : nullptr;
  _impl_.background_color_and_confidence_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence>(arena, *from._impl_.background_color_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign)
}
inline PROTOBUF_NDEBUG_INLINE TrafficSign::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        supplementary_sign_and_confidence_{visibility, arena} {}

inline void TrafficSign::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, background_color_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::background_color_and_confidence_));
}
TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficSign::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.existence_confidence_;
  delete _impl_.detection_status_;
  delete _impl_.rectangular_box_and_accuracy_;
  delete _impl_.shape_and_confidence_;
  delete _impl_.type_and_confidence_;
  delete _impl_.value_and_confidence_;
  delete _impl_.permanency_and_confidence_;
  delete _impl_.validation_and_confidence_;
  delete _impl_.background_color_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.supplementary_sign_and_confidence_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.existence_confidence_ != nullptr);
      _impl_.existence_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.rectangular_box_and_accuracy_ != nullptr);
      _impl_.rectangular_box_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.shape_and_confidence_ != nullptr);
      _impl_.shape_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.value_and_confidence_ != nullptr);
      _impl_.value_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.permanency_and_confidence_ != nullptr);
      _impl_.permanency_and_confidence_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.validation_and_confidence_ != nullptr);
      _impl_.validation_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.background_color_and_confidence_ != nullptr);
      _impl_.background_color_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficSign::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 11, 0, 2> TrafficSign::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    11,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficSign_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.existence_confidence_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.detection_status_)}},
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.rectangular_box_and_accuracy_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.shape_and_confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.type_and_confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.value_and_confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 7, 7, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.permanency_and_confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 8, 8, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.validation_and_confidence_)}},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 9, 9, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.background_color_and_confidence_)}},
    // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 10, PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.supplementary_sign_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.existence_confidence_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.detection_status_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.rectangular_box_and_accuracy_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.shape_and_confidence_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.value_and_confidence_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.permanency_and_confidence_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.validation_and_confidence_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.background_color_and_confidence_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;
    {PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.supplementary_sign_and_confidence_), -1, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficSign::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::existence_confidence(this),
        _Internal::existence_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::rectangular_box_and_accuracy(this),
        _Internal::rectangular_box_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::shape_and_confidence(this),
        _Internal::shape_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::value_and_confidence(this),
        _Internal::value_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::permanency_and_confidence(this),
        _Internal::permanency_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::validation_and_confidence(this),
        _Internal::validation_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::background_color_and_confidence(this),
        _Internal::background_color_and_confidence(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_supplementary_sign_and_confidence_size()); i < n; i++) {
    const auto& repfield = this->_internal_supplementary_sign_and_confidence().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  return target;
}

::size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;
  total_size += 1UL * this->_internal_supplementary_sign_and_confidence_size();
  for (const auto& msg : this->_internal_supplementary_sign_and_confidence()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.existence_confidence_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rectangular_box_and_accuracy_);
    }

    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.shape_and_confidence_);
    }

    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_and_confidence_);
    }

    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.permanency_and_confidence_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.validation_and_confidence_);
    }

    // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.background_color_and_confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficSign::_class_data_ = {
    TrafficSign::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficSign::GetClassData() const {
  return &_class_data_;
}

void TrafficSign::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign*>(&to_msg);
  auto& from = static_cast<const TrafficSign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_supplementary_sign_and_confidence()->MergeFrom(
      from._internal_supplementary_sign_and_confidence());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
          from._internal_existence_confidence());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rectangular_box_and_accuracy()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::MergeFrom(
          from._internal_rectangular_box_and_accuracy());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_shape_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence::MergeFrom(
          from._internal_shape_and_confidence());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_value_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence::MergeFrom(
          from._internal_value_and_confidence());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_permanency_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence::MergeFrom(
          from._internal_permanency_and_confidence());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_validation_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence::MergeFrom(
          from._internal_validation_and_confidence());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_background_color_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence::MergeFrom(
          from._internal_background_color_and_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficSign::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficSign::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficSign::InternalSwap(TrafficSign* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.supplementary_sign_and_confidence_.InternalSwap(&other->_impl_.supplementary_sign_and_confidence_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.background_color_and_confidence_)
      + sizeof(TrafficSign::_impl_.background_color_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata TrafficSign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[8]);
}
// ===================================================================

class TrafficRegulationCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficRegulationCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficRegulationCategory, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope(const TrafficRegulationCategory* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::CategoryEnvelope& TrafficRegulationCategory::_Internal::envelope(const TrafficRegulationCategory* msg) {
  return *msg->_impl_.envelope_;
}
void TrafficRegulationCategory::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficRegulationCategory::TrafficRegulationCategory(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
}
inline PROTOBUF_NDEBUG_INLINE TrafficRegulationCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        traffic_sign_{visibility, arena, from.traffic_sign_} {}

TrafficRegulationCategory::TrafficRegulationCategory(
    ::google::protobuf::Arena* arena,
    const TrafficRegulationCategory& from)
    : ::google::protobuf::Message(arena) {
  TrafficRegulationCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
}
inline PROTOBUF_NDEBUG_INLINE TrafficRegulationCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        traffic_sign_{visibility, arena} {}

inline void TrafficRegulationCategory::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
TrafficRegulationCategory::~TrafficRegulationCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficRegulationCategory::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficRegulationCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traffic_sign_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficRegulationCategory::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TrafficRegulationCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficRegulationCategory, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficRegulationCategory_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign traffic_sign = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TrafficRegulationCategory, _impl_.traffic_sign_)}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficRegulationCategory, _impl_.envelope_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficRegulationCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign traffic_sign = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficRegulationCategory, _impl_.traffic_sign_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficregulation::TrafficSign>()},
  }}, {{
  }},
};

::uint8_t* TrafficRegulationCategory::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign traffic_sign = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traffic_sign_size()); i < n; i++) {
    const auto& repfield = this->_internal_traffic_sign().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  return target;
}

::size_t TrafficRegulationCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign traffic_sign = 2;
  total_size += 1UL * this->_internal_traffic_sign_size();
  for (const auto& msg : this->_internal_traffic_sign()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficRegulationCategory::_class_data_ = {
    TrafficRegulationCategory::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficRegulationCategory::GetClassData() const {
  return &_class_data_;
}

void TrafficRegulationCategory::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficRegulationCategory*>(&to_msg);
  auto& from = static_cast<const TrafficRegulationCategory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_traffic_sign()->MergeFrom(
      from._internal_traffic_sign());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(
        from._internal_envelope());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficRegulationCategory::CopyFrom(const TrafficRegulationCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficRegulationCategory::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficRegulationCategory::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficRegulationCategory::InternalSwap(TrafficRegulationCategory* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.traffic_sign_.InternalSwap(&other->_impl_.traffic_sign_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata TrafficRegulationCategory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficregulation
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
