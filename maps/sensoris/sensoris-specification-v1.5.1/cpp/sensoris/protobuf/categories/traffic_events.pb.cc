// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_events.proto

#include "sensoris/protobuf/categories/traffic_events.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficevents {

inline constexpr VulnerableRoadUserCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR VulnerableRoadUserCondition_TypeAndConfidence::VulnerableRoadUserCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VulnerableRoadUserCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulnerableRoadUserCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulnerableRoadUserCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    VulnerableRoadUserCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulnerableRoadUserCondition_TypeAndConfidenceDefaultTypeInternal _VulnerableRoadUserCondition_TypeAndConfidence_default_instance_;

inline constexpr TrafficCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    TrafficCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficCondition_TypeAndConfidenceDefaultTypeInternal _TrafficCondition_TypeAndConfidence_default_instance_;

inline constexpr RoadWorks_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadWorks_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadWorks_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadWorks_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadWorks_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadWorks_TypeAndConfidenceDefaultTypeInternal _RoadWorks_TypeAndConfidence_default_instance_;

inline constexpr RoadWeatherCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadWeatherCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal _RoadWeatherCondition_TypeAndConfidence_default_instance_;

inline constexpr RoadSurfaceCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadSurfaceCondition_TypeAndConfidence::RoadSurfaceCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadSurfaceCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadSurfaceCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadSurfaceCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadSurfaceCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadSurfaceCondition_TypeAndConfidenceDefaultTypeInternal _RoadSurfaceCondition_TypeAndConfidence_default_instance_;

inline constexpr RoadObstructionCondition_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RoadObstructionCondition_TypeAndConfidence::RoadObstructionCondition_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadObstructionCondition_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadObstructionCondition_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadObstructionCondition_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    RoadObstructionCondition_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadObstructionCondition_TypeAndConfidenceDefaultTypeInternal _RoadObstructionCondition_TypeAndConfidence_default_instance_;

inline constexpr Hazard_TypeAndConfidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{nullptr},
        type_{static_cast< ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Hazard_TypeAndConfidence::Hazard_TypeAndConfidence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Hazard_TypeAndConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Hazard_TypeAndConfidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Hazard_TypeAndConfidenceDefaultTypeInternal() {}
  union {
    Hazard_TypeAndConfidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Hazard_TypeAndConfidenceDefaultTypeInternal _Hazard_TypeAndConfidence_default_instance_;

inline constexpr VulnerableRoadUserCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR VulnerableRoadUserCondition::VulnerableRoadUserCondition(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VulnerableRoadUserConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulnerableRoadUserConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulnerableRoadUserConditionDefaultTypeInternal() {}
  union {
    VulnerableRoadUserCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulnerableRoadUserConditionDefaultTypeInternal _VulnerableRoadUserCondition_default_instance_;

inline constexpr TrafficCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficCondition::TrafficCondition(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficConditionDefaultTypeInternal() {}
  union {
    TrafficCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficConditionDefaultTypeInternal _TrafficCondition_default_instance_;

inline constexpr RoadWorks::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        lanes_closed_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadWorks::RoadWorks(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadWorksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadWorksDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadWorksDefaultTypeInternal() {}
  union {
    RoadWorks _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadWorksDefaultTypeInternal _RoadWorks_default_instance_;

inline constexpr RoadSurfaceCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadSurfaceCondition::RoadSurfaceCondition(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadSurfaceConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadSurfaceConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadSurfaceConditionDefaultTypeInternal() {}
  union {
    RoadSurfaceCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadSurfaceConditionDefaultTypeInternal _RoadSurfaceCondition_default_instance_;

inline constexpr RoadObstructionCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadObstructionCondition::RoadObstructionCondition(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadObstructionConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadObstructionConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadObstructionConditionDefaultTypeInternal() {}
  union {
    RoadObstructionCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadObstructionConditionDefaultTypeInternal _RoadObstructionCondition_default_instance_;

inline constexpr Hazard::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        direction_{static_cast< ::sensoris::protobuf::categories::trafficevents::Hazard_Direction >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Hazard::Hazard(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HazardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HazardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HazardDefaultTypeInternal() {}
  union {
    Hazard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HazardDefaultTypeInternal _Hazard_default_instance_;

inline constexpr ECallStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        activation_type_{static_cast< ::sensoris::protobuf::categories::trafficevents::ECallStatus_ActivationType >(0)},
        availability_{static_cast< ::sensoris::protobuf::categories::trafficevents::ECallStatus_Availability >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ECallStatus::ECallStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ECallStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ECallStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ECallStatusDefaultTypeInternal() {}
  union {
    ECallStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ECallStatusDefaultTypeInternal _ECallStatus_default_instance_;

inline constexpr RoadWeatherCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        detection_status_{nullptr},
        type_and_confidence_{nullptr},
        depth_and_accuracy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoadWeatherCondition::RoadWeatherCondition(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoadWeatherConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadWeatherConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadWeatherConditionDefaultTypeInternal() {}
  union {
    RoadWeatherCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadWeatherConditionDefaultTypeInternal _RoadWeatherCondition_default_instance_;

inline constexpr DangerousSlowDown::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        envelope_{nullptr},
        speed_reduction_and_accuracy_{nullptr},
        time_period_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DangerousSlowDown::DangerousSlowDown(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DangerousSlowDownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DangerousSlowDownDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DangerousSlowDownDefaultTypeInternal() {}
  union {
    DangerousSlowDown _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DangerousSlowDownDefaultTypeInternal _DangerousSlowDown_default_instance_;

inline constexpr TrafficEventsCategory::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hazard_{},
        dangerous_slow_down_{},
        traffic_condition_{},
        roadworks_{},
        road_weather_condition_{},
        road_surface_condition_{},
        road_obstruction_condition_{},
        vulnerable_road_user_condition_{},
        e_call_status_{},
        envelope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficEventsCategory::TrafficEventsCategory(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficEventsCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficEventsCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficEventsCategoryDefaultTypeInternal() {}
  union {
    TrafficEventsCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficEventsCategoryDefaultTypeInternal _TrafficEventsCategory_default_instance_;
}  // namespace trafficevents
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _impl_.direction_),
    0,
    1,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _impl_.speed_reduction_and_accuracy_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _impl_.time_period_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _impl_.type_and_confidence_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _impl_.lanes_closed_and_confidence_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_.type_and_confidence_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _impl_.depth_and_accuracy_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition, _impl_.type_and_confidence_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition, _impl_.type_and_confidence_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence, _impl_.confidence_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _impl_.detection_status_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition, _impl_.type_and_confidence_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _impl_.activation_type_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::ECallStatus, _impl_.availability_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.envelope_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.hazard_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.dangerous_slow_down_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.traffic_condition_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.roadworks_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.road_weather_condition_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.road_surface_condition_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.road_obstruction_condition_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.vulnerable_road_user_condition_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _impl_.e_call_status_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence)},
        {12, 24, -1, sizeof(::sensoris::protobuf::categories::trafficevents::Hazard)},
        {28, 39, -1, sizeof(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown)},
        {42, 52, -1, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence)},
        {54, 65, -1, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficCondition)},
        {68, 78, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence)},
        {80, 92, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWorks)},
        {96, 106, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence)},
        {108, 120, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition)},
        {124, 134, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence)},
        {136, 147, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition)},
        {150, 160, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence)},
        {162, 173, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition)},
        {176, 186, -1, sizeof(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence)},
        {188, 199, -1, sizeof(::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition)},
        {202, 213, -1, sizeof(::sensoris::protobuf::categories::trafficevents::ECallStatus)},
        {216, 234, -1, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::categories::trafficevents::_Hazard_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_Hazard_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_DangerousSlowDown_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_TrafficCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_TrafficCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadWorks_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadWorks_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadSurfaceCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadSurfaceCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadObstructionCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_RoadObstructionCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_VulnerableRoadUserCondition_TypeAndConfidence_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_VulnerableRoadUserCondition_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_ECallStatus_default_instance_._instance,
    &::sensoris::protobuf::categories::trafficevents::_TrafficEventsCategory_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n1sensoris/protobuf/categories/traffic_e"
    "vents.proto\022*sensoris.protobuf.categorie"
    "s.trafficevents\032\036google/protobuf/wrapper"
    "s.proto\032\"sensoris/protobuf/types/base.pr"
    "oto\032%sensoris/protobuf/types/spatial.pro"
    "to\"\202\010\n\006Hazard\022=\n\010envelope\030\001 \001(\0132+.sensor"
    "is.protobuf.types.base.EventEnvelope\022L\n\020"
    "detection_status\030\002 \001(\01322.sensoris.protob"
    "uf.types.base.EventDetectionStatus\022a\n\023ty"
    "pe_and_confidence\030\003 \001(\0132D.sensoris.proto"
    "buf.categories.trafficevents.Hazard.Type"
    "AndConfidence\022O\n\tdirection\030\004 \001(\0162<.senso"
    "ris.protobuf.categories.trafficevents.Ha"
    "zard.Direction\032\335\004\n\021TypeAndConfidence\022W\n\004"
    "type\030\001 \001(\0162I.sensoris.protobuf.categorie"
    "s.trafficevents.Hazard.TypeAndConfidence"
    ".Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.pro"
    "tobuf.types.base.Confidence\"\260\003\n\004Type\022\020\n\014"
    "UNKNOWN_TYPE\020\000\022\017\n\013OBSTRUCTION\020\001\022\014\n\010ACCID"
    "ENT\020\002\022\027\n\023BROKEN_DOWN_VEHICLE\020\003\022\020\n\014SLOW_V"
    "EHICLE\020\004\022\025\n\021WRONG_WAY_VEHICLE\020\005\022\r\n\tROADW"
    "ORKS\020\006\022\021\n\rSLIPPERY_ROAD\020\007\022\033\n\027PEOPLE_THRO"
    "WING_OBJECTS\020\010\022\023\n\017VEHICLE_ON_FIRE\020\t\022\026\n\022S"
    "TATIONARY_VEHICLE\020\n\022(\n$EXCEPTIONAL_CONDI"
    "TION_LOW_VISIBILITY\020\013\022\'\n#EXCEPTIONAL_CON"
    "DITION_PRECIPITATION\020\014\022\036\n\032EXCEPTIONAL_CO"
    "NDITION_WIND\020\r\022&\n\"EXCEPTIONAL_CONDITION_"
    "ROAD_SURFACE\020\016\022.\n*EXCEPTIONAL_CONDITION_"
    "VULNERABLE_ROAD_USER\020\017\"W\n\tDirection\022\025\n\021U"
    "NKNOWN_DIRECTION\020\000\022\021\n\rEGO_DIRECTION\020\001\022\026\n"
    "\022OPPOSITE_DIRECTION\020\002\022\010\n\004BOTH\020\003\"\355\001\n\021Dang"
    "erousSlowDown\022=\n\010envelope\030\001 \001(\0132+.sensor"
    "is.protobuf.types.base.EventEnvelope\022a\n\034"
    "speed_reduction_and_accuracy\030\002 \001(\01325.sen"
    "soris.protobuf.types.spatial.XyzVectorAn"
    "dAccuracyB\004\210\265\030\001\0226\n\013time_period\030\003 \001(\0132\033.g"
    "oogle.protobuf.Int64ValueB\004\210\265\030\000\"\236\004\n\020Traf"
    "ficCondition\022=\n\010envelope\030\001 \001(\0132+.sensori"
    "s.protobuf.types.base.EventEnvelope\022L\n\020d"
    "etection_status\030\002 \001(\01322.sensoris.protobu"
    "f.types.base.EventDetectionStatus\022k\n\023typ"
    "e_and_confidence\030\003 \001(\0132N.sensoris.protob"
    "uf.categories.trafficevents.TrafficCondi"
    "tion.TypeAndConfidence\032\217\002\n\021TypeAndConfid"
    "ence\022a\n\004type\030\001 \001(\0162S.sensoris.protobuf.c"
    "ategories.trafficevents.TrafficCondition"
    ".TypeAndConfidence.Type\022<\n\nconfidence\030\002 "
    "\001(\0132(.sensoris.protobuf.types.base.Confi"
    "dence\"Y\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\r\n\tFREE_"
    "FLOW\020\001\022\t\n\005HEAVY\020\002\022\010\n\004SLOW\020\003\022\013\n\007QUEUING\020\004"
    "\022\016\n\nSTATIONARY\020\005\"\263\004\n\tRoadWorks\022=\n\010envelo"
    "pe\030\001 \001(\0132+.sensoris.protobuf.types.base."
    "EventEnvelope\022L\n\020detection_status\030\002 \001(\0132"
    "2.sensoris.protobuf.types.base.EventDete"
    "ctionStatus\022d\n\023type_and_confidence\030\003 \001(\013"
    "2G.sensoris.protobuf.categories.traffice"
    "vents.RoadWorks.TypeAndConfidence\022U\n\033lan"
    "es_closed_and_confidence\030\005 \001(\01320.sensori"
    "s.protobuf.types.base.CountAndConfidence"
    "\032\333\001\n\021TypeAndConfidence\022Z\n\004type\030\001 \001(\0162L.s"
    "ensoris.protobuf.categories.trafficevent"
    "s.RoadWorks.TypeAndConfidence.Type\022<\n\nco"
    "nfidence\030\002 \001(\0132(.sensoris.protobuf.types"
    ".base.Confidence\",\n\004Type\022\020\n\014UNKNOWN_TYPE"
    "\020\000\022\t\n\005START\020\001\022\007\n\003END\020\002\"\234\005\n\024RoadWeatherCo"
    "ndition\022=\n\010envelope\030\001 \001(\0132+.sensoris.pro"
    "tobuf.types.base.EventEnvelope\022L\n\020detect"
    "ion_status\030\002 \001(\01322.sensoris.protobuf.typ"
    "es.base.EventDetectionStatus\022o\n\023type_and"
    "_confidence\030\003 \001(\0132R.sensoris.protobuf.ca"
    "tegories.trafficevents.RoadWeatherCondit"
    "ion.TypeAndConfidence\022U\n\022depth_and_accur"
    "acy\030\004 \001(\01323.sensoris.protobuf.types.base"
    ".Int64ValueAndAccuracyB\004\210\265\030\000\032\256\002\n\021TypeAnd"
    "Confidence\022e\n\004type\030\001 \001(\0162W.sensoris.prot"
    "obuf.categories.trafficevents.RoadWeathe"
    "rCondition.TypeAndConfidence.Type\022<\n\ncon"
    "fidence\030\002 \001(\0132(.sensoris.protobuf.types."
    "base.Confidence\"t\n\004Type\022\020\n\014UNKNOWN_TYPE\020"
    "\000\022\010\n\004SNOW\020\001\022\007\n\003ICE\020\002\022\021\n\rFREEZING_RAIN\020\003\022"
    "\t\n\005FROST\020\004\022\020\n\014HYDROPLANING\020\005\022\014\n\010FLOODING"
    "\020\006\022\t\n\005WATER\020\007\"\224\004\n\024RoadSurfaceCondition\022="
    "\n\010envelope\030\001 \001(\0132+.sensoris.protobuf.typ"
    "es.base.EventEnvelope\022L\n\020detection_statu"
    "s\030\002 \001(\01322.sensoris.protobuf.types.base.E"
    "ventDetectionStatus\022o\n\023type_and_confiden"
    "ce\030\003 \001(\0132R.sensoris.protobuf.categories."
    "trafficevents.RoadSurfaceCondition.TypeA"
    "ndConfidence\032\375\001\n\021TypeAndConfidence\022e\n\004ty"
    "pe\030\001 \001(\0162W.sensoris.protobuf.categories."
    "trafficevents.RoadSurfaceCondition.TypeA"
    "ndConfidence.Type\022<\n\nconfidence\030\002 \001(\0132(."
    "sensoris.protobuf.types.base.Confidence\""
    "C\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\007\n\003MUD\020\001\022\r\n\tCH"
    "IPPINGS\020\002\022\007\n\003OIL\020\003\022\010\n\004FUEL\020\004\"\353\004\n\030RoadObs"
    "tructionCondition\022=\n\010envelope\030\001 \001(\0132+.se"
    "nsoris.protobuf.types.base.EventEnvelope"
    "\022L\n\020detection_status\030\002 \001(\01322.sensoris.pr"
    "otobuf.types.base.EventDetectionStatus\022s"
    "\n\023type_and_confidence\030\003 \001(\0132V.sensoris.p"
    "rotobuf.categories.trafficevents.RoadObs"
    "tructionCondition.TypeAndConfidence\032\314\002\n\021"
    "TypeAndConfidence\022i\n\004type\030\001 \001(\0162[.sensor"
    "is.protobuf.categories.trafficevents.Roa"
    "dObstructionCondition.TypeAndConfidence."
    "Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.prot"
    "obuf.types.base.Confidence\"\215\001\n\004Type\022\020\n\014U"
    "NKNOWN_TYPE\020\000\022\010\n\004TREE\020\001\022\r\n\tAVALANCHE\020\002\022\r"
    "\n\tROCKFALLS\020\003\022\r\n\tSHED_LOAD\020\004\022\r\n\tLAND_SLI"
    "P\020\005\022\n\n\006ANIMAL\020\006\022\020\n\014ANIMAL_LARGE\020\007\022\017\n\013ANI"
    "MAL_HERD\020\010\"\245\004\n\033VulnerableRoadUserConditi"
    "on\022=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf"
    ".types.base.EventEnvelope\022L\n\020detection_s"
    "tatus\030\002 \001(\01322.sensoris.protobuf.types.ba"
    "se.EventDetectionStatus\022v\n\023type_and_conf"
    "idence\030\003 \001(\0132Y.sensoris.protobuf.categor"
    "ies.trafficevents.VulnerableRoadUserCond"
    "ition.TypeAndConfidence\032\200\002\n\021TypeAndConfi"
    "dence\022l\n\004type\030\001 \001(\0162^.sensoris.protobuf."
    "categories.trafficevents.VulnerableRoadU"
    "serCondition.TypeAndConfidence.Type\022<\n\nc"
    "onfidence\030\002 \001(\0132(.sensoris.protobuf.type"
    "s.base.Confidence\"\?\n\004Type\022\020\n\014UNKNOWN_TYP"
    "E\020\000\022\n\n\006PEOPLE\020\001\022\014\n\010CHILDREN\020\002\022\013\n\007CYCLIST"
    "\020\003\"\247\003\n\013ECallStatus\022=\n\010envelope\030\001 \001(\0132+.s"
    "ensoris.protobuf.types.base.EventEnvelop"
    "e\022_\n\017activation_type\030\002 \001(\0162F.sensoris.pr"
    "otobuf.categories.trafficevents.ECallSta"
    "tus.ActivationType\022Z\n\014availability\030\003 \001(\016"
    "2D.sensoris.protobuf.categories.traffice"
    "vents.ECallStatus.Availability\"R\n\016Activa"
    "tionType\022\033\n\027UNKNOWN_ACTIVATION_TYPE\020\000\022\010\n"
    "\004NONE\020\001\022\n\n\006MANUAL\020\002\022\r\n\tAUTOMATIC\020\003\"H\n\014Av"
    "ailability\022\030\n\024UNKNOWN_AVAILABILITY\020\000\022\r\n\t"
    "AVAILABLE\020\001\022\017\n\013UNAVAILABLE\020\002\"\213\007\n\025Traffic"
    "EventsCategory\022@\n\010envelope\030\001 \001(\0132..senso"
    "ris.protobuf.types.base.CategoryEnvelope"
    "\022B\n\006hazard\030\002 \003(\01322.sensoris.protobuf.cat"
    "egories.trafficevents.Hazard\022Z\n\023dangerou"
    "s_slow_down\030\003 \003(\0132=.sensoris.protobuf.ca"
    "tegories.trafficevents.DangerousSlowDown"
    "\022W\n\021traffic_condition\030\004 \003(\0132<.sensoris.p"
    "rotobuf.categories.trafficevents.Traffic"
    "Condition\022H\n\troadworks\030\005 \003(\01325.sensoris."
    "protobuf.categories.trafficevents.RoadWo"
    "rks\022`\n\026road_weather_condition\030\006 \003(\0132@.se"
    "nsoris.protobuf.categories.trafficevents"
    ".RoadWeatherCondition\022`\n\026road_surface_co"
    "ndition\030\007 \003(\0132@.sensoris.protobuf.catego"
    "ries.trafficevents.RoadSurfaceCondition\022"
    "h\n\032road_obstruction_condition\030\010 \003(\0132D.se"
    "nsoris.protobuf.categories.trafficevents"
    ".RoadObstructionCondition\022o\n\036vulnerable_"
    "road_user_condition\030\t \003(\0132G.sensoris.pro"
    "tobuf.categories.trafficevents.Vulnerabl"
    "eRoadUserCondition\022N\n\re_call_status\030\n \003("
    "\01327.sensoris.protobuf.categories.traffic"
    "events.ECallStatusB\200\001\n%org.sensoris.cate"
    "gories.trafficeventsB\035SensorisTrafficEve"
    "ntsCategoryP\001Z3sensoris.org/specificatio"
    "n/categories/trafficevents\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto = {
    false,
    false,
    6437,
    descriptor_table_protodef_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
    "sensoris/protobuf/categories/traffic_events.proto",
    &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_deps,
    3,
    17,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficevents {
const ::google::protobuf::EnumDescriptor* Hazard_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Hazard_TypeAndConfidence_Type_internal_data_[] = {
    1048576u, 0u, };
bool Hazard_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 15;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::UNKNOWN_TYPE;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::OBSTRUCTION;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::ACCIDENT;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::BROKEN_DOWN_VEHICLE;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::SLOW_VEHICLE;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::WRONG_WAY_VEHICLE;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::ROADWORKS;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::SLIPPERY_ROAD;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::PEOPLE_THROWING_OBJECTS;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::VEHICLE_ON_FIRE;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::STATIONARY_VEHICLE;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::EXCEPTIONAL_CONDITION_LOW_VISIBILITY;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::EXCEPTIONAL_CONDITION_PRECIPITATION;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::EXCEPTIONAL_CONDITION_WIND;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::EXCEPTIONAL_CONDITION_ROAD_SURFACE;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::EXCEPTIONAL_CONDITION_VULNERABLE_ROAD_USER;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::Type_MIN;
constexpr Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::Type_MAX;
constexpr int Hazard_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Hazard_Direction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Hazard_Direction_internal_data_[] = {
    262144u, 0u, };
bool Hazard_Direction_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Hazard_Direction Hazard::UNKNOWN_DIRECTION;
constexpr Hazard_Direction Hazard::EGO_DIRECTION;
constexpr Hazard_Direction Hazard::OPPOSITE_DIRECTION;
constexpr Hazard_Direction Hazard::BOTH;
constexpr Hazard_Direction Hazard::Direction_MIN;
constexpr Hazard_Direction Hazard::Direction_MAX;
constexpr int Hazard::Direction_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TrafficCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t TrafficCondition_TypeAndConfidence_Type_internal_data_[] = {
    393216u, 0u, };
bool TrafficCondition_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::UNKNOWN_TYPE;
constexpr TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::FREE_FLOW;
constexpr TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::HEAVY;
constexpr TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::SLOW;
constexpr TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::QUEUING;
constexpr TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::STATIONARY;
constexpr TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::Type_MIN;
constexpr TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::Type_MAX;
constexpr int TrafficCondition_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RoadWorks_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t RoadWorks_TypeAndConfidence_Type_internal_data_[] = {
    196608u, 0u, };
bool RoadWorks_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::UNKNOWN_TYPE;
constexpr RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::START;
constexpr RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::END;
constexpr RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::Type_MIN;
constexpr RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::Type_MAX;
constexpr int RoadWorks_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RoadWeatherCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t RoadWeatherCondition_TypeAndConfidence_Type_internal_data_[] = {
    524288u, 0u, };
bool RoadWeatherCondition_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 7;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::UNKNOWN_TYPE;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::SNOW;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::ICE;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::FREEZING_RAIN;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::FROST;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::HYDROPLANING;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::FLOODING;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::WATER;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::Type_MIN;
constexpr RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::Type_MAX;
constexpr int RoadWeatherCondition_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RoadSurfaceCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t RoadSurfaceCondition_TypeAndConfidence_Type_internal_data_[] = {
    327680u, 0u, };
bool RoadSurfaceCondition_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RoadSurfaceCondition_TypeAndConfidence_Type RoadSurfaceCondition_TypeAndConfidence::UNKNOWN_TYPE;
constexpr RoadSurfaceCondition_TypeAndConfidence_Type RoadSurfaceCondition_TypeAndConfidence::MUD;
constexpr RoadSurfaceCondition_TypeAndConfidence_Type RoadSurfaceCondition_TypeAndConfidence::CHIPPINGS;
constexpr RoadSurfaceCondition_TypeAndConfidence_Type RoadSurfaceCondition_TypeAndConfidence::OIL;
constexpr RoadSurfaceCondition_TypeAndConfidence_Type RoadSurfaceCondition_TypeAndConfidence::FUEL;
constexpr RoadSurfaceCondition_TypeAndConfidence_Type RoadSurfaceCondition_TypeAndConfidence::Type_MIN;
constexpr RoadSurfaceCondition_TypeAndConfidence_Type RoadSurfaceCondition_TypeAndConfidence::Type_MAX;
constexpr int RoadSurfaceCondition_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RoadObstructionCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t RoadObstructionCondition_TypeAndConfidence_Type_internal_data_[] = {
    589824u, 0u, };
bool RoadObstructionCondition_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 8;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::UNKNOWN_TYPE;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::TREE;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::AVALANCHE;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::ROCKFALLS;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::SHED_LOAD;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::LAND_SLIP;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::ANIMAL;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::ANIMAL_LARGE;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::ANIMAL_HERD;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::Type_MIN;
constexpr RoadObstructionCondition_TypeAndConfidence_Type RoadObstructionCondition_TypeAndConfidence::Type_MAX;
constexpr int RoadObstructionCondition_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* VulnerableRoadUserCondition_TypeAndConfidence_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t VulnerableRoadUserCondition_TypeAndConfidence_Type_internal_data_[] = {
    262144u, 0u, };
bool VulnerableRoadUserCondition_TypeAndConfidence_Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VulnerableRoadUserCondition_TypeAndConfidence_Type VulnerableRoadUserCondition_TypeAndConfidence::UNKNOWN_TYPE;
constexpr VulnerableRoadUserCondition_TypeAndConfidence_Type VulnerableRoadUserCondition_TypeAndConfidence::PEOPLE;
constexpr VulnerableRoadUserCondition_TypeAndConfidence_Type VulnerableRoadUserCondition_TypeAndConfidence::CHILDREN;
constexpr VulnerableRoadUserCondition_TypeAndConfidence_Type VulnerableRoadUserCondition_TypeAndConfidence::CYCLIST;
constexpr VulnerableRoadUserCondition_TypeAndConfidence_Type VulnerableRoadUserCondition_TypeAndConfidence::Type_MIN;
constexpr VulnerableRoadUserCondition_TypeAndConfidence_Type VulnerableRoadUserCondition_TypeAndConfidence::Type_MAX;
constexpr int VulnerableRoadUserCondition_TypeAndConfidence::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ECallStatus_ActivationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t ECallStatus_ActivationType_internal_data_[] = {
    262144u, 0u, };
bool ECallStatus_ActivationType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ECallStatus_ActivationType ECallStatus::UNKNOWN_ACTIVATION_TYPE;
constexpr ECallStatus_ActivationType ECallStatus::NONE;
constexpr ECallStatus_ActivationType ECallStatus::MANUAL;
constexpr ECallStatus_ActivationType ECallStatus::AUTOMATIC;
constexpr ECallStatus_ActivationType ECallStatus::ActivationType_MIN;
constexpr ECallStatus_ActivationType ECallStatus::ActivationType_MAX;
constexpr int ECallStatus::ActivationType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ECallStatus_Availability_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t ECallStatus_Availability_internal_data_[] = {
    196608u, 0u, };
bool ECallStatus_Availability_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ECallStatus_Availability ECallStatus::UNKNOWN_AVAILABILITY;
constexpr ECallStatus_Availability ECallStatus::AVAILABLE;
constexpr ECallStatus_Availability ECallStatus::UNAVAILABLE;
constexpr ECallStatus_Availability ECallStatus::Availability_MIN;
constexpr ECallStatus_Availability ECallStatus::Availability_MAX;
constexpr int ECallStatus::Availability_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Hazard_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<Hazard_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const Hazard_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& Hazard_TypeAndConfidence::_Internal::confidence(const Hazard_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void Hazard_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Hazard_TypeAndConfidence::Hazard_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE Hazard_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Hazard_TypeAndConfidence::Hazard_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const Hazard_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  Hazard_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE Hazard_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Hazard_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
Hazard_TypeAndConfidence::~Hazard_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Hazard_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Hazard_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Hazard_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Hazard_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Hazard_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Hazard_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* Hazard_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  return target;
}

::size_t Hazard_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Hazard_TypeAndConfidence::_class_data_ = {
    Hazard_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Hazard_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void Hazard_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Hazard_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const Hazard_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Hazard_TypeAndConfidence::CopyFrom(const Hazard_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Hazard_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Hazard_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Hazard_TypeAndConfidence::InternalSwap(Hazard_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.type_)
      + sizeof(Hazard_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Hazard_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata Hazard_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[0]);
}
// ===================================================================

class Hazard::_Internal {
 public:
  using HasBits = decltype(std::declval<Hazard>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Hazard, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const Hazard* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const Hazard* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence& type_and_confidence(const Hazard* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& Hazard::_Internal::envelope(const Hazard* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& Hazard::_Internal::detection_status(const Hazard* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence& Hazard::_Internal::type_and_confidence(const Hazard* msg) {
  return *msg->_impl_.type_and_confidence_;
}
void Hazard::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Hazard::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Hazard::Hazard(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.Hazard)
}
inline PROTOBUF_NDEBUG_INLINE Hazard::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Hazard::Hazard(
    ::google::protobuf::Arena* arena,
    const Hazard& from)
    : ::google::protobuf::Message(arena) {
  Hazard* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.direction_ = from._impl_.direction_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.Hazard)
}
inline PROTOBUF_NDEBUG_INLINE Hazard::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Hazard::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, direction_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::direction_));
}
Hazard::~Hazard() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.Hazard)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Hazard::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Hazard::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.Hazard)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_.direction_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Hazard::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> Hazard::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Hazard, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Hazard_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Hazard, _impl_.direction_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Hazard, _impl_.direction_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Hazard, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Hazard, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Hazard, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(Hazard, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(Hazard, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(Hazard, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
    {PROTOBUF_FIELD_OFFSET(Hazard, _impl_.direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* Hazard::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.Hazard)
  return target;
}

::size_t Hazard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

  }
  // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Hazard::_class_data_ = {
    Hazard::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Hazard::GetClassData() const {
  return &_class_data_;
}

void Hazard::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Hazard*>(&to_msg);
  auto& from = static_cast<const Hazard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Hazard::CopyFrom(const Hazard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.Hazard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Hazard::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Hazard::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Hazard::InternalSwap(Hazard* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hazard, _impl_.direction_)
      + sizeof(Hazard::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(Hazard, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata Hazard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[1]);
}
// ===================================================================

class DangerousSlowDown::_Internal {
 public:
  using HasBits = decltype(std::declval<DangerousSlowDown>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const DangerousSlowDown* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& speed_reduction_and_accuracy(const DangerousSlowDown* msg);
  static void set_has_speed_reduction_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Int64Value& time_period(const DangerousSlowDown* msg);
  static void set_has_time_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& DangerousSlowDown::_Internal::envelope(const DangerousSlowDown* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& DangerousSlowDown::_Internal::speed_reduction_and_accuracy(const DangerousSlowDown* msg) {
  return *msg->_impl_.speed_reduction_and_accuracy_;
}
const ::google::protobuf::Int64Value& DangerousSlowDown::_Internal::time_period(const DangerousSlowDown* msg) {
  return *msg->_impl_.time_period_;
}
void DangerousSlowDown::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DangerousSlowDown::clear_speed_reduction_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.speed_reduction_and_accuracy_ != nullptr) _impl_.speed_reduction_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DangerousSlowDown::clear_time_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_period_ != nullptr) _impl_.time_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DangerousSlowDown::DangerousSlowDown(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
}
inline PROTOBUF_NDEBUG_INLINE DangerousSlowDown::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DangerousSlowDown::DangerousSlowDown(
    ::google::protobuf::Arena* arena,
    const DangerousSlowDown& from)
    : ::google::protobuf::Message(arena) {
  DangerousSlowDown* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.speed_reduction_and_accuracy_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy>(arena, *from._impl_.speed_reduction_and_accuracy_)
                : nullptr;
  _impl_.time_period_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Int64Value>(arena, *from._impl_.time_period_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
}
inline PROTOBUF_NDEBUG_INLINE DangerousSlowDown::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DangerousSlowDown::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, time_period_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::time_period_));
}
DangerousSlowDown::~DangerousSlowDown() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DangerousSlowDown::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.speed_reduction_and_accuracy_;
  delete _impl_.time_period_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DangerousSlowDown::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.speed_reduction_and_accuracy_ != nullptr);
      _impl_.speed_reduction_and_accuracy_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.time_period_ != nullptr);
      _impl_.time_period_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DangerousSlowDown::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> DangerousSlowDown::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DangerousSlowDown_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.envelope_)}},
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.speed_reduction_and_accuracy_)}},
    // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.time_period_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
    {PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.speed_reduction_and_accuracy_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.time_period_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Int64Value>()},
  }}, {{
  }},
};

::uint8_t* DangerousSlowDown::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::speed_reduction_and_accuracy(this),
        _Internal::speed_reduction_and_accuracy(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::time_period(this),
        _Internal::time_period(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  return target;
}

::size_t DangerousSlowDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_reduction_and_accuracy_);
    }

    // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_period_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DangerousSlowDown::_class_data_ = {
    DangerousSlowDown::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DangerousSlowDown::GetClassData() const {
  return &_class_data_;
}

void DangerousSlowDown::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DangerousSlowDown*>(&to_msg);
  auto& from = static_cast<const DangerousSlowDown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_speed_reduction_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(
          from._internal_speed_reduction_and_accuracy());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_time_period()->::google::protobuf::Int64Value::MergeFrom(
          from._internal_time_period());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DangerousSlowDown::CopyFrom(const DangerousSlowDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DangerousSlowDown::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DangerousSlowDown::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DangerousSlowDown::InternalSwap(DangerousSlowDown* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.time_period_)
      + sizeof(DangerousSlowDown::_impl_.time_period_)
      - PROTOBUF_FIELD_OFFSET(DangerousSlowDown, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata DangerousSlowDown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[2]);
}
// ===================================================================

class TrafficCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const TrafficCondition_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& TrafficCondition_TypeAndConfidence::_Internal::confidence(const TrafficCondition_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void TrafficCondition_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const TrafficCondition_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  TrafficCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE TrafficCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
TrafficCondition_TypeAndConfidence::~TrafficCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficCondition_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficCondition_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TrafficCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficCondition_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficCondition_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  return target;
}

::size_t TrafficCondition_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficCondition_TypeAndConfidence::_class_data_ = {
    TrafficCondition_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficCondition_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void TrafficCondition_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const TrafficCondition_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficCondition_TypeAndConfidence::CopyFrom(const TrafficCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficCondition_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficCondition_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficCondition_TypeAndConfidence::InternalSwap(TrafficCondition_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(TrafficCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrafficCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TrafficCondition_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[3]);
}
// ===================================================================

class TrafficCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const TrafficCondition* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const TrafficCondition* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence& type_and_confidence(const TrafficCondition* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& TrafficCondition::_Internal::envelope(const TrafficCondition* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& TrafficCondition::_Internal::detection_status(const TrafficCondition* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence& TrafficCondition::_Internal::type_and_confidence(const TrafficCondition* msg) {
  return *msg->_impl_.type_and_confidence_;
}
void TrafficCondition::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficCondition::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrafficCondition::TrafficCondition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
}
inline PROTOBUF_NDEBUG_INLINE TrafficCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrafficCondition::TrafficCondition(
    ::google::protobuf::Arena* arena,
    const TrafficCondition& from)
    : ::google::protobuf::Message(arena) {
  TrafficCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
}
inline PROTOBUF_NDEBUG_INLINE TrafficCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
TrafficCondition::~TrafficCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficCondition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> TrafficCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficCondition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* TrafficCondition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  return target;
}

::size_t TrafficCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficCondition::_class_data_ = {
    TrafficCondition::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficCondition::GetClassData() const {
  return &_class_data_;
}

void TrafficCondition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficCondition*>(&to_msg);
  auto& from = static_cast<const TrafficCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficCondition::CopyFrom(const TrafficCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficCondition::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficCondition::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficCondition::InternalSwap(TrafficCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.type_and_confidence_)
      + sizeof(TrafficCondition::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(TrafficCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata TrafficCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[4]);
}
// ===================================================================

class RoadWorks_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadWorks_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const RoadWorks_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& RoadWorks_TypeAndConfidence::_Internal::confidence(const RoadWorks_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void RoadWorks_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadWorks_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const RoadWorks_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  RoadWorks_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadWorks_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadWorks_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadWorks_TypeAndConfidence::~RoadWorks_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadWorks_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadWorks_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadWorks_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> RoadWorks_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadWorks_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadWorks_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* RoadWorks_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  return target;
}

::size_t RoadWorks_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadWorks_TypeAndConfidence::_class_data_ = {
    RoadWorks_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadWorks_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void RoadWorks_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadWorks_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadWorks_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadWorks_TypeAndConfidence::CopyFrom(const RoadWorks_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadWorks_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadWorks_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadWorks_TypeAndConfidence::InternalSwap(RoadWorks_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadWorks_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadWorks_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadWorks_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[5]);
}
// ===================================================================

class RoadWorks::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadWorks>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const RoadWorks* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const RoadWorks* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence& type_and_confidence(const RoadWorks* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::types::base::CountAndConfidence& lanes_closed_and_confidence(const RoadWorks* msg);
  static void set_has_lanes_closed_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& RoadWorks::_Internal::envelope(const RoadWorks* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& RoadWorks::_Internal::detection_status(const RoadWorks* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence& RoadWorks::_Internal::type_and_confidence(const RoadWorks* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::sensoris::protobuf::types::base::CountAndConfidence& RoadWorks::_Internal::lanes_closed_and_confidence(const RoadWorks* msg) {
  return *msg->_impl_.lanes_closed_and_confidence_;
}
void RoadWorks::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadWorks::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadWorks::clear_lanes_closed_and_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lanes_closed_and_confidence_ != nullptr) _impl_.lanes_closed_and_confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RoadWorks::RoadWorks(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
}
inline PROTOBUF_NDEBUG_INLINE RoadWorks::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadWorks::RoadWorks(
    ::google::protobuf::Arena* arena,
    const RoadWorks& from)
    : ::google::protobuf::Message(arena) {
  RoadWorks* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.lanes_closed_and_confidence_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::CountAndConfidence>(arena, *from._impl_.lanes_closed_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
}
inline PROTOBUF_NDEBUG_INLINE RoadWorks::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadWorks::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, lanes_closed_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::lanes_closed_and_confidence_));
}
RoadWorks::~RoadWorks() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadWorks::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  delete _impl_.lanes_closed_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadWorks::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.lanes_closed_and_confidence_ != nullptr);
      _impl_.lanes_closed_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadWorks::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 4, 0, 2> RoadWorks::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadWorks_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.type_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 3, PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.lanes_closed_and_confidence_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
    {PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.lanes_closed_and_confidence_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CountAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* RoadWorks::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::lanes_closed_and_confidence(this),
        _Internal::lanes_closed_and_confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWorks)
  return target;
}

::size_t RoadWorks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

    // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lanes_closed_and_confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadWorks::_class_data_ = {
    RoadWorks::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadWorks::GetClassData() const {
  return &_class_data_;
}

void RoadWorks::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadWorks*>(&to_msg);
  auto& from = static_cast<const RoadWorks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_lanes_closed_and_confidence()->::sensoris::protobuf::types::base::CountAndConfidence::MergeFrom(
          from._internal_lanes_closed_and_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadWorks::CopyFrom(const RoadWorks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadWorks::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadWorks::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadWorks::InternalSwap(RoadWorks* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.lanes_closed_and_confidence_)
      + sizeof(RoadWorks::_impl_.lanes_closed_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(RoadWorks, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadWorks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[6]);
}
// ===================================================================

class RoadWeatherCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadWeatherCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const RoadWeatherCondition_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& RoadWeatherCondition_TypeAndConfidence::_Internal::confidence(const RoadWeatherCondition_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void RoadWeatherCondition_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadWeatherCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const RoadWeatherCondition_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  RoadWeatherCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadWeatherCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadWeatherCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadWeatherCondition_TypeAndConfidence::~RoadWeatherCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadWeatherCondition_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadWeatherCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadWeatherCondition_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> RoadWeatherCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadWeatherCondition_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadWeatherCondition_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* RoadWeatherCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  return target;
}

::size_t RoadWeatherCondition_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadWeatherCondition_TypeAndConfidence::_class_data_ = {
    RoadWeatherCondition_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadWeatherCondition_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void RoadWeatherCondition_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadWeatherCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadWeatherCondition_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadWeatherCondition_TypeAndConfidence::CopyFrom(const RoadWeatherCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadWeatherCondition_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadWeatherCondition_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadWeatherCondition_TypeAndConfidence::InternalSwap(RoadWeatherCondition_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadWeatherCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadWeatherCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadWeatherCondition_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[7]);
}
// ===================================================================

class RoadWeatherCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadWeatherCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const RoadWeatherCondition* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const RoadWeatherCondition* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence& type_and_confidence(const RoadWeatherCondition* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& depth_and_accuracy(const RoadWeatherCondition* msg);
  static void set_has_depth_and_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& RoadWeatherCondition::_Internal::envelope(const RoadWeatherCondition* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& RoadWeatherCondition::_Internal::detection_status(const RoadWeatherCondition* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence& RoadWeatherCondition::_Internal::type_and_confidence(const RoadWeatherCondition* msg) {
  return *msg->_impl_.type_and_confidence_;
}
const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& RoadWeatherCondition::_Internal::depth_and_accuracy(const RoadWeatherCondition* msg) {
  return *msg->_impl_.depth_and_accuracy_;
}
void RoadWeatherCondition::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadWeatherCondition::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadWeatherCondition::clear_depth_and_accuracy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.depth_and_accuracy_ != nullptr) _impl_.depth_and_accuracy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RoadWeatherCondition::RoadWeatherCondition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
}
inline PROTOBUF_NDEBUG_INLINE RoadWeatherCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadWeatherCondition::RoadWeatherCondition(
    ::google::protobuf::Arena* arena,
    const RoadWeatherCondition& from)
    : ::google::protobuf::Message(arena) {
  RoadWeatherCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;
  _impl_.depth_and_accuracy_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(arena, *from._impl_.depth_and_accuracy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
}
inline PROTOBUF_NDEBUG_INLINE RoadWeatherCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadWeatherCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, depth_and_accuracy_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::depth_and_accuracy_));
}
RoadWeatherCondition::~RoadWeatherCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadWeatherCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  delete _impl_.depth_and_accuracy_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadWeatherCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.depth_and_accuracy_ != nullptr);
      _impl_.depth_and_accuracy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadWeatherCondition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> RoadWeatherCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadWeatherCondition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.depth_and_accuracy_)}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    {PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.depth_and_accuracy_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>()},
  }}, {{
  }},
};

::uint8_t* RoadWeatherCondition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::depth_and_accuracy(this),
        _Internal::depth_and_accuracy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  return target;
}

::size_t RoadWeatherCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.depth_and_accuracy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadWeatherCondition::_class_data_ = {
    RoadWeatherCondition::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadWeatherCondition::GetClassData() const {
  return &_class_data_;
}

void RoadWeatherCondition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadWeatherCondition*>(&to_msg);
  auto& from = static_cast<const RoadWeatherCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_depth_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(
          from._internal_depth_and_accuracy());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadWeatherCondition::CopyFrom(const RoadWeatherCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadWeatherCondition::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadWeatherCondition::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadWeatherCondition::InternalSwap(RoadWeatherCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.depth_and_accuracy_)
      + sizeof(RoadWeatherCondition::_impl_.depth_and_accuracy_)
      - PROTOBUF_FIELD_OFFSET(RoadWeatherCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadWeatherCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[8]);
}
// ===================================================================

class RoadSurfaceCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSurfaceCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const RoadSurfaceCondition_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& RoadSurfaceCondition_TypeAndConfidence::_Internal::confidence(const RoadSurfaceCondition_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void RoadSurfaceCondition_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadSurfaceCondition_TypeAndConfidence::RoadSurfaceCondition_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadSurfaceCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadSurfaceCondition_TypeAndConfidence::RoadSurfaceCondition_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const RoadSurfaceCondition_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  RoadSurfaceCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadSurfaceCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadSurfaceCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadSurfaceCondition_TypeAndConfidence::~RoadSurfaceCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadSurfaceCondition_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadSurfaceCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadSurfaceCondition_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> RoadSurfaceCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadSurfaceCondition_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadSurfaceCondition_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* RoadSurfaceCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  return target;
}

::size_t RoadSurfaceCondition_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadSurfaceCondition_TypeAndConfidence::_class_data_ = {
    RoadSurfaceCondition_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadSurfaceCondition_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void RoadSurfaceCondition_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadSurfaceCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadSurfaceCondition_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSurfaceCondition_TypeAndConfidence::CopyFrom(const RoadSurfaceCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadSurfaceCondition_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadSurfaceCondition_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadSurfaceCondition_TypeAndConfidence::InternalSwap(RoadSurfaceCondition_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadSurfaceCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadSurfaceCondition_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[9]);
}
// ===================================================================

class RoadSurfaceCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSurfaceCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const RoadSurfaceCondition* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const RoadSurfaceCondition* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence& type_and_confidence(const RoadSurfaceCondition* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& RoadSurfaceCondition::_Internal::envelope(const RoadSurfaceCondition* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& RoadSurfaceCondition::_Internal::detection_status(const RoadSurfaceCondition* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence& RoadSurfaceCondition::_Internal::type_and_confidence(const RoadSurfaceCondition* msg) {
  return *msg->_impl_.type_and_confidence_;
}
void RoadSurfaceCondition::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadSurfaceCondition::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RoadSurfaceCondition::RoadSurfaceCondition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
}
inline PROTOBUF_NDEBUG_INLINE RoadSurfaceCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadSurfaceCondition::RoadSurfaceCondition(
    ::google::protobuf::Arena* arena,
    const RoadSurfaceCondition& from)
    : ::google::protobuf::Message(arena) {
  RoadSurfaceCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
}
inline PROTOBUF_NDEBUG_INLINE RoadSurfaceCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadSurfaceCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
RoadSurfaceCondition::~RoadSurfaceCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadSurfaceCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadSurfaceCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadSurfaceCondition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> RoadSurfaceCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadSurfaceCondition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* RoadSurfaceCondition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  return target;
}

::size_t RoadSurfaceCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadSurfaceCondition::_class_data_ = {
    RoadSurfaceCondition::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadSurfaceCondition::GetClassData() const {
  return &_class_data_;
}

void RoadSurfaceCondition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadSurfaceCondition*>(&to_msg);
  auto& from = static_cast<const RoadSurfaceCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSurfaceCondition::CopyFrom(const RoadSurfaceCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadSurfaceCondition::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadSurfaceCondition::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadSurfaceCondition::InternalSwap(RoadSurfaceCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.type_and_confidence_)
      + sizeof(RoadSurfaceCondition::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(RoadSurfaceCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadSurfaceCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[10]);
}
// ===================================================================

class RoadObstructionCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadObstructionCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const RoadObstructionCondition_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& RoadObstructionCondition_TypeAndConfidence::_Internal::confidence(const RoadObstructionCondition_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void RoadObstructionCondition_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadObstructionCondition_TypeAndConfidence::RoadObstructionCondition_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadObstructionCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadObstructionCondition_TypeAndConfidence::RoadObstructionCondition_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const RoadObstructionCondition_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  RoadObstructionCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE RoadObstructionCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadObstructionCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
RoadObstructionCondition_TypeAndConfidence::~RoadObstructionCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadObstructionCondition_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadObstructionCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadObstructionCondition_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> RoadObstructionCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadObstructionCondition_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoadObstructionCondition_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* RoadObstructionCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  return target;
}

::size_t RoadObstructionCondition_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadObstructionCondition_TypeAndConfidence::_class_data_ = {
    RoadObstructionCondition_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadObstructionCondition_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void RoadObstructionCondition_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadObstructionCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const RoadObstructionCondition_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadObstructionCondition_TypeAndConfidence::CopyFrom(const RoadObstructionCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadObstructionCondition_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadObstructionCondition_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadObstructionCondition_TypeAndConfidence::InternalSwap(RoadObstructionCondition_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(RoadObstructionCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoadObstructionCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata RoadObstructionCondition_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[11]);
}
// ===================================================================

class RoadObstructionCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadObstructionCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const RoadObstructionCondition* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const RoadObstructionCondition* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence& type_and_confidence(const RoadObstructionCondition* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& RoadObstructionCondition::_Internal::envelope(const RoadObstructionCondition* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& RoadObstructionCondition::_Internal::detection_status(const RoadObstructionCondition* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence& RoadObstructionCondition::_Internal::type_and_confidence(const RoadObstructionCondition* msg) {
  return *msg->_impl_.type_and_confidence_;
}
void RoadObstructionCondition::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadObstructionCondition::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RoadObstructionCondition::RoadObstructionCondition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
}
inline PROTOBUF_NDEBUG_INLINE RoadObstructionCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoadObstructionCondition::RoadObstructionCondition(
    ::google::protobuf::Arena* arena,
    const RoadObstructionCondition& from)
    : ::google::protobuf::Message(arena) {
  RoadObstructionCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
}
inline PROTOBUF_NDEBUG_INLINE RoadObstructionCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoadObstructionCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
RoadObstructionCondition::~RoadObstructionCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoadObstructionCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoadObstructionCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoadObstructionCondition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> RoadObstructionCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RoadObstructionCondition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* RoadObstructionCondition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  return target;
}

::size_t RoadObstructionCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoadObstructionCondition::_class_data_ = {
    RoadObstructionCondition::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoadObstructionCondition::GetClassData() const {
  return &_class_data_;
}

void RoadObstructionCondition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoadObstructionCondition*>(&to_msg);
  auto& from = static_cast<const RoadObstructionCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoadObstructionCondition::CopyFrom(const RoadObstructionCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadObstructionCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoadObstructionCondition::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoadObstructionCondition::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoadObstructionCondition::InternalSwap(RoadObstructionCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.type_and_confidence_)
      + sizeof(RoadObstructionCondition::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(RoadObstructionCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata RoadObstructionCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[12]);
}
// ===================================================================

class VulnerableRoadUserCondition_TypeAndConfidence::_Internal {
 public:
  using HasBits = decltype(std::declval<VulnerableRoadUserCondition_TypeAndConfidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Confidence& confidence(const VulnerableRoadUserCondition_TypeAndConfidence* msg);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Confidence& VulnerableRoadUserCondition_TypeAndConfidence::_Internal::confidence(const VulnerableRoadUserCondition_TypeAndConfidence* msg) {
  return *msg->_impl_.confidence_;
}
void VulnerableRoadUserCondition_TypeAndConfidence::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.confidence_ != nullptr) _impl_.confidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VulnerableRoadUserCondition_TypeAndConfidence::VulnerableRoadUserCondition_TypeAndConfidence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE VulnerableRoadUserCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VulnerableRoadUserCondition_TypeAndConfidence::VulnerableRoadUserCondition_TypeAndConfidence(
    ::google::protobuf::Arena* arena,
    const VulnerableRoadUserCondition_TypeAndConfidence& from)
    : ::google::protobuf::Message(arena) {
  VulnerableRoadUserCondition_TypeAndConfidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.confidence_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(arena, *from._impl_.confidence_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
}
inline PROTOBUF_NDEBUG_INLINE VulnerableRoadUserCondition_TypeAndConfidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VulnerableRoadUserCondition_TypeAndConfidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::type_));
}
VulnerableRoadUserCondition_TypeAndConfidence::~VulnerableRoadUserCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VulnerableRoadUserCondition_TypeAndConfidence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VulnerableRoadUserCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.confidence_ != nullptr);
    _impl_.confidence_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VulnerableRoadUserCondition_TypeAndConfidence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> VulnerableRoadUserCondition_TypeAndConfidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VulnerableRoadUserCondition_TypeAndConfidence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.confidence_)}},
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.base.Confidence confidence = 2;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Confidence>()},
  }}, {{
  }},
};

::uint8_t* VulnerableRoadUserCondition_TypeAndConfidence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::confidence(this),
        _Internal::confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  return target;
}

::size_t VulnerableRoadUserCondition_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VulnerableRoadUserCondition_TypeAndConfidence::_class_data_ = {
    VulnerableRoadUserCondition_TypeAndConfidence::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VulnerableRoadUserCondition_TypeAndConfidence::GetClassData() const {
  return &_class_data_;
}

void VulnerableRoadUserCondition_TypeAndConfidence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VulnerableRoadUserCondition_TypeAndConfidence*>(&to_msg);
  auto& from = static_cast<const VulnerableRoadUserCondition_TypeAndConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(
        from._internal_confidence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VulnerableRoadUserCondition_TypeAndConfidence::CopyFrom(const VulnerableRoadUserCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VulnerableRoadUserCondition_TypeAndConfidence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VulnerableRoadUserCondition_TypeAndConfidence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VulnerableRoadUserCondition_TypeAndConfidence::InternalSwap(VulnerableRoadUserCondition_TypeAndConfidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.type_)
      + sizeof(VulnerableRoadUserCondition_TypeAndConfidence::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition_TypeAndConfidence, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata VulnerableRoadUserCondition_TypeAndConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[13]);
}
// ===================================================================

class VulnerableRoadUserCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<VulnerableRoadUserCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const VulnerableRoadUserCondition* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status(const VulnerableRoadUserCondition* msg);
  static void set_has_detection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence& type_and_confidence(const VulnerableRoadUserCondition* msg);
  static void set_has_type_and_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& VulnerableRoadUserCondition::_Internal::envelope(const VulnerableRoadUserCondition* msg) {
  return *msg->_impl_.envelope_;
}
const ::sensoris::protobuf::types::base::EventDetectionStatus& VulnerableRoadUserCondition::_Internal::detection_status(const VulnerableRoadUserCondition* msg) {
  return *msg->_impl_.detection_status_;
}
const ::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence& VulnerableRoadUserCondition::_Internal::type_and_confidence(const VulnerableRoadUserCondition* msg) {
  return *msg->_impl_.type_and_confidence_;
}
void VulnerableRoadUserCondition::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void VulnerableRoadUserCondition::clear_detection_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_status_ != nullptr) _impl_.detection_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
VulnerableRoadUserCondition::VulnerableRoadUserCondition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
}
inline PROTOBUF_NDEBUG_INLINE VulnerableRoadUserCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VulnerableRoadUserCondition::VulnerableRoadUserCondition(
    ::google::protobuf::Arena* arena,
    const VulnerableRoadUserCondition& from)
    : ::google::protobuf::Message(arena) {
  VulnerableRoadUserCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  _impl_.detection_status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(arena, *from._impl_.detection_status_)
                : nullptr;
  _impl_.type_and_confidence_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence>(arena, *from._impl_.type_and_confidence_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
}
inline PROTOBUF_NDEBUG_INLINE VulnerableRoadUserCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VulnerableRoadUserCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, type_and_confidence_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::type_and_confidence_));
}
VulnerableRoadUserCondition::~VulnerableRoadUserCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VulnerableRoadUserCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  delete _impl_.detection_status_;
  delete _impl_.type_and_confidence_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VulnerableRoadUserCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.envelope_ != nullptr);
      _impl_.envelope_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.detection_status_ != nullptr);
      _impl_.detection_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.type_and_confidence_ != nullptr);
      _impl_.type_and_confidence_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VulnerableRoadUserCondition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> VulnerableRoadUserCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VulnerableRoadUserCondition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.envelope_)}},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.detection_status_)}},
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence type_and_confidence = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.type_and_confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.detection_status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence type_and_confidence = 3;
    {PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.type_and_confidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventDetectionStatus>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence>()},
  }}, {{
  }},
};

::uint8_t* VulnerableRoadUserCondition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::detection_status(this),
        _Internal::detection_status(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence type_and_confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::type_and_confidence(this),
        _Internal::type_and_confidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  return target;
}

::size_t VulnerableRoadUserCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
    }

    // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.detection_status_);
    }

    // .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition.TypeAndConfidence type_and_confidence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_and_confidence_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VulnerableRoadUserCondition::_class_data_ = {
    VulnerableRoadUserCondition::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VulnerableRoadUserCondition::GetClassData() const {
  return &_class_data_;
}

void VulnerableRoadUserCondition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VulnerableRoadUserCondition*>(&to_msg);
  auto& from = static_cast<const VulnerableRoadUserCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
          from._internal_envelope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(
          from._internal_detection_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition_TypeAndConfidence::MergeFrom(
          from._internal_type_and_confidence());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VulnerableRoadUserCondition::CopyFrom(const VulnerableRoadUserCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VulnerableRoadUserCondition::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VulnerableRoadUserCondition::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VulnerableRoadUserCondition::InternalSwap(VulnerableRoadUserCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.type_and_confidence_)
      + sizeof(VulnerableRoadUserCondition::_impl_.type_and_confidence_)
      - PROTOBUF_FIELD_OFFSET(VulnerableRoadUserCondition, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata VulnerableRoadUserCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[14]);
}
// ===================================================================

class ECallStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ECallStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::EventEnvelope& envelope(const ECallStatus* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::EventEnvelope& ECallStatus::_Internal::envelope(const ECallStatus* msg) {
  return *msg->_impl_.envelope_;
}
void ECallStatus::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ECallStatus::ECallStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.ECallStatus)
}
inline PROTOBUF_NDEBUG_INLINE ECallStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ECallStatus::ECallStatus(
    ::google::protobuf::Arena* arena,
    const ECallStatus& from)
    : ::google::protobuf::Message(arena) {
  ECallStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, activation_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, activation_type_),
           offsetof(Impl_, availability_) -
               offsetof(Impl_, activation_type_) +
               sizeof(Impl_::availability_));

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.ECallStatus)
}
inline PROTOBUF_NDEBUG_INLINE ECallStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ECallStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, envelope_),
           0,
           offsetof(Impl_, availability_) -
               offsetof(Impl_, envelope_) +
               sizeof(Impl_::availability_));
}
ECallStatus::~ECallStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.ECallStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ECallStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ECallStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  ::memset(&_impl_.activation_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.availability_) -
      reinterpret_cast<char*>(&_impl_.activation_type_)) + sizeof(_impl_.availability_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ECallStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> ECallStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ECallStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.envelope_)}},
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.ActivationType activation_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ECallStatus, _impl_.activation_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.activation_type_)}},
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.Availability availability = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ECallStatus, _impl_.availability_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.availability_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.ActivationType activation_type = 2;
    {PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.activation_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.categories.trafficevents.ECallStatus.Availability availability = 3;
    {PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.availability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::EventEnvelope>()},
  }}, {{
  }},
};

::uint8_t* ECallStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.categories.trafficevents.ECallStatus.ActivationType activation_type = 2;
  if (this->_internal_activation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_activation_type(), target);
  }

  // .sensoris.protobuf.categories.trafficevents.ECallStatus.Availability availability = 3;
  if (this->_internal_availability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_availability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.ECallStatus)
  return target;
}

::size_t ECallStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
  }

  // .sensoris.protobuf.categories.trafficevents.ECallStatus.ActivationType activation_type = 2;
  if (this->_internal_activation_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_activation_type());
  }

  // .sensoris.protobuf.categories.trafficevents.ECallStatus.Availability availability = 3;
  if (this->_internal_availability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_availability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ECallStatus::_class_data_ = {
    ECallStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ECallStatus::GetClassData() const {
  return &_class_data_;
}

void ECallStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ECallStatus*>(&to_msg);
  auto& from = static_cast<const ECallStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(
        from._internal_envelope());
  }
  if (from._internal_activation_type() != 0) {
    _this->_internal_set_activation_type(from._internal_activation_type());
  }
  if (from._internal_availability() != 0) {
    _this->_internal_set_availability(from._internal_availability());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ECallStatus::CopyFrom(const ECallStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.ECallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ECallStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ECallStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ECallStatus::InternalSwap(ECallStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.availability_)
      + sizeof(ECallStatus::_impl_.availability_)
      - PROTOBUF_FIELD_OFFSET(ECallStatus, _impl_.envelope_)>(
          reinterpret_cast<char*>(&_impl_.envelope_),
          reinterpret_cast<char*>(&other->_impl_.envelope_));
}

::google::protobuf::Metadata ECallStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[15]);
}
// ===================================================================

class TrafficEventsCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficEventsCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope(const TrafficEventsCategory* msg);
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::CategoryEnvelope& TrafficEventsCategory::_Internal::envelope(const TrafficEventsCategory* msg) {
  return *msg->_impl_.envelope_;
}
void TrafficEventsCategory::clear_envelope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.envelope_ != nullptr) _impl_.envelope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficEventsCategory::TrafficEventsCategory(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
}
inline PROTOBUF_NDEBUG_INLINE TrafficEventsCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        hazard_{visibility, arena, from.hazard_},
        dangerous_slow_down_{visibility, arena, from.dangerous_slow_down_},
        traffic_condition_{visibility, arena, from.traffic_condition_},
        roadworks_{visibility, arena, from.roadworks_},
        road_weather_condition_{visibility, arena, from.road_weather_condition_},
        road_surface_condition_{visibility, arena, from.road_surface_condition_},
        road_obstruction_condition_{visibility, arena, from.road_obstruction_condition_},
        vulnerable_road_user_condition_{visibility, arena, from.vulnerable_road_user_condition_},
        e_call_status_{visibility, arena, from.e_call_status_} {}

TrafficEventsCategory::TrafficEventsCategory(
    ::google::protobuf::Arena* arena,
    const TrafficEventsCategory& from)
    : ::google::protobuf::Message(arena) {
  TrafficEventsCategory* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.envelope_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(arena, *from._impl_.envelope_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
}
inline PROTOBUF_NDEBUG_INLINE TrafficEventsCategory::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        hazard_{visibility, arena},
        dangerous_slow_down_{visibility, arena},
        traffic_condition_{visibility, arena},
        roadworks_{visibility, arena},
        road_weather_condition_{visibility, arena},
        road_surface_condition_{visibility, arena},
        road_obstruction_condition_{visibility, arena},
        vulnerable_road_user_condition_{visibility, arena},
        e_call_status_{visibility, arena} {}

inline void TrafficEventsCategory::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.envelope_ = {};
}
TrafficEventsCategory::~TrafficEventsCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficEventsCategory::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.envelope_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficEventsCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hazard_.Clear();
  _impl_.dangerous_slow_down_.Clear();
  _impl_.traffic_condition_.Clear();
  _impl_.roadworks_.Clear();
  _impl_.road_weather_condition_.Clear();
  _impl_.road_surface_condition_.Clear();
  _impl_.road_obstruction_condition_.Clear();
  _impl_.vulnerable_road_user_condition_.Clear();
  _impl_.e_call_status_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.envelope_ != nullptr);
    _impl_.envelope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficEventsCategory::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 10, 0, 2> TrafficEventsCategory::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficEventsCategory_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.envelope_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.hazard_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.dangerous_slow_down_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.traffic_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.roadworks_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_weather_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition road_surface_condition = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_surface_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition road_obstruction_condition = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 7, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_obstruction_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition vulnerable_road_user_condition = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 8, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.vulnerable_road_user_condition_)}},
    // repeated .sensoris.protobuf.categories.trafficevents.ECallStatus e_call_status = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 9, PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.e_call_status_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.envelope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.hazard_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.dangerous_slow_down_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.traffic_condition_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.roadworks_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_weather_condition_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition road_surface_condition = 7;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_surface_condition_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition road_obstruction_condition = 8;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.road_obstruction_condition_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition vulnerable_road_user_condition = 9;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.vulnerable_road_user_condition_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .sensoris.protobuf.categories.trafficevents.ECallStatus e_call_status = 10;
    {PROTOBUF_FIELD_OFFSET(TrafficEventsCategory, _impl_.e_call_status_), -1, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::CategoryEnvelope>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::Hazard>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::DangerousSlowDown>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::TrafficCondition>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWorks>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadSurfaceCondition>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::RoadObstructionCondition>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::VulnerableRoadUserCondition>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::categories::trafficevents::ECallStatus>()},
  }}, {{
  }},
};

::uint8_t* TrafficEventsCategory::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hazard_size()); i < n; i++) {
    const auto& repfield = this->_internal_hazard().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dangerous_slow_down_size()); i < n; i++) {
    const auto& repfield = this->_internal_dangerous_slow_down().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traffic_condition_size()); i < n; i++) {
    const auto& repfield = this->_internal_traffic_condition().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roadworks_size()); i < n; i++) {
    const auto& repfield = this->_internal_roadworks().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_weather_condition_size()); i < n; i++) {
    const auto& repfield = this->_internal_road_weather_condition().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition road_surface_condition = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_surface_condition_size()); i < n; i++) {
    const auto& repfield = this->_internal_road_surface_condition().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition road_obstruction_condition = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_obstruction_condition_size()); i < n; i++) {
    const auto& repfield = this->_internal_road_obstruction_condition().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition vulnerable_road_user_condition = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vulnerable_road_user_condition_size()); i < n; i++) {
    const auto& repfield = this->_internal_vulnerable_road_user_condition().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.ECallStatus e_call_status = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_e_call_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_e_call_status().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  return target;
}

::size_t TrafficEventsCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
  total_size += 1UL * this->_internal_hazard_size();
  for (const auto& msg : this->_internal_hazard()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
  total_size += 1UL * this->_internal_dangerous_slow_down_size();
  for (const auto& msg : this->_internal_dangerous_slow_down()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
  total_size += 1UL * this->_internal_traffic_condition_size();
  for (const auto& msg : this->_internal_traffic_condition()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
  total_size += 1UL * this->_internal_roadworks_size();
  for (const auto& msg : this->_internal_roadworks()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
  total_size += 1UL * this->_internal_road_weather_condition_size();
  for (const auto& msg : this->_internal_road_weather_condition()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.trafficevents.RoadSurfaceCondition road_surface_condition = 7;
  total_size += 1UL * this->_internal_road_surface_condition_size();
  for (const auto& msg : this->_internal_road_surface_condition()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.trafficevents.RoadObstructionCondition road_obstruction_condition = 8;
  total_size += 1UL * this->_internal_road_obstruction_condition_size();
  for (const auto& msg : this->_internal_road_obstruction_condition()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.trafficevents.VulnerableRoadUserCondition vulnerable_road_user_condition = 9;
  total_size += 1UL * this->_internal_vulnerable_road_user_condition_size();
  for (const auto& msg : this->_internal_vulnerable_road_user_condition()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .sensoris.protobuf.categories.trafficevents.ECallStatus e_call_status = 10;
  total_size += 1UL * this->_internal_e_call_status_size();
  for (const auto& msg : this->_internal_e_call_status()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.envelope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficEventsCategory::_class_data_ = {
    TrafficEventsCategory::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficEventsCategory::GetClassData() const {
  return &_class_data_;
}

void TrafficEventsCategory::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficEventsCategory*>(&to_msg);
  auto& from = static_cast<const TrafficEventsCategory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_hazard()->MergeFrom(
      from._internal_hazard());
  _this->_internal_mutable_dangerous_slow_down()->MergeFrom(
      from._internal_dangerous_slow_down());
  _this->_internal_mutable_traffic_condition()->MergeFrom(
      from._internal_traffic_condition());
  _this->_internal_mutable_roadworks()->MergeFrom(
      from._internal_roadworks());
  _this->_internal_mutable_road_weather_condition()->MergeFrom(
      from._internal_road_weather_condition());
  _this->_internal_mutable_road_surface_condition()->MergeFrom(
      from._internal_road_surface_condition());
  _this->_internal_mutable_road_obstruction_condition()->MergeFrom(
      from._internal_road_obstruction_condition());
  _this->_internal_mutable_vulnerable_road_user_condition()->MergeFrom(
      from._internal_vulnerable_road_user_condition());
  _this->_internal_mutable_e_call_status()->MergeFrom(
      from._internal_e_call_status());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(
        from._internal_envelope());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficEventsCategory::CopyFrom(const TrafficEventsCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficEventsCategory::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficEventsCategory::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficEventsCategory::InternalSwap(TrafficEventsCategory* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hazard_.InternalSwap(&other->_impl_.hazard_);
  _impl_.dangerous_slow_down_.InternalSwap(&other->_impl_.dangerous_slow_down_);
  _impl_.traffic_condition_.InternalSwap(&other->_impl_.traffic_condition_);
  _impl_.roadworks_.InternalSwap(&other->_impl_.roadworks_);
  _impl_.road_weather_condition_.InternalSwap(&other->_impl_.road_weather_condition_);
  _impl_.road_surface_condition_.InternalSwap(&other->_impl_.road_surface_condition_);
  _impl_.road_obstruction_condition_.InternalSwap(&other->_impl_.road_obstruction_condition_);
  _impl_.vulnerable_road_user_condition_.InternalSwap(&other->_impl_.vulnerable_road_user_condition_);
  _impl_.e_call_status_.InternalSwap(&other->_impl_.e_call_status_);
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::google::protobuf::Metadata TrafficEventsCategory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto[16]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficevents
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
