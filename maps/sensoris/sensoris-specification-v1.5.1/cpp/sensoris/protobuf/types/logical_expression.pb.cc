// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/logical_expression.proto

#include "sensoris/protobuf/types/logical_expression.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace types {
namespace logicalexpression {

inline constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : extension_{},
        operand_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperandDefaultTypeInternal() {}
  union {
    LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperandDefaultTypeInternal _LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand_default_instance_;

inline constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extension_{},
        first_operand_{nullptr},
        second_operand_{nullptr},
        operator__{static_cast< ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpression_Operation::LogicalExpression_LogicalOperand_ComparisonExpression_Operation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogicalExpression_LogicalOperand_ComparisonExpression_OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpression_OperationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalExpression_LogicalOperand_ComparisonExpression_OperationDefaultTypeInternal() {}
  union {
    LogicalExpression_LogicalOperand_ComparisonExpression_Operation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalExpression_LogicalOperand_ComparisonExpression_OperationDefaultTypeInternal _LogicalExpression_LogicalOperand_ComparisonExpression_Operation_default_instance_;

inline constexpr LogicalExpression_LogicalOperand_ComparisonExpression::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extension_{},
        not__{nullptr},
        first_operation_{nullptr},
        second_operation_{nullptr},
        operator__{static_cast< ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpression::LogicalExpression_LogicalOperand_ComparisonExpression(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogicalExpression_LogicalOperand_ComparisonExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpressionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalExpression_LogicalOperand_ComparisonExpressionDefaultTypeInternal() {}
  union {
    LogicalExpression_LogicalOperand_ComparisonExpression _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalExpression_LogicalOperand_ComparisonExpressionDefaultTypeInternal _LogicalExpression_LogicalOperand_ComparisonExpression_default_instance_;

inline constexpr LogicalExpression_LogicalOperand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extension_{},
        not__{nullptr},
        expression_function_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand::LogicalExpression_LogicalOperand(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogicalExpression_LogicalOperandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalExpression_LogicalOperandDefaultTypeInternal() {}
  union {
    LogicalExpression_LogicalOperand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalExpression_LogicalOperandDefaultTypeInternal _LogicalExpression_LogicalOperand_default_instance_;

inline constexpr LogicalExpression::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        operand_{},
        extension_{},
        not__{nullptr},
        operator__{static_cast< ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LogicalExpression::LogicalExpression(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogicalExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalExpressionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalExpressionDefaultTypeInternal() {}
  union {
    LogicalExpression _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalExpressionDefaultTypeInternal _LogicalExpression_default_instance_;
}  // namespace logicalexpression
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.extension_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.operand_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.first_operand_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.operator__),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.second_operand_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.extension_),
    0,
    ~0u,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.not__),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.first_operation_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.operator__),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.second_operation_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.extension_),
    0,
    1,
    ~0u,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand, _impl_.not__),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand, _impl_.extension_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand, _impl_.expression_function_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression, _impl_.not__),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression, _impl_.operator__),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression, _impl_.operand_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression, _impl_.extension_),
    0,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand)},
        {15, 27, -1, sizeof(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation)},
        {31, 44, -1, sizeof(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression)},
        {49, 61, -1, sizeof(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand)},
        {64, 76, -1, sizeof(::sensoris::protobuf::types::logicalexpression::LogicalExpression)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand_default_instance_._instance,
    &::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_default_instance_._instance,
    &::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_ComparisonExpression_default_instance_._instance,
    &::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_default_instance_._instance,
    &::sensoris::protobuf::types::logicalexpression::_LogicalExpression_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n0sensoris/protobuf/types/logical_expres"
    "sion.proto\022)sensoris.protobuf.types.logi"
    "calexpression\032\031google/protobuf/any.proto"
    "\032\036google/protobuf/wrappers.proto\032\"sensor"
    "is/protobuf/types/base.proto\"\345\021\n\021Logical"
    "Expression\022\'\n\003not\030\001 \001(\0132\032.google.protobu"
    "f.BoolValue\022^\n\010operator\030\002 \001(\0162L.sensoris"
    ".protobuf.types.logicalexpression.Logica"
    "lExpression.LogicalOperator\022\\\n\007operand\030\003"
    " \003(\0132K.sensoris.protobuf.types.logicalex"
    "pression.LogicalExpression.LogicalOperan"
    "d\022\'\n\textension\030\017 \003(\0132\024.google.protobuf.A"
    "ny\032\375\016\n\016LogicalOperand\022\'\n\003not\030\001 \001(\0132\032.goo"
    "gle.protobuf.BoolValue\022\201\001\n\025comparison_ex"
    "pression\030\002 \001(\0132`.sensoris.protobuf.types"
    ".logicalexpression.LogicalExpression.Log"
    "icalOperand.ComparisonExpressionH\000\022\'\n\tex"
    "tension\030\017 \003(\0132\024.google.protobuf.Any\032\375\014\n\024"
    "ComparisonExpression\022\'\n\003not\030\001 \001(\0132\032.goog"
    "le.protobuf.BoolValue\022\203\001\n\017first_operatio"
    "n\030\002 \001(\0132j.sensoris.protobuf.types.logica"
    "lexpression.LogicalExpression.LogicalOpe"
    "rand.ComparisonExpression.Operation\022\211\001\n\010"
    "operator\030\003 \001(\0162w.sensoris.protobuf.types"
    ".logicalexpression.LogicalExpression.Log"
    "icalOperand.ComparisonExpression.Compari"
    "sonOperatorType\022\204\001\n\020second_operation\030\004 \001"
    "(\0132j.sensoris.protobuf.types.logicalexpr"
    "ession.LogicalExpression.LogicalOperand."
    "ComparisonExpression.Operation\022\'\n\textens"
    "ion\030\017 \003(\0132\024.google.protobuf.Any\032\336\007\n\tOper"
    "ation\022\211\001\n\rfirst_operand\030\001 \001(\0132r.sensoris"
    ".protobuf.types.logicalexpression.Logica"
    "lExpression.LogicalOperand.ComparisonExp"
    "ression.Operation.Operand\022\212\001\n\010operator\030\002"
    " \001(\0162x.sensoris.protobuf.types.logicalex"
    "pression.LogicalExpression.LogicalOperan"
    "d.ComparisonExpression.Operation.Operati"
    "onType\022\212\001\n\016second_operand\030\003 \001(\0132r.sensor"
    "is.protobuf.types.logicalexpression.Logi"
    "calExpression.LogicalOperand.ComparisonE"
    "xpression.Operation.Operand\022\'\n\textension"
    "\030\017 \003(\0132\024.google.protobuf.Any\032\206\003\n\007Operand"
    "\022W\n\030int64_value_and_exponent\030\001 \001(\01323.sen"
    "soris.protobuf.types.base.Int64ValueAndE"
    "xponentH\000\0220\n\nbool_value\030\002 \001(\0132\032.google.p"
    "rotobuf.BoolValueH\000\0224\n\014string_value\030\003 \001("
    "\0132\034.google.protobuf.StringValueH\000\0222\n\013byt"
    "es_value\030\004 \001(\0132\033.google.protobuf.BytesVa"
    "lueH\000\022R\n\021event_field_value\030\005 \001(\01325.senso"
    "ris.protobuf.types.base.AbsoluteOrExtens"
    "ionPathH\000\022\'\n\textension\030\017 \003(\0132\024.google.pr"
    "otobuf.AnyB\t\n\007operand\"y\n\rOperationType\022\032"
    "\n\026UNKNOWN_OPERATION_TYPE\020\000\022\020\n\014NO_OPERATI"
    "ON\020\001\022\007\n\003SUM\020\002\022\017\n\013SUBTRACTION\020\003\022\022\n\016MULTIP"
    "LICATION\020\004\022\014\n\010DIVISION\020\005\"\230\001\n\026ComparisonO"
    "peratorType\022$\n UNKNOWN_COMPARISON_OPERAT"
    "OR_TYPE\020\000\022\t\n\005EQUAL\020\001\022\r\n\tNOT_EQUAL\020\002\022\013\n\007G"
    "REATER\020\003\022\010\n\004LESS\020\004\022\024\n\020GREATER_OR_EQUAL\020\005"
    "\022\021\n\rLESS_OR_EQUAL\020\006B\025\n\023expression_functi"
    "on\"@\n\017LogicalOperator\022\034\n\030UNKNOWN_LOGICAL"
    "_OPERATOR\020\000\022\007\n\003AND\020\001\022\006\n\002OR\020\002B\177\n$org.sens"
    "oris.types.logicalexpressionB\036SensorisLo"
    "gicalExpressionTypesP\001Z2sensoris.org/spe"
    "cification/types/logicalexpression\370\001\001b\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto = {
    false,
    false,
    2605,
    descriptor_table_protodef_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto,
    "sensoris/protobuf/types/logical_expression.proto",
    &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto(&descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto);
namespace sensoris {
namespace protobuf {
namespace types {
namespace logicalexpression {
const ::google::protobuf::EnumDescriptor* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_internal_data_[] = {
    393216u, 0u, };
bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::UNKNOWN_OPERATION_TYPE;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::NO_OPERATION;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::SUM;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::SUBTRACTION;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::MULTIPLICATION;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::DIVISION;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::OperationType_MIN;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::OperationType_MAX;
constexpr int LogicalExpression_LogicalOperand_ComparisonExpression_Operation::OperationType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_internal_data_[] = {
    458752u, 0u, };
bool LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::UNKNOWN_COMPARISON_OPERATOR_TYPE;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::EQUAL;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::NOT_EQUAL;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::GREATER;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::LESS;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::GREATER_OR_EQUAL;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::LESS_OR_EQUAL;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::ComparisonOperatorType_MIN;
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::ComparisonOperatorType_MAX;
constexpr int LogicalExpression_LogicalOperand_ComparisonExpression::ComparisonOperatorType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LogicalExpression_LogicalOperator_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto);
  return file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t LogicalExpression_LogicalOperator_internal_data_[] = {
    196608u, 0u, };
bool LogicalExpression_LogicalOperator_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LogicalExpression_LogicalOperator LogicalExpression::UNKNOWN_LOGICAL_OPERATOR;
constexpr LogicalExpression_LogicalOperator LogicalExpression::AND;
constexpr LogicalExpression_LogicalOperator LogicalExpression::OR;
constexpr LogicalExpression_LogicalOperator LogicalExpression::LogicalOperator_MIN;
constexpr LogicalExpression_LogicalOperator LogicalExpression::LogicalOperator_MAX;
constexpr int LogicalExpression::LogicalOperator_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_._oneof_case_);
  static const ::sensoris::protobuf::types::base::Int64ValueAndExponent& int64_value_and_exponent(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg);
  static const ::google::protobuf::BoolValue& bool_value(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg);
  static const ::google::protobuf::StringValue& string_value(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg);
  static const ::google::protobuf::BytesValue& bytes_value(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg);
  static const ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath& event_field_value(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg);
};

const ::sensoris::protobuf::types::base::Int64ValueAndExponent& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_Internal::int64_value_and_exponent(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg) {
  return *msg->_impl_.operand_.int64_value_and_exponent_;
}
const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_Internal::bool_value(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg) {
  return *msg->_impl_.operand_.bool_value_;
}
const ::google::protobuf::StringValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_Internal::string_value(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg) {
  return *msg->_impl_.operand_.string_value_;
}
const ::google::protobuf::BytesValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_Internal::bytes_value(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg) {
  return *msg->_impl_.operand_.bytes_value_;
}
const ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_Internal::event_field_value(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* msg) {
  return *msg->_impl_.operand_.event_field_value_;
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_allocated_int64_value_and_exponent(::sensoris::protobuf::types::base::Int64ValueAndExponent* int64_value_and_exponent) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_operand();
  if (int64_value_and_exponent) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(int64_value_and_exponent)->GetArena();
    if (message_arena != submessage_arena) {
      int64_value_and_exponent = ::google::protobuf::internal::GetOwnedMessage(message_arena, int64_value_and_exponent, submessage_arena);
    }
    set_has_int64_value_and_exponent();
    _impl_.operand_.int64_value_and_exponent_ = int64_value_and_exponent;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.int64_value_and_exponent)
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::clear_int64_value_and_exponent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (operand_case() == kInt64ValueAndExponent) {
    if (GetArena() == nullptr) {
      delete _impl_.operand_.int64_value_and_exponent_;
    }
    clear_has_operand();
  }
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_allocated_bool_value(::google::protobuf::BoolValue* bool_value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_operand();
  if (bool_value) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(bool_value)->GetArena();
    if (message_arena != submessage_arena) {
      bool_value = ::google::protobuf::internal::GetOwnedMessage(message_arena, bool_value, submessage_arena);
    }
    set_has_bool_value();
    _impl_.operand_.bool_value_ = bool_value;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bool_value)
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::clear_bool_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (operand_case() == kBoolValue) {
    if (GetArena() == nullptr) {
      delete _impl_.operand_.bool_value_;
    }
    clear_has_operand();
  }
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_allocated_string_value(::google::protobuf::StringValue* string_value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_operand();
  if (string_value) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(string_value)->GetArena();
    if (message_arena != submessage_arena) {
      string_value = ::google::protobuf::internal::GetOwnedMessage(message_arena, string_value, submessage_arena);
    }
    set_has_string_value();
    _impl_.operand_.string_value_ = string_value;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.string_value)
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::clear_string_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (operand_case() == kStringValue) {
    if (GetArena() == nullptr) {
      delete _impl_.operand_.string_value_;
    }
    clear_has_operand();
  }
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_allocated_bytes_value(::google::protobuf::BytesValue* bytes_value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_operand();
  if (bytes_value) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(bytes_value)->GetArena();
    if (message_arena != submessage_arena) {
      bytes_value = ::google::protobuf::internal::GetOwnedMessage(message_arena, bytes_value, submessage_arena);
    }
    set_has_bytes_value();
    _impl_.operand_.bytes_value_ = bytes_value;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bytes_value)
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::clear_bytes_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (operand_case() == kBytesValue) {
    if (GetArena() == nullptr) {
      delete _impl_.operand_.bytes_value_;
    }
    clear_has_operand();
  }
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_allocated_event_field_value(::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* event_field_value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_operand();
  if (event_field_value) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(event_field_value)->GetArena();
    if (message_arena != submessage_arena) {
      event_field_value = ::google::protobuf::internal::GetOwnedMessage(message_arena, event_field_value, submessage_arena);
    }
    set_has_event_field_value();
    _impl_.operand_.event_field_value_ = event_field_value;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.event_field_value)
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::clear_event_field_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (operand_case() == kEventFieldValue) {
    if (GetArena() == nullptr) {
      delete _impl_.operand_.event_field_value_;
    }
    clear_has_operand();
  }
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : extension_{visibility, arena, from.extension_},
        operand_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(
    ::google::protobuf::Arena* arena,
    const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& from)
    : ::google::protobuf::Message(arena) {
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (operand_case()) {
    case OPERAND_NOT_SET:
      break;
      case kInt64ValueAndExponent:
        _impl_.operand_.int64_value_and_exponent_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndExponent>(arena, *from._impl_.operand_.int64_value_and_exponent_);
        break;
      case kBoolValue:
        _impl_.operand_.bool_value_ = CreateMaybeMessage<::google::protobuf::BoolValue>(arena, *from._impl_.operand_.bool_value_);
        break;
      case kStringValue:
        _impl_.operand_.string_value_ = CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.operand_.string_value_);
        break;
      case kBytesValue:
        _impl_.operand_.bytes_value_ = CreateMaybeMessage<::google::protobuf::BytesValue>(arena, *from._impl_.operand_.bytes_value_);
        break;
      case kEventFieldValue:
        _impl_.operand_.event_field_value_ = CreateMaybeMessage<::sensoris::protobuf::types::base::AbsoluteOrExtensionPath>(arena, *from._impl_.operand_.event_field_value_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : extension_{visibility, arena},
        operand_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::~LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_operand()) {
    clear_operand();
  }
  _impl_.~Impl_();
}

void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::clear_operand() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (operand_case()) {
    case kInt64ValueAndExponent: {
      if (GetArena() == nullptr) {
        delete _impl_.operand_.int64_value_and_exponent_;
      }
      break;
    }
    case kBoolValue: {
      if (GetArena() == nullptr) {
        delete _impl_.operand_.bool_value_;
      }
      break;
    }
    case kStringValue: {
      if (GetArena() == nullptr) {
        delete _impl_.operand_.string_value_;
      }
      break;
    }
    case kBytesValue: {
      if (GetArena() == nullptr) {
        delete _impl_.operand_.bytes_value_;
      }
      break;
    }
    case kEventFieldValue: {
      if (GetArena() == nullptr) {
        delete _impl_.operand_.event_field_value_;
      }
      break;
    }
    case OPERAND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPERAND_NOT_SET;
}


PROTOBUF_NOINLINE void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_.Clear();
  clear_operand();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 6, 0, 2> LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    15, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950880,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 5, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Int64ValueAndExponent int64_value_and_exponent = 1;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.operand_.int64_value_and_exponent_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.BoolValue bool_value = 2;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.operand_.bool_value_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue string_value = 3;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.operand_.string_value_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.BytesValue bytes_value = 4;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.operand_.bytes_value_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.base.AbsoluteOrExtensionPath event_field_value = 5;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.operand_.event_field_value_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand, _impl_.extension_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Int64ValueAndExponent>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::BoolValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::BytesValue>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::AbsoluteOrExtensionPath>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (operand_case()) {
    case kInt64ValueAndExponent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::int64_value_and_exponent(this),
          _Internal::int64_value_and_exponent(this).GetCachedSize(), target, stream);
      break;
    }
    case kBoolValue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::bool_value(this),
          _Internal::bool_value(this).GetCachedSize(), target, stream);
      break;
    }
    case kStringValue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::string_value(this),
          _Internal::string_value(this).GetCachedSize(), target, stream);
      break;
    }
    case kBytesValue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::bytes_value(this),
          _Internal::bytes_value(this).GetCachedSize(), target, stream);
      break;
    }
    case kEventFieldValue: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::event_field_value(this),
          _Internal::event_field_value(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
  return target;
}

::size_t LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  switch (operand_case()) {
    // .sensoris.protobuf.types.base.Int64ValueAndExponent int64_value_and_exponent = 1;
    case kInt64ValueAndExponent: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.operand_.int64_value_and_exponent_);
      break;
    }
    // .google.protobuf.BoolValue bool_value = 2;
    case kBoolValue: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.operand_.bool_value_);
      break;
    }
    // .google.protobuf.StringValue string_value = 3;
    case kStringValue: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.operand_.string_value_);
      break;
    }
    // .google.protobuf.BytesValue bytes_value = 4;
    case kBytesValue: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.operand_.bytes_value_);
      break;
    }
    // .sensoris.protobuf.types.base.AbsoluteOrExtensionPath event_field_value = 5;
    case kEventFieldValue: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.operand_.event_field_value_);
      break;
    }
    case OPERAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_class_data_ = {
    LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::GetClassData() const {
  return &_class_data_;
}

void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(&to_msg);
  auto& from = static_cast<const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  switch (from.operand_case()) {
    case kInt64ValueAndExponent: {
      _this->_internal_mutable_int64_value_and_exponent()->::sensoris::protobuf::types::base::Int64ValueAndExponent::MergeFrom(
          from._internal_int64_value_and_exponent());
      break;
    }
    case kBoolValue: {
      _this->_internal_mutable_bool_value()->::google::protobuf::BoolValue::MergeFrom(
          from._internal_bool_value());
      break;
    }
    case kStringValue: {
      _this->_internal_mutable_string_value()->::google::protobuf::StringValue::MergeFrom(
          from._internal_string_value());
      break;
    }
    case kBytesValue: {
      _this->_internal_mutable_bytes_value()->::google::protobuf::BytesValue::MergeFrom(
          from._internal_bytes_value());
      break;
    }
    case kEventFieldValue: {
      _this->_internal_mutable_event_field_value()->::sensoris::protobuf::types::base::AbsoluteOrExtensionPath::MergeFrom(
          from._internal_event_field_value());
      break;
    }
    case OPERAND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::CopyFrom(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::InternalSwap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  swap(_impl_.operand_, other->_impl_.operand_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[0]);
}
// ===================================================================

class LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalExpression_LogicalOperand_ComparisonExpression_Operation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& first_operand(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation* msg);
  static void set_has_first_operand(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& second_operand(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation* msg);
  static void set_has_second_operand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_Internal::first_operand(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation* msg) {
  return *msg->_impl_.first_operand_;
}
const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_Internal::second_operand(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation* msg) {
  return *msg->_impl_.second_operand_;
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
LogicalExpression_LogicalOperand_ComparisonExpression_Operation::LogicalExpression_LogicalOperand_ComparisonExpression_Operation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression_LogicalOperand_ComparisonExpression_Operation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extension_{visibility, arena, from.extension_} {}

LogicalExpression_LogicalOperand_ComparisonExpression_Operation::LogicalExpression_LogicalOperand_ComparisonExpression_Operation(
    ::google::protobuf::Arena* arena,
    const LogicalExpression_LogicalOperand_ComparisonExpression_Operation& from)
    : ::google::protobuf::Message(arena) {
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.first_operand_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand>(arena, *from._impl_.first_operand_)
                : nullptr;
  _impl_.second_operand_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand>(arena, *from._impl_.second_operand_)
                : nullptr;
  _impl_.operator__ = from._impl_.operator__;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression_LogicalOperand_ComparisonExpression_Operation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extension_{visibility, arena} {}

inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_operand_),
           0,
           offsetof(Impl_, operator__) -
               offsetof(Impl_, first_operand_) +
               sizeof(Impl_::operator__));
}
LogicalExpression_LogicalOperand_ComparisonExpression_Operation::~LogicalExpression_LogicalOperand_ComparisonExpression_Operation() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.first_operand_;
  delete _impl_.second_operand_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.first_operand_ != nullptr);
      _impl_.first_operand_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.second_operand_ != nullptr);
      _impl_.second_operand_->Clear();
    }
  }
  _impl_.operator__ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 3, 0, 2> LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_._has_bits_),
    0, // no _extensions_
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950904,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand first_operand = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.first_operand_)}},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.OperationType operator = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.operator__), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.operator__)}},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand second_operand = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.second_operand_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 2, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand first_operand = 1;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.first_operand_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.OperationType operator = 2;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.operator__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand second_operand = 3;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.second_operand_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.extension_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand first_operand = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::first_operand(this),
        _Internal::first_operand(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.OperationType operator = 2;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_operator_(), target);
  }

  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand second_operand = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::second_operand(this),
        _Internal::second_operand(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
  return target;
}

::size_t LogicalExpression_LogicalOperand_ComparisonExpression_Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand first_operand = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_operand_);
    }

    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand second_operand = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.second_operand_);
    }

  }
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.OperationType operator = 2;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_class_data_ = {
    LogicalExpression_LogicalOperand_ComparisonExpression_Operation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::GetClassData() const {
  return &_class_data_;
}

void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(&to_msg);
  auto& from = static_cast<const LogicalExpression_LogicalOperand_ComparisonExpression_Operation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_first_operand()->::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::MergeFrom(
          from._internal_first_operand());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_second_operand()->::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::MergeFrom(
          from._internal_second_operand());
    }
  }
  if (from._internal_operator_() != 0) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::CopyFrom(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::InternalSwap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.operator__)
      + sizeof(LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_impl_.operator__)
      - PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression_Operation, _impl_.first_operand_)>(
          reinterpret_cast<char*>(&_impl_.first_operand_),
          reinterpret_cast<char*>(&other->_impl_.first_operand_));
}

::google::protobuf::Metadata LogicalExpression_LogicalOperand_ComparisonExpression_Operation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[1]);
}
// ===================================================================

class LogicalExpression_LogicalOperand_ComparisonExpression::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalExpression_LogicalOperand_ComparisonExpression>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_._has_bits_);
  static const ::google::protobuf::BoolValue& not_(const LogicalExpression_LogicalOperand_ComparisonExpression* msg);
  static void set_has_not_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& first_operation(const LogicalExpression_LogicalOperand_ComparisonExpression* msg);
  static void set_has_first_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& second_operation(const LogicalExpression_LogicalOperand_ComparisonExpression* msg);
  static void set_has_second_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand_ComparisonExpression::_Internal::not_(const LogicalExpression_LogicalOperand_ComparisonExpression* msg) {
  return *msg->_impl_.not__;
}
const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& LogicalExpression_LogicalOperand_ComparisonExpression::_Internal::first_operation(const LogicalExpression_LogicalOperand_ComparisonExpression* msg) {
  return *msg->_impl_.first_operation_;
}
const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& LogicalExpression_LogicalOperand_ComparisonExpression::_Internal::second_operation(const LogicalExpression_LogicalOperand_ComparisonExpression* msg) {
  return *msg->_impl_.second_operation_;
}
void LogicalExpression_LogicalOperand_ComparisonExpression::clear_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.not__ != nullptr) _impl_.not__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LogicalExpression_LogicalOperand_ComparisonExpression::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
LogicalExpression_LogicalOperand_ComparisonExpression::LogicalExpression_LogicalOperand_ComparisonExpression(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression_LogicalOperand_ComparisonExpression::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extension_{visibility, arena, from.extension_} {}

LogicalExpression_LogicalOperand_ComparisonExpression::LogicalExpression_LogicalOperand_ComparisonExpression(
    ::google::protobuf::Arena* arena,
    const LogicalExpression_LogicalOperand_ComparisonExpression& from)
    : ::google::protobuf::Message(arena) {
  LogicalExpression_LogicalOperand_ComparisonExpression* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.not__ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::BoolValue>(arena, *from._impl_.not__)
                : nullptr;
  _impl_.first_operation_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation>(arena, *from._impl_.first_operation_)
                : nullptr;
  _impl_.second_operation_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation>(arena, *from._impl_.second_operation_)
                : nullptr;
  _impl_.operator__ = from._impl_.operator__;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression_LogicalOperand_ComparisonExpression::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extension_{visibility, arena} {}

inline void LogicalExpression_LogicalOperand_ComparisonExpression::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, not__),
           0,
           offsetof(Impl_, operator__) -
               offsetof(Impl_, not__) +
               sizeof(Impl_::operator__));
}
LogicalExpression_LogicalOperand_ComparisonExpression::~LogicalExpression_LogicalOperand_ComparisonExpression() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.not__;
  delete _impl_.first_operation_;
  delete _impl_.second_operation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LogicalExpression_LogicalOperand_ComparisonExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.not__ != nullptr);
      _impl_.not__->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.first_operation_ != nullptr);
      _impl_.first_operation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.second_operation_ != nullptr);
      _impl_.second_operation_->Clear();
    }
  }
  _impl_.operator__ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogicalExpression_LogicalOperand_ComparisonExpression::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> LogicalExpression_LogicalOperand_ComparisonExpression::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_._has_bits_),
    0, // no _extensions_
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950896,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LogicalExpression_LogicalOperand_ComparisonExpression_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.BoolValue not = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.not__)}},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation first_operation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.first_operation_)}},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.ComparisonOperatorType operator = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.operator__), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.operator__)}},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation second_operation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.second_operation_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 3, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.BoolValue not = 1;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.not__), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation first_operation = 2;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.first_operation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.ComparisonOperatorType operator = 3;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.operator__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation second_operation = 4;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.second_operation_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.extension_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::BoolValue>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* LogicalExpression_LogicalOperand_ComparisonExpression::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.BoolValue not = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::not_(this),
        _Internal::not_(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation first_operation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::first_operation(this),
        _Internal::first_operation(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.ComparisonOperatorType operator = 3;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_operator_(), target);
  }

  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation second_operation = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::second_operation(this),
        _Internal::second_operation(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
  return target;
}

::size_t LogicalExpression_LogicalOperand_ComparisonExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.BoolValue not = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.not__);
    }

    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation first_operation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.first_operation_);
    }

    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation second_operation = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.second_operation_);
    }

  }
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.ComparisonOperatorType operator = 3;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogicalExpression_LogicalOperand_ComparisonExpression::_class_data_ = {
    LogicalExpression_LogicalOperand_ComparisonExpression::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogicalExpression_LogicalOperand_ComparisonExpression::GetClassData() const {
  return &_class_data_;
}

void LogicalExpression_LogicalOperand_ComparisonExpression::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogicalExpression_LogicalOperand_ComparisonExpression*>(&to_msg);
  auto& from = static_cast<const LogicalExpression_LogicalOperand_ComparisonExpression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_not_()->::google::protobuf::BoolValue::MergeFrom(
          from._internal_not_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_first_operation()->::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation::MergeFrom(
          from._internal_first_operation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_second_operation()->::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation::MergeFrom(
          from._internal_second_operation());
    }
  }
  if (from._internal_operator_() != 0) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalExpression_LogicalOperand_ComparisonExpression::CopyFrom(const LogicalExpression_LogicalOperand_ComparisonExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogicalExpression_LogicalOperand_ComparisonExpression::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogicalExpression_LogicalOperand_ComparisonExpression::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogicalExpression_LogicalOperand_ComparisonExpression::InternalSwap(LogicalExpression_LogicalOperand_ComparisonExpression* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.operator__)
      + sizeof(LogicalExpression_LogicalOperand_ComparisonExpression::_impl_.operator__)
      - PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand_ComparisonExpression, _impl_.not__)>(
          reinterpret_cast<char*>(&_impl_.not__),
          reinterpret_cast<char*>(&other->_impl_.not__));
}

::google::protobuf::Metadata LogicalExpression_LogicalOperand_ComparisonExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[2]);
}
// ===================================================================

class LogicalExpression_LogicalOperand::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalExpression_LogicalOperand>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand, _impl_._oneof_case_);
  static const ::google::protobuf::BoolValue& not_(const LogicalExpression_LogicalOperand* msg);
  static void set_has_not_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression& comparison_expression(const LogicalExpression_LogicalOperand* msg);
};

const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand::_Internal::not_(const LogicalExpression_LogicalOperand* msg) {
  return *msg->_impl_.not__;
}
const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression& LogicalExpression_LogicalOperand::_Internal::comparison_expression(const LogicalExpression_LogicalOperand* msg) {
  return *msg->_impl_.expression_function_.comparison_expression_;
}
void LogicalExpression_LogicalOperand::clear_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.not__ != nullptr) _impl_.not__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LogicalExpression_LogicalOperand::set_allocated_comparison_expression(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* comparison_expression) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expression_function();
  if (comparison_expression) {
    ::google::protobuf::Arena* submessage_arena = comparison_expression->GetArena();
    if (message_arena != submessage_arena) {
      comparison_expression = ::google::protobuf::internal::GetOwnedMessage(message_arena, comparison_expression, submessage_arena);
    }
    set_has_comparison_expression();
    _impl_.expression_function_.comparison_expression_ = comparison_expression;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.comparison_expression)
}
void LogicalExpression_LogicalOperand::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
LogicalExpression_LogicalOperand::LogicalExpression_LogicalOperand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression_LogicalOperand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extension_{visibility, arena, from.extension_},
        expression_function_{},
        _oneof_case_{from._oneof_case_[0]} {}

LogicalExpression_LogicalOperand::LogicalExpression_LogicalOperand(
    ::google::protobuf::Arena* arena,
    const LogicalExpression_LogicalOperand& from)
    : ::google::protobuf::Message(arena) {
  LogicalExpression_LogicalOperand* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.not__ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::BoolValue>(arena, *from._impl_.not__)
                : nullptr;
  switch (expression_function_case()) {
    case EXPRESSION_FUNCTION_NOT_SET:
      break;
      case kComparisonExpression:
        _impl_.expression_function_.comparison_expression_ = CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression>(arena, *from._impl_.expression_function_.comparison_expression_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression_LogicalOperand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extension_{visibility, arena},
        expression_function_{},
        _oneof_case_{} {}

inline void LogicalExpression_LogicalOperand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.not__ = {};
}
LogicalExpression_LogicalOperand::~LogicalExpression_LogicalOperand() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogicalExpression_LogicalOperand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.not__;
  if (has_expression_function()) {
    clear_expression_function();
  }
  _impl_.~Impl_();
}

void LogicalExpression_LogicalOperand::clear_expression_function() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (expression_function_case()) {
    case kComparisonExpression: {
      if (GetArena() == nullptr) {
        delete _impl_.expression_function_.comparison_expression_;
      }
      break;
    }
    case EXPRESSION_FUNCTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXPRESSION_FUNCTION_NOT_SET;
}


PROTOBUF_NOINLINE void LogicalExpression_LogicalOperand::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.not__ != nullptr);
    _impl_.not__->Clear();
  }
  clear_expression_function();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogicalExpression_LogicalOperand::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> LogicalExpression_LogicalOperand::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand, _impl_._has_bits_),
    0, // no _extensions_
    15, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950908,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LogicalExpression_LogicalOperand_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.BoolValue not = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand, _impl_.not__)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 2, PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.BoolValue not = 1;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand, _impl_.not__), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression comparison_expression = 2;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand, _impl_.expression_function_.comparison_expression_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression_LogicalOperand, _impl_.extension_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::BoolValue>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* LogicalExpression_LogicalOperand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.BoolValue not = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::not_(this),
        _Internal::not_(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression comparison_expression = 2;
  if (expression_function_case() == kComparisonExpression) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::comparison_expression(this),
        _Internal::comparison_expression(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
  return target;
}

::size_t LogicalExpression_LogicalOperand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .google.protobuf.BoolValue not = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.not__);
  }

  switch (expression_function_case()) {
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression comparison_expression = 2;
    case kComparisonExpression: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expression_function_.comparison_expression_);
      break;
    }
    case EXPRESSION_FUNCTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogicalExpression_LogicalOperand::_class_data_ = {
    LogicalExpression_LogicalOperand::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogicalExpression_LogicalOperand::GetClassData() const {
  return &_class_data_;
}

void LogicalExpression_LogicalOperand::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogicalExpression_LogicalOperand*>(&to_msg);
  auto& from = static_cast<const LogicalExpression_LogicalOperand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_not_()->::google::protobuf::BoolValue::MergeFrom(
        from._internal_not_());
  }
  switch (from.expression_function_case()) {
    case kComparisonExpression: {
      _this->_internal_mutable_comparison_expression()->::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression::MergeFrom(
          from._internal_comparison_expression());
      break;
    }
    case EXPRESSION_FUNCTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalExpression_LogicalOperand::CopyFrom(const LogicalExpression_LogicalOperand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogicalExpression_LogicalOperand::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogicalExpression_LogicalOperand::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogicalExpression_LogicalOperand::InternalSwap(LogicalExpression_LogicalOperand* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  swap(_impl_.not__, other->_impl_.not__);
  swap(_impl_.expression_function_, other->_impl_.expression_function_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata LogicalExpression_LogicalOperand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[3]);
}
// ===================================================================

class LogicalExpression::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalExpression>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_._has_bits_);
  static const ::google::protobuf::BoolValue& not_(const LogicalExpression* msg);
  static void set_has_not_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::BoolValue& LogicalExpression::_Internal::not_(const LogicalExpression* msg) {
  return *msg->_impl_.not__;
}
void LogicalExpression::clear_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.not__ != nullptr) _impl_.not__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LogicalExpression::clear_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_.Clear();
}
LogicalExpression::LogicalExpression(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        operand_{visibility, arena, from.operand_},
        extension_{visibility, arena, from.extension_} {}

LogicalExpression::LogicalExpression(
    ::google::protobuf::Arena* arena,
    const LogicalExpression& from)
    : ::google::protobuf::Message(arena) {
  LogicalExpression* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.not__ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::BoolValue>(arena, *from._impl_.not__)
                : nullptr;
  _impl_.operator__ = from._impl_.operator__;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.logicalexpression.LogicalExpression)
}
inline PROTOBUF_NDEBUG_INLINE LogicalExpression::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        operand_{visibility, arena},
        extension_{visibility, arena} {}

inline void LogicalExpression::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, not__),
           0,
           offsetof(Impl_, operator__) -
               offsetof(Impl_, not__) +
               sizeof(Impl_::operator__));
}
LogicalExpression::~LogicalExpression() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.logicalexpression.LogicalExpression)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogicalExpression::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.not__;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LogicalExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.logicalexpression.LogicalExpression)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operand_.Clear();
  _impl_.extension_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.not__ != nullptr);
    _impl_.not__->Clear();
  }
  _impl_.operator__ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogicalExpression::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 3, 0, 2> LogicalExpression::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_._has_bits_),
    0, // no _extensions_
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950904,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LogicalExpression_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.BoolValue not = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.not__)}},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperator operator = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LogicalExpression, _impl_.operator__), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.operator__)}},
    // repeated .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand operand = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.operand_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any extension = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 2, PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.extension_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.BoolValue not = 1;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.not__), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperator operator = 2;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.operator__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand operand = 3;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.operand_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension = 15;
    {PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.extension_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::BoolValue>()},
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* LogicalExpression::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.logicalexpression.LogicalExpression)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.BoolValue not = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::not_(this),
        _Internal::not_(this).GetCachedSize(), target, stream);
  }

  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperator operator = 2;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_operator_(), target);
  }

  // repeated .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand operand = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operand_size()); i < n; i++) {
    const auto& repfield = this->_internal_operand().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.logicalexpression.LogicalExpression)
  return target;
}

::size_t LogicalExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.logicalexpression.LogicalExpression)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand operand = 3;
  total_size += 1UL * this->_internal_operand_size();
  for (const auto& msg : this->_internal_operand()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .google.protobuf.Any extension = 15;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->_internal_extension()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .google.protobuf.BoolValue not = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.not__);
  }

  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperator operator = 2;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogicalExpression::_class_data_ = {
    LogicalExpression::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogicalExpression::GetClassData() const {
  return &_class_data_;
}

void LogicalExpression::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogicalExpression*>(&to_msg);
  auto& from = static_cast<const LogicalExpression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_operand()->MergeFrom(
      from._internal_operand());
  _this->_internal_mutable_extension()->MergeFrom(
      from._internal_extension());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_not_()->::google::protobuf::BoolValue::MergeFrom(
        from._internal_not_());
  }
  if (from._internal_operator_() != 0) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalExpression::CopyFrom(const LogicalExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.logicalexpression.LogicalExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogicalExpression::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogicalExpression::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogicalExpression::InternalSwap(LogicalExpression* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.operand_.InternalSwap(&other->_impl_.operand_);
  _impl_.extension_.InternalSwap(&other->_impl_.extension_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.operator__)
      + sizeof(LogicalExpression::_impl_.operator__)
      - PROTOBUF_FIELD_OFFSET(LogicalExpression, _impl_.not__)>(
          reinterpret_cast<char*>(&_impl_.not__),
          reinterpret_cast<char*>(&other->_impl_.not__));
}

::google::protobuf::Metadata LogicalExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace logicalexpression
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
