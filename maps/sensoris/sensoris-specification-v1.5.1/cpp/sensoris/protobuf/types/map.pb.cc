// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/map.proto

#include "sensoris/protobuf/types/map.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensoris {
namespace protobuf {
namespace types {
namespace map {

inline constexpr MapTilingScheme::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        urn_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MapTilingScheme::MapTilingScheme(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MapTilingSchemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapTilingSchemeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapTilingSchemeDefaultTypeInternal() {}
  union {
    MapTilingScheme _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapTilingSchemeDefaultTypeInternal _MapTilingScheme_default_instance_;

inline constexpr MapAttribute::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        urn_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MapAttribute::MapAttribute(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MapAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapAttributeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapAttributeDefaultTypeInternal() {}
  union {
    MapAttribute _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapAttributeDefaultTypeInternal _MapAttribute_default_instance_;

inline constexpr MapTiles::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tiling_scheme_{nullptr},
        tile_ids_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MapTiles::MapTiles(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MapTilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapTilesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapTilesDefaultTypeInternal() {}
  union {
    MapTiles _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapTilesDefaultTypeInternal _MapTiles_default_instance_;

inline constexpr MapAttributeAndValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attribute_{nullptr},
        values_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MapAttributeAndValue::MapAttributeAndValue(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MapAttributeAndValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapAttributeAndValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapAttributeAndValueDefaultTypeInternal() {}
  union {
    MapAttributeAndValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapAttributeAndValueDefaultTypeInternal _MapAttributeAndValue_default_instance_;
}  // namespace map
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
static ::_pb::Metadata file_level_metadata_sensoris_2fprotobuf_2ftypes_2fmap_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fmap_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensoris_2fprotobuf_2ftypes_2fmap_2eproto = nullptr;
const ::uint32_t TableStruct_sensoris_2fprotobuf_2ftypes_2fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapTilingScheme, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapTilingScheme, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapTilingScheme, _impl_.urn_),
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapTiles, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapTiles, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapTiles, _impl_.tiling_scheme_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapTiles, _impl_.tile_ids_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapAttribute, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapAttribute, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapAttribute, _impl_.urn_),
    0,
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapAttributeAndValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapAttributeAndValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapAttributeAndValue, _impl_.attribute_),
    PROTOBUF_FIELD_OFFSET(::sensoris::protobuf::types::map::MapAttributeAndValue, _impl_.values_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::sensoris::protobuf::types::map::MapTilingScheme)},
        {10, 20, -1, sizeof(::sensoris::protobuf::types::map::MapTiles)},
        {22, 31, -1, sizeof(::sensoris::protobuf::types::map::MapAttribute)},
        {32, 42, -1, sizeof(::sensoris::protobuf::types::map::MapAttributeAndValue)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sensoris::protobuf::types::map::_MapTilingScheme_default_instance_._instance,
    &::sensoris::protobuf::types::map::_MapTiles_default_instance_._instance,
    &::sensoris::protobuf::types::map::_MapAttribute_default_instance_._instance,
    &::sensoris::protobuf::types::map::_MapAttributeAndValue_default_instance_._instance,
};
const char descriptor_table_protodef_sensoris_2fprotobuf_2ftypes_2fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!sensoris/protobuf/types/map.proto\022\033sen"
    "soris.protobuf.types.map\032\036google/protobu"
    "f/wrappers.proto\032\"sensoris/protobuf/type"
    "s/base.proto\"A\n\017MapTilingScheme\022.\n\003urn\030\001"
    " \001(\0132!.sensoris.protobuf.types.base.Urn\""
    "\177\n\010MapTiles\022C\n\rtiling_scheme\030\001 \001(\0132,.sen"
    "soris.protobuf.types.map.MapTilingScheme"
    "\022.\n\010tile_ids\030\002 \001(\0132\034.google.protobuf.Str"
    "ingValue\">\n\014MapAttribute\022.\n\003urn\030\001 \001(\0132!."
    "sensoris.protobuf.types.base.Urn\"\202\001\n\024Map"
    "AttributeAndValue\022<\n\tattribute\030\001 \001(\0132).s"
    "ensoris.protobuf.types.map.MapAttribute\022"
    ",\n\006values\030\002 \001(\0132\034.google.protobuf.String"
    "ValueBY\n\026org.sensoris.types.mapB\020Sensori"
    "sMapTypesP\001Z(sensoris.org/specification/"
    "types/mapping\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
        &::descriptor_table_sensoris_2fprotobuf_2ftypes_2fbase_2eproto,
};
static ::absl::once_flag descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto = {
    false,
    false,
    624,
    descriptor_table_protodef_sensoris_2fprotobuf_2ftypes_2fmap_2eproto,
    "sensoris/protobuf/types/map.proto",
    &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_once,
    descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_sensoris_2fprotobuf_2ftypes_2fmap_2eproto::offsets,
    file_level_metadata_sensoris_2fprotobuf_2ftypes_2fmap_2eproto,
    file_level_enum_descriptors_sensoris_2fprotobuf_2ftypes_2fmap_2eproto,
    file_level_service_descriptors_sensoris_2fprotobuf_2ftypes_2fmap_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_getter() {
  return &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensoris_2fprotobuf_2ftypes_2fmap_2eproto(&descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto);
namespace sensoris {
namespace protobuf {
namespace types {
namespace map {
// ===================================================================

class MapTilingScheme::_Internal {
 public:
  using HasBits = decltype(std::declval<MapTilingScheme>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MapTilingScheme, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Urn& urn(const MapTilingScheme* msg);
  static void set_has_urn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Urn& MapTilingScheme::_Internal::urn(const MapTilingScheme* msg) {
  return *msg->_impl_.urn_;
}
void MapTilingScheme::clear_urn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.urn_ != nullptr) _impl_.urn_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MapTilingScheme::MapTilingScheme(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.map.MapTilingScheme)
}
inline PROTOBUF_NDEBUG_INLINE MapTilingScheme::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MapTilingScheme::MapTilingScheme(
    ::google::protobuf::Arena* arena,
    const MapTilingScheme& from)
    : ::google::protobuf::Message(arena) {
  MapTilingScheme* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.urn_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Urn>(arena, *from._impl_.urn_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.map.MapTilingScheme)
}
inline PROTOBUF_NDEBUG_INLINE MapTilingScheme::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MapTilingScheme::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.urn_ = {};
}
MapTilingScheme::~MapTilingScheme() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.map.MapTilingScheme)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MapTilingScheme::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.urn_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MapTilingScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.map.MapTilingScheme)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.urn_ != nullptr);
    _impl_.urn_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MapTilingScheme::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MapTilingScheme::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MapTilingScheme, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MapTilingScheme_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Urn urn = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapTilingScheme, _impl_.urn_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Urn urn = 1;
    {PROTOBUF_FIELD_OFFSET(MapTilingScheme, _impl_.urn_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Urn>()},
  }}, {{
  }},
};

::uint8_t* MapTilingScheme::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.map.MapTilingScheme)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Urn urn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::urn(this),
        _Internal::urn(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.map.MapTilingScheme)
  return target;
}

::size_t MapTilingScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.map.MapTilingScheme)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Urn urn = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.urn_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MapTilingScheme::_class_data_ = {
    MapTilingScheme::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MapTilingScheme::GetClassData() const {
  return &_class_data_;
}

void MapTilingScheme::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MapTilingScheme*>(&to_msg);
  auto& from = static_cast<const MapTilingScheme&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.map.MapTilingScheme)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_urn()->::sensoris::protobuf::types::base::Urn::MergeFrom(
        from._internal_urn());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MapTilingScheme::CopyFrom(const MapTilingScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.map.MapTilingScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MapTilingScheme::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MapTilingScheme::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MapTilingScheme::InternalSwap(MapTilingScheme* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.urn_, other->_impl_.urn_);
}

::google::protobuf::Metadata MapTilingScheme::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fmap_2eproto[0]);
}
// ===================================================================

class MapTiles::_Internal {
 public:
  using HasBits = decltype(std::declval<MapTiles>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MapTiles, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::map::MapTilingScheme& tiling_scheme(const MapTiles* msg);
  static void set_has_tiling_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::StringValue& tile_ids(const MapTiles* msg);
  static void set_has_tile_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::map::MapTilingScheme& MapTiles::_Internal::tiling_scheme(const MapTiles* msg) {
  return *msg->_impl_.tiling_scheme_;
}
const ::google::protobuf::StringValue& MapTiles::_Internal::tile_ids(const MapTiles* msg) {
  return *msg->_impl_.tile_ids_;
}
void MapTiles::clear_tile_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.tile_ids_ != nullptr) _impl_.tile_ids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MapTiles::MapTiles(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.map.MapTiles)
}
inline PROTOBUF_NDEBUG_INLINE MapTiles::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MapTiles::MapTiles(
    ::google::protobuf::Arena* arena,
    const MapTiles& from)
    : ::google::protobuf::Message(arena) {
  MapTiles* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.tiling_scheme_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::map::MapTilingScheme>(arena, *from._impl_.tiling_scheme_)
                : nullptr;
  _impl_.tile_ids_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.tile_ids_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.map.MapTiles)
}
inline PROTOBUF_NDEBUG_INLINE MapTiles::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MapTiles::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tiling_scheme_),
           0,
           offsetof(Impl_, tile_ids_) -
               offsetof(Impl_, tiling_scheme_) +
               sizeof(Impl_::tile_ids_));
}
MapTiles::~MapTiles() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.map.MapTiles)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MapTiles::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.tiling_scheme_;
  delete _impl_.tile_ids_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MapTiles::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.map.MapTiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.tiling_scheme_ != nullptr);
      _impl_.tiling_scheme_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.tile_ids_ != nullptr);
      _impl_.tile_ids_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MapTiles::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MapTiles::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MapTiles, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MapTiles_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.StringValue tile_ids = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MapTiles, _impl_.tile_ids_)}},
    // .sensoris.protobuf.types.map.MapTilingScheme tiling_scheme = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapTiles, _impl_.tiling_scheme_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.map.MapTilingScheme tiling_scheme = 1;
    {PROTOBUF_FIELD_OFFSET(MapTiles, _impl_.tiling_scheme_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue tile_ids = 2;
    {PROTOBUF_FIELD_OFFSET(MapTiles, _impl_.tile_ids_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::map::MapTilingScheme>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
  }}, {{
  }},
};

::uint8_t* MapTiles::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.map.MapTiles)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.map.MapTilingScheme tiling_scheme = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::tiling_scheme(this),
        _Internal::tiling_scheme(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue tile_ids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::tile_ids(this),
        _Internal::tile_ids(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.map.MapTiles)
  return target;
}

::size_t MapTiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.map.MapTiles)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.map.MapTilingScheme tiling_scheme = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.tiling_scheme_);
    }

    // .google.protobuf.StringValue tile_ids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.tile_ids_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MapTiles::_class_data_ = {
    MapTiles::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MapTiles::GetClassData() const {
  return &_class_data_;
}

void MapTiles::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MapTiles*>(&to_msg);
  auto& from = static_cast<const MapTiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.map.MapTiles)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tiling_scheme()->::sensoris::protobuf::types::map::MapTilingScheme::MergeFrom(
          from._internal_tiling_scheme());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tile_ids()->::google::protobuf::StringValue::MergeFrom(
          from._internal_tile_ids());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MapTiles::CopyFrom(const MapTiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.map.MapTiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MapTiles::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MapTiles::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MapTiles::InternalSwap(MapTiles* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapTiles, _impl_.tile_ids_)
      + sizeof(MapTiles::_impl_.tile_ids_)
      - PROTOBUF_FIELD_OFFSET(MapTiles, _impl_.tiling_scheme_)>(
          reinterpret_cast<char*>(&_impl_.tiling_scheme_),
          reinterpret_cast<char*>(&other->_impl_.tiling_scheme_));
}

::google::protobuf::Metadata MapTiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fmap_2eproto[1]);
}
// ===================================================================

class MapAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<MapAttribute>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MapAttribute, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::base::Urn& urn(const MapAttribute* msg);
  static void set_has_urn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sensoris::protobuf::types::base::Urn& MapAttribute::_Internal::urn(const MapAttribute* msg) {
  return *msg->_impl_.urn_;
}
void MapAttribute::clear_urn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.urn_ != nullptr) _impl_.urn_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MapAttribute::MapAttribute(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.map.MapAttribute)
}
inline PROTOBUF_NDEBUG_INLINE MapAttribute::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MapAttribute::MapAttribute(
    ::google::protobuf::Arena* arena,
    const MapAttribute& from)
    : ::google::protobuf::Message(arena) {
  MapAttribute* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.urn_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::base::Urn>(arena, *from._impl_.urn_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.map.MapAttribute)
}
inline PROTOBUF_NDEBUG_INLINE MapAttribute::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MapAttribute::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.urn_ = {};
}
MapAttribute::~MapAttribute() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.map.MapAttribute)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MapAttribute::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.urn_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MapAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.map.MapAttribute)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.urn_ != nullptr);
    _impl_.urn_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MapAttribute::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MapAttribute::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MapAttribute, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MapAttribute_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .sensoris.protobuf.types.base.Urn urn = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapAttribute, _impl_.urn_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.base.Urn urn = 1;
    {PROTOBUF_FIELD_OFFSET(MapAttribute, _impl_.urn_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::base::Urn>()},
  }}, {{
  }},
};

::uint8_t* MapAttribute::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.map.MapAttribute)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.base.Urn urn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::urn(this),
        _Internal::urn(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.map.MapAttribute)
  return target;
}

::size_t MapAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.map.MapAttribute)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Urn urn = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.urn_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MapAttribute::_class_data_ = {
    MapAttribute::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MapAttribute::GetClassData() const {
  return &_class_data_;
}

void MapAttribute::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MapAttribute*>(&to_msg);
  auto& from = static_cast<const MapAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.map.MapAttribute)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_urn()->::sensoris::protobuf::types::base::Urn::MergeFrom(
        from._internal_urn());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MapAttribute::CopyFrom(const MapAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.map.MapAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MapAttribute::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MapAttribute::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MapAttribute::InternalSwap(MapAttribute* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.urn_, other->_impl_.urn_);
}

::google::protobuf::Metadata MapAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fmap_2eproto[2]);
}
// ===================================================================

class MapAttributeAndValue::_Internal {
 public:
  using HasBits = decltype(std::declval<MapAttributeAndValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MapAttributeAndValue, _impl_._has_bits_);
  static const ::sensoris::protobuf::types::map::MapAttribute& attribute(const MapAttributeAndValue* msg);
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::StringValue& values(const MapAttributeAndValue* msg);
  static void set_has_values(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sensoris::protobuf::types::map::MapAttribute& MapAttributeAndValue::_Internal::attribute(const MapAttributeAndValue* msg) {
  return *msg->_impl_.attribute_;
}
const ::google::protobuf::StringValue& MapAttributeAndValue::_Internal::values(const MapAttributeAndValue* msg) {
  return *msg->_impl_.values_;
}
void MapAttributeAndValue::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.values_ != nullptr) _impl_.values_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MapAttributeAndValue::MapAttributeAndValue(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.map.MapAttributeAndValue)
}
inline PROTOBUF_NDEBUG_INLINE MapAttributeAndValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MapAttributeAndValue::MapAttributeAndValue(
    ::google::protobuf::Arena* arena,
    const MapAttributeAndValue& from)
    : ::google::protobuf::Message(arena) {
  MapAttributeAndValue* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attribute_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::sensoris::protobuf::types::map::MapAttribute>(arena, *from._impl_.attribute_)
                : nullptr;
  _impl_.values_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::StringValue>(arena, *from._impl_.values_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.map.MapAttributeAndValue)
}
inline PROTOBUF_NDEBUG_INLINE MapAttributeAndValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MapAttributeAndValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, attribute_),
           0,
           offsetof(Impl_, values_) -
               offsetof(Impl_, attribute_) +
               sizeof(Impl_::values_));
}
MapAttributeAndValue::~MapAttributeAndValue() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.map.MapAttributeAndValue)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MapAttributeAndValue::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attribute_;
  delete _impl_.values_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MapAttributeAndValue::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.map.MapAttributeAndValue)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.attribute_ != nullptr);
      _impl_.attribute_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.values_ != nullptr);
      _impl_.values_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MapAttributeAndValue::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MapAttributeAndValue::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MapAttributeAndValue, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MapAttributeAndValue_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.StringValue values = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MapAttributeAndValue, _impl_.values_)}},
    // .sensoris.protobuf.types.map.MapAttribute attribute = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapAttributeAndValue, _impl_.attribute_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensoris.protobuf.types.map.MapAttribute attribute = 1;
    {PROTOBUF_FIELD_OFFSET(MapAttributeAndValue, _impl_.attribute_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.StringValue values = 2;
    {PROTOBUF_FIELD_OFFSET(MapAttributeAndValue, _impl_.values_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sensoris::protobuf::types::map::MapAttribute>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::StringValue>()},
  }}, {{
  }},
};

::uint8_t* MapAttributeAndValue::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.map.MapAttributeAndValue)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .sensoris.protobuf.types.map.MapAttribute attribute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue values = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::values(this),
        _Internal::values(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.map.MapAttributeAndValue)
  return target;
}

::size_t MapAttributeAndValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.map.MapAttributeAndValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .sensoris.protobuf.types.map.MapAttribute attribute = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attribute_);
    }

    // .google.protobuf.StringValue values = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.values_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MapAttributeAndValue::_class_data_ = {
    MapAttributeAndValue::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MapAttributeAndValue::GetClassData() const {
  return &_class_data_;
}

void MapAttributeAndValue::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MapAttributeAndValue*>(&to_msg);
  auto& from = static_cast<const MapAttributeAndValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.map.MapAttributeAndValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_attribute()->::sensoris::protobuf::types::map::MapAttribute::MergeFrom(
          from._internal_attribute());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_values()->::google::protobuf::StringValue::MergeFrom(
          from._internal_values());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MapAttributeAndValue::CopyFrom(const MapAttributeAndValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.map.MapAttributeAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MapAttributeAndValue::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MapAttributeAndValue::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MapAttributeAndValue::InternalSwap(MapAttributeAndValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapAttributeAndValue, _impl_.values_)
      + sizeof(MapAttributeAndValue::_impl_.values_)
      - PROTOBUF_FIELD_OFFSET(MapAttributeAndValue, _impl_.attribute_)>(
          reinterpret_cast<char*>(&_impl_.attribute_),
          reinterpret_cast<char*>(&other->_impl_.attribute_));
}

::google::protobuf::Metadata MapAttributeAndValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_getter, &descriptor_table_sensoris_2fprotobuf_2ftypes_2fmap_2eproto_once,
      file_level_metadata_sensoris_2fprotobuf_2ftypes_2fmap_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace map
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
