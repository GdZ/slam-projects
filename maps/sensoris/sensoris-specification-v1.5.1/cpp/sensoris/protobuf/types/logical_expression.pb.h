/**
 * Copyright (c) 2017-2022 SENSORIS Innovation Platform hosted by ERTICO - ITS Europe.
 *
 * This program and the accompanying materials are made available under the terms of the Creative Commons Attribution-NoDerivatives 4.0 International license which accompanies this distribution, and is available at https://creativecommons.org/licenses/by-nd/4.0/legalcode.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/logical_expression.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "google/protobuf/wrappers.pb.h"
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto;
namespace sensoris {
namespace protobuf {
namespace types {
namespace logicalexpression {
class LogicalExpression;
struct LogicalExpressionDefaultTypeInternal;
extern LogicalExpressionDefaultTypeInternal _LogicalExpression_default_instance_;
class LogicalExpression_LogicalOperand;
struct LogicalExpression_LogicalOperandDefaultTypeInternal;
extern LogicalExpression_LogicalOperandDefaultTypeInternal _LogicalExpression_LogicalOperand_default_instance_;
class LogicalExpression_LogicalOperand_ComparisonExpression;
struct LogicalExpression_LogicalOperand_ComparisonExpressionDefaultTypeInternal;
extern LogicalExpression_LogicalOperand_ComparisonExpressionDefaultTypeInternal _LogicalExpression_LogicalOperand_ComparisonExpression_default_instance_;
class LogicalExpression_LogicalOperand_ComparisonExpression_Operation;
struct LogicalExpression_LogicalOperand_ComparisonExpression_OperationDefaultTypeInternal;
extern LogicalExpression_LogicalOperand_ComparisonExpression_OperationDefaultTypeInternal _LogicalExpression_LogicalOperand_ComparisonExpression_Operation_default_instance_;
class LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand;
struct LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperandDefaultTypeInternal;
extern LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperandDefaultTypeInternal _LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand_default_instance_;
}  // namespace logicalexpression
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensoris {
namespace protobuf {
namespace types {
namespace logicalexpression {
enum LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType : int {
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_UNKNOWN_OPERATION_TYPE = 0,
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_NO_OPERATION = 1,
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_SUM = 2,
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_SUBTRACTION = 3,
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_MULTIPLICATION = 4,
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_DIVISION = 5,
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_IsValid(int value);
extern const uint32_t LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_internal_data_[];
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_OperationType_MIN = static_cast<LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType>(0);
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_OperationType_MAX = static_cast<LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType>(5);
constexpr int LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_OperationType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_descriptor();
template <typename T>
const std::string& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_Name(T value) {
  static_assert(std::is_same<T, LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OperationType_Name().");
  return LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_Name(static_cast<LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType>(value));
}
template <>
inline const std::string& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_Name(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_Parse(absl::string_view name, LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType>(
      LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_descriptor(), name, value);
}
enum LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType : int {
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_UNKNOWN_COMPARISON_OPERATOR_TYPE = 0,
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_EQUAL = 1,
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_NOT_EQUAL = 2,
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_GREATER = 3,
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_LESS = 4,
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_GREATER_OR_EQUAL = 5,
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_LESS_OR_EQUAL = 6,
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_IsValid(int value);
extern const uint32_t LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_internal_data_[];
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_ComparisonOperatorType_MIN = static_cast<LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType>(0);
constexpr LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_ComparisonOperatorType_MAX = static_cast<LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType>(6);
constexpr int LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_ComparisonOperatorType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_descriptor();
template <typename T>
const std::string& LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_Name(T value) {
  static_assert(std::is_same<T, LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ComparisonOperatorType_Name().");
  return LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_Name(static_cast<LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType>(value));
}
template <>
inline const std::string& LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_Name(LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_Parse(absl::string_view name, LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType>(
      LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_descriptor(), name, value);
}
enum LogicalExpression_LogicalOperator : int {
  LogicalExpression_LogicalOperator_UNKNOWN_LOGICAL_OPERATOR = 0,
  LogicalExpression_LogicalOperator_AND = 1,
  LogicalExpression_LogicalOperator_OR = 2,
  LogicalExpression_LogicalOperator_LogicalExpression_LogicalOperator_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogicalExpression_LogicalOperator_LogicalExpression_LogicalOperator_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LogicalExpression_LogicalOperator_IsValid(int value);
extern const uint32_t LogicalExpression_LogicalOperator_internal_data_[];
constexpr LogicalExpression_LogicalOperator LogicalExpression_LogicalOperator_LogicalOperator_MIN = static_cast<LogicalExpression_LogicalOperator>(0);
constexpr LogicalExpression_LogicalOperator LogicalExpression_LogicalOperator_LogicalOperator_MAX = static_cast<LogicalExpression_LogicalOperator>(2);
constexpr int LogicalExpression_LogicalOperator_LogicalOperator_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
LogicalExpression_LogicalOperator_descriptor();
template <typename T>
const std::string& LogicalExpression_LogicalOperator_Name(T value) {
  static_assert(std::is_same<T, LogicalExpression_LogicalOperator>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LogicalOperator_Name().");
  return LogicalExpression_LogicalOperator_Name(static_cast<LogicalExpression_LogicalOperator>(value));
}
template <>
inline const std::string& LogicalExpression_LogicalOperator_Name(LogicalExpression_LogicalOperator value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LogicalExpression_LogicalOperator_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool LogicalExpression_LogicalOperator_Parse(absl::string_view name, LogicalExpression_LogicalOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogicalExpression_LogicalOperator>(
      LogicalExpression_LogicalOperator_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand) */ {
 public:
  inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand() : LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(nullptr) {}
  ~LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(::google::protobuf::internal::ConstantInitialized);

  inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& from)
      : LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(nullptr, from) {}
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand&& from) noexcept
    : LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand() {
    *this = ::std::move(from);
  }

  inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& operator=(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& operator=(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& default_instance() {
    return *internal_default_instance();
  }
  enum OperandCase {
    kInt64ValueAndExponent = 1,
    kBoolValue = 2,
    kStringValue = 3,
    kBytesValue = 4,
    kEventFieldValue = 5,
    OPERAND_NOT_SET = 0,
  };

  static inline const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* internal_default_instance() {
    return reinterpret_cast<const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(
               &_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& a, LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& from) {
    LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand";
  }
  protected:
  explicit LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(::google::protobuf::Arena* arena);
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand(::google::protobuf::Arena* arena, const LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 15,
    kInt64ValueAndExponentFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kStringValueFieldNumber = 3,
    kBytesValueFieldNumber = 4,
    kEventFieldValueFieldNumber = 5,
  };
  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension();
  public:
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;
  // .sensoris.protobuf.types.base.Int64ValueAndExponent int64_value_and_exponent = 1;
  bool has_int64_value_and_exponent() const;
  private:
  bool _internal_has_int64_value_and_exponent() const;

  public:
  void clear_int64_value_and_exponent() ;
  const ::sensoris::protobuf::types::base::Int64ValueAndExponent& int64_value_and_exponent() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::Int64ValueAndExponent* release_int64_value_and_exponent();
  ::sensoris::protobuf::types::base::Int64ValueAndExponent* mutable_int64_value_and_exponent();
  void set_allocated_int64_value_and_exponent(::sensoris::protobuf::types::base::Int64ValueAndExponent* value);
  void unsafe_arena_set_allocated_int64_value_and_exponent(::sensoris::protobuf::types::base::Int64ValueAndExponent* value);
  ::sensoris::protobuf::types::base::Int64ValueAndExponent* unsafe_arena_release_int64_value_and_exponent();

  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndExponent& _internal_int64_value_and_exponent() const;
  ::sensoris::protobuf::types::base::Int64ValueAndExponent* _internal_mutable_int64_value_and_exponent();

  public:
  // .google.protobuf.BoolValue bool_value = 2;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;

  public:
  void clear_bool_value() ;
  const ::google::protobuf::BoolValue& bool_value() const;
  PROTOBUF_NODISCARD ::google::protobuf::BoolValue* release_bool_value();
  ::google::protobuf::BoolValue* mutable_bool_value();
  void set_allocated_bool_value(::google::protobuf::BoolValue* value);
  void unsafe_arena_set_allocated_bool_value(::google::protobuf::BoolValue* value);
  ::google::protobuf::BoolValue* unsafe_arena_release_bool_value();

  private:
  const ::google::protobuf::BoolValue& _internal_bool_value() const;
  ::google::protobuf::BoolValue* _internal_mutable_bool_value();

  public:
  // .google.protobuf.StringValue string_value = 3;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;

  public:
  void clear_string_value() ;
  const ::google::protobuf::StringValue& string_value() const;
  PROTOBUF_NODISCARD ::google::protobuf::StringValue* release_string_value();
  ::google::protobuf::StringValue* mutable_string_value();
  void set_allocated_string_value(::google::protobuf::StringValue* value);
  void unsafe_arena_set_allocated_string_value(::google::protobuf::StringValue* value);
  ::google::protobuf::StringValue* unsafe_arena_release_string_value();

  private:
  const ::google::protobuf::StringValue& _internal_string_value() const;
  ::google::protobuf::StringValue* _internal_mutable_string_value();

  public:
  // .google.protobuf.BytesValue bytes_value = 4;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;

  public:
  void clear_bytes_value() ;
  const ::google::protobuf::BytesValue& bytes_value() const;
  PROTOBUF_NODISCARD ::google::protobuf::BytesValue* release_bytes_value();
  ::google::protobuf::BytesValue* mutable_bytes_value();
  void set_allocated_bytes_value(::google::protobuf::BytesValue* value);
  void unsafe_arena_set_allocated_bytes_value(::google::protobuf::BytesValue* value);
  ::google::protobuf::BytesValue* unsafe_arena_release_bytes_value();

  private:
  const ::google::protobuf::BytesValue& _internal_bytes_value() const;
  ::google::protobuf::BytesValue* _internal_mutable_bytes_value();

  public:
  // .sensoris.protobuf.types.base.AbsoluteOrExtensionPath event_field_value = 5;
  bool has_event_field_value() const;
  private:
  bool _internal_has_event_field_value() const;

  public:
  void clear_event_field_value() ;
  const ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath& event_field_value() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* release_event_field_value();
  ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* mutable_event_field_value();
  void set_allocated_event_field_value(::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* value);
  void unsafe_arena_set_allocated_event_field_value(::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* value);
  ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* unsafe_arena_release_event_field_value();

  private:
  const ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath& _internal_event_field_value() const;
  ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* _internal_mutable_event_field_value();

  public:
  void clear_operand();
  OperandCase operand_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand)
 private:
  class _Internal;
  void set_has_int64_value_and_exponent();
  void set_has_bool_value();
  void set_has_string_value();
  void set_has_bytes_value();
  void set_has_event_field_value();

  inline bool has_operand() const;
  inline void clear_has_operand();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 6, 6,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
    union OperandUnion {
      constexpr OperandUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sensoris::protobuf::types::base::Int64ValueAndExponent* int64_value_and_exponent_;
      ::google::protobuf::BoolValue* bool_value_;
      ::google::protobuf::StringValue* string_value_;
      ::google::protobuf::BytesValue* bytes_value_;
      ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* event_field_value_;
    } operand_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto;
};// -------------------------------------------------------------------

class LogicalExpression_LogicalOperand_ComparisonExpression_Operation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation) */ {
 public:
  inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation() : LogicalExpression_LogicalOperand_ComparisonExpression_Operation(nullptr) {}
  ~LogicalExpression_LogicalOperand_ComparisonExpression_Operation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpression_Operation(::google::protobuf::internal::ConstantInitialized);

  inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation& from)
      : LogicalExpression_LogicalOperand_ComparisonExpression_Operation(nullptr, from) {}
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation(LogicalExpression_LogicalOperand_ComparisonExpression_Operation&& from) noexcept
    : LogicalExpression_LogicalOperand_ComparisonExpression_Operation() {
    *this = ::std::move(from);
  }

  inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation& operator=(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation& operator=(LogicalExpression_LogicalOperand_ComparisonExpression_Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalExpression_LogicalOperand_ComparisonExpression_Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalExpression_LogicalOperand_ComparisonExpression_Operation* internal_default_instance() {
    return reinterpret_cast<const LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(
               &_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation& a, LogicalExpression_LogicalOperand_ComparisonExpression_Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalExpression_LogicalOperand_ComparisonExpression_Operation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalExpression_LogicalOperand_ComparisonExpression_Operation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogicalExpression_LogicalOperand_ComparisonExpression_Operation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogicalExpression_LogicalOperand_ComparisonExpression_Operation& from) {
    LogicalExpression_LogicalOperand_ComparisonExpression_Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogicalExpression_LogicalOperand_ComparisonExpression_Operation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation";
  }
  protected:
  explicit LogicalExpression_LogicalOperand_ComparisonExpression_Operation(::google::protobuf::Arena* arena);
  LogicalExpression_LogicalOperand_ComparisonExpression_Operation(::google::protobuf::Arena* arena, const LogicalExpression_LogicalOperand_ComparisonExpression_Operation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Operand = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand;

  using OperationType = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType;
  static constexpr OperationType UNKNOWN_OPERATION_TYPE = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_UNKNOWN_OPERATION_TYPE;
  static constexpr OperationType NO_OPERATION = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_NO_OPERATION;
  static constexpr OperationType SUM = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_SUM;
  static constexpr OperationType SUBTRACTION = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_SUBTRACTION;
  static constexpr OperationType MULTIPLICATION = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_MULTIPLICATION;
  static constexpr OperationType DIVISION = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_DIVISION;
  static inline bool OperationType_IsValid(int value) {
    return LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_IsValid(value);
  }
  static constexpr OperationType OperationType_MIN = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_OperationType_MIN;
  static constexpr OperationType OperationType_MAX = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_OperationType_MAX;
  static constexpr int OperationType_ARRAYSIZE = LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* OperationType_descriptor() {
    return LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_descriptor();
  }
  template <typename T>
  static inline const std::string& OperationType_Name(T value) {
    return LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(absl::string_view name, OperationType* value) {
    return LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 15,
    kFirstOperandFieldNumber = 1,
    kSecondOperandFieldNumber = 3,
    kOperatorFieldNumber = 2,
  };
  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension();
  public:
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand first_operand = 1;
  bool has_first_operand() const;
  void clear_first_operand() ;
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& first_operand() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* release_first_operand();
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* mutable_first_operand();
  void set_allocated_first_operand(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* value);
  void unsafe_arena_set_allocated_first_operand(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* value);
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* unsafe_arena_release_first_operand();

  private:
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& _internal_first_operand() const;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* _internal_mutable_first_operand();

  public:
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand second_operand = 3;
  bool has_second_operand() const;
  void clear_second_operand() ;
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& second_operand() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* release_second_operand();
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* mutable_second_operand();
  void set_allocated_second_operand(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* value);
  void unsafe_arena_set_allocated_second_operand(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* value);
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* unsafe_arena_release_second_operand();

  private:
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& _internal_second_operand() const;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* _internal_mutable_second_operand();

  public:
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.OperationType operator = 2;
  void clear_operator_() ;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType operator_() const;
  void set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType value);

  private:
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType _internal_operator_() const;
  void _internal_set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
    ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* first_operand_;
    ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* second_operand_;
    int operator__;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto;
};// -------------------------------------------------------------------

class LogicalExpression_LogicalOperand_ComparisonExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression) */ {
 public:
  inline LogicalExpression_LogicalOperand_ComparisonExpression() : LogicalExpression_LogicalOperand_ComparisonExpression(nullptr) {}
  ~LogicalExpression_LogicalOperand_ComparisonExpression() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand_ComparisonExpression(::google::protobuf::internal::ConstantInitialized);

  inline LogicalExpression_LogicalOperand_ComparisonExpression(const LogicalExpression_LogicalOperand_ComparisonExpression& from)
      : LogicalExpression_LogicalOperand_ComparisonExpression(nullptr, from) {}
  LogicalExpression_LogicalOperand_ComparisonExpression(LogicalExpression_LogicalOperand_ComparisonExpression&& from) noexcept
    : LogicalExpression_LogicalOperand_ComparisonExpression() {
    *this = ::std::move(from);
  }

  inline LogicalExpression_LogicalOperand_ComparisonExpression& operator=(const LogicalExpression_LogicalOperand_ComparisonExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalExpression_LogicalOperand_ComparisonExpression& operator=(LogicalExpression_LogicalOperand_ComparisonExpression&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalExpression_LogicalOperand_ComparisonExpression& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalExpression_LogicalOperand_ComparisonExpression* internal_default_instance() {
    return reinterpret_cast<const LogicalExpression_LogicalOperand_ComparisonExpression*>(
               &_LogicalExpression_LogicalOperand_ComparisonExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogicalExpression_LogicalOperand_ComparisonExpression& a, LogicalExpression_LogicalOperand_ComparisonExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalExpression_LogicalOperand_ComparisonExpression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalExpression_LogicalOperand_ComparisonExpression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalExpression_LogicalOperand_ComparisonExpression* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalExpression_LogicalOperand_ComparisonExpression>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogicalExpression_LogicalOperand_ComparisonExpression& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogicalExpression_LogicalOperand_ComparisonExpression& from) {
    LogicalExpression_LogicalOperand_ComparisonExpression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogicalExpression_LogicalOperand_ComparisonExpression* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression";
  }
  protected:
  explicit LogicalExpression_LogicalOperand_ComparisonExpression(::google::protobuf::Arena* arena);
  LogicalExpression_LogicalOperand_ComparisonExpression(::google::protobuf::Arena* arena, const LogicalExpression_LogicalOperand_ComparisonExpression& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Operation = LogicalExpression_LogicalOperand_ComparisonExpression_Operation;

  using ComparisonOperatorType = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType;
  static constexpr ComparisonOperatorType UNKNOWN_COMPARISON_OPERATOR_TYPE = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_UNKNOWN_COMPARISON_OPERATOR_TYPE;
  static constexpr ComparisonOperatorType EQUAL = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_EQUAL;
  static constexpr ComparisonOperatorType NOT_EQUAL = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_NOT_EQUAL;
  static constexpr ComparisonOperatorType GREATER = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_GREATER;
  static constexpr ComparisonOperatorType LESS = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_LESS;
  static constexpr ComparisonOperatorType GREATER_OR_EQUAL = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_GREATER_OR_EQUAL;
  static constexpr ComparisonOperatorType LESS_OR_EQUAL = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_LESS_OR_EQUAL;
  static inline bool ComparisonOperatorType_IsValid(int value) {
    return LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_IsValid(value);
  }
  static constexpr ComparisonOperatorType ComparisonOperatorType_MIN = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_ComparisonOperatorType_MIN;
  static constexpr ComparisonOperatorType ComparisonOperatorType_MAX = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_ComparisonOperatorType_MAX;
  static constexpr int ComparisonOperatorType_ARRAYSIZE = LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_ComparisonOperatorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ComparisonOperatorType_descriptor() {
    return LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_descriptor();
  }
  template <typename T>
  static inline const std::string& ComparisonOperatorType_Name(T value) {
    return LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_Name(value);
  }
  static inline bool ComparisonOperatorType_Parse(absl::string_view name, ComparisonOperatorType* value) {
    return LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 15,
    kNotFieldNumber = 1,
    kFirstOperationFieldNumber = 2,
    kSecondOperationFieldNumber = 4,
    kOperatorFieldNumber = 3,
  };
  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension();
  public:
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;
  // .google.protobuf.BoolValue not = 1;
  bool has_not_() const;
  void clear_not_() ;
  const ::google::protobuf::BoolValue& not_() const;
  PROTOBUF_NODISCARD ::google::protobuf::BoolValue* release_not_();
  ::google::protobuf::BoolValue* mutable_not_();
  void set_allocated_not_(::google::protobuf::BoolValue* value);
  void unsafe_arena_set_allocated_not_(::google::protobuf::BoolValue* value);
  ::google::protobuf::BoolValue* unsafe_arena_release_not_();

  private:
  const ::google::protobuf::BoolValue& _internal_not_() const;
  ::google::protobuf::BoolValue* _internal_mutable_not_();

  public:
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation first_operation = 2;
  bool has_first_operation() const;
  void clear_first_operation() ;
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& first_operation() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* release_first_operation();
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* mutable_first_operation();
  void set_allocated_first_operation(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* value);
  void unsafe_arena_set_allocated_first_operation(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* value);
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* unsafe_arena_release_first_operation();

  private:
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& _internal_first_operation() const;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* _internal_mutable_first_operation();

  public:
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation second_operation = 4;
  bool has_second_operation() const;
  void clear_second_operation() ;
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& second_operation() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* release_second_operation();
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* mutable_second_operation();
  void set_allocated_second_operation(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* value);
  void unsafe_arena_set_allocated_second_operation(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* value);
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* unsafe_arena_release_second_operation();

  private:
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& _internal_second_operation() const;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* _internal_mutable_second_operation();

  public:
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.ComparisonOperatorType operator = 3;
  void clear_operator_() ;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType operator_() const;
  void set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType value);

  private:
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType _internal_operator_() const;
  void _internal_set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
    ::google::protobuf::BoolValue* not__;
    ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* first_operation_;
    ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* second_operation_;
    int operator__;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto;
};// -------------------------------------------------------------------

class LogicalExpression_LogicalOperand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand) */ {
 public:
  inline LogicalExpression_LogicalOperand() : LogicalExpression_LogicalOperand(nullptr) {}
  ~LogicalExpression_LogicalOperand() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogicalExpression_LogicalOperand(::google::protobuf::internal::ConstantInitialized);

  inline LogicalExpression_LogicalOperand(const LogicalExpression_LogicalOperand& from)
      : LogicalExpression_LogicalOperand(nullptr, from) {}
  LogicalExpression_LogicalOperand(LogicalExpression_LogicalOperand&& from) noexcept
    : LogicalExpression_LogicalOperand() {
    *this = ::std::move(from);
  }

  inline LogicalExpression_LogicalOperand& operator=(const LogicalExpression_LogicalOperand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalExpression_LogicalOperand& operator=(LogicalExpression_LogicalOperand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalExpression_LogicalOperand& default_instance() {
    return *internal_default_instance();
  }
  enum ExpressionFunctionCase {
    kComparisonExpression = 2,
    EXPRESSION_FUNCTION_NOT_SET = 0,
  };

  static inline const LogicalExpression_LogicalOperand* internal_default_instance() {
    return reinterpret_cast<const LogicalExpression_LogicalOperand*>(
               &_LogicalExpression_LogicalOperand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogicalExpression_LogicalOperand& a, LogicalExpression_LogicalOperand& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalExpression_LogicalOperand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalExpression_LogicalOperand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalExpression_LogicalOperand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalExpression_LogicalOperand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogicalExpression_LogicalOperand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogicalExpression_LogicalOperand& from) {
    LogicalExpression_LogicalOperand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogicalExpression_LogicalOperand* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand";
  }
  protected:
  explicit LogicalExpression_LogicalOperand(::google::protobuf::Arena* arena);
  LogicalExpression_LogicalOperand(::google::protobuf::Arena* arena, const LogicalExpression_LogicalOperand& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ComparisonExpression = LogicalExpression_LogicalOperand_ComparisonExpression;

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 15,
    kNotFieldNumber = 1,
    kComparisonExpressionFieldNumber = 2,
  };
  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension();
  public:
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;
  // .google.protobuf.BoolValue not = 1;
  bool has_not_() const;
  void clear_not_() ;
  const ::google::protobuf::BoolValue& not_() const;
  PROTOBUF_NODISCARD ::google::protobuf::BoolValue* release_not_();
  ::google::protobuf::BoolValue* mutable_not_();
  void set_allocated_not_(::google::protobuf::BoolValue* value);
  void unsafe_arena_set_allocated_not_(::google::protobuf::BoolValue* value);
  ::google::protobuf::BoolValue* unsafe_arena_release_not_();

  private:
  const ::google::protobuf::BoolValue& _internal_not_() const;
  ::google::protobuf::BoolValue* _internal_mutable_not_();

  public:
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression comparison_expression = 2;
  bool has_comparison_expression() const;
  private:
  bool _internal_has_comparison_expression() const;

  public:
  void clear_comparison_expression() ;
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression& comparison_expression() const;
  PROTOBUF_NODISCARD ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* release_comparison_expression();
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* mutable_comparison_expression();
  void set_allocated_comparison_expression(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* value);
  void unsafe_arena_set_allocated_comparison_expression(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* value);
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* unsafe_arena_release_comparison_expression();

  private:
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression& _internal_comparison_expression() const;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* _internal_mutable_comparison_expression();

  public:
  void clear_expression_function();
  ExpressionFunctionCase expression_function_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand)
 private:
  class _Internal;
  void set_has_comparison_expression();

  inline bool has_expression_function() const;
  inline void clear_has_expression_function();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
    ::google::protobuf::BoolValue* not__;
    union ExpressionFunctionUnion {
      constexpr ExpressionFunctionUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* comparison_expression_;
    } expression_function_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto;
};// -------------------------------------------------------------------

class LogicalExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.logicalexpression.LogicalExpression) */ {
 public:
  inline LogicalExpression() : LogicalExpression(nullptr) {}
  ~LogicalExpression() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogicalExpression(::google::protobuf::internal::ConstantInitialized);

  inline LogicalExpression(const LogicalExpression& from)
      : LogicalExpression(nullptr, from) {}
  LogicalExpression(LogicalExpression&& from) noexcept
    : LogicalExpression() {
    *this = ::std::move(from);
  }

  inline LogicalExpression& operator=(const LogicalExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalExpression& operator=(LogicalExpression&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalExpression& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalExpression* internal_default_instance() {
    return reinterpret_cast<const LogicalExpression*>(
               &_LogicalExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogicalExpression& a, LogicalExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalExpression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalExpression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalExpression* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalExpression>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogicalExpression& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogicalExpression& from) {
    LogicalExpression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogicalExpression* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sensoris.protobuf.types.logicalexpression.LogicalExpression";
  }
  protected:
  explicit LogicalExpression(::google::protobuf::Arena* arena);
  LogicalExpression(::google::protobuf::Arena* arena, const LogicalExpression& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using LogicalOperand = LogicalExpression_LogicalOperand;

  using LogicalOperator = LogicalExpression_LogicalOperator;
  static constexpr LogicalOperator UNKNOWN_LOGICAL_OPERATOR = LogicalExpression_LogicalOperator_UNKNOWN_LOGICAL_OPERATOR;
  static constexpr LogicalOperator AND = LogicalExpression_LogicalOperator_AND;
  static constexpr LogicalOperator OR = LogicalExpression_LogicalOperator_OR;
  static inline bool LogicalOperator_IsValid(int value) {
    return LogicalExpression_LogicalOperator_IsValid(value);
  }
  static constexpr LogicalOperator LogicalOperator_MIN = LogicalExpression_LogicalOperator_LogicalOperator_MIN;
  static constexpr LogicalOperator LogicalOperator_MAX = LogicalExpression_LogicalOperator_LogicalOperator_MAX;
  static constexpr int LogicalOperator_ARRAYSIZE = LogicalExpression_LogicalOperator_LogicalOperator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* LogicalOperator_descriptor() {
    return LogicalExpression_LogicalOperator_descriptor();
  }
  template <typename T>
  static inline const std::string& LogicalOperator_Name(T value) {
    return LogicalExpression_LogicalOperator_Name(value);
  }
  static inline bool LogicalOperator_Parse(absl::string_view name, LogicalOperator* value) {
    return LogicalExpression_LogicalOperator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOperandFieldNumber = 3,
    kExtensionFieldNumber = 15,
    kNotFieldNumber = 1,
    kOperatorFieldNumber = 2,
  };
  // repeated .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand operand = 3;
  int operand_size() const;
  private:
  int _internal_operand_size() const;

  public:
  void clear_operand() ;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand* mutable_operand(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand >*
      mutable_operand();
  private:
  const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand>& _internal_operand() const;
  ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand>* _internal_mutable_operand();
  public:
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand& operand(int index) const;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand* add_operand();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand >&
      operand() const;
  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension();
  public:
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;
  // .google.protobuf.BoolValue not = 1;
  bool has_not_() const;
  void clear_not_() ;
  const ::google::protobuf::BoolValue& not_() const;
  PROTOBUF_NODISCARD ::google::protobuf::BoolValue* release_not_();
  ::google::protobuf::BoolValue* mutable_not_();
  void set_allocated_not_(::google::protobuf::BoolValue* value);
  void unsafe_arena_set_allocated_not_(::google::protobuf::BoolValue* value);
  ::google::protobuf::BoolValue* unsafe_arena_release_not_();

  private:
  const ::google::protobuf::BoolValue& _internal_not_() const;
  ::google::protobuf::BoolValue* _internal_mutable_not_();

  public:
  // .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperator operator = 2;
  void clear_operator_() ;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator operator_() const;
  void set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator value);

  private:
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator _internal_operator_() const;
  void _internal_set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator value);

  public:
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.logicalexpression.LogicalExpression)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand > operand_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
    ::google::protobuf::BoolValue* not__;
    int operator__;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand

// .sensoris.protobuf.types.base.Int64ValueAndExponent int64_value_and_exponent = 1;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::has_int64_value_and_exponent() const {
  return operand_case() == kInt64ValueAndExponent;
}
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_has_int64_value_and_exponent() const {
  return operand_case() == kInt64ValueAndExponent;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_has_int64_value_and_exponent() {
  _impl_._oneof_case_[0] = kInt64ValueAndExponent;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndExponent* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::release_int64_value_and_exponent() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.int64_value_and_exponent)
  if (operand_case() == kInt64ValueAndExponent) {
    clear_has_operand();
    auto* temp = _impl_.operand_.int64_value_and_exponent_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operand_.int64_value_and_exponent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndExponent& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_int64_value_and_exponent() const {
  return operand_case() == kInt64ValueAndExponent ? *_impl_.operand_.int64_value_and_exponent_ : reinterpret_cast<::sensoris::protobuf::types::base::Int64ValueAndExponent&>(::sensoris::protobuf::types::base::_Int64ValueAndExponent_default_instance_);
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndExponent& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::int64_value_and_exponent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.int64_value_and_exponent)
  return _internal_int64_value_and_exponent();
}
inline ::sensoris::protobuf::types::base::Int64ValueAndExponent* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_release_int64_value_and_exponent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.int64_value_and_exponent)
  if (operand_case() == kInt64ValueAndExponent) {
    clear_has_operand();
    auto* temp = _impl_.operand_.int64_value_and_exponent_;
    _impl_.operand_.int64_value_and_exponent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_set_allocated_int64_value_and_exponent(::sensoris::protobuf::types::base::Int64ValueAndExponent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_operand();
  if (value) {
    set_has_int64_value_and_exponent();
    _impl_.operand_.int64_value_and_exponent_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.int64_value_and_exponent)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndExponent* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_mutable_int64_value_and_exponent() {
  if (operand_case() != kInt64ValueAndExponent) {
    clear_operand();
    set_has_int64_value_and_exponent();
    _impl_.operand_.int64_value_and_exponent_ = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndExponent>(GetArena());
  }
  return _impl_.operand_.int64_value_and_exponent_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndExponent* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::mutable_int64_value_and_exponent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::Int64ValueAndExponent* _msg = _internal_mutable_int64_value_and_exponent();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.int64_value_and_exponent)
  return _msg;
}

// .google.protobuf.BoolValue bool_value = 2;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::has_bool_value() const {
  return operand_case() == kBoolValue;
}
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_has_bool_value() const {
  return operand_case() == kBoolValue;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::release_bool_value() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bool_value)
  if (operand_case() == kBoolValue) {
    clear_has_operand();
    auto* temp = _impl_.operand_.bool_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operand_.bool_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_bool_value() const {
  return operand_case() == kBoolValue ? *_impl_.operand_.bool_value_ : reinterpret_cast<::google::protobuf::BoolValue&>(::google::protobuf::_BoolValue_default_instance_);
}
inline const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::bool_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bool_value)
  return _internal_bool_value();
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_release_bool_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bool_value)
  if (operand_case() == kBoolValue) {
    clear_has_operand();
    auto* temp = _impl_.operand_.bool_value_;
    _impl_.operand_.bool_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_set_allocated_bool_value(::google::protobuf::BoolValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_operand();
  if (value) {
    set_has_bool_value();
    _impl_.operand_.bool_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bool_value)
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_mutable_bool_value() {
  if (operand_case() != kBoolValue) {
    clear_operand();
    set_has_bool_value();
    _impl_.operand_.bool_value_ = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArena());
  }
  return _impl_.operand_.bool_value_;
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::mutable_bool_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::BoolValue* _msg = _internal_mutable_bool_value();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bool_value)
  return _msg;
}

// .google.protobuf.StringValue string_value = 3;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::has_string_value() const {
  return operand_case() == kStringValue;
}
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_has_string_value() const {
  return operand_case() == kStringValue;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline ::google::protobuf::StringValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::release_string_value() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.string_value)
  if (operand_case() == kStringValue) {
    clear_has_operand();
    auto* temp = _impl_.operand_.string_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operand_.string_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::StringValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_string_value() const {
  return operand_case() == kStringValue ? *_impl_.operand_.string_value_ : reinterpret_cast<::google::protobuf::StringValue&>(::google::protobuf::_StringValue_default_instance_);
}
inline const ::google::protobuf::StringValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::string_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.string_value)
  return _internal_string_value();
}
inline ::google::protobuf::StringValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.string_value)
  if (operand_case() == kStringValue) {
    clear_has_operand();
    auto* temp = _impl_.operand_.string_value_;
    _impl_.operand_.string_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_set_allocated_string_value(::google::protobuf::StringValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_operand();
  if (value) {
    set_has_string_value();
    _impl_.operand_.string_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.string_value)
}
inline ::google::protobuf::StringValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_mutable_string_value() {
  if (operand_case() != kStringValue) {
    clear_operand();
    set_has_string_value();
    _impl_.operand_.string_value_ = CreateMaybeMessage<::google::protobuf::StringValue>(GetArena());
  }
  return _impl_.operand_.string_value_;
}
inline ::google::protobuf::StringValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::StringValue* _msg = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.string_value)
  return _msg;
}

// .google.protobuf.BytesValue bytes_value = 4;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::has_bytes_value() const {
  return operand_case() == kBytesValue;
}
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_has_bytes_value() const {
  return operand_case() == kBytesValue;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_has_bytes_value() {
  _impl_._oneof_case_[0] = kBytesValue;
}
inline ::google::protobuf::BytesValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::release_bytes_value() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bytes_value)
  if (operand_case() == kBytesValue) {
    clear_has_operand();
    auto* temp = _impl_.operand_.bytes_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operand_.bytes_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::BytesValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_bytes_value() const {
  return operand_case() == kBytesValue ? *_impl_.operand_.bytes_value_ : reinterpret_cast<::google::protobuf::BytesValue&>(::google::protobuf::_BytesValue_default_instance_);
}
inline const ::google::protobuf::BytesValue& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::bytes_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bytes_value)
  return _internal_bytes_value();
}
inline ::google::protobuf::BytesValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_release_bytes_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bytes_value)
  if (operand_case() == kBytesValue) {
    clear_has_operand();
    auto* temp = _impl_.operand_.bytes_value_;
    _impl_.operand_.bytes_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_set_allocated_bytes_value(::google::protobuf::BytesValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_operand();
  if (value) {
    set_has_bytes_value();
    _impl_.operand_.bytes_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bytes_value)
}
inline ::google::protobuf::BytesValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_mutable_bytes_value() {
  if (operand_case() != kBytesValue) {
    clear_operand();
    set_has_bytes_value();
    _impl_.operand_.bytes_value_ = CreateMaybeMessage<::google::protobuf::BytesValue>(GetArena());
  }
  return _impl_.operand_.bytes_value_;
}
inline ::google::protobuf::BytesValue* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::mutable_bytes_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::BytesValue* _msg = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.bytes_value)
  return _msg;
}

// .sensoris.protobuf.types.base.AbsoluteOrExtensionPath event_field_value = 5;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::has_event_field_value() const {
  return operand_case() == kEventFieldValue;
}
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_has_event_field_value() const {
  return operand_case() == kEventFieldValue;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::set_has_event_field_value() {
  _impl_._oneof_case_[0] = kEventFieldValue;
}
inline ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::release_event_field_value() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.event_field_value)
  if (operand_case() == kEventFieldValue) {
    clear_has_operand();
    auto* temp = _impl_.operand_.event_field_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operand_.event_field_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_event_field_value() const {
  return operand_case() == kEventFieldValue ? *_impl_.operand_.event_field_value_ : reinterpret_cast<::sensoris::protobuf::types::base::AbsoluteOrExtensionPath&>(::sensoris::protobuf::types::base::_AbsoluteOrExtensionPath_default_instance_);
}
inline const ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::event_field_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.event_field_value)
  return _internal_event_field_value();
}
inline ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_release_event_field_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.event_field_value)
  if (operand_case() == kEventFieldValue) {
    clear_has_operand();
    auto* temp = _impl_.operand_.event_field_value_;
    _impl_.operand_.event_field_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::unsafe_arena_set_allocated_event_field_value(::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_operand();
  if (value) {
    set_has_event_field_value();
    _impl_.operand_.event_field_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.event_field_value)
}
inline ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_mutable_event_field_value() {
  if (operand_case() != kEventFieldValue) {
    clear_operand();
    set_has_event_field_value();
    _impl_.operand_.event_field_value_ = CreateMaybeMessage<::sensoris::protobuf::types::base::AbsoluteOrExtensionPath>(GetArena());
  }
  return _impl_.operand_.event_field_value_;
}
inline ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::mutable_event_field_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::base::AbsoluteOrExtensionPath* _msg = _internal_mutable_event_field_value();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.event_field_value)
  return _msg;
}

// repeated .google.protobuf.Any extension = 15;
inline int LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::extension_size() const {
  return _internal_extension_size();
}
inline ::google::protobuf::Any* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::google::protobuf::Any& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.extension)
  return _internal_extension().Get(index);
}
inline ::google::protobuf::Any* LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::has_operand() const {
  return operand_case() != OPERAND_NOT_SET;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::clear_has_operand() {
  _impl_._oneof_case_[0] = OPERAND_NOT_SET;
}
inline LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::OperandCase LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::operand_case() const {
  return LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand::OperandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// LogicalExpression_LogicalOperand_ComparisonExpression_Operation

// .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand first_operand = 1;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation::has_first_operand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_operand_ != nullptr);
  return value;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::clear_first_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_operand_ != nullptr) _impl_.first_operand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_first_operand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* p = _impl_.first_operand_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand&>(::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand_default_instance_);
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& LogicalExpression_LogicalOperand_ComparisonExpression_Operation::first_operand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.first_operand)
  return _internal_first_operand();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::unsafe_arena_set_allocated_first_operand(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_operand_);
  }
  _impl_.first_operand_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.first_operand)
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::release_first_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* released = _impl_.first_operand_;
  _impl_.first_operand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::unsafe_arena_release_first_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.first_operand)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* temp = _impl_.first_operand_;
  _impl_.first_operand_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_mutable_first_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.first_operand_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand>(GetArena());
    _impl_.first_operand_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(p);
  }
  return _impl_.first_operand_;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::mutable_first_operand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* _msg = _internal_mutable_first_operand();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.first_operand)
  return _msg;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::set_allocated_first_operand(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(_impl_.first_operand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.first_operand_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.first_operand)
}

// .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.OperationType operator = 2;
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::clear_operator_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operator__ = 0;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::operator_() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.operator)
  return _internal_operator_();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.operator)
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_operator_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType>(_impl_.operator__);
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.operator__ = value;
}

// .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.Operand second_operand = 3;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression_Operation::has_second_operand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.second_operand_ != nullptr);
  return value;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::clear_second_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.second_operand_ != nullptr) _impl_.second_operand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_second_operand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* p = _impl_.second_operand_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand&>(::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand_default_instance_);
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand& LogicalExpression_LogicalOperand_ComparisonExpression_Operation::second_operand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.second_operand)
  return _internal_second_operand();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::unsafe_arena_set_allocated_second_operand(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.second_operand_);
  }
  _impl_.second_operand_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.second_operand)
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::release_second_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* released = _impl_.second_operand_;
  _impl_.second_operand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::unsafe_arena_release_second_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.second_operand)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* temp = _impl_.second_operand_;
  _impl_.second_operand_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_mutable_second_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.second_operand_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand>(GetArena());
    _impl_.second_operand_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(p);
  }
  return _impl_.second_operand_;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::mutable_second_operand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* _msg = _internal_mutable_second_operand();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.second_operand)
  return _msg;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression_Operation::set_allocated_second_operand(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(_impl_.second_operand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.second_operand_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_Operand*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.second_operand)
}

// repeated .google.protobuf.Any extension = 15;
inline int LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int LogicalExpression_LogicalOperand_ComparisonExpression_Operation::extension_size() const {
  return _internal_extension_size();
}
inline ::google::protobuf::Any* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::google::protobuf::Any& LogicalExpression_LogicalOperand_ComparisonExpression_Operation::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.extension)
  return _internal_extension().Get(index);
}
inline ::google::protobuf::Any* LogicalExpression_LogicalOperand_ComparisonExpression_Operation::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& LogicalExpression_LogicalOperand_ComparisonExpression_Operation::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
LogicalExpression_LogicalOperand_ComparisonExpression_Operation::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

// -------------------------------------------------------------------

// LogicalExpression_LogicalOperand_ComparisonExpression

// .google.protobuf.BoolValue not = 1;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression::has_not_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.not__ != nullptr);
  return value;
}
inline const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand_ComparisonExpression::_internal_not_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::BoolValue* p = _impl_.not__;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::BoolValue&>(::google::protobuf::_BoolValue_default_instance_);
}
inline const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand_ComparisonExpression::not_() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.not)
  return _internal_not_();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::unsafe_arena_set_allocated_not_(::google::protobuf::BoolValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.not__);
  }
  _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.not)
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand_ComparisonExpression::release_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::BoolValue* released = _impl_.not__;
  _impl_.not__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand_ComparisonExpression::unsafe_arena_release_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.not)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::BoolValue* temp = _impl_.not__;
  _impl_.not__ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand_ComparisonExpression::_internal_mutable_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.not__ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArena());
    _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(p);
  }
  return _impl_.not__;
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand_ComparisonExpression::mutable_not_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::BoolValue* _msg = _internal_mutable_not_();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.not)
  return _msg;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::set_allocated_not_(::google::protobuf::BoolValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.not__);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.not)
}

// .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation first_operation = 2;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression::has_first_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_operation_ != nullptr);
  return value;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::clear_first_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.first_operation_ != nullptr) _impl_.first_operation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& LogicalExpression_LogicalOperand_ComparisonExpression::_internal_first_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* p = _impl_.first_operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation&>(::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_default_instance_);
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& LogicalExpression_LogicalOperand_ComparisonExpression::first_operation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.first_operation)
  return _internal_first_operation();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::unsafe_arena_set_allocated_first_operation(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_operation_);
  }
  _impl_.first_operation_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.first_operation)
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* LogicalExpression_LogicalOperand_ComparisonExpression::release_first_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* released = _impl_.first_operation_;
  _impl_.first_operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* LogicalExpression_LogicalOperand_ComparisonExpression::unsafe_arena_release_first_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.first_operation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* temp = _impl_.first_operation_;
  _impl_.first_operation_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* LogicalExpression_LogicalOperand_ComparisonExpression::_internal_mutable_first_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.first_operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation>(GetArena());
    _impl_.first_operation_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(p);
  }
  return _impl_.first_operation_;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* LogicalExpression_LogicalOperand_ComparisonExpression::mutable_first_operation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* _msg = _internal_mutable_first_operation();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.first_operation)
  return _msg;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::set_allocated_first_operation(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(_impl_.first_operation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.first_operation_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.first_operation)
}

// .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.ComparisonOperatorType operator = 3;
inline void LogicalExpression_LogicalOperand_ComparisonExpression::clear_operator_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operator__ = 0;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::operator_() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.operator)
  return _internal_operator_();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.operator)
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType LogicalExpression_LogicalOperand_ComparisonExpression::_internal_operator_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType>(_impl_.operator__);
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::_internal_set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.operator__ = value;
}

// .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.Operation second_operation = 4;
inline bool LogicalExpression_LogicalOperand_ComparisonExpression::has_second_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.second_operation_ != nullptr);
  return value;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::clear_second_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.second_operation_ != nullptr) _impl_.second_operation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& LogicalExpression_LogicalOperand_ComparisonExpression::_internal_second_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* p = _impl_.second_operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation&>(::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_ComparisonExpression_Operation_default_instance_);
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation& LogicalExpression_LogicalOperand_ComparisonExpression::second_operation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.second_operation)
  return _internal_second_operation();
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::unsafe_arena_set_allocated_second_operation(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.second_operation_);
  }
  _impl_.second_operation_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.second_operation)
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* LogicalExpression_LogicalOperand_ComparisonExpression::release_second_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* released = _impl_.second_operation_;
  _impl_.second_operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* LogicalExpression_LogicalOperand_ComparisonExpression::unsafe_arena_release_second_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.second_operation)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* temp = _impl_.second_operation_;
  _impl_.second_operation_ = nullptr;
  return temp;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* LogicalExpression_LogicalOperand_ComparisonExpression::_internal_mutable_second_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.second_operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation>(GetArena());
    _impl_.second_operation_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(p);
  }
  return _impl_.second_operation_;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* LogicalExpression_LogicalOperand_ComparisonExpression::mutable_second_operation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* _msg = _internal_mutable_second_operation();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.second_operation)
  return _msg;
}
inline void LogicalExpression_LogicalOperand_ComparisonExpression::set_allocated_second_operation(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(_impl_.second_operation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.second_operation_ = reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.second_operation)
}

// repeated .google.protobuf.Any extension = 15;
inline int LogicalExpression_LogicalOperand_ComparisonExpression::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int LogicalExpression_LogicalOperand_ComparisonExpression::extension_size() const {
  return _internal_extension_size();
}
inline ::google::protobuf::Any* LogicalExpression_LogicalOperand_ComparisonExpression::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* LogicalExpression_LogicalOperand_ComparisonExpression::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::google::protobuf::Any& LogicalExpression_LogicalOperand_ComparisonExpression::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.extension)
  return _internal_extension().Get(index);
}
inline ::google::protobuf::Any* LogicalExpression_LogicalOperand_ComparisonExpression::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& LogicalExpression_LogicalOperand_ComparisonExpression::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
LogicalExpression_LogicalOperand_ComparisonExpression::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
LogicalExpression_LogicalOperand_ComparisonExpression::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

// -------------------------------------------------------------------

// LogicalExpression_LogicalOperand

// .google.protobuf.BoolValue not = 1;
inline bool LogicalExpression_LogicalOperand::has_not_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.not__ != nullptr);
  return value;
}
inline const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand::_internal_not_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::BoolValue* p = _impl_.not__;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::BoolValue&>(::google::protobuf::_BoolValue_default_instance_);
}
inline const ::google::protobuf::BoolValue& LogicalExpression_LogicalOperand::not_() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.not)
  return _internal_not_();
}
inline void LogicalExpression_LogicalOperand::unsafe_arena_set_allocated_not_(::google::protobuf::BoolValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.not__);
  }
  _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.not)
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand::release_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::BoolValue* released = _impl_.not__;
  _impl_.not__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand::unsafe_arena_release_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.not)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::BoolValue* temp = _impl_.not__;
  _impl_.not__ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand::_internal_mutable_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.not__ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArena());
    _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(p);
  }
  return _impl_.not__;
}
inline ::google::protobuf::BoolValue* LogicalExpression_LogicalOperand::mutable_not_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::BoolValue* _msg = _internal_mutable_not_();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.not)
  return _msg;
}
inline void LogicalExpression_LogicalOperand::set_allocated_not_(::google::protobuf::BoolValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.not__);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.not)
}

// .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.ComparisonExpression comparison_expression = 2;
inline bool LogicalExpression_LogicalOperand::has_comparison_expression() const {
  return expression_function_case() == kComparisonExpression;
}
inline bool LogicalExpression_LogicalOperand::_internal_has_comparison_expression() const {
  return expression_function_case() == kComparisonExpression;
}
inline void LogicalExpression_LogicalOperand::set_has_comparison_expression() {
  _impl_._oneof_case_[0] = kComparisonExpression;
}
inline void LogicalExpression_LogicalOperand::clear_comparison_expression() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (expression_function_case() == kComparisonExpression) {
    if (GetArena() == nullptr) {
      delete _impl_.expression_function_.comparison_expression_;
    }
    clear_has_expression_function();
  }
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* LogicalExpression_LogicalOperand::release_comparison_expression() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.comparison_expression)
  if (expression_function_case() == kComparisonExpression) {
    clear_has_expression_function();
    auto* temp = _impl_.expression_function_.comparison_expression_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.expression_function_.comparison_expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression& LogicalExpression_LogicalOperand::_internal_comparison_expression() const {
  return expression_function_case() == kComparisonExpression ? *_impl_.expression_function_.comparison_expression_ : reinterpret_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression&>(::sensoris::protobuf::types::logicalexpression::_LogicalExpression_LogicalOperand_ComparisonExpression_default_instance_);
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression& LogicalExpression_LogicalOperand::comparison_expression() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.comparison_expression)
  return _internal_comparison_expression();
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* LogicalExpression_LogicalOperand::unsafe_arena_release_comparison_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.comparison_expression)
  if (expression_function_case() == kComparisonExpression) {
    clear_has_expression_function();
    auto* temp = _impl_.expression_function_.comparison_expression_;
    _impl_.expression_function_.comparison_expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogicalExpression_LogicalOperand::unsafe_arena_set_allocated_comparison_expression(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_expression_function();
  if (value) {
    set_has_comparison_expression();
    _impl_.expression_function_.comparison_expression_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.comparison_expression)
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* LogicalExpression_LogicalOperand::_internal_mutable_comparison_expression() {
  if (expression_function_case() != kComparisonExpression) {
    clear_expression_function();
    set_has_comparison_expression();
    _impl_.expression_function_.comparison_expression_ = CreateMaybeMessage<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression>(GetArena());
  }
  return _impl_.expression_function_.comparison_expression_;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* LogicalExpression_LogicalOperand::mutable_comparison_expression() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression* _msg = _internal_mutable_comparison_expression();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.comparison_expression)
  return _msg;
}

// repeated .google.protobuf.Any extension = 15;
inline int LogicalExpression_LogicalOperand::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int LogicalExpression_LogicalOperand::extension_size() const {
  return _internal_extension_size();
}
inline ::google::protobuf::Any* LogicalExpression_LogicalOperand::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* LogicalExpression_LogicalOperand::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::google::protobuf::Any& LogicalExpression_LogicalOperand::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.extension)
  return _internal_extension().Get(index);
}
inline ::google::protobuf::Any* LogicalExpression_LogicalOperand::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& LogicalExpression_LogicalOperand::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
LogicalExpression_LogicalOperand::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
LogicalExpression_LogicalOperand::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

inline bool LogicalExpression_LogicalOperand::has_expression_function() const {
  return expression_function_case() != EXPRESSION_FUNCTION_NOT_SET;
}
inline void LogicalExpression_LogicalOperand::clear_has_expression_function() {
  _impl_._oneof_case_[0] = EXPRESSION_FUNCTION_NOT_SET;
}
inline LogicalExpression_LogicalOperand::ExpressionFunctionCase LogicalExpression_LogicalOperand::expression_function_case() const {
  return LogicalExpression_LogicalOperand::ExpressionFunctionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// LogicalExpression

// .google.protobuf.BoolValue not = 1;
inline bool LogicalExpression::has_not_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.not__ != nullptr);
  return value;
}
inline const ::google::protobuf::BoolValue& LogicalExpression::_internal_not_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::BoolValue* p = _impl_.not__;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::BoolValue&>(::google::protobuf::_BoolValue_default_instance_);
}
inline const ::google::protobuf::BoolValue& LogicalExpression::not_() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.not)
  return _internal_not_();
}
inline void LogicalExpression::unsafe_arena_set_allocated_not_(::google::protobuf::BoolValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.not__);
  }
  _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.not)
}
inline ::google::protobuf::BoolValue* LogicalExpression::release_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::BoolValue* released = _impl_.not__;
  _impl_.not__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::BoolValue* LogicalExpression::unsafe_arena_release_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.logicalexpression.LogicalExpression.not)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::BoolValue* temp = _impl_.not__;
  _impl_.not__ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* LogicalExpression::_internal_mutable_not_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.not__ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArena());
    _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(p);
  }
  return _impl_.not__;
}
inline ::google::protobuf::BoolValue* LogicalExpression::mutable_not_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::BoolValue* _msg = _internal_mutable_not_();
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.not)
  return _msg;
}
inline void LogicalExpression::set_allocated_not_(::google::protobuf::BoolValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.not__);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.not__ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.logicalexpression.LogicalExpression.not)
}

// .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperator operator = 2;
inline void LogicalExpression::clear_operator_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operator__ = 0;
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator LogicalExpression::operator_() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.operator)
  return _internal_operator_();
}
inline void LogicalExpression::set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.logicalexpression.LogicalExpression.operator)
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator LogicalExpression::_internal_operator_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator>(_impl_.operator__);
}
inline void LogicalExpression::_internal_set_operator_(::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.operator__ = value;
}

// repeated .sensoris.protobuf.types.logicalexpression.LogicalExpression.LogicalOperand operand = 3;
inline int LogicalExpression::_internal_operand_size() const {
  return _internal_operand().size();
}
inline int LogicalExpression::operand_size() const {
  return _internal_operand_size();
}
inline void LogicalExpression::clear_operand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operand_.Clear();
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand* LogicalExpression::mutable_operand(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.operand)
  return _internal_mutable_operand()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand>* LogicalExpression::mutable_operand()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.operand)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_operand();
}
inline const ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand& LogicalExpression::operand(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.operand)
  return _internal_operand().Get(index);
}
inline ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand* LogicalExpression::add_operand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand* _add = _internal_mutable_operand()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.logicalexpression.LogicalExpression.operand)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand>& LogicalExpression::operand() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.operand)
  return _internal_operand();
}
inline const ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand>&
LogicalExpression::_internal_operand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.operand_;
}
inline ::google::protobuf::RepeatedPtrField<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand>*
LogicalExpression::_internal_mutable_operand() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.operand_;
}

// repeated .google.protobuf.Any extension = 15;
inline int LogicalExpression::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int LogicalExpression::extension_size() const {
  return _internal_extension_size();
}
inline ::google::protobuf::Any* LogicalExpression::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.logicalexpression.LogicalExpression.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* LogicalExpression::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.extension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extension();
}
inline const ::google::protobuf::Any& LogicalExpression::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.logicalexpression.LogicalExpression.extension)
  return _internal_extension().Get(index);
}
inline ::google::protobuf::Any* LogicalExpression::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.logicalexpression.LogicalExpression.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& LogicalExpression::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.logicalexpression.LogicalExpression.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
LogicalExpression::_internal_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
LogicalExpression::_internal_mutable_extension() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extension_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace logicalexpression
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType>() {
  return ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_Operation_OperationType_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType>() {
  return ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperand_ComparisonExpression_ComparisonOperatorType_descriptor();
}
template <>
struct is_proto_enum<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator>() {
  return ::sensoris::protobuf::types::logicalexpression::LogicalExpression_LogicalOperator_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2flogical_5fexpression_2eproto_2epb_2eh
